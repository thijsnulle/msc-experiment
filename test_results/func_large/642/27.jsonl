{"code": "sha256_hashes = {}\n    for filename in os.listdir(directory):\n        if re.match(pattern, filename):\n            file_path = os.path.join(directory, filename)\n            with open(file_path, \"rb\") as f:\n                content = f.read()\n                hash_value = hashlib.sha256(content)\n                hex_hash = binascii.hexlify(hash_value.digest())\n                sha256_hashes[file_path] = hex_hash\n    return sha256_hashes", "compilation_passed": true, "time": 0.0011980533599853516, "tests_passed": false, "error": "NotADirectoryError"}
{"code": "matched_files = {}\n    # loop through all directories in directory\n    for subdir, dirs, files in os.walk(directory):\n        for file in files:\n            # check if file matches the pattern\n            if re.match(pattern, file):\n                # if True, compute the SHA256 hash of the file's content\n                full_path = os.path.join(subdir, file)\n                with open(full_path, \"rb\") as f:\n                    data = f.read()\n                    # convert data to bytes and compute the SHA256 hash\n                    sha256_hash = hashlib.sha256(data).hexdigest()\n                    matched_files[full_path] = sha256_hash\n    return matched_files", "compilation_passed": true, "time": 0.0024352073669433594, "tests_passed": true, "error": null}
{"code": "matches = {}\n    # print(directory)\n    for root, dirs, files in os.walk(directory):\n        for name in files:\n            if re.match(pattern, name):\n                file_path = os.path.join(root, name)\n                print(file_path)\n                with open(file_path, 'rb') as f:\n                    data = f.read()\n                    h = hashlib.sha256()\n                    h.update(data)\n                    matches[file_path] = binascii.hexlify(h.digest()).decode()\n    return matches", "compilation_passed": true, "time": 0.0023491382598876953, "tests_passed": true, "error": null}
{"code": "res = {}\n    for dirpath, _, filenames in os.walk(directory):\n        for filename in filenames:\n            if re.fullmatch(pattern, filename):\n                file_path = os.path.join(dirpath, filename)\n                with open(file_path, 'rb') as f:\n                    sha256 = hashlib.new('sha256')\n                    buf = f.read(65536)\n                    while buf:\n                        sha256.update(buf)\n                        buf = f.read(65536)\n                    res[file_path] = binascii.hexlify(\n                        sha256.digest()).decode(\"utf-8\")\n    return res", "compilation_passed": true, "time": 0.0023908615112304688, "tests_passed": true, "error": null}
{"code": "result = {}\n    for root, dirs, files in os.walk(directory):\n        for filename in files:\n            if re.match(pattern, filename, re.IGNORECASE):\n                file_path = os.path.join(root, filename)\n                with open(file_path, 'rb') as f:\n                    h = hashlib.new('sha256')\n                    while True:\n                        chunk = f.read(65536)\n                        if not chunk:\n                            break\n                        h.update(chunk)\n                result[file_path] = binascii.hexlify(h.digest()).decode()\n    return result", "compilation_passed": true, "time": 0.0024831295013427734, "tests_passed": true, "error": null}
{"code": "files = {}\n    for root, dirs, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                file_path = os.path.join(root, file)\n                with open(file_path, 'rb') as f:\n                    data = f.read()\n                    files[file_path] = hashlib.sha256(data).hexdigest()\n    return files", "compilation_passed": true, "time": 0.0017940998077392578, "tests_passed": false, "error": "TypeError"}
{"code": "ret = {}\n    try:\n        for root, dirs, files in os.walk(directory):\n            for filename in files:\n                if re.match(pattern, filename):\n                    filepath = os.path.join(root, filename)\n                    with open(filepath, \"rb\") as f:\n                        file_contents = f.read()\n                        hash = hashlib.sha256(file_contents).hexdigest()\n                        ret[filepath] = hash\n    except OSError:\n        pass\n    return ret", "compilation_passed": true, "time": 0.002711772918701172, "tests_passed": true, "error": null}
{"code": "if not re.match(pattern, directory):\n        return {}\n    with open(directory, 'rb') as file:\n        file_bytes = file.read()\n    return {directory: hashlib.sha256(binascii.unhexlify(file_bytes)).hexdigest()}", "compilation_passed": true, "time": 0.0018048286437988281, "tests_passed": true, "error": null}
{"code": "result = {}\n    for root, dirs, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                with open(os.path.join(root, file), 'rb') as f:\n                    hash = hashlib.sha256(f.read()).hexdigest()\n                    result[file] = hash\n    return result", "compilation_passed": true, "time": 0.0017371177673339844, "tests_passed": true, "error": null}
{"code": "result = {}\n    for dirpath, _, filenames in os.walk(directory):\n        for filename in filenames:\n            if re.search(pattern, os.path.join(dirpath, filename), re.IGNORECASE):\n                with open(os.path.join(dirpath, filename), 'rb') as f:\n                    result[os.path.join(dirpath, filename)] = binascii.hexlify(hashlib.sha256(f.read()).digest()).decode()\n\n    return result", "compilation_passed": true, "time": 0.002410888671875, "tests_passed": true, "error": null}
{"code": "result = {}\n    for dirpath, dirnames, filenames in os.walk(directory):\n        for filename in filenames:\n            if re.match(pattern, filename):\n                filepath = os.path.join(dirpath, filename)\n                with open(filepath, 'rb') as file:\n                    content = file.read()\n                    sha256hash = hashlib.sha256(content).digest()\n                    result[filepath] = binascii.hexlify(sha256hash).decode('utf-8')\n    return result", "compilation_passed": true, "time": 0.0024869441986083984, "tests_passed": true, "error": null}
{"code": "ret_dict = {}\n\n    for root, dirs, files in os.walk(directory):\n        for file in files:\n            if not re.search(pattern, file, re.IGNORECASE):\n                continue\n\n            with open(os.path.join(root, file), 'rb') as f:\n                content = f.read()\n                sha256_hash = hashlib.sha256()\n                sha256_hash.update(content)\n                hash = binascii.hexlify(sha256_hash.digest())\n                ret_dict[file] = str(hash.decode())\n\n    return ret_dict", "compilation_passed": true, "time": 0.0018401145935058594, "tests_passed": true, "error": null}
{"code": "hash_dict = {}\n    for file in re.compile(pattern).findall(directory):\n        with open(f\"{OUTPUT_DIR}\\\\{file}\", 'rb') as f:\n            file_bytes = f.read()\n        hasher = hashlib.sha256()\n        hasher.update(file_bytes)\n        hash_dict[file] = binascii.hexlify(hasher.digest()).decode('utf-8')\n    return hash_dict", "compilation_passed": true, "time": 0.0016810894012451172, "tests_passed": true, "error": null}
{"code": "hashes = dict()\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file, re.IGNORECASE):\n                filepath = os.path.join(root, file)\n                with open(filepath, 'rb') as file:\n                    sha256_hash = hashlib.sha256()\n                    # Read the file in blocks to avoid memory issues for large files\n                    while True:\n                        block = file.read(1024 * 1024)  # Read 1MB at a time\n                        if not block:\n                            break\n                        sha256_hash.update(block)\n                    hex_sha256_hash = binascii.hexlify(sha256_hash.digest()).decode('utf-8')\n                    hashes[filepath] = hex_sha256_hash\n    return hashes", "compilation_passed": true, "time": 0.0024750232696533203, "tests_passed": true, "error": null}
{"code": "pattern = re.compile(pattern)\n    results = {}\n    for root, dirs, files in os.walk(directory):\n        for file in files:\n            file_path = os.path.join(root, file)\n            if pattern.search(file_path):\n                sha256_hash = hashlib.sha256()\n                with open(file_path, \"rb\") as f:\n                    for byte_block in iter(lambda: f.read(4096), b\"\"):\n                        sha256_hash.update(byte_block)\n                results[file_path] = binascii.hexlify(sha256_hash.digest()).decode('ascii')\n    return results", "compilation_passed": true, "time": 0.002424001693725586, "tests_passed": true, "error": null}
{"code": "# Search for files matching the pattern\n    results = {}\n\n    for filename in os.listdir(directory):\n        if re.match(pattern, filename):\n            # Open the file in binary mode and read its contents\n            with open(os.path.join(directory, filename), 'rb') as file:\n                contents = file.read()\n\n            # Compute the SHA256 hash of the file's contents\n            hash_object = hashlib.sha256(contents)\n            hash_hex = binascii.hexlify(hash_object.digest())\n\n            results[filename] = hash_hex.decode()\n\n    # Return the dictionary of file names and hashes\n    return results", "compilation_passed": true, "time": 0.0011508464813232422, "tests_passed": false, "error": "NotADirectoryError"}
{"code": "result = {}\n    for root, dirs, files in os.walk(directory):\n        for filename in files:\n            full_path = os.path.join(root, filename)\n            if re.search(pattern, full_path):\n                with open(full_path, 'rb') as f:\n                    sha256_hash = hashlib.sha256()\n                    while chunk := f.read(4096):\n                        sha256_hash.update(chunk)\n                    sha256_digest = binascii.hexlify(sha256_hash.digest())\n                    result[full_path] = sha256_digest.decode('ascii')\n    return result", "compilation_passed": true, "time": 0.0023870468139648438, "tests_passed": true, "error": null}
{"code": "result = {}\n    for filename in os.listdir(directory):\n        file_path = os.path.join(directory, filename)\n        if not os.path.isfile(file_path):\n            continue\n        if not re.match(pattern, filename):\n            continue\n        with open(file_path, 'rb') as f:\n            file_hash = hashlib.sha256()\n            while True:\n                data = f.read(4096)\n                if not data:\n                    break\n                file_hash.update(data)\n            result[file_path] = binascii.hexlify(file_hash.digest()).decode()\n    return result", "compilation_passed": true, "time": 0.0011699199676513672, "tests_passed": false, "error": "NotADirectoryError"}
{"code": "hash_dict = dict()\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                file_path = os.path.join(root, file)\n                try:\n                    with open(file_path, \"rb\") as file_handle:\n                        contents = file_handle.read()\n                    sha256_hash = hashlib.sha256(contents).digest()\n                    hash_dict[file_path] = binascii.hexlify(sha256_hash).decode('ascii')\n                except Exception as exc:\n                    print(exc)\n    return hash_dict", "compilation_passed": true, "time": 0.0023000240325927734, "tests_passed": true, "error": null}
{"code": "res_dict = {}\n\n    # Iterate over the files in the directory and its subdirectories using os.walk()\n    for dirpath, dirnames, filenames in os.walk(directory):\n        # Check each filename in the directory\n        for filename in filenames:\n            # Construct the full file path by joining the directory and filename\n            filepath = os.path.join(dirpath, filename)\n            # Check if the file matches the pattern using regular expression matching\n            if re.match(pattern, filename):\n                # Open the file in binary mode to read the bytes\n                with open(filepath, 'rb') as f:\n                    # Read the entire content of the file\n                    content = f.read()\n                    # Compute the SHA256 hash of the file content\n                    hash = hashlib.sha256(content).digest()\n                    # Encode the hash as a hexadecimal string\n                    hash_string = binascii.hexlify(hash).decode()\n                    # Add the file path and hash to the result dictionary\n                    res_dict[", "compilation_passed": false, "time": 0.00019502639770507812, "tests_passed": false, "error": "SyntaxError"}
{"code": "found_files = {}\n\n    for file in os.listdir(directory):\n        path = os.path.join(directory, file)\n        if os.path.isfile(path) and re.match(pattern, file):\n            with open(path, 'rb') as f:\n                content = f.read()\n                sha256_hash = hashlib.sha256()\n                sha256_hash.update(content)\n                found_files[path] = binascii.hexlify(sha256_hash.digest())\n    return found_files", "compilation_passed": true, "time": 0.0011758804321289062, "tests_passed": false, "error": "NotADirectoryError"}
{"code": "# Create empty dictionary to store results\n    result = {}\n    # Loop through files in directory\n    for dirpath, dirnames, filenames in os.walk(directory):\n        for filename in filenames:\n            # Skip non-matching files\n            if not re.match(pattern, filename):\n                continue\n            # Compute SHA256 hash of file's content\n            file_path = os.path.join(dirpath, filename)\n            with open(file_path, 'rb') as file:\n                content_hash = hashlib.sha256()\n                content_hash.update(file.read())\n            # Add file path and its SHA256 hash to results dictionary\n            result[file_path] = binascii.hexlify(content_hash.digest()).decode()\n    # Return results dictionary\n    return result", "compilation_passed": true, "time": 0.002370119094848633, "tests_passed": true, "error": null}
{"code": "output = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            file_path = os.path.join(root, file)\n            if re.match(pattern, file_path):\n                with open(file_path, \"rb\") as f:\n                    content = f.read()\n                    hash = hashlib.sha256(content).hexdigest()\n                    output[file_path] = hash\n    return output", "compilation_passed": true, "time": 0.0017199516296386719, "tests_passed": true, "error": null}
{"code": "result = {}\n    pattern_compiled = re.compile(pattern)\n    for root, _, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern_compiled, file):\n                file_path = os.path.join(root, file)\n                with open(file_path, \"rb\") as f:\n                    content = f.read()\n                    hash_object = hashlib.sha256(content)\n                    result[file_path] = binascii.hexlify(hash_object.digest()).decode()\n    return result", "compilation_passed": true, "time": 0.0024881362915039062, "tests_passed": true, "error": null}
{"code": "found_files = {}\n    for filename in os.listdir(directory):\n        if re.fullmatch(pattern, filename):\n            filepath = os.path.join(directory, filename)\n            try:\n                with open(filepath, \"rb\") as f:\n                    content_hash = hashlib.sha256()\n                    for chunk in iter(lambda: f.read(1024 * 1024), b''):\n                        content_hash.update(chunk)\n                    found_files[filepath] = binascii.hexlify(content_hash.digest()).decode('utf-8')\n            except Exception as e:\n                print(f\"Error computing hash for file '{filepath}': {str(e)}\")\n    return found_files", "compilation_passed": true, "time": 0.0012438297271728516, "tests_passed": false, "error": "NotADirectoryError"}
{"code": "result_dict = {}\n\n    for root, _, files in os.walk(directory):\n        for name in files:\n            if re.search(pattern, name):\n                file_path = os.path.join(root, name)\n                with open(file_path, \"rb\") as file:\n                    content = file.read()\n                    hash_sha256 = hashlib.sha256(content).hexdigest()\n                    result_dict[file_path] = hash_sha256\n\n    return result_dict", "compilation_passed": true, "time": 0.002437114715576172, "tests_passed": true, "error": null}
{"code": "files = {}\n    for root, dirs, files_in_dir in os.walk(directory):\n        for file_name in files_in_dir:\n            file_path = os.path.join(root, file_name)\n            if os.path.isfile(file_path) and re.match(pattern, file_path):\n                files[file_path] = hashlib.sha256(open(file_path, 'rb').read()).hexdigest()\n    return files", "compilation_passed": true, "time": 0.0018601417541503906, "tests_passed": true, "error": null}
{"code": "result = {}\n    for root, _, files in os.walk(directory):\n        for file in files:\n            file_path = os.path.join(root, file)\n            if re.search(pattern, file_path):\n                with open(file_path, 'rb') as f:\n                    content = f.read()\n                    sha256_hash = hashlib.sha256()\n                    sha256_hash.update(content)\n                    result[file_path] = binascii.hexlify(sha256_hash.digest()).decode()\n    return result", "compilation_passed": true, "time": 0.003159761428833008, "tests_passed": true, "error": null}
{"code": "hash_dict = {}\n    pattern = re.compile(pattern)\n    for root, dirs, files in os.walk(directory):\n        for file in files:\n            if re.search(pattern, file):\n                file_path = os.path.join(root, file)\n                with open(file_path, 'rb') as f:\n                    content = f.read()\n                    sha256_hash = hashlib.sha256()\n                    sha256_hash.update(content)\n                    hash_dict[file_path] = binascii.hexlify(sha256_hash.digest()).decode('utf-8')\n    return hash_dict", "compilation_passed": true, "time": 0.002889871597290039, "tests_passed": true, "error": null}
{"code": "# Create a pattern object to search for filenames matching the pattern\n    regex_pattern = re.compile(pattern)\n\n    # Initialize a dictionary to store file paths and their SHA256 hashes\n    file_paths = {}\n\n    # Iterate over the files in the specified directory and its subdirectories\n    for root, dirs, files in os.walk(directory):\n        for file in files:\n            file_path = os.path.join(root, file)\n            # If the filename matches the regex pattern\n            if regex_pattern.match(file):\n                # Compute the SHA256 hash of the file content\n                hash = compute_sha256_hash(file_path)\n                # Add the file path and its hash to the dictionary\n                file_paths[file_path] = hash\n\n    return file_paths", "compilation_passed": true, "time": 0.0021429061889648438, "tests_passed": false, "error": "NameError"}
