{"code": "if seed is not None:\n        random.seed(seed)\n    max_len = max(len(row) for row in data)\n    rows = [row + (None,) * (max_len - len(row)) for row in data]\n    df = pd.DataFrame(rows, columns=columns)\n    if fill_missing:\n        for column, dtype in zip(df.columns, df.dtypes):\n            if dtype == 'object':\n                continue\n            elif dtype.name == 'category':\n                df[column].update(df[column].astype('Int64'))\n            else:\n                df[column] = df[column].fillna(random.randint(num_range[0], num_range[1]))\n    return df", "compilation_passed": true, "time": 0.002115964889526367, "tests_passed": false, "error": "ValueError"}
{"code": "# Convert tuples to lists to allow modification\n    data = [list(row) for row in data]\n\n    # Ensure all rows have same length by filling missing elements with None\n    max_length = max(len(row) for row in data)\n    for row in data:\n        row += [None] * (max_length - len(row))\n\n    # Create a DataFrame from the list of lists\n    df = pd.DataFrame(data, columns=columns)\n\n    # Fill missing numeric values with random numbers if specified\n    if fill_missing:\n        random.seed(seed)\n        for col in df.columns:\n            if df[col].dtype.kind in 'iu':\n                df[col] = df[col].fillna(random.randint(num_range[0], num_range[1]))\n\n    return df", "compilation_passed": true, "time": 0.0019812583923339844, "tests_passed": false, "error": "ValueError"}
{"code": "if seed is not None:\n        random.seed(seed)\n\n    num_cols = len(columns)\n    filled_data = []\n\n    for row in data:\n        filled_row = []\n        for i in range(num_cols):\n            if i < len(row):\n                value = row[i]\n            else:\n                value = None\n\n            if fill_missing and isinstance(value, (float, int)) and pd.isnull(value):\n                filled_value = random.uniform(*num_range)\n            else:\n                filled_value = value\n\n            filled_row.append(filled_value)\n\n        filled_data.append(filled_row)\n\n    return pd.DataFrame(filled_data, columns=columns)", "compilation_passed": true, "time": 0.0026760101318359375, "tests_passed": true, "error": null}
{"code": "if seed is not None:\n        random.seed(seed)\n\n    # Create a dictionary to store the data\n    df_dict = {column: [] for column in columns}\n\n    # Iterate through each tuple in the data\n    for row in data:\n        # Append the values for each column\n        for i, value in enumerate(row):\n            if i < len(columns):\n                df_dict[columns[i]].append(value)\n            else:\n                break\n\n        # Fill missing values with None or random values\n        for column in columns[len(row):]:\n            if fill_missing:\n                df_dict[column].append(random.randint(num_range[0], num_range[1]))\n            else:\n                df_dict[column].append(None)\n\n    # Create the DataFrame\n    df = pd.DataFrame(df_dict)\n\n    return df", "compilation_passed": true, "time": 0.002444028854370117, "tests_passed": true, "error": null}
{"code": "# Setting the seed for random number generator (optional)\n    if seed is not None:\n        random.seed(seed)\n\n    # Create a list of rows with specified columns\n    rows = []\n    for row_data in data:\n        row_dict = dict(zip(columns, row_data))\n        row_dict.update({column: None for column in columns if column not in row_dict})\n\n        if fill_missing:\n            for key, value in row_dict.items():\n                if isinstance(value, (int, float)) and pd.isnull(value):\n                    row_dict[key] = random.uniform(*num_range)\n\n        rows.append(row_dict)\n\n    # Create a Pandas DataFrame from the list of rows\n    df = pd.DataFrame(rows)\n    return df", "compilation_passed": true, "time": 0.002324819564819336, "tests_passed": true, "error": null}
{"code": "random.seed(seed)\n    result = [list(x) for x in data]\n    max_size = max([len(x) for x in result])\n    if fill_missing:\n        for idx in range(max_size - 1, -1, -1):\n            for row in result:\n                if len(row) < max_size:\n                    row.insert(idx, random.randint(num_range[0], num_range[1]))\n    else:\n        for row in result:\n            if len(row) < max_size:\n                row += [None for _ in range(max_size - len(row))]\n    df = pd.DataFrame(result, columns=columns)\n    return df", "compilation_passed": true, "time": 0.002092123031616211, "tests_passed": false, "error": "ValueError"}
{"code": "if seed is not None:\n        random.seed(seed)\n    df = pd.DataFrame([d + tuple([None] * (len(columns) - len(d))) for d in data], columns=columns)\n    if fill_missing:\n        df = df.fillna(lambda x: random.randint(num_range[0], num_range[1]) if x.dtype.kind in {'i', 'u', 'f'} else None)\n    return df", "compilation_passed": true, "time": 0.0027437210083007812, "tests_passed": true, "error": null}
{"code": "random.seed(seed)\n    result = []\n    for t in data:\n        d = {}\n        for i, c in enumerate(columns):\n            if i < len(t):\n                d[c] = t[i]\n            else:\n                d[c] = None if not fill_missing else random.randint(num_range[0], num_range[1])\n        result.append(d)\n    return pd.DataFrame(result)", "compilation_passed": true, "time": 0.0023691654205322266, "tests_passed": true, "error": null}
{"code": "# Check if seed is provided and set the random seed for reproducibility\n    if seed is not None:\n        random.seed(seed)\n\n    # Create a dictionary to hold the data for each column\n    data_dict = {column: [] for column in columns}\n\n    # Populate the dictionary with the data from the input tuples\n    for row in data:\n        for index, column in enumerate(columns):\n            if index < len(row):\n                data_dict[column].append(row[index])\n            else:\n                data_dict[column].append(None)\n\n    # Create the DataFrame using the dictionary\n    df = pd.DataFrame(data_dict)\n\n    # If fill_missing is True, fill missing numeric values with random data within the specified range\n    if fill_missing:\n        numeric_columns = df.select_dtypes(include=['int64', 'float64']).columns\n        for column in numeric_columns:\n            df.loc[df[column].isnull(), column] = random.uniform(*num_range)\n\n    return df\n", "compilation_passed": true, "time": 0.0024776458740234375, "tests_passed": true, "error": null}
{"code": "# Initialize empty data dictionary with columns as keys\n    data_dict = {col: [] for col in columns}\n\n    # Process the data and fill missing values with None or random numbers\n    for row in data:\n        row_data = {}\n        for col, val in zip(columns, row):\n            row_data[col] = val\n        for col in columns:\n            if col in row_data:\n                data_dict[col].append(row_data[col])\n            else:\n                if fill_missing:\n                    random.seed(seed)\n                    data_dict[col].append(random.uniform(num_range[0], num_range[1]))\n                else:\n                    data_dict[col].append(None)\n\n    # Create DataFrame from the data dictionary\n    df = pd.DataFrame(data_dict, columns=columns)\n    return df", "compilation_passed": true, "time": 0.00304412841796875, "tests_passed": true, "error": null}
{"code": "# Set random seed for reproducibility\n    random.seed(seed)\n\n    # Generate the DataFrame with the given data\n    df = pd.DataFrame(data, columns=columns)\n\n    if fill_missing:\n        # Iterate through each column\n        for column in df:\n            # Identify numeric columns\n            if pd.api.types.is_numeric_dtype(df[column]):\n                # Fill NaN values with random numbers within the specified range\n                df[column] = df[column].fillna(random.uniform(num_range[0], num_range[1]))\n\n    return df", "compilation_passed": true, "time": 0.0033910274505615234, "tests_passed": true, "error": null}
{"code": "# Create a dictionary to store the data, with columns as keys\n    data_dict = {col: [] for col in columns}\n\n    # Fill the data in the dictionary, filling missing elements with None\n    for row in data:\n        for col, val in zip(columns, row):\n            data_dict[col].append(val)\n        # Fill missing elements with None\n        for col in columns[len(row):]:\n            data_dict[col].append(None)\n\n    # Create the DataFrame\n    df = pd.DataFrame(data_dict, columns=columns)\n\n    if fill_missing:\n        # Seed the random number generator for reproducibility\n        random.seed(seed)\n\n        # Fill missing numeric values with random numbers\n        num_columns = df.select_dtypes(include=['float']).columns\n        for col in num_columns:\n            if col in data_dict and pd.isna(df[col]).any():\n                missing_indices = list(df[col].isna().to_numpy().nonzero()[0])\n                for idx in missing_", "compilation_passed": false, "time": 0.0002720355987548828, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Set random seed for reproducibility\n    if seed:\n        random.seed(seed)\n\n    # Create DataFrame with specified column names\n    df = pd.DataFrame(data, columns=columns)\n\n    # Check if filling missing numeric values is requested\n    if fill_missing:\n        # Get the numeric columns in the DataFrame\n        num_cols = df.select_dtypes(include=[np.number]).columns\n\n        # Generate random numbers within the specified range for each missing value\n        for col in num_cols:\n            for i in df.index:\n                if pd.isna(df.loc[i, col]):\n                    num = random.randint(num_range[0], num_range[1])\n                    df.loc[i, col] = num\n\n    return df", "compilation_passed": true, "time": 0.0024869441986083984, "tests_passed": false, "error": "NameError"}
{"code": "if seed is not None:\n        random.seed(seed)\n\n    # Ensure all tuples have the same length by padding with None\n    max_length = max(len(row) for row in data)\n    data_padded = [tuple(element if element is not None else None for element in row) + (None,) * (max_length - len(row)) for row in data]\n\n    # Convert list of tuples to a DataFrame\n    df = pd.DataFrame(data_padded, columns=columns)\n\n    if fill_missing:\n        # Fill missing numeric values with random data\n        for column in df.columns:\n            if pd.api.types.is_numeric_dtype(df[column]):\n                df[column] = df[column].fillna(random.uniform(*num_range))\n    else:\n        # Fill missing values with None\n        df = df.fillna(None)\n\n    return df", "compilation_passed": true, "time": 0.0014162063598632812, "tests_passed": false, "error": "ValueError"}
{"code": "if seed is not None:\n        random.seed(seed)\n\n    df = pd.DataFrame(data, columns=columns)\n\n    if fill_missing:\n        for col in df.columns:\n            if df[col].dtype in ['int64', 'float64']:\n                df[col].fillna(random.uniform(*num_range), inplace=True)\n\n    return df", "compilation_passed": true, "time": 0.003229856491088867, "tests_passed": true, "error": null}
{"code": "if seed is not None:\n        random.seed(seed)\n    # Create a list of dictionaries to store the data for each row\n    rows = []\n    for item in data:\n        row_dict = {}\n        for idx, val in enumerate(item):\n            if idx < len(columns):\n                row_dict[columns[idx]] = val\n            else:\n                # If there are more values than columns,\n                # the extra values will be ignored\n                pass\n        rows.append(row_dict)\n\n    # Create the DataFrame from the list of rows\n    df = pd.DataFrame(rows, columns=columns)\n\n    # Fill missing numeric values with random data if requested\n    if fill_missing:\n        num_cols = df.select_dtypes(include=[np.number]).columns\n        for col in num_cols:\n            df[col] = df[col].fillna(random.uniform(*num_range))\n\n    return df", "compilation_passed": true, "time": 0.002624034881591797, "tests_passed": false, "error": "NameError"}
{"code": "# Set a random seed for reproducibility if a seed value is provided\n    if seed is not None:\n        random.seed(seed)\n\n    # Create a dictionary to store column data\n    column_data = {col: [] for col in columns}\n\n    # Process each row of the input data\n    for row in data:\n        row_values = list(row)  # Convert row tuple to a list\n        num_cols = len(columns)  # Number of columns in the DataFrame\n        num_row_values = len(row_values)  # Number of values in the current row\n\n        # Pad missing values with None\n        row_values.extend([None] * (num_cols - num_row_values))\n\n        # If fill_missing is True, randomly fill numeric values with numbers from the specified range\n        if fill_missing:\n            for i in range(num_cols):\n                value = row_values[i]\n                if pd.isna(value) or isinstance(value, float):\n                    row_values[i] = random.uniform(*num_range)  # Random float between num", "compilation_passed": true, "time": 0.0012350082397460938, "tests_passed": true, "error": null}
{"code": "# Initialize an empty list to store the data\n    df_data = []\n    max_len = 0  # To track the maximum number of elements in a row\n\n    # Iterate through each tuple in data\n    for row_data in data:\n        # Convert the row tuple to a list\n        row_list = list(row_data)\n\n        # If fill_missing is True, fill missing numeric values with random numbers\n        if fill_missing:\n            for i, value in enumerate(row_list):\n                if isinstance(value, (int, float)):  # Check if the value is numeric\n                    row_list[i] = value if value is not None else random.uniform(num_range[0], num_range[1])\n                elif value is None:  # Handle None values\n                    row_list[i] = random.uniform(num_range[0], num_range[1])\n\n        # Update max_len to the maximum number of elements in the row\n        max_len = max(max_len, len(row_list))\n        df_data.append(row_list", "compilation_passed": false, "time": 0.00023889541625976562, "tests_passed": false, "error": "SyntaxError"}
{"code": "if seed is not None:\n        random.seed(seed)\n\n    # Create a dictionary to store column data\n    column_data = {column: [] for column in columns}\n\n    # Process the data\n    for row_data in data:\n        row = list(row_data)\n        for i, (column, value) in enumerate(zip(columns, row)):\n            if fill_missing:\n                # Fill missing numeric values with a random number within the specified range\n                if column != 'Name' and pd.isna(value):\n                    column_data[column].append(random.randint(*num_range))\n                else:\n                    column_data[column].append(value)\n            else:\n                column_data[column].append(value)\n\n        # Fill remaining columns with None\n        for j in range(i + 1, len(columns)):\n            column_data[columns[j]].append(None)\n\n    # Create the DataFrame\n    df = pd.DataFrame(column_data, columns=columns)\n\n    return df", "compilation_passed": true, "time": 0.003061056137084961, "tests_passed": true, "error": null}
{"code": "if seed is not None:\n        random.seed(seed)\n\n    if fill_missing:\n        filled_data = []\n        for row in data:\n            filled_row = []\n            for element, col in zip(row, columns):\n                if isinstance(element, (int, float)):\n                    filled_row.append(element)\n                else:\n                    filled_row.append(element or random.randint(*num_range))\n            filled_data.append(tuple(filled_row))\n    else:\n        filled_data = data\n\n    return pd.DataFrame(filled_data, columns=columns)", "compilation_passed": true, "time": 0.0026030540466308594, "tests_passed": true, "error": null}
{"code": "if seed:\n        random.seed(seed)\n\n    # Create a dictionary to store column data\n    df_data = {column: [] for column in columns}\n\n    # Fill in the values\n    for row in data:\n        for column_name, value in zip(columns, row):\n            # If value is a string, append it as is\n            if isinstance(value, str):\n                df_data[column_name].append(value)\n            # If value is a number, append it or generate random data if fill_missing is True\n            elif isinstance(value, (int, float)):\n                df_data[column_name].append(value)\n            else:\n                if fill_missing:\n                    df_data[column_name].append(random.randint(*num_range))\n                else:\n                    df_data[column_name].append(None)\n\n    # Create DataFrame from the dictionary\n    df = pd.DataFrame(df_data)\n\n    # Remove extra columns that were created due to None values\n    extra_columns = set(df.columns) -", "compilation_passed": false, "time": 0.00026106834411621094, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Initialize an empty dictionary to store the data\n    d = {}\n    # Loop through the column names and data rows\n    for i, row in enumerate(data):\n        # Add the data to the corresponding column\n        for j, ele in enumerate(row):\n            # Create an empty list for the column if it doesn't exist\n            d.setdefault(columns[j], [])\n            # Add the data to the column list\n            d[columns[j]].append(ele)\n            # If a seed is provided, use it to initialize the random number generator\n        if seed is not None:\n            random.seed(seed)\n        # Fill in missing numeric data with random values\n        if fill_missing:\n            for column in columns:\n                if column not in d:\n                    d[column] = [random.uniform(num_range[0], num_range[1]) for _ in range(i+1)]\n\n    # Create a DataFrame from the data dictionary\n    df = pd.DataFrame(d)\n    return df", "compilation_passed": true, "time": 0.0021920204162597656, "tests_passed": true, "error": null}
{"code": "if seed is not None:\n        random.seed(seed)\n\n    rows = []\n    max_row_len = max(len(row) for row in data)\n\n    for i, row in enumerate(data):\n        new_row = []\n        for j, val in enumerate(row):\n            if j >= max_row_len:\n                break\n            new_row.append(val)\n\n        for k in range(len(new_row), max_row_len):\n            new_row.append(None)\n\n        if fill_missing:\n            for j, val in enumerate(new_row):\n                if pd.isna(val):\n                    if isinstance(num_range[0], (int, float)):\n                        new_row[j] = random.uniform(num_range[0], num_range[1])\n                    else:\n                        raise ValueError(\"num_range must be a tuple of (float/int, float/int) or None\")\n\n        rows.append(new_row)\n\n    df = pd.DataFrame(rows", "compilation_passed": false, "time": 0.0002880096435546875, "tests_passed": false, "error": "SyntaxError"}
{"code": "random.seed(seed)\n    df = pd.DataFrame(data, columns=columns)\n\n    if fill_missing:\n        for col in df:\n            for index, value in df[col].items():\n                if pd.isnull(value) and col.isdigit():\n                    df[col][index] = random.randint(num_range[0], num_range[1])\n    return df", "compilation_passed": true, "time": 0.0026712417602539062, "tests_passed": true, "error": null}
{"code": "if seed is not None:\n        random.seed(seed)\n\n    # Create a list of dictionaries, where each dictionary represents a row in the DataFrame\n    rows = []\n    for row_data in data:\n        row = {}\n        for col, value in zip(columns, row_data):\n            row[col] = value\n        rows.append(row)\n\n    # Fill missing numeric values with random data if fill_missing is True\n    if fill_missing:\n        for row in rows:\n            for col in columns:\n                if col not in row or (isinstance(row[col], int) or isinstance(row[col], float)) and math.isnan(row[col]):\n                    row[col] = random.randint(*num_range)\n\n    # Create the DataFrame\n    df = pd.DataFrame(rows, columns=columns)\n    return df", "compilation_passed": true, "time": 0.002522706985473633, "tests_passed": false, "error": "NameError"}
{"code": "if seed is not None:\n        random.seed(seed)\n\n    # Initialize an empty list to store the data\n    df_data = []\n\n    # Iterate over each row in the data list\n    for row in data:\n        # Create a new dictionary for the row\n        row_dict = {}\n\n        # Iterate over each column and its corresponding value\n        for idx, value in enumerate(row):\n            # Get the column name from the list of columns\n            col_name = columns[idx]\n            row_dict[col_name] = value\n\n        # Fill missing numeric values with random numbers if specified\n        if fill_missing:\n            for col_name in columns:\n                if col_name not in row_dict:\n                    row_dict[col_name] = random.uniform(*num_range)\n                elif row_dict[col_name] is None:\n                    row_dict[col_name] = random.uniform(*num_range)\n\n        # Append the row dictionary to the data list\n        df_data.append(row_dict)\n\n    # Create the DataFrame", "compilation_passed": true, "time": 0.0012106895446777344, "tests_passed": true, "error": null}
{"code": "# Set random seed for reproducibility\n    if seed is not None:\n        random.seed(seed)\n\n    # Initialize an empty data frame with specified columns\n    df = pd.DataFrame(columns=columns)\n\n    # Fill the data frame with row data from the given tuples\n    for row_data in data:\n        row_dict = dict(zip(columns, row_data))\n        # If fill_missing is True, fill missing numeric values with random data\n        if fill_missing:\n            min_val, max_val = num_range\n            for key, value in row_dict.items():\n                if isinstance(value, (int, float)) and pd.isna(value):\n                    row_dict[key] = random.uniform(min_val, max_val)\n        df = pd.concat([df, pd.DataFrame(row_dict, index=[df.shape[0]])], ignore_index=True)\n\n    return df", "compilation_passed": true, "time": 0.002267122268676758, "tests_passed": true, "error": null}
{"code": "# Initialize an empty dictionary to store the data\n    df_dict = {column: [] for column in columns}\n\n    # Fill the dictionary with the data\n    for row in data:\n        for i in range(len(row)):\n            df_dict[columns[i]].append(row[i])\n\n    # Fill in any missing values with None\n    for column in columns:\n        if column not in [data[i][j] for i in range(len(data)) for j in range(len(data[i]))]:\n            df_dict[column].extend([None] * (len(data) - len(df_dict[column])))\n\n    # Create the DataFrame from the dictionary\n    df = pd.DataFrame(df_dict)\n\n    # If fill_missing is True, fill missing numeric values with random data\n    if fill_missing:\n        if seed is not None:\n            random.seed(seed)\n        for column in columns:\n            if df[column].dtype.kind in {'i', 'f'}:\n                df[column] = df[column].fill", "compilation_passed": true, "time": 0.0014081001281738281, "tests_passed": true, "error": null}
{"code": "if seed is not None:\n        random.seed(seed)\n    if not isinstance(data, list) or any(not isinstance(row, tuple) for row in data):\n        raise TypeError(\"Input data should be a list of tuples\")\n    if not isinstance(columns, list) or any(not isinstance(col, str) for col in columns):\n        raise TypeError(\"Input columns should be a list of strings\")\n    if not isinstance(fill_missing, bool):\n        raise TypeError(\"Input fill_missing should be a boolean\")\n    if not isinstance(num_range, tuple) or not all(isinstance(x, (int, float)) for x in num_range) or len(num_range) != 2:\n        raise TypeError(\"Input num_range should be a tuple of numbers with length 2\")\n    if not all(isinstance(d, tuple) for d in data):\n        raise TypeError(\"Each element of the data list should be a tuple\")\n    if not all(isinstance(element, (int, float, str)) for row in", "compilation_passed": false, "time": 0.0002779960632324219, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Set random seed for reproducibility\n    if seed is not None:\n        random.seed(seed)\n\n    # Create a dictionary to hold the DataFrame\n    df_dict = {col: [] for col in columns}\n\n    for row in data:\n        for i, col in enumerate(columns):\n            if i < len(row) and row[i] is not None:\n                df_dict[col].append(row[i])\n            elif fill_missing:\n                if col in ('Age', 'Quantity'):\n                    # Fill missing numeric values with random integer within the specified range\n                    df_dict[col].append(random.randint(num_range[0], num_range[1]))\n                else:\n                    # Fill missing non-numeric values with None\n                    df_dict[col].append(None)\n            else:\n                # Fill missing values with None\n                df_dict[col].append(None)\n\n    # Create a DataFrame from the dictionary\n    df = pd.DataFrame(df_dict)\n\n    return df", "compilation_passed": true, "time": 0.0026090145111083984, "tests_passed": true, "error": null}
