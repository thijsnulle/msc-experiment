{"code": "prime_nums = filter(isprime, input_list)\n    return sorted(prime_nums, key=lambda x: math.degrees(math.radians(x)))", "compilation_passed": true, "time": 0.0007178783416748047, "tests_passed": true, "error": null}
{"code": "sorted_list = []\n    for number in input_list:\n        if isprime(number):\n            sorted_list.append((number, math.degrees(number)))\n\n    sorted_list = sorted(sorted_list, key=lambda x: x[1])\n    return list(map(lambda x: x[0], sorted_list))", "compilation_passed": true, "time": 0.0006251335144042969, "tests_passed": true, "error": null}
{"code": "filtered = filter(isprime, input_list)\n    sorted_list = sorted(filtered, key=lambda x: math.degrees(math.radians(x)))\n    return sorted_list", "compilation_passed": true, "time": 0.0005469322204589844, "tests_passed": true, "error": null}
{"code": "result = filter(lambda x: isprime(x), input_list)\n    result = sorted(result, key=lambda x: math.degrees(math.acos(1/x)))\n    return list(result)", "compilation_passed": true, "time": 0.0006239414215087891, "tests_passed": true, "error": null}
{"code": "filter_list = list(filter(lambda i: isprime(i), input_list))\n    return sorted(filter_list, key=lambda i: math.degrees(i.bit_count()))", "compilation_passed": true, "time": 0.0007529258728027344, "tests_passed": true, "error": null}
{"code": "result_list = list(filter(lambda x: isprime(x) == True, input_list))\n    result_list = sorted(result_list, key=lambda x: math.degrees(math.asin(1 / x)))\n    return result_list", "compilation_passed": true, "time": 0.0006301403045654297, "tests_passed": true, "error": null}
{"code": "return sorted(\n        filter(isprime, input_list),\n        key=lambda x: math.degrees(math.atan(x))\n    )", "compilation_passed": true, "time": 0.0005471706390380859, "tests_passed": true, "error": null}
{"code": "filtered_list = [number for number in input_list if isprime(number)]\n    filtered_list.sort(key=lambda number: math.degrees(number))\n    return filtered_list", "compilation_passed": true, "time": 0.0005660057067871094, "tests_passed": true, "error": null}
{"code": "filtered_list = list(filter(lambda x: isprime(x), input_list))\n    sorted_list = sorted(filtered_list, key=lambda x: math.degrees(math.radians(x)))\n    return sorted_list", "compilation_passed": true, "time": 0.0006361007690429688, "tests_passed": true, "error": null}
{"code": "filter_list = [x for x in input_list if isprime(x)]\n\n    return sorted(filter_list, key=lambda x: math.degrees(math.radians(x)))", "compilation_passed": true, "time": 0.0005640983581542969, "tests_passed": true, "error": null}
{"code": "return sorted([i for i in input_list if isprime(i)], key=lambda x: math.degrees(math.radians(x)))", "compilation_passed": true, "time": 0.0005419254302978516, "tests_passed": true, "error": null}
{"code": "prime_list = list(filter(lambda n: isprime(n), input_list))\n    prime_list.sort(key=lambda x: math.degrees(math.asin(1 / x)))\n    return prime_list", "compilation_passed": true, "time": 0.000659942626953125, "tests_passed": true, "error": null}
{"code": "# return [i for i in input_list if isprime(i)]\n    return sorted([i for i in input_list if isprime(i)], key=lambda x: math.degrees(math.atan(1 / x)))", "compilation_passed": true, "time": 0.0006089210510253906, "tests_passed": true, "error": null}
{"code": "res = [x for x in input_list if isprime(x)]\n    res = sorted(res, key=lambda x: math.degrees(math.radians(x)), reverse=True)\n    return res", "compilation_passed": true, "time": 0.0005970001220703125, "tests_passed": true, "error": null}
{"code": "filtered_list = list(filter(lambda x: isprime(x), input_list))\n    filtered_list.sort(key=lambda x: math.degrees(math.acos(1/x)))\n    return filtered_list", "compilation_passed": true, "time": 0.0006139278411865234, "tests_passed": true, "error": null}
{"code": "primes = [num for num in input_list if isprime(num)]\n    return sorted(primes, key=lambda num: degrees(math.radians(num)))", "compilation_passed": true, "time": 0.0005502700805664062, "tests_passed": false, "error": "NameError"}
{"code": "prime_list = [num for num in input_list if isprime(num)]\n    prime_list.sort(key=lambda x: math.degrees(math.radians(x)))\n    return prime_list", "compilation_passed": true, "time": 0.0005509853363037109, "tests_passed": true, "error": null}
{"code": "filtered_numbers = list(filter(lambda x: isprime(x), input_list))\n    sorted_numbers = sorted(filtered_numbers, key=lambda x: math.degrees(math.radians(x)))\n    return sorted_numbers", "compilation_passed": true, "time": 0.0006163120269775391, "tests_passed": true, "error": null}
{"code": "return sorted([num for num in input_list if isprime(num)], key=math.degrees)", "compilation_passed": true, "time": 0.0005209445953369141, "tests_passed": true, "error": null}
{"code": "return sorted([item for item in input_list if isprime(item)], key=lambda item: math.degrees(item))", "compilation_passed": true, "time": 0.0005261898040771484, "tests_passed": true, "error": null}
{"code": "result = []\n    for number in input_list:\n        if isprime(number):\n            result.append(number)\n    result.sort(key=lambda n: math.degrees(math.asin(1 / n)))\n    return result", "compilation_passed": true, "time": 0.000993967056274414, "tests_passed": true, "error": null}
{"code": "return sorted([x for x in input_list if isprime(x)], key=lambda x: math.degrees(math.atan(1/x))*x)", "compilation_passed": true, "time": 0.0005769729614257812, "tests_passed": true, "error": null}
{"code": "filter_list = [num for num in input_list if isprime(num)]\n    sorted_list = sorted(filter_list, key=lambda num: math.degrees(num.bit_length()))\n    return sorted_list", "compilation_passed": true, "time": 0.0005688667297363281, "tests_passed": true, "error": null}
{"code": "# Define a lambda function to convert degrees to radians\n    rad = lambda degrees: degrees * math.pi / 180.0\n\n    # Filter the list to only include prime numbers\n    primes_list = filter(lambda x: isprime(x), input_list)\n\n    # Use sorted to sort the primes based on their degree value\n    sorted_primes = sorted(primes_list, key=lambda x: math.degrees(rad(x)))\n\n    return sorted_primes", "compilation_passed": true, "time": 0.0006239414215087891, "tests_passed": true, "error": null}
{"code": "def degrees(x):\n        radians = math.atan2(x)\n        return radians * 180 / math.pi\n\n    return sorted([x for x in input_list if isprime(x)], key=degrees)", "compilation_passed": true, "time": 0.0005581378936767578, "tests_passed": false, "error": "TypeError"}
{"code": "if not input_list:\n        return []\n    prime_num = []\n    for item in input_list:\n        if isprime(item):\n            prime_num.append(item)\n    return sorted(prime_num, key=lambda x: math.degrees(math.asin(1 / x)))", "compilation_passed": true, "time": 0.0006270408630371094, "tests_passed": true, "error": null}
{"code": "primes = filter(isprime, input_list)\n    degrees = sorted(primes, key=lambda x: math.degrees(math.atan2(x, 1)))\n    return degrees", "compilation_passed": true, "time": 0.0005970001220703125, "tests_passed": true, "error": null}
{"code": "output = []\n    for i in input_list:\n        if isprime(i) is True:\n            output.append(i)\n    return sorted(output, key=lambda x: math.degrees(math.asin(1/x)))", "compilation_passed": true, "time": 0.0006239414215087891, "tests_passed": true, "error": null}
{"code": "return sorted([n for n in input_list if isprime(n)], key=lambda x: math.degrees(math.radians(x)))", "compilation_passed": true, "time": 0.0005459785461425781, "tests_passed": true, "error": null}
{"code": "prime_numbers = [num for num in input_list if isprime(num)]\n\n    sorted_numbers = sorted(prime_numbers, key=lambda x: math.degrees(math.radians(x)))\n    return sorted_numbers", "compilation_passed": true, "time": 0.0007109642028808594, "tests_passed": true, "error": null}
