{"code": "# Input validation\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"Data must be a pandas DataFrame.\")\n\n    if data.empty:\n        raise ValueError(\"Data must not be empty.\")\n\n    if target_column not in data.columns:\n        raise ValueError(\"target_column is not a column of data.\")\n\n    if not data.dtypes[target_column].kind == 'i' and not data.dtypes[target_column].kind == 'f':\n        raise ValueError(\"target_column must contain only numeric values.\")\n\n    if data.isnull().values.any():\n        raise ValueError(\"target_column must not contain null values.\")\n\n    if not isinstance(random_state, int):\n        raise ValueError(\"random_state must be an integer.\")\n\n    if not 0 <= test_size <= 1:\n        raise ValueError(\"test_size must be between 0 and 1.\")\n\n    # Train model\n    x = data.drop(columns=[", "compilation_passed": false, "time": 0.0002810955047607422, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Check requirements\n    if 'pandas' not in globals():\n        raise ModuleNotFoundError('The module \"pandas\" is required.')\n    if 'LinearRegression' not in globals():\n        raise ModuleNotFoundError('The module \"sklearn.linear_model.LinearRegression\" is required.')\n    if 'train_test_split' not in globals():\n        raise ModuleNotFoundError('The module \"sklearn.model_selection.train_test_split\" is required.')\n    if 'np' not in globals():\n        raise ModuleNotFoundError('The module \"numpy\" is required.')\n\n    # Check data\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError('data is not a DataFrame.')\n    if data.empty:\n        raise ValueError('data is empty')\n    if target_column not in data.columns:\n        raise ValueError('target_column is not a column of data')\n    if not data[target_column].notna().all():\n        raise ValueError('target_column contains missing values')\n    if not data[target_column]", "compilation_passed": false, "time": 0.00023508071899414062, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError('data must be pandas.DataFrame')\n    if data.empty:\n        raise ValueError('data must not be empty')\n    if target_column not in data.columns:\n        raise ValueError('target_column must be a column of data')\n    if not data.dtypes.apply(np.issubdtype, args=(np.number,)).all():\n        raise ValueError('data must be numeric')\n    if not isinstance(random_state, int):\n        raise ValueError('random_state must be an integer')\n    if test_size <= 0 or test_size >= 1:\n        raise ValueError('test_size must be between 0 and 1')\n\n    x = data.drop(columns=target_column)\n    y = data[target_column]\n\n    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=test_size, random_state=random_state)\n\n    model = LinearRegression()\n    model.fit(x", "compilation_passed": false, "time": 0.00026917457580566406, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError('data is not a DataFrame')\n\n    if data.empty:\n        raise ValueError('data is empty')\n\n    if target_column not in data.columns:\n        raise ValueError(f'{target_column} ist not a column of data')\n\n    if not np.issubdtype(data.values.dtype, np.number):\n        raise ValueError('data contains values that are not numeric')\n\n    if not isinstance(random_state, int):\n        raise ValueError('random_state is not an integer')\n\n    if not (0 < test_size <= 1):\n        raise ValueError('test_size is not between 0 and 1')\n\n    train_set, test_set = train_test_split(\n        data, test_size=test_size, random_state=random_state)\n\n    model = LinearRegression()\n    model.fit(\n        X=train_set[data.columns.difference(target_column)],\n        y=train_set[target_column],\n    ", "compilation_passed": false, "time": 0.00026297569274902344, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"data is not a DataFrame\")\n\n    if data.empty:\n        raise ValueError(\"data is empty\")\n\n    if target_column not in data.columns:\n        raise ValueError(f\"target_column {target_column} is not in columns\")\n\n    if not data.select_dtypes(exclude=np.number).empty:\n        raise ValueError(f\"data contains values that are not numeric\")\n\n    if not isinstance(random_state, int):\n        raise ValueError(\"random_state is not an integer\")\n\n    if test_size < 0 or test_size > 1:\n        raise ValueError(\"test_size is not between 0 and 1\")\n\n    X = data.drop(columns=target_column)\n    Y = data[target_column]\n    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=test_size, random_state=random_state)\n    ", "compilation_passed": true, "time": 0.0021619796752929688, "tests_passed": true, "error": null}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(f\"data has to be a DataFrame but is a {type(data)}\")\n\n    if data.empty:\n        raise ValueError(\"data must not be empty\")\n\n    if target_column not in data.columns:\n        raise ValueError(\n            f\"target_column has to be a column of data but is {target_column}\"\n        )\n\n    if not data[target_column].apply(lambda x: isinstance(x, (int, float))).all():\n        raise ValueError(\"data has to contain only numeric values\")\n\n    if not isinstance(random_state, int):\n        raise ValueError(\"random_state has to be an integer\")\n\n    if not 0 <= test_size <= 1:\n        raise ValueError(\"test_size must be between 0 and 1\")\n\n    features = data.drop(target_column, axis=1)\n    labels = data[target_column]\n    X_train, X_test, y_train, y_test = train", "compilation_passed": true, "time": 0.0018601417541503906, "tests_passed": false, "error": "NameError"}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError('data has to be of type pd.DataFrame.')\n    if data.empty:\n        raise ValueError('data has to be non-empty.')\n    if target_column not in data.columns:\n        raise ValueError(f'target_column {target_column} is not contained in data.')\n    if not data.all(numeric=True):\n        raise ValueError('data has to contain values that can be converted to numeric.')\n    if not isinstance(random_state, int):\n        raise ValueError('random_state has to be of type int.')\n    if not isinstance(test_size, float):\n        raise ValueError('test_size has to be of type float.')\n    if test_size < 0 or test_size >= 1:\n        raise ValueError('test_size has to be greater than zero and less than one.')\n\n    train, test = train_test_split(data, test_size=test_size, random_state=random_state)\n    train_model = LinearRegression()\n    train_", "compilation_passed": true, "time": 0.002192974090576172, "tests_passed": false, "error": "TypeError"}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError('data must be of type pandas.DataFrame')\n\n    if data.empty:\n        raise ValueError('data cannot be empty')\n\n    if target_column not in data.columns:\n        raise ValueError('target_column is not a column of data')\n\n    try:\n        data.astype(float)\n    except ValueError:\n        raise ValueError('data contains values that are not numeric')\n\n    if not isinstance(random_state, int):\n        raise ValueError('random_state must be of type int')\n\n    if test_size < 0 or test_size >= 1:\n        raise ValueError('test_size must be in range [0, 1)')\n\n    train, test = train_test_split(data, test_size=test_size, random_state=random_state)\n\n    train_X = train.drop(target_column, axis=1)\n    train_Y = train[target_column]\n\n    model = LinearRegression()\n    model.fit(train_X, train_", "compilation_passed": false, "time": 0.0002760887145996094, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(f'data must be a DataFrame but is: {type(data)}')\n    if data.empty:\n        raise ValueError(\"data is empty\")\n    if not (data.dtypes != 'float64').any():\n        raise ValueError(\"data contains non-numeric values\")\n    if target_column not in data.columns:\n        raise ValueError(f\"target_column ({target_column}) is not a column of data\")\n    if not isinstance(random_state, int):\n        raise ValueError(f'random_state must be an integer but is: {type(random_state)}')\n    if not (0.0 < test_size < 1.0):\n        raise ValueError(f'test_size must be a value between 0 and 1, but is: {test_size}')\n\n    X = data.drop(target_column, axis=1)\n    y = data[target_column]\n\n    X_train, X_test, y_train, y_test =", "compilation_passed": false, "time": 0.00026297569274902344, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError('data must be a DataFrame')\n\n    if data.empty:\n        raise ValueError('data must not be empty')\n\n    if target_column not in data.columns:\n        raise ValueError('target_column must be in data')\n\n    if np.any(data.applymap(lambda x: not pd.api.types.is_numeric_dtype(x)).all()):\n        raise ValueError('data must only contain numeric values')\n\n    if not isinstance(random_state, int):\n        raise ValueError('random_state must be an integer')\n\n    if not 0 <= test_size <= 1:\n        raise ValueError('test_size must be between 0 and 1')\n\n    data = data.dropna()\n\n    X = data.drop(target_column, axis=1)\n    y = data[target_column]\n\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state", "compilation_passed": false, "time": 0.00025582313537597656, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"data is not a DataFrame.\")\n\n    if data.empty:\n        raise ValueError(\"data is empty\")\n\n    if target_column not in data.columns:\n        raise ValueError(\"target_column not found in data.\")\n\n    if not data[target_column].dtype in (np.int64, np.float64):\n        raise ValueError(\"target_column contains non-numeric values.\")\n\n    for col in data.columns:\n        if col != target_column and not data[col].dtype in (np.int64, np.float64):\n            raise ValueError(f\"column {col} contains non-numeric values.\")\n\n    if not isinstance(random_state, int):\n        raise ValueError(\"random_state is not an integer.\")\n\n    if test_size < 0 or test_size > 1:\n        raise ValueError(\"test_size is not between 0 and 1.\")\n\n", "compilation_passed": true, "time": 0.0016202926635742188, "tests_passed": true, "error": null}
{"code": "# validate input\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError('data must be of type pd.DataFrame')\n    if data.empty:\n        raise ValueError('data must not be empty')\n    if target_column not in data.columns:\n        raise ValueError(f'target_column {target_column} must be a column of data')\n    if not data.dtypes[target_column].name in ['int64', 'float64']:\n        raise ValueError('target_column must be of numeric type')\n    if not isinstance(random_state, int):\n        raise ValueError('random_state must be an integer')\n    if test_size > 1 or test_size <= 0:\n        raise ValueError('test_size must be between 0 and 1')\n    # split the data into a training and a test set\n    X = data.drop(columns=[target_column])\n    y = data[target_column]\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size", "compilation_passed": false, "time": 0.0002522468566894531, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(f'Expected data to be a DataFrame, but got {type(data)}')\n    elif data.empty:\n        raise ValueError(f'data can not be empty')\n    elif target_column not in data.columns:\n        raise ValueError(f'target_column is not in data')\n    elif not np.issubdtype(data.dtypes[target_column], np.number):\n        raise ValueError(f'target_column {target_column} has to be a number, but got {data.dtypes[target_column]}')\n    elif not isinstance(random_state, int):\n        raise ValueError(f'random_state has to be an integer, but got {type(random_state)}')\n    elif not 0 <= test_size <= 1:\n        raise ValueError(f'test_size has to be between 0 and 1, but got {test_size}')\n\n    x = data.drop(target_column, axis=1)\n    y = data[target_column]\n\n    x", "compilation_passed": true, "time": 0.0017540454864501953, "tests_passed": true, "error": null}
{"code": "# Check that data is a DataFrame\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"data must be of type pandas DataFrame.\")\n\n    # Check that data is not empty\n    if data.empty:\n        raise ValueError(\"data must not be empty.\")\n\n    # Check if target_column is in data.columns\n    if not target_column in data.columns:\n        raise ValueError(f\"target_column must be a column of data.\")\n\n    # Check if data only contains numeric values\n    if data.dtypes.dtype != np.dtype('float64'):\n        raise ValueError(\"data must contain only numeric values.\")\n\n    # Check if random_state is an integer\n    if not isinstance(random_state, int):\n        raise ValueError(\"random_state must be an integer.\")\n\n    # Check if test_size is between 0 and 1\n    if not (0 < test_size < 1):\n        raise ValueError(\"test_size must be between 0 and 1.", "compilation_passed": false, "time": 9.489059448242188e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Check that data is a dataframe.\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\n            \"Parameter data must be of type pandas.DataFrame. Got \"\n            + str(type(data))\n            + \".\"\n        )\n    # Check that data is not empty.\n    if data.empty:\n        raise ValueError(\"data must not be empty\")\n    # Check that target_column is a column of data.\n    if target_column not in data.columns:\n        raise ValueError(\n            \"target_column must be one of data's columns.\"\n            \" Got \" + target_column + \".\"\n        )\n    # Check that data contains values that are numeric.\n    # Use the numpy-based solution from\n    # https://stackoverflow.com/a/27697209\n    # to check if all values are numeric.\n    if not (data == data.astype(float)).all(1).all():\n        raise ValueError(\n            \"data must only contain values that are numeric.\"\n        )\n    # Check", "compilation_passed": true, "time": 0.001783132553100586, "tests_passed": true, "error": null}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"Data is not a DataFrame\")\n    if data.empty:\n        raise ValueError(\"Data is empty\")\n    if not isinstance(target_column, str):\n        raise ValueError(\"target_column is not a string\")\n    if target_column not in data.columns:\n        raise ValueError(\"target_column is not a column of data\")\n    if data.drop(columns=target_column).apply(lambda col: pd.to_numeric(col, errors='raise')).size == 0:\n        raise ValueError(\"data contains non-numeric values\")\n    if not isinstance(random_state, int):\n        raise ValueError(\"random_state is not an integer\")\n    if not isinstance(test_size, (float, int)) or test_size < 0 or test_size > 1:\n        raise ValueError(\"test_size is not between 0 and 1\")\n    X = data.drop(columns=target_column)\n    y = data[target_column]", "compilation_passed": true, "time": 0.0019421577453613281, "tests_passed": true, "error": null}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"data is not a DataFrame\")\n    if data.empty:\n        raise ValueError(\"data is empty\")\n    if not isinstance(target_column, str):\n        raise ValueError(\"target_column is not a string\")\n    if target_column not in data.columns:\n        raise ValueError(\"target_column is not a column of data\")\n    if not np.issubdtype(data.values.dtype, np.number):\n        raise ValueError(\"data contains values that are not numeric\")\n    if not isinstance(random_state, int):\n        raise ValueError(\"random_state is not an integer\")\n    if not isinstance(test_size, float):\n        raise ValueError(\"test_size is not a float\")\n    if test_size < 0 or test_size > 1:\n        raise ValueError(\"test_size is not between 0 and 1\")\n    train, test = train_test_split(data, test_size=test_size, random", "compilation_passed": false, "time": 0.0002608299255371094, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError('data should be a DataFrame')\n    if data.empty:\n        raise ValueError('data should not be empty')\n    if not isinstance(random_state, int):\n        raise ValueError('random_state should be an integer')\n    if not 0 < test_size < 1:\n        raise ValueError('test_size should be a number between 0 and 1')\n    if target_column not in list(data):\n        raise ValueError('target_column should be a column of data')\n    if not data.dtypes.apply(np.issubdtype, np.number).all():\n        raise ValueError('data should have numeric values')\n    data.dropna(axis='rows', how='any', inplace=True)\n    X = data.drop(columns=target_column, axis='columns')\n    y = data[target_column]\n    X_train, X_test, y_train, y_test = train_test_split(\n        X,\n        y,\n        test_size=test", "compilation_passed": false, "time": 0.0002601146697998047, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"data must be of type pd.DataFrame.\")\n    elif data.empty:\n        raise ValueError(\"data must not be empty.\")\n    elif target_column not in data.columns:\n        raise ValueError(f\"target_column {target_column} does not exist.\")\n    elif not data.dtypes.apply(pd.api.types.is_numeric_dtype).all():\n        raise ValueError(\"data contains values that are not numeric.\")\n\n    X = data.drop(columns=[target_column], axis=1)\n    y = data[target_column]\n\n    if not isinstance(random_state, int):\n        raise ValueError(\"random_state must be an integer.\")\n    if not 0 <= test_size <= 1:\n        raise ValueError(\"test_size must be between 0 and 1.\")\n\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=", "compilation_passed": false, "time": 0.0002429485321044922, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"data must be of type DataFrame\")\n\n    if data.empty:\n        raise ValueError(\"data cannot be empty\")\n\n    if target_column not in data.columns:\n        raise ValueError(\"target column not in data\")\n\n    if not data.dtypes[target_column].kind in {'i','o','f'}:\n        raise ValueError(\"target column must be numeric\")\n\n    if data.dtypes.apply(lambda x: x.kind in {'i','o','f'}).any() == False:\n        raise ValueError(\"data must contain at least one numeric column\")\n\n    if not isinstance(random_state, int):\n        raise ValueError(\"random_state must be int\")\n\n    if not isinstance(test_size, float):\n        raise ValueError(\"test_size must be float\")\n\n    if test_size < 0 or test_size > 1:\n        raise ValueError(\"test_size must be between", "compilation_passed": false, "time": 0.000102996826171875, "tests_passed": false, "error": "SyntaxError"}
{"code": "pass", "compilation_passed": true, "time": 0.0013630390167236328, "tests_passed": true, "error": null}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"data is not a DataFrame\")\n    if not len(data):\n        raise ValueError(\"data is empty\")\n    if not target_column in data:\n        raise ValueError(\"target_column ist not a column of data\")\n    if not data[target_column].notna().all():\n        raise ValueError(\"target_column contains missing values\")\n    if not data.all(axis=\"columns\").all():\n        raise ValueError(\"data contains values that are not numeric\")\n    if not isinstance(random_state, int):\n        raise ValueError(\"random_state is not an integer\")\n    if test_size <= 0 or test_size >= 1:\n        raise ValueError(\"test_size is not between 0 and 1\")\n    features = [col for col in data if col != target_column]\n    x = data[features]\n    y = data[target_column]\n    x_train, x_test, y_train, y_", "compilation_passed": true, "time": 0.0019719600677490234, "tests_passed": false, "error": "NameError"}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(f\"data is not a DataFrame.\")\n    if data.empty:\n        raise ValueError(f\"data is empty.\")\n    if target_column not in data.columns:\n        raise ValueError(f\"target_column ({target_column}) is not a column of data ({data.columns}).\")\n    if data.columns.str.contains('non-numeric').any():\n        raise ValueError(f\"data contains values that are not numeric.\")\n    if not isinstance(random_state, int):\n        raise ValueError(f\"random_state is not an integer.\")\n    if not isinstance(test_size, float):\n        raise ValueError(f\"test_size is not a float.\")\n    if not 0 < test_size < 1:\n        raise ValueError(f\"test_size ({test_size}) is not between 0 and 1.\")\n    X, X_test, y, y_test = train_test_split(data, data[target_column],", "compilation_passed": false, "time": 0.00026798248291015625, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError('data needs to be of type DataFrame')\n    if data.empty:\n        raise ValueError('data cannot be empty')\n    if target_column not in data:\n        raise ValueError('target_column needs to be a column of data')\n    if not data.dtypes[target_column].kind == 'i':\n        raise ValueError('target_column has to be of type integer')\n\n    if not isinstance(random_state, int):\n        raise ValueError('random_state has to be of type integer')\n    if not isinstance(test_size, float):\n        raise ValueError('test_size has to be of type float')\n    if test_size < 0 or test_size > 1:\n        raise ValueError('test_size needs to be between 0 and 1')\n\n    X = data[data.columns.difference([target_column])]\n    y = data[target_column]\n\n    # split data\n    X_train, X_test, y_train, y_test = train_test_split(", "compilation_passed": false, "time": 0.00024580955505371094, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError('data is not a DataFrame')\n    if data.empty:\n        raise ValueError('data is empty')\n    if not target_column in data.columns:\n        raise ValueError('target_column is not a column of data')\n    if data.dtypes.nunique() != 2 or not data.select_dtypes('number').empty:\n        raise ValueError('data contains values that are not numeric')\n    if not isinstance(random_state, int):\n        raise ValueError('random_state is not an integer')\n    if not 0 <= test_size <= 1:\n        raise ValueError('test_size is not between 0 and 1')\n    x_train, x_test, y_train, y_test = train_test_split(\n        data.drop(columns=target_column), data[target_column], test_size=test_size, random_state=random_state)\n    model = LinearRegression()\n    model.fit(x_train, y_train)\n    return model", "compilation_passed": true, "time": 0.0016090869903564453, "tests_passed": false, "error": "ValueError"}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"data must be of type pandas DataFrame.\")\n    if data.empty:\n        raise ValueError(\"data must not be empty\")\n    if target_column not in data.columns:\n        raise ValueError(f\"target_column must be one of {data.columns}\")\n    try:\n        data.astype(np.float64).astype(np.float32)\n    except ValueError:\n        raise ValueError(\"data must contain only numeric values\")\n\n    if not isinstance(random_state, int):\n        raise ValueError(\"random_state must be an integer\")\n\n    if test_size < 0 or test_size > 1:\n        raise ValueError(\"test_size must be between 0 and 1\")\n\n    X = data.drop(columns=target_column)\n    y = data[target_column]\n    X_train, X_test, y_train, y_test = train_test_split(\n        X, y, test_size=", "compilation_passed": false, "time": 0.00026607513427734375, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"data is not a DataFrame\")\n    if data.empty:\n        raise ValueError(\"data is empty\")\n    if not target_column in data.columns:\n        raise ValueError(\"target_column ist not a column of data\")\n\n    try:\n        data = data.astype(np.float64)\n    except ValueError:\n        raise ValueError(\"data contains values that are not numeric\")\n\n    if not isinstance(random_state, int):\n        raise ValueError(\"random_state is not an integer\")\n    if test_size < 0 or test_size > 1:\n        raise ValueError(\"test_size is not between 0 and 1\")\n\n    X = data.drop(columns=target_column)\n    y = data[target_column]\n\n    X_train, X_test, y_train, y_test = train_test_split(\n        X, y, test_size=test_size, random_state=random_state)\n\n", "compilation_passed": true, "time": 0.0020821094512939453, "tests_passed": true, "error": null}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"data is not a DataFrame\")\n    if data.shape[0] == 0:\n        raise ValueError(\"data is empty\")\n    if target_column not in data.columns:\n        raise ValueError(\"target_column ist not a column of data\")\n    if not np.issubdtype(data.values.dtype, np.number):\n        raise ValueError(\"data contains values that are not numeric\")\n    if not isinstance(random_state, int):\n        raise ValueError(\"random_state is not an integer\")\n    if not isinstance(test_size, float) or not (0 <= test_size <= 1):\n        raise ValueError(\"test_size is not between 0 and 1\")\n\n    features = data.drop(target_column, axis=1)\n    labels = data[target_column]\n    features_train, features_test, labels_train, labels_test = train_test_split(features, labels, test_size=test_size, random_state", "compilation_passed": false, "time": 0.0002682209014892578, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError('data must be pandas DataFrame')\n\n    if data.empty:\n        raise ValueError('data must not be empty')\n\n    if not target_column in data.columns:\n        raise ValueError('target_column must be a column of data')\n\n    if not data.drop(target_column, axis=1).apply(pd.to_numeric, errors='coerce').select_dtypes(include=np.number).empty:\n        raise ValueError('data must only contain numerical values')\n\n    if not isinstance(random_state, int):\n        raise ValueError('random_state must be integer')\n\n    if test_size < 0 or test_size >= 1:\n        raise ValueError('test_size must be between 0 and 1')\n\n    # Split data to train and test sets\n    X = data.drop(target_column, axis=1)\n    y = data[target_column]\n    X_train, X_test, y_train, y_test = train_test_split(X", "compilation_passed": false, "time": 0.0002460479736328125, "tests_passed": false, "error": "SyntaxError"}
