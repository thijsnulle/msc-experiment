{"code": "# Create the target directory if it doesn't exist\n    os.makedirs(TARGET_DIR, exist_ok=True)\n\n    # Download the zip file\n    urllib.request.urlretrieve(url, TARGET_ZIP_FILE)\n\n    # Extract the zip file to the target directory\n    with zipfile.ZipFile(TARGET_ZIP_FILE) as zf:\n        zf.extractall(TARGET_DIR)\n\n    # Clean up by deleting the local zip file\n    os.remove(TARGET_ZIP_FILE)\n\n    return TARGET_DIR", "compilation_passed": true, "time": 0.001035928726196289, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Create the target directory if it doesn't exist\n    if not os.path.exists(TARGET_DIR):\n        os.makedirs(TARGET_DIR)\n\n    # Download the zip file from the URL\n    urllib.request.urlretrieve(url, TARGET_ZIP_FILE)\n\n    # Extract the zip file\n    with zipfile.ZipFile(TARGET_ZIP_FILE, 'r') as zip_ref:\n        zip_ref.extractall(TARGET_DIR)\n\n    # Delete the local zip file\n    os.remove(TARGET_ZIP_FILE)\n\n    return TARGET_DIR", "compilation_passed": true, "time": 0.0010128021240234375, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if not os.path.exists(TARGET_DIR):\n        os.makedirs(TARGET_DIR)\n\n    urllib.request.urlretrieve(url, TARGET_ZIP_FILE)\n\n    with zipfile.ZipFile(TARGET_ZIP_FILE, 'r') as zip_ref:\n        zip_ref.extractall(TARGET_DIR)\n\n    os.remove(TARGET_ZIP_FILE)\n\n    return TARGET_DIR", "compilation_passed": true, "time": 0.0009949207305908203, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if not os.path.exists(TARGET_DIR):\n        os.makedirs(TARGET_DIR)\n\n    urllib.request.urlretrieve(url, TARGET_ZIP_FILE)\n\n    with zipfile.ZipFile(TARGET_ZIP_FILE) as zip_file:\n        zip_file.extractall(TARGET_DIR)\n\n    # delete zip file after extraction\n    os.remove(TARGET_ZIP_FILE)\n\n    return TARGET_DIR", "compilation_passed": true, "time": 0.0009961128234863281, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if not os.path.exists(TARGET_DIR):\n        os.mkdir(TARGET_DIR)\n\n    urllib.request.urlretrieve(url, TARGET_ZIP_FILE)\n    with zipfile.ZipFile(TARGET_ZIP_FILE, 'r') as zip_ref:\n        zip_ref.extractall(TARGET_DIR)\n    os.remove(TARGET_ZIP_FILE)\n    return TARGET_DIR", "compilation_passed": true, "time": 0.0009870529174804688, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if not os.path.exists(TARGET_DIR):\n        os.makedirs(TARGET_DIR)\n    urllib.request.urlretrieve(url, TARGET_ZIP_FILE)\n    with zipfile.ZipFile(TARGET_ZIP_FILE) as zip_file:\n        zip_file.extractall(TARGET_DIR)\n    os.remove(TARGET_ZIP_FILE)\n    return TARGET_DIR", "compilation_passed": true, "time": 0.0012738704681396484, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Create the target directory if it doesn't exist\n    if not os.path.exists(TARGET_DIR):\n        os.makedirs(TARGET_DIR)\n\n    # Download the zip file using urllib\n    urllib.request.urlretrieve(url, TARGET_ZIP_FILE)\n\n    # Extract the zip file to the target directory\n    with zipfile.ZipFile(TARGET_ZIP_FILE, 'r') as zip_ref:\n        zip_ref.extractall(TARGET_DIR)\n\n    # Remove the local zip file\n    os.remove(TARGET_ZIP_FILE)\n\n    # Return the path of the target directory\n    return TARGET_DIR", "compilation_passed": true, "time": 0.0010349750518798828, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if not os.path.exists(TARGET_DIR):\n        os.makedirs(TARGET_DIR)\n\n    urllib.request.urlretrieve(url, TARGET_ZIP_FILE)\n\n    with zipfile.ZipFile(TARGET_ZIP_FILE, \"r\") as zip_ref:\n        zip_ref.extractall(TARGET_DIR)\n\n    os.remove(TARGET_ZIP_FILE)\n    return TARGET_DIR", "compilation_passed": true, "time": 0.0009720325469970703, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if not os.path.exists(TARGET_DIR):\n        os.mkdir(TARGET_DIR)\n\n    urllib.request.urlretrieve(url, TARGET_ZIP_FILE)\n\n    with zipfile.ZipFile(TARGET_ZIP_FILE, \"r\") as zip_ref:\n        zip_ref.extractall(TARGET_DIR)\n\n    os.remove(TARGET_ZIP_FILE)\n\n    return TARGET_DIR", "compilation_passed": true, "time": 0.0009589195251464844, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if not os.path.exists(TARGET_DIR):\n        os.makedirs(TARGET_DIR)\n\n    # Download the zip file\n    urllib.request.urlretrieve(url, TARGET_ZIP_FILE)\n\n    # Extract the contents of the zip file\n    with zipfile.ZipFile(TARGET_ZIP_FILE, 'r') as zip_ref:\n        zip_ref.extractall(TARGET_DIR)\n\n    # Clean up the local zip file\n    os.remove(TARGET_ZIP_FILE)\n\n    # Return the path of the directory where the contents are extracted\n    return TARGET_DIR", "compilation_passed": true, "time": 0.0009760856628417969, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if not os.path.exists(TARGET_DIR):\n        os.makedirs(TARGET_DIR)\n\n    # Download the zip file from the given URL\n    urllib.request.urlretrieve(url, f\"{TARGET_DIR}/{TARGET_ZIP_FILE}\")\n\n    # Extract the zip file\n    with zipfile.ZipFile(f\"{TARGET_DIR}/{TARGET_ZIP_FILE}\", 'r') as zip_ref:\n        zip_ref.extractall(TARGET_DIR)\n\n    # Delete the downloaded zip file\n    os.remove(f\"{TARGET_DIR}/{TARGET_ZIP_FILE}\")\n\n    return TARGET_DIR", "compilation_passed": true, "time": 0.0009999275207519531, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if not os.path.exists(TARGET_DIR):\n        os.makedirs(TARGET_DIR)\n\n    urllib.request.urlretrieve(url, TARGET_ZIP_FILE)\n\n    with zipfile.ZipFile(TARGET_ZIP_FILE) as zf:\n        zf.extractall(TARGET_DIR)\n\n    os.remove(TARGET_ZIP_FILE)\n    return TARGET_DIR", "compilation_passed": true, "time": 0.0009701251983642578, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Create target directory if it does not exist\n    if not os.path.exists(TARGET_DIR):\n        os.mkdir(TARGET_DIR)\n\n    # Download zip file\n    urllib.request.urlretrieve(url, TARGET_ZIP_FILE)\n\n    # Extract zip file contents to target directory\n    with zipfile.ZipFile(TARGET_ZIP_FILE) as zip_file:\n        zip_file.extractall(TARGET_DIR)\n\n    # Delete zip file\n    os.remove(TARGET_ZIP_FILE)\n\n    return TARGET_DIR", "compilation_passed": true, "time": 0.0009779930114746094, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Create the target directory if it doesn't exist\n    if not os.path.exists(TARGET_DIR):\n        os.makedirs(TARGET_DIR)\n\n    # Download the zip file\n    urllib.request.urlretrieve(url, TARGET_ZIP_FILE)\n\n    # Extract the zip file\n    with zipfile.ZipFile(TARGET_ZIP_FILE, \"r\") as zip_ref:\n        zip_ref.extractall(TARGET_DIR)\n\n    # Delete the zip file\n    os.remove(TARGET_ZIP_FILE)\n\n    return TARGET_DIR", "compilation_passed": true, "time": 0.0009646415710449219, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Create target directory if it doesn't exist\n    os.makedirs(TARGET_DIR, exist_ok=True)\n\n    # Download zip file\n    zip_file_path = TARGET_ZIP_FILE\n    urllib.request.urlretrieve(url, zip_file_path)\n\n    # Extract zip file to target directory\n    with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:\n        zip_ref.extractall(TARGET_DIR)\n\n    # Remove the downloaded zip file\n    os.remove(zip_file_path)\n\n    # Return the path to the target directory\n    return TARGET_DIR", "compilation_passed": true, "time": 0.0009641647338867188, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Create the target directory if it does not exist\n    if not os.path.exists(TARGET_DIR):\n        os.mkdir(TARGET_DIR)\n\n    # Download the zip file\n    urllib.request.urlretrieve(url, TARGET_ZIP_FILE)\n\n    # Extract the zip file\n    with zipfile.ZipFile(TARGET_ZIP_FILE, \"r\") as zip_ref:\n        zip_ref.extractall(TARGET_DIR)\n\n    # Delete the local zip file\n    os.remove(TARGET_ZIP_FILE)\n\n    return TARGET_DIR", "compilation_passed": true, "time": 0.000982046127319336, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Ensure the target directory exists\n    if not os.path.exists(TARGET_DIR):\n        os.makedirs(TARGET_DIR)\n\n    # Download the zip file\n    urllib.request.urlretrieve(url, TARGET_ZIP_FILE)\n\n    # Extract the zip file\n    with zipfile.ZipFile(TARGET_ZIP_FILE, 'r') as zip_ref:\n        zip_ref.extractall(TARGET_DIR)\n\n    # Delete the local zip file\n    os.remove(TARGET_ZIP_FILE)\n\n    return TARGET_DIR", "compilation_passed": true, "time": 0.0009868144989013672, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Create target directory if it doesn't exist\n    os.makedirs(TARGET_DIR, exist_ok=True)\n\n    # Download the zip file\n    with urllib.request.urlopen(url) as response, open(TARGET_ZIP_FILE, 'wb') as out_file:\n        out_file.write(response.read())\n\n    # Extract the zip file\n    with zipfile.ZipFile(TARGET_ZIP_FILE, 'r') as zip_ref:\n        zip_ref.extractall(TARGET_DIR)\n\n    # Clean up: Delete the local zip file\n    os.remove(TARGET_ZIP_FILE)\n\n    return TARGET_DIR", "compilation_passed": true, "time": 0.0010752677917480469, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Create the target directory if it doesn't exist\n    if not os.path.exists(TARGET_DIR):\n        os.mkdir(TARGET_DIR)\n\n    # Download the zip file\n    urllib.request.urlretrieve(url, TARGET_ZIP_FILE)\n\n    # Extract the zip file contents to the target directory\n    with zipfile.ZipFile(TARGET_ZIP_FILE, 'r') as zip_ref:\n        zip_ref.extractall(TARGET_DIR)\n\n    # Delete the local zip file\n    os.remove(TARGET_ZIP_FILE)\n\n    # Return the path of the target directory\n    return TARGET_DIR", "compilation_passed": true, "time": 0.0009899139404296875, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if not os.path.exists(TARGET_DIR):\n        os.makedirs(TARGET_DIR)\n\n    urllib.request.urlretrieve(url, TARGET_ZIP_FILE)\n\n    with zipfile.ZipFile(TARGET_ZIP_FILE) as zip_file:\n        zip_file.extractall(TARGET_DIR)\n\n    os.remove(TARGET_ZIP_FILE)\n\n    return TARGET_DIR", "compilation_passed": true, "time": 0.0009846687316894531, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if not os.path.exists(TARGET_DIR):\n        os.makedirs(TARGET_DIR)\n\n    urllib.request.urlretrieve(url, TARGET_ZIP_FILE)\n\n    with zipfile.ZipFile(TARGET_ZIP_FILE, 'r') as zip_ref:\n        zip_ref.extractall(TARGET_DIR)\n\n    os.remove(TARGET_ZIP_FILE)\n    return TARGET_DIR", "compilation_passed": true, "time": 0.0009748935699462891, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if not os.path.exists(TARGET_DIR):\n        os.makedirs(TARGET_DIR)\n\n    urllib.request.urlretrieve(url, TARGET_ZIP_FILE)\n\n    with zipfile.ZipFile(TARGET_ZIP_FILE, \"r\") as zip_ref:\n        zip_ref.extractall(TARGET_DIR)\n\n    os.remove(TARGET_ZIP_FILE)\n\n    return TARGET_DIR", "compilation_passed": true, "time": 0.0009739398956298828, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "os.makedirs(TARGET_DIR, exist_ok=True)  # Ensure target directory exists\n\n    # Download the file from the specified URL\n    urllib.request.urlretrieve(url, TARGET_ZIP_FILE)\n\n    # Extract the zip file to the designated directory\n    with zipfile.ZipFile(TARGET_ZIP_FILE, \"r\") as zip_ref:\n        zip_ref.extractall(TARGET_DIR)\n\n    # Delete the zip file after extraction\n    os.remove(TARGET_ZIP_FILE)\n\n    return TARGET_DIR", "compilation_passed": true, "time": 0.0009698867797851562, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if not os.path.exists(TARGET_DIR):\n        os.makedirs(TARGET_DIR)\n\n    urllib.request.urlretrieve(url, TARGET_ZIP_FILE)\n    with zipfile.ZipFile(TARGET_ZIP_FILE) as zip_ref:\n        zip_ref.extractall(TARGET_DIR)\n    os.remove(TARGET_ZIP_FILE)\n\n    return TARGET_DIR", "compilation_passed": true, "time": 0.0009710788726806641, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if not os.path.exists(TARGET_DIR):\n        os.mkdir(TARGET_DIR)\n    with urllib.request.urlopen(url) as response:\n        zip_data = response.read()\n    with open(TARGET_ZIP_FILE, \"wb\") as zip_file:\n        zip_file.write(zip_data)\n    with zipfile.ZipFile(TARGET_ZIP_FILE) as zip_ref:\n        zip_ref.extractall(TARGET_DIR)\n    os.remove(TARGET_ZIP_FILE)\n    return TARGET_DIR", "compilation_passed": true, "time": 0.0010170936584472656, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if not os.path.exists(TARGET_DIR):\n        os.makedirs(TARGET_DIR)\n\n    with urllib.request.urlopen(url) as response:\n        with open(TARGET_ZIP_FILE, 'wb') as out_file:\n            out_file.write(response.read())\n\n    with zipfile.ZipFile(TARGET_ZIP_FILE, 'r') as zip_ref:\n        zip_ref.extractall(TARGET_DIR)\n\n    os.remove(TARGET_ZIP_FILE)\n\n    return TARGET_DIR", "compilation_passed": true, "time": 0.001009225845336914, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# If the target directory doesn't exist, create it\n    if not os.path.exists(TARGET_DIR):\n        os.makedirs(TARGET_DIR)\n\n    # Download the zip file from the given URL\n    urllib.request.urlretrieve(url, TARGET_ZIP_FILE)\n\n    # Extract the contents of the zip file to the target directory\n    with zipfile.ZipFile(TARGET_ZIP_FILE, \"r\") as zip_ref:\n        zip_ref.extractall(TARGET_DIR)\n\n    # Delete the downloaded zip file\n    os.remove(TARGET_ZIP_FILE)\n\n    return TARGET_DIR", "compilation_passed": true, "time": 0.0009989738464355469, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if not os.path.exists(TARGET_DIR):\n        os.makedirs(TARGET_DIR)\n\n    urllib.request.urlretrieve(url, TARGET_ZIP_FILE)\n\n    with zipfile.ZipFile(TARGET_ZIP_FILE) as zip_ref:\n        zip_ref.extractall(TARGET_DIR)\n\n    os.remove(TARGET_ZIP_FILE)\n    return TARGET_DIR", "compilation_passed": true, "time": 0.0009629726409912109, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Create the target directory if it doesn't exist\n    if not os.path.exists(TARGET_DIR):\n        os.makedirs(TARGET_DIR)\n\n    # Download the zip file\n    urllib.request.urlretrieve(url, TARGET_ZIP_FILE)\n\n    # Extract the zip file\n    with zipfile.ZipFile(TARGET_ZIP_FILE, 'r') as zip_ref:\n        zip_ref.extractall(TARGET_DIR)\n\n    # Remove the local zip file\n    os.remove(TARGET_ZIP_FILE)\n\n    return TARGET_DIR", "compilation_passed": true, "time": 0.0009617805480957031, "tests_passed": false, "error": "FileNotFoundError"}
