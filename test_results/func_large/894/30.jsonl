{"code": "# Generate an array of random integers between 1 and 100\n    array = np.random.randint(1, 101, size=ARRAY_SIZE)\n\n    # Calculate the mean and standard deviation\n    mean = np.mean(array)\n    std = np.std(array)\n\n    # Create a histogram of the distribution\n    ax = plt.hist(array, bins=50)\n    plt.title(\"Histogram of Random Integers\")\n    plt.xlabel(\"Value\")\n    plt.ylabel(\"Frequency\")\n\n    # Plot the mean as a dashed line\n    plt.axvline(mean, color=\"red\", linestyle=\"--\")\n\n    # Plot the standard deviation as dashed lines\n    plt.axvline(mean + std, color=\"purple\", linestyle=\"--\")\n    plt.axvline(mean - std, color=\"purple\", linestyle=\"--\")\n\n    return array, mean, std, ax", "compilation_passed": true, "time": 0.010985851287841797, "tests_passed": true, "error": null}
{"code": "array = np.random.randint(1, 100, ARRAY_SIZE)\n    mean = np.mean(array)\n    std = np.std(array)\n\n    fig, ax = plt.subplots()\n\n    # plot the histogram\n    ax.hist(array, bins=100, edgecolor='black', linewidth=1)\n\n    # add title and labels\n    ax.set_title('Histogram of Random Integers')\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Frequency')\n\n    # plot the mean as a dashed line\n    ax.axvline(x=mean, linestyle='--', color='red')\n\n    # plot the standard deviation as dashed lines\n    ax.axvline(x=mean - std, linestyle='--', color='purple')\n    ax.axvline(x=mean + std, linestyle='--', color='purple')\n\n    return array, mean, std, ax", "compilation_passed": true, "time": 0.34790778160095215, "tests_passed": true, "error": null}
{"code": "# Generate random integers between 1 and 100\n    array = np.random.randint(1, 101, ARRAY_SIZE)\n\n    # Calculate the mean and standard deviation\n    mean = np.mean(array)\n    std = np.std(array)\n\n    # Plot the histogram\n    ax = plt.axes()\n    ax.set_title(\"Histogram of Random Integers\")\n    ax.set_xlabel(\"Value\")\n    ax.set_ylabel(\"Frequency\")\n\n    # Plot the mean as a dashed line\n    ax.axvline(x=mean, color='r', linestyle='dashed', linewidth=1)\n\n    # Plot the standard deviation as dashed lines\n    ax.axvspan(mean - std, mean + std, facecolor='purple', alpha=0.2)\n\n    ax.hist(array, bins=20, color='blue')\n\n    # Show the plot\n    #plt.show()\n    return array, mean, std, ax", "compilation_passed": true, "time": 0.009186029434204102, "tests_passed": true, "error": null}
{"code": "# Create an array of random integers\n    array = np.random.randint(1, 101, ARRAY_SIZE)\n\n    # Calculate the mean and standard deviation\n    mean = np.mean(array)\n    std = np.std(array)\n\n    # Create a histogram of the array\n    ax = plt.hist(array, bins='auto')\n\n    # Add a title and labels\n    plt.title(\"Histogram of Random Integers\")\n    plt.xlabel(\"Value\")\n    plt.ylabel(\"Frequency\")\n\n    # Plot the mean as a dashed line\n    plt.axvline(x=mean, color='r', linestyle='--')\n\n    # Plot the standard deviation as dashed lines\n    plt.axvline(x=mean - std, color='purple', linestyle='--')\n    plt.axvline(x=mean + std, color='purple', linestyle='--')\n\n    # Return the array, mean, standard deviation, and the histogram plot\n    return array, mean, std, ax", "compilation_passed": true, "time": 0.006107807159423828, "tests_passed": true, "error": null}
{"code": "# Create a numeric array of random integers\n    array = np.random.randint(1, 101, ARRAY_SIZE)\n\n    # Calculate the mean and standard deviation\n    mean = np.mean(array)\n    std = np.std(array)\n\n    # Create a histogram of the distribution\n    fig, ax = plt.subplots()\n\n    ax.hist(array, bins=100, edgecolor='black')\n\n    ax.set_title(\"Histogram of Random Integers\")\n    ax.set_xlabel(\"Value\")\n    ax.set_ylabel(\"Frequency\")\n\n    # Plot the mean as a dashed red line\n    ax.axvline(mean, color='r', linestyle='--', label='Mean')\n\n    # Plot the standard deviation as dashed purple lines\n    ax.axvline(mean - std, color='purple', linestyle='--', label='Std')\n    ax.axvline(mean + std, color='purple', linestyle='--')\n\n    ax.legend()\n", "compilation_passed": true, "time": 0.03305697441101074, "tests_passed": false, "error": "TypeError"}
{"code": "# Create an array of random integers\n    arr = np.random.randint(low=1, high=100, size=ARRAY_SIZE)\n\n    # Calculate the mean and standard deviation\n    mean = np.mean(arr)\n    std = np.std(arr)\n\n    # Draw a histogram of the distribution\n    fig, ax = plt.subplots()\n    ax.hist(arr, bins=30, edgecolor='black')\n    ax.set_title('Histogram of Random Integers')\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Frequency')\n\n    # Plot the mean as a red dashed line\n    ax.axvline(x=mean, linestyle='--', color='r')\n\n    # Plot the standard deviation as purple dashed lines\n    ax.axvline(x=mean - std, linestyle='--', color='purple')\n    ax.axvline(x=mean + std, linestyle='--', color='purple')\n\n    return arr, mean, std, ax", "compilation_passed": true, "time": 0.09947919845581055, "tests_passed": true, "error": null}
{"code": "# Create a random array of integers between 1 and 100\n    array = np.random.randint(low=1, high=101, size=ARRAY_SIZE)\n\n    # Calculate the mean and standard deviation\n    mean = array.mean()\n    std = array.std()\n\n    # Set the seed for reproducibility\n    np.random.seed(0)\n\n    # Plot a histogram of the array\n    plt.hist(array, bins=20)\n    plt.title(\"Histogram of Random Integers\")\n    plt.xlabel(\"Value\")\n    plt.ylabel(\"Frequency\")\n    plt.axvline(mean, color='r', linestyle='--')\n    plt.axvline(mean + std, color='purple', linestyle='--')\n    plt.axvline(mean - std, color='purple', linestyle='--')\n\n    ax = plt.gca()\n\n    return array, mean, std, ax", "compilation_passed": true, "time": 0.0059010982513427734, "tests_passed": true, "error": null}
{"code": "array = np.random.randint(low=1, high=100, size=ARRAY_SIZE)\n    mean = np.mean(array)\n    std = np.std(array)\n    ax = plt.hist(array, bins='auto')\n    ax[2].axvline(mean, color='red', linestyle='dashed')\n    ax[2].axvline(mean + std, color='purple', linestyle='dashed')\n    ax[2].axvline(mean - std, color='purple', linestyle='dashed')\n\n    plt.title(\"Histogram of Random Integers\")\n    plt.xlabel(\"Value\")\n    plt.ylabel(\"Frequency\")\n    plt.show()\n\n    return array, mean, std, ax[2]", "compilation_passed": true, "time": 0.005347251892089844, "tests_passed": false, "error": "AttributeError"}
{"code": "# Create a numeric array of random integers\n    arr = np.random.randint(1, 101, ARRAY_SIZE)\n    # Calculate the mean\n    mean = arr.mean()\n    # Calculate the standard deviation\n    std = arr.std()\n    # Draw a histogram of the distribution\n    fig, ax = plt.subplots()\n    ax.hist(arr, bins=100)\n    # Add the mean and standard deviation to the plot\n    ax.plot([mean, mean], [0, ARRAY_SIZE], 'r--')\n    ax.plot([mean-std, mean-std], [0, ARRAY_SIZE], 'purple--')\n    ax.plot([mean+std, mean+std], [0, ARRAY_SIZE], 'purple--')\n    # Set the title of the plot\n    ax.set_title(\"Histogram of Random Integers\")\n    # Label the x and y axes\n    ax.set_xlabel(\"Value\")\n    ax.set_ylabel(\"Frequency\")\n    return", "compilation_passed": true, "time": 0.0346989631652832, "tests_passed": false, "error": "ValueError"}
{"code": "# Generate an array of random integers between 1 and 100\n    array = np.random.randint(1, 101, ARRAY_SIZE)\n\n    # Calculate the mean\n    mean = array.mean()\n\n    # Calculate the standard deviation\n    std = array.std()\n\n    # Draw a histogram of the distribution\n    fig, ax = plt.subplots()\n    ax.hist(array, bins=10, edgecolor='black')\n    ax.set_title('Histogram of Random Integers')\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Frequency')\n\n    # Plot the mean and standard deviation\n    ax.axvline(x=mean, color='red', linestyle='dashed')\n    ax.axvline(x=mean - std, color='purple', linestyle='dashed')\n    ax.axvline(x=mean + std, color='purple', linestyle='dashed')\n\n    return array, mean, std, ax", "compilation_passed": true, "time": 0.016301870346069336, "tests_passed": true, "error": null}
{"code": "# Creating array of random integers between 1 and 100\n    array = np.random.randint(1, 100, ARRAY_SIZE)\n    # Calculating mean and std of the array\n    mean = np.mean(array)\n    std = np.std(array)\n    # Creating histogram\n    ax = plt.subplots(figsize=(10, 7))\n    ax = plt.hist(array, color='green', edgecolor='black', bins=100)\n    # Adding title and labels\n    plt.title(\"Histogram of Random Integers\")\n    plt.xlabel(\"Value\")\n    plt.ylabel(\"Frequency\")\n    # Plotting the mean\n    plt.axvline(x=mean, color='red', linestyle='--')\n    # Plotting the std\n    plt.axvline(x=mean - std, color='purple', linestyle='--')\n    plt.axvline(x=mean + std, color='purple', linestyle='--')\n    return array, mean,", "compilation_passed": true, "time": 0.03247213363647461, "tests_passed": false, "error": "ValueError"}
{"code": "np.random.seed()  # Set seed value\n    array = np.random.randint(1, 100, ARRAY_SIZE)  # Create array of random integers\n    mean = np.mean(array)  # Calculate mean\n    std = np.std(array)  # Calculate standard deviation\n\n    fig, ax = plt.subplots()  # Create figure and axes\n    ax.hist(array, bins='auto')  # Create histogram\n    ax.set_title('Histogram of Random Integers')  # Set title\n    ax.set_xlabel('Value')  # Set x-axis label\n    ax.set_ylabel('Frequency')  # Set y-axis label\n    ax.axvline(mean, color='red', linestyle='--')  # Plot mean as red dashed line\n    ax.axvline(mean - std, color='purple', linestyle='--')  # Plot standard deviation as purple dashed line\n    ax.axvline(mean + std, color='purple', linestyle='--')  # Plot standard deviation as purple dashed line\n\n    return", "compilation_passed": true, "time": 0.027246952056884766, "tests_passed": false, "error": "TypeError"}
{"code": "np.random.seed(0)\n    array = np.random.randint(1, 100, ARRAY_SIZE)\n    mean = np.mean(array)\n    std = np.std(array)\n\n    fig, ax = plt.subplots()\n    ax.hist(array, bins=20)\n    ax.set_title(\"Histogram of Random Integers\")\n    ax.set_xlabel(\"Value\")\n    ax.set_ylabel(\"Frequency\")\n    ax.axvline(mean, color='r', linestyle='--')\n    ax.axvline(mean - std, color='m', linestyle='--')\n    ax.axvline(mean + std, color='m', linestyle='--')\n    return array, mean, std, ax", "compilation_passed": true, "time": 0.05231213569641113, "tests_passed": true, "error": null}
{"code": "array = np.random.randint(1, 101, ARRAY_SIZE)\n    mean = array.mean()\n    std = array.std()\n    ax = plt.hist(array, bins=20, edgecolor=\"black\")\n    plt.title(\"Histogram of Random Integers\")\n    plt.xlabel(\"Value\")\n    plt.ylabel(\"Frequency\")\n    plt.axvline(mean, color=\"r\", linestyle=\"--\")\n    plt.axvline(mean - std, color=\"purple\", linestyle=\"--\")\n    plt.axvline(mean + std, color=\"purple\", linestyle=\"--\")\n    return array, mean, std, ax", "compilation_passed": true, "time": 0.005811929702758789, "tests_passed": true, "error": null}
{"code": "np.random.seed(0)\n    array = np.random.randint(1, 100, ARRAY_SIZE)\n    mean = array.mean()\n    std = array.std()\n\n    fig, ax = plt.subplots()\n    ax.hist(array, bins='auto')\n\n    ax.set_title(\"Histogram of Random Integers\")\n    ax.set_xlabel(\"Value\")\n    ax.set_ylabel(\"Frequency\")\n    ax.axvline(mean, color='r', linestyle='--')\n    ax.axvline(mean-std, color='m', linestyle='--')\n    ax.axvline(mean+std, color='m', linestyle='--')\n\n    return array, mean, std, ax", "compilation_passed": true, "time": 0.0561981201171875, "tests_passed": true, "error": null}
{"code": "# Generate an array of random integers between 1 and 100\n    array = np.random.randint(1, 101, size=ARRAY_SIZE)\n\n    # Calculate the mean and standard deviation of the array\n    mean = np.mean(array)\n    std = np.std(array)\n\n    # Create a histogram plot of the array\n    ax = plt.axes()\n    ax.hist(array, bins=20, density=True, edgecolor='black')\n\n    # Add a title and labels to the plot\n    ax.set_title(\"Histogram of Random Integers\")\n    ax.set_xlabel(\"Value\")\n    ax.set_ylabel(\"Frequency\")\n\n    # Plot the mean and standard deviation as lines\n    ax.axvline(mean, linestyle='--', color='red')\n    ax.axvline(mean - std, linestyle='--', color='purple')\n    ax.axvline(mean + std, linestyle='--', color='purple')\n\n    return array, mean, std", "compilation_passed": true, "time": 0.008828163146972656, "tests_passed": false, "error": "ValueError"}
{"code": "array = np.random.randint(1, 101, ARRAY_SIZE)\n    mean = np.mean(array)\n    std = np.std(array)\n\n    plt.hist(array, bins=20)\n    plt.title(\"Histogram of Random Integers\")\n    plt.xlabel(\"Value\")\n    plt.ylabel(\"Frequency\")\n    plt.axvline(mean, color=\"r\", linestyle=\"--\")\n    plt.axvline(mean + std, color=\"purple\", linestyle=\"--\")\n    plt.axvline(mean - std, color=\"purple\", linestyle=\"--\")\n    ax = plt.gca()\n    plt.show()\n\n    return array, mean, std, ax", "compilation_passed": true, "time": 0.005686044692993164, "tests_passed": true, "error": null}
{"code": "# Generate a random array of integers between 1 and 100\n    array = np.random.randint(1, 101, size=ARRAY_SIZE)\n    # Calculate the mean of the array\n    mean = array.mean()\n    # Calculate the standard deviation of the array\n    std = array.std()\n\n    # Create a histogram of the distribution with 50 bins\n    fig, ax = plt.subplots()\n    ax.hist(array, bins=50)\n\n    # Add title, axis labels, and legend\n    ax.set_title(\"Histogram of Random Integers\")\n    ax.set_xlabel(\"Value\")\n    ax.set_ylabel(\"Frequency\")\n\n    # Plot the mean as a dashed line\n    ax.axvline(x=mean, color='r', linestyle='--')\n\n    # Plot the standard deviation as dashed lines\n    ax.axvline(x=mean - std, color='purple', linestyle='--')\n    ax.axvline(x=mean + std, color='purple", "compilation_passed": false, "time": 9.226799011230469e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "array = np.random.randint(1, 100, ARRAY_SIZE)\n    mean = np.mean(array)\n    std = np.std(array)\n    ax = plt.axes()\n    ax.set_title(\"Histogram of Random Integers\")\n    ax.set_xlabel(\"Value\")\n    ax.set_ylabel(\"Frequency\")\n    ax.plot((mean, mean), (0, ARRAY_SIZE), linestyle=\"--\", color=\"red\")\n    ax.plot((mean - std, mean - std), (0, ARRAY_SIZE), linestyle=\"--\", color=\"purple\")\n    ax.plot((mean + std, mean + std), (0, ARRAY_SIZE), linestyle=\"--\", color=\"purple\")\n    ax.hist(array, bins=50, edgecolor=\"black\")\n    return array, mean, std, ax", "compilation_passed": true, "time": 0.26529693603515625, "tests_passed": true, "error": null}
{"code": "array = np.random.randint(1, 101, size=ARRAY_SIZE)\n    mean = np.mean(array)\n    std = np.std(array)\n    ax = plt.axes()\n    ax.set_title(\"Histogram of Random Integers\")\n    ax.set_xlabel(\"Value\")\n    ax.set_ylabel(\"Frequency\")\n    ax.set_xlim([1, 100])\n    ax.hist(array)\n    ax.plot(mean * np.ones(2), [0, 100000], \"r--\", label=f\"mean = {mean:.2f}\")\n    ax.plot(mean + 3 * std * np.ones(2), [0, 100000], \"m--\", label=f\"3 sigma = {3 * std:.2f}\")\n    ax.plot(mean - 3 * std * np.ones(2), [0, 100000], \"m--\")\n", "compilation_passed": true, "time": 0.0068438053131103516, "tests_passed": false, "error": "TypeError"}
{"code": "array = np.random.randint(1, 100, ARRAY_SIZE)\n\n    mean = np.mean(array)\n    std = np.std(array)\n\n    # Draw a histogram of the distribution\n    plt.hist(array)\n\n    plt.title(\"Histogram of Random Integers\")\n    plt.xlabel(\"Value\")\n    plt.ylabel(\"Frequency\")\n\n    plt.axvline(mean, color=\"red\", linestyle=\"--\")\n    plt.axvline(mean + std, color=\"purple\", linestyle=\"--\")\n    plt.axvline(mean - std, color=\"purple\", linestyle=\"--\")\n\n    ax = plt.gca()\n\n    # Save plot as a file\n    plt.savefig('histogram_of_random_integers.png', dpi=300)\n\n    return array, mean, std, ax", "compilation_passed": true, "time": 1.049208164215088, "tests_passed": false, "error": "TimeoutError"}
{"code": "# Generate an array of random integers\n    array = np.random.randint(low=1, high=100, size=ARRAY_SIZE)\n\n    # Calculate the mean and standard deviation\n    mean = array.mean()\n    std = array.std()\n\n    # Create the histogram plot\n    ax = plt.axes()\n    ax.hist(array, bins=50)\n\n    # Set the title and axis labels\n    ax.set_title(\"Histogram of Random Integers\")\n    ax.set_xlabel(\"Value\")\n    ax.set_ylabel(\"Frequency\")\n\n    # Add the mean and standard deviation lines\n    ax.axvline(mean, color='r', linestyle='dashed')\n    ax.axvline(mean + std, color='purple', linestyle='dashed')\n    ax.axvline(mean - std, color='purple', linestyle='dashed')\n\n    return array, mean, std, ax", "compilation_passed": true, "time": 0.06717109680175781, "tests_passed": true, "error": null}
{"code": "array = np.random.randint(1, 101, ARRAY_SIZE)\n    mean = np.mean(array)\n    std = np.std(array)\n\n    plt.hist(array, bins=20)\n    plt.title(\"Histogram of Random Integers\")\n    plt.xlabel(\"Value\")\n    plt.ylabel(\"Frequency\")\n    plt.axvline(mean, color='red', linestyle='--')\n    plt.axvline(mean - std, color='purple', linestyle='--')\n    plt.axvline(mean + std, color='purple', linestyle='--')\n\n    ax = plt.gca()\n\n    return array, mean, std, ax", "compilation_passed": true, "time": 0.0058519840240478516, "tests_passed": true, "error": null}
{"code": "array = np.random.randint(1, 100, ARRAY_SIZE)\n    mean = np.mean(array)\n    std = np.std(array)\n    ax = plt.hist(array, bins=20)\n    plt.title(\"Histogram of Random Integers\")\n    plt.xlabel(\"Value\")\n    plt.ylabel(\"Frequency\")\n    plt.axvline(mean, color='r', linestyle='--')\n    plt.axvline(mean - std, color='purple', linestyle='--')\n    plt.axvline(mean + std, color='purple', linestyle='--')\n    return array, mean, std, ax", "compilation_passed": true, "time": 0.005560159683227539, "tests_passed": false, "error": "AttributeError"}
{"code": "# Initialize array of zeros\n    array = np.zeros(ARRAY_SIZE, dtype=int)\n    # Generate random integers between 1 and 100\n    array = np.random.randint(1, 101, ARRAY_SIZE)\n    # Calculate mean and standard deviation\n    mean = np.mean(array)\n    std = np.std(array)\n    # Create histogram\n    fig, ax = plt.subplots()\n    ax.hist(array, bins=20)\n    ax.set_title(\"Histogram of Random Integers\")\n    ax.set_xlabel(\"Value\")\n    ax.set_ylabel(\"Frequency\")\n    # Plot mean and standard deviation\n    ax.axvline(mean, color='r', linestyle='--', label=f'Mean: {mean:.2f}')\n    ax.axvline(mean-std, color='purple', linestyle='--', label=f'STD: {mean-std:.2f}')\n    ax.axvline(mean+std, color", "compilation_passed": false, "time": 0.0002560615539550781, "tests_passed": false, "error": "SyntaxError"}
{"code": "np.random.seed(0)\n    array = np.random.randint(1, 101, ARRAY_SIZE)\n    mean = np.mean(array)\n    std = np.std(array)\n    fig, ax = plt.subplots()\n    ax.hist(array, edgecolor='black', bins=10)\n    ax.set_title('Histogram of Random Integers')\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Frequency')\n    ax.plot((mean, mean), (0, ARRAY_SIZE), 'r--')\n    ax.plot((mean - std, mean - std), (0, ARRAY_SIZE), 'm--')\n    ax.plot((mean + std, mean + std), (0, ARRAY_SIZE), 'm--')\n\n    return array, mean, std, ax", "compilation_passed": true, "time": 0.016166210174560547, "tests_passed": true, "error": null}
{"code": "np.random.seed(0)\n    array = np.random.randint(1, 101, size=ARRAY_SIZE)\n    mean = np.mean(array)\n    std = np.std(array)\n    ax = plt.hist(array, bins=20, edgecolor='white')\n    plt.title('Histogram of Random Integers')\n    plt.xlabel('Value')\n    plt.ylabel('Frequency')\n    plt.axvline(x=mean, color='r', linestyle='--')\n    plt.axvline(x=mean + std, color='m', linestyle='--')\n    plt.axvline(x=mean - std, color='m', linestyle='--')\n    return array, mean, std, ax", "compilation_passed": true, "time": 0.005839824676513672, "tests_passed": true, "error": null}
{"code": "array = np.random.randint(1, 100, ARRAY_SIZE)\n    mean = np.mean(array)\n    std = np.std(array)\n    # Create a figure and axis object\n    fig, ax = plt.subplots(figsize=(12, 8))\n    # Plot the histogram\n    ax.hist(array, bins='auto', edgecolor='black')\n    ax.set_title('Histogram of Random Integers')\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Frequency')\n    # Plot the mean\n    ax.axvline(mean, color='r', linestyle='--')\n    ax.text(mean + 1, max(ax.get_yticks()) / 2, f'Mean: {mean:.2f}', color='r')\n    # Plot the standard deviation\n    ax.axvline(mean - std, color='purple', linestyle='--')\n    ax.axvline(mean + std, color='purple', linestyle='--')\n    ax.text", "compilation_passed": true, "time": 0.02175617218017578, "tests_passed": false, "error": "TypeError"}
{"code": "# Create an array of random integers with ARRAY_SIZE elements\n    array = np.random.randint(1, 101, ARRAY_SIZE)\n    # Calculate the mean and standard deviation of the array\n    mean = array.mean()\n    std = array.std()\n    # Create a histogram of the distribution\n    ax = plt.hist(array, bins=100)\n    # Add a title and axis labels\n    plt.title(\"Histogram of Random Integers\")\n    plt.xlabel(\"Value\")\n    plt.ylabel(\"Frequency\")\n    # Plot the mean as a red dashed line\n    plt.axvline(mean, color='r', linestyle='--')\n    # Plot the standard deviation as purple dashed lines\n    plt.axvline(mean - std, color='purple', linestyle='--')\n    plt.axvline(mean + std, color='purple', linestyle='--')\n    # Return the array, mean, standard deviation, and the histogram plot\n    return array, mean, std, ax", "compilation_passed": true, "time": 0.019404888153076172, "tests_passed": true, "error": null}
{"code": "# Generate an array of random integers between 1 and 100\n    array = np.random.randint(1, 101, ARRAY_SIZE)\n\n    # Calculate the mean and standard deviation\n    mean = np.mean(array)\n    std = np.std(array)\n\n    # Create a histogram of the distribution\n    fig, ax = plt.subplots()\n    ax.hist(array, bins=10)\n    ax.set_title(\"Histogram of Random Integers\")\n    ax.set_xlabel(\"Value\")\n    ax.set_ylabel(\"Frequency\")\n    ax.axvline(mean, color='red', linestyle='dashed', linewidth=1)\n    ax.axvline(mean-std, color='purple', linestyle='dashed', linewidth=1)\n    ax.axvline(mean+std, color='purple', linestyle='dashed', linewidth=1)\n\n    return array, mean, std, ax", "compilation_passed": true, "time": 0.016499996185302734, "tests_passed": true, "error": null}
