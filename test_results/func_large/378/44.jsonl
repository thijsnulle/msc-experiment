{"code": "# Check if the data_dir exists\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n\n    # Get all CSV files in the data directory\n    csv_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    csv_files = sorted(csv_files)\n\n    # Check if there are any CSV files\n    if not csv_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'\")\n\n    # Create a table using Texttable\n    table = Texttable()\n    table.header(['File', 'Rows', 'Columns'])\n    table.set_cols_align(['l', 'r', 'r'])\n\n    # Loop through each file\n    for file in csv_files:\n        try:\n            # Read the CSV file using pandas\n            df = pd.read_csv(file)\n\n            # Get the file name, number of rows, and number of columns\n", "compilation_passed": false, "time": 0.00025391578674316406, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory '{data_dir}' does not exist.\")\n\n    csv_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n\n    if not csv_files:\n        raise ValueError(f\"No CSV files found in directory '{data_dir}'.\")\n\n    table = Texttable()\n    table.set_deco(Texttable.HEADER)\n    table.set_cols_align([\"r\", \"r\", \"r\"])\n    table.add_rows([[\"File\", \"Rows\", \"Columns\"]] +\n                   [[os.path.basename(f), pd.read_csv(f).shape[0], pd.read_csv(f).shape[1]] for f in csv_files])\n    return str(table)", "compilation_passed": true, "time": 0.0014767646789550781, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n\n    # Get the sorted CSV files from the directory\n    csv_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n\n    if not csv_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n\n    # Initialize the Texttable object\n    table = Texttable()\n\n    # Set the column headings\n    table.header([\"File\", \"Rows\", \"Columns\"])\n\n    # Read each CSV file, calculate rows and columns, and add a row to the table\n    for file in csv_files:\n        try:\n            df = pd.read_csv(file, index_col=0)\n        except pandas.errors.EmptyDataError:\n            raise\n\n        # Add a row to the table with the file name, number of rows, and number of columns\n        table.add_row([os.path", "compilation_passed": false, "time": 0.0002288818359375, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory '{data_dir}' does not exist\")\n\n    csv_files = sorted(glob.glob(os.path.join(data_dir, \"*.csv\")))\n    if not csv_files:\n        raise ValueError(f\"No CSV files found in directory '{data_dir}'\")\n\n    table = Texttable()\n    table.set_cols_align([\"c\", \"c\", \"c\"])\n    table.set_cols_dtype([\"t\", \"i\", \"i\"])\n\n    header = [\"File\", \"Rows\", \"Columns\"]\n    table.add_rows([header])\n\n    for file in sorted(csv_files):\n        try:\n            df = pd.read_csv(file)\n            nrows = df.shape[0]\n            ncolumns = df.shape[1]\n            table.add_row([os.path.basename(file), nrows, ncolumns])\n        except pandas.errors.", "compilation_passed": false, "time": 0.0002598762512207031, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory {data_dir} does not exist.\")\n\n    csv_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not csv_files:\n        raise ValueError(f\"No CSV files found in the directory {data_dir}.\")\n\n    table = Texttable()\n    table.header(['File', 'Rows', 'Columns'])\n    table.set_cols_dtype(['t', 'i', 'i'])\n    for file in sorted(csv_files):\n        try:\n            data = pd.read_csv(file)\n            table.add_row([os.path.basename(file), len(data), len(data.columns)])\n        except EmptyDataError:\n            raise EmptyDataError(\"Empty CSV file encountered.\")\n\n    return table.draw()", "compilation_passed": true, "time": 0.001383066177368164, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if not os.path.isdir(data_dir):\n        raise FileNotFoundError(\"Directory not found\")\n\n    # Find all CSV files in the specified directory\n    csv_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n\n    if not csv_files:\n        raise ValueError(\"No CSV files found in the directory\")\n\n    # Create the table with headers\n    table = Texttable()\n    table.header([\"File\", \"Rows\", \"Columns\"])\n\n    # Add rows for each CSV file\n    for file in csv_files:\n        try:\n            df = pd.read_csv(file)\n            file_name = os.path.basename(file)\n            rows = len(df)\n            columns = len(df.columns)\n            table.add_row([file_name, rows, columns])\n        except pandas.errors.EmptyDataError:\n            raise\n\n    return table.draw()", "compilation_passed": true, "time": 0.0016109943389892578, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"The specified directory does not exist.\")\n\n    # Find all CSV files in the data_dir\n    csv_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not csv_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n\n    # Initialize the table\n    table = Texttable()\n    table.header([\"File\", \"Rows\", \"Columns\"])\n    table.set_cols_dtype([\"t\", \"i\", \"i\"])\n    table.set_cols_align([\"l\", \"r\", \"r\"])\n\n    for csv_file in csv_files:\n        try:\n            # Read the CSV file and get the number of rows and columns\n            df = pd.read_csv(csv_file)\n            num_rows = df.shape[0]\n            num_columns = df.shape[1]\n            # Add the row to the table\n            ", "compilation_passed": false, "time": 0.00021767616271972656, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"The specified directory does not exist\")\n\n    csv_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not csv_files:\n        raise ValueError(\"There are no CSV files in the specified directory\")\n\n    table = Texttable()\n    table.set_cols_align([\"l\", \"r\", \"r\"])\n    table.set_cols_dtype(['t','i','i'])\n    table.header([\"File\", \"Rows\", \"Columns\"])\n\n    for file in csv_files:\n        try:\n            df = pd.read_csv(file)\n            table.add_row([os.path.basename(file), df.shape[0], df.shape[1]])\n        except pandas.errors.EmptyDataError:\n            raise pandas.errors.EmptyDataError(f\"Encountered an empty CSV file: {file}\")\n\n    return table.", "compilation_passed": false, "time": 0.00023984909057617188, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist\")\n\n    # Check if there are any CSV files in the directory\n    if len(glob.glob(data_dir + \"*.csv\")) == 0:\n        raise ValueError(f\"No CSV files found in {data_dir}\")\n\n    # Get the list of sorted CSV files in the directory\n    files = sorted(glob.glob(data_dir + \"*.csv\"))\n\n    # Create a Texttable\n    table = Texttable()\n\n    # Add column headings\n    table.header([\"File\", \"Rows\", \"Columns\"])\n\n    # Add rows to the table\n    for file in files:\n        # Read the CSV file\n        df = pd.read_csv(file)\n\n        # Check if the CSV file is empty\n        if df.empty:\n            raise pd.errors.EmptyDataError(f\"File {file} is empty\")\n\n        # Add a row to the table\n        table.", "compilation_passed": false, "time": 0.0002009868621826172, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} not found\")\n\n    # Get a list of sorted CSV files in the specified directory\n    csv_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if len(csv_files) == 0:\n        raise ValueError(f\"No CSV files found in directory {data_dir}\")\n\n    # Create a Texttable object\n    table = Texttable()\n    table.header(['File', 'Rows', 'Columns'])\n\n    # Iterate over the sorted CSV files\n    for csv_file in csv_files:\n        try:\n            # Read the CSV file into a pandas DataFrame\n            df = pd.read_csv(csv_file)\n            # Add a row to the table with the file name, number of rows, and number of columns\n            table.add_row([os.path.basename(csv_file), df.shape[0], df.shape[1]])\n        except", "compilation_passed": false, "time": 0.00019788742065429688, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist.\")\n\n    # Get sorted list of CSV files\n    file_pattern = os.path.join(data_dir, '*.csv')\n    file_list = sorted(glob.glob(file_pattern))\n    if len(file_list) == 0:\n        raise ValueError(\"No CSV files found in directory {data_dir}\")\n\n    # Initialize table\n    table = Texttable()\n    table.header(['File', 'Rows', 'Columns'])\n    table.set_cols_align(['r', 'l', 'l'])\n\n    # Add data to table\n    for file_name in file_list:\n        try:\n            # Read CSV file with pandas\n            df = pd.read_csv(file_name, header=None)\n        except pd.errors.EmptyDataError:\n            raise pd.errors.EmptyDataError(f\"Empty CSV file: {file_name}\")\n        row_count = len(", "compilation_passed": false, "time": 0.0002269744873046875, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Validate data_dir\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"The specified directory '{data_dir}' does not exist.\")\n\n    # Initialize table\n    table = Texttable()\n    table.header(['File', 'Rows', 'Columns'])\n    table.set_cols_align(['l', 'r', 'r'])\n    table.set_deco(Texttable.HEADER | Texttable.VLINES)\n\n    # Sort CSV files in ascending order of file name\n    csv_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n\n    # Ensure there are CSV files in the directory\n    if not csv_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n\n    # Process each CSV file and populate the table\n    for csv_file in csv_files:\n        try:\n            df = pd.read_csv(csv_file)\n            file_name = os", "compilation_passed": false, "time": 0.00019669532775878906, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Directory not found.\")\n\n    csv_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not csv_files:\n        raise ValueError(\"No CSV files found in the directory.\")\n\n    table = Texttable()\n    table.header(['File', 'Rows', 'Columns'])\n    for csv_file in csv_files:\n        try:\n            df = pd.read_csv(csv_file)\n            file_name = os.path.basename(csv_file)\n            rows = len(df)\n            columns = len(df.columns)\n            table.add_row([file_name, rows, columns])\n        except pd.errors.EmptyDataError:\n            raise\n        except Exception as e:\n            print(f\"Error reading file '{file_name}': {e}\")\n            continue\n\n    return table.draw()", "compilation_passed": true, "time": 0.0013511180877685547, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Check if the directory exists\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n\n    # Find all CSV files in the directory and its subdirectories\n    csv_files = glob.glob(os.path.join(data_dir, '**/*.csv'), recursive=True)\n\n    # Check if there are any CSV files\n    if not csv_files:\n        raise ValueError(f\"No CSV files found in the directory '{data_dir}'.\")\n\n    # Sort the CSV files in ascending order\n    csv_files = sorted(csv_files)\n\n    # Initialize a Texttable instance\n    table = Texttable()\n\n    # Set the headers for the table\n    table.header([\"File\", \"Rows\", \"Columns\"])\n\n    # Read each CSV file, count the rows and columns, and add to the table\n    for csv_file in csv_files:\n        try:\n            df = pd.read_csv(csv_file", "compilation_passed": false, "time": 0.00020194053649902344, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Validate input\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"The specified directory does not exist: {data_dir}\")\n\n    # Find all CSV files in the specified directory and sort them\n    csv_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n\n    # Validate that there are CSV files in the specified directory\n    if not csv_files:\n        raise ValueError(\"No CSV files found in the specified directory\")\n\n    # Create a table object\n    table = Texttable()\n    # Set the header row\n    table.header([\"File\", \"Rows\", \"Columns\"])\n    # Set the alignment of each column in the table\n    table.set_cols_align(['l', 'r', 'r'])\n\n    # Iterate through each CSV file\n    for file in csv_files:\n        try:\n            # Read the CSV file using pandas\n            df = pd.read_csv(file)\n            # Append a row to the", "compilation_passed": false, "time": 0.0001850128173828125, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The specified directory '{data_dir}' does not exist.\")\n\n    csv_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not csv_files:\n        raise ValueError(f\"No CSV files found in directory '{data_dir}'.\")\n\n    table = Texttable()\n    table.header(['File', 'Rows', 'Columns'])\n\n    for csv_file in sorted(csv_files):\n        try:\n            df = pd.read_csv(csv_file)\n            filename = os.path.basename(csv_file)\n            num_rows = len(df.index)\n            num_cols = len(df.columns)\n            table.add_row([filename, num_rows, num_cols])\n        except pd.errors.EmptyDataError as e:\n            raise e\n\n    return table.draw()", "compilation_passed": true, "time": 0.0013272762298583984, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Check if the specified directory exists\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"The specified directory does not exist.\")\n\n    # Get a list of sorted CSV files in the directory\n    csv_files = sorted(glob.glob(os.path.join(data_dir, \"*.csv\")))\n\n    # Check if there are no CSV files in the directory\n    if not csv_files:\n        raise ValueError(\"There are no CSV files in the specified directory.\")\n\n    # Initialize the Texttable object\n    table = Texttable()\n\n    # Set the headers\n    table.header(['File', 'Rows', 'Columns'])\n\n    # Set the column types\n    table.set_cols_dtype(['t', 'i', 'i'])\n\n    # Iterate through the sorted CSV files\n    for file in csv_files:\n        try:\n            # Read the CSV file using pandas\n            df = pd.read_csv(file)\n\n            # Get the number of rows and columns\n            nrows", "compilation_passed": false, "time": 0.00018787384033203125, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Validate input\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory '{data_dir}' not found.\")\n\n    # Search for CSV files in the directory\n    csv_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not csv_files:\n        raise ValueError(f\"No CSV files found in '{data_dir}' directory.\")\n\n    # Load CSV files into pandas and get number of rows and columns\n    table = Texttable()\n    table.set_cols_align(['l', 'r', 'r'])\n    table.set_cols_dtype(['t', 'i', 'i'])\n    table.set_deco(Texttable.HEADER)\n    table.header([\"File\", \"Rows\", \"Columns\"])\n    for csv_file in sorted(csv_files):\n        try:\n            df = pd.read_csv(csv_file)\n            table.add_row([os.path.basename(csv_", "compilation_passed": false, "time": 0.0002300739288330078, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory '{data_dir}' does not exist.\")\n\n    files = glob.glob(f\"{data_dir}/*.csv\")\n    if not files:\n        raise ValueError(f\"No CSV files found in directory '{data_dir}'.\")\n\n    table = Texttable()\n    table.header(['File', 'Rows', 'Columns'])\n    for file in files:\n        try:\n            df = pd.read_csv(file)\n            table.add_row([os.path.basename(file), df.shape[0], df.shape[1]])\n        except EmptyDataError as e:\n            raise e\n\n    return table.draw()", "compilation_passed": true, "time": 0.0012552738189697266, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory '{data_dir}' does not exist.\")\n\n    # Search for all CSV files in the directory and sort them in ascending order\n    csv_files = sorted(glob.glob(os.path.join(data_dir, \"*.csv\")))\n\n    if not csv_files:\n        raise ValueError(f\"No CSV files found in '{data_dir}'.\")\n\n    # Create an instance of Texttable for table creation\n    table = Texttable()\n    table.set_cols_align(['r', 'l', 'l'])\n    table.header([\"File\", \"Rows\", \"Columns\"])\n\n    for csv_file in csv_files:\n        try:\n            df = pd.read_csv(csv_file)\n            table.add_row([os.path.basename(csv_file), df.shape[0], df.shape[1]])\n        except pd.errors.EmptyDataError:\n            raise pd.errors.", "compilation_passed": false, "time": 0.00024008750915527344, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Directory '{}' does not exist.\".format(data_dir))\n    files = glob.glob(data_dir + '*.csv')\n    if not files:\n        raise ValueError(\"No CSV files found in directory '{}'.\".format(data_dir))\n    files = sorted(files)\n    table = Texttable()\n    table.header(['File', 'Rows', 'Columns'])\n    for file in files:\n        try:\n            df = pd.read_csv(file)\n            n_rows = df.shape[0]\n            n_columns = df.shape[1]\n            table.add_row([os.path.basename(file), n_rows, n_columns])\n        except pandas.errors.EmptyDataError:\n            raise pandas.errors.EmptyDataError(\"CSV file '{}' is empty.\".format(file))\n    return table.draw()", "compilation_passed": true, "time": 0.0013456344604492188, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} does not exist\")\n    csv_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not csv_files:\n        raise ValueError(f\"No CSV files found in directory {data_dir}\")\n\n    table = Texttable()\n    table.header(['File', 'Rows', 'Columns'])\n\n    for csv_file in csv_files:\n        df = pd.read_csv(csv_file)\n        try:\n            df = pd.read_csv(csv_file)\n            row_count = df.shape[0]\n            column_count = df.shape[1]\n            table.add_row([os.path.basename(csv_file), row_count, column_count])\n        except pd.errors.EmptyDataError:\n            raise\n\n    return table.draw()", "compilation_passed": true, "time": 0.001287221908569336, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory {data_dir} does not exist.\")\n\n    csv_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n\n    if not csv_files:\n        raise ValueError(f\"There are no CSV files in the directory {data_dir}.\")\n\n    csv_files.sort()\n    table = Texttable()\n    table.header(['File', 'Rows', 'Columns'])\n    table.set_cols_dtype(['t', 'i', 'i'])\n\n    for filename in csv_files:\n        try:\n            df = pd.read_csv(filename)\n            table.add_row([os.path.basename(filename), df.shape[0], df.shape[1]])\n        except EmptyDataError as e:\n            raise\n\n    return table.draw()", "compilation_passed": true, "time": 0.001291036605834961, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if not os.path.isdir(data_dir):\n        raise FileNotFoundError(\"Directory not found.\")\n    files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not files:\n        raise ValueError(\"No CSV files found in directory.\")\n    table = Texttable()\n    table.add_row([\"File\", \"Rows\", \"Columns\"])\n    table.set_cols_align([\"l\", \"r\", \"r\"])\n    files.sort()\n    for filename in files:\n        try:\n            df = pd.read_csv(filename)\n            table.add_row([os.path.basename(filename), df.shape[0], df.shape[1]])\n        except pandas.errors.EmptyDataError:\n            raise\n    return table.draw()", "compilation_passed": true, "time": 0.0013320446014404297, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory {data_dir} does not exist.\")\n    csv_files = glob.glob(f\"{data_dir}/*.csv\")\n    if not csv_files:\n        raise ValueError(f\"There are no CSV files in {data_dir}\")\n    csv_files.sort()\n    csv_data = []\n    for csv_file in csv_files:\n        try:\n            df = pd.read_csv(csv_file, engine='c')\n            row_count = df.shape[0]\n            col_count = df.shape[1]\n            csv_data.append((os.path.basename(csv_file), row_count, col_count))\n        except pd.errors.EmptyDataError as e:\n            raise e\n    table = Texttable()\n    table.header([\"File\", \"Rows\", \"Columns\"])\n    for data in csv_data:\n        table.add_row(data)\n    return table.draw", "compilation_passed": true, "time": 0.001306772232055664, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory '{data_dir}' does not exist.\")\n\n    csv_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not csv_files:\n        raise ValueError(f\"No CSV files found in directory '{data_dir}'.\")\n\n    csv_files.sort()\n\n    table = Texttable()\n    table.header([\"File\", \"Rows\", \"Columns\"])\n    table.set_cols_align([\"l\", \"r\", \"r\"])\n    table.set_deco(Texttable.HEADER | Texttable.HLINES)\n    for file in csv_files:\n        try:\n            df = pd.read_csv(file)\n            num_rows = len(df)\n            num_cols = len(df.columns)\n            table.add_row([os.path.basename(file), num_rows, num_cols])\n        except pandas.errors.EmptyDataError", "compilation_passed": false, "time": 0.000247955322265625, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"Directory '{data_dir}' not found.\")\n\n    files = glob.glob(os.path.join(data_dir, '*.csv'))\n\n    if not files:\n        raise ValueError(f\"No CSV files found in directory '{data_dir}'.\")\n\n    table = Texttable()\n    table.set_cols_align(['l', 'r', 'r'])\n    table.set_cols_valign(['m', 'm', 'm'])\n    table.header(['File', 'Rows', 'Columns'])\n\n    for file_path in sorted(files):\n        try:\n            df = pd.read_csv(file_path)\n            num_rows = df.shape[0]\n            num_columns = df.shape[1]\n            table.add_row([os.path.basename(file_path), num_rows, num_columns])\n        except pandas.errors.EmptyDataError as e:\n            print(f\"Error", "compilation_passed": false, "time": 0.00010704994201660156, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Check if the directory exists\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist.\")\n\n    # Get the list of CSV files in the directory\n    csv_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not csv_files:\n        raise ValueError(f\"There are no CSV files in directory '{data_dir}'.\")\n\n    # Initialize the table\n    table = Texttable()\n    table.header(['File', 'Rows', 'Columns'])\n    table.set_cols_dtype(['t', 'i', 'i'])\n\n    # Process each CSV file and add to the table\n    for csv_file in csv_files:\n        try:\n            df = pd.read_csv(csv_file)\n            rows, columns = df.shape\n            table.add_row([os.path.basename(csv_file), rows, columns])\n        except pandas.errors.EmptyDataError", "compilation_passed": false, "time": 0.00021195411682128906, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"Directory '{data_dir}' not found.\")\n\n    csv_files = sorted(glob.glob(os.path.join(data_dir, '*.csv')))\n    if not csv_files:\n        raise ValueError(f\"No CSV files found in directory '{data_dir}'.\")\n\n    # Initialize the table\n    table = Texttable()\n    table.set_deco(Texttable.HEADER | Texttable.VLINES)\n    table.set_cols_dtype(['t', 'i', 'i'])  # Set the columns to accept string, integer, and integer values\n    table.set_cols_align(['l', 'r', 'r'])  # Set the alignment for each column\n    table.header(['File', 'Rows', 'Columns'])\n\n    # Add each CSV file's information to the table\n    for csv_file in csv_files:\n        try:\n            df = pd.read_csv(csv_file", "compilation_passed": false, "time": 0.00021505355834960938, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory '{data_dir}' not found.\")\n\n    csv_files = glob.glob(f'{data_dir}/*.csv')\n    if not csv_files:\n        raise ValueError(f\"No CSV files found in directory '{data_dir}'.\")\n\n    table = Texttable()\n    table.add_rows([['File', 'Rows', 'Columns']] +\n                   [[file_name, pd.read_csv(file_name).shape[0], pd.read_csv(file_name).shape[1]]\n                    for file_name in sorted(csv_files)])\n    return table.draw()", "compilation_passed": true, "time": 0.0012269020080566406, "tests_passed": false, "error": "FileNotFoundError"}
