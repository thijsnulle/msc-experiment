{"code": "# Generate an array of random integers between 1 and 100\n    arr = np.random.randint(1, 101, size=ARRAY_SIZE)\n\n    # Calculate the mean and standard deviation of the array\n    mean = np.mean(arr)\n    std = np.std(arr)\n\n    # Create a figure and axis\n    fig, ax = plt.subplots()\n\n    # Set the figure and axis properties\n    ax.set_title(\"Histogram of Random Values\")\n    ax.set_xlabel(\"Val\")\n    ax.set_ylabel(\"Freq\")\n\n    # Draw a histogram of the array\n    ax.hist(arr, bins=10, alpha=0.5, edgecolor='black')\n\n    # Draw the mean as a dashed red line\n    ax.axvline(x=mean, color='red', linestyle='--')\n\n    # Draw the standard deviation as dashed purple lines\n    ax.axvline(x=mean + std, color='purple', linestyle='--')\n    ax.axv", "compilation_passed": true, "time": 0.02060675621032715, "tests_passed": false, "error": "AttributeError"}
{"code": "# Generate an array of random integers between 1 and 100\n    array = np.random.randint(1, 100, ARRAY_SIZE)\n    mean = np.mean(array)\n    std = np.std(array)\n    # Plot the histogram\n    ax = plt.gca()\n    ax.hist(array, bins=50)\n    ax.set_title('Histogram of Random Values')\n    ax.set_xlabel('Val')\n    ax.set_ylabel('Freq')\n    ax.axvline(mean, color='r', linestyle='--')\n    ax.axvline(mean - std, color='purple', linestyle='--')\n    ax.axvline(mean + std, color='purple', linestyle='--')\n\n    return array, mean, std, ax", "compilation_passed": true, "time": 0.01095724105834961, "tests_passed": true, "error": null}
{"code": "# Initialize the array with random integers\n    array = np.random.randint(low=1, high=100, size=ARRAY_SIZE)\n\n    # Calculate the mean and standard deviation of the array\n    mean = np.mean(array)\n    std = np.std(array)\n\n    # Create a new figure and a set of subplots\n    fig, ax = plt.subplots(1, 1, figsize=(12, 5), tight_layout=True)\n\n    # Set the title and labels for the x-axis and y-axis\n    ax.set_title(\"Histogram of Random Values\")\n    ax.set_xlabel(\"Val\")\n    ax.set_ylabel(\"Freq\")\n\n    # Draw the histogram of the array\n    ax.hist(array, bins=50, color=\"steelblue\", alpha=0.7)\n\n    # Plot the mean as a red dashed line\n    ax.plot([mean, mean], [0, ARRAY_SIZE], color=\"red\", linestyle=\"--\"", "compilation_passed": false, "time": 0.00021386146545410156, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Create random array with given size and bounds\n    array = np.random.randint(1, 100, ARRAY_SIZE)\n\n    # Calculate mean and standard deviation\n    mean = array.mean()\n    std = array.std()\n\n    # Plot histogram\n    fig, ax = plt.subplots()\n    ax.hist(array, bins=20, edgecolor=\"w\")\n    ax.set_title(\"Histogram of Random Values\")\n    ax.set_xlabel(\"Val\")\n    ax.set_ylabel(\"Freq\")\n\n    # Plot mean as dashed red line\n    ax.axvline(x=mean, color=\"r\", linestyle=\"--\")\n\n    # Plot standard deviation as dashed purple lines\n    ax.axvline(x=mean - std, color=\"purple\", linestyle=\"--\")\n    ax.axvline(x=mean + std, color=\"purple\", linestyle=\"--\")\n\n    return array, mean, std, ax", "compilation_passed": true, "time": 0.021113872528076172, "tests_passed": true, "error": null}
{"code": "# Create an array of random integers between 1 and 100\n    array = np.random.randint(1, 100, ARRAY_SIZE)\n\n    # Calculate the mean and standard deviation of the array\n    mean = np.mean(array)\n    std = np.std(array)\n\n    # Create a new figure and axes for the histogram\n    fig, ax = plt.subplots()\n\n    # Plot the histogram of the array\n    ax.hist(array, bins=10, edgecolor='black')\n\n    # Add the title and labels to the axes\n    ax.set_title('Histogram of Random Values')\n    ax.set_xlabel('Val')\n    ax.set_ylabel('Freq')\n\n    # Add the mean and standard deviation as dashed lines\n    ax.axvline(mean, color='red', linestyle='dashed', linewidth=2)\n    ax.axvline(mean - std, color='purple', linestyle='dashed', linewidth=2)\n    ax.axvline(mean + std, color='purple',", "compilation_passed": false, "time": 0.00024819374084472656, "tests_passed": false, "error": "SyntaxError"}
{"code": "array = np.random.randint(1, 100, ARRAY_SIZE)\n    mean = np.mean(array)\n    std = np.std(array)\n\n    fig, ax = plt.subplots()\n    ax.hist(array, bins='auto')\n    ax.set_title(\"Histogram of Random Values\")\n    ax.set_xlabel(\"Val\")\n    ax.set_ylabel(\"Freq\")\n    ax.plot((mean, mean), (ax.get_ylim()[0], ax.get_ylim()[1]), \"r--\", label=\"mean\")\n    ax.plot((mean-std, mean-std), (ax.get_ylim()[0], ax.get_ylim()[1]), \"r--\", label=\"mean-std\")\n    ax.plot((mean+std, mean+std), (ax.get_ylim()[0], ax.get_ylim()[1]), \"r--\", label=\"mean+std\")\n    ax.plot((mean", "compilation_passed": false, "time": 0.00025391578674316406, "tests_passed": false, "error": "SyntaxError"}
{"code": "array = np.random.randint(1, 100, ARRAY_SIZE)\n    mean = np.mean(array)\n    std = np.std(array)\n    ax = plt.hist(array, bins=10)\n    plt.title(\"Histogram of Random Values\")\n    plt.xlabel(\"Val\")\n    plt.ylabel(\"Freq\")\n    plt.axvline(mean, color=\"red\", linestyle=\"--\")\n    plt.axvline(mean + std, color=\"purple\", linestyle=\"--\")\n    plt.axvline(mean - std, color=\"purple\", linestyle=\"--\")\n    return array, mean, std, ax", "compilation_passed": true, "time": 0.0047609806060791016, "tests_passed": true, "error": null}
{"code": "# Generate array of random integers between 1 and 100\n    array = np.random.randint(1, 101, ARRAY_SIZE)\n\n    # Calculate mean and standard deviation of the array\n    mean = np.mean(array)\n    std = np.std(array)\n\n    # Create a figure and axis for the histogram\n    fig, ax = plt.subplots()\n\n    # Create a histogram of the array values with 10 bins\n    ax.hist(array, bins=10)\n\n    # Set the x-axis label to \"Val\" and the y-axis label to \"Freq\"\n    ax.set_xlabel('Val')\n    ax.set_ylabel('Freq')\n\n    # Set the title to \"Histogram of Random Values\"\n    ax.set_title('Histogram of Random Values')\n\n    # Add the mean and standard deviation as lines to the histogram\n    ax.axvline(mean, color='red', linestyle='--')\n    ax.axvline(mean + std, color='purple', linestyle='--", "compilation_passed": false, "time": 8.821487426757812e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "array = np.random.randint(1, 100, ARRAY_SIZE)\n    mean = array.mean()\n    std = array.std()\n\n    fig, ax = plt.subplots()\n    ax.hist(array, edgecolor='black')\n\n    ax.set_title('Histogram of Random Values')\n    ax.set_xlabel('Val')\n    ax.set_ylabel('Freq')\n    ax.axvline(mean, color='r', linestyle='--')\n    ax.axvline(mean - std, color='purple', linestyle='--')\n    ax.axvline(mean + std, color='purple', linestyle='--')\n    return array, mean, std, ax", "compilation_passed": true, "time": 0.01857304573059082, "tests_passed": true, "error": null}
{"code": "array = np.random.randint(1, 100, ARRAY_SIZE)\n    mean = array.mean()\n    std = array.std()\n    ax = plt.axes()\n    ax.set_title(\"Histogram of Random Values\")\n    ax.set_xlabel(\"Val\")\n    ax.set_ylabel(\"Freq\")\n    ax.plot(ax.get_xlim(), [mean for _ in ax.get_xlim()], \"r--\")\n    ax.plot(ax.get_xlim(), [mean - std for _ in ax.get_xlim()], \"b--\")\n    ax.plot(ax.get_xlim(), [mean + std for _ in ax.get_xlim()], \"b--\")\n    ax.hist(array, edgecolor='white')\n    plt.show()\n    return (array, mean, std, ax)", "compilation_passed": true, "time": 0.0075550079345703125, "tests_passed": true, "error": null}
{"code": "# create an array of 10000 random values\n    values = np.random.randint(1, 100, ARRAY_SIZE)\n    # calculate mean and std of the array\n    mean = np.mean(values)\n    std = np.std(values)\n    # create the histogram\n    ax = plt.axes()\n    ax.set_title('Histogram of Random Values')\n    ax.set_xlabel('Val')\n    ax.set_ylabel('Freq')\n    ax.hist(values, bins=25, edgecolor='black')\n    # plot the mean as a red dashed line\n    ax.plot([mean, mean], [0, np.max(ax.get_yticks())], color='red', linestyle='--')\n    # plot the std as purple dashed lines\n    ax.plot([mean-std, mean-std], [0, np.max(ax.get_yticks())], color='purple', linestyle='--')\n    ax.plot([mean+std, mean+std], [0, np.max", "compilation_passed": false, "time": 0.0002570152282714844, "tests_passed": false, "error": "SyntaxError"}
{"code": "arr = np.random.randint(1, 100, ARRAY_SIZE)\n    mean = np.mean(arr)\n    std = np.std(arr)\n\n    fig, ax = plt.subplots(1, 1, figsize=(15, 5))\n    ax.hist(arr, edgecolor='black')\n    ax.set_title(\"Histogram of Random Values\")\n    ax.set_xlabel('Val')\n    ax.set_ylabel('Freq')\n    ax.axvline(x=mean, color='r', linestyle='dashed', linewidth=2)\n    ax.axvline(x=mean - std, color='purple', linestyle='dashed', linewidth=2)\n    ax.axvline(x=mean + std, color='purple', linestyle='dashed', linewidth=2)\n    plt.show()\n\n    return arr, mean, std, ax", "compilation_passed": true, "time": 0.019247770309448242, "tests_passed": true, "error": null}
{"code": "# Generate a random array of integers between 1 and 100\n    arr = np.random.randint(1, 101, size=ARRAY_SIZE)\n\n    # Calculate the mean and standard deviation\n    mean = np.mean(arr)\n    std = np.std(arr)\n\n    # Plot a histogram of the distribution\n    fig, ax = plt.subplots()\n    ax.hist(arr, bins=10, edgecolor='black')\n    ax.set_title('Histogram of Random Values')\n    ax.set_xlabel('Val')\n    ax.set_ylabel('Freq')\n    ax.axvline(mean, color='r', linestyle='--', label='Mean')\n    ax.axvline(mean + std, color='purple', linestyle='--', label='Std')\n    ax.axvline(mean - std, color='purple', linestyle='--')\n    plt.grid(True)\n    return arr, mean, std, ax", "compilation_passed": true, "time": 0.020535707473754883, "tests_passed": true, "error": null}
{"code": "# Create an array of 10000 random integers between 1 and 100\n    array = np.random.randint(1, 101, ARRAY_SIZE)\n\n    # Calculate the mean and standard deviation of the array\n    mean = array.mean()\n    std = array.std()\n\n    # Create a histogram plot of the array\n    fig, ax = plt.subplots(1, 1)\n    ax.set_title(\"Histogram of Random Values\")\n    ax.set_xlabel(\"Val\")\n    ax.set_ylabel(\"Freq\")\n    ax.hist(array, bins=20, alpha=0.5)\n\n    # Plot the mean as a red dashed line\n    ax.axvline(mean, color='red', linestyle='--')\n\n    # Plot the standard deviation as two purple dashed lines\n    ax.axvline(mean-std, color='purple', linestyle='--')\n    ax.axvline(mean+std, color='purple', linestyle='--')\n\n    ", "compilation_passed": true, "time": 0.02069711685180664, "tests_passed": false, "error": "TypeError"}
{"code": "np.random.seed(0)\n    rand_array = np.random.randint(1, 100, ARRAY_SIZE)\n    mean = np.mean(rand_array)\n    std = np.std(rand_array)\n\n    fig, ax = plt.subplots()\n    ax.hist(rand_array, bins=100)\n    ax.set_title(\"Histogram of Random Values\")\n    ax.set_xlabel(\"Val\")\n    ax.set_ylabel(\"Freq\")\n    ax.axvline(x=mean, color=\"red\", linestyle=\"--\")\n    ax.axvline(x=mean+std, color=\"purple\", linestyle=\"--\")\n    ax.axvline(x=mean-std, color=\"purple\", linestyle=\"--\")\n    return rand_array, mean, std, ax", "compilation_passed": true, "time": 0.03486800193786621, "tests_passed": true, "error": null}
{"code": "# Create a numeric array of random integers\n    array = np.random.randint(1, 101, ARRAY_SIZE)\n\n    # Calculate the mean and standard deviation\n    mean = np.mean(array)\n    std = np.std(array)\n\n    # Draw a histogram of the distribution\n    plt.hist(array)\n    ax = plt.subplot()\n    ax.set_title(\"Histogram of Random Values\")\n    ax.set_xlabel(\"Val\")\n    ax.set_ylabel(\"Freq\")\n\n    # Add the mean line\n    ax.axvline(mean, c=\"r\", linestyle=\"--\")\n\n    # Add the standard deviation lines\n    ax.axvline(mean - std, c=\"purple\", linestyle=\"--\")\n    ax.axvline(mean + std, c=\"purple\", linestyle=\"--\")\n\n    return array, mean, std, ax", "compilation_passed": true, "time": 0.00416111946105957, "tests_passed": true, "error": null}
{"code": "# Initialize numpy\n    np.random.seed(0)\n\n    # Create an array of random values\n    array = np.random.randint(1, 100, ARRAY_SIZE)\n\n    # Calculate the mean\n    mean = np.mean(array)\n\n    # Calculate the standard deviation\n    std = np.std(array)\n\n    # Create a figure and add the histogram\n    fig, ax = plt.subplots()\n    ax.hist(array, bins=50, rwidth=0.8, ec='black')\n\n    # Set the title and axis labels\n    ax.set_title(\"Histogram of Random Values\")\n    ax.set_xlabel(\"Val\")\n    ax.set_ylabel(\"Freq\")\n\n    # Plot the mean and the standard deviation\n    ax.axvline(mean, color='red', linestyle='dashed', linewidth=2)\n    ax.axvline(mean + std, color='purple', linestyle='dashed', linewidth=2)\n    ax.axvline(mean - std,", "compilation_passed": false, "time": 0.0002167224884033203, "tests_passed": false, "error": "SyntaxError"}
{"code": "array = np.random.randint(1, 100, ARRAY_SIZE)\n    mean = np.mean(array)\n    std = np.std(array)\n    plt.figure(figsize=(10, 7))\n    ax = plt.hist(array, bins=10)\n    plt.title(\"Histogram of Random Values\")\n    plt.xlabel(\"Val\")\n    plt.ylabel(\"Freq\")\n    plt.axvline(x=mean, c='red', ls='--')\n    plt.axvline(x=mean + std, c='purple', ls='--')\n    plt.axvline(x=mean - std, c='purple', ls='--')\n    return array, mean, std, ax", "compilation_passed": true, "time": 0.01994609832763672, "tests_passed": true, "error": null}
{"code": "# Generate a random array of 10000 numbers between 1 and 100\n    array = np.random.randint(1, 101, size=ARRAY_SIZE)\n    # Calculate the mean and standard deviation of the array\n    mean = np.mean(array)\n    std = np.std(array)\n    # Create a histogram of the array values\n    fig, ax = plt.subplots()\n    ax.hist(array, bins=50)\n    ax.set_title('Histogram of Random Values')\n    ax.set_xlabel('Val')\n    ax.set_ylabel('Freq')\n    # Add the mean and standard deviation to the histogram\n    ax.axvline(mean, color='r', linestyle='--')\n    ax.axvline(mean - std, color='m', linestyle='--')\n    ax.axvline(mean + std, color='m', linestyle='--')\n    return array, mean, std, ax", "compilation_passed": true, "time": 0.025720834732055664, "tests_passed": true, "error": null}
{"code": "# Create a numeric array of random integers\n    array = np.random.randint(1, 100, ARRAY_SIZE)\n\n    # Calculate the mean and standard deviation of the array\n    mean = np.mean(array)\n    std = np.std(array)\n\n    # Create a histogram of the distribution\n    fig, ax = plt.subplots()\n    ax.hist(array, bins=20)\n    ax.set_title(\"Histogram of Random Values\")\n    ax.set_xlabel(\"Val\")\n    ax.set_ylabel(\"Freq\")\n\n    # Plot the mean as a red dashed line\n    ax.axvline(mean, color='r', linestyle='dashed', linewidth=2)\n\n    # Plot the standard deviation as a blue dashed line\n    ax.axvline(mean - std, color='b', linestyle='dashed', linewidth=1)\n    ax.axvline(mean + std, color='b', linestyle='dashed', linewidth=1)\n\n    return array, mean, std, ax", "compilation_passed": true, "time": 0.022884130477905273, "tests_passed": true, "error": null}
{"code": "# Create an array of random integers of length ARRAY_SIZE\n    arr = np.random.randint(1, 100, ARRAY_SIZE)\n    # Calculate the mean and standard deviation of the array\n    mean = np.mean(arr)\n    std = np.std(arr)\n\n    # Create a histogram of the array\n    fig, ax = plt.subplots()\n    ax.hist(arr, bins=30)\n\n    # Set the title of the plot\n    ax.set_title(\"Histogram of Random Values\")\n\n    # Set the x-axis label\n    ax.set_xlabel(\"Val\")\n    # Set the y-axis label\n    ax.set_ylabel(\"Freq\")\n\n    # Plot the mean as a dashed line\n    ax.plot((mean, mean), (0, np.max(ax.get_ylim())), 'r--', linewidth=2)\n\n    # Plot the standard deviation as dashed lines\n    ax.plot((mean - std, mean - std), (0, np.max(ax.", "compilation_passed": false, "time": 0.00024437904357910156, "tests_passed": false, "error": "SyntaxError"}
{"code": "array = np.random.randint(1, 101, ARRAY_SIZE)\n    mean = np.mean(array)\n    std = np.std(array)\n\n    fig, ax = plt.subplots()\n    ax.hist(array, bins=25, edgecolor='black')\n\n    ax.set_title('Histogram of Random Values')\n    ax.set_xlabel('Val')\n    ax.set_ylabel('Freq')\n\n    ax.axvline(x=mean, color='r', linestyle='--')\n    ax.axvline(x=mean+std, color='purple', linestyle='--')\n    ax.axvline(x=mean-std, color='purple', linestyle='--')\n\n    return array, mean, std, ax", "compilation_passed": true, "time": 0.021177053451538086, "tests_passed": true, "error": null}
{"code": "# Create an array of random integers\n    array = np.random.randint(1, 100, ARRAY_SIZE)\n\n    # Calculate mean and standard deviation\n    mean = np.mean(array)\n    std = np.std(array)\n\n    # Set plot parameters\n    plt.figure(figsize=(10, 8))\n    plt.title(\"Histogram of Random Values\")\n    plt.xlabel(\"Val\")\n    plt.ylabel(\"Freq\")\n    plt.grid()\n\n    # Draw a histogram\n    ax = plt.hist(array, bins=100, edgecolor=\"red\", linewidth=0.7, color=\"#2d3436\")\n\n    # Plot the mean and standard deviation\n    plt.axvline(mean, color='r', linestyle='--')\n    plt.axvline(mean - std, color='purple', linestyle='--')\n    plt.axvline(mean + std, color='purple', linestyle='--')\n\n    return array, mean,", "compilation_passed": true, "time": 0.035208940505981445, "tests_passed": false, "error": "ValueError"}
{"code": "array = np.random.randint(1, 100, ARRAY_SIZE)\n    mean = np.mean(array)\n    std = np.std(array)\n    ax = plt.hist(array, bins=20, range=(1, 100))\n    ax = plt.title(\"Histogram of Random Values\")\n    ax = plt.xlabel(\"Val\")\n    ax = plt.ylabel(\"Freq\")\n    ax = plt.plot((mean, mean), (0, ARRAY_SIZE), 'r--')\n    ax = plt.plot((mean - std, mean - std), (0, ARRAY_SIZE), 'm--')\n    ax = plt.plot((mean + std, mean + std), (0, ARRAY_SIZE), 'm--')\n    return array, mean, std, ax", "compilation_passed": true, "time": 0.0055921077728271484, "tests_passed": true, "error": null}
{"code": "# Create an array of random integers between 1 and 100\n    array = np.random.randint(1, 101, ARRAY_SIZE)\n\n    # Calculate the mean and standard deviation of the array\n    mean = np.mean(array)\n    std = np.std(array)\n\n    # Draw a histogram of the distribution\n    ax = plt.subplot(111)\n    ax.set_title('Histogram of Random Values')\n    ax.set_xlabel('Val')\n    ax.set_ylabel('Freq')\n\n    ax.plot(np.arange(1, 101), np.ones(100) * ARRAY_SIZE / 100, label='_nolegend_')\n\n    # Plot the mean as a red dashed line\n    ax.plot([mean, mean], [0, ARRAY_SIZE], color='red', linestyle='--', label='Mean')\n\n    # Plot the standard deviation as purple dashed lines\n    ax.plot([mean - std, mean - std], [", "compilation_passed": false, "time": 0.0002269744873046875, "tests_passed": false, "error": "SyntaxError"}
{"code": "arr = np.random.randint(1, 101, ARRAY_SIZE)\n    mean = np.mean(arr)\n    std = np.std(arr)\n    fig, ax = plt.subplots()\n    ax.hist(arr, bins=\"auto\")\n    ax.set_title(\"Histogram of Random Values\")\n    ax.set_xlabel(\"Val\")\n    ax.set_ylabel(\"Freq\")\n    # add a line for the mean\n    ax.plot([mean, mean], [0, ARRAY_SIZE], \"r--\")\n    # add lines for the standard deviation\n    ax.plot([mean - std, mean - std], [0, ARRAY_SIZE], \"p--\")\n    ax.plot([mean + std, mean + std], [0, ARRAY_SIZE], \"p--\")\n\n    return arr, mean, std, ax", "compilation_passed": true, "time": 0.020760774612426758, "tests_passed": true, "error": null}
{"code": "array = np.random.randint(1, 100, ARRAY_SIZE)\n    mean = np.mean(array)\n    std = np.std(array)\n    ax = plt.hist(array, bins='auto')\n    plt.title(\"Histogram of Random Values\")\n    plt.xlabel('Val')\n    plt.ylabel('Freq')\n    plt.axvline(mean, color='r', linestyle='dashed', linewidth=2)\n    plt.axvline(mean + std, color='m', linestyle='dashed', linewidth=2)\n    plt.axvline(mean - std, color='m', linestyle='dashed', linewidth=2)\n\n    return (array, mean, std, ax)", "compilation_passed": true, "time": 0.006353139877319336, "tests_passed": true, "error": null}
{"code": "array = np.random.randint(1, 100, ARRAY_SIZE)\n    mean = np.mean(array)\n    std = np.std(array)\n    # Plot the histogram\n    ax = plt.hist(array, bins='auto')\n    plt.title(\"Histogram of Random Values\")\n    plt.xlabel(\"Val\")\n    plt.ylabel(\"Freq\")\n    # Plot the mean and the standard deviation\n    plt.axvline(mean, color='r', linestyle='dashed', linewidth=2)\n    plt.axvline(mean + std, color='purple', linestyle='dashed', linewidth=2)\n    plt.axvline(mean - std, color='purple', linestyle='dashed', linewidth=2)\n    return array, mean, std, ax", "compilation_passed": true, "time": 0.006175994873046875, "tests_passed": true, "error": null}
{"code": "# Generate an array of random integers between 1 and 100\n    array = np.random.randint(1, 101, ARRAY_SIZE)\n    # Calculate the mean of the array\n    mean = array.mean()\n    # Calculate the standard deviation of the array\n    std = array.std()\n    # Create a histogram of the array\n    ax = plt.hist(array, bins=20)\n    # Set the title of the histogram\n    plt.title(\"Histogram of Random Values\")\n    # Set the x-axis label\n    plt.xlabel(\"Val\")\n    # Set the y-axis label\n    plt.ylabel(\"Freq\")\n    # Plot the mean as a red dashed line\n    plt.axvline(mean, color='red', linestyle='dashed', linewidth=2)\n    # Plot the standard deviation as purple dashed lines\n    plt.axvline(mean-std, color='purple', linestyle='dashed', linewidth=2)\n    plt.axvline(mean+std, color='purple', linestyle", "compilation_passed": false, "time": 0.0002040863037109375, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Create array of 10000 random integers\n    array = np.random.randint(1, 101, ARRAY_SIZE)\n\n    # Calculate the mean and standard deviation of the array\n    mean = np.mean(array)\n    std = np.std(array)\n\n    # Draw a histogram of the distribution\n    fig, ax = plt.subplots()\n    ax.hist(array, bins=20)\n\n    # Set title, x-axis and y-axis labels\n    ax.set_title(\"Histogram of Random Values\")\n    ax.set_xlabel(\"Val\")\n    ax.set_ylabel(\"Freq\")\n\n    # Plot mean as a dashed line\n    ax.axvline(mean, color='r', linestyle='--')\n\n    # Plot standard deviation as dashed lines\n    ax.axvline(mean - std, color='purple', linestyle='--')\n    ax.axvline(mean + std, color='purple', linestyle='--')\n\n    return array, mean, std,", "compilation_passed": true, "time": 0.025522947311401367, "tests_passed": false, "error": "ValueError"}
