{"code": "script_path = test_dir\n    # print(script_path)\n    # Get all .py files in the directory\n    script_names = glob.glob(os.path.join(script_path, '*.py'))\n    results = {}\n    for script_name in script_names:\n        # print(script_name)\n        start_time = time.time()\n        try:\n            # Execute the Python code\n            output = subprocess.check_output(['python3', script_name])\n        except subprocess.CalledProcessError as e:\n            # print(\"Error executing script:\", script_name)\n            # print(\"Return code:\", e.returncode)\n            # print(\"Output:\", output.decode())\n            print(\"Error executing script:\", script_name)\n            script_name = os.path.basename(script_name)\n            script_name = os.path.splitext(script_name)[0]\n            # print(script_name)\n            results[script_name] = 0\n            continue\n\n        end_time = time", "compilation_passed": true, "time": 0.0849599838256836, "tests_passed": false, "error": "TypeError"}
{"code": "test_files = glob.glob(os.path.join(test_dir, \"*.py\"))\n    test_times = {}\n    for test_file in test_files:\n        start_time = time.time()\n        subprocess.run([\"python3\", test_file])\n        end_time = time.time()\n        test_times[os.path.basename(test_file)] = end_time - start_time\n    return test_times", "compilation_passed": true, "time": 0.11769914627075195, "tests_passed": true, "error": null}
{"code": "result_dict = {}\n    start_time = time.time()\n    # Iterate over all files in the test_dir\n    for filename in glob.glob(os.path.join(test_dir, '*.py')):\n        try:\n            # Execute each Python script\n            result = subprocess.run(['python', filename], capture_output=True, text=True, timeout=100)\n            # Get the script name and execution time\n            script_name = os.path.basename(filename)\n            result_dict[script_name] = round(time.time() - start_time, 2)\n            # Check the execution result and print it\n            if result.returncode == 0:\n                print(f'{script_name} executed successfully')\n                print(f'Execution time: {result_dict[script_name]} seconds')\n            else:\n                print(f'{script_name} failed with return code {result.returncode}')\n                print(f'Execution time: {result_dict[script_name]} seconds')\n        except subprocess.TimeoutExpired as e", "compilation_passed": false, "time": 0.00035572052001953125, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Get a list of Python files in the specified directory\n    python_files = [f for f in glob.glob(os.path.join(test_dir, \"*.py\")) if os.path.isfile(f)]\n\n    # Initialize a dictionary to store the execution times for each Python file\n    execution_times = {}\n\n    # Iterate over each Python file\n    for file in python_files:\n        start_time = time.time()\n\n        # Run the Python code using the 'python' interpreter and capture the return code\n        completed_process = subprocess.run([\"python\", file])\n\n        # Get the return code to check if the execution was successful\n        return_code = completed_process.returncode\n\n        end_time = time.time()\n\n        # Calculate the execution time\n        execution_time = end_time - start_time\n\n        # Add the file and its execution time to the dictionary\n        execution_times[file] = execution_time\n        #execution_times[file] = return_code\n\n    return execution_times", "compilation_passed": true, "time": 0.08414101600646973, "tests_passed": true, "error": null}
{"code": "# Get all .py files in the directory\n    py_files = glob.glob(f\"{test_dir}*.py\")\n\n    # Create a dictionary to store the execution times\n    times = {}\n\n    for py_file in py_files:\n        # Get the script name without the file path\n        script_name = os.path.basename(py_file)\n\n        # Run the script and measure its execution time\n        start_time = time.time()\n        subprocess.call([\"python3\", py_file])\n        end_time = time.time()\n\n        # Calculate the execution time\n        execution_time = end_time - start_time\n\n        # Add the script name and execution time to the dictionary\n        times[script_name] = execution_time\n\n    # Return the dictionary\n    return times", "compilation_passed": true, "time": 0.003175020217895508, "tests_passed": true, "error": null}
{"code": "# Find all Python files in the given directory\n    script_files = glob.glob(os.path.join(test_dir, '*.py'))\n\n    # Run each file and time its execution\n    execution_times = {}\n    for script_file in script_files:\n        start_time = time.time()\n        try:\n            subprocess.check_output([\"python\", script_file], stderr=subprocess.STDOUT)\n        except subprocess.CalledProcessError as e:\n            print(\"Error while running script: {}\".format(script_file))\n            print(\"Error output: {}\".format(e.output.decode('utf-8')))\n            continue\n        end_time = time.time()\n        execution_times[script_file] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.0838780403137207, "tests_passed": true, "error": null}
{"code": "script_path = test_dir\n    print(\"Executing files in:\", script_path)\n    print(\"Please wait, this may take a while...\")\n    print(\"=\" * 50)\n    start_time = time.time()\n    times = {}  # A dictionary to store the execution times of each script\n    for file in glob.glob(os.path.join(script_path, \"*.py\")):\n        with open(file, \"r\") as script:\n            start_time = time.time()\n            subprocess.call([\"python\", script.name])\n            execution_time = time.time() - start_time\n            times[script.name] = execution_time\n            print(\"Execution time of %s: %.4f seconds\" % (script.name, execution_time))\n            print(\"-\" * 50)\n    total_execution_time = time.time() - start_time\n    print(\"Total execution time: %.4f seconds\" % total_execution_time)\n    return times", "compilation_passed": true, "time": 0.08493185043334961, "tests_passed": true, "error": null}
{"code": "test_path = os.path.join(test_dir, \"*.py\")\n    scripts = glob.glob(test_path)\n    results = {}\n\n    for script in scripts:\n        start_time = time.perf_counter()\n        output = subprocess.run(['python3', script], capture_output=True, text=True)\n        end_time = time.perf_counter()\n\n        if output.returncode != 0:\n            print(f\"Error running {script}: {output.stderr}\")\n            continue\n\n        execution_time = end_time - start_time\n\n        if execution_time < 1:\n            execution_time = 1\n        results[script] = execution_time\n        print(f\"{script} : {execution_time} seconds\")\n    return results", "compilation_passed": true, "time": 0.08495306968688965, "tests_passed": true, "error": null}
{"code": "print(\"This is the test_dir: \", test_dir)\n    # Set the path to the Python executable (e.g., 'python3')\n    python_exe = 'python3'\n    python_exe = 'python'\n\n    # List all Python scripts in the specified directory\n    script_files = glob.glob(os.path.join(test_dir, '*.py'))\n    script_files.sort()\n    print(\"This is the test_dir: \", test_dir)\n    print(\"These are the scripts:\")\n    print(\"These are the scripts:\")\n    print(\"These are the scripts:\")\n    for script_path in script_files:\n        print(\"This is the script path:\")\n        print(script_path)\n\n    # Initialize a dictionary to store script names and execution times\n    script_times = {}\n    # Iterate through each script and measure its execution time\n    for script_path in script_files:\n        start_time = time.time()\n        script_name = os.path.basename(script_path)\n        ", "compilation_passed": true, "time": 0.002871990203857422, "tests_passed": false, "error": "TypeError"}
{"code": "# Define the path to the directory containing the Python scripts\n    script_path = test_dir\n    # Find all Python scripts in the specified directory\n    scripts = glob.glob(os.path.join(script_path, \"*.py\"))\n    # Keep track of execution times for each script\n    execution_times = {}\n    # Loop through each script and execute it\n    for script in scripts:\n        # Start a timer\n        start_time = time.time()\n        # Execute the script using the Python interpreter\n        subprocess.run(['python', script], check=True)\n        # Calculate the elapsed time\n        elapsed_time = time.time() - start_time\n        # Get the script name without the full path or extension\n        script_name = os.path.basename(script)\n        execution_times[script_name] = elapsed_time\n\n    return execution_times", "compilation_passed": true, "time": 0.029849767684936523, "tests_passed": false, "error": "subprocess.CalledProcessError"}
{"code": "# Initialize an empty dictionary to store script names and their execution times\n    execution_times = {}\n\n    # Get the list of Python files in the specified directory\n    python_scripts = glob.glob(test_dir + \"*.py\")\n\n    # Iterate through each Python file\n    for script in python_scripts:\n        # Get the script name without the directory path\n        script_name = os.path.basename(script)\n\n        # Run the Python script using the 'python3' interpreter\n        # The script is executed in a separate Python interpreter using subprocess.run()\n        # The capture_output and text arguments are set to True, capturing the output and returning it as a string\n        # The timeout argument is set to 10 seconds, ensuring that the script is terminated after 10 seconds if it is not completed\n        # The stdout and stderr arguments are set to subprocess.PIPE, redirecting the standard output and error to a pipe\n        # The executable argument is set to \"python3\", specifying the Python interpreter to be used\n        start_time = time.time()\n        try:\n            completed_process", "compilation_passed": false, "time": 0.00017213821411132812, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Initialize an empty dictionary to store script execution times\n    time_dict = {}\n    # Find all files in the directory with the .py extension and iterate over them\n    for py_file in glob.glob(test_dir + \"*.py\"):\n        # Start a timer\n        start_time = time.time()\n\n        # Execute the Python code using subprocess and store its output\n        output = subprocess.run([\"python3\", py_file], capture_output=True)\n\n        # Stop the timer\n        end_time = time.time()\n\n        # Calculate the execution time for the script\n        time_dict[py_file] = end_time - start_time\n\n    return time_dict", "compilation_passed": true, "time": 0.0026488304138183594, "tests_passed": true, "error": null}
{"code": "scripts = [f for f in os.listdir(test_dir) if os.path.isfile(os.path.join(test_dir, f)) and f.endswith(\".py\")]\n    #print(scripts)\n    # Create the dictionary with script names as keys and empty lists as values\n    execution_times = {script: [] for script in scripts}\n\n    for script in scripts:\n        for i in range(1, 10):\n            # Run the script using the subprocess module and measure the execution time\n            start_time = time.perf_counter()\n            result = subprocess.run(['python', os.path.join(test_dir, script)], capture_output=True, text=True)\n            end_time = time.perf_counter()\n            execution_time = end_time - start_time\n\n            # Check if the script execution was successful, and append the execution time to the corresponding key in the dictionary\n            if result.returncode == 0:\n                execution_times[script].append(execution_time)\n            else:\n                print(f\"Error", "compilation_passed": false, "time": 9.989738464355469e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Get all Python scripts in the directory\n    scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n    execution_times = {}\n    # Run each script and measure its execution time\n    for script in scripts:\n        # Get the script name without the extension\n        script_name = os.path.splitext(os.path.basename(script))[0]\n        # Run the script with Python interpreter and time its execution\n        start_time = time.perf_counter()\n        result = subprocess.run([\"python\", script], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)\n        end_time = time.perf_counter()\n        execution_time = end_time - start_time\n        # Add script execution time to the dictionary\n        execution_times[script_name] = execution_time\n    return execution_times", "compilation_passed": true, "time": 0.0840601921081543, "tests_passed": true, "error": null}
{"code": "print(\"Processing\", test_dir)\n\n    # Define the directory where the python files are located\n    # script_path = \"C:/Users/yahya/OneDrive/Desktop/Python/py_codes/test_scripts\"\n    # print(os.getcwd())\n\n    # Use os.path.join() to join the script_path, \"*.py\" to get all the python files in the directory\n    scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n\n    # Create an empty dictionary to store the results\n    results = {}\n\n    # Loop through the scripts\n    for script in scripts:\n        # Start the timer\n        start = time.time()\n\n        # Run the script using subprocess\n        subprocess.call([\"python\", script])\n\n        # Get the script name without the path\n        script_name = os.path.basename(script)\n\n        # Calculate the execution time\n        execution_time = time.time() - start\n\n        # Add the script name and execution time to the results dictionary\n        results[", "compilation_passed": false, "time": 0.00022792816162109375, "tests_passed": false, "error": "SyntaxError"}
{"code": "start_time = time.time()\n\n    # Define the directory containing the script(s)\n    script_dir = test_dir\n\n    # Initialize a dictionary to store the execution times\n    execution_times = {}\n\n    # Get a list of Python scripts in the directory\n    # script_paths = glob.glob(os.path.join(script_dir, \"*.py\"))\n    script_paths = glob.glob(os.path.join(script_dir, \"*\"))\n\n    # Iterate over each script and run it\n    for script in script_paths:\n        print(f\"Running script: {script}\")\n\n        # Run the script using the subprocess module\n        result = subprocess.run([\"python\", script], capture_output=True, text=True)\n        print(\"Result: \", result)\n\n        # Check the returncode to determine if the script executed successfully\n        if result.returncode == 0:\n            execution_times[script] = result.returncode\n        else:\n            execution_times[script] = result.returncode\n            print(", "compilation_passed": false, "time": 0.00020194053649902344, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Get the absolute path of the script directory\n    script_path = os.path.dirname(os.path.abspath(__file__))\n    script_path = os.path.join(script_path, test_dir)\n\n    # Set the Python executable path for different OS\n    python_exec = \"python3\"\n\n    # Find all Python scripts in the script directory\n    scripts = glob.glob(script_path + '/*.py')\n\n    # Initialize a dictionary to store the execution times\n    exec_times = {}\n\n    # Iterate over each script and run it\n    for script in scripts:\n        # Run the Python script and measure the execution time\n        start_time = time.time()\n        output = subprocess.check_output([python_exec, script])\n        end_time = time.time()\n\n        # Get the script name without the directory path\n        script_name = os.path.basename(script)\n\n        # Add the execution time to the dictionary\n        exec_times[script_name] = end_time - start_time\n\n    return exec_times", "compilation_passed": true, "time": 0.002653360366821289, "tests_passed": false, "error": "NameError"}
{"code": "# Get a list of all Python files in the script directory\n    py_files = glob.glob(os.path.join(test_dir, \"*.py\"))\n\n    # Create an empty dictionary to store the execution times\n    exec_times = {}\n\n    # Loop over each Python file and execute it\n    for py_file in py_files:\n        # Get the script name without the file extension\n        script_name = os.path.splitext(os.path.basename(py_file))[0]\n\n        # Start a timer for execution time calculation\n        start_time = time.time()\n\n        # Execute the script using subprocess.run() and redirect output to /dev/null\n        completed_process = subprocess.run(['python', py_file], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n\n        # End the timer and calculate the elapsed execution time\n        end_time = time.time()\n        elapsed_time = end_time - start_time\n\n        # Add the script name and execution time to the dictionary\n        exec_", "compilation_passed": true, "time": 0.030099153518676758, "tests_passed": false, "error": "NameError"}
{"code": "scripts = glob.glob(os.path.join(test_dir, '*.py'))\n    results = {}\n    for script in scripts:\n        script_name = os.path.basename(script)\n        start = time.time()\n        subprocess.call(['python3', script], stdout=subprocess.DEVNULL)\n        end = time.time()\n        results[script_name] = round(end - start, 2)\n    return results", "compilation_passed": true, "time": 0.11676406860351562, "tests_passed": true, "error": null}
{"code": "# Initialize variables to store the execution times for each script\n    times = {}\n    # Set the current working directory to the provided script path\n    os.chdir(test_dir)\n    # Loop over all the python scripts in the current working directory\n    for file in glob.glob(\"*.py\"):\n        # Run the script and record the time taken to execute it\n        start = time.time()\n        subprocess.call([\"python\", file])\n        end = time.time()\n        # Store the script name and its execution time in the dictionary\n        times[file] = end - start\n    # Return the dictionary containing the execution times of all the scripts\n    return times", "compilation_passed": true, "time": 0.08382701873779297, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "print(\"test_dir\", test_dir)\n    test_dir = \"/mnt/data/mix_files/\"\n    script_path = os.path.join(test_dir, '*.py')\n    script_names = glob.glob(script_path)\n    print(\"script_names\", script_names)\n    # print(\"script_names\", script_names)\n    # script_names = []  # Initialize an empty list to store script names\n    # for filename in os.listdir(script_path):\n    #     if filename.endswith('.py'):\n    #         script_names.append(os.path.join(script_path, filename))\n\n    execution_times = {}\n\n    for script in script_names:\n        start_time = time.time()\n\n        # subprocess.run([\"python3.10\", script])\n        p = subprocess.Popen([\"python3.10\", script])\n        # p.wait()\n        # print(p.wait())\n        output = p.stdout.read()\n        ", "compilation_passed": true, "time": 0.0028350353240966797, "tests_passed": false, "error": "TypeError"}
{"code": "start_time = time.time()\n\n    # get the absolute path of the current directory\n    current_dir = os.getcwd()\n    # concatenate the current directory and the script_path to create the full path\n    full_path = os.path.join(current_dir, test_dir)\n    # print the full path for debugging purposes\n    print('full_path: ', full_path)\n\n    # search for all .py files in the current directory and its subdirectories\n    # glob.glob returns a list of paths that match the pattern specified by */*.py\n    # the */* part means \"any directory\"\n    # the .py part means \"files with the .py extension\"\n    # the ! in front of the pattern means \"exclude\"\n    # the resulting file_list is a list of paths to all .py files in the current directory and its subdirectories\n    file_list = glob.glob(full_path + '/*/*.py')\n    # print the file_list for debugging purposes\n    print('file_list: ', file_list)\n\n    ", "compilation_passed": true, "time": 0.002443075180053711, "tests_passed": false, "error": "TypeError"}
{"code": "# Find all .py files in the script_path directory\n    python_scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n\n    # Create a dictionary to store the execution times of each script\n    execution_times = {}\n\n    # Iterate through each script and measure its execution time\n    for script in python_scripts:\n        # Run the script using subprocess and capture its execution time\n        start_time = time.time()\n        subprocess.call([\"python3\", script])\n        end_time = time.time()\n\n        # Calculate the execution time for the current script\n        execution_time = end_time - start_time\n\n        # Extract the script name without the directory path for the dictionary key\n        script_name = os.path.basename(script)\n\n        # Store the execution time in the dictionary\n        execution_times[script_name] = execution_time\n\n    return execution_times", "compilation_passed": true, "time": 0.11904525756835938, "tests_passed": true, "error": null}
{"code": "# Set the path to the script\n    script_path = test_dir + '*.py'\n\n    # Find all Python scripts in the script_path directory\n    python_scripts = glob.glob(script_path)\n\n    # Initialize a dictionary to store the script execution times\n    execution_times = {}\n\n    # Run each Python script and measure the execution time\n    for script in python_scripts:\n        script_name = os.path.splitext(os.path.basename(script))[0]\n        execution_time = run_python_script(script)\n        execution_times[script_name] = execution_time\n\n    return execution_times", "compilation_passed": true, "time": 0.003354787826538086, "tests_passed": true, "error": null}
{"code": "script_list = glob.glob(os.path.join(test_dir, \"*.py\"))\n    results = []\n    for script in script_list:\n        start = time.time()\n        subprocess.run([\"python3\", script])\n        end = time.time()\n        execution_time = end - start\n        results.append(execution_time)\n\n    return results", "compilation_passed": true, "time": 0.0889730453491211, "tests_passed": true, "error": null}
{"code": "scripts = glob.glob(f'{test_dir}/*.py')\n    results = {}\n    for script in scripts:\n        start = time.time()\n        result = subprocess.run([\"python3\", script], capture_output=True, text=True)\n        end = time.time()\n        elapsed = round(end - start, 10)\n        if result.returncode == 0 and result.stdout:\n            print(f'Script \"{script}\" executed successfully with output: {result.stdout}')\n            results[script] = elapsed\n        else:\n            print(f'Failed to execute script \"{script}\" with error: {result.stderr}')\n    return results", "compilation_passed": true, "time": 0.08632802963256836, "tests_passed": true, "error": null}
{"code": "start = time.time()\n    # Get a list of Python scripts in the directory\n    script_names = glob.glob(os.path.join(test_dir, \"*.py\"))\n\n    # Run each script and record the execution time\n    times = {}\n    for script in script_names:\n        start_time = time.time()\n        subprocess.run(['python', script], check=False)\n        end_time = time.time()\n        times[os.path.basename(script)] = end_time - start_time\n\n    end = time.time()\n\n    return times, end - start", "compilation_passed": true, "time": 0.08467626571655273, "tests_passed": true, "error": null}
{"code": "files = glob.glob(os.path.join(test_dir, \"*.py\"))\n    times = []\n    # start = time.time()\n    # end = 0\n    for file in files:\n        try:\n            start = time.time()\n            subprocess.check_call(['python3', file])\n            end = time.time()\n            print(end-start)\n        except subprocess.CalledProcessError:\n            end = -1\n            print('Error in ' + file)\n        times.append(end - start)\n\n    return {file: time for file, time in zip(files, times)}", "compilation_passed": true, "time": 0.08548116683959961, "tests_passed": true, "error": null}
{"code": "result = {}\n    scripts = glob.glob(f\"{test_dir}/*\")\n\n    for script in scripts:\n        start = time.time()\n        subprocess.run([\"python\", script])\n        end = time.time()\n        result[script] = end - start\n\n    return result", "compilation_passed": true, "time": 0.08525490760803223, "tests_passed": true, "error": null}
{"code": "# Initialize a dictionary to store script names and execution times\n    times = {}\n    # Loop over all Python files in the specified directory\n    for script_path in glob.glob(os.path.join(test_dir, \"*.py\")):\n        # Start the script's execution time\n        start = time.time()\n        # Run the script using subprocess and wait for it to finish\n        subprocess.run([\"python\", script_path])\n        # Calculate the script's execution time\n        times[script_path] = time.time() - start\n    # Return the dictionary with script names and their execution times\n    return times", "compilation_passed": true, "time": 0.08484220504760742, "tests_passed": true, "error": null}
