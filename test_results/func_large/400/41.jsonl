{"code": "files_with_string = []\n    files = glob(f\"{directory}/**/*.json\", recursive=True)\n\n    for file in files:\n        with open(file) as json_file:\n            try:\n                data = json.load(json_file)\n                if string in data.values():\n                    files_with_string.append(file)\n            except Exception as error:\n                print(error)\n    return files_with_string", "compilation_passed": true, "time": 0.006479024887084961, "tests_passed": true, "error": null}
{"code": "files = glob(directory + \"/**/*.json\", recursive=True)\n    result = []\n    for file in files:\n        with open(file, \"r\", encoding=\"utf-8\") as f:\n            data = json.load(f)\n            if string in data:\n                result.append(file)\n    return result", "compilation_passed": true, "time": 0.004340410232543945, "tests_passed": false, "error": "json.decoder.JSONDecodeError"}
{"code": "results = []\n    for file_path in glob(directory + \"**/*.json\", recursive=True):\n        try:\n            with open(file_path) as f:\n                data = json.load(f)\n            if string in json.dumps(data):\n                results.append(file_path)\n        except json.JSONDecodeError:\n            continue\n    return results", "compilation_passed": true, "time": 0.008800745010375977, "tests_passed": true, "error": null}
{"code": "import json\n    from glob import glob\n    from pathlib import Path\n    from pprint import pprint\n\n    json_files = glob(f\"{directory}/**/*.json\", recursive=True)\n\n    matching_files = []\n\n    for file in json_files:\n        with open(file, \"r\") as f:\n            json_data = json.load(f)\n            if string in json_data:\n                matching_files.append(file)\n\n    return matching_files", "compilation_passed": true, "time": 0.00546717643737793, "tests_passed": false, "error": "json.decoder.JSONDecodeError"}
{"code": "found_files = []\n    files = glob(directory + \"/**/*.json\", recursive=True)\n    for file in files:\n        with open(file) as f:\n            data = json.load(f)\n            if search_json(string, data):\n                found_files.append(file)\n\n    return found_files", "compilation_passed": true, "time": 0.004441261291503906, "tests_passed": false, "error": "NameError"}
{"code": "filepaths = glob(f\"{directory}/**/*.json\", recursive=True)\n    matching_files = []\n    for filepath in filepaths:\n        with open(filepath) as file:\n            content = json.load(file)\n            if string in str(content):\n                matching_files.append(filepath)\n    return matching_files", "compilation_passed": true, "time": 0.004157304763793945, "tests_passed": false, "error": "json.decoder.JSONDecodeError"}
{"code": "files_with_string = []\n    for file in glob(os.path.join(directory, '**', '*.json'), recursive=True):\n        with open(file, 'r') as f:\n            try:\n                content = json.load(f)\n                if _check_json_for_string(content, string):\n                    files_with_string.append(file)\n            except (json.JSONDecodeError, UnicodeDecodeError):\n                pass\n    return files_with_string", "compilation_passed": true, "time": 0.004148006439208984, "tests_passed": false, "error": "NameError"}
{"code": "files = []\n    for json_file in glob(f'{directory}/**/*.json', recursive=True):\n        try:\n            with open(json_file, \"r\") as file:\n                data = json.load(file)\n                if string in data.keys():\n                    files.append(json_file)\n        except (FileNotFoundError, json.JSONDecodeError):\n            continue\n    return files", "compilation_passed": true, "time": 0.008066177368164062, "tests_passed": true, "error": null}
{"code": "results = []\n    for file in glob(f\"{directory}/**/*.json\", recursive=True):\n        with open(file) as json_data:\n            data = json.load(json_data)\n            if contains_string_in_dict(data, string):\n                results.append(file)\n    return results", "compilation_passed": true, "time": 0.003926753997802734, "tests_passed": false, "error": "NameError"}
{"code": "file_paths = list(glob(f\"{directory}/**/*.json\", recursive=True))\n    matching_files = []\n\n    for file_path in file_paths:\n        try:\n            with open(file_path, \"r\") as file:\n                data = json.load(file)\n                if string in data:\n                    matching_files.append(file_path)\n                elif isinstance(data, dict) and any(string in substring for substring in data.values()):\n                    matching_files.append(file_path)\n                elif isinstance(data, list) and any(string in substring for substring in data):\n                    matching_files.append(file_path)\n        except json.JSONDecodeError:\n            print(f\"Error: Unable to parse JSON data in {file_path}\")\n\n    return matching_files", "compilation_passed": true, "time": 0.00537109375, "tests_passed": true, "error": null}
{"code": "results = []\n    for file in glob(f\"{directory}/**/*.json\", recursive=True):\n        try:\n            with open(file) as f:\n                data = json.load(f)\n            if string in data:\n                results.append(file)\n        except (FileNotFoundError, ValueError):\n            continue\n    return results", "compilation_passed": true, "time": 0.008999824523925781, "tests_passed": true, "error": null}
{"code": "file_paths = glob(directory + '/**/*.json', recursive=True)\n    if not file_paths:\n        return []\n    matches = []\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            try:\n                json_data = json.load(file)\n            except json.JSONDecodeError:\n                continue\n            if string in json_data:\n                matches.append(file_path)\n    return matches", "compilation_passed": true, "time": 0.010917901992797852, "tests_passed": true, "error": null}
{"code": "file_paths = glob(f\"{directory}/**/*.json\", recursive=True)\n    result_file_paths = []\n    for file_path in file_paths:\n        with open(file_path, \"r\") as file:\n            data = json.load(file)\n            if string in json.dumps(data):\n                result_file_paths.append(file_path)\n    return result_file_paths", "compilation_passed": true, "time": 0.004567861557006836, "tests_passed": false, "error": "json.decoder.JSONDecodeError"}
{"code": "from pathlib import Path\n    import json\n\n    if directory == \"\":\n        directory = \".\"\n\n    files = Path(directory).glob('**/*.json')\n\n    files_with_string = []\n    for file in files:\n        with open(file, \"r\") as f:\n            try:\n                data = json.load(f)\n                if search_string_in_json(string, data):\n                    files_with_string.append(str(file))\n            except json.JSONDecodeError:\n                print(f\"Error parsing JSON data in file {file}\")\n\n    return files_with_string", "compilation_passed": true, "time": 0.004036903381347656, "tests_passed": false, "error": "NameError"}
{"code": "file_list = []\n\n    for json_path in glob(directory + \"/**/*.json\", recursive=True):\n        try:\n            with open(json_path, \"r\") as json_file:\n                data = json.load(json_file)\n\n            if string in data.values() or any(string in values for values in data.values() if isinstance(values, dict)) or any(string in values for values in data.values() if isinstance(values, list)):\n                file_list.append(json_path)\n\n        except (OSError, json.JSONDecodeError):\n            continue\n\n    return file_list", "compilation_passed": true, "time": 0.005776882171630859, "tests_passed": true, "error": null}
{"code": "# Use pathlib to normalize and resolve the directory path\n    directory = Path(directory).resolve()\n    # Use glob to find JSON files in the directory and its subdirectories\n    file_paths = glob(str(directory / \"**\" / \"*.json\"), recursive=True)\n    result = []\n    for file_path in file_paths:\n        with open(file_path) as file:\n            data = json.load(file)\n            # Check if the given string is in the JSON data structure\n            if string in data:\n                result.append(file_path)\n    return result", "compilation_passed": true, "time": 0.004176139831542969, "tests_passed": false, "error": "json.decoder.JSONDecodeError"}
{"code": "def search_string_in_json(json_data, string):\n        if isinstance(json_data, dict):\n            for key, value in json_data.items():\n                if search_string_in_json(value, string):\n                    return True\n        elif isinstance(json_data, list):\n            for item in json_data:\n                if search_string_in_json(item, string):\n                    return True\n        elif isinstance(json_data, str):\n            return string in json_data\n        return False\n\n    files = glob(os.path.join(directory, \"**\", \"*.json\"), recursive=True)\n    file_paths = []\n\n    for file in files:\n        with open(file, \"r\", encoding='utf-8') as json_file:\n            json_data = json.load(json_file)\n            if search_string_in_json(json_data, string):\n                file_paths.append(file)\n\n    return file_paths", "compilation_passed": true, "time": 0.004127979278564453, "tests_passed": false, "error": "json.decoder.JSONDecodeError"}
{"code": "files_containing_string = []\n    # Traversing all the directories and subdirectories\n    for file in glob(f'{directory}/**', recursive=True):\n        # Checking if it's a file and not a directory\n        if os.path.isfile(file):\n            # Extracting the extension from the path\n            _, file_extension = os.path.splitext(file)\n            # Checking if it's a .json file\n            if file_extension == '.json':\n                # Opening the file and reading it's content\n                with open(file) as f:\n                    content = f.read()\n                # Loading the content to a dictionary\n                dictionary = json.loads(content)\n                # Recursively searching for the string in the dictionary\n                if search_string_in_dict(string, dictionary):\n                    files_containing_string.append(file)\n    # Returning the list of file paths that contain the given string within their JSON data\n    return files_containing_string", "compilation_passed": true, "time": 0.00373077392578125, "tests_passed": false, "error": "NameError"}
{"code": "# Initialize the result list\n    file_paths = []\n\n    # Find all JSON files in the specified directory and its subdirectories\n    json_files = glob(f\"{directory}/**/*.json\", recursive=True)\n\n    # Process each JSON file\n    for file in json_files:\n        try:\n            # Load the JSON data from the file\n            with open(file, \"r\", encoding=\"utf-8\") as json_file:\n                data = json.load(json_file)\n\n            # Convert the data to a string to check if the string is present in the structure\n            data_string = str(data)\n\n            # Check if the string is present in the JSON data\n            if string in data_string:\n                file_paths.append(file)\n        except json.JSONDecodeError:\n            print(f\"Error decoding JSON data in file: {file}\")\n\n    return file_paths", "compilation_passed": true, "time": 0.005558013916015625, "tests_passed": true, "error": null}
{"code": "found_files = []\n    for file in glob(directory + \"/**/*.json\", recursive=True):\n        try:\n            with open(file, \"r\") as f:\n                data = json.load(f)\n\n                # Check if the string is present within the JSON data structure\n                if string in data.keys() or string in str(data.values()):\n                    found_files.append(file)\n\n        except Exception as e:\n            # If the file is not a valid JSON file, skip it and move to the next file\n            print(f\"Error processing file: {file} - {e}\")\n            continue\n\n    return found_files", "compilation_passed": true, "time": 0.006268978118896484, "tests_passed": true, "error": null}
{"code": "import pathlib\n\n    files = glob(f'{directory}/**/*.json', recursive=True)\n    result = []\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if string in data:\n                result.append(str(pathlib.Path(file).resolve()))\n    return result", "compilation_passed": true, "time": 0.004706144332885742, "tests_passed": false, "error": "json.decoder.JSONDecodeError"}
{"code": "# Use pathlib.Path to handle the directory path\n    path = Path(directory)\n    files = glob(str(path / '*.json'))\n    # Initialize an empty list to store the files containing the string in their JSON data\n    matching_files = []\n    for file in files:\n        # Use pathlib.Path to handle the file path\n        file_path = Path(file)\n        # Check if the file is a regular file and if it exists\n        if file_path.is_file() and file_path.exists():\n            try:\n                # Open the file in binary mode to avoid encoding issues\n                with file_path.open('rb') as json_file:\n                    # Read the JSON data from the file\n                    data = json.load(json_file)\n                    # Check if the string is present in the JSON data structure\n                    if string in str(data):\n                        # Add the file path to the list of matching files\n                        matching_files.append(file_path)\n            except (json.JSONDecodeError, UnicodeDecodeError) as err:\n                print(f", "compilation_passed": false, "time": 0.00021600723266601562, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Initialize an empty list to store the file paths\n    file_paths = []\n\n    # Search for JSON files in the given directory and its subdirectories\n    for file in glob(directory + \"**/*.json\", recursive=True):\n        # Load the JSON data from the file\n        with open(file, \"r\") as json_file:\n            data = json.load(json_file)\n\n        # Search for the string in the JSON data\n        if json_search(string, data):\n            # If the string is found in the JSON data, add the file path to the list\n            file_paths.append(file)\n\n    return file_paths", "compilation_passed": true, "time": 0.004212141036987305, "tests_passed": false, "error": "NameError"}
{"code": "files = [file for file in glob(f\"{directory}/**/*.json\", recursive=True)]\n\n    results = []\n\n    for file in files:\n        with open(file, \"r\") as f:\n            try:\n                data = json.load(f)\n            except json.JSONDecodeError:\n                continue\n\n        def contains_string(data):\n            if isinstance(data, dict):\n                if string in data:\n                    return True\n                for value in data.values():\n                    if contains_string(value):\n                        return True\n            elif isinstance(data, list):\n                for item in data:\n                    if contains_string(item):\n                        return True\n            elif isinstance(data, str):\n                return string in data\n            return False\n\n        if contains_string(data):\n            results.append(file)\n\n    return results", "compilation_passed": true, "time": 0.0061991214752197266, "tests_passed": true, "error": null}
{"code": "files = [p for p in glob(directory + '/**/*.json', recursive=True) if p.endswith(\".json\")]\n    found_files = []\n    for file in files:\n        with open(file, 'r') as file_to_read:\n            data = json.load(file_to_read)\n            if string in json.dumps(data):\n                found_files.append(file)\n    return found_files", "compilation_passed": true, "time": 0.004203081130981445, "tests_passed": false, "error": "json.decoder.JSONDecodeError"}
{"code": "result_files = []\n    for file in glob(directory + \"**/*.json\", recursive=True):\n        with open(file) as f:\n            try:\n                json_data = json.load(f)\n                if string in json_data:\n                    result_files.append(file)\n            except json.JSONDecodeError:\n                print(f\"Error decoding JSON in {file}: skipping the file\")\n    return result_files", "compilation_passed": true, "time": 0.008138179779052734, "tests_passed": true, "error": null}
{"code": "results = []\n\n    for file in glob(f\"{directory}/**/*.json\", recursive=True):\n        with open(file, \"r\") as f:\n            data = json.load(f)\n            if string in data:\n                results.append(file)\n    return results", "compilation_passed": true, "time": 0.003958940505981445, "tests_passed": false, "error": "json.decoder.JSONDecodeError"}
{"code": "files = glob(f\"{directory}/**/*.json\", recursive=True)\n    result = []\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n        if string in str(data):\n            result.append(file)\n    return result", "compilation_passed": true, "time": 0.004045724868774414, "tests_passed": false, "error": "json.decoder.JSONDecodeError"}
{"code": "# Recursively gather all the JSON files in the directory\n    json_files = glob(directory + \"/**/*.json\", recursive=True)\n\n    # Iterate through the JSON files\n    for file_name in json_files:\n        # Load the JSON data from the file\n        with open(file_name, 'r') as file:\n            try:\n                data = json.load(file)\n            except json.JSONDecodeError:\n                continue  # Skip if the file is not valid JSON\n\n        # Flatten the data structure for easier searching\n        flattened_data = flatten_data(data)\n\n        # Check if the string is present in the flattened data\n        if string in flattened_data:\n            return [file_name]\n    return []", "compilation_passed": true, "time": 0.0038280487060546875, "tests_passed": false, "error": "NameError"}
{"code": "# Import json module\n    # Import os.path\n    # Import glob module\n    result = []\n    # Recursively iterate through all JSON files in the directory\n    # Check if the string is in the JSON data of each file\n    # If yes, add the file path to the result list\n    # Return the result list\n    return result", "compilation_passed": true, "time": 0.00801706314086914, "tests_passed": true, "error": null}
