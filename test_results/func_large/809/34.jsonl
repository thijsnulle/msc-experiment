{"code": "kmeans = KMeans(n_clusters=n_clusters).fit(data)\n    clusters = {}\n    for i, label in enumerate(kmeans.labels_):\n        if label in clusters:\n            clusters[label].append(i)\n        else:\n            clusters[label] = [i]\n    for key in clusters:\n        clusters[key] = np.array(clusters[key])\n    return clusters", "compilation_passed": true, "time": 0.002722024917602539, "tests_passed": true, "error": null}
{"code": "kmeans = KMeans(n_clusters=n_clusters).fit(data)\n    labels = kmeans.labels_\n\n    cluster_indices = {}\n    for label in range(n_clusters):\n        cluster_indices[label] = []\n\n    for i, label in enumerate(labels):\n        cluster_indices[label].append(i)\n\n    return cluster_indices", "compilation_passed": true, "time": 0.001501321792602539, "tests_passed": true, "error": null}
{"code": "kmeans = KMeans(n_clusters=n_clusters)\n    labels = kmeans.fit_predict(data)\n    cluster = {}\n    for i, label in enumerate(labels):\n        if label not in cluster:\n            cluster[label] = []\n        cluster[label].append(i)\n    return cluster", "compilation_passed": true, "time": 0.0018658638000488281, "tests_passed": true, "error": null}
{"code": "# Perform KMeans clustering\n    kmeans = KMeans(n_clusters=n_clusters)\n    kmeans.fit(data)\n\n    # Find cluster labels for each data point\n    labels = kmeans.predict(data)\n\n    # Create dictionary of cluster labels and corresponding data point indices\n    cluster_dict = {i: [] for i in range(n_clusters)}\n    for i, label in enumerate(labels):\n        cluster_dict[label].append(i)\n    cluster_dict = {k: np.array(v) for k, v in cluster_dict.items()}\n\n    return cluster_dict", "compilation_passed": true, "time": 0.0028820037841796875, "tests_passed": true, "error": null}
{"code": "kmeans = KMeans(n_clusters=n_clusters)\n    kmeans.fit(data)\n    cluster_labels = kmeans.predict(data)\n    cluster_dict = {}\n    for i, label in enumerate(cluster_labels):\n        if label not in cluster_dict:\n            cluster_dict[label] = [i]\n        else:\n            cluster_dict[label].append(i)\n    return cluster_dict", "compilation_passed": true, "time": 0.0015158653259277344, "tests_passed": true, "error": null}
{"code": "kmeans = KMeans(n_clusters=n_clusters, random_state=0)\n    kmeans.fit(data)\n\n    # Create a dictionary where keys are cluster labels and values are the indices of the data points in each cluster.\n    cluster_indices = {}\n    for i in range(kmeans.labels_.shape[0]):\n        if kmeans.labels_[i] not in cluster_indices:\n            cluster_indices[kmeans.labels_[i]] = np.array([i])\n        else:\n            cluster_indices[kmeans.labels_[i]] = np.append(\n                cluster_indices[kmeans.labels_[i]], i)\n    return cluster_indices", "compilation_passed": true, "time": 0.0037479400634765625, "tests_passed": true, "error": null}
{"code": "# Apply KMeans clustering to the input data\n    kmeans = KMeans(n_clusters=n_clusters)\n    kmeans.fit(data)\n\n    # Get the indices of the data points in each cluster\n    cluster_list = {}\n    for i in range(n_clusters):\n        indices = np.where(kmeans.labels_ == i)[0]\n        cluster_list[i] = indices\n\n    return cluster_list", "compilation_passed": true, "time": 0.002674102783203125, "tests_passed": true, "error": null}
{"code": "# Fit KMeans clustering on data with the specified number of clusters.\n    kmeans = KMeans(n_clusters=n_clusters)\n    kmeans.fit(data)\n\n    # Create an empty dictionary to store the indices of each cluster.\n    clusters = {}\n\n    # Iterate over each data point's label and add its index to the corresponding cluster.\n    for i, label in enumerate(kmeans.labels_):\n        if label not in clusters:\n            clusters[label] = []\n        clusters[label].append(i)\n\n    return clusters", "compilation_passed": true, "time": 0.0014882087707519531, "tests_passed": true, "error": null}
{"code": "kmeans = KMeans(n_clusters=n_clusters, random_state=42)\n    kmeans.fit(data)\n    labels = kmeans.labels_\n    cluster_dict = {}\n    for i in range(n_clusters):\n        cluster_dict[i] = np.where(labels == i)[0]\n    return cluster_dict", "compilation_passed": true, "time": 0.003338336944580078, "tests_passed": true, "error": null}
{"code": "model = KMeans(n_clusters=n_clusters)\n    labels = model.fit_predict(data)\n    return {label: np.where(labels == label)[0] for label in range(n_clusters)}", "compilation_passed": true, "time": 0.002775907516479492, "tests_passed": true, "error": null}
{"code": "# Apply KMeans clustering to the 2D array\n    kmeans = KMeans(n_clusters=n_clusters, random_state=0).fit(data)\n\n    # Get the predicted cluster labels for each data point\n    labels = kmeans.labels_\n\n    # Create a dictionary where keys are cluster labels and values are lists of indices for data points in the cluster\n    cluster = {i: [] for i in range(n_clusters)}\n    for i, label in enumerate(labels):\n        cluster[label].append(i)\n\n    # Convert the lists to numpy arrays\n    cluster = {key: np.array(value) for key, value in cluster.items()}\n\n    return cluster", "compilation_passed": true, "time": 0.0034058094024658203, "tests_passed": true, "error": null}
{"code": "kmeans = KMeans(n_clusters=n_clusters).fit(data)\n    labels = kmeans.labels_\n    cluster_dict = {}\n    for i in range(n_clusters):\n        cluster_dict[i] = np.where(labels == i)[0]\n    return cluster_dict", "compilation_passed": true, "time": 0.002749204635620117, "tests_passed": true, "error": null}
{"code": "# Apply KMeans clustering\n    kmeans = KMeans(n_clusters=n_clusters)\n    kmeans.fit(data)\n\n    # Find the indices of data points in each cluster\n    labels = kmeans.labels_\n    unique_labels = np.unique(labels)\n    cluster_dict = {}\n    for label in unique_labels:\n        indices = np.where(labels == label)[0]\n        cluster_dict[label] = indices\n\n    # Convert dictionaries to lists for serialization\n    cluster_list = [{key: cluster_dict[key].tolist()} for key in cluster_dict]\n\n    # Return the cluster_list\n    return cluster_list", "compilation_passed": true, "time": 0.0015680789947509766, "tests_passed": true, "error": null}
{"code": "kmeans = KMeans(n_clusters=n_clusters, random_state=0)\n    kmeans.fit(data)\n    cluster_labels = kmeans.labels_\n    cluster_dict = {}\n    for i in range(n_clusters):\n        cluster_dict[i] = np.where(cluster_labels == i)[0]\n    return cluster_dict", "compilation_passed": true, "time": 0.003270864486694336, "tests_passed": true, "error": null}
{"code": "clusterer = KMeans(n_clusters=n_clusters)\n    labels = clusterer.fit_predict(data)\n    cluster_dict = {}\n    for i in range(n_clusters):\n        cluster_dict[i] = np.where(labels == i)[0]\n    return cluster_dict", "compilation_passed": true, "time": 0.0027861595153808594, "tests_passed": true, "error": null}
{"code": "# Perform KMeans clustering\n    kmeans = KMeans(n_clusters=n_clusters).fit(data)\n    labels = kmeans.labels_\n    # Find the indices of the data points in each cluster\n    cluster_indices = {}\n    for i, l in enumerate(labels):\n        if l not in cluster_indices:\n            cluster_indices[l] = []\n        cluster_indices[l].append(i)\n    cluster_indices = {l: np.array(indices) for l, indices in cluster_indices.items()}\n    return cluster_indices", "compilation_passed": true, "time": 0.0030341148376464844, "tests_passed": true, "error": null}
{"code": "model = KMeans(n_clusters)\n    labels = model.fit_predict(data)\n    cluster_dict = {}\n    for i, l in enumerate(labels):\n        if l not in cluster_dict:\n            cluster_dict[l] = []\n        cluster_dict[l].append(i)\n\n    for k, v in cluster_dict.items():\n        cluster_dict[k] = np.array(v)\n    return cluster_dict", "compilation_passed": true, "time": 0.002721071243286133, "tests_passed": true, "error": null}
{"code": "# Check input\n    assert isinstance(data, np.ndarray), \"data must be a numpy array\"\n    assert data.ndim == 2, \"data must be a 2-dimensional numpy array\"\n    assert isinstance(n_clusters, int), \"n_clusters must be an integer\"\n    assert n_clusters > 1, \"n_clusters must be greater than 1\"\n\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters, random_state=0)\n    labels = kmeans.fit_predict(data)\n\n    # Find the indices of the data points in each cluster\n    cluster = {}\n    for label in range(n_clusters):\n        cluster[label] = np.where(labels == label)[0]\n\n    return cluster", "compilation_passed": true, "time": 0.0022339820861816406, "tests_passed": true, "error": null}
{"code": "model = KMeans(n_clusters=n_clusters)\n    model.fit(data)\n    return {k: np.where(model.labels_ == k)[0] for k in range(model.n_clusters)}", "compilation_passed": true, "time": 0.0026357173919677734, "tests_passed": true, "error": null}
{"code": "kmeans = KMeans(n_clusters=n_clusters)\n    kmeans.fit(data)\n    labels = kmeans.predict(data)\n\n    # Create a dictionary where keys are cluster labels and values are lists of indices for data points in the cluster\n    clusters = {}\n    for i, label in enumerate(labels):\n        if label in clusters:\n            clusters[label].append(i)\n        else:\n            clusters[label] = [i]\n\n    return clusters", "compilation_passed": true, "time": 0.001542806625366211, "tests_passed": true, "error": null}
{"code": "# Perform KMeans clustering on the data\n    kmeans = KMeans(n_clusters=n_clusters).fit(data)\n\n    # Get the cluster labels for each data point\n    labels = kmeans.labels_\n\n    # Create a dictionary to hold the indices of data points in each cluster\n    cluster = {}\n\n    # Iterate over the labels and data points and add each data point to its corresponding cluster in the dictionary\n    for i, label in enumerate(labels):\n        if label not in cluster:\n            cluster[label] = [i]\n        else:\n            cluster[label].append(i)\n\n    # Convert each list of indices to a numpy array\n    for key in cluster:\n        cluster[key] = np.array(cluster[key])\n\n    return cluster", "compilation_passed": true, "time": 0.0027260780334472656, "tests_passed": true, "error": null}
{"code": "# Apply KMeans clustering to the input data\n    kmeans = KMeans(n_clusters=n_clusters)\n    kmeans.fit(data)\n\n    # Get the labels for each point\n    labels = kmeans.labels_\n\n    # Create a dictionary to store the indices of points in each cluster\n    cluster = {}\n    for i in range(len(labels)):\n        if labels[i] not in cluster:\n            cluster[labels[i]] = [i]\n        else:\n            cluster[labels[i]].append(i)\n\n    # Convert the values of the dictionary to numpy arrays\n    for key in cluster:\n        cluster[key] = np.array(cluster[key])\n\n    return cluster", "compilation_passed": true, "time": 0.0026559829711914062, "tests_passed": true, "error": null}
{"code": "# Apply KMeans clustering\n    kmeans = KMeans(n_clusters=n_clusters, random_state=0)\n    kmeans.fit(data)\n\n    # Get the indices of the data points in each cluster\n    cluster_labels = kmeans.labels_\n    cluster_dict = {}\n    for label in range(n_clusters):\n        cluster_indices = np.where(cluster_labels == label)[0]\n        cluster_dict[label] = cluster_indices\n\n    return cluster_dict", "compilation_passed": true, "time": 0.003159761428833008, "tests_passed": true, "error": null}
{"code": "kmeans = KMeans(n_clusters=n_clusters, random_state=0)\n    labels = kmeans.fit_predict(data)\n    cluster_indices = {}\n    for i in range(n_clusters):\n        cluster_indices[i] = np.where(labels == i)[0]\n    return cluster_indices", "compilation_passed": true, "time": 0.003108978271484375, "tests_passed": true, "error": null}
{"code": "# Create a KMeans instance with the specified number of clusters\n    kmeans = KMeans(n_clusters=n_clusters)\n\n    # Fit the KMeans model to the data\n    kmeans.fit(data)\n\n    # Get the predicted cluster labels for each data point\n    labels = kmeans.labels_\n\n    # Create a dictionary to store the indices of each cluster\n    cluster_indices = {}\n\n    # Loop over each unique label and find the indices of the data points that have that label\n    for i in np.unique(labels):\n        cluster_indices[i] = np.where(labels == i)[0]\n\n    # Return the dictionary of cluster indices\n    return cluster_indices", "compilation_passed": true, "time": 0.0026857852935791016, "tests_passed": true, "error": null}
{"code": "# Convert data to numpy array if it's not already\n    data = np.array(data)\n\n    # Apply KMeans clustering to the data\n    kmeans = KMeans(n_clusters)\n    kmeans.fit(data)\n\n    # Initialize the dictionary to store clusters\n    cluster = {}\n\n    # Iterate over the clusters and their indices in the original data\n    for cluster_label, indices in enumerate(np.unique(kmeans.labels_, return_index=True)[1]):\n        # Get the indices of the data points in the cluster\n        cluster_indices = kmeans.labels_[indices:].searchsorted(np.arange(kmeans.labels_[indices:].max()+1)) + indices\n\n        # Add the cluster to the dictionary\n        cluster[cluster_label] = cluster_indices\n\n    # Return the cluster dictionary\n    return cluster", "compilation_passed": true, "time": 0.0015540122985839844, "tests_passed": true, "error": null}
{"code": "kmeans = KMeans(n_clusters).fit(data)\n    labels = kmeans.labels_\n\n    cluster_dict = {}\n    for i in range(n_clusters):\n        cluster_dict[i] = np.where(labels == i)[0]\n\n    return cluster_dict", "compilation_passed": true, "time": 0.0027282238006591797, "tests_passed": true, "error": null}
{"code": "kmeans = KMeans(n_clusters=n_clusters)\n    kmeans.fit(data)\n    labels = kmeans.labels_\n    clusters = {}\n    for i, label in enumerate(labels):\n        if label in clusters:\n            clusters[label].append(i)\n        else:\n            clusters[label] = [i]\n    return clusters", "compilation_passed": true, "time": 0.001458883285522461, "tests_passed": true, "error": null}
{"code": "model = KMeans(n_clusters=n_clusters)\n    labels = model.fit_predict(data)\n    cluster = dict()\n    for i, l in enumerate(labels):\n        if l in cluster:\n            cluster[l].append(i)\n        else:\n            cluster[l] = [i]\n    return cluster", "compilation_passed": true, "time": 0.0014278888702392578, "tests_passed": true, "error": null}
{"code": "model = KMeans(n_clusters=n_clusters, random_state=123)\n    cluster = model.fit_predict(data)\n    labels = set(cluster)\n    cluster_list = {}\n    for label in labels:\n        cluster_list[label] = np.where(cluster == label)[0]\n    return cluster_list", "compilation_passed": true, "time": 0.003087282180786133, "tests_passed": true, "error": null}
