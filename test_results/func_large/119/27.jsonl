{"code": "x = np.linspace(-10, 10, 400)  # Range from -10 to 10 with 400 points\n    y = x**2\n\n    plt.plot(x, y)\n    plt.title('y = x^2')\n    plt.xlabel('x')\n    plt.ylabel('y')\n    plt.grid(True)\n    plt.show()", "compilation_passed": true, "time": 0.009457826614379883, "tests_passed": true, "error": null}
{"code": "x = np.linspace(-10, 10, 400)\n    y = x ** 2\n    plt.plot(x, y)\n    plt.title('y = x^2')\n    plt.xlabel('x')\n    plt.ylabel('y')\n    plt.grid()\n    plt.show()", "compilation_passed": true, "time": 0.0018231868743896484, "tests_passed": true, "error": null}
{"code": "x = np.linspace(-10, 10, 400) #400 points\n    y = x**2\n    plt.plot(x,y, 'b-', linewidth=2)\n    plt.title('y = x^2')\n    plt.xlabel('x')\n    plt.ylabel('y')\n    plt.grid()\n    plt.show()", "compilation_passed": true, "time": 0.005572795867919922, "tests_passed": true, "error": null}
{"code": "# Define the range for x values\n    x = np.linspace(-10, 10, 400)\n\n    # Evaluate the function\n    y = x ** 2\n\n    # Create the plot\n    plt.plot(x, y, 'r-')\n\n    # Set the title and labels\n    plt.title('y = x^2')\n    plt.xlabel('x')\n    plt.ylabel('y')\n\n    # Enable the grid\n    plt.grid(True)\n\n    # Display the plot\n    plt.show()\n    pass", "compilation_passed": true, "time": 0.0058917999267578125, "tests_passed": true, "error": null}
{"code": "# Define the x range for the parabola\n    x = np.linspace(-10, 10, 400)\n    y = x**2\n    fig, ax = plt.subplots()\n    ax.plot(x, y, label='$y=x^2$')\n    # Set the title of the plot\n    ax.set_title('$y=x^2$')\n    # Set the axis labels\n    ax.set_xlabel('$x$')\n    ax.set_ylabel('$y$')\n    # Set the y range of the plot\n    ax.set_ylim(-100, 100)\n    # Display the grid\n    ax.grid()\n    # Display the plot\n    plt.show()\n    # Return None to indicate completion\n    return None", "compilation_passed": true, "time": 0.0064678192138671875, "tests_passed": true, "error": null}
{"code": "x = np.linspace(-10, 10, 400)\n    y = x**2\n    plt.plot(x, y)\n    plt.title('y = x^2')\n    plt.xlabel('x')\n    plt.ylabel('y')\n    plt.grid()\n    plt.show()", "compilation_passed": true, "time": 0.00747990608215332, "tests_passed": true, "error": null}
{"code": "x = np.linspace(-10, 10, 400)\n    y = x ** 2\n    plt.plot(x, y)\n    plt.title(\"y = x^2\")\n    plt.xlabel('x')\n    plt.ylabel('y')\n    plt.grid()\n    plt.show()", "compilation_passed": true, "time": 0.002213001251220703, "tests_passed": true, "error": null}
{"code": "x = np.linspace(-10, 10, 400)\n    y = x ** 2\n    plt.title('y = x^2')\n    plt.plot(x, y)\n    plt.xlabel('x')\n    plt.ylabel('y')\n    plt.grid(True)\n    plt.show()", "compilation_passed": true, "time": 0.005291938781738281, "tests_passed": true, "error": null}
{"code": "x = np.linspace(-10, 10, 400)\n    y = x**2\n\n    plt.plot(x, y)\n    plt.title(\"y = x^2\")\n    plt.xlabel('x')\n    plt.ylabel('y')\n    plt.grid()\n\n    plt.show()\n    return None", "compilation_passed": true, "time": 0.001653909683227539, "tests_passed": true, "error": null}
{"code": "x = np.linspace(-10, 10, num=400)\n    y = x ** 2\n\n    plt.plot(x, y)\n    plt.title('y = x^2')\n    plt.xlabel('x')\n    plt.ylabel('y')\n    plt.grid(True)\n\n    plt.show()", "compilation_passed": true, "time": 0.0053060054779052734, "tests_passed": true, "error": null}
{"code": "x = np.linspace(-10, 10, 400)\n    y = x**2\n    fig, ax = plt.subplots()\n    ax.plot(x, y)\n    ax.set_title('y = x^2')\n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n    ax.grid(True)\n    plt.show()", "compilation_passed": true, "time": 0.01758718490600586, "tests_passed": false, "error": "TypeError"}
{"code": "# Setting the range of x values\n    x = np.linspace(-10, 10, 400)\n    # Calculating the corresponding y values\n    y = x**2\n    # Plotting the parabola\n    plt.plot(x, y)\n    # Setting the title\n    plt.title('y = x^2')\n    # Adding labels to the axes\n    plt.xlabel('x')\n    plt.ylabel('y')\n    # Adding grid\n    plt.grid()\n    # Showing the plot\n    plt.show()", "compilation_passed": true, "time": 0.003953218460083008, "tests_passed": true, "error": null}
{"code": "x = np.linspace(-10, 10, 400)\n    y = x ** 2\n    plt.plot(x, y)\n    plt.title(\"y = x^2\")\n    plt.xlabel(\"x\")\n    plt.ylabel(\"y\")\n    plt.grid()\n    plt.show()", "compilation_passed": true, "time": 0.007189035415649414, "tests_passed": true, "error": null}
{"code": "x = np.linspace(-10, 10, 400)\n    y = x ** 2\n    plt.plot(x, y)\n    plt.title('y = x^2')\n    plt.xlabel('x')\n    plt.ylabel('y')\n    plt.grid()\n    plt.show()\n    return", "compilation_passed": true, "time": 0.0017848014831542969, "tests_passed": true, "error": null}
{"code": "x = np.linspace(-10, 10, 400)\n    y = x**2\n\n    # Plot the parabola\n    plt.plot(x, y, color='red')\n\n    # Set the title and labels\n    plt.title('y = x^2')\n    plt.xlabel('x')\n    plt.ylabel('y')\n\n    # Enable the grid\n    plt.grid()\n\n    # Display the plot\n    plt.show()", "compilation_passed": true, "time": 0.005352973937988281, "tests_passed": true, "error": null}
{"code": "x = np.linspace(-10, 10, 400)\n    y = x**2\n\n    plt.plot(x, y)\n    plt.title('y = x^2')\n    plt.xlabel('x')\n    plt.ylabel('y')\n    plt.grid(True)\n    plt.show()", "compilation_passed": true, "time": 0.0057981014251708984, "tests_passed": true, "error": null}
{"code": "x = np.linspace(-10, 10, 400)\n    y = x ** 2\n    plt.plot(x, y, 'm')\n    plt.title('y = x^2')\n    plt.xlabel('x')\n    plt.ylabel('y')\n    plt.grid()\n    plt.show()", "compilation_passed": true, "time": 0.0017480850219726562, "tests_passed": true, "error": null}
{"code": "x = np.linspace(-10, 10, 400)\n    y = x**2\n    plt.plot(x, y, label='y = x^2')\n    plt.title('y = x^2')\n    plt.xlabel('x')\n    plt.ylabel('y')\n    plt.grid()\n    plt.show()", "compilation_passed": true, "time": 0.00538325309753418, "tests_passed": true, "error": null}
{"code": "x = np.linspace(-10, 10, 400)\n    y = x ** 2\n\n    plt.plot(x, y)\n    plt.title('y = x^2')\n    plt.xlabel('x')\n    plt.ylabel('y')\n    plt.grid(True)\n    plt.show()", "compilation_passed": true, "time": 0.00522303581237793, "tests_passed": true, "error": null}
{"code": "# Defining x and y values\n    x = np.linspace(-10, 10, 400)  # Defining a range of 400 points from -10 to 10\n    y = x ** 2  # Calculating y values using the equation y = x^2\n\n    # Plotting the parabola\n    plt.plot(x, y)  # Plotting the curve with x and y coordinates\n    plt.title('y = x^2')  # Setting the title of the diagram\n    plt.xlabel('x')  # Labeling the x-axis\n    plt.ylabel('y')  # Labeling the y-axis\n    plt.grid()  # Enabling the grid\n    plt.show()  # Displaying the plot\n\n    # This function does not return any value\n    return None", "compilation_passed": true, "time": 0.0018258094787597656, "tests_passed": true, "error": null}
{"code": "x = np.linspace(-10, 10, 400)\n    y = np.linspace(-10, 10, 400)\n    y = x ** 2\n    plt.plot(x, y)\n    plt.title('y = x^2')\n    plt.xlabel('x')\n    plt.ylabel('y')\n    plt.grid(True)\n    plt.show()", "compilation_passed": true, "time": 0.005837917327880859, "tests_passed": true, "error": null}
{"code": "# Create a figure and a set of subplots\n    fig, ax = plt.subplots()\n\n    # Set the range for the x values\n    x = np.linspace(-10, 10, 400)\n\n    # Evaluate the quadratic function y = x^2\n    y = x ** 2\n\n    # Plot the quadratic function\n    ax.plot(x, y)\n\n    # Add labels to the x and y axes\n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n\n    # Add a title to the plot\n    ax.set_title('y = x^2')\n\n    # Show the grid\n    ax.grid(True)\n\n    # Show the plot\n    plt.show()", "compilation_passed": true, "time": 0.01744389533996582, "tests_passed": false, "error": "TypeError"}
{"code": "x = np.linspace(-10, 10, 400)\n    y = x ** 2\n\n    plt.plot(x, y, 'r-')\n    plt.title('y = x^2')\n    plt.xlabel('x')\n    plt.ylabel('y')\n    plt.grid(True)\n    plt.show()", "compilation_passed": true, "time": 0.008642911911010742, "tests_passed": true, "error": null}
{"code": "x = np.linspace(-10, 10, 400)\n    y = x**2\n\n    plt.plot(x, y)\n    plt.title('y = x^2')\n    plt.xlabel('x')\n    plt.ylabel('y')\n    plt.grid()\n    plt.show()\n\n    return None", "compilation_passed": true, "time": 0.0018129348754882812, "tests_passed": true, "error": null}
{"code": "x = np.linspace(-10, 10, 400)\n    y = x ** 2\n    plt.plot(x, y, \"k\")\n    plt.title(r'$y = x^2$')\n    plt.xlabel(\"x\")\n    plt.ylabel(\"y\")\n    plt.grid()\n    plt.show()", "compilation_passed": true, "time": 0.005197763442993164, "tests_passed": true, "error": null}
{"code": "# Create a range of x values with a fixed range of -10 to 10, 400 points.\n    x = np.linspace(-10, 10, 400)\n\n    # Evaluate the parabola y = x^2 at the x values.\n    y = x ** 2\n\n    # Create a figure and axis object.\n    fig, ax = plt.subplots()\n\n    # Plot the parabola y = x^2.\n    ax.plot(x, y)\n\n    # Set the title as y = x^2\n    ax.set_title('y = x^2')\n\n    # Set the axis labels as x and y\n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n\n    # Enable the grid\n    ax.grid(True)\n\n    # Display the plot.\n    plt.show()", "compilation_passed": true, "time": 0.0174710750579834, "tests_passed": false, "error": "TypeError"}
{"code": "x = np.linspace(-10, 10, 400)\n    y = x ** 2\n    plt.title('y = x^2')\n    plt.xlabel('x')\n    plt.ylabel('y')\n    plt.grid()\n    plt.plot(x, y)\n    plt.show()", "compilation_passed": true, "time": 0.003373861312866211, "tests_passed": true, "error": null}
{"code": "x = np.linspace(-10, 10, 400)\n    y = x**2\n    fig, ax = plt.subplots()\n    ax.plot(x, y)\n    ax.set_title('y = x^2')\n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n    ax.grid()\n    plt.show()", "compilation_passed": true, "time": 0.006769895553588867, "tests_passed": true, "error": null}
