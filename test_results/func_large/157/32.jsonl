{"code": "# Check if input data is a 2D array and if it contains only numeric data\n    if not np.issubdtype(data.dtype, np.number) or data.ndim != 2:\n        raise ValueError(\"Input data should be a 2D array containing only numeric values\")\n\n    # Calculate the average of values across each row\n    df = pd.DataFrame(data, columns=[f\"Feature {i+1}\" for i in range(data.shape[1])])\n    df[\"Average\"] = df.mean(axis=1)\n\n    # Create correlation matrix\n    corr = df.corr()\n\n    # Generate a mask for the upper triangle\n    mask = np.zeros_like(corr, dtype=bool)\n    mask[np.triu_indices_from(mask)] = True\n\n    # Set up the matplotlib figure\n    f, ax = plt.subplots(figsize=(11, 9))\n\n    # Generate a custom diverging colormap as green and red\n    cmap = sns.diverging_palette(230,", "compilation_passed": false, "time": 0.0002560615539550781, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Check if the data is a 2D array and if it contains only numeric values\n    if data.ndim != 2:\n        raise ValueError(\"Data must be a 2D array\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise ValueError(\"Data must contain only numeric values\")\n\n    # Calculate the mean across each row\n    mean_values = data.mean(axis=1)\n\n    # Create a DataFrame with the original data and the mean values\n    df = pd.DataFrame(data, columns=np.arange(data.shape[1]))\n    df['Average'] = mean_values\n\n    # Create a correlation matrix\n    corr = df.corr()\n\n    # Plot the correlation matrix as a heatmap\n    ax = sns.heatmap(corr, annot=True, cmap='coolwarm')\n    return df, ax", "compilation_passed": true, "time": 0.10288882255554199, "tests_passed": true, "error": null}
{"code": "dataframe = pd.DataFrame(data)\n    dataframe['Average'] = dataframe.mean(axis=1)\n\n    corr = dataframe.corr()\n    ax = sns.heatmap(corr, annot=True)\n\n    return dataframe, ax", "compilation_passed": true, "time": 0.10228705406188965, "tests_passed": true, "error": null}
{"code": "if data.ndim != 2:\n        raise ValueError(\"Data must be a 2D array\")\n\n    df = pd.DataFrame(data)\n    df['Average'] = df.apply(np.mean, axis=1)\n\n    corr = df.corr()\n    ax = sns.heatmap(corr, annot=True, cmap=\"Blues\")\n    return df, ax", "compilation_passed": true, "time": 0.10285401344299316, "tests_passed": true, "error": null}
{"code": "# Check input\n    if data.ndim != 2:\n        raise ValueError('Input data should be a 2D array.')\n    if np.any(pd.isna(data)):\n        raise ValueError('Input data should not contain NaN values.')\n\n    # Calculate mean across each row\n    data_mean = data.mean(axis=1)\n    data_mean = data_mean.reshape(-1, 1)  # reshape to 2D array\n\n    # Combine data and mean into a DataFrame\n    df = pd.DataFrame(np.hstack((data, data_mean)), columns=['Feature_1', 'Feature_2', 'Feature_3', 'Feature_4',\n                                                              'Feature_5', 'Feature_6', 'Feature_7', 'Feature_8',\n                                                              'Average'])\n\n    # Calculate correlation matrix\n    corr = df.corr()\n\n    # Create heatmap\n    ax = sns.heatmap(corr, annot=True, cmap='coolwarm')\n\n    return", "compilation_passed": true, "time": 0.03805899620056152, "tests_passed": false, "error": "TypeError"}
{"code": "df = pd.DataFrame(data)\n    df['Average'] = df.apply(lambda row: sum(row) / len(row), axis=1)\n    corr = df.corr()\n    ax = sns.heatmap(corr, annot=True, cmap=sns.color_palette('viridis', as_cmap=True))\n    ax.set(xlabel='Columns', ylabel='Rows')\n    return df, ax", "compilation_passed": true, "time": 0.103302001953125, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(data)\n    df['Average'] = df.mean(axis=1)\n    correlations = df.corr()\n    ax = sns.heatmap(correlations, annot=True)\n    return df, ax", "compilation_passed": true, "time": 0.10250306129455566, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(data)\n    df['Average'] = df.mean(axis=1)\n    corrs = df.corr().to_numpy()\n    fig, ax = plt.subplots(figsize=(10,10))\n    sns.heatmap(corrs, annot=True, cmap='coolwarm', square=False, ax=ax)\n    ax.set_title('Correlation Matrix Heatmap')\n    return df, ax", "compilation_passed": true, "time": 0.10601496696472168, "tests_passed": true, "error": null}
{"code": "import pandas as pd\n    import numpy as np\n    import seaborn as sns\n\n    if not isinstance(data, np.ndarray) or data.ndim != 2:\n        raise ValueError(\"Input data should be a 2D array\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise ValueError(\"Input data should contain only numeric values\")\n\n    df = pd.DataFrame(data)\n    df[\"Average\"] = df.mean(axis=1)\n\n    correlations = df.corr()\n    sns.set(style='white')\n    ax = sns.heatmap(correlations, vmax=1, square=True)\n    return df, ax", "compilation_passed": true, "time": 0.09501218795776367, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(data)\n    df['Average'] = df.mean(axis=1)\n    correlation = df.corr()\n    ax = sns.heatmap(correlation, annot=True, cmap='coolwarm', fmt='.2f')\n    return df, ax", "compilation_passed": true, "time": 0.10125303268432617, "tests_passed": true, "error": null}
{"code": "if data.ndim != 2:\n        raise ValueError(\"The input data should be a 2D array.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise ValueError(\"The input data should contain only numeric values.\")\n\n    # add an 'Average' column to the dataset\n    df = pd.DataFrame(data, columns=[f'Feature {i}' for i in range(data.shape[1])])\n    df['Average'] = df.mean(axis=1)\n\n    # calculate the correlations between columns and visualize them as a heatmap\n    correlations = df.corr()\n    ax = sns.heatmap(correlations, annot=True)\n\n    # show the heatmap and return the DataFrame with the 'Average' column and the Axes object\n    plt.show()\n    return df, ax", "compilation_passed": true, "time": 0.10495996475219727, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(data)\n    df['Average'] = df.mean(axis=1)\n\n    # visualize the correlation matrix\n    corr = df.corr()\n    ax = sns.heatmap(corr, annot=True, cmap=sns.diverging_palette(220, 20, as_cmap=True))\n\n    return df, ax", "compilation_passed": true, "time": 0.10298919677734375, "tests_passed": true, "error": null}
{"code": "# Check that the input data is a 2D array\n    if not isinstance(data, np.ndarray) or data.ndim != 2:\n        raise ValueError('Input data must be a 2D array.')\n\n    # Convert the input data to a DataFrame for easier manipulation\n    df = pd.DataFrame(data)\n\n    # Check that the input data contains only numeric values\n    if not all(df.applymap(np.isreal).all().all()):\n        raise ValueError('Input data must contain only numeric values.')\n\n    # Calculate the average of each row in the dataset and add it as a new column called 'Average'\n    df['Average'] = df.mean(axis=1)\n\n    # Calculate the correlation matrix for the DataFrame\n    corr = df.corr()\n\n    # Set up the plot and create the heatmap using seaborn\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax = sns.heatmap(corr, linewidths=0.5, cmap='coolwarm', annot=True)\n\n", "compilation_passed": true, "time": 0.0016319751739501953, "tests_passed": false, "error": "TypeError"}
{"code": "try:\n        if data.ndim != 2:\n            raise ValueError(\"The input data must be a 2D array.\")\n        df = pd.DataFrame(data)\n        df[\"Average\"] = df.mean(axis=1)\n        ax = sns.heatmap(df.corr(), annot=True, cmap='coolwarm')\n        return df, ax\n    except Exception as e:\n        print(f\"Error: {e}\")", "compilation_passed": true, "time": 0.1006622314453125, "tests_passed": true, "error": null}
{"code": "# Validate the input data\n    if not np.issubdtype(data.dtype, np.number):\n        raise ValueError(\"Data must be numeric.\")\n    if data.ndim != 2:\n        raise ValueError(\"Data must be a 2D array.\")\n\n    # Convert the data to a pandas DataFrame with column names\n    col_names = [f\"feature{i + 1}\" for i in range(data.shape[1])]\n    df = pd.DataFrame(data, columns=col_names)\n\n    # Add a 'Average' column to the DataFrame\n    df[\"Average\"] = df.mean(axis=1)\n\n    # Plot the correlation matrix as a heatmap\n    cor_matrix = df.corr()\n    ax = sns.heatmap(cor_matrix, annot=True)\n\n    return df, ax", "compilation_passed": true, "time": 0.1048438549041748, "tests_passed": true, "error": null}
{"code": "if not (data.ndim == 2):\n        raise ValueError('The input data is not a 2D array!')\n\n    df = pd.DataFrame(data)\n\n    if df.applymap(np.isnan).any().any():\n        raise ValueError('The input data contains non-numeric data!')\n\n    df[\"Average\"] = df.mean(axis=1)\n    df = df.loc[:, ~df.columns.isin([col for col in df.columns if col > 5])]\n\n    sns.set_theme(style=\"white\")\n    corrmat = df.corr()\n\n    # Set up the matplotlib figure\n    f, ax = plt.subplots(figsize=(11, 9))\n\n    # Generate a mask for the upper triangle\n    mask = np.triu(np.ones_like(corrmat, dtype=bool))\n\n    # Generate a custom diverging colormap as there is no correlation between the Average and the other columns\n    cmap = sns.diverging_palette(230,", "compilation_passed": false, "time": 0.00025916099548339844, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Check the input data\n    if not isinstance(data, np.ndarray) or len(data.shape) != 2:\n        raise ValueError(\"Input data must be a 2D numpy array\")\n    if not np.all([np.all(np.isfinite(row)) for row in data]):\n        raise ValueError(\"Input data contains non-numeric values\")\n\n    # Convert the input data to a pandas DataFrame\n    df = pd.DataFrame(data)\n\n    # Add a column with the mean of each row\n    df['Average'] = df.mean(axis=1)\n\n    # Calculate the correlation matrix\n    corr = df.corr()\n\n    # Plot the correlation matrix as a heatmap\n    ax = sns.heatmap(corr, annot=True, cmap='RdBu')\n    ax.set_title('Correlation Heatmap')\n\n    return df, ax", "compilation_passed": true, "time": 0.10169196128845215, "tests_passed": true, "error": null}
{"code": "import pandas as pd\n    import numpy as np\n    import seaborn as sns\n\n    # Convert the input data into a pandas DataFrame and check if it's 2D\n    df = pd.DataFrame(data)\n    if df.shape[1] == 1:\n        raise ValueError(\"Invalid input shape. The input data must be a 2D array.\")\n\n    # Check if the data contains only numeric values\n    if not df.applymap(np.isreal).all(axis=None):\n        raise ValueError(\"The input data must contain only numeric values.\")\n\n    # Calculate the average of each row and add it as a new column\n    df['Average'] = df.mean(axis=1)\n\n    # Generate the correlation matrix\n    corr = df.corr()\n\n    # Plot the correlation matrix as a heatmap using Seaborn\n    ax = sns.heatmap(corr, annot=True, cmap='coolwarm', square=True, fmt='.2f')\n\n    return df, ax", "compilation_passed": true, "time": 0.9915611743927002, "tests_passed": true, "error": null}
{"code": "if data.ndim != 2:\n        raise ValueError(\"Data must be a 2D array\")\n    # Check if the input data contains only numeric values\n    if not np.issubdtype(data.dtype, np.number):\n        raise ValueError(\"Data must contain only numeric values\")\n\n    # Convert the input array to a DataFrame\n    df = pd.DataFrame(data)\n\n    # Calculate the average value of each row\n    df['Average'] = df.mean(axis=1)\n\n    # Create the correlation matrix\n    corr = df.corr()\n\n    # Plot the correlation matrix as a heatmap\n    ax = sns.heatmap(corr, annot=True, cmap='coolwarm')\n\n    return df, ax", "compilation_passed": true, "time": 0.09941601753234863, "tests_passed": true, "error": null}
{"code": "try:\n        df = pd.DataFrame(data)\n        df['Average'] = df.apply(lambda row: row.mean(), axis=1)\n        corr = df.corr().to_dict()\n        ax = sns.heatmap(corr, annot=True, cmap='coolwarm')\n    except ValueError:\n        print(\"Input data must be a 2D array of numerical values.\")\n\n    return df, ax", "compilation_passed": true, "time": 0.0020170211791992188, "tests_passed": false, "error": "UnboundLocalError"}
{"code": "# check the input data\n    if data.ndim != 2:\n        raise ValueError(\"Input data should be a 2D array\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise ValueError(\"Input data should contain only numeric values\")\n    # create a DataFrame and add an 'Average' column to it\n    df = pd.DataFrame(data)\n    df['Average'] = df.mean(axis=1)\n    # visualize the correlation matrix as a heatmap\n    fig, ax = plt.subplots(figsize=(10, 8))\n    sns.heatmap(df.corr(), annot=True, ax=ax)\n    plt.title('Correlation Matrix')\n    return df, ax", "compilation_passed": true, "time": 0.10198402404785156, "tests_passed": true, "error": null}
{"code": "if not isinstance(data, np.ndarray) or data.ndim != 2:\n        raise ValueError(\"Data must be a 2D array\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise ValueError(\"Data must contain only numeric values\")\n\n    df = pd.DataFrame(data)\n    df['Average'] = df.mean(axis=1)\n    ax = sns.heatmap(df.corr(), annot=True)\n\n    return df, ax", "compilation_passed": true, "time": 0.09995603561401367, "tests_passed": true, "error": null}
{"code": "if not (isinstance(data, np.ndarray) and data.ndim == 2):\n        raise ValueError(\"Input data must be a 2D numpy array.\")\n\n    df = pd.DataFrame(data)\n\n    # Check if data contains non-numeric values\n    if not df.applymap(np.isreal).all().all():\n        raise ValueError(\"Input data must only contain numeric values.\")\n\n    df['Average'] = df.mean(axis=1)\n\n    ax = sns.heatmap(df.corr(), annot=True, cmap=sns.diverging_palette(255, 0, as_cmap=True))\n\n    return df, ax", "compilation_passed": true, "time": 0.10369014739990234, "tests_passed": true, "error": null}
{"code": "# Check that the input data is a 2D array and contains only numeric values\n    if data.ndim != 2:\n        raise ValueError(\"The input data must be a 2D array\")\n\n    # Check that the input data contains only numeric values\n    if not np.all(np.isreal(data)):\n        raise ValueError(\"The input data must contain only numeric values\")\n\n    # Create a pandas DataFrame from the input data\n    df = pd.DataFrame(data=data)\n\n    # Add a new column containing the average of values across each row\n    df['Average'] = df.mean(axis=1)\n\n    # Calculate the correlation matrix\n    corr = df.corr()\n\n    # Generate a color heatmap\n    mask = np.zeros_like(corr, dtype=bool)\n    mask[np.triu_indices_from(mask)] = True\n    cmap = sns.diverging_palette(220, 10, as_cmap=True)\n\n    # Create a pandas DataFrame containing the correlation values\n    corr =", "compilation_passed": false, "time": 0.00020194053649902344, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Raise an error if the input data is not a 2D numpy array\n    if not isinstance(data, np.ndarray) or data.ndim != 2:\n        raise ValueError(\"Input data should be a 2D array.\")\n\n    # Create a pandas DataFrame from the input data\n    df = pd.DataFrame(data)\n\n    # Check if the DataFrame contains only numeric data\n    if not df.columns.equals(df.columns.astype(int)):\n        raise ValueError(\"Input data should contain only numeric values.\")\n\n    # Calculate the average of each row and add it as a new column\n    df['Average'] = df.mean(axis=1)\n\n    # Create a correlation matrix\n    corr = df.corr()\n\n    # Visualize the correlation matrix as a heatmap\n    ax = sns.heatmap(corr, annot=True)\n\n    return df, ax", "compilation_passed": true, "time": 0.09935522079467773, "tests_passed": true, "error": null}
{"code": "# Check if the data is a valid 2D array\n    if not isinstance(data, np.ndarray) or data.ndim != 2:\n        raise ValueError('Data should be a 2D array.')\n\n    # Check if the data contains non-numeric values\n    if not np.issubdtype(data.dtype, np.number):\n        raise ValueError('Data should contain only numeric values.')\n\n    # Calculate the mean of each row\n    df = pd.DataFrame(data)\n    df['Average'] = df.mean(axis=1)\n\n    # Calculate the correlation matrix\n    correlations = df.corr()\n\n    # Plot the correlation matrix as a heatmap\n    ax = sns.heatmap(correlations, annot=True)\n\n    # Return the modified dataframe and the heatmap\n    return df, ax", "compilation_passed": true, "time": 0.10174798965454102, "tests_passed": true, "error": null}
{"code": "# Check if the input is a 2D array\n    if not isinstance(data, np.ndarray) or data.ndim != 2:\n        raise ValueError(\"Input data should be a 2D array.\")\n\n    # Check if the input contains only numeric data\n    if not np.issubdtype(data.dtype, np.number):\n        raise ValueError(\"Input data should contain only numeric values.\")\n\n    # Create a DataFrame from the array\n    df = pd.DataFrame(data)\n\n    # Calculate the mean of each row\n    df['Average'] = df.mean(axis=1)\n\n    # Calculate the correlation matrix\n    corr_matrix = df.corr()\n\n    # Create a heatmap of the correlation matrix\n    ax = sns.heatmap(corr_matrix, annot=True)\n\n    return df, ax", "compilation_passed": true, "time": 0.1003718376159668, "tests_passed": true, "error": null}
{"code": "import numpy as np\n\n    if data.ndim != 2:\n        raise ValueError(\"Input data must be a 2D array\")\n    if not all(isinstance(val, (int, float)) for row in data for val in row):\n        raise ValueError(\"Input data must contain only numeric values\")\n\n    n, d = data.shape\n\n    mean_cols = data.mean(axis=1)\n    df = pd.DataFrame(data, columns=[f\"Feature {i+1}\" for i in range(d)])\n    df[\"Average\"] = mean_cols\n\n    corr = df.corr().to_numpy()\n    ax = sns.heatmap(corr, annot=True, fmt='.2f', cmap='coolwarm')\n    return df, ax", "compilation_passed": true, "time": 0.0011048316955566406, "tests_passed": false, "error": "ValueError"}
{"code": "# Check if input data is valid\n    if len(data.shape) != 2:\n        raise ValueError(\"Input data must be a 2D array\")\n\n    if not np.issubdtype(data.dtype, np.number):\n        raise ValueError(\"Input data must contain only numeric values\")\n\n    # Calculate mean of each row\n    mean = data.mean(axis=1)\n    mean = np.reshape(mean, (-1, 1))  # Reshape mean to match shape of data\n    data = np.append(data, mean, axis=1)\n\n    # Create a pandas DataFrame\n    df = pd.DataFrame(data)\n    df.columns = ['Feature' + str(i + 1) for i in range(data.shape[1] - 1)] + ['Average']\n\n    # Compute correlation matrix\n    corr = df.corr()\n\n    # Plot the correlation matrix as a heatmap\n    ax = sns.heatmap(corr, annot=True, cmap='RdBu_r')\n\n    return df, ax", "compilation_passed": true, "time": 0.32776904106140137, "tests_passed": true, "error": null}
{"code": "if data.ndim != 2:\n        raise ValueError(f\"Expected a 2D array, but got {data.ndim}D array.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise ValueError(\"Expected numerical data, but got non-numerical data.\")\n\n    df = pd.DataFrame(data)\n    df[\"Average\"] = df.mean(axis=1)\n    correlations = df.corr()\n    ax = sns.heatmap(correlations, annot=True, cmap=\"coolwarm\")\n    ax.set_title(\"Correlation Heatmap\")\n    return df, ax", "compilation_passed": true, "time": 0.1020050048828125, "tests_passed": true, "error": null}
