{"code": "def func(x, a, b, c):\n        return a * x ** 2 + b * x + c\n\n    params, _ = curve_fit(func, X, Y)\n    plt.plot(X, Y, '.')\n    plt.plot(X, func(X, *params))\n    return params, plt.gca()", "compilation_passed": true, "time": 0.0050890445709228516, "tests_passed": false, "error": "IndexError"}
{"code": "# Define the function to be fit to the data\n    def func(x, a, b, c):\n        return a * x**2 + b * x + c\n\n    # Use the curve_fit function to find the best-fit parameters\n    params, _ = curve_fit(func, X, Y)\n\n    # Generate the fitted function using the best-fit parameters\n    X_fit = np.linspace(X.min(), X.max(), 1000)\n    Y_fit = func(X_fit, *params)\n\n    # Plot the scatter data points and the fitted function\n    plt.scatter(X, Y)\n    plt.plot(X_fit, Y_fit)\n\n    return params, plt.gca()", "compilation_passed": true, "time": 0.017773151397705078, "tests_passed": false, "error": "AttributeError"}
{"code": "def func_fit(x, a, b, c):\n        return a*x**2 + b*x + c\n\n    # Adjust a quadratic function to the given data (X, Y)\n    params, _ = curve_fit(func_fit, X, Y)\n\n    # plot the data along with the fit\n    ax = plt.axes()\n    ax.scatter(X, Y, label='data', c='red', alpha=0.5)\n    ax.plot(X, func_fit(X, *params), 'b', label='fit')\n    ax.legend()\n    plt.show()\n\n    # Return the optimized parameters of the quadratic function, and the plot\n    return params, ax", "compilation_passed": true, "time": 0.02824997901916504, "tests_passed": true, "error": null}
{"code": "def func(x, a, b, c):\n        return a*x**2 + b*x + c\n\n    params, _ = curve_fit(func, X, Y)\n    plt.scatter(X, Y)\n    plt.plot(X, func(X, *params))\n    return params, plt.gca()", "compilation_passed": true, "time": 0.022283077239990234, "tests_passed": true, "error": null}
{"code": "def quadratic_func(X, a, b, c):\n        return a * X**2 + b * X + c\n\n    params, _ = curve_fit(quadratic_func, X, Y)\n    ax = plt.scatter(X, Y, c='k', marker='+')\n    Y_fit = quadratic_func(X, *params)\n    plt.plot(X, Y_fit, c='r')\n\n    return params, ax", "compilation_passed": true, "time": 0.006292104721069336, "tests_passed": false, "error": "AttributeError"}
{"code": "def func_quadratic(x, a, b, c):\n        return a * x**2 + b * x + c\n\n    try:\n        popt, pcov = curve_fit(func_quadratic, X, Y)\n        #print(f\"The optimized parameters are: {popt}\")\n\n        x = np.linspace(min(X), max(X), len(X))\n        y = func_quadratic(x, *popt)\n        ax = plt.axes()\n        ax.plot(x, y)\n        ax.scatter(X, Y)\n        plt.show()\n\n        return popt, ax\n\n    except ValueError as e:\n        print(f\"An error occurred: {e}\")\n        return None, None", "compilation_passed": true, "time": 0.02196192741394043, "tests_passed": true, "error": null}
{"code": "def quadratic_fit(x, a, b, c):\n        return a * x**2 + b * x + c\n\n    popt, pcov = curve_fit(quadratic_fit, X, Y)\n\n    plt.plot(X, Y, \"x\")\n    plt.plot(X, quadratic_fit(X, *popt))\n    plt.legend([\"Data\", \"Fit\"])\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n\n    return popt, plt.gca()", "compilation_passed": true, "time": 0.006219625473022461, "tests_passed": false, "error": "IndexError"}
{"code": "# Define a quadratic function\n    def fit_function(x, a, b, c):\n        return a * x**2 + b * x + c\n\n    # Fit the function to the data\n    popt, pcov = curve_fit(fit_function, X, Y)\n\n    # Create a figure and axis object\n    fig, ax = plt.subplots()\n\n    # Plot the data as a scatter plot\n    ax.scatter(X, Y)\n\n    # Plot the quadratic fit on the same axis\n    X_fit = np.linspace(np.min(X), np.max(X), 100)\n    Y_fit = fit_function(X_fit, *popt)\n    ax.plot(X_fit, Y_fit)\n\n    # Set the title and axis labels for the plot\n    ax.set_title(\"Quadratic Fit\")\n    ax.set_xlabel(\"X\")\n    ax.set_ylabel(\"Y\")\n\n    return popt, ax", "compilation_passed": true, "time": 0.02423715591430664, "tests_passed": true, "error": null}
{"code": "def func(x, a, b, c):\n        return a * x**2 + b * x + c\n    popt, pcov = curve_fit(func, X, Y)\n    X_fit = np.linspace(X.min(), X.max(), 1000)\n    Y_fit = func(X_fit, popt[0], popt[1], popt[2])\n    # plt.plot(X, Y, 'o', label='data')\n    # plt.plot(X_fit, Y_fit, label='quadratic fit')\n    # plt.xlabel('x')\n    # plt.ylabel('y')\n    # plt.legend()\n    # plt.title('Quadratic Function Fit to Scatter Plot')\n    # plt.show()\n\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, 'o', label='data')\n    ax.plot(X_fit, Y_fit, label='quadratic fit')\n    ax.set_xlabel('x')\n    ax.set_ylabel('", "compilation_passed": false, "time": 0.00011682510375976562, "tests_passed": false, "error": "SyntaxError"}
{"code": "def func_to_fit(x, a, b, c):\n        return a*x**2 + b*x + c\n\n    popt, pcov = curve_fit(func_to_fit, X, Y, maxfev=10000)\n\n    ax = plt.figure().gca()\n    ax.scatter(X, Y)\n\n    X = np.linspace(min(X), max(X), 10000)\n    Y = func_to_fit(X, *popt)\n    ax.plot(X, Y)\n\n    return popt, ax", "compilation_passed": true, "time": 0.025313138961791992, "tests_passed": true, "error": null}
{"code": "def quadratic(x, a, b, c):\n        return a * x ** 2 + b * x + c\n\n    optimal_vals, cov = curve_fit(quadratic, X, Y)\n    print(f\"optimal_vals: {optimal_vals}\")\n    print(f\"cov: {cov}\")\n    plot_func = lambda x, a, b, c: a * x ** 2 + b * x + c\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, label='data')\n    X = np.linspace(min(X), max(X), len(X))\n    ax.plot(X, plot_func(X, *optimal_vals), label=f'fit')\n    ax.legend()\n    ax.grid()\n    ax.set_title('Quadratic fit to scatter data')\n    return optimal_vals, ax", "compilation_passed": true, "time": 0.02997899055480957, "tests_passed": true, "error": null}
{"code": "# Define the function for a quadratic fit\n    def func(X, a, b, c):\n        return a * X**2 + b * X + c\n\n    # Perform the fit\n    params, _ = curve_fit(func, X, Y)\n\n    # Create the plot\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n\n    # Calculate the fitted values\n    X_fit = np.linspace(np.min(X), np.max(X), 1000)\n    Y_fit = func(X_fit, *params)\n    ax.plot(X_fit, Y_fit, label=f'a={params[0]:.2f}, b={params[1]:.2f}, c={params[2]:.2f}')\n    ax.set_xlabel('X')\n    ax.set_ylabel('Y')\n    ax.legend()\n\n    return params, ax", "compilation_passed": true, "time": 0.026398181915283203, "tests_passed": true, "error": null}
{"code": "# Define the model function\n    def model_func(x, a, b, c):\n        return a * x**2 + b * x + c\n\n    # Fit the model to the data\n    optimized_params, _ = curve_fit(model_func, X, Y)\n\n    # Generate X values to plot the fit\n    X_fit = np.linspace(min(X), max(X), 1000)\n    Y_fit = model_func(X_fit, *optimized_params)\n\n    # Plot the data and fit\n    ax = plt.subplot()\n    ax.plot(X, Y, 'o')\n    ax.plot(X_fit, Y_fit, '-')\n\n    # Return the optimized parameters and the plot axis\n    return optimized_params, ax", "compilation_passed": true, "time": 0.005872964859008789, "tests_passed": false, "error": "IndexError"}
{"code": "# Fit quadratic function to the given data\n    def func(x, a, b, c): return a*x**2 + b*x + c\n    popt, _ = curve_fit(func, X, Y)\n\n    # Create figure and axes\n    fig, ax = plt.subplots()\n\n    # Plot the data points and the quadratic fit\n    ax.scatter(X, Y, label='Data', c='red')\n    ax.plot(X, func(X, *popt), label='Fit', color='green')\n    ax.set_xlabel('X')\n    ax.set_ylabel('Y')\n    ax.legend()\n\n    # Return the optimized parameters and the plot\n    return popt, ax", "compilation_passed": true, "time": 0.026175975799560547, "tests_passed": true, "error": null}
{"code": "def quad_function(X, a, b, c):\n        \"\"\"\n        The quadratic function to adjust to the given data (X, Y).\n\n        Parameters:\n        - X (list or numpy.array): The X data points.\n        - a, b, c (float): The parameters of the quadratic function.\n\n        Returns:\n        numpy.array: The quadratic values calculated for the given X data points.\n\n        Example:\n        >>> X = np.array([1, 2, 3])\n        >>> quad_function(X, 1, 1, 1)\n        array([3, 7, 13])\n        \"\"\"\n        return a * X**2 + b * X + c\n\n    params, _ = curve_fit(quad_function, X, Y)\n    X_fit = np.linspace(np.min(X), np.max(X), 100)\n    Y_fit = quad_function(X_fit, *params)\n\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)", "compilation_passed": true, "time": 0.005888223648071289, "tests_passed": false, "error": "TypeError"}
{"code": "def f_x(X, a, b, c):\n        \"\"\"\n        The quadratic function to fit to the data.\n        \"\"\"\n        return a*X**2 + b*X + c\n\n    popt, _ = curve_fit(f_x, X, Y)\n\n    plt.scatter(X, Y, color='red', label='Scatter Data')\n    X_fit = np.linspace(min(X), max(X), 100)\n    Y_fit = f_x(X_fit, *popt)\n    plt.plot(X_fit, Y_fit, color='blue', label='Quadratic Fit')\n    plt.xlabel('X')\n    plt.ylabel('Y')\n    plt.title('Quadratic Fit to Scatter Data')\n    plt.legend()\n    ax = plt.gca()\n    plt.show()\n\n    return popt, ax", "compilation_passed": true, "time": 0.024190902709960938, "tests_passed": true, "error": null}
{"code": "def quadratic_func(x, a, b, c):\n        return a * x**2 + b * x + c\n    optimized_params, _ = curve_fit(quadratic_func, X, Y)\n    plot = plt.scatter(X, Y)\n    X_fit = np.linspace(min(X), max(X), 100)\n    Y_fit = quadratic_func(X_fit, *optimized_params)\n    plt.plot(X_fit, Y_fit, 'r')\n    return optimized_params, plot", "compilation_passed": true, "time": 0.0060291290283203125, "tests_passed": false, "error": "AttributeError"}
{"code": "# Define the function to be fitted\n    def fit_func(x, a, b, c):\n        return a*x**2 + b*x + c\n\n    # Fit the function to the data\n    optimized_params, _ = curve_fit(fit_func, X, Y)\n\n    # Plot the data points and the fitted function\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.plot(X, Y, 'o', label='data')\n    ax.plot(X, fit_func(X, *optimized_params), '-', label='fit')\n    ax.legend()\n    ax.set_xlabel('X')\n    ax.set_ylabel('Y')\n    plt.title('Quadratic fit to the data')\n\n    return optimized_params, ax", "compilation_passed": true, "time": 0.005519866943359375, "tests_passed": false, "error": "IndexError"}
{"code": "def func_1(x, a, b, c):\n        return a*x**2 + b*x + c\n    optimized, _ = curve_fit(func_1, X, Y)\n    x = np.arange(min(X), max(X), 1)\n    plt.scatter(X, Y)\n    plt.plot(x, func_1(x, *optimized), 'r', label='Fitted')\n    plt.legend()\n    return optimized, plt.gca()", "compilation_passed": true, "time": 0.02297806739807129, "tests_passed": true, "error": null}
{"code": "# Define the quadratic function to fit to the data\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n\n    # Fit the quadratic function to the data\n    popt, pcov = curve_fit(func, X, Y)\n\n    # Create a plot of the data and the fit\n    plt.scatter(X, Y, label=\"Data\")\n    x = np.linspace(min(X), max(X), 1000)\n    plt.plot(x, func(x, *popt), label=\"Quadratic Fit\")\n    plt.xlabel(\"X\")\n    plt.ylabel(\"Y\")\n    plt.legend()\n    ax = plt.gca()\n\n    # Return the optimized parameters and the plot\n    return popt, ax", "compilation_passed": true, "time": 0.023540973663330078, "tests_passed": true, "error": null}
{"code": "def quad_func(x, a, b, c):\n        return a * x**2 + b * x + c\n\n    params, _ = curve_fit(quad_func, X, Y)\n\n    # Plot the data and the fit\n    plt.scatter(X, Y)\n    X_fit = np.linspace(min(X), max(X), 100)\n    Y_fit = quad_func(X_fit, *params)\n    plt.plot(X_fit, Y_fit)\n\n    return params, plt.gca()", "compilation_passed": true, "time": 0.02199721336364746, "tests_passed": true, "error": null}
{"code": "# Define the quadratic function\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n\n    # Use curve_fit to adjust the function to the data\n    popt, pcov = curve_fit(func, X, Y)\n\n    # Create the plot\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    x_line = np.linspace(min(X), max(X), 100)\n    y_line = func(x_line, *popt)\n    ax.plot(x_line, y_line)\n\n    return popt, ax", "compilation_passed": true, "time": 0.023778200149536133, "tests_passed": true, "error": null}
{"code": "# Define the quadratic function\n    def func(x, a, b, c):\n        return a * x**2 + b * x + c\n\n    # Fit the data to the quadratic function\n    params, _ = curve_fit(func, X, Y)\n\n    # Create a plot of the data and the quadratic fit\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, func(X, *params))\n    ax.set(title='Quadratic Fit', xlabel='X', ylabel='Y')\n    fig.show()\n\n    return params, ax", "compilation_passed": true, "time": 0.02504587173461914, "tests_passed": true, "error": null}
{"code": "def quadratic_func(x, a, b, c):\n        return a * x**2 + b * x + c\n\n    X = np.array(X)\n    Y = np.array(Y)\n\n    params, _ = curve_fit(quadratic_func, X, Y)\n\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y)\n    ax.plot(X, quadratic_func(X, *params))\n\n    return params, ax", "compilation_passed": true, "time": 0.023739337921142578, "tests_passed": true, "error": null}
{"code": "# Define the function to adjust\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n\n    # Adjust the function to the data\n    popt, pcov = curve_fit(func, X, Y)\n\n    # Plot the data and the fit\n    plt.figure()\n    plt.scatter(X, Y)\n    x = np.linspace(min(X), max(X), 100)\n    plt.plot(x, func(x, *popt), '-')\n    ax = plt.gca()\n    plt.show()\n\n    return popt, ax", "compilation_passed": true, "time": 0.02504897117614746, "tests_passed": true, "error": null}
{"code": "def quadratic(x, a, b, c):\n        return a * x**2 + b * x + c\n\n    popt, pcov = curve_fit(quadratic, X, Y)\n    Y_fit = quadratic(X, *popt)\n\n    # Plot the data and the fit\n    plt.scatter(X, Y, label='Data')\n    plt.plot(X, Y_fit, label='Quadratic Fit')\n    plt.legend()\n\n    return popt, plt.gca()", "compilation_passed": true, "time": 0.019117116928100586, "tests_passed": true, "error": null}
{"code": "# Define the function to fit to the data\n    def func(x, a, b, c):\n        return a*x**2 + b*x + c\n\n    # Fit the data to the function\n    popt, pcov = curve_fit(func, X, Y)\n\n    # Plot the data points and the fit\n    plt.scatter(X, Y)\n    plt.plot(X, func(X, *popt))\n\n    return popt, plt.gca()", "compilation_passed": true, "time": 0.0220949649810791, "tests_passed": true, "error": null}
{"code": "def quadratic_func(x, a, b, c):\n        return a * x**2 + b * x + c\n\n    # Fit the data to the quadratic function\n    popt, pcov = curve_fit(quadratic_func, X, Y)\n\n    # Plot the data and the fit\n    ax = plt.axes()\n    ax.scatter(X, Y)\n    ax.plot(X, quadratic_func(X, *popt), 'r')\n\n    return popt, ax", "compilation_passed": true, "time": 0.02385997772216797, "tests_passed": true, "error": null}
{"code": "# Define a quadratic function\n    def quadratic(x, a, b, c):\n        return a*x**2 + b*x + c\n\n    # Fit the function to the given data\n    popt, pcov = curve_fit(quadratic, X, Y)\n\n    # Plot the data and the fit\n    fig, ax = plt.subplots()\n    ax.scatter(X, Y, marker='x', color='red', label='data')\n    ax.plot(X, quadratic(X, *popt), color='blue', label='fit')\n    ax.legend()\n    ax.set_title('Quadratic Fit to Data')\n    ax.set_xlabel('X')\n    ax.set_ylabel('Y')\n    return popt, ax", "compilation_passed": true, "time": 0.026986122131347656, "tests_passed": true, "error": null}
{"code": "# Fit a quadratic function to the data\n    def fit_func(X, a, b, c):\n        return a * X**2 + b * X + c\n\n    params, _ = curve_fit(fit_func, X, Y)\n    plt.scatter(X, Y)\n    # Plot the fit\n    plt.plot(X, fit_func(X, *params))\n    # Save the plot\n    plt.savefig('data/task_100_fig.png')\n    # Show the plot\n    plt.show()\n    return params, plt.gca()", "compilation_passed": true, "time": 0.024528026580810547, "tests_passed": false, "error": "FileNotFoundError"}
