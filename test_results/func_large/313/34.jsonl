{"code": "pattern = r\"\\[(.*?)\\]\"\n    organized_dir = os.path.join(directory, \"organized\")\n    files_by_dir = {}\n    now = datetime.now()\n    formatted_time = now.strftime(\"%Y-%m-%d-%H-%M-%S\")\n\n    if not os.path.exists(organized_dir):\n        os.mkdir(organized_dir)\n\n    for file in os.listdir(directory):\n        if os.path.isfile(os.path.join(directory, file)):\n            match = re.search(pattern, file)\n            if match:\n                subdir = match.group(1)\n                if subdir not in files_by_dir:\n                    files_by_dir[subdir] = []\n                new_file_name = f\"{file.replace(subdir, '')}_{formatted_time}\"\n                new_file_path = os.path.join(organized_dir, subdir, new_file_name)\n                os.makedirs(os.path.dirname(new", "compilation_passed": false, "time": 0.00027871131896972656, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Initialize a dictionary to store the files to be moved\n    files = {}\n\n    # Loop through all the files in the directory\n    for filename in os.listdir(directory):\n        # Ignore hidden files starting with \".\"\n        if filename.startswith('.'):\n            continue\n\n        # Construct the filepath\n        filepath = os.path.join(directory, filename)\n\n        # Read the file content\n        with open(filepath, 'r') as f:\n            content = f.read()\n\n        # Extract the first text that is not enclosed in square brackets\n        pattern = r'[^\\[\\]]([^\\[]+)'\n        match = re.search(pattern, content)\n\n        # Check if the pattern was found in the content\n        if match:\n            # Get the directory name\n            dir_name = match.group(1)\n\n            # Create the subdirectory if it doesn't exist\n            if dir_name not in files:\n                os.mkdir(os.path.join(directory, dir_name))\n                files[dir_name] = []\n\n", "compilation_passed": true, "time": 0.0021970272064208984, "tests_passed": false, "error": "TypeError"}
{"code": "# Create the directory if it doesn't exist\n    os.makedirs(directory, exist_ok=True)\n    organized_files = {}\n    # Loop through each file in the directory\n    for file_name in os.listdir(directory):\n        # Ignore hidden files\n        if file_name.startswith('.') or file_name.startswith('__'):\n            continue\n        file_path = os.path.join(directory, file_name)\n\n        # Check if it's a file\n        if os.path.isfile(file_path):\n            # Read the first line of the file\n            with open(file_path, 'r') as f:\n                first_line = f.readline().strip()\n\n            # Find text that is not enclosed in square brackets\n            match = re.search(r'(?<=\\[).*?(?=\\])', first_line)\n\n            # If match is found, extract the text\n            if match:\n                extracted_text = match.group(0)\n                # Create a new file name with the extracted", "compilation_passed": true, "time": 0.0021140575408935547, "tests_passed": false, "error": "TypeError"}
{"code": "# create a dictionary to map filenames to directories\n    filenames_to_directories = {}\n\n    # get a list of all files in the directory\n    filenames = os.listdir(directory)\n\n    # loop through the files\n    for filename in filenames:\n        # if the file is not a directory\n        if not os.path.isdir(os.path.join(directory, filename)):\n            # create a timestamp for the filename\n            timestamp = str(datetime.now()).replace(\" \", \"_\")\n            # extract the directory name using regular expressions\n            match = re.search(r\"(?<=\\[).*?(?=\\])\", filename)\n            if match:\n                # get the directory name from the match\n                directory_name = match.group()\n                # if the directory doesn't exist, create it\n                if not os.path.exists(os.path.join(directory, directory_name)):\n                    os.mkdir(os.path.join(directory, directory_name))\n                # move the file to the directory\n                ", "compilation_passed": true, "time": 0.001977205276489258, "tests_passed": false, "error": "TypeError"}
{"code": "created_files = {}\n    for filename in os.listdir(directory):\n        if not filename.startswith(\".\"):\n            with open(os.path.join(directory, filename), \"r\") as file:\n                content = file.read()\n                text = re.search(r\"\\[(\\w+)\\]\", content)\n                if text:\n                    text = text.group(1)\n                    subdir = os.path.join(directory, text)\n                    if not os.path.exists(subdir):\n                        os.makedirs(subdir)\n                        created_files[subdir] = []\n                    new_filename = os.path.join(subdir, f\"{filename}_{datetime.now()}\")\n                    shutil.copy(os.path.join(directory, filename), new_filename)\n                    created_files[subdir].append(os.path.basename(new_filename))\n    return directory, created_files", "compilation_passed": true, "time": 0.0026502609252929688, "tests_passed": true, "error": null}
{"code": "now = datetime.now()\n    files = os.listdir(directory)\n    organized_files = {}\n    for file in files:\n        path = os.path.join(directory, file)\n        if os.path.isfile(path) and not file.startswith('.'):\n            with open(path, 'r', errors='ignore') as f:\n                content = f.read()\n                match = re.search(r\"(?<=\\[).*?(?=\\])\", content)\n                if match:\n                    subdirectory = match.group(0)\n                    if subdirectory not in organized_files:\n                        organized_files[subdirectory] = []\n                    new_file_name = os.path.join(directory, subdirectory, f'{file[:-4]}_{now.strftime(\"%Y%m%d%H%M%S\")}_{os.getpid()}.txt')\n                    shutil.move(path, new_file_name)\n                    organized_files[subdirectory].append(new_file_name.split(os", "compilation_passed": false, "time": 0.00026702880859375, "tests_passed": false, "error": "SyntaxError"}
{"code": "regex = r\"(?<=\\[).*?(?=\\])\"\n    moved_files = {}\n\n    for filename in os.listdir(directory):\n        file_path = os.path.join(directory, filename)\n\n        # Check if the file matches the regex pattern\n        match = re.search(regex, filename)\n        if match:\n            subdir = match.group(0)\n\n            # Create subdirectory if it doesn't exist\n            subdir_path = os.path.join(directory, subdir)\n            os.makedirs(subdir_path, exist_ok=True)\n\n            # Rename the file with date and time before moving\n            date_time = datetime.now()\n            new_filename = f\"{filename}_{date_time.strftime('%Y-%m-%d_%H-%M-%S')}\"\n\n            # Move the file to the subdirectory\n            shutil.move(file_path, os.path.join(subdir_path, new_filename))\n\n            # Update the moved_files dictionary\n            if subdir not in", "compilation_passed": false, "time": 0.0001919269561767578, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Find the first text not enclosed in square brackets\n    pattern = re.compile(r\"(?<=\\[).*?(?=\\])\")\n\n    # Create a dictionary to store the moved files\n    file_dict = {}\n\n    # Iterate through files in the directory\n    for filename in os.listdir(directory):\n        full_path = os.path.join(directory, filename)\n\n        # Check if the file is not already in the right subdirectory\n        if not any(filename in subdir for subdir in file_dict):\n            # Extract the first text not enclosed in square brackets\n            match = pattern.search(filename)\n\n            if match:\n                subdir = match.group()\n\n                # Rename the file to avoid overwriting existing files\n                new_filename = f\"{filename[:match.start()]}_{datetime.now().strftime('%Y_%m_%d_%H_%M_%S_%f')}.{filename.split('.')[-1]}\"\n                new_path = os.path.join(directory, subdir, new_", "compilation_passed": false, "time": 0.0001919269561767578, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Create a list of all files in the directory\n    file_list = os.listdir(directory)\n\n    # Create a dictionary to store the file names in each subdirectory\n    subdir_files = {}\n\n    # Loop through each file in the directory\n    for file in file_list:\n        # Create the full path to the file\n        file_path = os.path.join(directory, file)\n\n        # Check if the file is a regular file\n        if not os.path.isfile(file_path):\n            continue\n\n        # Get the file extension\n        _, file_extension = os.path.splitext(file)\n\n        # If the file ends with '.txt', extract the text not enclosed in square brackets\n        if file_extension == \".txt\":\n            with open(file_path, 'r', encoding='utf-8') as f:\n                text = f.read()\n\n            # Extract the text not enclosed in square brackets\n            match = re.search(r\"(?<!\\[)\\w+(?!\\])\", text)\n\n            #", "compilation_passed": true, "time": 0.002081632614135742, "tests_passed": false, "error": "TypeError"}
{"code": "files = {}\n    for root, dirs, filenames in os.walk(directory, topdown=False):\n        for filename in filenames:\n            match = re.search(r'\\[(.*)\\]', filename)\n            if match:\n                subdir = match.group(1)\n                if subdir not in files:\n                    files[subdir] = []\n                files[subdir].append(os.path.join(root, filename))\n    for subdir in files:\n        subdir_path = os.path.join(directory, subdir)\n        os.mkdir(subdir_path)\n        for filename in files[subdir]:\n            new_filename = f\"{os.path.splitext(os.path.basename(filename))[0]}_{datetime.now().strftime('%d%m%Y_%H%M%S')}{os.path.splitext(filename)[1]}\"\n            shutil.move(filename, os.path.join(subdir_path, new_filename))\n    return directory, files", "compilation_passed": true, "time": 0.002109050750732422, "tests_passed": true, "error": null}
{"code": "# Initialize dictionary to hold created subdirectories and their contents\n    created_subdirs = {}\n\n    # Loop through all files in the directory\n    for filename in os.listdir(directory):\n        # Ignore directories and hidden files starting with '.'\n        if os.path.isdir(os.path.join(directory, filename)) or filename.startswith('.'):\n            continue\n\n        # Find first text that is not enclosed in square brackets\n        pattern = r'(?<!\\[)[^\\[]+'\n        match = re.search(pattern, filename)\n\n        # Check if match was found\n        if match:\n            # Extract the text\n            text = match.group(0)\n            # Rename the file to append the date and time\n            new_filename = f\"{filename[:match.start()]}_{datetime.now().strftime('%Y-%m-%d_%H-%M-%S')}{filename[match.start():]}\"\n\n            # Check if subdirectory already exists, create it if not\n            if text not in created_subdirs:\n                os.mk", "compilation_passed": true, "time": 0.0020329952239990234, "tests_passed": false, "error": "AttributeError"}
{"code": "# Create dictionary to store subdirectory names and files moved to them\n    files = {}\n    # Regular expression to find the text that is not enclosed in square brackets\n    pattern = re.compile(r'(?<=\\[)[^\\[\\]]*(?=\\])')\n    # Loop through all files in the directory\n    for filename in os.listdir(directory):\n        # Get the text that is not enclosed in square brackets in the filename\n        match = re.search(pattern, filename)\n        # If the text is found, create the subdirectory and move the file to it\n        if match:\n            subdir = match.group(0)\n            subdir_path = os.path.join(directory, subdir)\n            os.makedirs(subdir_path, exist_ok=True)\n            new_name = filename[:filename.rfind('.')] + \"_\" + datetime.now().strftime(\"%Y%m%d_%H%M%S\") + \".\" + filename.split(\".\")[-1]\n            shutil.move(os.path.join(directory, filename", "compilation_passed": false, "time": 0.00019669532775878906, "tests_passed": false, "error": "SyntaxError"}
{"code": "created_directories = {}\n    pattern = r'\\[(.+?)\\]'\n\n    for filename in os.listdir(directory):\n        if not filename.startswith('.'):\n            match = re.search(pattern, filename)\n            if match:\n                subdir_name = match.group(1)\n                if not os.path.exists(os.path.join(directory, subdir_name)):\n                    os.mkdir(os.path.join(directory, subdir_name))\n                    created_directories[subdir_name] = []\n                filepath = os.path.join(directory, filename)\n                new_filename = f\"{filename[:filename.find('[')]}_{datetime.now().strftime('%Y%m%d_%H%M%S')}\"\n                new_filepath = os.path.join(directory, subdir_name, new_filename)\n                shutil.move(filepath, new_filepath)\n                created_directories[subdir_name].append(new_filename)\n\n    return directory,", "compilation_passed": true, "time": 0.0021469593048095703, "tests_passed": false, "error": "ValueError"}
{"code": "pattern = r\"^(?!\\[)(.+?)(?=\\[|$)\"\n\n    files = {}\n    for root, dirs, files_in_dir in os.walk(directory, topdown=False):\n        for file in files_in_dir:\n            match = re.search(pattern, file)\n            if match:\n                subdir = match.group(1)\n                new_filename = f\"{datetime.now().strftime('%d-%m-%Y-%H-%M')}_{file}\"\n                file_path = os.path.join(root, file)\n                new_dir = os.path.join(root, subdir)\n                new_file_path = os.path.join(new_dir, new_filename)\n\n                if not os.path.exists(new_dir):\n                    os.makedirs(new_dir)\n\n                if subdir not in files:\n                    files[subdir] = []\n\n                try:\n                    os.rename(file_path, new_file_path)\n                except Exception as e:\n                ", "compilation_passed": false, "time": 0.00022411346435546875, "tests_passed": false, "error": "IndentationError"}
{"code": "def create_test_directory(root_dir, file_dict):\n        for filename, content in file_dict.items():\n            with open(os.path.join(root_dir, filename), 'w') as file:\n                file.write(content)\n\n    def remove_test_directory(root_dir):\n        shutil.rmtree(root_dir)\n\n    def organize_files_in_directory(directory):\n        result = {}\n\n        for filename in os.listdir(directory):\n            file_path = os.path.join(directory, filename)\n            if os.path.isfile(file_path) and '[' in filename and ']' in filename:\n                match = re.search(r'\\[(.*?)\\]', filename)\n                if match:\n                    match_text = match.group(1)\n                    new_filename = filename.replace('[' + match_text + ']', '')\n                    new_file_path = os.path.join(directory, new_filename)\n                    os.rename(file_path, new_file", "compilation_passed": false, "time": 0.000247955322265625, "tests_passed": false, "error": "SyntaxError"}
{"code": "organized_dir = directory\n    organized_files = {}\n\n    def create_new_name(file_name):\n        dt = datetime.now()\n        dt = dt.strftime(\"%d_%m_%Y_%H_%M_%S\")\n        return f\"{dt}_{file_name}\"\n\n    for filename in os.listdir(directory):\n        file_path = os.path.join(directory, filename)\n        if not os.path.isfile(file_path):\n            continue\n\n        match = re.search(r'([^\\[\\]]+)', filename)\n        if match:\n            text_to_match = match.group(1)\n            new_dir = os.path.join(organized_dir, text_to_match)\n\n            if not os.path.isdir(new_dir):\n                os.makedirs(new_dir)\n\n            organized_files.setdefault(text_to_match, [])\n            new_file_name = create_new_name(filename)\n            shutil.move(file_path,", "compilation_passed": false, "time": 0.00022792816162109375, "tests_passed": false, "error": "SyntaxError"}
{"code": "result_dict = {}\n\n    # create a pattern to match the first text that is not enclosed in square brackets\n    pattern = re.compile(r\"^(?!.*\\[.*\\])\")\n\n    # loop through all files in the directory\n    for filename in os.listdir(directory):\n        file_path = os.path.join(directory, filename)\n        # check if file matches the pattern\n        if pattern.match(filename):\n            # extract the subdirectory name from the file name\n            subdir_name = filename.split('[')[0]\n            # check if the subdirectory exists, create it if it doesn't\n            subdir_path = os.path.join(directory, subdir_name)\n            if not os.path.exists(subdir_path):\n                os.mkdir(subdir_path)\n            # copy the file to the subdirectory with a timestamped prefix\n            timestamp = datetime.now().strftime('%Y-%m-%d_%H-%M-%S_')\n            new_filename = f\"{timestamp}{filename}\"\n            new_file_", "compilation_passed": true, "time": 0.002093791961669922, "tests_passed": false, "error": "NameError"}
{"code": "created_subdirs = []\n    moved_files = {}\n\n    def move_file(file, subdir):\n        if not os.path.isdir(os.path.join(directory, subdir)):\n            os.makedirs(os.path.join(directory, subdir))\n            created_subdirs.append(subdir)\n            moved_files[subdir] = []\n\n        new_name = file.split('.')[0] + '_' + str(datetime.now().strftime(\"%Y%m%d_%H%M%S_%f\")) + '.' + file.split('.')[1]\n        shutil.move(os.path.join(directory, file), os.path.join(directory, subdir, new_name))\n        moved_files[subdir].append(new_name)\n\n    for file in os.listdir(directory):\n        if not os.path.isdir(os.path.join(directory, file)):\n            match = re.search(r'\\[(.*", "compilation_passed": false, "time": 0.00010704994201660156, "tests_passed": false, "error": "SyntaxError"}
{"code": "result = {}\n    for file in os.listdir(directory):\n        if not os.path.isfile(os.path.join(directory, file)):\n            continue\n        match = re.match(r\"^(?:.*?\\[.*?\\]*)*([^[]+)\", file)\n        if match:\n            new_file_name = f\"{match.group(1)}_{str(datetime.now()).replace(' ', '_').replace(':', '.')}\"\n            shutil.move(os.path.join(directory, file), os.path.join(directory, match.group(1), new_file_name))\n            if match.group(1) not in result:\n                result[match.group(1)] = []\n            result[match.group(1)].append(new_file_name)\n        else:\n            print(f\"Skipped {file}. No matching text found.\")\n    return directory, result", "compilation_passed": true, "time": 0.002443075180053711, "tests_passed": false, "error": "NotADirectoryError"}
{"code": "files = {}\n    for filename in os.listdir(directory):\n        file_path = os.path.join(directory, filename)\n        with open(file_path, \"r\") as file:\n            content = file.read()\n        match = re.search(r\"([^\\[]+)(\\[.*?\\])\", content)\n        if match:\n            target_dir = match.group(1)\n            target_dir_path = os.path.join(directory, target_dir)\n            if not os.path.exists(target_dir_path):\n                os.mkdir(target_dir_path)\n            new_file_path = os.path.join(target_dir_path, f\"{datetime.now()}_{filename}\")\n            shutil.move(file_path, new_file_path)\n            if target_dir not in files:\n                files[target_dir] = []\n            files[target_dir].append(new_file_path)\n    return directory, files", "compilation_passed": true, "time": 0.0051000118255615234, "tests_passed": true, "error": null}
{"code": "# Create a dictionary to store the file paths of each subdirectory\n    subdir_files = {}\n\n    # Loop through each file in the directory\n    for filename in os.listdir(directory):\n        file_path = os.path.join(directory, filename)\n\n        # If the file is not a regular file, skip it\n        if not os.path.isfile(file_path):\n            continue\n\n        # Get the first text that is not enclosed in square brackets\n        match = re.search(r\"^(?!\\[)(.*?)(?!\\])$\", filename)\n\n        if match:\n            text = match.group(1)\n\n            # Create a new file name with the current date and time\n            new_file_name = f\"{text}_{datetime.now().strftime('%Y-%m-%d_%H-%M-%S')}\"\n\n            # Create a new subdirectory if it doesn't exist\n            if text not in subdir_files:\n                subdir_files[text] = []\n                os.mkdir(os.path.join(directory,", "compilation_passed": false, "time": 0.00019884109497070312, "tests_passed": false, "error": "SyntaxError"}
{"code": "pattern = r'[^[\\]]+'\n\n    # Define the regular expression pattern\n\n    # Find all matching text in the file name, except for those enclosed in square brackets\n    file_name_regex = r'\\[.*?\\]'\n\n    files = [f for f in os.listdir(directory) if os.path.isfile(\n        os.path.join(directory, f))]\n\n    organized_files = {}\n\n    for file_name in files:\n        # Check if file name is valid\n        if not os.path.isfile(os.path.join(directory, file_name)):\n            continue\n\n        # Check if file name contains pattern\n        if re.findall(pattern, file_name):\n            file_name_parts = re.split(file_name_regex, file_name)\n            new_name = re.sub(r' +', '_',\n                              file_name_parts[0].lower().strip())\n\n            # Check if file name has not been modified yet\n            if file_name != f'{new_name}_{", "compilation_passed": false, "time": 8.606910705566406e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Initialize a dictionary to hold the file lists for each subdirectory\n    file_lists = {}\n\n    # Iterate through all files in the given directory\n    for file_name in os.listdir(directory):\n        # Construct the full path to the file\n        file_path = os.path.join(directory, file_name)\n\n        # Check if it is a file\n        if os.path.isfile(file_path):\n            # Get the file content\n            with open(file_path, \"r\") as f:\n                content = f.read()\n\n            # Find the first text not enclosed in square brackets\n            match = re.search(r\"[^\\[\\]]+\", content)\n            if match:\n                subdir_text = match.group(0)\n\n                # Construct the subdirectory path\n                subdir_path = os.path.join(directory, subdir_text)\n\n                # Create the subdirectory if it doesn't exist\n                if not os.path.exists(subdir_path):\n                    os.mkdir(subdir_path)\n\n                # Construct", "compilation_passed": true, "time": 0.0021622180938720703, "tests_passed": false, "error": "TypeError"}
{"code": "# Create a regular expression pattern to match the first text that is not enclosed in square brackets.\n    pattern = re.compile(r\"([^\\[]*)(?:\\[.*?\\])?\")\n    files_organized = {}\n    for filename in os.listdir(directory):\n        # Get the first text that is not enclosed in square brackets.\n        match = pattern.match(filename)\n        if match:\n            subdir = match.group(1).strip()\n            if subdir:\n                # Create the subdirectory if it doesn't exist, and move the file to it.\n                subdir_path = os.path.join(directory, subdir)\n                os.makedirs(subdir_path, exist_ok=True)\n                new_filename = f\"{datetime.now().strftime('%Y-%m-%d_%H-%M-%S')}_{filename}\"\n                shutil.move(os.path.join(directory, filename), os.path.join(subdir_path, new_filename))\n                files_organized.setdefault(subdir, []).append(", "compilation_passed": false, "time": 0.00021409988403320312, "tests_passed": false, "error": "SyntaxError"}
{"code": "dir_dict = {}\n    files = []\n    for file_name in os.listdir(directory):\n        if os.path.isfile(os.path.join(directory, file_name)):\n            file_text = read_file_text(directory, file_name)\n            if re.search(r\"[^\\[].*[^\\]]\", file_text):\n                subdirectory = re.search(r\"(?<=\\[).*(?=\\])\", file_text)[0]\n                if not subdirectory:\n                    continue\n                if subdirectory not in dir_dict:\n                    dir_dict[subdirectory] = []\n\n                # Add a prefix to the file name based on the current date and time\n                new_file_name = f\"{datetime.now().strftime('%Y%m%d%H%M%S')}_{file_name}\"\n\n                # Move the file to the subdirectory\n                shutil.move(\n                    os.path.join(directory, file_name),\n                    os.path.join(directory, subdirectory, new_", "compilation_passed": false, "time": 0.0002079010009765625, "tests_passed": false, "error": "SyntaxError"}
{"code": "files = {}\n\n    for file in os.listdir(directory):\n        if os.path.isfile(os.path.join(directory, file)):\n            match = re.search(r'([^\\[\\]]+)', file)\n            if match:\n                text = match.group()\n                if not os.path.isdir(os.path.join(directory, text)):\n                    os.makedirs(os.path.join(directory, text))\n                    files[text] = []\n                timestamp = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')\n                new_name = f'{file}_{timestamp}'\n                shutil.move(os.path.join(directory, file), os.path.join(directory, text, new_name))\n                files[text].append(new_name)\n\n    return directory, files", "compilation_passed": true, "time": 0.002117156982421875, "tests_passed": false, "error": "FileExistsError"}
{"code": "# Create dictionary to keep track of files moved\n    moved_files = {}\n    # Initialize variables\n    new_dir = ''\n    # Iterate over files in the directory\n    for file_name in os.listdir(directory):\n        file_path = os.path.join(directory, file_name)\n        # Check if the item is a file\n        if os.path.isfile(file_path):\n            # Find the text not enclosed in square brackets\n            pattern = r'[^\\[\\]]+'\n            matches = re.findall(pattern, file_name)\n            # If no matching text is found, skip the file\n            if len(matches) == 0:\n                continue\n            # Get the matching text and create the new directory path\n            text = matches[0]\n            new_dir = os.path.join(directory, text)\n            # Create the new directory if it doesn't exist\n            if not os.path.exists(new_dir):\n                os.makedirs(new_dir)\n                moved_files[new_dir] = []\n            # Move the file to the", "compilation_passed": true, "time": 0.0020248889923095703, "tests_passed": false, "error": "TypeError"}
{"code": "pattern = r\"[^[]+\"\n    move_to = {}\n    for file in os.listdir(directory):\n        if os.path.isfile(os.path.join(directory, file)):\n            text = re.findall(pattern, file)\n            if text:\n                text = text[0]\n                new_filename = f\"{str(datetime.timestamp(datetime.now()))[:-3]}_{file}\"\n                if text not in move_to:\n                    move_to[text] = []\n                move_to[text].append(new_filename)\n                shutil.copy2(os.path.join(directory, file), os.path.join(directory, text, new_filename))\n    return directory, move_to", "compilation_passed": true, "time": 0.002187013626098633, "tests_passed": false, "error": "NotADirectoryError"}
{"code": "result = {}\n    for file in os.listdir(directory):\n        match = re.search(r'([^\\[\\]]+)', file)\n        if match:\n            name = match.group(0)\n            if name not in result:\n                result[name] = []\n            new_name = os.path.join(directory, f\"{file[:match.start()]}_{os.path.basename(file)}\")\n            shutil.move(os.path.join(directory, file), new_name)\n            result[name].append(new_name)\n    return directory, result", "compilation_passed": true, "time": 0.002028226852416992, "tests_passed": true, "error": null}
{"code": "subdirs = {}\n    files = os.listdir(directory)\n    for file in files:\n        filename, ext = os.path.splitext(file)\n        subdir = re.search('\\[(.+)\\]', filename)\n        if subdir:\n            subdir_name = subdir.group(1)\n            if subdir_name not in subdirs:\n                subdirs[subdir_name] = []\n            new_filename = os.path.join(directory, f\"{datetime.now().strftime('%Y%m%d_%H%M%S')}_{file}\")\n            shutil.move(os.path.join(directory, file), new_filename)\n            subdirs[subdir_name].append(new_filename)\n    return directory, subdirs", "compilation_passed": true, "time": 0.0020182132720947266, "tests_passed": true, "error": null}
