{"code": "data = [np.random.uniform(data_range[0], data_range[1], size=num_labels) for _ in range(5)]\n    df = pd.DataFrame(data, columns=[f\"label {i}\" for i in range(num_labels)])\n    ax = df.plot.bar(stacked=True, figsize=(12, 8), edgecolor=\"k\")\n    ax.set_xlabel(\"Category\")\n    ax.set_ylabel(\"Amount\")\n    plt.legend(bbox_to_anchor=(1.04, 1), loc=\"upper left\")\n    plt.subplots_adjust(right=0.6)\n    fig = ax.figure\n    return fig", "compilation_passed": true, "time": 0.016151905059814453, "tests_passed": true, "error": null}
{"code": "# Create a numpy array of random integers between 0 and 1\n    data = np.random.randint(*data_range, size=(num_labels,))\n    # Create a DataFrame from the array with labels and their corresponding data as columns\n    df = pd.DataFrame({f'Label {i}': data[i] for i in range(num_labels)})\n\n    # Create a figure and plot the stacked bar chart\n    fig, ax = plt.subplots()\n    ax.barh(df.columns, df.values, height=0.5, color=['#b0c8a2', '#42b651', '#5ad5d7', '#1a9daf', '#a7b6c6'])\n    ax.set_yticklabels(df.columns)\n    return fig", "compilation_passed": true, "time": 0.0024843215942382812, "tests_passed": false, "error": "ValueError"}
{"code": "# Create a list of random numbers for each label within the specified data range\n    random_numbers = [np.random.uniform(data_range[0], data_range[1], size=num_labels) for _ in range(num_labels)]\n\n    # Create a DataFrame with the generated data and labeled columns\n    df = pd.DataFrame(random_numbers)\n\n    # Create a figure and axis for the bar chart\n    fig, ax = plt.subplots()\n\n    # Generate a list of colors for the bars\n    colors = plt.get_cmap('tab20').colors\n    colors = [colors[i % len(colors)] for i in range(num_labels)]\n\n    # Plot the stacked bar chart using pandas\n    ax.bar(np.arange(num_labels), df.iloc[0, :], color=colors[0], label=f\"Label {0}\")\n    for i in range(1, num_labels):\n        ax.bar(np.arange(num_labels), df.iloc[i, :], bottom=df.il", "compilation_passed": false, "time": 0.0002789497375488281, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Generate random data\n    data = pd.Series(np.random.uniform(data_range[0], data_range[1], num_labels))\n\n    # Create a bar plot\n    fig, ax = plt.subplots()\n    ax.bar(data.index, data, bottom=data.cumsum()[:-1], label=data.index, width=0.6)\n    ax.set_ylim(data_range)\n    ax.set_title('Stacked Bar Chart')\n    ax.set_xlabel('Labels')\n    ax.set_ylabel('Value')\n    ax.legend()\n\n    return fig", "compilation_passed": true, "time": 0.0026988983154296875, "tests_passed": true, "error": null}
{"code": "# Generate a range of labels\n    labels = np.arange(num_labels)\n\n    # Initialize an empty list to store the data\n    data = []\n\n    # Iterate over the labels and generate random data for each label\n    for label in labels:\n        data.append(np.random.uniform(low=data_range[0], high=data_range[1], size=num_labels))\n\n    # Create a DataFrame with the data\n    df = pd.DataFrame(data, index=labels, columns=labels)\n\n    # Create the stacked bar chart\n    ax = df.plot.barh(stacked=True)\n\n    # Create a figure from the axes\n    fig = ax.get_figure()\n\n    return fig", "compilation_passed": true, "time": 0.001940011978149414, "tests_passed": true, "error": null}
{"code": "labels = ['A', 'B', 'C', 'D', 'E'][num_labels]\n    df = pd.DataFrame(np.random.uniform(*data_range, (num_labels, 100)).T, columns=labels)\n    ax = df.plot(kind='bar', stacked=True, figsize=(15, 6))\n    ax.set_title('Random numeric data')\n    ax.set_xlabel('Sample')\n    ax.set_ylabel('Value')\n\n    # Return the Figure object\n    return ax.get_figure()", "compilation_passed": true, "time": 0.0014388561248779297, "tests_passed": false, "error": "IndexError"}
{"code": "labels = [f'Category {i+1}' for i in range(num_labels)]  # Generate labels for each category\n    data = [np.random.random((num_labels)) for _ in range(num_labels)]  # Generate random data for each label\n    # Create DataFrame and specify range for the random data\n    df = pd.DataFrame(data, columns=labels, dtype=int,\n                      index=np.arange(1, len(data) + 1, dtype=int),\n                      dtype=int,\n                      ).apply(lambda x: x * (data_range[1] - data_range[0]) + data_range[0])\n    # Create stacked bar chart with 'stacked' layout\n    fig = df.plot.barh(stacked=True, edgecolor='black').figure\n    return fig", "compilation_passed": false, "time": 0.0007839202880859375, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Generate random data for each label\n    data = np.random.randint(data_range[0], data_range[1], size=(num_labels,))\n\n    # Create labels for each bar\n    labels = [f\"Label {i+1}\" for i in range(num_labels)]\n\n    # Create DataFrame for the data\n    df = pd.DataFrame({'value': data}, index=labels)\n\n    # Create a figure for the bar chart\n    fig, ax = plt.subplots()\n\n    # Plot the data as stacked bars\n    ax.bar(labels, df['value'], label='value')\n    ax.set_xlabel('Labels')\n    ax.set_ylabel('Value')\n\n    # Display the generated data in the console\n    print(\"Generated Data:\")\n    print(df)\n\n    # Return the figure object for further processing or visualization\n    return fig", "compilation_passed": true, "time": 0.002084016799926758, "tests_passed": true, "error": null}
{"code": "# Generate random numeric data across specified range for given number of categories\n    random_data = []\n    for _ in range(num_labels):\n        random_data.append(np.random.uniform(*data_range, 10))\n\n    # Create DataFrame\n    data = pd.DataFrame({f'label_{i}': random_data[i] for i in range(len(random_data))},\n                        index=np.arange(len(random_data[0])))\n    # Create a stacked bar chart\n    data.plot(kind='bar', stacked=True)\n    # Set title\n    plt.title('Stacked Bar Chart')\n\n    return plt.figure()", "compilation_passed": true, "time": 0.011781930923461914, "tests_passed": true, "error": null}
{"code": "data = pd.DataFrame({f'label_{i}': np.random.randint(data_range[0], data_range[1]+1, 10)\n                        for i in range(num_labels)},\n                        index=np.arange(1, 11))\n\n    data.plot(kind='bar', stacked=True, colormap='Dark2')\n    fig = plt.gcf()\n    return fig", "compilation_passed": true, "time": 0.0019960403442382812, "tests_passed": true, "error": null}
{"code": "data = []\n\n    for i in range(num_labels):\n        label = f\"Label {i+1}\"\n        rand_val = np.random.random()\n        data.append((label, rand_val))\n\n    df = pd.DataFrame(data, columns=[\"Category\", \"Values\"])\n\n    fig, ax = plt.subplots()\n    df.plot.barh(x=\"Category\", y=\"Values\", stacked=True, ax=ax)\n\n    return fig", "compilation_passed": true, "time": 0.0018889904022216797, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame()\n\n    for i in range(num_labels):\n        df[f\"label{i + 1}\"] = np.random.uniform(*data_range, 1000)\n\n    df.plot.bar(stacked=True)\n\n    fig, ax = plt.subplots()\n\n    for i in range(num_labels):\n        plt.fill_between(\n            df.index,\n            (df[f\"label{i + 1}\"].values - df[f\"label{i + 1}\"].values[0]).cumsum()[:-1],\n            (df[f\"label{i + 1}\"].values - df[f\"label{i + 1}\"].values[0]).cumsum(),\n            alpha=0.2,\n            color=np.random.rand(3,),\n            label=f\"Label {i + 1}\",\n        )\n\n    # Add a legend for each label with a different color\n    for i in range(num_labels):\n        ax.plot([],", "compilation_passed": false, "time": 0.0002942085266113281, "tests_passed": false, "error": "SyntaxError"}
{"code": "df = pd.DataFrame({f\"Label {i}\": np.random.uniform(low=data_range[0], high=data_range[1], size=10) for i in range(num_labels)})\n    ax = df.plot.barh(stacked=True)\n    plt.show()\n    return ax.figure", "compilation_passed": true, "time": 0.0019791126251220703, "tests_passed": true, "error": null}
{"code": "data_series = [np.random.uniform(*data_range) for _ in range(num_labels)]\n\n    data = pd.Series(data_series, name='Values')\n\n    fig, ax = plt.subplots()\n    data.plot.bar(ax=ax, rot=0, stacked=True)\n    ax.set_title(f'Stacked Bar Chart for {num_labels} Labels')\n\n    return fig", "compilation_passed": true, "time": 0.002830028533935547, "tests_passed": false, "error": "IndexError"}
{"code": "data = np.random.randint(data_range[0], data_range[1] + 1, num_labels)\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.barh(range(len(data)), data, color=np.random.rand(len(data), 3))\n    ax.set_yticks(range(len(data)))\n    ax.set_yticklabels([f'label {i+1}' for i in range(len(data))])\n    ax.set_xlabel('Data')\n    ax.set_title('Stacked Bar Chart')\n    return fig", "compilation_passed": true, "time": 0.0027658939361572266, "tests_passed": true, "error": null}
{"code": "# Generate random data for each label in a DataFrame\n    data = pd.DataFrame(np.random.randint(*data_range, (5, num_labels)),\n                        columns=list('ABCDE'[:num_labels]))\n    # Calculate cumulative sum for each label\n    data.iloc[:, :-1] = data.iloc[:, :-1].cumsum(axis=1)\n    # Convert the DataFrame to a numpy array\n    data_array = data.values\n\n    # Initialize a Figure object and Axes object for the bar chart\n    fig, ax = plt.subplots(figsize=(7, 7))\n    # Set the y-axis limits\n    ax.set_ylim(0, np.ceil(data.sum().max()))\n    # Set the x-axis ticks\n    ax.set_xticks(np.arange(num_labels))\n    # Set the x-axis labels\n    ax.set_xticklabels(data.columns, size=15)\n    # Set the y-axis labels\n    ax.set_yticklabels(np.arange(", "compilation_passed": false, "time": 0.0002491474151611328, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Generate random data for each label and within the specified range\n    df = pd.DataFrame({f'label_{i}': np.random.uniform(low=data_range[0], high=data_range[1], size=num_labels)\n                       for i in range(1, num_labels + 1)})\n    # Set the index for easier data representation\n    df.index = ['label' + str(i) for i in range(1, num_labels + 1)]\n    # Create stacked bar chart\n    ax = df.plot.barh(stacked=True)\n    return ax.get_figure()", "compilation_passed": true, "time": 0.0018780231475830078, "tests_passed": true, "error": null}
{"code": "labels = [\"label_{}\".format(i) for i in range(num_labels)]  # Create labels from 0 to num_labels - 1\n    data = [np.random.randint(data_range[0], data_range[1]) for _ in range(num_labels)]  # Generate random data\n    df = pd.DataFrame([data], columns=labels)  # Create a pandas DataFrame with generated data and labels\n\n    # Plot a stacked bar chart with data\n    plt.stackplot(df.index, df.values.T)\n    plt.xlabel(\"Label\")\n    plt.ylabel(\"Data\")\n    fig = plt.gcf()  # Get the current figure\n    return fig", "compilation_passed": true, "time": 0.006269931793212891, "tests_passed": true, "error": null}
{"code": "# Create a Pandas DataFrame with random numeric data for each label and in the specified data range.\n    df = pd.DataFrame(\n        {f'label{i}': np.random.uniform(*data_range, num_labels) for i in range(1, num_labels + 1)}\n    )\n    # Sort the DataFrame in ascending order based on the first label ('label1').\n    df = df.sort_values('label1')\n    # Calculate the cumulative sums of the data for each label in the DataFrame.\n    df['cumsum'] = df.sum(axis=1).cumsum()\n    # Create a bar plot with stacked bars using the cumulative sums and labels.\n    ax = df['cumsum'].plot(kind='bar', stacked=True)\n    for i, bar in enumerate(ax.containers):\n        ax.bar_label(bar, label_type='edge')\n    # Set the x-axis tick labels to empty to avoid any label repetition.\n    ax.set_xticklabels([])\n    # Create a Figure object from the current Matplotlib axes.\n    fig =", "compilation_passed": false, "time": 0.00022292137145996094, "tests_passed": false, "error": "SyntaxError"}
{"code": "data_list = [np.round(np.random.uniform(*data_range, num_labels), 2) for _ in range(num_labels)]\n    data_df = pd.DataFrame(data_list, columns=list(range(num_labels)))\n\n    fig, ax = plt.subplots()\n    data_df.plot.barh(ax=ax, stacked=True)\n\n    ax.legend(loc=(1.01, 0))\n    ax.set_title(f\"Stacked bar chart with {num_labels} categories\")\n    fig.tight_layout()\n    return fig", "compilation_passed": true, "time": 0.0022902488708496094, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame({\"category\": np.arange(num_labels)})\n    for i in range(num_labels):\n        df[\"data\" + str(i)] = np.round(np.random.uniform(data_range[0], data_range[1], num_labels), 2)\n    df = df.melt(\"category\", var_name=\"variable\", value_name=\"data\")\n    fig, ax = plt.subplots(figsize=(10, 8))\n    df.groupby(\"variable\").size()\n    ax = sns.barplot(x=\"category\", y=\"data\", hue=\"variable\", data=df)\n    plt.setp(ax.get_legend().get_texts(), fontsize=\"14\")  # Needed to draw legend text as larger as we have a lot of labels\n    ax.set_ylabel(\"Data\")\n    ax.set_xlabel(f\"Labels (between {data_range[0]} and {data_range[1]})", "compilation_passed": false, "time": 0.00011110305786132812, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Create a range of labels with integers from 0 to num_labels - 1\n    labels = range(num_labels)\n\n    # Generate a random number of values for each label within the specified data range\n    values = np.random.randint(*data_range, size=len(labels))\n\n    # Create a dictionary of labels and corresponding values\n    data = dict(zip(labels, values))\n\n    # Create a DataFrame with the data and calculate cumulative sums for the stacked bars\n    df = pd.DataFrame([data])\n    df = df.assign(**{f\"{label}_cum\": df[label] for label in labels})\n\n    # Create a new figure for the stacked bar chart\n    fig, ax = plt.subplots(figsize=(10, 5))\n\n    # Set the width for each bar\n    bar_width = 0.4\n\n    # Loop through the labels, plot the bars, and create the stacked bars\n    for i, label in enumerate(labels):\n        # Set the positions of each bar based on the current label and bar width\n        pos = np.arange(i,", "compilation_passed": false, "time": 0.00021600723266601562, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Generate random data\n    data = pd.DataFrame({f\"label{i}\": np.random.random(size=num_labels) for i in range(1, 6)})\n\n    # Create stacked bar chart\n    fig, ax = plt.subplots()\n    data.plot.barh(stacked=True, ax=ax, xlim=data_range)\n\n    return fig", "compilation_passed": true, "time": 0.002315044403076172, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame()\n    df['labels'] = np.arange(num_labels)\n    df[df.columns[1:]] = np.random.randint(*data_range, size=(num_labels, df.shape[1]-1))\n    fig, ax = plt.subplots(figsize=(10, 8))\n    colors = plt.get_cmap('viridis', num_labels)\n    for i in range(1, len(df.columns)):\n        ax.bar(df['labels'], df[df.columns[i]], bottom=np.sum(df[df.columns[1:i]], axis=1), label=df.columns[i],\n               color=colors(i), edgecolor=colors(i), linewidth=3)\n    ax.set_title(f\"Stacked Bars for {num_labels} Labels\", fontsize=20)\n    ax.set_xlabel(\"Label\", fontsize=16)\n    ax.set_ylabel(\"Values\", fontsize=16)\n    ax.", "compilation_passed": false, "time": 0.0002918243408203125, "tests_passed": false, "error": "SyntaxError"}
{"code": "df = pd.DataFrame()\n\n    # Generating a random number for each label\n    for i in range(num_labels):\n        df[f\"label{i + 1}\"] = np.random.randint(data_range[0], data_range[1] + 1, size=5)\n\n    # Plotting the stacked bar chart\n    df.plot(kind=\"bar\", stacked=True, title=\"Stacked Bar Chart\")\n    fig = plt.gcf()\n    return fig", "compilation_passed": true, "time": 0.002251148223876953, "tests_passed": true, "error": null}
{"code": "# Initialize an empty list to store the data\n    data = []\n\n    # Generate random numeric data for each category within the specified range\n    for _ in range(num_labels):\n        # Append a new DataFrame to the list with one column of random values within the specified range\n        data.append(pd.DataFrame(np.random.uniform(low=data_range[0], high=data_range[1], size=num_labels)))\n\n    # Concatenate all the DataFrames in the list into one DataFrame\n    data = pd.concat(data, axis=1)\n\n    # Initialize a Figure object and an Axes object for the stacked bar chart\n    fig, ax = plt.subplots()\n\n    # Iterate over the columns (labels) in the DataFrame\n    for col in data.columns:\n        # Generate a new bar for each column (label), with the values as heights and the index as x-locations\n        ax.bar(data.index, data[col], bottom=data[col].cumsum().shift(1, fill_value=0), label=col", "compilation_passed": false, "time": 0.00022172927856445312, "tests_passed": false, "error": "SyntaxError"}
{"code": "data = pd.DataFrame(np.random.uniform(data_range[0], data_range[1], size=(1, num_labels)))\n\n    fig = plt.figure()\n    ax = fig.subplots()\n    ax.barh(data.index, data.iloc[0].values,\n            color=np.tile(['tab:blue', 'tab:orange', 'tab:green', 'tab:red', 'tab:purple'],\n                          1 + num_labels // len(['tab:blue', 'tab:orange', 'tab:green', 'tab:red', 'tab:purple']))\n            [:num_labels])\n    ax.set_yticks(data.index)\n    ax.set_yticklabels(data.index + 1)\n\n    return fig", "compilation_passed": true, "time": 0.0162661075592041, "tests_passed": true, "error": null}
{"code": "data_points = np.random.uniform(data_range[0], data_range[1], num_labels)\n    data = [data_points for _ in range(num_labels)]\n    df = pd.DataFrame(data)\n\n    fig, ax = plt.subplots()\n    df.plot(kind='barh', stacked=True, ax=ax, width=0.9)\n\n    return fig", "compilation_passed": true, "time": 0.0018911361694335938, "tests_passed": true, "error": null}
{"code": "labels = ['label1', 'label2', 'label3', 'label4', 'label5']\n    if num_labels > 0 and num_labels < 6:\n        labels = labels[:num_labels]\n    else:\n        raise ValueError('Number of labels must be between 1 and 5')\n    data = {label: np.random.uniform(data_range[0], data_range[1], 1) for label in labels}\n\n    fig, ax = plt.subplots()\n    ax.bar(labels, data.values(), tick_label=labels)\n    ax.set_xlabel('Labels')\n    ax.set_ylabel('Data')\n    ax.set_title('Stacked Bar Chart')\n\n    return fig", "compilation_passed": true, "time": 0.0015559196472167969, "tests_passed": false, "error": "ValueError"}
{"code": "# Generate random data for the given number of labels and data range\n    df = pd.DataFrame(np.random.randint(*data_range, size=(1, num_labels)))\n\n    # Define the colors for the stacked bars\n    colors = ['red', 'green', 'blue', 'orange', 'purple']\n\n    # Set the figure and axes for the plot\n    fig, ax = plt.subplots(1, 1, figsize=(8, 4))\n\n    # Plot the stacked bar chart\n    df.plot(kind='barh', stacked=True, color=colors, ax=ax)\n\n    # Set the title and axis labels\n    ax.set_title(\"Stacked Bar Chart\")\n    ax.set_xlabel(\"Value\")\n    ax.set_ylabel(\"Category\")\n\n    # Add total values as annotations to each bar\n    for patch in ax.patches:\n        ax.annotate(str(patch.get_width()), (patch.get_x() + patch.get_width() / 2, patch.get_y() +", "compilation_passed": false, "time": 0.00025200843811035156, "tests_passed": false, "error": "SyntaxError"}
