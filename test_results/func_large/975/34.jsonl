{"code": "np.random.seed(seed)\n    return pd.DataFrame(np.random.rand(rows, len(columns)), columns=columns).iloc[:, np.random.permutation(len(columns))]", "compilation_passed": true, "time": 0.0018339157104492188, "tests_passed": true, "error": null}
{"code": "if rows < 0:\n        raise ValueError(f\"'rows' must be >= 0, but {rows} is given\")\n\n    columns = sorted(list(set(columns)))\n\n    if not columns:\n        return pd.DataFrame(columns=[])\n\n    np.random.seed(seed)\n    data = np.random.rand(rows, len(columns))\n    df = pd.DataFrame(data, columns=columns)\n    return df[np.random.permutation(df.columns)]", "compilation_passed": true, "time": 0.0026450157165527344, "tests_passed": true, "error": null}
{"code": "if rows < 0:\n        raise ValueError(\"Number of rows cannot be negative\")\n    if not isinstance(rows, int):\n        raise TypeError(\"Number of rows should be of integer type\")\n\n    columns = sorted(np.unique(columns))\n    rng = np.random.default_rng(seed=seed)\n    return pd.DataFrame(rng.random((rows, len(columns))), columns=columns)", "compilation_passed": true, "time": 0.001383066177368164, "tests_passed": true, "error": null}
{"code": "columns = list(set(columns))  # deduplicate\n    columns.sort()  # sort in a ascending order\n    np.random.seed(seed)  # set seed for reproducibility\n    df = pd.DataFrame(np.random.rand(rows, len(columns)), columns=columns)\n    return df[np.random.permutation(df.columns)]", "compilation_passed": true, "time": 0.00232696533203125, "tests_passed": true, "error": null}
{"code": "# Validate arguments\n    if rows < 0:\n        raise ValueError(\"rows must not be negative.\")\n    if len(columns) == 0:\n        return pd.DataFrame()\n    if len(set(columns)) != len(columns):\n        columns = pd.unique(columns).tolist()\n        columns.sort()\n    np.random.seed(seed)\n    arr = np.random.rand(rows, len(columns))\n    return pd.DataFrame(arr, columns=columns)", "compilation_passed": true, "time": 0.0013849735260009766, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    assert rows >= 0, f\"Invalid argument 'rows': {rows} (should not be negative).\"\n    assert isinstance(rows, int), (\n        f\"Invalid argument 'rows': {rows} (should be an integer value).\"\n    )\n    columns = list(pd.Series(columns).drop_duplicates().sort_values())\n    data = pd.DataFrame(np.random.rand(rows, len(columns)), columns=columns)\n    np.random.shuffle(data.columns)\n    return data", "compilation_passed": true, "time": 0.001238107681274414, "tests_passed": false, "error": "TypeError"}
{"code": "# Make sure `rows` is a valid integer.\n    if not isinstance(rows, int):\n        raise TypeError(f\"`rows` must be integer, not {type(rows)}\")\n\n    if rows < 0:\n        raise ValueError(\"`rows` must not be negative\")\n\n    # Make sure `columns` is a valid list of strings.\n    if not isinstance(columns, list):\n        raise TypeError(f\"`columns` must be list of strings, not {type(columns)}\")\n\n    if any(not isinstance(x, str) for x in columns):\n        raise TypeError(\"`columns` must be list of strings\")\n\n    if not columns:\n        return pd.DataFrame()\n\n    # Make `columns` unique and in the ascending order.\n    columns = pd.Series(columns)\n    columns = columns[columns.duplicated()].unique()\n\n    if not columns.empty:\n        print(\n            f\"Warning: Column names should be unique and sorted in the ascending order.\\n\"\n            f\"Repeated columns will be deduplicated", "compilation_passed": false, "time": 0.00010085105895996094, "tests_passed": false, "error": "SyntaxError"}
{"code": "if rows < 0:\n        raise ValueError(\"The number of rows must be non-negative!\")\n    elif rows == 0:\n        return pd.DataFrame()\n\n    np.random.seed(seed)\n\n    df = pd.DataFrame(np.random.rand(rows, len(columns)))\n    df.columns = pd.Series(columns).drop_duplicates()\n    df = df.sort_index(axis=1)\n    df = df[np.random.permutation(df.columns)]\n\n    return df", "compilation_passed": true, "time": 0.003386259078979492, "tests_passed": false, "error": "ValueError"}
{"code": "# Check if the number of rows is valid\n    if rows < 0:\n        raise ValueError(\"The number of rows cannot be negative.\")\n\n    # Remove repeated columns and sort them in ascending order\n    columns = sorted(set(columns), key=columns.index)\n\n    # Generate a random DataFrame with specified columns and seed\n    df = pd.DataFrame(np.random.rand(rows, len(columns)), columns=columns)\n\n    # Shuffle the columns randomly\n    np.random.seed(seed)\n    shuffled_columns = list(np.random.choice(df.columns, size=len(df.columns), replace=False))\n\n    return df[shuffled_columns]", "compilation_passed": true, "time": 0.0016009807586669922, "tests_passed": true, "error": null}
{"code": "import numpy as np\n\n    np.random.seed(seed)\n\n    # deduplicate columns\n    columns = list(sorted(set(columns)))\n\n    # create random data as a numpy matrix\n    data = np.random.rand(rows, len(columns))\n    # create a pandas DataFrame from the matrix\n    df = pd.DataFrame(data, columns=columns)\n    # shuffle the columns\n    df = df[np.random.permutation(df.columns)]\n\n    return df", "compilation_passed": true, "time": 0.0023202896118164062, "tests_passed": true, "error": null}
{"code": "assert (rows >= 0), \"The number of rows must not be negative\"\n    assert isinstance(rows, int), \"The number of rows must be an integer\"\n    assert rows == abs(rows), \"The number of rows must not be negative\"\n    assert isinstance(columns, list), \"The columns argument should be a list\"\n    for i in columns:\n        assert isinstance(i, str), \"The columns argument should be a list of strings\"\n    for i in range(1, len(columns)):\n        assert columns[i] > columns[i - 1], \"The columns argument should be a sorted list\"\n    np.random.seed(seed)\n    data = pd.DataFrame(np.random.rand(rows, len(columns)), columns=columns)\n    return data", "compilation_passed": true, "time": 0.0013320446014404297, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n\n    if rows < 0:\n        raise ValueError(\"The number of rows must not be negative.\")\n    if not columns:\n        return pd.DataFrame()\n    df = pd.DataFrame(np.random.rand(rows, len(columns)), columns=columns)\n    df = df.rename(columns={col: col.lower().capitalize() for col in df.columns})\n    return df[[col.lower().capitalize() for col in sorted(df.columns)]]", "compilation_passed": true, "time": 0.0030748844146728516, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    if len(columns) != len(set(columns)):\n        columns = pd.unique(columns)\n    if columns:\n        columns.sort()\n        df = pd.DataFrame(np.random.rand(rows, len(columns)), columns=columns)\n        return df[np.random.permutation(df.columns)]\n    else:\n        df = pd.DataFrame()\n        return df", "compilation_passed": true, "time": 0.002214193344116211, "tests_passed": false, "error": "ValueError"}
{"code": "if rows < 0:\n        raise ValueError(\"The number of rows must not be negative!\")\n\n    # remove duplicate columns, while preserving order of the columns\n    columns = sorted(set(columns), key=lambda x: columns.index(x))\n    # columns is empty\n    if len(columns) == 0:\n        return pd.DataFrame(np.empty((0, 0)))\n\n    # set the seed to make the function reproducible\n    np.random.seed(seed)\n    # create a random DataFrame with the specified number of rows\n    # and the columns in the original order\n    df = pd.DataFrame(np.random.rand(rows, len(columns)), columns=columns)\n\n    # shuffle the columns and return the DataFrame\n    df = df[np.random.permutation(df.columns)]\n    return df", "compilation_passed": true, "time": 0.0022437572479248047, "tests_passed": true, "error": null}
{"code": "if rows < 0:\n        raise ValueError(\"'rows' cannot be negative.\")\n\n    # De-duplicate and sort columns\n    # Use numpy for faster sorting\n    np_columns = np.array(columns)\n    unique_columns = np.unique(np_columns)\n    unique_columns.sort()\n\n    # Return empty DataFrame if 'columns' is empty\n    if len(unique_columns) == 0:\n        return pd.DataFrame(index=range(rows), columns=[])\n\n    # Get shuffled columns\n    rng = np.random.default_rng(seed=seed)\n    shuffled_columns = rng.choice(unique_columns, unique_columns.shape, replace=False)\n\n    # Create DataFrame\n    df = pd.DataFrame(data=rng.random(size=(rows, len(unique_columns))), columns=unique_columns)\n\n    return df[shuffled_columns]", "compilation_passed": true, "time": 0.0015337467193603516, "tests_passed": true, "error": null}
{"code": "# validate columns parameter\n    if not isinstance(columns, list):\n        raise ValueError(\"columns parameter must be a list.\")\n    elif columns:\n        for col in columns:\n            if not isinstance(col, str):\n                raise ValueError(\n                    \"All columns must be strings. Found: {}\".format(col)\n                )\n        columns = sorted(set(columns))\n    else:\n        return pd.DataFrame(index=range(rows))\n    # set seed\n    np.random.seed(seed)\n    # generate rows\n    if rows == 0:\n        return pd.DataFrame(columns=columns)\n    # generate dataframe\n    return (\n        pd.DataFrame(np.random.rand(rows, len(columns)), columns=columns)\n        .sort_values(columns)\n        .reset_index(drop=True)\n    )", "compilation_passed": true, "time": 0.0020270347595214844, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    if not columns:\n        return pd.DataFrame()\n\n    return pd.DataFrame(data=np.random.rand(rows, len(columns)), columns=columns).loc[:, sorted(list(dict.fromkeys(columns)))]", "compilation_passed": true, "time": 0.002201080322265625, "tests_passed": true, "error": null}
{"code": "if rows < 0:\n        raise ValueError(\"The number of rows should be >=0.\")\n    if len(columns) == 0:\n        return pd.DataFrame()\n    if len(columns) != len(set(columns)):\n        columns = pd.Series(columns).drop_duplicates().sort_values().tolist()\n\n    np.random.seed(seed)\n    data = np.random.rand(rows, len(columns))\n    df = pd.DataFrame(data, columns=columns)\n\n    np.random.shuffle(columns)\n    df = df[columns]\n\n    return df", "compilation_passed": true, "time": 0.002414703369140625, "tests_passed": true, "error": null}
{"code": "if rows < 0:\n        raise ValueError(\"rows must be non-negative.\")\n\n    columns = sorted(list(set(columns)))\n    if not columns:\n        return pd.DataFrame()\n\n    np.random.seed(seed)\n    data = np.random.rand(rows, len(columns))\n    columns_shuffled = np.random.choice(columns, len(columns))\n    return pd.DataFrame(data, columns=columns_shuffled)", "compilation_passed": true, "time": 0.0011479854583740234, "tests_passed": false, "error": "KeyError"}
{"code": "np.random.seed(seed)\n    df = pd.DataFrame(np.random.rand(rows, len(columns)), columns=columns)\n    df = df.rename(columns=lambda x: x.strip())\n    df = df[sorted(df.columns.drop_duplicates())]\n    return df", "compilation_passed": true, "time": 0.002531766891479492, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    columns = sorted(set(columns))\n    data = np.random.rand(rows, len(columns))\n    return pd.DataFrame(data, columns=columns)", "compilation_passed": true, "time": 0.0013430118560791016, "tests_passed": true, "error": null}
{"code": "# Check the input arguments for errors.\n    if not isinstance(rows, int):\n        raise TypeError(\n            \"The 'rows' parameter must be of type int, \"\n            + f\"not {type(rows).__name__}\"\n        )\n    if not isinstance(columns, list):\n        raise TypeError(\n            \"The 'columns' parameter must be of type list, \"\n            + f\"not {type(columns).__name__}\"\n        )\n    if not isinstance(seed, int):\n        raise TypeError(\n            \"The 'seed' parameter must be of type int, \"\n            + f\"not {type(seed).__name__}\"\n        )\n    if rows < 0:\n        raise ValueError(\"The 'rows' parameter must not be negative\")\n    # Process the input arguments.\n    np.random.seed(seed)\n    columns = list(sorted(set(columns)))\n    df = pd.DataFrame(np.random.rand(rows, len(columns)), columns=columns)\n    # Return a random DataFrame with shuffled columns.\n    np", "compilation_passed": true, "time": 0.0010230541229248047, "tests_passed": false, "error": "AttributeError"}
{"code": "np.random.seed(seed)\n    columns = sorted(set(columns))\n    return pd.DataFrame(np.random.rand(rows, len(columns)), columns=columns)", "compilation_passed": true, "time": 0.0012362003326416016, "tests_passed": true, "error": null}
{"code": "# Set random seed\n    np.random.seed(seed)\n    # Validate inputs\n    assert (\n        isinstance(rows, int) and rows >= 0\n    ), f\"rows must be a non-negative integer, but it is {rows}.\"\n    assert isinstance(columns, list), \"columns must be a list.\"\n    # Dedupe columns\n    columns = pd.unique(columns)\n    # Generate data\n    data = np.random.rand(rows, len(columns))\n    df = pd.DataFrame(data=data, columns=columns)\n    # Shuffle the columns\n    df = df[[col for col in columns if col in df.columns]]\n    return df", "compilation_passed": true, "time": 0.002183198928833008, "tests_passed": true, "error": null}
{"code": "# validate rows\n    if not isinstance(rows, int):\n        raise ValueError(\"Number of rows must be an integer.\")\n\n    if rows < 0:\n        raise ValueError(\"Number of rows must be non-negative.\")\n\n    # validate columns\n    if not isinstance(columns, list):\n        raise ValueError(\"Columns must be a list of strings.\")\n\n    columns = sorted(set(columns))\n\n    # create the DataFrame\n    df = pd.DataFrame(np.random.rand(rows, len(columns)), columns=columns)\n\n    # shuffle the columns\n    np.random.seed(seed)\n    shuffled_cols = np.random.permutation(df.columns)\n    df = df[shuffled_cols]\n\n    return df", "compilation_passed": true, "time": 0.0014591217041015625, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    columns = np.sort(np.unique(columns))\n\n    data = np.random.rand(rows, len(columns))\n    return pd.DataFrame(data, columns=columns)", "compilation_passed": true, "time": 0.001348733901977539, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n\n    df = pd.DataFrame(np.random.rand(rows, len(columns)))\n\n    df.columns = pd.Index(columns).drop_duplicates().sort_values()\n\n    return df[[column for column in columns if column in df.columns]]", "compilation_passed": true, "time": 0.0024061203002929688, "tests_passed": false, "error": "ValueError"}
{"code": "# Validate parameters\n    if rows < 0:\n        raise ValueError(\"The number of rows must not be negative.\")\n    if not columns:\n        return pd.DataFrame()\n\n    # Set random seed\n    np.random.seed(seed)\n\n    # Deduplicate columns in a case and spacing sensitive way\n    unique_columns = []\n    for col in columns:\n        if all(col != unique_col for unique_col in unique_columns):\n            unique_columns.append(col)\n\n    # Create the DataFrame with random data\n    data = np.random.rand(rows, len(unique_columns))\n    df = pd.DataFrame(data, columns=unique_columns)\n\n    # Shuffle the columns\n    shuffled_columns = np.random.permutation(len(unique_columns))\n    df = df.iloc[:, shuffled_columns]\n\n    return df", "compilation_passed": true, "time": 0.0020618438720703125, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    columns = set(columns)\n    if len(columns) == 0:\n        return pd.DataFrame()\n    columns = sorted(list(columns))\n    df = pd.DataFrame(np.random.rand(rows, len(columns)), columns=columns)\n    df = df.sample(frac=1).reset_index(drop=True)\n    return df", "compilation_passed": true, "time": 0.00131988525390625, "tests_passed": true, "error": null}
{"code": "if rows < 0:\n        raise ValueError(\"The number of rows must not be negative\")\n\n    df = pd.DataFrame(np.random.random((rows, len(columns))), columns=columns)\n    return df[sorted(list(set(columns)))]", "compilation_passed": true, "time": 0.0012888908386230469, "tests_passed": true, "error": null}
