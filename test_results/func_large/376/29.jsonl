{"code": "# Split the text into words, convert to lowercase, remove punctuation marks, and remove stopwords\n    words = [\n        word.lower() for word in re.findall(r'\\b\\w+\\b', text)\n        if word.lower() not in STOPWORDS\n    ]\n    return dict(Counter(words))", "compilation_passed": true, "time": 0.0006952285766601562, "tests_passed": true, "error": null}
{"code": "# Split text into words and remove punctuation\n    words = [word.lower().rstrip('.,') for word in text.split()]\n\n    # Remove stopwords\n    words = [word for word in words if word not in STOPWORDS]\n\n    # Count word frequencies using Counter\n    word_counts = Counter(words)\n\n    # Return the word counts dictionary\n    return dict(word_counts)", "compilation_passed": true, "time": 0.000881195068359375, "tests_passed": true, "error": null}
{"code": "words = re.findall(r'\\b\\w+\\b', text.lower())  # find all words with word boundaries ('\\b') and convert to lowercase\n    words = [word for word in words if word not in STOPWORDS]  # remove stopwords\n    word_count = Counter(words)  # count occurrences using Counter\n    return dict(word_count)", "compilation_passed": true, "time": 0.0006840229034423828, "tests_passed": true, "error": null}
{"code": "# Clean the text by removing punctuation, common stopwords, and converting to lowercase\n    words = re.findall(r'\\b\\w+\\b', text)\n    words = [word.lower() for word in words if word.lower() not in STOPWORDS]\n\n    # Calculate word frequency using Counter\n    word_freq = Counter(words)\n\n    return word_freq", "compilation_passed": true, "time": 0.0006761550903320312, "tests_passed": true, "error": null}
{"code": "text = text.lower().strip()\n    text = re.sub(r'[^\\w\\s]', '', text)\n    words = nltk.word_tokenize(text)\n    words = [word for word in words if word not in STOPWORDS]\n    word_counts = Counter(words)\n    return {word: count for word, count in word_counts.items()}", "compilation_passed": true, "time": 0.0011119842529296875, "tests_passed": false, "error": ""}
{"code": "words = re.findall(r'\\b\\w+\\b', text.lower())  # Find words and convert to lowercase\n    words = [w for w in words if w not in STOPWORDS and re.match(r'^[a-z]+$', w)]  # Remove stopwords and non-alphabetic characters\n    word_counts = Counter(words)  # Count word occurrences\n    return dict(word_counts)", "compilation_passed": true, "time": 0.0007796287536621094, "tests_passed": true, "error": null}
{"code": "text = re.sub(r\"[^a-zA-Z ]\", \"\", text)\n    text = text.lower()\n    words = text.split()\n    cleaned_words = [word for word in words if word not in STOPWORDS]\n    freq_counter = Counter(cleaned_words)\n    return dict(freq_counter)", "compilation_passed": true, "time": 0.0008656978607177734, "tests_passed": true, "error": null}
{"code": "# Convert text to lowercase\n    text = text.lower()\n\n    # Remove punctuation marks\n    text = re.sub(r'[^\\w\\s]', '', text)\n\n    # Split text into words\n    words = text.split()\n\n    # Remove common stopwords\n    words = [word for word in words if word not in STOPWORDS]\n\n    # Count word frequencies\n    word_freq = Counter(words)\n\n    # Return word frequencies as a dictionary\n    return dict(word_freq)", "compilation_passed": true, "time": 0.0008780956268310547, "tests_passed": true, "error": null}
{"code": "# Convert the text to lowercase, remove punctuation, and remove common stopwords\n    text = text.lower()\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # Filter out stopwords\n    words = [word for word in words if word not in STOPWORDS]\n\n    # Count the frequency of each word using Counter\n    word_counts = Counter(words)\n\n    # Return the word frequencies\n    return dict(word_counts)", "compilation_passed": true, "time": 0.0006740093231201172, "tests_passed": true, "error": null}
{"code": "# Split the text into words\n    words = re.sub(r'[^\\w\\s]', '', text.lower()).split()\n\n    # Remove stopwords and punctuation\n    words = [word for word in words if word not in STOPWORDS and word.isalnum()]\n\n    # Count the frequency of each word\n    word_counts = Counter(words)\n\n    # Return the frequency dictionary\n    return dict(word_counts)", "compilation_passed": true, "time": 0.0008318424224853516, "tests_passed": true, "error": null}
{"code": "# Tokenization: Split the text into words\n    words = nltk.word_tokenize(text)\n\n    # Convert words to lowercase\n    lower_words = [word.lower() for word in words]\n\n    # Remove punctuation marks\n    pattern = r\"\\b[^\\w\\s]+\\b\"\n    words_without_punct = [re.sub(pattern, \"\", word) for word in lower_words]\n\n    # Remove stopwords\n    filtered_words = [word for word in words_without_punct if word not in STOPWORDS]\n\n    # Count the frequency of each word\n    word_counts = Counter(filtered_words)\n\n    # Return the dictionary with words as keys and their frequencies as values\n    return dict(word_counts)", "compilation_passed": true, "time": 0.001049041748046875, "tests_passed": false, "error": ""}
{"code": "# Convert the text to lowercase, split into words, and remove punctuation\n    words = re.findall(r'\\w+', text.lower())\n\n    # Remove common stopwords (provided as a constant)\n    words = [word for word in words if word not in STOPWORDS]\n\n    # Calculate the frequency of each word\n    word_counts = Counter(words)\n\n    return dict(word_counts)", "compilation_passed": true, "time": 0.0006530284881591797, "tests_passed": true, "error": null}
{"code": "# Split text into words\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # Convert words to lowercase and remove stopwords and punctuation marks\n    words = [word.lower() for word in words if word.isalpha() and word.lower() not in STOPWORDS]\n\n    # Count frequency of each word\n    word_freq = Counter(words)\n\n    # Remove words with frequency 1\n    word_freq = {word: freq for word, freq in word_freq.items() if freq != 1}\n\n    return word_freq", "compilation_passed": true, "time": 0.0007109642028808594, "tests_passed": true, "error": null}
{"code": "# Tokenize the input text into words\n    words = nltk.word_tokenize(text)\n\n    # Convert the words to lowercase\n    lower_words = [word.lower() for word in words]\n\n    # Remove punctuation marks\n    cleaned_words = [re.sub(r'[^\\w\\s]', '', word) for word in lower_words]\n\n    # Remove common stopwords\n    filtered_words = [word for word in cleaned_words if word not in STOPWORDS]\n\n    # Count the frequency of each word\n    word_counter = Counter(filtered_words)\n\n    # Return the frequency dictionary\n    return dict(word_counter)", "compilation_passed": true, "time": 0.0010371208190917969, "tests_passed": false, "error": ""}
{"code": "# Split the text into words, convert to lowercase, remove punctuation, and filter out stopwords\n    words = [re.sub(r'[^\\w\\s]', '', word.lower()) for word in text.split() if word.lower() not in STOPWORDS]\n\n    # Count the frequency of each word\n    word_counts = Counter(words)\n\n    return dict(word_counts)", "compilation_passed": true, "time": 0.0008411407470703125, "tests_passed": true, "error": null}
{"code": "# Convert text to lowercase and tokenize it into words\n    words = text.lower().split()\n\n    # Remove punctuation and stopwords from words\n    words = [word.strip(\",.;:-!?()[]'\") for word in words]\n    words = [word for word in words if word and word not in STOPWORDS]\n\n    # Count the frequency of each word using Counter\n    word_freq = Counter(words)\n\n    return word_freq", "compilation_passed": true, "time": 0.0007169246673583984, "tests_passed": true, "error": null}
{"code": "# Split the text into words\n    words = text.split()\n\n    # Convert words to lowercase, remove punctuation, and remove stopwords\n    cleaned_words = [\n        word.lower() for word in words if word.isalpha() and word.lower() not in STOPWORDS\n    ]\n\n    # Count the frequency of each word\n    word_count = Counter(cleaned_words)\n\n    # Return the dictionary of word frequencies\n    return dict(word_count)", "compilation_passed": true, "time": 0.0007498264312744141, "tests_passed": true, "error": null}
{"code": "# Convert text to lowercase and split into words\n    words = text.lower().split()\n    # Remove non-alphanumeric characters and stopwords\n    cleaned_words = [re.sub(r'\\W+', '', word) for word in words if word not in STOPWORDS]\n    # Count word frequencies using Counter\n    word_counts = Counter(cleaned_words)\n    # Remove empty keys\n    word_counts = {k: v for k, v in word_counts.items() if k}\n    return word_counts", "compilation_passed": true, "time": 0.0008480548858642578, "tests_passed": true, "error": null}
{"code": "# Split text into words\n    words = text.split()\n\n    # Convert words to lowercase\n    words = [word.lower() for word in words]\n\n    # Remove punctuation marks and common stopwords\n    words = [word for word in words if word not in STOPWORDS and re.match(r'\\w+', word)]\n\n    # Calculate word frequencies\n    word_freq = Counter(words)\n\n    return dict(word_freq)", "compilation_passed": true, "time": 0.000766754150390625, "tests_passed": true, "error": null}
{"code": "# Convert text to lowercase, remove punctuation, and remove stopwords\n    cleaned_text = ' '.join(re.findall(r'\\b[a-zA-Z]+\\b', text.lower()))\n    words = [word for word in cleaned_text.split() if word not in STOPWORDS]\n\n    # Count word frequencies using Counter\n    word_counts = Counter(words)\n\n    # Convert word_counts to a dictionary and return it\n    return dict(word_counts)", "compilation_passed": true, "time": 0.0008549690246582031, "tests_passed": true, "error": null}
{"code": "# Convert the text to lowercase\n    lower_text = text.lower()\n\n    # Remove punctuation marks and common stopwords\n    tokens = [token for token in nltk.word_tokenize(lower_text) if token not in STOPWORDS and re.match('[a-z]+$', token)]\n\n    # Count the frequency of each word using Counter\n    word_frequencies = Counter(tokens)\n\n    # Return the frequency of each word\n    return dict(word_frequencies)", "compilation_passed": true, "time": 0.0009441375732421875, "tests_passed": false, "error": ""}
{"code": "text = re.sub(r'[^\\w\\s]', '', text)\n    words = [word for word in re.split(r'\\s+', text) if word not in STOPWORDS]\n    return Counter(words)", "compilation_passed": true, "time": 0.0006449222564697266, "tests_passed": true, "error": null}
{"code": "# Remove punctuation marks\n    text = re.sub(r'[^\\w\\s]', '', text)\n\n    # Convert to lowercase, split into words, and remove stopwords\n    words = [word for word in text.lower().split() if word not in STOPWORDS]\n\n    # Count word frequencies\n    word_count = Counter(words)\n\n    return dict(word_count)", "compilation_passed": true, "time": 0.0008921623229980469, "tests_passed": true, "error": null}
{"code": "text = re.sub(r'[^\\w\\s]', '', text.lower())\n    words = [word for word in text.split() if word.lower() not in STOPWORDS]\n    word_counts = Counter(words)\n\n    return dict(word_counts)", "compilation_passed": true, "time": 0.0008509159088134766, "tests_passed": true, "error": null}
{"code": "# Split the text into words\n    words = text.split()\n\n    # Convert words to lowercase\n    words = [word.lower() for word in words]\n\n    # Remove punctuation marks from the words\n    words = [re.sub(r'[^\\w\\s]', '', word) for word in words]\n\n    # Remove common stopwords\n    words = [word for word in words if word not in STOPWORDS]\n\n    # Count the frequency of each word\n    word_count = Counter(words)\n\n    return word_count", "compilation_passed": true, "time": 0.0007379055023193359, "tests_passed": true, "error": null}
{"code": "# Split text into words\n    words = re.findall(r'\\b\\w+\\b', text)\n\n    # Convert words to lowercase\n    words = [word.lower() for word in words]\n\n    # Remove punctuation and stopwords\n    words = [word for word in words if word not in STOPWORDS and re.match(r'\\w+', word)]\n\n    # Count the frequency of words\n    word_counts = Counter(words)\n\n    return dict(word_counts)", "compilation_passed": true, "time": 0.0007679462432861328, "tests_passed": true, "error": null}
{"code": "# Split the text into words\n    words = text.split()\n    # Convert the words to lowercase\n    words = [word.lower() for word in words]\n    # Remove punctuation marks and stopwords\n    words = [word for word in words if word not in STOPWORDS and word not in string.punctuation]\n    # Count the frequency of each word\n    freq = Counter(words)\n    # Return the frequency as a dictionary\n    return dict(freq)", "compilation_passed": true, "time": 0.0006427764892578125, "tests_passed": false, "error": "NameError"}
{"code": "# Clean and process the text\n    words = re.findall(r'\\b\\w+\\b', text.lower())  # Find words using regular expressions and convert to lowercase\n    cleaned_words = [word for word in words if word not in STOPWORDS and len(word) > 1]  # Remove stopwords and short words\n\n    # Count the frequency of each word\n    word_freq = Counter(cleaned_words)\n    word_freq.update(re.findall(r'[a-zA-Z]{2}', text.lower()))  # Update the counter with two-letter sequences\n\n    # Return the resulting dictionary\n    return dict(word_freq)", "compilation_passed": true, "time": 0.0007619857788085938, "tests_passed": true, "error": null}
{"code": "# Preprocess the text by converting to lowercase, removing punctuation, and removing stopwords\n    words = [word.lower() for word in re.sub(r'[^\\w\\s]', '', text).split() if word.lower() not in STOPWORDS]\n\n    # Count the frequency of each word\n    word_counts = Counter(words)\n\n    # Filter out the words that appear only once\n    filtered_word_counts = {word: count for word, count in word_counts.items() if count > 1}\n\n    return filtered_word_counts", "compilation_passed": true, "time": 0.0009479522705078125, "tests_passed": true, "error": null}
{"code": "if not isinstance(text, str):\n        raise ValueError(\"Input must be a string.\")\n\n    text = re.sub(r'[^\\w\\s]', '', text)\n    text = text.lower()\n    words = text.split()\n    filtered_words = [word for word in words if word not in STOPWORDS]\n    word_freq = Counter(filtered_words)\n    return dict(word_freq)", "compilation_passed": true, "time": 0.0008709430694580078, "tests_passed": true, "error": null}
