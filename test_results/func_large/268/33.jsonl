{"code": "# Use OrderedDict to maintain key insertion order\n    result_dict = collections.OrderedDict()\n    for _ in range(n_keys):\n        # Generate a random key\n        key = random.choice(LETTERS)\n        # Generate the values\n        value = list(range(1, n_values + 1))\n        # Add key and value to the dictionary\n        result_dict[key] = value\n    return result_dict", "compilation_passed": true, "time": 0.0008528232574462891, "tests_passed": true, "error": null}
{"code": "random.seed(0)\n    task_dict = collections.defaultdict(list)\n    for i in range(n_keys):\n        key = random.choice(LETTERS)\n        task_dict[key] = [i for i in range(1, n_values + 1)]\n    return dict(task_dict)", "compilation_passed": true, "time": 0.0009779930114746094, "tests_passed": true, "error": null}
{"code": "res = collections.defaultdict(list)\n\n    for _ in range(n_keys):\n        key = random.choice(LETTERS)\n        res[key] = [i for i in range(1, n_values+1)]\n\n    return dict(res)", "compilation_passed": true, "time": 0.0008649826049804688, "tests_passed": true, "error": null}
{"code": "dictionary = collections.defaultdict(list)\n\n    for i in range(n_keys):\n        key = random.choice(LETTERS)\n        dictionary[key].extend([x for x in range(1, n_values+1)])\n\n    return dict(dictionary)", "compilation_passed": true, "time": 0.0010590553283691406, "tests_passed": true, "error": null}
{"code": "letters = LETTERS * (n_keys // len(LETTERS) + 1)\n    letters = random.sample(letters, n_keys)\n    result = {letter: list(range(1, n_values + 1)) for letter in letters}\n    return result", "compilation_passed": true, "time": 0.0008330345153808594, "tests_passed": true, "error": null}
{"code": "# Generate random keys and values\n    keys = random.sample(LETTERS, n_keys)\n    values = [[value for value in range(1, n_values + 1)] for _ in range(n_keys)]\n\n    # Create dictionary with keys and values\n    dictionary = collections.OrderedDict(zip(keys, values))\n\n    return dictionary", "compilation_passed": true, "time": 0.0009350776672363281, "tests_passed": true, "error": null}
{"code": "random.seed(0)\n    random.shuffle(LETTERS)\n    keys = LETTERS[:n_keys]\n\n    # Use defaultdict to easily access lists and append values\n    dictionary = collections.defaultdict(list)\n    for i in range(1, n_values+1):\n        for j in keys:\n            dictionary[j].append(i)\n    return dict(dictionary)", "compilation_passed": true, "time": 0.0010590553283691406, "tests_passed": true, "error": null}
{"code": "# Create a defaultdict with default value being an empty list\n    result_dict = collections.defaultdict(list)\n\n    # Generate the specified number of keys\n    keys = random.sample(LETTERS, n_keys)  # Ensure uniqueness of keys\n\n    # Populate the dictionary with keys and values\n    for key in keys:\n        for value in range(1, n_values + 1):\n            result_dict[key].append(value)\n\n    # Convert the defaultdict to a regular dictionary\n    return dict(result_dict)", "compilation_passed": true, "time": 0.00121307373046875, "tests_passed": true, "error": null}
{"code": "keys = random.sample(LETTERS, n_keys)  # Randomly select n_keys from the list of letters\n    d = collections.defaultdict(list)\n    for k in keys:\n        for v in range(1, n_values+1):  # Values are consecutive integers starting from 1\n            d[k].append(v)\n    return dict(d)", "compilation_passed": true, "time": 0.0010128021240234375, "tests_passed": true, "error": null}
{"code": "# Generate random keys\n    keys = random.choices(LETTERS, k=n_keys)\n\n    # Generate consecutive values for each key\n    values = [list(range(1, n_values+1)) for _ in range(n_keys)]\n\n    # Create dictionary\n    result = dict(zip(keys, values))\n\n    return result", "compilation_passed": true, "time": 0.0008487701416015625, "tests_passed": true, "error": null}
{"code": "result_dict = collections.defaultdict(list)\n    # Generate a list of random keys\n    keys = random.choices(LETTERS, k=n_keys)\n    # Generate a list of consecutive integers\n    values = list(range(1, n_values + 1))\n    # Iterate over the keys and assign values to each key\n    for key in keys:\n        result_dict[key] = values\n    return result_dict", "compilation_passed": true, "time": 0.0007202625274658203, "tests_passed": true, "error": null}
{"code": "# Create an OrderedDict to maintain the order of keys\n    ordered_dict = collections.OrderedDict()\n    # Generate keys randomly from the predefined list\n    keys = random.sample(LETTERS, n_keys)\n    # Iterate through keys and populate the ordered dict with values\n    for i, key in enumerate(keys):\n        ordered_dict[key] = [i + 1 for i in range(n_values)]\n\n    return dict(ordered_dict)", "compilation_passed": true, "time": 0.0009987354278564453, "tests_passed": true, "error": null}
{"code": "# Create a defaultdict with empty list as default value\n    d = collections.defaultdict(list)\n\n    # Iterate through the specified number of keys\n    for i in range(n_keys):\n        # Select a random key from the predefined list of letters\n        random_key = random.choice(LETTERS)\n        # Add a list of values for the key\n        d[random_key] = list(range(1, n_values + 1))\n\n    # Convert the defaultdict to a regular dictionary and return\n    return dict(d)", "compilation_passed": true, "time": 0.0007853507995605469, "tests_passed": true, "error": null}
{"code": "# Generate keys and values as lists\n    keys = random.sample(LETTERS, n_keys)\n    values = list(range(1, n_values + 1))\n\n    # Use collections.defaultdict to create a dictionary with default lists of values\n    d = collections.defaultdict(list)\n\n    # Assign the values to the keys\n    for key in keys:\n        d[key] = values\n\n    # Convert the defaultdict to a regular dictionary\n    return dict(d)", "compilation_passed": true, "time": 0.0007708072662353516, "tests_passed": true, "error": null}
{"code": "d = collections.defaultdict(list)\n    for i in range(n_keys):\n        key = random.choice(LETTERS)\n        d[key].extend([j for j in range(1, n_values+1)])\n    return dict(d)", "compilation_passed": true, "time": 0.0007281303405761719, "tests_passed": true, "error": null}
{"code": "result = collections.defaultdict(list)\n    keys = random.sample(LETTERS, n_keys)\n    for key in keys:\n        result[key] = list(range(1, n_values + 1))\n    return result", "compilation_passed": true, "time": 0.0008249282836914062, "tests_passed": true, "error": null}
{"code": "# Create a defaultdict with default value of []\n    result = collections.defaultdict(list)\n\n    # Generate the keys and values, adding them to the dictionary\n    for i in range(1, n_keys + 1):\n        key = random.choice(LETTERS)  # Randomly select a key from the predefined list\n        value = list(range(1, n_values + 1))\n        result[key] = value\n\n    # Return the dictionary\n    return result", "compilation_passed": true, "time": 0.0007841587066650391, "tests_passed": true, "error": null}
{"code": "dct = {}\n    for _ in range(n_keys):\n        key = random.choice(LETTERS)\n        dct[key] = list(range(1, n_values + 1))\n    return dct", "compilation_passed": true, "time": 0.0008139610290527344, "tests_passed": true, "error": null}
{"code": "# Generate keys and values for the dictionary\n    keys = [random.choice(LETTERS) for _ in range(n_keys)]\n    values = [[i for i in range(1, n_values + 1)] for _ in range(n_keys)]\n\n    # Create a dictionary using a list comprehension and zip() function\n    result = {key: value for key, value in zip(keys, values)}\n    return result", "compilation_passed": true, "time": 0.0008969306945800781, "tests_passed": true, "error": null}
{"code": "dictionary = collections.defaultdict(list)\n\n    # Generate keys and values for the dictionary\n    for i in range(n_keys):\n        key = random.choice(LETTERS)\n        values = list(range(1, n_values + 1))\n        dictionary[key] = values\n\n    return dictionary", "compilation_passed": true, "time": 0.0008299350738525391, "tests_passed": true, "error": null}
{"code": "d = collections.defaultdict(list)\n    for _ in range(n_keys):\n        # Select a random key from the predefined list of letters\n        key = random.choice(LETTERS)\n        d[key].append(list(range(1, n_values + 1)))\n    return d", "compilation_passed": true, "time": 0.0007140636444091797, "tests_passed": true, "error": null}
{"code": "d = collections.defaultdict(list)\n    for i in range(n_keys):\n        key = random.choice(LETTERS)\n        d[key] += list(range(1, n_values + 1))\n\n    return dict(d)", "compilation_passed": true, "time": 0.0007600784301757812, "tests_passed": true, "error": null}
{"code": "random.seed(1)\n\n    random_dict = collections.defaultdict(list)\n\n    while len(random_dict) < n_keys:\n        random_letter = random.choice(LETTERS)\n        random_dict[random_letter].append(n_values)\n        n_values += 1\n\n    for key in random_dict.keys():\n        random_dict[key] = list(range(1, random_dict[key][0] + 1))\n\n    return random_dict", "compilation_passed": true, "time": 0.0007922649383544922, "tests_passed": true, "error": null}
{"code": "result_dict = collections.defaultdict(list)\n    keys = random.sample(LETTERS, n_keys)\n    for key in keys:\n        values = list(range(1, n_values + 1))\n        result_dict[key] = values\n    return dict(result_dict)", "compilation_passed": true, "time": 0.0008518695831298828, "tests_passed": true, "error": null}
{"code": "d = collections.defaultdict(list)\n    for key in range(n_keys):\n        val = [i for i in range(1, n_values + 1)]\n        d[LETTERS[random.randint(0, len(LETTERS) - 1)]].append(val)\n    return dict(d)", "compilation_passed": true, "time": 0.0007421970367431641, "tests_passed": true, "error": null}
{"code": "result = collections.defaultdict(list)\n    for _ in range(n_keys):\n        key = random.choice(LETTERS)\n        result[key].extend(i for i in range(1, n_values + 1))\n    return result", "compilation_passed": true, "time": 0.0007660388946533203, "tests_passed": true, "error": null}
{"code": "result = collections.defaultdict(list)\n    for _ in range(n_keys):\n        result[random.choice(LETTERS)] = list(range(1, n_values + 1))\n\n    return dict(result)", "compilation_passed": true, "time": 0.0007727146148681641, "tests_passed": true, "error": null}
{"code": "my_dict = collections.defaultdict(list)\n\n    for i in range(n_keys):\n        key = random.choice(LETTERS)\n        for j in range(1, n_values + 1):\n            my_dict[key].append(j)\n\n    return dict(my_dict)", "compilation_passed": true, "time": 0.0007588863372802734, "tests_passed": true, "error": null}
{"code": "random.seed(12345)\n    my_dict = collections.defaultdict(list)\n\n    for i in range(n_keys):\n        key = random.choice(LETTERS)\n        value = [j for j in range(1, n_values+1)]\n        my_dict[key] = value\n    return dict(my_dict)", "compilation_passed": true, "time": 0.0008871555328369141, "tests_passed": true, "error": null}
{"code": "# Create a defaultdict with empty lists as default values\n    my_dict = collections.defaultdict(list)\n\n    # Generate random keys and values\n    for key in random.sample(LETTERS, n_keys):\n        # Assign values to the key\n        my_dict[key] = list(range(1, n_values + 1))\n\n    return dict(my_dict)", "compilation_passed": true, "time": 0.0008320808410644531, "tests_passed": true, "error": null}
