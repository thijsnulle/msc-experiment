{"code": "if not os.path.exists(source_directory):\n        raise FileNotFoundError(\"The source directory does not exist.\")\n\n    if not os.path.exists(target_directory):\n        os.makedirs(target_directory)\n\n    extensions_to_convert = [\".txt\", \".docx\", \".xlsx\", \".csv\"]\n    csv_counter = 0\n\n    for root, dirs, files in os.walk(source_directory):\n        for file in files:\n            extension = Path(file).suffix\n\n            if extension in extensions_to_convert:\n                file_path = os.path.join(root, file)\n\n                try:\n                    if extension == \".txt\":\n                        with open(file_path, \"r\") as file:\n                            text = file.read()\n                    elif extension == \".docx\":\n                        document = docx.Document(file_path)\n                        text = \"\\n\".join([paragraph.text for paragraph in document.paragraphs])\n                    elif extension", "compilation_passed": false, "time": 0.0002560615539550781, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Validate input parameters\n    if source_directory is None:\n        raise ValueError(\"source_directory cannot be None\")\n    if target_directory is None:\n        raise ValueError(\"target_directory cannot be None\")\n    if not os.path.exists(source_directory):\n        raise FileNotFoundError(f\"Directory {source_directory} does not exist\")\n\n    # Initialize variables\n    counter = 0\n    source_path = Path(source_directory)\n    target_path = Path(target_directory)\n\n    # Loop through each file in the source directory\n    for file in source_path.iterdir():\n        if file.suffix == '.txt':\n            # Convert txt files to CSV\n            with file.open() as f:\n                # Read the text content from the txt file\n                text_content = f.read()\n\n                # Create a pandas DataFrame with a single column and no index\n                df = pd.DataFrame({\"Text\": [text_content]})\n\n                # Save the DataFrame to a CSV file in the target directory\n                new_filename", "compilation_passed": true, "time": 0.0013761520385742188, "tests_passed": false, "error": "No module named 'exceptions'"}
{"code": "# Create the target directory if it does not exist.\n    if not Path(target_directory).exists():\n        Path(target_directory).mkdir(parents=True, exist_ok=True)\n\n    # List of file types to convert.\n    file_types = {'*.txt', '*.docx', '*.xlsx', '*.csv'}\n\n    # Initialize a counter for the number of files converted to CSV.\n    files_converted_count = 0\n\n    # Iterate over all files in the source directory.\n    for pattern in file_types:\n        for file_path in Path(source_directory).rglob(pattern):\n            # Extract the file name without extension.\n            file_name_without_extension = Path(file_path).stem\n\n            # Convert the file based on its extension.\n            if file_path.suffix == '.txt':\n                with file_path.open(encoding='utf-8') as f:\n                    content = f.read()\n                pd.DataFrame({'Text': [content]}).to_", "compilation_passed": true, "time": 0.001277923583984375, "tests_passed": false, "error": "No module named 'exceptions'"}
{"code": "file_extensions = [\".txt\", \".docx\", \".xlsx\", \".csv\"]  # Extensions of files to convert\n\n    try:\n        files = [file for file in os.listdir(source_directory) if any(file.endswith(ext) for ext in file_extensions)]\n    except FileNotFoundError:\n        print(f\"The directory {source_directory} does not exist.\")\n        return 0\n\n    target_directory = Path(target_directory)\n    target_directory.mkdir(parents=True, exist_ok=True)\n\n    csv_file_names = []  # List of converted CSV files\n    for file in files:\n        file_path = os.path.join(source_directory, file)\n\n        try:\n            if file.endswith(\".txt\"):\n                text = open(file_path).read()  # Extract the text content of the file\n                df = pd.DataFrame([text])  # Create a DataFrame with a single row and a single column 'Text'\n            elif file", "compilation_passed": false, "time": 0.00023698806762695312, "tests_passed": false, "error": "SyntaxError"}
{"code": "supported_extensions = {'.txt', '.docx', '.xlsx', '.csv'}\n    converted = 0\n    Path(target_directory).mkdir(parents=True, exist_ok=True)\n\n    for file in os.listdir(source_directory):\n        file_path = os.path.join(source_directory, file)\n        if os.path.isfile(file_path) and os.path.splitext(file)[-1].lower() in supported_extensions:\n            try:\n                # Extract text from the file\n                if file.lower().endswith('.txt'):\n                    with open(file_path, 'r') as f:\n                        file_content = f.read()\n                elif file.lower().endswith('.docx'):\n                    doc = docx.Document(file_path)\n                    file_content = ' '.join([paragraph.text for paragraph in doc.paragraphs])\n                elif file.lower().endswith('.xlsx'):\n                    xls", "compilation_passed": false, "time": 0.00023889541625976562, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Check if source directory exists\n    if not os.path.exists(source_directory):\n        raise FileNotFoundError(f\"Source directory '{source_directory}' does not exist.\")\n\n    # Create the target directory if it doesn't exist\n    Path(target_directory).mkdir(parents=True, exist_ok=True)\n\n    # List of extensions to convert to CSV\n    extensions = ['txt', 'docx', 'xlsx', 'csv']\n\n    # Counter for successful conversions\n    count = 0\n\n    # Iterate over the files in the source directory\n    for file in os.listdir(source_directory):\n        file_path = os.path.join(source_directory, file)\n\n        # Check if the file is a regular file\n        if not os.path.isfile(file_path):\n            continue\n\n        # Split file name and extension\n        filename, extension = os.path.splitext(file)\n\n        # Remove the period from the extension\n        extension = extension[1:]\n\n        # Check if the file has an extension", "compilation_passed": true, "time": 0.0012669563293457031, "tests_passed": false, "error": "No module named 'exceptions'"}
{"code": "os.chdir(source_directory)\n    files = list(Path(source_directory).glob('*'))\n    count = 0\n\n    for file in files:\n        extension = file.suffix.lower()\n        if extension == '.txt':\n            with open(file, 'r', encoding='utf-8') as f:\n                content = f.read()\n            df = pd.DataFrame({'Text': [content]})\n            df.to_csv(f'{target_directory}/{file.name}.csv', index=False)\n            count += 1\n        elif extension == '.docx':\n            doc = docx.Document(file)\n            text = '\\n'.join([paragraph.text for paragraph in doc.paragraphs])\n            df = pd.DataFrame({'Text': [text]})\n            df.to_csv(f'{target_directory}/{file.name}.csv', index=False)\n            count += 1\n        elif extension in ('.xlsx', '.xls'):\n            try:\n                df = pd.read_excel", "compilation_passed": false, "time": 0.00028586387634277344, "tests_passed": false, "error": "SyntaxError"}
{"code": "extensions = [\".txt\", \".docx\", \".xlsx\", \".csv\"]\n    files_to_convert = []\n\n    try:\n        for ext in extensions:\n            files_to_convert.extend(\n                list(Path(source_directory).glob(f'**/*{ext}')))\n        for file in files_to_convert:\n            file_path = os.path.join(source_directory, file)\n            target_path = os.path.join(target_directory, os.path.basename(file))\n\n            if file.endswith(\".txt\"):\n                with open(file_path, \"r\") as text_file:\n                    data = text_file.read()\n                    df = pd.DataFrame([data])\n                    df.to_csv(target_path, index=False)\n            elif file.endswith(\".docx\"):\n                doc = docx.Document(file_path)\n                data = '\\n'.join([paragraph.text for paragraph in doc.paragraphs])\n                df", "compilation_passed": false, "time": 0.0002448558807373047, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Check if the source directory exists\n    if not os.path.isdir(source_directory):\n        raise FileNotFoundError(f\"Directory '{source_directory}' not found\")\n\n    # Create the target directory if it doesn't exist\n    if not os.path.exists(target_directory):\n        os.makedirs(target_directory)\n\n    # Initialize a counter to track the number of converted files\n    files_converted = 0\n\n    # Loop through all files in the source directory\n    for file in Path(source_directory).iterdir():\n        filename = file.name\n\n        # Check if the file has a valid extension\n        if file.suffix in ['.txt', '.docx', '.xlsx', '.csv']:\n            # Set the target file path\n            target_file = os.path.join(target_directory, f\"{file.stem}.csv\")\n\n            # Initialize a DataFrame to hold the file's data\n            df = pd.DataFrame(columns=['Text'])\n\n            # Read the file content based on its extension\n", "compilation_passed": true, "time": 0.0012638568878173828, "tests_passed": false, "error": "No module named 'exceptions'"}
{"code": "extensions = ('.txt', '.docx', '.xlsx', '.csv')\n    # Create the target directory if it does not exist\n    target_directory = Path(target_directory)\n    if not target_directory.exists():\n        target_directory.mkdir(parents=True)\n\n    # Iterate over the files in the source directory\n    files_converted = 0\n    for root, dirs, files in os.walk(source_directory):\n        for file in files:\n            if file.endswith(extensions):\n                filename = os.path.splitext(file)[0]\n                extension = os.path.splitext(file)[1]\n                output_filename = os.path.join(target_directory, f'{filename}.csv')\n                output_path = Path(output_filename)\n\n                if extension == '.txt':\n                    with open(os.path.join(root, file), 'r') as f:\n                        text = f.read()\n                    df = pd.DataFrame({'Text': [text]})\n                    ", "compilation_passed": true, "time": 0.0013630390167236328, "tests_passed": false, "error": "No module named 'exceptions'"}
{"code": "supported_extensions = ['.txt', '.docx', '.xlsx', '.csv']\n\n    if not os.path.exists(source_directory):\n        raise FileNotFoundError(f\"Source directory '{source_directory}' does not exist.\")\n\n    # Create target directory if it does not exist\n    Path(target_directory).mkdir(parents=True, exist_ok=True)\n\n    # Counter to track the number of files successfully converted\n    converted_count = 0\n\n    for file in os.listdir(source_directory):\n        file_path = os.path.join(source_directory, file)\n\n        if os.path.isfile(file_path) and os.path.splitext(file)[1] in supported_extensions:\n            # Get the file extension and name without the extension\n            extension = os.path.splitext(file)[1]\n            file_name = os.path.splitext(file)[0]\n\n            # Load the file based on its extension\n            if extension == '.txt':\n                with open(", "compilation_passed": false, "time": 0.00023317337036132812, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Check if the source directory exists\n    if not os.path.exists(source_directory):\n        raise FileNotFoundError(\"Source directory does not exist.\")\n\n    # Create the target directory if it doesn't exist\n    os.makedirs(target_directory, exist_ok=True)\n\n    # Count of files successfully converted to CSV\n    file_count = 0\n\n    # List of supported extensions\n    supported_extensions = ['.txt', '.docx', '.xlsx', '.csv']\n\n    # Loop through each file in the source directory\n    for filename in os.listdir(source_directory):\n        filepath = os.path.join(source_directory, filename)\n\n        # Check if the file is a regular file and has a supported extension\n        if os.path.isfile(filepath) and Path(filename).suffix in supported_extensions:\n            # Create a file object to read the file contents\n            with open(filepath, 'rb') as f:\n                # Read the file contents based on the extension\n                if Path(filename).", "compilation_passed": false, "time": 0.00019502639770507812, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Validate the input paths\n    source_dir = Path(source_directory)\n    target_dir = Path(target_directory)\n    if not source_dir.is_dir():\n        raise FileNotFoundError(f\"The source directory does not exist: {source_directory}\")\n\n    # Create the target directory if it doesn't exist\n    target_dir.mkdir(parents=True, exist_ok=True)\n\n    # Set the file extensions to process\n    exts_to_process = {\".txt\", \".docx\", \".xlsx\", \".csv\"}\n\n    # Counter for successful conversions\n    count = 0\n\n    # Process files in the source directory\n    for file in source_dir.iterdir():\n        # Only process files with specified extensions\n        if file.is_file() and file.suffix.lower() in exts_to_process:\n            filename = file.stem\n            ext = file.suffix.lower()\n\n            # Read and process file content based on its extension\n            if ext == \".txt\":\n                text = file.read", "compilation_passed": true, "time": 0.0012979507446289062, "tests_passed": false, "error": "No module named 'exceptions'"}
{"code": "if not os.path.exists(source_directory):\n        raise FileNotFoundError(\"The source directory does not exist\")\n\n    # Create the target directory if it doesn't exist\n    Path(target_directory).mkdir(parents=True, exist_ok=True)\n\n    # List of extensions to convert\n    extensions = ['.txt', '.docx', '.xlsx', '.csv']\n\n    # Counter for successful conversions\n    count = 0\n\n    # Loop through all files in the source directory\n    for file in os.listdir(source_directory):\n        file_path = os.path.join(source_directory, file)\n        if os.path.isfile(file_path) and file.endswith(extensions):\n            # Extract the base name without extension\n            file_name = os.path.splitext(file)[0]\n\n            # Extract text content based on file type\n            if file.endswith('.txt'):\n                # Read text content from the file\n                with open(file_path, 'r', encoding", "compilation_passed": false, "time": 0.00022077560424804688, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Initialize a counter for the number of files successfully converted to CSV\n    files_converted = 0\n\n    # Check if the source directory exists\n    if not os.path.exists(source_directory):\n        # Raise an error if the source directory does not exist\n        raise FileNotFoundError(f\"Source directory '{source_directory}' does not exist.\")\n\n    # Create the target directory if it does not exist\n    Path(target_directory).mkdir(parents=True, exist_ok=True)\n\n    # Iterate over each file in the source directory\n    for filename in os.listdir(source_directory):\n        # Construct the full path to the file\n        file_path = os.path.join(source_directory, filename)\n\n        # Check if the current file is a file (not a directory)\n        if os.path.isfile(file_path):\n            # Get the file extension\n            file_extension = os.path.splitext(file_path)[1]\n\n            # Check if the file has a supported extension\n            if file_extension.lower() in {'.txt", "compilation_passed": false, "time": 8.106231689453125e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Validate the source directory\n    if not os.path.exists(source_directory):\n        raise FileNotFoundError(\"The source directory does not exist\")\n\n    # Create the target directory if it doesn't exist\n    Path(target_directory).mkdir(parents=True, exist_ok=True)\n\n    # Iterate through the files in the source directory\n    count = 0\n    for file in os.listdir(source_directory):\n        file_path = os.path.join(source_directory, file)\n\n        # Check if the file has a valid extension\n        if not file.endswith((\".txt\", \".docx\", \".xlsx\", \".csv\")):\n            continue\n\n        # Load the file based on its extension\n        if file.endswith(\".txt\"):\n            with open(file_path, \"r\") as f:\n                text = f.read()\n        elif file.endswith(\".docx\"):\n            text = extract_text_from_docx(file_path)\n        elif", "compilation_passed": false, "time": 0.00020694732666015625, "tests_passed": false, "error": "SyntaxError"}
{"code": "files_converted_count = 0\n    extensions_to_read = {'.txt', '.docx', '.xlsx', '.csv'}\n    extensions_to_save = {'.txt', '.csv'}\n    # Create the target directory if it does not exist\n    os.makedirs(target_directory, exist_ok=True)\n    # Loop through all files in the source directory\n    for filename in os.listdir(source_directory):\n        file_extension = os.path.splitext(filename)[1]\n        file_path = os.path.join(source_directory, filename)\n        # Check if the file is a text file or a spreadsheet\n        if file_extension in extensions_to_read and os.path.isfile(file_path):\n            with open(file_path, 'rb') as f:\n                if file_extension == '.txt':\n                    text = f.read().decode(errors='replace')  # handle encoding errors\n                elif file_extension == '.docx':\n                    doc = docx.Document(f)\n", "compilation_passed": true, "time": 0.0013246536254882812, "tests_passed": false, "error": "No module named 'exceptions'"}
{"code": "if not os.path.exists(source_directory):\n        raise FileNotFoundError(f\"Source directory does not exist: {source_directory}\")\n\n    source_path = Path(source_directory)\n    target_path = Path(target_directory)\n    target_path.mkdir(exist_ok=True)\n\n    extensions = ['.txt', '.docx', '.xlsx', '.csv']\n    num_converted_files = 0\n\n    for extension in extensions:\n        for file in source_path.glob(f'*{extension}'):\n            file_name = file.stem + '.csv'\n            target_file = target_path / file_name\n            if extension == '.txt':\n                with open(file, 'r') as f:\n                    text = f.read()\n                df = pd.DataFrame({'Text': [text]})\n            elif extension == '.docx':\n                doc = docx.Document(file)\n                text = '\\n'.join([p.text for p in doc.paragraphs])\n                df = pd", "compilation_passed": true, "time": 0.00138092041015625, "tests_passed": false, "error": "No module named 'exceptions'"}
{"code": "valid_extensions = (\".txt\", \".docx\", \".xlsx\", \".csv\")\n\n    if not os.path.exists(source_directory):\n        raise FileNotFoundError(f\"Source directory '{source_directory}' not found.\")\n\n    os.makedirs(target_directory, exist_ok=True)\n    count_converted = 0\n\n    for file in os.listdir(source_directory):\n        input_path = os.path.join(source_directory, file)\n        if os.path.splitext(file)[1] not in valid_extensions:\n            continue\n\n        output_path = os.path.join(target_directory, f\"{os.path.splitext(file)[0]}.csv\")\n        try:\n            if file.endswith(\".txt\"):\n                with open(input_path, \"r\") as infile:\n                    text = infile.read()\n            elif file.endswith(\".docx\"):\n                document = docx.Document(input_", "compilation_passed": false, "time": 0.00025916099548339844, "tests_passed": false, "error": "SyntaxError"}
{"code": "files = os.listdir(source_directory)\n    file_extensions = ['.txt', '.docx', '.xlsx', '.csv']\n    counter = 0\n\n    if target_directory:\n        path = Path(target_directory)\n        path.mkdir(parents=True, exist_ok=True)\n\n    for file_name in files:\n        if file_name.endswith(tuple(file_extensions)):\n            file_path = os.path.join(source_directory, file_name)\n\n            if file_path.endswith('.txt'):\n                with open(file_path, 'r', encoding='utf-8') as txt_file:\n                    content = txt_file.read()\n            elif file_path.endswith('.docx'):\n                doc = docx.Document(file_path)\n                content = '\\n'.join([paragraph.text for paragraph in doc.paragraphs])\n            elif file_path.endswith('.xlsx'):\n                content = pd.read_", "compilation_passed": true, "time": 0.0013511180877685547, "tests_passed": false, "error": "No module named 'exceptions'"}
{"code": "try:\n        os.makedirs(target_directory)\n    except FileExistsError:\n        print(\"The target directory exists.\")\n\n    source_directory = Path(source_directory)\n    target_directory = Path(target_directory)\n\n    if source_directory.is_dir():\n        print(f\"Source directory: {source_directory}\")\n    else:\n        raise FileNotFoundError(\n            \"The source directory does not exist or is not accessible.\"\n        )\n\n    count = 0\n    for file in source_directory.iterdir():\n        if file.suffix in [\".txt\", \".docx\", \".xlsx\", \".csv\"]:\n            print(f\"Converting file: {file.name}\")\n            count += 1\n\n            if file.suffix == \".txt\":\n                with open(file, \"r\", encoding=\"utf-8\") as source_file:\n                    content = source_file.readlines()\n                df = pd.DataFrame(content, columns=[\"Text\"])\n            elif file", "compilation_passed": false, "time": 0.0002529621124267578, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not Path(source_directory).is_dir():\n        raise FileNotFoundError(f\"Source directory '{source_directory}' does not exist.\")\n\n    files_to_convert = [file for file in os.listdir(source_directory)\n                        if file.endswith(('.txt', '.docx', '.xlsx', '.csv'))]\n\n    converted_files_count = 0\n    for file in files_to_convert:\n        file_path = os.path.join(source_directory, file)\n\n        if file.endswith('.txt'):\n            text = open(file_path, 'r').read()\n        elif file.endswith('.docx'):\n            doc = docx.Document(file_path)\n            text = '\\n'.join([paragraph.text for paragraph in doc.paragraphs])\n        elif file.endswith('.xlsx') or file.endswith('.csv'):\n            df = pd.read_excel(file_path) if file.endswith", "compilation_passed": false, "time": 0.00022721290588378906, "tests_passed": false, "error": "SyntaxError"}
{"code": "file_types = {'.txt', '.docx', '.xlsx', '.csv'}\n\n    # Check if the source directory exists\n    if not os.path.isdir(source_directory):\n        raise FileNotFoundError(f\"Source directory '{source_directory}' does not exist.\")\n\n    # Check if the target directory exists, if not, create it\n    target_path = Path(target_directory)\n    if not target_path.exists():\n        target_path.mkdir(parents=True, exist_ok=True)\n\n    # Loop through files in the source directory\n    for file_name in os.listdir(source_directory):\n        # Check if the file is of the required type\n        if os.path.splitext(file_name)[1] in file_types:\n            source_file_path = os.path.join(source_directory, file_name)\n            target_file_path = os.path.join(target_directory, os.path.splitext(file_name)[0] + '.csv')\n\n            # Open", "compilation_passed": true, "time": 0.0013229846954345703, "tests_passed": false, "error": "No module named 'exceptions'"}
{"code": "try:\n        source_directory_path = Path(source_directory)\n        target_directory_path = Path(target_directory)\n\n        if not source_directory_path.exists():\n            raise FileNotFoundError(\"Source directory does not exist.\")\n\n        if not target_directory_path.exists():\n            target_directory_path.mkdir(parents=True)\n\n        extensions = ('.txt', '.docx', '.xlsx', '.csv')\n        count = 0\n\n        for file in source_directory_path.iterdir():\n            if file.is_file() and file.suffix.lower() in extensions:\n                csv_path = target_directory_path / Path(f\"{file.stem}.csv\")\n\n                try:\n                    if file.suffix.lower() == '.txt':\n                        text = file.read_text()\n                    elif file.suffix.lower() == '.docx':\n                        doc = docx.Document(str(file))\n                        full_text = []\n                        for paragraph", "compilation_passed": false, "time": 0.00024890899658203125, "tests_passed": false, "error": "SyntaxError"}
{"code": "source = Path(source_directory)\n    target = Path(target_directory)\n\n    if not source.exists():\n        raise FileNotFoundError(f\"Directory '{source}' does not exist.\")\n\n    extensions = (\".txt\", \".docx\", \".xlsx\", \".csv\")\n    converted_files = 0\n\n    if not target.exists():\n        target.mkdir(parents=True, exist_ok=True)\n\n    for file in source.glob(\"**/*\"):\n        if file.suffix in extensions and file.is_file():\n            data = get_file_text(file)\n            csv_file = target / (file.stem + \".csv\")\n            create_csv_file(csv_file, data)\n            converted_files += 1\n\n    return converted_files", "compilation_passed": true, "time": 0.0012781620025634766, "tests_passed": false, "error": "No module named 'exceptions'"}
{"code": "extensions = ['.txt', '.docx', '.xlsx', '.csv']\n\n    if not os.path.exists(source_directory):\n        raise FileNotFoundError('The source directory does not exist.')\n\n    if not os.path.exists(target_directory):\n        os.makedirs(target_directory)\n\n    converted_files_count = 0\n\n    for file in Path(source_directory).rglob(\"*\"):\n        file_ext = file.suffix.lower()\n        if file_ext in extensions:\n            file_path = file.as_posix()\n            file_name = file.name\n\n            try:\n                if file_ext == '.txt':\n                    with open(file_path, 'r', encoding='utf-8') as f:\n                        text = f.read()\n                elif file_ext == '.docx':\n                    doc = docx.Document(file_path)\n                    text = '\\n'.join([paragraph.text for paragraph in doc.paragraphs])\n                elif file", "compilation_passed": false, "time": 0.00024175643920898438, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Check if the source directory exists\n    if not os.path.exists(source_directory):\n        raise FileNotFoundError(f\"Source directory {source_directory} does not exist\")\n\n    # Create the target directory if it doesn't exist\n    Path(target_directory).mkdir(parents=True, exist_ok=True)\n\n    # Initialize a counter for the number of files converted\n    files_converted = 0\n\n    # Loop over all files in the source directory\n    for file in os.listdir(source_directory):\n        # Check if the file has a specific extension\n        if any(file.endswith(ext) for ext in [\".txt\", \".docx\", \".xlsx\", \".csv\"]):\n            # Initialize a DataFrame with a single 'Text' column\n            df = pd.DataFrame(columns=['Text'])\n\n            # Extract the file path and extension\n            file_path = os.path.join(source_directory, file)\n\n            if file.endswith(\".txt\"):\n                # Read the text file and append", "compilation_passed": false, "time": 0.00019288063049316406, "tests_passed": false, "error": "IndentationError"}
{"code": "source_dir_path = Path(source_directory)\n    target_dir_path = Path(target_directory)\n\n    # Create the target directory if it doesn't exist\n    if not target_dir_path.exists():\n        os.makedirs(target_dir_path)\n\n    # Check that the source directory exists\n    if not source_dir_path.exists():\n        raise FileNotFoundError(f\"Source directory not found: {source_directory}\")\n\n    # Files to convert\n    files_to_convert = source_dir_path.glob('*.txt')\n    files_to_convert = files_to_convert + list(source_dir_path.glob('*.docx'))\n    files_to_convert = files_to_convert + list(source_dir_path.glob('*.xlsx'))\n    files_to_convert = files_to_convert + list(source_dir_path.glob('*.csv'))\n\n    # Count of files successfully converted\n    files_converted = 0\n\n    # Iterate over each file in the source directory\n    for file", "compilation_passed": false, "time": 0.0001881122589111328, "tests_passed": false, "error": "SyntaxError"}
{"code": "extensions = ['.txt', '.docx', '.xlsx', '.csv']\n    files = [f for f in os.listdir(source_directory) if os.path.splitext(f)[1] in extensions]\n    target_directory = os.path.abspath(target_directory)\n\n    if not os.path.exists(target_directory):\n        os.makedirs(target_directory)\n\n    files_count = 0\n    for file_name in files:\n        file_path = os.path.join(source_directory, file_name)\n        if os.path.isfile(file_path):\n            file_extension = os.path.splitext(file_name)[1]\n            csv_name = os.path.splitext(file_name)[0] + '.csv'\n            csv_path = os.path.join(target_directory, csv_name)\n            try:\n                if file_extension == '.txt':\n                    with open(file_path, 'r') as file:\n                        text", "compilation_passed": false, "time": 0.0002269744873046875, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Create the target directory if it doesn't exist\n    Path(target_directory).mkdir(parents=True, exist_ok=True)\n\n    # Set the number of files successfully converted to 0\n    num_converted = 0\n\n    # Walk through the source directory and process each file\n    for dirpath, dirnames, filenames in os.walk(source_directory):\n        for filename in filenames:\n            # Join the dirpath with the filename to get the absolute path of the file\n            filepath = os.path.join(dirpath, filename)\n\n            # Check if the file has a supported extension\n            _, file_extension = os.path.splitext(filename)\n            if file_extension.lower() not in [\".txt\", \".docx\", \".xlsx\", \".csv\"]:\n                continue\n\n            # Process the file based on its extension\n            if file_extension.lower() == \".txt\":\n                with open(filepath, \"r\") as file:\n                    content = file.read()\n            elif file_extension.", "compilation_passed": false, "time": 0.00019288063049316406, "tests_passed": false, "error": "SyntaxError"}
