{"code": "x = np.linspace(0, 2*np.pi, 100)\n    y = np.sin(x)\n\n    # Randomly select a color\n    color_idx = random.randint(0, len(COLORS)-1)\n    color_code = COLORS[color_idx]\n\n    # Plot the function\n    ax.plot(x, y, color=color_code)\n    ax.set_rticks(np.arange(0, 1.2, 0.2))\n    ax.set_rlabel_position(random.randint(0, 360))\n\n    return color_code", "compilation_passed": true, "time": 0.007739067077636719, "tests_passed": false, "error": "StopIteration"}
{"code": "# Generate random data points\n    x = np.linspace(0, 2 * np.pi, 100)\n    y = np.random.normal(0, 1, 100)\n\n    # Select a random color from the predefined list\n    color = random.choice(COLORS)\n\n    # Plot the data points\n    ax.plot(x, y, color=color)\n\n    # Set the radial labels at a random position\n    ax.set_thetagrids(np.arange(0, 360, 360 / len(COLORS)), frac=1.2, position=(0, 0))\n\n    return color", "compilation_passed": true, "time": 0.011465072631835938, "tests_passed": false, "error": "AttributeError"}
{"code": "# Set color and angle\n    color = random.choice(COLORS)\n    theta = np.arange(0.0, np.pi, 0.05)\n    r = np.sin(theta)\n\n    # Plot function\n    ax.plot(theta, r, color=color)\n    ax.set_rmax(1)\n    ax.set_rmin(0)\n    ax.set_rlabel_position(random.choice([22.5, 67.5, 112.5, 157.5, 202.5, 247.5, 292.5, 337.5]))\n\n    return color", "compilation_passed": true, "time": 0.037355899810791016, "tests_passed": true, "error": null}
{"code": "# Generate x and y values for sine wave\n    x = np.linspace(0, 2 * np.pi, 1000)\n    y = np.sin(x)\n\n    # Choose random color from predefined list\n    color = random.choice(COLORS)\n\n    # Set random position for radial labels\n    rlabel_position = random.randint(0, 360)\n    plt.rlabel_position = rlabel_position\n\n    # Plot the function\n    ax.plot(x, y, color=color)\n\n    # Return the color of the plotted function as a string\n    return color", "compilation_passed": true, "time": 0.007785797119140625, "tests_passed": false, "error": "StopIteration"}
{"code": "x = np.linspace(0, 2 * np.pi, 100)\n    y = np.sin(x)\n\n    color_code = random.choice(COLORS)\n\n    # Plot the sine wave\n    ax.plot(x, y, color=color_code)\n    ax.set_yticklabels(ax.get_yticks(), color=color_code)\n    ax.spines['polar'].set_edgecolor(color_code)\n\n    # Rotate the radial labels to a random angle\n    rotation = f'{random.randint(0, 360)} degrees'\n    ax.set_yticklabels(ax.get_yticks(), rotation=rotation)\n\n    return color_code", "compilation_passed": true, "time": 0.009219169616699219, "tests_passed": false, "error": "StopIteration"}
{"code": "color = np.random.choice(COLORS)\n    # Create some data\n    x = np.linspace(0, 2 * np.pi, 100)\n    y = np.sin(x)\n    # Plot the data\n    ax.plot(x, y, color=color, linewidth=2)\n    # Add labels\n    ax.set_thetagrids(np.arange(0, 360, 45))\n    ax.set_rgrids([0.25, 0.5, 0.75, 1])\n    ax.set_yticklabels(['0.25', '0.5', '0.75', '1'], color=color)\n    position = np.random.randint(4)\n    labels = ax.get_xticklabels()\n    labels.pop(position)\n    ax.set_xticklabels(labels)\n    return color", "compilation_passed": true, "time": 0.01369023323059082, "tests_passed": false, "error": "ValueError"}
{"code": "color = random.choice(COLORS)  # Randomly choose color\n    x = np.linspace(0, 2*np.pi, 100)  # Create x values\n    y = np.sin(x)  # Create y values\n    ax.plot(x, y, color=color)  # Plot the function\n\n    return color", "compilation_passed": true, "time": 0.03609895706176758, "tests_passed": true, "error": null}
{"code": "# Generate a random sine wave function\n    t = np.linspace(0, 2*np.pi, 1000)\n    r = np.sin(t) + random.random()\n\n    # Select a random color\n    color = random.choice(COLORS)\n\n    # Plot the function with the random color\n    ax.plot(t, r, color=color)\n\n    # Set random position for radial labels\n    ax.set_yticklabels(['a', 'b', 'c', 'd'],\n                       position=dict(zip(['a', 'b', 'c', 'd'], [random.random() for i in range(4)])))\n\n    # Return the color code\n    return color", "compilation_passed": true, "time": 0.01044607162475586, "tests_passed": false, "error": "KeyError"}
{"code": "t = np.linspace(0, 2*np.pi, 100)\n    f = np.sin(t) + random.random()\n\n    ax.set_theta_zero_location(\"N\")\n    ax.set_theta_direction(\"clockwise\")\n\n    if random.random() > 0.5:\n        ax.set_yticklabels([])\n    else:\n        if random.random() > 0.5:\n            ax.set_yticklabels(ax.get_yticklabels(), rotation=random.randint(-180, 180))\n        else:\n            ax.set_yticklabels(ax.get_yticklabels(), color=random.choice(COLORS))\n\n    color = random.choice(COLORS)\n    ax.plot(t, f, color=color)\n    return color", "compilation_passed": true, "time": 0.04422807693481445, "tests_passed": false, "error": "RuntimeError"}
{"code": "t = np.linspace(0, 2*np.pi, 100)\n    a = np.random.rand()\n    phi = np.random.rand()*np.pi\n    ax.plot(t, a*np.sin(t + phi), COLORS[random.randint(0, len(COLORS)-1)])\n    ax.set_yticklabels([\"\"] * len(ax.get_yticklabels()))\n    labels = [\"-2\u03c0\", \"-\u03c0\", \"0\", \"\u03c0\", \"2\u03c0\"]\n    if random.randint(0, 1) == 1:\n        ax.set_xticks(np.arange(0, 2*np.pi + np.pi/4, np.pi/4))\n        ax.set_xticklabels(labels)\n    else:\n        ax.set_xticks(np.arange(0, 2*np.pi + np.pi/4, np.pi/2))\n        ax.set_xticklabels(labels, ha=\"right\"", "compilation_passed": false, "time": 0.0002620220184326172, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Set random position for radial labels\n    rlabel = random.randint(0, 360)\n    ax.set_rlabel_position(rlabel)\n\n    # Generate random sine wave function\n    t = np.linspace(0, 10 * np.pi, 100)\n    y = np.sin(t)\n\n    # Select random color from the predefined list\n    color = random.choice(COLORS)\n\n    # Plot the function with the selected color\n    ax.plot(t, y, color=color)\n\n    return color", "compilation_passed": true, "time": 0.00810384750366211, "tests_passed": false, "error": "StopIteration"}
{"code": "x = np.linspace(0, 2 * np.pi, 100)\n    y = np.sin(x)\n\n    # Random color\n    color = random.choice(COLORS)\n    ax.set_color_cycle([color])\n    ax.plot(x, y, lw=2)\n    # Random position of labels\n    ax.set_theta_offset(np.random.uniform(-np.pi, np.pi))\n\n    return color", "compilation_passed": true, "time": 0.007279157638549805, "tests_passed": false, "error": "AttributeError"}
{"code": "x = np.linspace(0, 2 * np.pi, 100)\n    y = np.sin(x)\n    color = random.choice(COLORS)\n    pos = random.choice(['bottom', 'top', 'right', 'left'])\n    ax.plot(x, y, color=color)\n    ax.set_yticklabels(ax.get_yticks(), position=pos)\n    return color", "compilation_passed": true, "time": 0.043698787689208984, "tests_passed": true, "error": null}
{"code": "# Randomly select a color\n    color = random.choice(COLORS)\n\n    # Randomly set the position for radial labels\n    rlabel_position = random.randint(0, 360)\n\n    # Generate a random sine wave function\n    t = np.linspace(0, 2*np.pi, 100)\n    y = np.sin(t) + np.random.normal(0, 0.1, t.shape)\n\n    # Plot the sine wave function\n    ax.plot(t, y, color=color)\n    ax.set_yticklabels([])\n    ax.set_rlabel_position(rlabel_position)\n\n    return color", "compilation_passed": true, "time": 0.007296085357666016, "tests_passed": false, "error": "StopIteration"}
{"code": "t = np.linspace(0, 1, num=1000)\n    f = np.sin(2 * np.pi * t) + np.random.random()\n    ax.plot(t, f, color=random.choice(COLORS))\n    ax.set_yticklabels(ax.get_yticks(), ha='center' if random.random() < 0.5 else 'right')\n    return COLORS[random.randint(0, len(COLORS) - 1)]", "compilation_passed": true, "time": 0.009943008422851562, "tests_passed": false, "error": "StopIteration"}
{"code": "# Create a list of random numbers for the x and y values\n    x = np.arange(0, 2*np.pi, 0.1)\n    y = np.sin(x)\n\n    # Plot the sine wave function\n    ax.plot(x, y, linewidth=2)\n    ax.set_yticklabels([])\n\n    # Choose a random color from the list and return it\n    color = random.choice(COLORS)\n    ax.set_theta_direction('clockwise')\n    ax.set_theta_zero_location('N')\n    ax.set_theta_offset(np.pi/2)\n    return color", "compilation_passed": true, "time": 0.03220200538635254, "tests_passed": true, "error": null}
{"code": "# Randomly generate parameters for the sine function\n    amplitude = random.random() * 5\n    phase = random.random() * np.pi\n    frequency = random.random() * 10\n    offset = random.random() * 5\n\n    # Define the independent variable\n    theta = np.linspace(0, 2*np.pi, 1000)\n\n    # Calculate the sine function\n    y = amplitude * np.sin(frequency * theta + phase) + offset\n\n    # Choose a random color\n    color = COLORS[random.randint(0, 6)]\n\n    # Plot the function\n    ax.plot(theta, y, label='$sin(%.2f \\\\theta)$' % frequency, color=color)\n\n    # Set the polar plot limits\n    ax.set_rlim(0, 5)\n    ax.set_rticks(np.arange(0, 5, 0.5))\n\n    # Randomly position the radial labels\n    pos = np.arange(0, 2*np.pi, np.pi", "compilation_passed": false, "time": 0.00023126602172851562, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Generate random function and parameters\n    f = random.choice([np.sin, np.cos])\n    amp = random.uniform(0, 5)\n    period = random.uniform(0.5, 2)\n    phase = random.uniform(0, 2 * np.pi)\n    t = np.linspace(-np.pi, np.pi, 1000)\n\n    # Set labels and ticks\n    ax.set_theta_direction(-1)\n    ax.set_theta_zero_location('N')\n    ax.set_rticks(np.arange(0, 6, 1))  # set radial ticks\n    pos = random.choice(['l', 'r'])  # randomly position radial labels left or right\n    if pos == 'l':\n        ax.set_rlabel_position(100)\n\n    # Draw the function\n    ax.plot(t, f(t * period + phase) * amp, lw=2, c=random.choice(COLORS))\n    ax.set_title(f\"{f.__name__}\", fonts", "compilation_passed": false, "time": 0.00021982192993164062, "tests_passed": false, "error": "SyntaxError"}
{"code": "t = np.linspace(0, 2*np.pi, 100)\n    ax.set_theta_direction(-1)\n    ax.set_theta_offset(np.pi/2)\n    ax.set_yticklabels([])\n    ax.xaxis.set_tick_params(labelsize=16)\n\n    # Randomly select a color\n    color = random.choice(COLORS)\n\n    # Randomly select the position for the radial label\n    pos = np.random.randint(0, 4)\n    ax.set_thetagrids(np.arange(0, 360, 90), frac=0.7, position=pos)\n    ax.plot(t, np.sin(t) + np.random.rand(), color=color, linewidth=3)\n    return color", "compilation_passed": true, "time": 0.01036381721496582, "tests_passed": false, "error": "AttributeError"}
{"code": "t = np.linspace(0, 2 * np.pi, 200)\n    a = (np.random.rand() + 1) * 10\n    phi = np.random.rand() * 2 * np.pi\n    f = (np.cos(t * 2 + phi) + np.random.rand(len(t)) * 0.2) * a\n    ax.plot(t, f, COLORS[random.randint(0, 6)])\n    ax.set_yticklabels(ax.get_yticks(), family='monospace')\n    position = random.randint(0, 3)\n    ax.set_rlabel_position(position*90)\n\n    return COLORS[random.randint(0, 6)]", "compilation_passed": true, "time": 0.007424116134643555, "tests_passed": false, "error": "StopIteration"}
{"code": "# Generate random x values\n    x = np.linspace(0, 2 * np.pi, 100)\n\n    # Generate random y values\n    y = np.sin(x + 2 * np.pi * random.random())\n\n    # Randomly select a color from a predefined list\n    color = random.choice(COLORS)\n\n    # Plot the function\n    ax.plot(x, y, color=color)\n\n    # Set a random position for radial labels\n    ax.xaxis.set_ticks_position(random.choice(['bottom', 'top']))\n\n    # Return color code\n    return color", "compilation_passed": true, "time": 0.03811478614807129, "tests_passed": true, "error": null}
{"code": "t = np.linspace(0, 2 * np.pi, 100)\n    y = np.sin(t + np.random.rand())\n    color = random.choice(COLORS)\n    ax.plot(t, y, color=color)\n    ax.set_xticks(np.arange(0, 2 * np.pi + 2 * np.pi / 8, 2 * np.pi / 8))\n    ax.set_xticklabels(np.rad2deg(ax.get_xticks()), fontsize=16)\n    ax.grid(True)\n    ax.set_rlabel_position(np.random.randint(0, 360))\n    return color", "compilation_passed": true, "time": 0.07226395606994629, "tests_passed": true, "error": null}
{"code": "ax.set_theta_zero_location(\"N\")\n    ax.set_theta_direction(-1)\n    ax.set_rticks([0.5, 1, 1.5, 2])  # Less radial ticks\n    ax.grid(True)\n\n    # Randomly select a color from a list of colors\n    color = COLORS[random.randint(0, len(COLORS) - 1)]\n\n    # Create a random sine wave function\n    x = np.arange(0, 2 * np.pi, 0.01)\n    y = np.sin(x) + random.randint(-5, 5)\n\n    ax.plot(x, y, color=color, label=\"sine\")\n    ax.set_title(\"Random sine wave\")\n    ax.set_yticklabels([])\n    ax.set_xticklabels([])\n    ax.legend()\n    return color", "compilation_passed": true, "time": 0.008883953094482422, "tests_passed": false, "error": "StopIteration"}
{"code": "t = np.linspace(0, 2 * np.pi, 100)\n    theta = np.linspace(0.0, 1.0, 100)\n    radial = np.sin(theta) + np.random.rand(theta.size) * 0.2\n    ax.plot(t, radial, c=random.choice(COLORS), lw=2)\n\n    # Choose a random position for the radial labels\n    r_labels = [r'\\theta', r'\\theta + \\pi/2', r'\\theta + \\pi', r'\\theta + 3\\pi/2']\n    positions = [0.0, 0.5, 1.0, 1.5]\n    radial_position = random.choice(positions)\n    for r, label in zip(positions, r_labels):\n        ax.set_rlabel_position(radial_position * r * 180 / np.pi)\n        ax.set_thetagrids(np.arange(0.0, 360.0, ", "compilation_passed": false, "time": 0.00025010108947753906, "tests_passed": false, "error": "SyntaxError"}
{"code": "ax.grid()\n    t = np.linspace(0, 1, 100) * 2 * np.pi\n    a = random.randint(0, 200) / 100\n    color = random.choice(COLORS)\n    ax.plot(t, a * np.sin(t), color=color, lw=3)\n    ax.set_yticklabels([])\n    labels_list = ['r', 'l', 'r', 'l']\n    label = random.choice(labels_list)\n    ax.xaxis.set_label_position(label)\n    return color", "compilation_passed": true, "time": 0.008313894271850586, "tests_passed": false, "error": "StopIteration"}
{"code": "# Generate the x and y values for the sine wave\n    x = np.linspace(0, 2 * np.pi, 100)\n    y = np.sin(x + random.uniform(0, 2 * np.pi))\n\n    # Select a random color from the COLORS list\n    color = random.choice(COLORS)\n\n    # Set a random position for radial labels\n    r_labels = [50, 100, 200]\n    random.shuffle(r_labels)\n\n    # Plot the sine wave and set the colors of the subplot, labels, and grid lines\n    ax.plot(x, y, color=color)\n    ax.set_yticklabels(r_labels, color=color)\n    ax.grid(color='gray', linewidth=0.5)\n\n    return color", "compilation_passed": true, "time": 0.04756808280944824, "tests_passed": true, "error": null}
{"code": "t = np.linspace(0, 2 * np.pi, 100)\n    ax.set_xticks(np.arange(0, 2*np.pi + 1, np.pi/2))\n    ax.set_xticklabels(['', r'$ \\pi /2 $', '', r'$ \\pi $', '', r'$ 3\\pi/2 $', ''])\n    ax.set_yticks(np.arange(0, 1.1, 0.25))\n\n    color = random.choice(COLORS)\n    ax.plot(t, np.sin(t) + 0.5, '--' + color)\n\n    return color", "compilation_passed": true, "time": 0.0089569091796875, "tests_passed": false, "error": "ValueError"}
{"code": "color = random.choice(COLORS)\n    theta = np.linspace(0, 2 * np.pi, 100)\n    radius = 1 + np.sin(theta)\n    ax.set_rlabel_position(random.randint(0, 360))\n    ax.plot(theta, radius, color=color)\n    return color", "compilation_passed": true, "time": 0.007261991500854492, "tests_passed": false, "error": "StopIteration"}
{"code": "t = np.linspace(0, 2 * np.pi, 100)\n    phase = random.uniform(0, 2 * np.pi)\n    y = np.sin(t + phase)\n    color = COLORS[random.randint(0, len(COLORS)-1)]\n\n    ax.set_yticklabels(['','0.5','','1',''],fontweight='bold')\n    if random.randint(1,2) == 1:\n        ax.set_xticklabels(['-\u03c0','-\u03c0/2','0','\u03c0/2','\u03c0'])\n    else:\n        ax.set_xticklabels(['\u03c0','\u03c0/2','0','\u2212\u03c0/2','\u2212\u03c0'])\n\n    ax.plot(t, np.abs(y), color=color)\n\n    return color", "compilation_passed": true, "time": 0.008122920989990234, "tests_passed": false, "error": "StopIteration"}
{"code": "# Define the function\n    def func(theta):\n        return np.sin(theta) + 0.5 * np.sin(2 * theta)\n\n    # Generate random values for theta\n    theta = np.linspace(0, 2 * np.pi, 500)\n\n    # Choose a random color\n    color = random.choice(COLORS)\n\n    # Draw the function\n    ax.plot(theta, func(theta), color=color, linewidth=2)\n\n    # Randomly select a position for the radial labels\n    pos = random.choice(['r', 'l'])\n\n    # Set the radial and azimuthal labels\n    ax.set_thetagrids(np.arange(0, 360, 30), frac=1.05, position=pos)\n    ax.set_rgrids(np.arange(0, 2.5, 0.5), angle=0, frac=1.05, position=pos)\n\n    # Hide the ticklines\n    for label in ax.get_xticklines", "compilation_passed": false, "time": 0.00022125244140625, "tests_passed": false, "error": "SyntaxError"}
