{"code": "try:\n        request_list = request.strip().split(' ')\n        if request_list[0] == \"GET\" and len(request_list) == 3 and request_list[2] == \"HTTP/1.1\":\n            filename = request_list[1]\n            if os.path.exists(filename):\n                file = open(filename, \"r\")\n                content = file.read()\n                response = f\"HTTP/1.1 200 OK\\r\\nContent-Length: {len(content)}\\r\\n\\r\\n{content}\"\n                return response\n            else:\n                response = \"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\nFile Not Found\"\n        else:\n            response = \"HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request\"\n    except Exception:\n        response = \"HTTP/1.1 500 INTERNAL SERVER ERROR\\r\\n\\r\\nInternal Server Error\"\n\n    return response", "compilation_passed": true, "time": 0.002637147903442383, "tests_passed": true, "error": null}
{"code": "# Split the request into method, path, and HTTP version\n    try:\n        method, path, http_version = request.split(' ')\n    except ValueError:\n        # If the request is invalid, return a \"400 Bad Request\" response\n        return \"HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request\"\n\n    # Check if the method is GET\n    if method != 'GET':\n        return \"HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request\"\n\n    # Remove the leading slash from the path and split the path into filename and extension\n    filename, file_extension = os.path.splitext(path[1:])\n\n    # Check if the extension is allowed\n    allowed_extensions = ['.txt', '.html', '.css', '.js', '.jpg', '.jpeg', '.png', '.gif']\n    if file_extension.lower() not in allowed_extensions:\n        return \"HTTP/1.1 403", "compilation_passed": false, "time": 8.869171142578125e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "pattern = r'\\w+ (.+?) HTTP'\n    filename = re.findall(pattern, request)[0][1:]\n    try:\n        file = open(filename)\n        content = file.read()\n        file.close()\n        return f'HTTP/1.1 200 OK\\r\\nContent-Length: {len(content)}\\r\\n\\r\\n{content}'\n    except FileNotFoundError:\n        return 'HTTP/1.1 404 NOT FOUND\\r\\n\\r\\nFile Not Found'\n    except Exception:\n        return 'HTTP/1.1 500 INTERNAL SERVER ERROR\\r\\n\\r\\nInternal Server Error'", "compilation_passed": true, "time": 0.0009191036224365234, "tests_passed": false, "error": "IndexError"}
{"code": "try:\n        # Check if the request is a valid HTTP GET request\n        if not request.startswith(\"GET /\") or not request.endswith(\"HTTP/1.1\\r\\n\"):\n            return \"HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request\"\n\n        # Extract the filename from the request\n        filename = request[4:-9]\n        if filename == \"/\":\n            filename = \"/index.html\"\n\n        # Check if the file exists in the current directory\n        if os.path.exists(filename):\n            with open(filename, \"r\") as f:\n                content = f.read()\n\n            # Return a successful HTTP response with the file content\n            response = \"HTTP/1.1 200 OK\\r\\nContent-Length: {}\\r\\n\\r\\n{}\".format(len(content), content)\n            return response\n        else:\n            # Return an error response if the file is not found\n            return \"HTTP/1.1 404 NOT FOUND\\r\\", "compilation_passed": false, "time": 7.510185241699219e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "try:\n        pattern = re.compile(r\"GET /(?P<filename>[^ ]+) HTTP/1.1\")\n        match = pattern.match(request)\n        if match:\n            filename = match.group(\"filename\")\n            if os.path.isfile(filename):\n                with open(filename, \"rb\") as f:\n                    file_content = f.read()\n                    response = (f\"HTTP/1.1 200 OK\\r\\n\"\n                                f\"Content-Length: {len(file_content)}\\r\\n\\r\\n\"\n                                f\"{file_content.decode('utf-8')}\")\n                    return response\n                return \"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\nFile Not Found\"\n        return \"HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request\"\n    except:\n        return \"HTTP/1.1 500 INTERNAL SERVER ERROR\\r\\n\\r\\nInternal Server Error\"", "compilation_passed": true, "time": 0.001363992691040039, "tests_passed": true, "error": null}
{"code": "try:\n        # Extract filename from request\n        filename = re.match(r\"GET /(.*) HTTP/1.1\", request).group(1)\n\n        # Check file existence and read it\n        if os.path.isfile(filename):\n            with open(filename, \"rb\") as file:\n                content = file.read()\n            response = f\"HTTP/1.1 200 OK\\r\\nContent-Length: {len(content)}\\r\\n\\r\\n{content}\"\n        else:\n            response = \"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\nFile Not Found\"\n\n    except Exception as e:\n        print(e)\n        response = \"HTTP/1.1 500 INTERNAL SERVER ERROR\\r\\n\\r\\nInternal Server Error\"\n\n    return response", "compilation_passed": true, "time": 0.0009238719940185547, "tests_passed": true, "error": null}
{"code": "# Define regular expression pattern to match \"GET /<filename> HTTP/1.1\"\n    pattern = r\"GET /(?P<filename>[^ ]+) HTTP/1.1\"\n\n    # Try to match the request with the pattern\n    match = re.match(pattern, request)\n\n    # If the request does not match the pattern\n    if match is None:\n        # Return a 400 Bad Request response with an error message\n        return \"HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request\"\n\n    # Extract the filename from the matched pattern\n    filename = match.group(\"filename\")\n\n    # Construct the full path to the file\n    file_path = f\"server/{filename}\"\n\n    try:\n        # Try to open the file for reading in binary mode\n        with open(file_path, \"rb\") as file:\n            # Read the contents of the file\n            content = file.read()\n\n            # Return a 200 OK response with the content length and file content\n            return f\"HTTP/1.1 ", "compilation_passed": false, "time": 7.200241088867188e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "request = request.strip()\n    # Extract the filename from the request\n    filename = re.findall(r\"GET /(.*) HTTP/1.1\", request)\n\n    if not filename:\n        return \"HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request\"\n\n    filename = filename[0]\n    # Check if the file exists in the directory\n    if not os.path.exists(filename):\n        return \"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\nFile Not Found\"\n\n    try:\n        # Open the file and read its content\n        with open(filename, \"r\") as file:\n            content = file.read()\n        # Construct the HTTP response\n        response = f\"HTTP/1.1 200 OK\\r\\nContent-Length: {len(content)}\\r\\n\\r\\n{content}\"\n    except:\n        # Handle any errors that occur while reading the file\n        return \"HTTP/1.1 500 INTERNAL SERVER ERROR\\r\\n", "compilation_passed": false, "time": 7.295608520507812e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "filename = re.match(r'^GET /([^ ]+) HTTP/1.1$', request)\n    if filename:\n        filename = filename.group(1)\n    else:\n        return \"HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request\"\n    try:\n        with open(filename) as f:\n            content = f.read()\n            return \"HTTP/1.1 200 OK\\r\\nContent-Length: %s\\r\\n\\r\\n%s\" % (len(content), content)\n    except FileNotFoundError:\n        return \"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\nFile Not Found\"\n    except Exception:\n        return \"HTTP/1.1 500 INTERNAL SERVER ERROR\\r\\n\\r\\nInternal Server Error\"", "compilation_passed": true, "time": 0.002424001693725586, "tests_passed": true, "error": null}
{"code": "request_path = re.search(r'GET /([^ ]*) HTTP', request)\n    if request_path is None:\n        return \"HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request\"\n    filename = request_path.group(1)\n    try:\n        if not os.path.exists(filename):\n            return \"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\nFile Not Found\"\n        else:\n            with open(filename, \"rb\") as f:\n                content = f.read()\n            return f\"HTTP/1.1 200 OK\\r\\nContent-Length: {len(content)}\\r\\n\\r\\n{content.decode()}\"\n    except Exception:\n        return \"HTTP/1.1 500 INTERNAL SERVER ERROR\\r\\n\\r\\nInternal Server Error\"", "compilation_passed": true, "time": 0.002357959747314453, "tests_passed": true, "error": null}
{"code": "# Extract the filename from the request\n    filename = None\n    match = re.search(r\"GET /(.*?) HTTP/1.1\", request)\n    if match:\n        filename = match.group(1)\n\n    # Return error if filename not extracted or invalid request\n    if filename is None:\n        return \"HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request\"\n\n    # Check if the filename is in the directory\n    if os.path.isfile(filename):\n        try:\n            # Return the file content as a response\n            with open(filename, 'r') as f:\n                file_content = f.read()\n            return f\"HTTP/1.1 200 OK\\r\\nContent-Length: {len(file_content)}\\r\\n\\r\\n{file_content}\"\n        except Exception as e:\n            # Handle any I/O error\n            return \"HTTP/1.1 500 INTERNAL SERVER ERROR\\r\\n\\r\\nInternal Server Error\"\n    else:\n", "compilation_passed": false, "time": 0.00018095970153808594, "tests_passed": false, "error": "IndentationError"}
{"code": "try:\n        request_list = request.split()\n        if len(request_list) == 3 and request_list[0] == \"GET\":\n            filename = request_list[1][1:]\n            if filename:\n                if os.path.exists(filename):\n                    with open(filename, \"rb\") as file:\n                        file_content = file.read()\n                    return f\"HTTP/1.1 200 OK\\r\\nContent-Length: {len(file_content)}\\r\\n\\r\\n{file_content}\"\n                else:\n                    return \"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\nFile Not Found\"\n            else:\n                return \"HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request\"\n        else:\n            return \"HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request\"\n    except Exception as e:\n        return \"HTTP/1.1 500 INTERNAL SERVER ERROR\\r\\", "compilation_passed": false, "time": 8.392333984375e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Check the request format\n    request_pattern = re.compile(r'GET /([^\\s]+)\\s+HTTP/1.1')\n    match = request_pattern.match(request)\n    if match is None:\n        return \"HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request\"\n\n    # Extract the filename from the request\n    filename = match.group(1)\n\n    # Check if the file exists in the server's directory\n    if os.path.exists(filename):\n        try:\n            with open(filename, 'r') as file:\n                file_content = file.read()\n            content_length = len(file_content.encode())\n            return f\"HTTP/1.1 200 OK\\r\\nContent-Length: {content_length}\\r\\n\\r\\n{file_content}\"\n        except IOError:\n            return \"HTTP/1.1 500 INTERNAL SERVER ERROR\\r\\n\\r\\nInternal Server Error\"\n    else:\n        return \"HTTP/1.1", "compilation_passed": false, "time": 7.915496826171875e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "try:\n        if not request:\n            raise ValueError('No request string provided')\n\n        # Extract the filename from the request\n        match = re.match(r'GET /(.+?) HTTP/1.1', request)\n        if not match:\n            return 'HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request'\n\n        filename = match.group(1)\n\n        # Check if the file exists in the server's directory\n        filepath = os.path.join('/server', filename)\n\n        if os.path.exists(filepath):\n            with open(filepath, 'r') as file:\n                # Return the HTTP response with the file contents\n                file_contents = file.read()\n                return 'HTTP/1.1 200 OK\\r\\nContent-Length: {}\\r\\n\\r\\n{}'.format(len(file_contents), file_contents)\n\n        else:\n            return 'HTTP/1.1 404 NOT FOUND\\r\\n\\r\\nFile Not Found", "compilation_passed": false, "time": 7.510185241699219e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "pattern = r\"GET /(?P<filename>[a-zA-Z0-9-]+)\\.txt HTTP/1.1\"\n    match = re.search(pattern, request)\n    if match:\n        filename = match.group(\"filename\")\n        try:\n            with open(f\"./{filename}.txt\", \"rb\") as file:\n                file_data = file.read()\n                response = f\"HTTP/1.1 200 OK\\r\\nContent-Length: {len(file_data)}\\r\\n\\r\\n\".encode(\"utf-8\") + file_data\n                return response.decode(\"utf-8\")\n        except FileNotFoundError:\n            return \"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\nFile Not Found\"\n        except Exception as e:\n            return f\"HTTP/1.1 500 INTERNAL SERVER ERROR\\r\\n\\r\\nInternal Server Error: {str(e)}\"\n    else:\n        return \"HTTP/1.1 40", "compilation_passed": false, "time": 7.772445678710938e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Extract the filename from the HTTP GET request using regular expressions\n    match = re.match(r'^GET\\s+/([^\\s]+)\\s+HTTP/1.1$', request)\n    if match:\n        filename = match.group(1)\n    else:\n        # If the request is invalid, return a Bad Request error response\n        return \"HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request\"\n\n    # Check if the file exists in the server's directory\n    if not os.path.exists(filename):\n        # If the file is not found, return a Not Found error response\n        return \"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\nFile Not Found\"\n\n    try:\n        # Read the contents of the file\n        with open(filename, 'r') as file:\n            content = file.read()\n\n        # Return an OK response including the file content\n        return f\"HTTP/1.1 200 OK\\r\\nContent-Length: {len(content)}\\r\\n\\r\\", "compilation_passed": false, "time": 5.817413330078125e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "try:\n        pattern = r'^GET\\s+/(?P<filename>\\S+)\\s+HTTP/1.1$'\n        match = re.match(pattern, request)\n        if not match:\n            return \"HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request\"\n\n        filename = match.group('filename')\n        if not os.path.isfile(filename):\n            return \"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\nFile Not Found\"\n\n        with open(filename, \"rb\") as file:\n            content = file.read()\n\n        content_length = len(content)\n        return f\"HTTP/1.1 200 OK\\r\\nContent-Length: {content_length}\\r\\n\\r\\n{content.decode()}\"\n    except Exception:\n        return \"HTTP/1.1 500 INTERNAL SERVER ERROR\\r\\n\\r\\nInternal Server Error\"", "compilation_passed": true, "time": 0.0024259090423583984, "tests_passed": true, "error": null}
{"code": "try:\n        # Extract the filename from the request\n        match = re.match(r'GET /(.+) HTTP/1.1', request)\n        if match is None:\n            return \"HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request\"\n        filename = match.group(1)\n\n        # Check if the file exists\n        if not os.path.isfile(filename):\n            return \"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\nFile Not Found\"\n\n        # Read the contents of the file\n        with open(filename, 'r') as f:\n            content = f.read()\n\n        # Return an HTTP response\n        return \"HTTP/1.1 200 OK\\r\\nContent-Length: {}\\r\\n\\r\\n{}\".format(len(content), content)\n\n    except Exception as e:\n        return \"HTTP/1.1 500 INTERNAL SERVER ERROR\\r\\n\\r\\nInternal Server Error\"", "compilation_passed": true, "time": 0.0023238658905029297, "tests_passed": true, "error": null}
{"code": "try:\n        # Extract filename from the request\n        filename = request.split()[1].strip('/')\n\n        # Check if the file exists\n        if not os.path.isfile(filename):\n            return \"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\nFile Not Found\"\n\n        with open(filename, 'r') as file:\n            content = file.read()\n            content_length = len(content)\n\n        # Return the file content with appropriate response\n        response = f\"HTTP/1.1 200 OK\\r\\nContent-Length: {content_length}\\r\\n\\r\\n{content}\"\n        return response\n    except Exception as e:\n        print(f\"Exception occurred: {e}\")\n        return \"HTTP/1.1 500 INTERNAL SERVER ERROR\\r\\n\\r\\nInternal Server Error\"", "compilation_passed": true, "time": 0.0009670257568359375, "tests_passed": true, "error": null}
{"code": "try:\n        match = re.search(r'GET /(.+) HTTP/1.1', request)\n        if match:\n            filename = match.group(1)\n            if os.path.exists(filename):\n                with open(filename, 'rb') as f:\n                    file_content = f.read()\n                    response = \"HTTP/1.1 200 OK\\r\\nContent-Length: %d\\r\\n\\r\\n\" % len(file_content) + file_content.decode()\n            else:\n                response = \"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\nFile Not Found\"\n        else:\n            response = \"HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request\"\n    except:\n        response = \"HTTP/1.1 500 INTERNAL SERVER ERROR\\r\\n\\r\\nInternal Server Error\"\n    return response", "compilation_passed": true, "time": 0.002262115478515625, "tests_passed": true, "error": null}
{"code": "# Extract the filename from the request\n    filename = re.search(r'GET /(.+?) HTTP/1.1', request)\n    if filename is None:\n        return \"HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request\"\n    filename = filename.group(1)\n\n    try:\n        if os.path.exists(filename):\n            with open(filename, 'r') as file:\n                file_content = file.read()\n                return f\"HTTP/1.1 200 OK\\r\\nContent-Length: {len(file_content)}\\r\\n\\r\\n{file_content}\"\n        else:\n            return \"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\nFile Not Found\"\n    except:\n        return \"HTTP/1.1 500 INTERNAL SERVER ERROR\\r\\n\\r\\nInternal Server Error\"", "compilation_passed": true, "time": 0.0023589134216308594, "tests_passed": true, "error": null}
{"code": "try:\n        # Split the request into path and HTTP version\n        path, http_version = request.split(' ', 2)[:2]\n\n        # Extract the filename from the path\n        filename = path[1:]\n\n        # Check if the file exists and is a regular file\n        if os.path.exists(filename) and os.path.isfile(filename):\n\n            # Open the file in binary mode to read the content\n            with open(filename, 'rb') as file:\n\n                # Read the content of the file\n                file_content = file.read()\n\n            # Get the size of the file content\n            content_length = len(file_content)\n\n            # Construct the response headers and content\n            response_headers = f\"{http_version} 200 OK\\r\\nContent-Length: {content_length}\\r\\n\"\n            response_content = file_content\n\n            # Combine the headers and content for the response\n            response = response_headers + \"\\r\\n\" + response_content.decode()\n        else:\n            # Return a \"File Not Found", "compilation_passed": false, "time": 0.00019311904907226562, "tests_passed": false, "error": "IndentationError"}
{"code": "try:\n        # Extracting the filename from the request\n        filename = re.findall(r'\\/(.*?) ', request)[0]\n\n        # Checking the file existence\n        if os.path.isfile(filename):\n            # Opening the file in binary mode to get the file content\n            with open(filename, \"rb\") as f:\n                file_content = f.read()\n                # Returning the HTTP response with the file content\n                return f\"HTTP/1.1 200 OK\\r\\nContent-Length: {len(file_content)}\\r\\n\\r\\n{file_content}\"\n        else:\n            # Returning the HTTP response with the error message if the file is not found\n            return \"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\nFile Not Found\"\n    except IndexError:\n        # Returning the HTTP response with the error message if the request is invalid\n        return \"HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request\"\n    except IOError:\n        # Return", "compilation_passed": false, "time": 0.00015091896057128906, "tests_passed": false, "error": "IndentationError"}
{"code": "filename = re.search(r'\\/(.+)', request)\n    if filename is None or not filename.group(1):\n        return \"HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request\"\n    filename = filename.group(1)\n    try:\n        if not os.path.isfile(filename):\n            return \"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\nFile Not Found\"\n        with open(filename, \"r\") as f:\n            content = f.read()\n        content_length = len(content)\n        return \"HTTP/1.1 200 OK\\r\\nContent-Length: {}\\r\\n\\r\\n{}\".format(content_length, content)\n    except:\n        return \"HTTP/1.1 500 INTERNAL SERVER ERROR\\r\\n\\r\\nInternal Server Error\"", "compilation_passed": true, "time": 0.0021309852600097656, "tests_passed": true, "error": null}
{"code": "try:\n        # Validate the request format\n        if not re.match(r\"GET /.*\\.txt HTTP/1.1\", request):\n            raise ValueError(\"Bad Request\")\n        # Extract the filename from the request\n        filename = re.search(r\"GET /(.*)\\.txt HTTP/1.1\", request).group(1) + \".txt\"\n        # Check if the file exists\n        if not os.path.isfile(filename):\n            raise FileNotFoundError(\"File Not Found\")\n        # Open the file and read its contents\n        with open(filename, \"r\") as f:\n            content = f.read()\n        # Return an HTTP response with the file contents\n        return f\"HTTP/1.1 200 OK\\r\\nContent-Length: {len(content)}\\r\\n\\r\\n{content}\"\n    except Exception as e:\n        # Handle errors and return an appropriate error response\n        if isinstance(e, FileNotFoundError):\n            return f\"HTTP/1.1 404 NOT FOUND\\r\\", "compilation_passed": false, "time": 9.083747863769531e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "try:\n        path = os.getcwd() + \"/files\"  # Specify the directory where files are stored\n        regex = re.compile(\"GET /(?P<filename>\\S+) HTTP/1.1\")  # Compile a regular expression for extracting filename\n        match = regex.match(request)  # Match the request with the regular expression\n        if match:\n            filename = match.group(\"filename\")  # Extract filename from the request\n            if \"../\" in filename:  # Handle special filenames like \"../../../etc/passwd\"\n                return \"HTTP/1.1 403 FORBIDDEN\\r\\n\\r\\nForbidden\"\n            with open(os.path.join(path, filename), \"rb\") as file:  # Open the file in binary mode\n                file_content = file.read()  # Read file content\n            return (f\"HTTP/1.1 200 OK\\r\\nContent-Length: {len(file_content)}\\r\\n\\r\\n{file_content}\")\n", "compilation_passed": false, "time": 0.0001678466796875, "tests_passed": false, "error": "SyntaxError"}
{"code": "try:\n        # Extract the filename from the request\n        filename = request.split()[1].lstrip('/')\n\n        # Check if the filename is valid and does not contain any directory traversal attempts\n        if os.path.isfile(filename) and re.match(r'^[^.][^/]*$', filename):\n\n            # Open the file and read its contents\n            with open(filename, \"rb\") as file:\n                contents = file.read()\n\n            # Construct the response with the file content\n            response = f\"HTTP/1.1 200 OK\\r\\nContent-Length: {len(contents)}\\r\\n\\r\\n{contents.decode()}\"\n        else:\n            # Return a 404 NOT FOUND error response if the file is not found or the request is invalid\n            response = \"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\nFile Not Found\"\n    except Exception:\n        # Return a 500 INTERNAL SERVER ERROR if there is an unexpected error\n        response = \"HTTP/1.1 5", "compilation_passed": false, "time": 6.985664367675781e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "try:\n        if not request.startswith('GET'):\n            raise Exception(\"Bad Request\")\n\n        filename = request.split(' ')[1].strip('/')\n        if filename:\n            try:\n                with open(filename, 'rb') as f:\n                    content = f.read()\n                    response = f\"HTTP/1.1 200 OK\\r\\nContent-Length: {len(content)}\\r\\n\\r\\n{content.decode()}\"\n            except FileNotFoundError:\n                response = \"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\nFile Not Found\"\n        else:\n            response = \"HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request\"\n\n        return response\n\n    except Exception as e:\n        return f\"HTTP/1.1 500 INTERNAL SERVER ERROR\\r\\n\\r\\nInternal Server Error: {e}\"", "compilation_passed": true, "time": 0.001027822494506836, "tests_passed": true, "error": null}
{"code": "try:\n        # Check if request is in a valid format\n        if not re.match(r\"^GET /(\\S+) HTTP/1.1$\", request):\n            raise ValueError(\"Invalid request format\")\n\n        # Extract the filename from the request\n        filename = re.search(r\"^GET /(\\S+) HTTP/1.1$\", request).group(1)\n\n        # Check if the file exists in the server's directory\n        if not os.path.isfile(filename):\n            raise FileNotFoundError(\"File not found\")\n\n        # Open the file and read its contents\n        with open(filename, \"r\") as f:\n            content = f.read()\n\n        # Construct the HTTP response with the file content\n        response = f\"HTTP/1.1 200 OK\\r\\nContent-Length: {len(content)}\\r\\n\\r\\n{content}\"\n\n        return response\n    except FileNotFoundError as e:\n        # Return a 404 NOT FOUND response for a non-existent file\n        response = \"HTTP", "compilation_passed": false, "time": 7.915496826171875e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Extract the filename from the request\n    filename = re.search(r'\\/(.*?) ', request).group(1)\n\n    try:\n        # Open the file and read its content\n        with open(filename, 'r') as file:\n            content = file.read()\n            return \"HTTP/1.1 200 OK\\r\\nContent-Length: {}\\r\\n\\r\\n{}\".format(len(content), content)\n    except FileNotFoundError:\n        # File not found\n        return \"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\nFile Not Found\"\n    except:\n        # Invalid request or internal server error\n        return \"HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request\"", "compilation_passed": true, "time": 0.0008997917175292969, "tests_passed": false, "error": "AttributeError"}
