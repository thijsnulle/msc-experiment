{"code": "# Pearson correlation coefficient\n    correlation, _ = stats.pearsonr(a, b)\n\n    # Create Pandas DataFrame\n    df = pd.DataFrame({'a': a, 'b': b})\n\n    # Draw a scatter plot with a regression line\n    ax = sns.scatterplot(data=df, x='a', y='b', color='red')\n    ax.set_title(f\"Pearson correlation coefficient: {correlation:.2f}\")\n    sns.regplot(data=df, x='a', y='b', scatter=False)\n\n    return correlation, ax", "compilation_passed": true, "time": 0.0013439655303955078, "tests_passed": false, "error": "NameError"}
{"code": "correlation_coef = stats.pearsonr(a, b)[0]\n    df = pd.DataFrame({\"a\": a, \"b\": b})\n    sns.regplot(x=\"a\", y=\"b\", data=df)\n    return correlation_coef, plt", "compilation_passed": true, "time": 0.0010802745819091797, "tests_passed": false, "error": "NameError"}
{"code": "# Calculate the Pearson correlation coefficient\n    correlation = stats.pearsonr(a, b)[0]\n\n    # Create a Pandas DataFrame\n    df = pd.DataFrame({'a': a, 'b': b})\n\n    # Plot a scatter plot with a regression line\n    ax = df.plot.scatter(x='a', y='b', c='b', cmap='viridis', sharex=False)\n    z = np.polyfit(df['a'], df['b'], 1)\n    p = np.poly1d(z)\n    ax.plot(df['a'], p(df['a']))\n\n    return correlation, ax", "compilation_passed": true, "time": 0.12211894989013672, "tests_passed": true, "error": null}
{"code": "# calculate the Pearson correlation coefficient\n    correlation, _ = stats.pearsonr(a, b)\n    # create a DataFrame from the lists\n    data = pd.DataFrame({'a': a, 'b': b})\n    # draw a scatter plot with a regression line\n    ax = data.plot.scatter(x='a', y='b', marker='x', color='red')\n    plt.axline(xy1=(0, 0), slope=correlation, color='blue', label=f'Regression line, r={correlation:.2f}')\n    plt.legend()\n    return correlation, ax", "compilation_passed": true, "time": 0.23487424850463867, "tests_passed": true, "error": null}
{"code": "corrcoef, p_value = stats.pearsonr(a, b)\n    # corrcoef = np.corrcoef(a, b)[0, 1]\n    df = pd.DataFrame({'A': a, 'B': b})\n    sns.lmplot('A', 'B', data=df)\n    ax = plt.gca()\n    return corrcoef, ax", "compilation_passed": true, "time": 0.0015270709991455078, "tests_passed": false, "error": "NameError"}
{"code": "# Your code here\n    pass", "compilation_passed": true, "time": 0.0006511211395263672, "tests_passed": false, "error": "TypeError"}
{"code": "assert len(a) > 0 and len(b) > 0, \"Lists should not be empty\"\n\n    correlation, p = stats.pearsonr(a, b)\n    df = pd.DataFrame({\"a\": a, \"b\": b})\n\n    fig, ax = plt.subplots()\n    df.plot.scatter(x=\"a\", y=\"b\", ax=ax, s=20, c=\"orange\")\n    fit_line = np.polyfit(a, b, 1)\n    ax.plot([min(a), max(a)], [min(a) * fit_line[0] + fit_line[1], max(a) * fit_line[0] + fit_line[1]], linewidth=2)\n    return correlation, ax", "compilation_passed": true, "time": 0.08610892295837402, "tests_passed": true, "error": null}
{"code": "# Calculate the Pearson correlation coefficient.\n    pearson_corr, _ = stats.pearsonr(a, b)\n\n    # Create a Pandas DataFrame from the input lists.\n    df = pd.DataFrame({'a': a, 'b': b})\n\n    # Draw a scatter plot with a regression line.\n    ax = df.plot.scatter(x='a', y='b', xlim=(0, 5), ylim=(0, 10), title=f\"Pearson correlation: {pearson_corr:.2f}\")\n    ax.plot(np.linspace(0, 5), np.linspace(0, 10))\n\n    return pearson_corr, ax", "compilation_passed": true, "time": 0.08464312553405762, "tests_passed": true, "error": null}
{"code": "corr_coef = np.corrcoef(a, b)[0, 1]\n\n    data = {'a': a, 'b': b}\n    df = pd.DataFrame(data)\n    sns.lmplot(x='a', y='b', data=df)\n\n    return corr_coef, ax", "compilation_passed": true, "time": 0.0011019706726074219, "tests_passed": false, "error": "NameError"}
{"code": "# Calculate the Pearson correlation coefficient.\n    correlation = stats.pearsonr(a, b)[0]\n\n    # Create a Pandas DataFrame.\n    df = pd.DataFrame({'a': a, 'b': b})\n\n    # Plot the scatter plot.\n    ax = df.plot.scatter(x='a', y='b', figsize=(10, 10))\n\n    # Calculate the linear regression.\n    result = stats.linregress(a, b)\n\n    # Add the regression line.\n    x_min = np.min(a)\n    x_max = np.max(a)\n    y_min = result.slope * x_min + result.intercept\n    y_max = result.slope * x_max + result.intercept\n    ax.plot([x_min, x_max], [y_min, y_max], color='r')\n\n    # Show the plot.\n    plt.show()\n\n    return correlation, ax", "compilation_passed": true, "time": 0.03953695297241211, "tests_passed": false, "error": "ValueError"}
{"code": "# Your code here", "compilation_passed": true, "time": 0.0008699893951416016, "tests_passed": false, "error": "TypeError"}
{"code": "# Calculate the Pearson correlation coefficient\n    correlation_coefficient, _ = stats.pearsonr(a, b)\n\n    # Create a DataFrame from the lists\n    df = pd.DataFrame(data={'a': a, 'b': b})\n\n    # Create a scatter plot with a regression line\n    sns.set_style(\"whitegrid\")\n    ax = sns.regplot(x='a', y='b', data=df)\n\n    # Return the correlation coefficient and Axes object\n    return correlation_coefficient, ax", "compilation_passed": true, "time": 0.0013661384582519531, "tests_passed": false, "error": "NameError"}
{"code": "correlation = np.corrcoef(a, b)[0, 1]\n    data = pd.DataFrame({'x': a, 'y': b})\n    fig, ax = plt.subplots()\n    ax.scatter(data.x, data.y)\n    slope, intercept, r_value, p_value, std_err = stats.linregress(data.x, data.y)\n    line = lambda x: slope * x + intercept\n    ax.plot(data['x'], data['y'], '.', label='data')\n    ax.plot(data['x'], line(data.x), label='regression line')\n    ax.legend()\n    return correlation, ax", "compilation_passed": true, "time": 0.02644205093383789, "tests_passed": false, "error": "ValueError"}
{"code": "assert isinstance(a, list), \"a must be a list\"\n    assert isinstance(b, list), \"b must be a list\"\n\n    corr = stats.pearsonr(a, b)[0]\n    df = pd.DataFrame({\"a\": a, \"b\": b})\n    ax = df.plot.scatter(x=\"a\", y=\"b\", title=f\"Pearson correlation: {corr:.2f}\", c=\"Dark2\", marker=\"o\")\n    reg = stats.linregress(a, b)\n    ax.plot(a, reg.slope * np.array(a) + reg.intercept, color=\"red\")\n    return corr, ax", "compilation_passed": true, "time": 0.016544818878173828, "tests_passed": false, "error": "ValueError"}
{"code": "corrcoef = stats.pearsonr(a, b)\n    df = pd.DataFrame({'a': a, 'b': b})\n    ax = df.plot.scatter(x='a', y='b', title='Pearson correlation coefficient: ' + str(corrcoef), figsize=(10, 6))\n    ax.set_xlabel('a')\n    ax.set_ylabel('b')\n    ax.plot(np.unique(a), np.poly1d(np.polyfit(a, b, 1))(np.unique(a)), c='r')\n    return corrcoef[0], ax", "compilation_passed": true, "time": 0.08736681938171387, "tests_passed": true, "error": null}
{"code": "correlation = np.corrcoef(a, b)\n    df = pd.DataFrame({'a': a, 'b': b})\n    fig, ax = plt.subplots()\n    ax = sns.regplot(x='a', y='b', data=df, ax=ax)\n    plt.show()\n\n    return correlation, ax", "compilation_passed": true, "time": 0.012433052062988281, "tests_passed": false, "error": "NameError"}
{"code": "corrcoef, _ = stats.pearsonr(a, b)\n    df = pd.DataFrame(data={'a': a, 'b': b})\n    fig, ax = plt.subplots()\n    df.plot.scatter(x='a', y='b', ax=ax)\n    line = np.polyfit(df.a, df.b, 1)\n    ax.plot(df.a, df.a * line[0] + line[1], label=f\"{line[0]:.2f}x + {line[1]:.2f}\")\n    plt.legend()\n    ax.grid()\n    ax.set_title(f\"{round(corrcoef, 1)}\")\n    return corrcoef, ax", "compilation_passed": true, "time": 0.08768486976623535, "tests_passed": true, "error": null}
{"code": "coef, _, _, _, _ = stats.linregress(a, b)\n    df = pd.DataFrame({'A': a, 'B': b})\n    ax = df.plot.scatter(x='A', y='B', s=5, c='r', label='Original data', title='Scatter plot with regression line')\n    plt.plot(a, [coef * x + np.mean(b) - coef * np.mean(a) for x in a], c='k', label='Regression line')\n    plt.legend(loc='best')\n    return coef, ax", "compilation_passed": true, "time": 0.018879175186157227, "tests_passed": true, "error": null}
{"code": "# Calculate the Pearson correlation coefficient\n    correlation_coefficient, _ = stats.pearsonr(a, b)\n\n    # Generate a Pandas DataFrame from the lists\n    df = pd.DataFrame({'a': a, 'b': b})\n\n    # Draw the scatter plot with regression line\n    ax = df.plot.scatter(x='a', y='b', figsize=(5, 4), title='Scatter Plot with Regression Line')\n    slope, intercept, _, _, _ = stats.linregress(df['a'], df['b'])\n    ax.axline(xy1=(0, intercept), slope=slope, color='r', label='Regression Line')\n\n    return correlation_coefficient, ax", "compilation_passed": true, "time": 0.035398006439208984, "tests_passed": false, "error": "ValueError"}
{"code": "correlation = stats.pearsonr(a, b)[0]\n\n    df = pd.DataFrame(data={\"a\": a, \"b\": b})\n    ax = df.plot.scatter(x=\"a\", y=\"b\", c=\"red\")\n\n    slope, intercept, _, _, _ = stats.linregress(a, b)\n    ax.plot(a, [slope * x + intercept for x in a])\n\n    return correlation, ax", "compilation_passed": true, "time": 0.03295588493347168, "tests_passed": false, "error": "ValueError"}
{"code": "correlation, p_value = stats.pearsonr(a, b)\n    df = pd.DataFrame({'a': a, 'b': b})\n    sns.regplot(x='a', y='b', data=df)\n    plt.show()\n    return correlation, ax", "compilation_passed": true, "time": 0.0014600753784179688, "tests_passed": false, "error": "NameError"}
{"code": "r, _ = stats.pearsonr(a, b)\n    data = {'a': a, 'b': b}\n    df = pd.DataFrame(data)\n    ax = df.plot(kind='scatter', x='a', y='b', color='red')\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['a'], df['b'])\n    x_values = np.linspace(df['a'].min(), df['a'].max(), 100)\n    ax.plot(x_values, slope * x_values + intercept, '-g')\n    plt.show()\n    return r, ax", "compilation_passed": true, "time": 0.032691001892089844, "tests_passed": false, "error": "ValueError"}
{"code": "data = {'a': a, 'b': b}\n    df = pd.DataFrame(data)\n    correlation, _ = stats.pearsonr(a, b)\n    ax = df.plot.scatter(x='a', y='b', color='purple', label='Scatter Plot', grid=True)\n    ax.plot(a, b, 'r-', label='Regression Line', linewidth=1)\n    ax.set_title('Scatter Plot with Regression Line')\n    ax.set_xlabel('a')\n    ax.set_ylabel('b')\n    return correlation, ax", "compilation_passed": true, "time": 0.25608396530151367, "tests_passed": true, "error": null}
{"code": "correlation = stats.pearsonr(a, b)[0]\n    data = pd.DataFrame({'a': a, 'b': b})\n    ax = sns.regplot(x='a', y='b', data=data)\n    return correlation, ax", "compilation_passed": true, "time": 0.0015368461608886719, "tests_passed": false, "error": "NameError"}
{"code": "# Calculate the Pearson correlation coefficient\n    correlation = np.corrcoef(a, b)[0][1]\n\n    # Generate a Pandas DataFrame\n    data = pd.DataFrame({'a': a, 'b': b})\n\n    # Draw a scatter plot with a regression line\n    ax = data.plot.scatter(x='a', y='b', fontsize=16, marker='o', color='blue')\n    slope, intercept, r, p, stderr = stats.linregress(data['a'], data['b'])\n    line = lambda x: x * slope + intercept\n    ax.plot(data['a'], line(data['a']), color='orange', lw=2, ls='--', label='regression line')\n\n    return correlation, ax", "compilation_passed": true, "time": 0.038046836853027344, "tests_passed": false, "error": "ValueError"}
{"code": "# Calculate the Pearson correlation coefficient.\n    pearson_corr = stats.pearsonr(a, b)\n\n    # Convert the lists to a Pandas DataFrame.\n    data = {'a': a, 'b': b}\n    df = pd.DataFrame(data)\n\n    # Draw the scatter plot.\n    ax = df.plot.scatter(x='a', y='b', color='purple')\n\n    # Calculate the linear regression line.\n    slope, intercept, _, _, _ = stats.linregress(a, b)\n    regression_line = [slope * x + intercept for x in a]\n\n    # Add the regression line to the plot.\n    ax.plot(a, regression_line, 'r')\n\n    return pearson_corr, ax", "compilation_passed": true, "time": 0.01809978485107422, "tests_passed": false, "error": "TypeError"}
{"code": "r = stats.pearsonr(a, b)[0]\n    df = pd.DataFrame({'a': a, 'b': b})\n    ax = df.plot.scatter('a', 'b', s=500)\n    plt.scatter(a, b, color='red', s=500, marker='.', label='a vs b')\n    plt.plot(a, r * np.array(a))  # regression line with scatterplot\n    plt.show()\n    return r, ax", "compilation_passed": true, "time": 0.08752727508544922, "tests_passed": true, "error": null}
{"code": "correlation_coefficient = np.corrcoef(a, b)[0, 1]\n\n    df = pd.DataFrame({'x': a, 'y': b})\n\n    x = df['x']\n    y = df['y']\n    slope, intercept, r_value, p_value, std_err = stats.linregress(x, y)\n\n    def regression_line(x):\n        return slope * x + intercept\n\n    regression_line_x = [min(x), max(x)]\n    regression_line_y = regression_line(regression_line_x)\n\n    ax = df.plot.scatter(x='x', y='y', c='red', edgecolor='black')\n    ax.plot(regression_line_x, regression_line_y, color='blue')\n\n    return correlation_coefficient, ax", "compilation_passed": true, "time": 0.0013439655303955078, "tests_passed": false, "error": "TypeError"}
{"code": "df = pd.DataFrame({'a': a, 'b': b})\n    corr = df['a'].corr(df['b'])\n    slope, intercept, r, _, _ = stats.linregress(df['a'], df['b'])\n\n    fig, ax = plt.subplots()\n    ax.scatter(df['a'], df['b'])\n    ax.set(xlabel='a', ylabel='b', title='Scatter plot with regression line')\n\n    x = np.arange(min(df['a']), max(df['a'])+1)\n    ax.plot(x, [slope * xi + intercept for xi in x], 'r-')\n\n    return corr, ax", "compilation_passed": true, "time": 0.01399087905883789, "tests_passed": false, "error": "ValueError"}
{"code": "correlation = stats.pearsonr(a, b)[0]\n\n    data = pd.DataFrame({'a': a, 'b': b})\n\n    ax = data.plot.scatter(x='a', y='b', title='Scatter plot with a regression line', figsize=(6, 6))\n    ax.text(min(a), min(b), f'$r = {correlation:.1f}$', fontsize=12)\n\n    slope, intercept, _, _, _ = stats.linregress(a, b)\n    x = np.array(data['a'])\n    y = slope * x + intercept\n    ax.plot(x, y, 'r', label='Regression line')\n    ax.legend(loc='upper left')\n\n    return correlation, ax", "compilation_passed": true, "time": 0.03695797920227051, "tests_passed": false, "error": "ValueError"}
