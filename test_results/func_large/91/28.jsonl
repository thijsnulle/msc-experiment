{"code": "if column1 not in data.columns:\n        raise ValueError(f\"Column '{column1}' not found in DataFrame.\")\n    if column2 not in data.columns:\n        raise ValueError(f\"Column '{column2}' not found in DataFrame.\")\n\n    slope, intercept, r_value, p_value, std_err = linregress(\n        data[column1], data[column2]\n    )\n\n    fig, ax = plt.subplots()\n    ax.plot(data[column1], data[column2], \"o\")\n    ax.plot(data[column1], slope * data[column1] + intercept, \"-\")\n    ax.set_xlabel(column1)\n    ax.set_ylabel(column2)\n    ax.set_title(\"Linear Regression: \" + column1 + \" vs. \" + column2)\n    ax.text(\n        0.05,\n        0.95,\n        f\"Slope = {slope:.2f}\\nIntercept = {intercept:.2", "compilation_passed": false, "time": 0.00013875961303710938, "tests_passed": false, "error": "SyntaxError"}
{"code": "if column1 not in data.columns:\n        raise ValueError(f\"Column {column1} not found in data\")\n    if column2 not in data.columns:\n        raise ValueError(f\"Column {column2} not found in data\")\n\n    x = data[column1]\n    y = data[column2]\n\n    slope, intercept, r_value, p_value, std_err = linregress(x, y)\n    print(f\"Regression result for {column1} and {column2}: Slope={slope}, Intercept={intercept}, R-value={r_value}, P-value={p_value}, Std-err={std_err}\")\n\n    ax = plt.subplot()\n    ax.scatter(x, y)\n    ax.plot(x, slope * x + intercept, '-r', label=f'y={slope:.2f}x+{intercept:.2f}')\n    ax.set_xlabel(column1)\n    ax.set_ylabel(column2)\n    ax.legend()", "compilation_passed": true, "time": 0.003278970718383789, "tests_passed": false, "error": "TypeError"}
{"code": "# Check if the specified columns exist in the DataFrame\n    if column1 not in data.columns or column2 not in data.columns:\n        raise ValueError(\"Column not found in the dataset.\")\n\n    # Perform the linear regression\n    slope, intercept, r_value, p_value, std_err = linregress(data[column1], data[column2])\n    print(f\"Slope: {slope}, Intercept: {intercept}, R-value: {r_value}, P-value: {p_value}, Standard Error: {std_err}\")\n\n    # Create a plot of the data with the fitted line\n    ax = plt.subplot()\n    plt.scatter(data[column1], data[column2])\n    plt.plot(data[column1], slope * data[column1] + intercept, color='red')\n    plt.xlabel(column1)\n    plt.ylabel(column2)\n    plt.title('Linear Regression')\n\n    return (slope, intercept, r_value, p_value, std_err),", "compilation_passed": true, "time": 0.0023508071899414062, "tests_passed": false, "error": "ValueError"}
{"code": "# Check if columns exist in data\n    if column1 not in data.columns or column2 not in data.columns:\n        raise ValueError(\"Invalid column name\")\n\n    # Perform linear regression\n    slope, intercept, r, p, stderr = linregress(data[column1], data[column2])\n\n    # Plot the data and fitted line\n    fig, ax = plt.subplots()\n    ax.scatter(data[column1], data[column2])\n    ax.plot(data[column1], slope * data[column1] + intercept, '-r')\n    ax.set_xlabel(column1)\n    ax.set_ylabel(column2)\n\n    return (slope, intercept, r, p, stderr), ax", "compilation_passed": true, "time": 0.01300501823425293, "tests_passed": true, "error": null}
{"code": "if column1 not in data.columns or column2 not in data.columns:\n        raise ValueError(\"Specified columns do not exist in the DataFrame.\")\n\n    x = data[column1].to_numpy()\n    y = data[column2].to_numpy()\n    regress = linregress(x, y)\n    print(f\"The slope is {regress.slope} and the intercept is {regress.intercept}\")\n\n    ax = plt.axes()\n    ax.plot(x, y, '.')\n    ax.plot(x, regress.intercept + regress.slope * x, '-')\n\n    return (regress.slope, regress.intercept, regress.rvalue, regress.pvalue, regress.stderr), ax", "compilation_passed": true, "time": 0.015088319778442383, "tests_passed": true, "error": null}
{"code": "# Check if the specified columns exist in the DataFrame\n    if column1 not in data.columns or column2 not in data.columns:\n        raise ValueError(\"One or more specified columns do not exist in the DataFrame.\")\n\n    # Perform linear regression\n    result = linregress(data[column1], data[column2])\n    slope, intercept, rvalue, pvalue, stderr = result\n\n    # Create a plot of the original data and the fitted line\n    x = data[column1]\n    y = data[column2]\n    plt.scatter(x, y)\n    plt.plot(x, intercept + slope * x, label=f'y = {slope:.2f}x + {intercept:.2f}')\n    plt.xlabel(column1)\n    plt.ylabel(column2)\n    plt.title('Linear Regression')\n    plt.legend()\n    plt.show()\n\n    # Return the regression results and the plot axes\n    return result, plt.gca()", "compilation_passed": true, "time": 0.003412008285522461, "tests_passed": true, "error": null}
{"code": "if not (column1 in data.columns and column2 in data.columns):\n        raise ValueError('Specified columns do not exist in the DataFrame')\n\n    x = data[column1].values\n    y = data[column2].values\n\n    slope, intercept, r_value, p_value, std_err = linregress(x, y)\n\n    plt.scatter(x, y)\n    plt.plot(x, slope * x + intercept)\n    plt.xlabel(column1)\n    plt.ylabel(column2)\n    ax = plt.gca()\n\n    return (slope, intercept, r_value, p_value, std_err), ax", "compilation_passed": true, "time": 0.002089977264404297, "tests_passed": true, "error": null}
{"code": "# Check if the specified columns exist in the DataFrame\n    if column1 not in data.columns or column2 not in data.columns:\n        raise ValueError(\"Specified column does not exist in the DataFrame.\")\n\n    # Extract the specified columns from the DataFrame\n    column1_data = data[column1]\n    column2_data = data[column2]\n\n    # Perform linear regression\n    slope, intercept, r_value, p_value, std_err = linregress(column1_data, column2_data)\n\n    # Plot the data and fitted line\n    fig, ax = plt.subplots()\n    ax.scatter(column1_data, column2_data, color='blue')\n    ax.plot(column1_data, intercept + slope * column1_data, color='red')\n    ax.set_xlabel(column1)\n    ax.set_ylabel(column2)\n    ax.set_title('Linear Regression')\n\n    # Return the result and the Axes object\n    return (slope, intercept, r_value, p_value, std", "compilation_passed": false, "time": 0.00022220611572265625, "tests_passed": false, "error": "SyntaxError"}
{"code": "if column1 not in data.columns:\n        raise ValueError(f\"Column '{column1}' not found in the DataFrame\")\n    if column2 not in data.columns:\n        raise ValueError(f\"Column '{column2}' not found in the DataFrame\")\n\n    # Linear regression\n    slope, intercept, r_value, p_value, std_err = linregress(data[column1], data[column2])\n    x_line = np.linspace(data[column1].min(), data[column1].max(), 100)\n    y_line = slope * x_line + intercept\n\n    # Plotting\n    fig, ax = plt.subplots()\n    ax.scatter(data[column1], data[column2])\n    ax.plot(x_line, y_line, label=f'Slope: {slope:.2f}\\nIntercept: {intercept:.2f}\\nr-value: {r_value:.2f}')\n    ax.set_xlabel(column1)\n    ax.set_", "compilation_passed": true, "time": 0.0013701915740966797, "tests_passed": false, "error": "NameError"}
{"code": "if column1 not in data.columns or column2 not in data.columns:\n        raise ValueError(f\"Columns {column1} and {column2} must exist in the DataFrame\")\n\n    # Extract the data from the specified columns\n    x = data[column1]\n    y = data[column2]\n\n    # Perform a linear regression\n    slope, intercept, r_value, p_value, std_err = linregress(x, y)\n\n    # Create a scatter plot of the original data\n    ax = plt.subplot(1, 1, 1)\n    plt.scatter(x, y)\n    plt.xlabel(column1)\n    plt.ylabel(column2)\n\n    # Add the fitted line to the plot\n    plt.plot(x, slope * x + intercept, color='r')\n    plt.title(f\"Linear Regression: {column1} vs. {column2}\")\n\n    # Format and display the plot\n    plt.tight_layout()\n    plt.show()\n\n    return slope, intercept, r_value, p_value,", "compilation_passed": true, "time": 0.05927705764770508, "tests_passed": false, "error": "ValueError"}
{"code": "# Check if columns exist in the DataFrame\n    if column1 not in data.columns or column2 not in data.columns:\n        raise ValueError(\"Invalid column names\")\n\n    # Extract the values from the specified columns\n    x = data[column1]\n    y = data[column2]\n\n    # Perform linear regression\n    result = linregress(x, y)\n\n    # Generate a plot\n    ax = plt.scatter(x, y)\n    plt.plot(x, result.slope * x + result.intercept)\n\n    return result, ax", "compilation_passed": true, "time": 0.0022630691528320312, "tests_passed": false, "error": "AttributeError"}
{"code": "if column1 not in data:\n        raise ValueError(f\"Column '{column1}' not found in data\")\n    if column2 not in data:\n        raise ValueError(f\"Column '{column2}' not found in data\")\n    x = data[column1]\n    y = data[column2]\n    slope, intercept, r_value, p_value, std_err = linregress(x, y)\n\n    fig, ax = plt.subplots(figsize=(8, 6))\n\n    ax.scatter(x, y, color='blue', s=30, alpha=0.6, label=f\"{column1} vs {column2} (n={len(x)})\")\n\n    ax.set_xlabel(column1, fontsize=12)\n    ax.set_ylabel(column2, fontsize=12)\n    ax.set_title(f\"Linear Regression: {column1} vs {column2} \\n\"\n                 f\"Slope = {slope:.2f}, Intercept = {intercept:.2", "compilation_passed": false, "time": 0.00011920928955078125, "tests_passed": false, "error": "SyntaxError"}
{"code": "if column1 not in data.columns:\n        raise ValueError(f\"Column {column1} not found in DataFrame\")\n    if column2 not in data.columns:\n        raise ValueError(f\"Column {column2} not found in DataFrame\")\n\n    x = data[column1]\n    y = data[column2]\n\n    slope, intercept, r_value, p_value, std_err = linregress(x, y)\n\n    # Make a scatter plot\n    ax = plt.scatter(x, y, s=20)\n\n    # Plot the best-fit line\n    plt.plot(x, slope * x + intercept)\n    plt.xlabel(column1)\n    plt.ylabel(column2)\n\n    # Return the results and the Axes object\n    return (slope, intercept, r_value, p_value, std_err), ax", "compilation_passed": true, "time": 0.0022389888763427734, "tests_passed": false, "error": "AttributeError"}
{"code": "if column1 not in data.columns or column2 not in data.columns:\n        raise ValueError(\"One or both columns do not exist in the DataFrame.\")\n\n    # Perform the linear regression\n    slope, intercept, r_value, p_value, std_err = linregress(data[column1], data[column2])\n\n    # Generate the plot\n    fig, ax = plt.subplots()\n    ax.scatter(data[column1], data[column2], alpha=0.5)\n    ax.plot(data[column1], slope * data[column1] + intercept, 'r', label='Fitted line')\n    ax.set_xlabel(column1)\n    ax.set_ylabel(column2)\n    ax.legend()\n\n    return (slope, intercept, r_value, p_value, std_err), ax", "compilation_passed": true, "time": 0.013679027557373047, "tests_passed": true, "error": null}
{"code": "# Check if the specified columns exist in the DataFrame\n    if column1 not in data.columns or column2 not in data.columns:\n        raise ValueError(\"One or more specified columns do not exist in the DataFrame.\")\n\n    # Extract the data for the specified columns\n    x = data[column1]\n    y = data[column2]\n\n    # Perform linear regression\n    slope, intercept, r_value, p_value, std_err = linregress(x, y)\n\n    # Create a plot\n    fig, ax = plt.subplots()\n    ax.scatter(x, y)\n    ax.set_xlabel(column1)\n    ax.set_ylabel(column2)\n\n    # Fit a line to the data and plot it\n    fit_line = intercept + slope * x\n    ax.plot(x, fit_line, 'r-')\n\n    # Display the plot\n    plt.show()\n\n    return slope, intercept, r_value, p_value, std_err, ax", "compilation_passed": true, "time": 0.014005899429321289, "tests_passed": false, "error": "ValueError"}
{"code": "if column1 not in data.columns or column2 not in data.columns:\n        raise ValueError(\"The specified columns do not exist in the DataFrame.\")\n\n    x = data[column1].values\n    y = data[column2].values\n    slope, intercept, r_value, p_value, std_err = linregress(x, y)\n\n    plt.plot(x, y, 'o')\n    plt.plot(x, [intercept + slope * i for i in x], '-')\n    plt.title(f\"Regression of {column1} on {column2}\")\n    plt.xlabel(column1)\n    plt.ylabel(column2)\n    ax = plt.gca()\n    plt.show()\n\n    return slope, intercept, r_value, p_value, std_err, ax", "compilation_passed": true, "time": 0.0020380020141601562, "tests_passed": false, "error": "ValueError"}
{"code": "if column1 not in data.columns:\n        raise ValueError(f\"Column '{column1}' not found in the DataFrame.\")\n\n    if column2 not in data.columns:\n        raise ValueError(f\"Column '{column2}' not found in the DataFrame.\")\n\n    x = data[column1]\n    y = data[column2]\n\n    slope, intercept, r, p, std_err = linregress(x, y)\n\n    def line(x):\n        return slope * x + intercept\n\n    line_func = np.vectorize(line)\n\n    fig, ax = plt.subplots()\n    ax.scatter(x, y)\n    ax.plot(x, line_func(x), 'r')\n    ax.set_xlabel(column1)\n    ax.set_ylabel(column2)\n    plt.show()\n\n    return slope, intercept, r, p, std_err, ax", "compilation_passed": true, "time": 0.0013549327850341797, "tests_passed": false, "error": "NameError"}
{"code": "# Check if the specified columns exist in the DataFrame\n    if column1 not in data.columns:\n        raise ValueError(f\"Column '{column1}' not found in DataFrame.\")\n    if column2 not in data.columns:\n        raise ValueError(f\"Column '{column2}' not found in DataFrame.\")\n\n    # Perform the linear regression\n    slope, intercept, r_value, p_value, std_err = linregress(data[column1], data[column2])\n\n    # Generate the plot\n    plt.figure()\n    ax = plt.subplot(111)\n    ax.scatter(data[column1], data[column2])\n    ax.plot(data[column1], data[column1] * slope + intercept, color='red')\n    ax.set_xlabel(column1)\n    ax.set_ylabel(column2)\n    ax.set_title(f\"Linear Regression of '{column1}' and '{column2}'\")\n\n    # Return the result and the Axes object\n    return (slope,", "compilation_passed": false, "time": 0.00024509429931640625, "tests_passed": false, "error": "SyntaxError"}
{"code": "if column1 not in data.columns:\n        raise ValueError(f\"Column '{column1}' not found in the DataFrame.\")\n    if column2 not in data.columns:\n        raise ValueError(f\"Column '{column2}' not found in the DataFrame.\")\n\n    x = data[column1]\n    y = data[column2]\n\n    result = linregress(x, y)\n\n    ax = plt.figure().gca()\n    ax.scatter(x, y, color=\"red\")\n\n    plt.xlabel(column1)\n    plt.ylabel(column2)\n    plt.title(\"Linear Regression\")\n\n    ax.text(0.05, 0.95, f\"Slope: {result.slope:.2f}\", transform=ax.transAxes, verticalalignment='top')\n    ax.text(0.05, 0.90, f\"Intercept: {result.intercept:.2f}\", transform=ax.transAxes, verticalalignment='top')\n    ax.text", "compilation_passed": true, "time": 0.012763023376464844, "tests_passed": false, "error": "TypeError"}
{"code": "# Check if the specified columns exist in the DataFrame\n    if column1 not in data.columns:\n        raise ValueError(f\"Column {column1} does not exist in the DataFrame\")\n\n    if column2 not in data.columns:\n        raise ValueError(f\"Column {column2} does not exist in the DataFrame\")\n\n    # Perform the linear regression\n    slope, intercept, r_value, p_value, std_err = linregress(\n        data[column1], data[column2]\n    )\n\n    # Generate the plot\n    ax = plt.subplot()\n    ax.plot(data[column1], data[column2], 'o', label='Original data')\n    ax.plot(data[column1],\n            intercept + slope * np.array(data[column1]), label='Fitted line')\n\n    return (slope, intercept, r_value, p_value, std_err), ax", "compilation_passed": true, "time": 0.0017952919006347656, "tests_passed": false, "error": "NameError"}
{"code": "if column1 not in data.columns or column2 not in data.columns:\n        raise ValueError(\"Both columns must exist in the DataFrame.\")\n\n    x = data[column1]\n    y = data[column2]\n\n    # Perform the linear regression\n    slope, intercept, r_value, p_value, std_err = linregress(x, y)\n\n    # Generate the plot\n    ax = plt.figure().gca()\n    ax.scatter(x, y)\n    ax.plot(x, x * slope + intercept, color='red')\n\n    return (slope, intercept, r_value, p_value, std_err), ax", "compilation_passed": true, "time": 0.012776851654052734, "tests_passed": true, "error": null}
{"code": "if column1 not in data.columns or column2 not in data.columns:\n        raise ValueError(\"The specified column names do not exist in the DataFrame.\")\n\n    x = data[column1]\n    y = data[column2]\n    slope, intercept, r_value, p_value, std_err = linregress(x, y)\n\n    ax = plt.figure().gca()\n    plt.title(f\"Linear Regression: {column1} vs {column2}\")\n    plt.scatter(x, y, alpha=0.5)\n    plt.plot(x, x * slope + intercept, color='red')\n    plt.xlabel(column1)\n    plt.ylabel(column2)\n    plt.legend(['Regression Line'])\n    ax.spines['left'].set_position('zero')\n    ax.spines['bottom'].set_position('zero')\n    ax.spines['right'].set_color('none')\n    ax.spines['top'].set_color('none')\n    ax.xaxis.set_ticks", "compilation_passed": true, "time": 0.014483928680419922, "tests_passed": false, "error": "TypeError"}
{"code": "if column1 not in data.columns or column2 not in data.columns:\n        raise ValueError(\"Invalid column name\")\n\n    x = data[column1]\n    y = data[column2]\n    slope, intercept, rvalue, pvalue, stderr = linregress(x, y)\n\n    fig, ax = plt.subplots()\n    ax.scatter(x, y)\n\n    fit_x = np.linspace(x.min(), x.max(), 100)\n    fit_y = slope * fit_x + intercept\n    ax.plot(fit_x, fit_y, '-', color='red')\n\n    ax.set_xlabel(column1)\n    ax.set_ylabel(column2)\n\n    return (slope, intercept, rvalue, pvalue, stderr), ax", "compilation_passed": true, "time": 0.013915061950683594, "tests_passed": false, "error": "NameError"}
{"code": "if column1 not in data.columns:\n        raise ValueError(f\"Column {column1} does not exist\")\n    if column2 not in data.columns:\n        raise ValueError(f\"Column {column2} does not exist\")\n\n    x = data[column1]\n    y = data[column2]\n\n    slope, intercept, r_value, p_value, std_err = linregress(x, y)\n    ax = plt.plot(x, y, 'o', label='Original data', markersize=10)\n    plt.plot(x, intercept + slope*x, 'r', label='Fitted line')\n    plt.xlabel(column1)\n    plt.ylabel(column2)\n    plt.legend()\n    ax = plt.gca()\n    return (slope, intercept, r_value, p_value, std_err), ax", "compilation_passed": true, "time": 0.007770061492919922, "tests_passed": true, "error": null}
{"code": "# Check if columns exist\n    if column1 not in data.columns or column2 not in data.columns:\n        raise ValueError(\"One or more columns do not exist in the DataFrame.\")\n\n    # Extract the x and y data from the columns\n    x = data[column1].astype(float).to_numpy()\n    y = data[column2].astype(float).to_numpy()\n\n    # Perform linear regression\n    slope, intercept, r_value, p_value, std_err = linregress(x, y)\n\n    # Calculate the fitted line\n    fitted_line = slope * x + intercept\n\n    # Generate the plot\n    fig, ax = plt.subplots()\n    ax.scatter(x, y)\n    ax.plot(x, fitted_line, '-r', label=f'Fitted line (R^2 = {r_value:.2f})')\n    ax.set_xlabel(column1)\n    ax.set_ylabel(column2)\n    ax.legend()\n    ax.grid(True)\n\n", "compilation_passed": true, "time": 0.013445854187011719, "tests_passed": false, "error": "TypeError"}
{"code": "if column1 not in data.columns or column2 not in data.columns:\n        raise ValueError(\"Column name does not exist in the DataFrame.\")\n\n    x = data[column1].values\n    y = data[column2].values\n    slope, intercept, r, p, stderr = linregress(x, y)\n\n    fig, ax = plt.subplots()\n    ax.scatter(x, y)\n    ax.plot(x, slope * x + intercept)\n    ax.set_xlabel(column1)\n    ax.set_ylabel(column2)\n    plt.show()\n\n    return slope, intercept, r, p, stderr, ax", "compilation_passed": true, "time": 0.012872934341430664, "tests_passed": false, "error": "ValueError"}
{"code": "if column1 not in data.columns or column2 not in data.columns:\n        raise ValueError(f\"Specified columns {column1} and {column2} do not exist in the DataFrame\")\n\n    # Select the columns to perform the linear regression on\n    selected_data = data[[column1, column2]]\n\n    # Perform the linear regression\n    result = linregress(selected_data[column1], selected_data[column2])\n\n    # Generate the plot\n    ax = selected_data.plot.scatter(column1, column2)\n    ax.plot(selected_data[column1], result.slope * selected_data[column1] + result.intercept, '-r')\n\n    return result, ax", "compilation_passed": true, "time": 0.01775813102722168, "tests_passed": true, "error": null}
{"code": "if column1 not in data.columns or column2 not in data.columns:\n        raise ValueError(\"Invalid column name.\")\n\n    # Perform linear regression\n    result = linregress(data[column1], data[column2])\n\n    # Generate plot\n    fig, ax = plt.subplots()\n    ax.scatter(data[column1], data[column2])\n    ax.plot(data[column1], data[column1] * result.slope + result.intercept, color='red')\n    ax.set_xlabel(column1)\n    ax.set_ylabel(column2)\n    plt.show()\n\n    return result, ax", "compilation_passed": true, "time": 0.01384592056274414, "tests_passed": true, "error": null}
{"code": "if column1 not in data.columns:\n        raise ValueError(f\"Column '{column1}' not found in DataFrame.\")\n    if column2 not in data.columns:\n        raise ValueError(f\"Column '{column2}' not found in DataFrame.\")\n\n    x, y = data[column1], data[column2]\n    slope, intercept, r, p, stderr = linregress(x, y)\n\n    def func(x):\n        return slope * x + intercept\n\n    regression_line = list(map(func, x))\n\n    # Generate a plot of the data and the fitted regression line\n    ax = plt.axes()\n    plt.plot(x, y, 'o', x, regression_line)\n    plt.xlabel(column1)\n    plt.ylabel(column2)\n\n    return (slope, intercept, r, p, stderr), ax", "compilation_passed": true, "time": 0.015310287475585938, "tests_passed": true, "error": null}
{"code": "if column1 not in data.columns:\n        raise ValueError(f\"Column '{column1}' does not exist in the DataFrame\")\n\n    if column2 not in data.columns:\n        raise ValueError(f\"Column '{column2}' does not exist in the DataFrame\")\n\n    x = data[column1]\n    y = data[column2]\n    result = linregress(x, y)\n\n    fig, ax = plt.subplots()\n    ax.plot(x, y, 'o', label='Original data')\n    ax.plot(x, result.intercept + result.slope * x, 'r', label='Fitted line')\n    ax.legend(loc='best')\n    plt.show()\n\n    return result.slope, result.intercept, result.rvalue, result.pvalue, result.stderr", "compilation_passed": true, "time": 0.014007091522216797, "tests_passed": false, "error": "ValueError"}
