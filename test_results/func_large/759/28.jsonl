{"code": "moved_files = []\n\n    # Ensure source_directory exists and destination_directory doesn't exist\n    if os.path.exists(source_directory) and not os.path.exists(destination_directory):\n        # List all files in the source directory\n        files = os.listdir(source_directory)\n\n        # Filter the files based on the pattern\n        filtered_files = fnmatch.filter(files, file_pattern)\n\n        # Move the filtered files to the destination directory\n        for filename in filtered_files:\n            src_path = os.path.join(source_directory, filename)\n            dst_path = os.path.join(destination_directory, filename)\n\n            shutil.move(src_path, dst_path)\n            moved_files.append(filename)\n\n    # Return the moved files\n    return moved_files", "compilation_passed": true, "time": 0.0013430118560791016, "tests_passed": true, "error": null}
{"code": "moved_filenames = []\n    for filename in os.listdir(source_directory):\n        if fnmatch.fnmatch(filename, file_pattern):\n            source_path = os.path.join(source_directory, filename)\n            destination_path = os.path.join(destination_directory, filename)\n            shutil.move(source_path, destination_path)\n            moved_filenames.append(filename)\n    return moved_filenames", "compilation_passed": true, "time": 0.001168966293334961, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "moved_files = []\n\n    if os.path.exists(source_directory):\n        for file_name in os.listdir(source_directory):\n            if fnmatch.fnmatch(file_name, file_pattern):\n                file_path = os.path.join(source_directory, file_name)\n                shutil.move(file_path, destination_directory)\n                moved_files.append(file_path)\n\n    return moved_files", "compilation_passed": true, "time": 0.0011997222900390625, "tests_passed": true, "error": null}
{"code": "# Check if the source_directory is a valid path\n    if not os.path.isdir(source_directory):\n        raise ValueError(f\"Source directory {source_directory} does not exist.\")\n\n    # Check if the destination_directory is a valid path\n    if not os.path.isdir(destination_directory):\n        raise ValueError(f\"Destination directory {destination_directory} does not exist.\")\n\n    # Move files from source_directory to destination_directory based on the file_pattern\n    moved_files = []\n    for file in os.listdir(source_directory):\n        if fnmatch.fnmatch(file, file_pattern):\n            src_path = os.path.join(source_directory, file)\n            dst_path = os.path.join(destination_directory, file)\n            shutil.move(src_path, dst_path)\n            moved_files.append(file)\n\n    return moved_files", "compilation_passed": true, "time": 0.0012080669403076172, "tests_passed": false, "error": "ValueError"}
{"code": "moved_filenames = []\n\n    if not os.path.exists(source_directory):\n        raise FileNotFoundError(f\"The source directory '{source_directory}' does not exist.\")\n\n    if not os.path.exists(destination_directory):\n        os.makedirs(destination_directory)\n\n    for root, _, filenames in os.walk(source_directory):\n        for filename in filenames:\n            if fnmatch.fnmatch(filename, file_pattern):\n                source_path = os.path.join(root, filename)\n                destination_path = os.path.join(destination_directory, filename)\n\n                shutil.move(source_path, destination_path)\n                moved_filenames.append(filename)\n\n    return moved_filenames", "compilation_passed": true, "time": 0.0012059211730957031, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "moved_files = []\n\n    if not os.path.exists(destination_directory):\n        os.makedirs(destination_directory)\n\n    for root, dirs, files in os.walk(source_directory):\n        for filename in files:\n            if fnmatch.fnmatch(filename, file_pattern):\n                source_path = os.path.join(root, filename)\n                destination_path = os.path.join(destination_directory, filename)\n                shutil.move(source_path, destination_path)\n                moved_files.append(filename)\n\n    return moved_files", "compilation_passed": true, "time": 0.0012328624725341797, "tests_passed": false, "error": "OSError"}
{"code": "files_moved = []\n    # Get a list of all the files in the source directory.\n    file_list = os.listdir(source_directory)\n    # Loop through the file list.\n    for filename in file_list:\n        # Check if the file matches the file pattern.\n        if fnmatch.fnmatch(filename, file_pattern):\n            # Construct the source and destination file paths.\n            source_file = os.path.join(source_directory, filename)\n            dest_file = os.path.join(destination_directory, filename)\n            # Move the file.\n            shutil.move(source_file, dest_file)\n            # Add the filename to the list of files moved.\n            files_moved.append(filename)\n    # Return the list of files moved.\n    return files_moved", "compilation_passed": true, "time": 0.0011479854583740234, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Initialize a list to store the filenames of files that are moved\n    moved_files = []\n\n    # Get the list of filenames in the source directory that match the file pattern\n    filenames = [filename for filename in os.listdir(source_directory) if fnmatch.fnmatch(filename, file_pattern)]\n\n    # Loop over each filename and move the corresponding file to the destination directory\n    for filename in filenames:\n        source_path = os.path.join(source_directory, filename)\n        destination_path = os.path.join(destination_directory, filename)\n\n        # Check if the file exists in the destination directory and remove it if it does\n        if os.path.isfile(destination_path):\n            os.remove(destination_path)\n\n        # Move the file from the source to the destination\n        shutil.move(source_path, destination_path)\n\n        # Add the filename of the moved file to the list\n        moved_files.append(filename)\n\n    # Return the list of moved filenames\n    return moved_files<|", "compilation_passed": false, "time": 0.00017714500427246094, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Initialize a list to hold filenames that were moved\n    moved_filenames = []\n\n    # Get a list of all files in the source directory\n    all_filenames = os.listdir(source_directory)\n\n    # Loop through each file and move it if it matches the pattern\n    for filename in all_filenames:\n        if fnmatch.fnmatch(filename, file_pattern):\n            full_filename = os.path.join(source_directory, filename)\n            shutil.move(full_filename, destination_directory)\n            moved_filenames.append(filename)\n\n    # Return the list of moved filenames\n    return moved_filenames", "compilation_passed": true, "time": 0.0011467933654785156, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "moved_files = []\n\n    for filename in os.listdir(source_directory):\n        if fnmatch.fnmatch(filename, file_pattern):\n            source_path = os.path.join(source_directory, filename)\n            destination_path = os.path.join(destination_directory, filename)\n            shutil.move(source_path, destination_path)\n            moved_files.append(filename)\n\n    return moved_files", "compilation_passed": true, "time": 0.0011379718780517578, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "filenames = os.listdir(source_directory)\n    moved_files = []\n\n    for filename in filenames:\n        if fnmatch.fnmatch(filename, file_pattern):\n            source_path = os.path.join(source_directory, filename)\n            destination_path = os.path.join(destination_directory, filename)\n            shutil.move(source_path, destination_path)\n            moved_files.append(filename)\n\n    return moved_files", "compilation_passed": true, "time": 0.0011281967163085938, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Get all file paths in the source directory\n    file_paths = [os.path.join(source_directory, file) for file in os.listdir(source_directory)]\n\n    # Filter the file paths based on the given pattern\n    matching_file_paths = fnmatch.filter(file_paths, os.path.join(source_directory, file_pattern))\n\n    # Move the files to the destination directory\n    moved_files = []\n    for file_path in matching_file_paths:\n        filename = os.path.basename(file_path)\n        shutil.move(file_path, os.path.join(destination_directory, filename))\n        moved_files.append(os.path.relpath(file_path, source_directory))\n\n    return moved_files", "compilation_passed": true, "time": 0.001226186752319336, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Create a list to store the moved filenames\n    moved_files = []\n    # Use glob to find all files in the source directory that match the pattern\n    files = os.path.join(source_directory, file_pattern)\n    for file in glob.glob(files):\n        # Use os.path.basename() to get only the filename from the path\n        filename = os.path.basename(file)\n        # Move the file using shutil.move()\n        shutil.move(file, destination_directory)\n        # Add the filename to the moved_files list\n        moved_files.append(filename)\n    # Return the list of moved filenames\n    return moved_files", "compilation_passed": true, "time": 0.0011250972747802734, "tests_passed": false, "error": "NameError"}
{"code": "# Initialize an empty list to store the moved filenames\n    moved_files = []\n\n    # Check if the source directory exists\n    if os.path.exists(source_directory):\n        # Iterate over all the files and subdirectories in the source directory\n        for filename in os.listdir(source_directory):\n            source_file_path = os.path.join(source_directory, filename)\n\n            # Check if the current item is a file and matches the pattern\n            if os.path.isfile(source_file_path) and fnmatch.fnmatch(filename, file_pattern):\n                # Construct the destination file path\n                destination_file_path = os.path.join(destination_directory, filename)\n\n                # Move the file\n                shutil.move(source_file_path, destination_file_path)\n\n                # Append the filename to the list of moved files\n                moved_files.append(filename)\n\n    # Return the list of moved filenames\n    return moved_files", "compilation_passed": true, "time": 0.001226186752319336, "tests_passed": true, "error": null}
{"code": "moved_files = []\n    for filename in os.listdir(source_directory):\n        if fnmatch.fnmatch(filename, file_pattern):\n            source_file = os.path.join(source_directory, filename)\n            destination_file = os.path.join(destination_directory, filename)\n            if os.path.exists(destination_file):\n                os.remove(destination_file)\n            shutil.move(source_file, destination_file)\n            moved_files.append(filename)\n    return moved_files", "compilation_passed": true, "time": 0.001149892807006836, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "files_moved = []\n    for file_name in os.listdir(source_directory):\n        if fnmatch.fnmatch(file_name, file_pattern):\n            source_file = os.path.join(source_directory, file_name)\n            destination_file = os.path.join(destination_directory, file_name)\n            shutil.move(source_file, destination_file)\n            files_moved.append(file_name)\n    return files_moved", "compilation_passed": true, "time": 0.0011217594146728516, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Ensure that source and destination directories exist\n    os.makedirs(source_directory, exist_ok=True)\n    os.makedirs(destination_directory, exist_ok=True)\n\n    # Find files to move\n    files_to_move = fnmatch.filter(os.listdir(source_directory), file_pattern)\n\n    # Move files\n    moved_files = []\n    for file in files_to_move:\n        source = os.path.join(source_directory, file)\n        destination = os.path.join(destination_directory, file)\n        shutil.move(source, destination)\n        moved_files.append(file)\n\n    return moved_files", "compilation_passed": true, "time": 0.0012133121490478516, "tests_passed": false, "error": "OSError"}
{"code": "filenames_moved = []\n    for filename in os.listdir(source_directory):\n        if fnmatch.fnmatch(filename, file_pattern):\n            src_path = os.path.join(source_directory, filename)\n            dst_path = os.path.join(destination_directory, filename)\n            shutil.move(src_path, dst_path)\n            filenames_moved.append(filename)\n    return filenames_moved", "compilation_passed": true, "time": 0.0011320114135742188, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "filenames = os.listdir(source_directory)\n    moved_filenames = []\n    for filename in filenames:\n        if fnmatch.fnmatch(filename, file_pattern):\n            full_source_path = os.path.join(source_directory, filename)\n            full_destination_path = os.path.join(destination_directory, filename)\n            shutil.move(full_source_path, full_destination_path)\n            moved_filenames.append(full_destination_path)\n    return moved_filenames", "compilation_passed": true, "time": 0.0011441707611083984, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Check if the source directory exists\n    if not os.path.exists(source_directory):\n        print(f\"Error: Source directory '{source_directory}' does not exist.\")\n        return []\n\n    # Check if the destination directory exists, create it if not\n    if not os.path.exists(destination_directory):\n        try:\n            os.makedirs(destination_directory)\n        except OSError as e:\n            print(f\"Error creating destination directory '{destination_directory}': {e}\")\n            return []\n\n    # Move files matching the pattern from source to destination\n    moved_files = []\n    try:\n        for file in os.listdir(source_directory):\n            if fnmatch.fnmatch(file, file_pattern):\n                src_file = os.path.join(source_directory, file)\n                dst_file = os.path.join(destination_directory, file)\n                shutil.move(src_file, dst_file)\n                moved_files.append(file)\n        print(f\"Successfully moved files: {", "compilation_passed": false, "time": 0.0001049041748046875, "tests_passed": false, "error": "SyntaxError"}
{"code": "files_moved = []\n\n    for filename in os.listdir(source_directory):\n        if fnmatch.fnmatch(filename, file_pattern):\n            source_path = os.path.join(source_directory, filename)\n            destination_path = os.path.join(destination_directory, filename)\n            shutil.move(source_path, destination_path)\n            files_moved.append(filename)\n\n    return files_moved", "compilation_passed": true, "time": 0.0011208057403564453, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "moved_files = []\n    for filename in os.listdir(source_directory):\n        if fnmatch.fnmatch(filename, file_pattern):\n            source_path = os.path.join(source_directory, filename)\n            destination_path = os.path.join(destination_directory, filename)\n            shutil.move(source_path, destination_path)\n            moved_files.append(filename)\n    return moved_files", "compilation_passed": true, "time": 0.0011250972747802734, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "files_moved = []\n    if not os.path.isdir(destination_directory):\n        os.makedirs(destination_directory)\n    for root, dirnames, filenames in os.walk(source_directory):\n        for filename in fnmatch.filter(filenames, file_pattern):\n            source = os.path.join(root, filename)\n            destination = os.path.join(destination_directory, filename)\n            shutil.move(source, destination)\n            files_moved.append(filename)\n    return files_moved", "compilation_passed": true, "time": 0.0012319087982177734, "tests_passed": false, "error": "OSError"}
{"code": "# Check if source directory exists\n    if not os.path.exists(source_directory):\n        raise ValueError(f\"Source directory '{source_directory}' does not exist.\")\n\n    # Check if destination directory exists, if not create it\n    if not os.path.exists(destination_directory):\n        os.makedirs(destination_directory)\n\n    # Find files that match the pattern in the source directory\n    files_to_move = []\n    for root, dirs, files in os.walk(source_directory):\n        for file in files:\n            if fnmatch.fnmatch(file, file_pattern):\n                files_to_move.append(os.path.join(root, file))\n\n    # Move each file to the destination directory\n    for file in files_to_move:\n        shutil.move(file, destination_directory)\n\n    # Return the list of filenames that were moved\n    return [os.path.relpath(file, source_directory) for file in files_to_move]", "compilation_passed": true, "time": 0.0012161731719970703, "tests_passed": false, "error": "ValueError"}
{"code": "moved_files = []\n\n    # Check if source and destination directories exist\n    if os.path.isdir(source_directory) and os.path.isdir(destination_directory):\n        # List all files in source directory\n        all_files = os.listdir(source_directory)\n\n        # Iterate through all files and move matching files to destination directory\n        for filename in all_files:\n            if fnmatch.fnmatch(filename, file_pattern):\n                file_path = os.path.join(source_directory, filename)\n                shutil.move(file_path, destination_directory)\n                moved_files.append(filename)\n\n    return moved_files", "compilation_passed": true, "time": 0.0012769699096679688, "tests_passed": true, "error": null}
{"code": "# Initialize an empty list to store moved filenames\n    moved_filenames = []\n\n    # Check if the source directory exists\n    if os.path.isdir(source_directory):\n        # List all files in the source directory and filter files that match the pattern\n        for filename in os.listdir(source_directory):\n            if fnmatch.fnmatch(filename, file_pattern):\n                # Create the source and destination file paths\n                source_file = os.path.join(source_directory, filename)\n                destination_file = os.path.join(destination_directory, filename)\n\n                # Move the file if it doesn't already exist in the destination directory\n                if not os.path.exists(destination_file):\n                    shutil.move(source_file, destination_file)\n                    moved_filenames.append(filename)\n\n    # Return the list of moved filenames\n    return moved_filenames", "compilation_passed": true, "time": 0.0012087821960449219, "tests_passed": true, "error": null}
{"code": "# create a list to store the moved file names\n    moved_files = []\n\n    # walk through the source directory tree\n    for dirpath, dirnames, filenames in os.walk(source_directory):\n        # loop through each file in the directory\n        for filename in filenames:\n            # check if the file matches the pattern\n            if fnmatch.fnmatch(filename, file_pattern):\n                # build the source and destination paths for the file\n                source_path = os.path.join(dirpath, filename)\n                destination_path = os.path.join(destination_directory, filename)\n                # move the file\n                shutil.move(source_path, destination_path)\n                # append the file name to the list of moved files\n                moved_files.append(os.path.join('task_func_data', filename))\n\n    # return the list of moved files\n    return moved_files", "compilation_passed": true, "time": 0.002109050750732422, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(destination_directory):\n        os.makedirs(destination_directory)\n\n    files_moved = []\n    for root, dirs, files in os.walk(source_directory):\n        for file in files:\n            if fnmatch.fnmatch(file, file_pattern):\n                source_path = os.path.join(root, file)\n                destination_path = os.path.join(destination_directory, file)\n                shutil.move(source_path, destination_path)\n                files_moved.append(os.path.join('task_func_data', file))\n\n    return files_moved", "compilation_passed": true, "time": 0.0012938976287841797, "tests_passed": false, "error": "OSError"}
{"code": "try:\n        moved_files = []\n        for filename in os.listdir(source_directory):\n            if fnmatch.fnmatch(filename, file_pattern):\n                filepath = os.path.join(source_directory, filename)\n                shutil.move(filepath, destination_directory)\n                moved_files.append(filename)\n        return moved_files\n    except Exception as e:\n        print(\"Error in task_func: \", e)\n        return []", "compilation_passed": true, "time": 0.0012238025665283203, "tests_passed": true, "error": null}
