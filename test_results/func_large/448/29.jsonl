{"code": "x = np.linspace(mu - 3 * sigma, mu + 3 * sigma, 100)\n    ax = plt.subplot()\n    ax.plot(x, norm.pdf(x, mu, sigma))\n    return ax", "compilation_passed": true, "time": 0.09020805358886719, "tests_passed": true, "error": null}
{"code": "x = np.linspace(mu - 3 * sigma, mu + 3 * sigma, 100)\n    ax = plt.plot(x, norm.pdf(x, mu, sigma))\n    return ax", "compilation_passed": true, "time": 0.012923002243041992, "tests_passed": false, "error": "AttributeError"}
{"code": "fig, ax = plt.subplots()\n    x = np.linspace(mu - 3 * sigma, mu + 3 * sigma, 100)\n    ax.plot(x, norm.pdf(x, mu, sigma))\n    ax.set_title('Normal distribution with $\\\\mu={:.2f}$ and $\\\\sigma={:.2f}$'.format(mu, sigma))\n    return ax", "compilation_passed": true, "time": 0.09738302230834961, "tests_passed": true, "error": null}
{"code": "# Calculate the x and y values for the normal distribution\n    x = np.linspace(mu - 3*sigma, mu + 3*sigma, 100)\n    y = norm.pdf(x, mu, sigma)\n\n    # Plot the distribution using matplotlib\n    fig, ax = plt.subplots()\n    ax.plot(x, y, label=f'mu = {mu}, sigma = {sigma}')\n    ax.set_xlabel('x')\n    ax.set_ylabel('f(x)')\n    ax.set_title('Normal Distribution')\n    ax.legend()\n\n    # Show the plot\n    plt.show()\n    return ax", "compilation_passed": true, "time": 0.09539675712585449, "tests_passed": true, "error": null}
{"code": "if not isinstance(mu, (int, float)) or not isinstance(sigma, (int, float)):\n        raise ValueError(\"mu and sigma must be a float or an integer\")\n    x = np.linspace(mu - 3*sigma, mu + 3*sigma, 100)\n    plt.figure(figsize=(7, 4))\n    ax = plt.subplot(1, 1, 1)\n    ax.plot(x, norm.pdf(x, mu, sigma))\n    plt.title(\"Normal distribution with mu={} and sigma={}\".format(mu, sigma))\n    plt.show()\n    return ax", "compilation_passed": true, "time": 0.09402704238891602, "tests_passed": true, "error": null}
{"code": "x = np.linspace(mu - 3 * sigma, mu + 3 * sigma, 100)\n    plt.plot(x, norm.pdf(x, mu, sigma))\n    ax = plt.gca()  # Get the current axis\n    return ax", "compilation_passed": true, "time": 0.2886800765991211, "tests_passed": true, "error": null}
{"code": "if not isinstance(mu, (int, float)):\n        raise ValueError(\"Mu must be a float or int.\")\n    if not isinstance(sigma, (int, float)):\n        raise ValueError(\"Sigma must be a float or int.\")\n\n    x = np.linspace(mu - 3 * sigma, mu + 3 * sigma, 100)\n    ax = plt.plot(x, norm.pdf(x, mu, sigma))\n    return ax", "compilation_passed": true, "time": 0.014503002166748047, "tests_passed": false, "error": "AttributeError"}
{"code": "fig, ax = plt.subplots()\n    x = np.linspace(mu - 3*sigma, mu + 3*sigma, 100)\n    ax.plot(x, norm.pdf(x, mu, sigma))\n    return ax", "compilation_passed": true, "time": 0.09100508689880371, "tests_passed": true, "error": null}
{"code": "x = np.linspace(mu - 3 * sigma, mu + 3 * sigma, 100)\n    y = norm.pdf(x, mu, sigma)\n    ax = plt.subplot(1, 1, 1)\n    ax.plot(x, y)\n    plt.show()\n    return ax", "compilation_passed": true, "time": 0.09354019165039062, "tests_passed": true, "error": null}
{"code": "# Generate a sequence of x values\n    x = np.linspace(mu - 3 * sigma, mu + 3 * sigma, 100)\n\n    # Calculate the corresponding y values of the normal distribution\n    y = norm.pdf(x, mu, sigma)\n\n    # Set up the subplot\n    fig, ax = plt.subplots()\n\n    # Plot the normal distribution\n    ax.plot(x, y, label=f\"Normal dist. mu={mu}, sigma={sigma}\")\n    ax.legend()\n    ax.set_xlabel('x')\n    ax.set_ylabel('PDF')\n\n    # Show the plot\n    plt.show()\n\n    # Return the subplot\n    return ax", "compilation_passed": true, "time": 0.10529112815856934, "tests_passed": true, "error": null}
{"code": "x = np.linspace(mu - 3 * sigma, mu + 3 * sigma, 100)\n    ax = plt.subplot(1, 1, 1)\n    ax.plot(x, norm.pdf(x, mu, sigma))\n    return ax", "compilation_passed": true, "time": 0.0946049690246582, "tests_passed": true, "error": null}
{"code": "x = np.linspace(mu - 3*sigma, mu + 3*sigma, 100)\n    ax = plt.subplot()\n    ax.plot(x, norm.pdf(x, mu, sigma))\n    return ax", "compilation_passed": true, "time": 0.09426999092102051, "tests_passed": true, "error": null}
{"code": "x = np.linspace(mu - 3 * sigma, mu + 3 * sigma, 100)\n    y = norm.pdf(x, mu, sigma)\n    ax = plt.subplot()\n    ax.plot(x, y)\n    return ax", "compilation_passed": true, "time": 0.09474015235900879, "tests_passed": true, "error": null}
{"code": "# Create an array of 100 linearly spaced numbers between mu - 3*sigma and mu + 3*sigma\n    x = np.linspace(mu - 3 * sigma, mu + 3 * sigma, 100)\n\n    # Create a subplot for the normal distribution\n    ax = plt.subplot(111)\n\n    # Plot the normal distribution\n    ax.plot(x, norm.pdf(x, mu, sigma))\n\n    # Add labels and title\n    ax.set_xlabel('x')\n    ax.set_ylabel('PDF')\n    ax.set_title('Normal Distribution')\n\n    # Return the subplot\n    return ax", "compilation_passed": true, "time": 0.09746217727661133, "tests_passed": true, "error": null}
{"code": "# Create a 2D array of 100 linearly spaced numbers between mu - 3*sigma and mu + 3*sigma\n    x = np.linspace(mu - 3 * sigma, mu + 3 * sigma, 100)\n    # Create a normal distribution with the given mean and standard deviation\n    y = norm.pdf(x, mu, sigma)\n    # Plot the normal distribution using matplotlib's subplot\n    ax = plt.subplot(111)\n    ax.plot(x, y)\n    ax.set_title(f'Normal distribution with mu={mu} and sigma={sigma}')\n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n    return ax", "compilation_passed": true, "time": 0.09638690948486328, "tests_passed": true, "error": null}
{"code": "# Define the range for the distribution\n    x = np.linspace(mu - 3*sigma, mu + 3*sigma, 100)\n\n    # Plot the distribution\n    ax = plt.subplot()\n    ax.plot(x, norm.pdf(x, mu, sigma))\n    ax.set_xlabel('x')\n    ax.set_ylabel('PDF')\n\n    return ax", "compilation_passed": true, "time": 0.10630297660827637, "tests_passed": true, "error": null}
{"code": "fig, ax = plt.subplots()\n    x = np.linspace(mu - 3*sigma, mu + 3*sigma, 100)\n    ax.plot(x, norm.pdf(x, mu, sigma))\n    plt.show()\n    return ax", "compilation_passed": true, "time": 0.09326004981994629, "tests_passed": true, "error": null}
{"code": "# Create an array of 100 linearly spaced numbers between mu - 3*sigma and mu + 3*sigma\n    x = np.linspace(mu - 3 * sigma, mu + 3 * sigma, 100)\n\n    # Get the PDF values for the normal distribution using the norm.pdf function from scipy.stats\n    # with the given mu and sigma\n    y = norm.pdf(x, mu, sigma)\n\n    # Create a new subplot\n    ax = plt.subplot()\n\n    # Plot the normal distribution curve\n    ax.plot(x, y)\n\n    # Set the plot title and axes labels\n    ax.set_title(f\"Normal Distribution ($\\mu={mu}$, $\\sigma={sigma}$)\")\n    ax.set_xlabel(\"x\")\n    ax.set_ylabel(\"Probability Density\")\n\n    # Display the plot\n    plt.show()\n\n    # Return the subplot\n    return ax", "compilation_passed": true, "time": 0.10021781921386719, "tests_passed": true, "error": null}
{"code": "x = np.linspace(mu - 3 * sigma, mu + 3 * sigma, 100)\n    y = norm.pdf(x, mu, sigma)\n\n    ax = plt.subplot(111)\n    ax.plot(x, y)\n    plt.show()\n    return ax", "compilation_passed": true, "time": 0.1007699966430664, "tests_passed": true, "error": null}
{"code": "x = np.linspace(mu - 3 * sigma, mu + 3 * sigma, 100)\n    ax = plt.subplot(1, 2, 1)\n    ax.plot(x, norm.pdf(x, mu, sigma))\n    ax.set_title(f\"Normal Distribution with mean={mu} and std={sigma}\")\n    return ax", "compilation_passed": true, "time": 0.10028696060180664, "tests_passed": true, "error": null}
{"code": "x = np.linspace(mu - 3 * sigma, mu + 3 * sigma, 100)\n    ax = plt.subplot(1, 2, 2)\n    plt.plot(x, norm.pdf(x, mu, sigma))\n    plt.title(f\"Normal Distribution: \\nmu={mu}, sigma={sigma}\")\n\n    return ax", "compilation_passed": true, "time": 0.09986996650695801, "tests_passed": true, "error": null}
{"code": "x = np.linspace(mu - 3 * sigma, mu + 3 * sigma, 100)\n    ax = plt.plot(x, norm.pdf(x, mu, sigma))\n\n    return ax", "compilation_passed": true, "time": 0.015327930450439453, "tests_passed": false, "error": "AttributeError"}
{"code": "x = np.linspace(mu - 3 * sigma, mu + 3 * sigma, 100)\n    ax = plt.subplot(111)\n    ax.plot(x, norm.pdf(x, mu, sigma))\n\n    return ax", "compilation_passed": true, "time": 0.10116195678710938, "tests_passed": true, "error": null}
{"code": "x = np.linspace(mu - 3 * sigma, mu + 3 * sigma, 100)\n    ax = plt.subplot()\n    ax.plot(x, norm.pdf(x, mu, sigma))\n    ax.set_xlabel('x')\n    ax.set_ylabel('f(x)')\n    ax.set_title(f'Normal distribution with \u03bc={mu} and \u03c3={sigma}')\n    return ax", "compilation_passed": true, "time": 0.0994868278503418, "tests_passed": true, "error": null}
{"code": "x = np.linspace(mu - 3 * sigma, mu + 3 * sigma, 100)\n    ax = plt.plot(x, norm.pdf(x, mu, sigma))\n    plt.xlabel('x')\n    plt.ylabel('Probability')\n    plt.title(f'Normal Distribution, \u03bc={mu}, \u03c3={sigma}')\n    plt.grid(True)\n    plt.show()\n    return ax", "compilation_passed": true, "time": 0.013959884643554688, "tests_passed": false, "error": "AttributeError"}
