{"code": "path = os.path.join(data_dir, csv_file)\n    if os.path.exists(path):\n        # Load the CSV file into a pandas DataFrame\n        df = pd.read_csv(path)\n\n        # If the DataFrame is not empty, replace the NaN values in numeric columns with the mean of the corresponding column\n        if not df.empty:\n            for col in df.columns:\n                if df[col].dtype in ['int64', 'float64']:\n                    df[col] = df[col].fillna(df[col].mean())\n        return df\n    else:\n        raise FileNotFoundError(f\"{csv_file} does not exist in {data_dir}.\")", "compilation_passed": true, "time": 0.0030548572540283203, "tests_passed": false, "error": "pandas.errors.EmptyDataError"}
{"code": "# Check that the CSV file exists and is not empty\n    if os.path.exists(os.path.join(data_dir, csv_file)) and os.path.getsize(\n        os.path.join(data_dir, csv_file)\n    ) > 0:\n        # Read the CSV file into a DataFrame\n        df = pd.read_csv(os.path.join(data_dir, csv_file))\n\n        # Replace NaN values in numeric columns with the mean of the column\n        for col in df.columns:\n            if df[col].dtype in [\n                \"int64\",\n                \"float64\",\n                \"int32\",\n                \"float32\",\n                \"int16\",\n                \"float16\",\n                \"int8\",\n                \"float8\",\n                \"uint64\",\n                \"uint32\",\n                \"uint16\",\n                \"uint8\",\n                \"uintp\",\n                \"intp\",\n                \"float12", "compilation_passed": false, "time": 8.082389831542969e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Check if csv_file exists\n    if not os.path.isfile(os.path.join(data_dir, csv_file)):\n        raise FileNotFoundError(f\"{csv_file} does not exist\")\n\n    # Load CSV file into DataFrame\n    df = pd.read_csv(os.path.join(data_dir, csv_file))\n\n    # Check if DataFrame is empty\n    if df.empty:\n        return df\n\n    # Get the columns with numeric data types\n    numeric_columns = df.select_dtypes(include=['int', 'float']).columns\n\n    # Replace NaN values in numeric columns with the mean of the column\n    for col in numeric_columns:\n        if df[col].dtype.name == 'bool':\n            continue\n        mean = df[col].mean()\n        df[col].fillna(value=mean, inplace=True)\n\n    return df", "compilation_passed": true, "time": 0.002894878387451172, "tests_passed": false, "error": "pandas.errors.EmptyDataError"}
{"code": "# Check if the csv file exists in the data directory\n    if not os.path.exists(os.path.join(data_dir, csv_file)):\n        raise FileNotFoundError(f\"{csv_file} not found in {data_dir}\")\n\n    # Load the CSV file into a pandas DataFrame\n    df = pd.read_csv(os.path.join(data_dir, csv_file))\n\n    # If the csv is empty, return an empty DataFrame\n    if df.empty:\n        return pd.DataFrame()\n\n    # Identify the numeric columns with NaN values\n    numeric_columns = df.select_dtypes(include=[np.number]).columns\n    nan_columns = df.columns[df.isnull().any()]\n    numeric_nan_columns = np.intersect1d(numeric_columns, nan_columns)\n\n    # Replace the NaN values in numeric columns with the mean of the column\n    df[numeric_nan_columns] = df[numeric_nan_columns].fillna(df[numeric_nan_columns].", "compilation_passed": false, "time": 0.0002200603485107422, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Check if the file exists\n    if not os.path.exists(os.path.join(data_dir, csv_file)):\n        raise FileNotFoundError(f\"{csv_file} does not exist in {data_dir}\")\n\n    # Load the CSV file into a pandas DataFrame\n    df = pd.read_csv(os.path.join(data_dir, csv_file))\n\n    # Replace NaN values in numeric columns with the mean of the corresponding column\n    numeric_columns = df.select_dtypes(include=np.number).columns\n    df[numeric_columns] = df[numeric_columns].fillna(df[numeric_columns].mean())\n\n    # Return the processed DataFrame\n    return df\n\n    # if there are any numeric columns in the csv file, replace any NaN values in\n    # those columns with the mean of the values in that column", "compilation_passed": true, "time": 0.003220081329345703, "tests_passed": false, "error": "pandas.errors.EmptyDataError"}
{"code": "file_path = os.path.join(data_dir, csv_file)\n    if not os.path.exists(file_path):\n        raise FileNotFoundError(f\"File not found: {file_path}\")\n\n    df = pd.read_csv(file_path)\n\n    # If the CSV is empty, return an empty DataFrame\n    if df.empty:\n        return pd.DataFrame(columns=df.columns)\n\n    # Get the numeric columns\n    numeric_cols = df.select_dtypes(include=np.number).columns\n\n    # Replace NaN values in numeric columns with the mean of the corresponding column\n    if len(numeric_cols) > 0:\n        mean_values = df[numeric_cols].mean()\n        df[numeric_cols] = df[numeric_cols].fillna(mean_values)\n\n    return df", "compilation_passed": true, "time": 0.0031900405883789062, "tests_passed": false, "error": "pandas.errors.EmptyDataError"}
{"code": "# Check if the file exists\n    if not os.path.exists(os.path.join(data_dir, csv_file)):\n        raise FileNotFoundError(f\"File {csv_file} not found in directory {data_dir}.\")\n    # Read the CSV file into a pandas DataFrame\n    df = pd.read_csv(os.path.join(data_dir, csv_file))\n    # Replace NaN values in numeric columns with the mean of the corresponding column\n    numeric_columns = df.select_dtypes(include=[np.number]).columns\n    for col in numeric_columns:\n        if df[col].dtype == 'float64':\n            df[col].fillna(df[col].mean(), inplace=True)\n    # Return the resulting DataFrame\n    return df", "compilation_passed": true, "time": 0.002817869186401367, "tests_passed": false, "error": "pandas.errors.EmptyDataError"}
{"code": "# Check if the CSV file is empty by checking the file size\n    if os.path.getsize(os.path.join(data_dir, csv_file)) == 0:\n        return pd.DataFrame()\n\n    # Load the CSV file into a pandas DataFrame\n    df = pd.read_csv(os.path.join(data_dir, csv_file))\n\n    # Replace the NaN values in numeric columns with the mean of the corresponding column\n    numeric_columns = df.select_dtypes(include=['int', 'float']).columns\n    for col in numeric_columns:\n        if df[col].isnull().any():\n            mean = df[col].mean()\n            df[col] = df[col].fillna(mean)\n\n    return df", "compilation_passed": true, "time": 0.0028519630432128906, "tests_passed": false, "error": "pandas.errors.EmptyDataError"}
{"code": "file_path = os.path.join(data_dir, csv_file)\n    if not os.path.exists(file_path):\n        raise FileNotFoundError(f\"File '{file_path}' does not exist.\")\n\n    df = pd.read_csv(file_path)\n\n    # If csv file is empty, return empty DataFrame\n    if df.empty:\n        return pd.DataFrame()\n\n    # Get numeric columns and fill in NaN values with column mean\n    numeric_columns = df.select_dtypes(include=[np.number]).columns\n    df[numeric_columns] = df[numeric_columns].fillna(df[numeric_columns].mean())\n\n    return df", "compilation_passed": true, "time": 0.0030548572540283203, "tests_passed": false, "error": "pandas.errors.EmptyDataError"}
{"code": "# Check that csv_file exists\n    if not os.path.exists(os.path.join(data_dir, csv_file)):\n        raise FileNotFoundError(f\"{csv_file} does not exist\")\n\n    # Load CSV file into a pandas DataFrame\n    df = pd.read_csv(os.path.join(data_dir, csv_file))\n\n    # Replace NaN values in numeric columns with the mean of the column\n    for col in df.select_dtypes(include='number'):\n        df[col] = df[col].fillna(df[col].mean())\n\n    # Return the processed DataFrame\n    return df", "compilation_passed": true, "time": 0.0028409957885742188, "tests_passed": false, "error": "pandas.errors.EmptyDataError"}
{"code": "# Check if csv_file is empty\n    if not os.path.exists(os.path.join(data_dir, csv_file)):\n        # Return an empty DataFrame if csv_file does not exist.\n        return pd.DataFrame()\n\n    # Load the CSV file into a DataFrame.\n    df = pd.read_csv(os.path.join(data_dir, csv_file))\n\n    # Iterate over the columns in the DataFrame.\n    for col in df:\n        # Replace NaN values with the mean of the column.\n        df[col] = df[col].fillna(df[col].mean())\n\n    return df", "compilation_passed": true, "time": 0.0026907920837402344, "tests_passed": false, "error": "pandas.errors.EmptyDataError"}
{"code": "path_to_csv_file = os.path.join(data_dir, csv_file)\n    df = pd.read_csv(path_to_csv_file, skip_blank_lines=True)\n    # If the csv file is empty, return an empty DataFrame\n    if df.empty:\n        return pd.DataFrame()\n    # If any of the numeric columns have NaN values, replace them with the mean\n    for column in df.select_dtypes(include=[np.number]).columns:\n        if df[column].hasnans:\n            df[column] = df[column].fillna(df[column].mean())\n    return df", "compilation_passed": true, "time": 0.002773761749267578, "tests_passed": false, "error": "pandas.errors.EmptyDataError"}
{"code": "# Check if csv_file is a file\n    if not os.path.isfile(os.path.join(data_dir, csv_file)):\n        raise FileNotFoundError(f\"{csv_file} is not a file.\")\n\n    # Check if csv_file is empty\n    if os.stat(os.path.join(data_dir, csv_file)).st_size == 0:\n        # Create an empty DataFrame with the specified columns\n        return pd.DataFrame({\"Fruit\": [], \"Taste\": [], \"Cost\": []})\n\n    # Load the CSV file into a DataFrame\n    df = pd.read_csv(os.path.join(data_dir, csv_file))\n\n    # Get the mean value of each column that contains NaN values\n    means = df.mean()\n\n    # Replace NaN values in numeric columns with the mean value of the column\n    df = df.fillna(means)\n\n    return df", "compilation_passed": true, "time": 0.0028150081634521484, "tests_passed": false, "error": "pandas.errors.EmptyDataError"}
{"code": "# Check if csv file exists\n    if not os.path.exists(os.path.join(data_dir, csv_file)):\n        raise FileNotFoundError(f\"{csv_file} does not exist in {data_dir}\")\n\n    # Load csv file into a DataFrame\n    df = pd.read_csv(os.path.join(data_dir, csv_file))\n\n    # Replace NaN values in numeric columns with mean of that column\n    for col in df.columns:\n        if df[col].dtype in ['int64', 'float64']:\n            df[col].fillna(df[col].mean(), inplace=True)\n\n    return df", "compilation_passed": true, "time": 0.0028908252716064453, "tests_passed": false, "error": "pandas.errors.EmptyDataError"}
{"code": "# Check if the csv_file exists, raise an exception if not\n    if not os.path.exists(os.path.join(data_dir, csv_file)):\n        raise FileNotFoundError(f\"{csv_file} does not exist\")\n\n    # Load the csv file as a pandas DataFrame\n    df = pd.read_csv(os.path.join(data_dir, csv_file))\n\n    # Check if the csv file is empty\n    # If it is empty, return an empty DataFrame\n    if df.empty:\n        return pd.DataFrame()\n\n    # Get all numeric column names\n    numeric_columns = df.select_dtypes(include=np.number).columns\n\n    # Check if there are any numeric columns\n    # If there are numeric columns, replace all NaN values with the mean of the corresponding column\n    # Otherwise, return the original DataFrame\n    if len(numeric_columns) > 0:\n        df[numeric_columns] = df[numeric_columns].fillna(df[numeric_columns].mean())\n        return df\n", "compilation_passed": true, "time": 0.003114938735961914, "tests_passed": false, "error": "pandas.errors.EmptyDataError"}
{"code": "path_to_csv = os.path.join(data_dir, csv_file)\n    if os.path.isfile(path_to_csv):\n        df = pd.read_csv(path_to_csv)\n        if df.empty:\n            return pd.DataFrame()\n        else:\n            # For each column in the DataFrame\n            for col in df:\n                # Check if the column is numeric (int or float)\n                if df[col].dtype in ['int64', 'float64']:\n                    # If the column has NaN values, replace them with the mean of the column\n                    if df[col].isnull().values.any():\n                        df[col].fillna(df[col].mean(), inplace=True)\n            return df\n    else:\n        raise FileNotFoundError(f\"File {path_to_csv} does not exist.\")", "compilation_passed": true, "time": 0.002777099609375, "tests_passed": false, "error": "pandas.errors.EmptyDataError"}
{"code": "if not os.path.isdir(data_dir):\n        raise ValueError(f\"data_dir must be a directory\")\n\n    if not os.path.isfile(os.path.join(data_dir, csv_file)):\n        raise FileNotFoundError(f\"{os.path.join(data_dir, csv_file)} does not exist\")\n\n    # Load the CSV file into a pandas DataFrame.\n    df = pd.read_csv(os.path.join(data_dir, csv_file))\n\n    # Check if the CSV file is empty.\n    if df.empty:\n        return pd.DataFrame()\n\n    # Find the columns with NaN values in numeric columns.\n    numeric_columns = df.select_dtypes(include=np.number).columns\n    nan_columns = df[numeric_columns].columns[df[numeric_columns].isnull().any()]\n\n    # Replace NaN values in numeric columns with the mean of the column.\n    for col in nan_columns:\n        df[col].fillna", "compilation_passed": true, "time": 0.0021860599517822266, "tests_passed": false, "error": "TypeError"}
{"code": "# Check if file exists\n    if not os.path.exists(os.path.join(data_dir, csv_file)):\n        raise FileNotFoundError(f\"CSV file not found: {csv_file}\")\n\n    # Load CSV file into pandas DataFrame\n    df = pd.read_csv(os.path.join(data_dir, csv_file))\n\n    # If DataFrame is empty, return it as is\n    if df.empty:\n        return df\n\n    # Get numeric columns\n    num_cols = df.select_dtypes(include=['float', 'int']).columns\n\n    # Replace NaN values in numeric columns with mean of column\n    for col in num_cols:\n        df[col].fillna(df[col].mean(), inplace=True)\n\n    # Round numeric columns to 3 decimal places\n    for col in num_cols:\n        df[col] = df[col].round(3)\n\n    return df", "compilation_passed": true, "time": 0.0028710365295410156, "tests_passed": false, "error": "pandas.errors.EmptyDataError"}
{"code": "# Check if the file exists and is a CSV file\n    if not os.path.exists(os.path.join(data_dir, csv_file)):\n        raise FileNotFoundError(\"File does not exist\")\n\n    # Load the CSV file into a pandas DataFrame\n    df = pd.read_csv(os.path.join(data_dir, csv_file))\n\n    # If the DataFrame is empty, return an empty DataFrame\n    if df.empty:\n        return pd.DataFrame()\n\n    # Replace the NaN values in numeric columns with the mean of the column\n    numeric_cols = df.select_dtypes(include=['float', 'int']).columns\n    for col in numeric_cols:\n        df[col] = df[col].fillna(df[col].mean())\n\n    return df", "compilation_passed": true, "time": 0.0028798580169677734, "tests_passed": false, "error": "pandas.errors.EmptyDataError"}
{"code": "filepath = os.path.join(data_dir, csv_file)\n    if os.path.exists(filepath):\n        df = pd.read_csv(filepath)\n        if df.empty:\n            return df\n\n        numeric_cols = df.select_dtypes(include=['float', 'int']).columns\n        df[numeric_cols] = df[numeric_cols].fillna(df[numeric_cols].mean())\n\n        return df\n    else:\n        raise FileNotFoundError(filepath)", "compilation_passed": true, "time": 0.0030698776245117188, "tests_passed": false, "error": "pandas.errors.EmptyDataError"}
{"code": "# Check if the input CSV file exists in the data directory\n    full_path = os.path.join(data_dir, csv_file)\n    if not os.path.isfile(full_path):\n        raise FileNotFoundError(f\"File not found: {csv_file}\")\n\n    # Load the CSV file into a pandas DataFrame\n    df = pd.read_csv(full_path)\n\n    # If the CSV file is empty, return an empty DataFrame\n    if df.empty:\n        return pd.DataFrame()\n\n    # Get the columns of the DataFrame\n    columns = list(df.columns)\n\n    # Replace NaN values in numeric columns with the mean of the column\n    for col in columns:\n        if df[col].dtype in ('int64', 'float64') and df[col].hasnans:\n            mean = df[col].mean()\n            df[col] = df[col].fillna(mean)\n\n    # Return the processed DataFrame\n    return df", "compilation_passed": true, "time": 0.002802133560180664, "tests_passed": false, "error": "pandas.errors.EmptyDataError"}
{"code": "# Check if csv_file exists\n    csv_path = os.path.join(data_dir, csv_file)\n    if not os.path.exists(csv_path):\n        raise FileNotFoundError(f\"The file '{csv_file}' does not exist.\")\n\n    # Load the CSV file into a DataFrame\n    df = pd.read_csv(csv_path)\n\n    # If the DataFrame is empty, return an empty DataFrame\n    if df.empty:\n        return df\n\n    # For each column in the DataFrame, if it contains numeric values and there\n    # are NaN values in that column, replace the NaN values with the mean of\n    # that column\n    for col in df:\n        if df[col].dtype in ['int64', 'float64']:\n            if df[col].isnull().any():\n                mean = df[col].mean()\n                df[col].fillna(mean, inplace=True)\n\n    return df", "compilation_passed": true, "time": 0.0027360916137695312, "tests_passed": false, "error": "pandas.errors.EmptyDataError"}
{"code": "# Check if the csv file exists\n    csv_path = os.path.join(data_dir, csv_file)\n    if not os.path.isfile(csv_path):\n        raise FileNotFoundError(f\"CSV file '{csv_file}' does not exist in '{data_dir}'\")\n\n    # Load the CSV file into a pandas DataFrame\n    df = pd.read_csv(csv_path)\n\n    # Check if the DataFrame is empty\n    if df.empty:\n        return df\n\n    # Find the columns with NaN values in numeric columns\n    numeric_columns = df.select_dtypes(include=np.number).columns\n    nan_columns = df[numeric_columns].columns[df[numeric_columns].isnull().any()]\n\n    # Replace the NaN values in numeric columns with the mean of the column\n    for column in nan_columns:\n        mean_value = df[column].mean()\n        df[column] = df[column].fillna(mean_value)\n\n    return df", "compilation_passed": true, "time": 0.003092050552368164, "tests_passed": false, "error": "pandas.errors.EmptyDataError"}
{"code": "# Check if csv_file exists\n    if not os.path.exists(os.path.join(data_dir, csv_file)):\n        raise FileNotFoundError(f\"{csv_file} does not exist\")\n\n    # Load the CSV file into a pandas DataFrame\n    df = pd.read_csv(os.path.join(data_dir, csv_file))\n\n    # Replace the NaN values in numeric columns with the mean of the column\n    numeric_columns = df.select_dtypes(include=[np.number]).columns\n    for column in numeric_columns:\n        df[column].fillna(df[column].mean(), inplace=True)\n\n    return df", "compilation_passed": true, "time": 0.002835988998413086, "tests_passed": false, "error": "pandas.errors.EmptyDataError"}
{"code": "# Check if the csv file is an empty csv. If so, return an empty DataFrame.\n    if os.stat(data_dir + csv_file).st_size == 0:\n        return pd.DataFrame()\n    # Load the csv file into a DataFrame\n    df = pd.read_csv(data_dir + csv_file)\n    # Check if the csv file is an empty csv. If so, return an empty DataFrame.\n    if df.empty:\n        return pd.DataFrame()\n    # Replace the NaN values in numeric columns with the mean of the corresponding column\n    numeric_columns = df.select_dtypes(include=[np.number]).columns\n    for column in numeric_columns:\n        if df[column].isnull().any():\n            mean = df[column].mean()\n            df[column].fillna(mean, inplace=True)\n    return df", "compilation_passed": true, "time": 0.0015130043029785156, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Check if the file exists.\n    file_path = os.path.join(data_dir, csv_file)\n    if not os.path.isfile(file_path):\n        raise FileNotFoundError(\"File does not exist.\")\n\n    # Load the CSV file into a pandas DataFrame.\n    df = pd.read_csv(file_path)\n\n    # Replace the NaN values in numeric columns with the mean of the corresponding column.\n    num_cols = df.select_dtypes(include=['float', 'int']).columns\n    for col in num_cols:\n        df[col].fillna(df[col].mean(), inplace=True)\n\n    # Return the resulting DataFrame.\n    return df", "compilation_passed": true, "time": 0.002835988998413086, "tests_passed": false, "error": "pandas.errors.EmptyDataError"}
{"code": "if os.path.exists(os.path.join(data_dir, csv_file)):\n        data = pd.read_csv(os.path.join(data_dir, csv_file))\n\n        # Check if the CSV is empty\n        if data.empty:\n            return data\n\n        # Find the columns of type float or integer\n        numeric_columns = list(data.select_dtypes(include=['float', 'int']).columns)\n\n        # Replace the NaN values in the numeric columns with the mean of the column\n        for column in numeric_columns:\n            # Replace NaN values in the column with the mean of the column\n            data[column] = data[column].fillna(data[column].mean())\n\n        return data\n    else:\n        raise FileNotFoundError(f\"File {csv_file} does not exist.\")", "compilation_passed": true, "time": 0.0027740001678466797, "tests_passed": false, "error": "pandas.errors.EmptyDataError"}
{"code": "csv_path = os.path.join(data_dir, csv_file)\n    if not os.path.isfile(csv_path):\n        raise FileNotFoundError(f\"{csv_file} does not exist.\")\n\n    # Load the CSV file into a pandas DataFrame\n    df = pd.read_csv(csv_path)\n\n    # Replace the NaN values in numeric columns with the mean of the column\n    numeric_cols = df.select_dtypes(include=['int', 'float']).columns\n    for col in numeric_cols:\n        mean = df[col].mean()\n        df[col].fillna(mean, inplace=True)\n\n    # Convert the numeric columns to 4 decimal places\n    df[numeric_cols] = df[numeric_cols].round(4)\n\n    return df", "compilation_passed": true, "time": 0.0029239654541015625, "tests_passed": false, "error": "pandas.errors.EmptyDataError"}
{"code": "# Check if the file exists\n    if not os.path.exists(os.path.join(data_dir, csv_file)):\n        raise FileNotFoundError(f\"{csv_file} does not exist\")\n\n    # Load the data into a pandas DataFrame\n    df = pd.read_csv(os.path.join(data_dir, csv_file))\n\n    # Replace NaN values with the mean of the corresponding column for numeric columns\n    numeric_columns = df.select_dtypes(include=[np.number]).columns\n    df[numeric_columns] = df[numeric_columns].fillna(df[numeric_columns].mean())\n\n    return df\n\n    # To check if the function works, we can run the following code.\n    # >>> df = task_func(\"/path/to/data/directory\", \"file.csv\")\n    # >>> print(df)\n    #    Fruit   Taste    Cost\n    # 0  Apple   Good  1.0000\n    # 1  Orange    NaN  2.0", "compilation_passed": true, "time": 0.003122091293334961, "tests_passed": false, "error": "pandas.errors.EmptyDataError"}
{"code": "# Get the file path.\n    file_path = os.path.join(data_dir, csv_file)\n    # Load the data.\n    df = pd.read_csv(file_path)\n    # Check if the CSV file is empty.\n    if df.empty:\n        # Return an empty DataFrame if it is.\n        return pd.DataFrame()\n    # Find the numeric columns in the data.\n    numeric_columns = df.select_dtypes(include=[np.number]).columns.tolist()\n    # Replace the NaN values in numeric columns with the mean of the column.\n    for col in numeric_columns:\n        # Calculate the mean of the column.\n        mean = df[col].mean()\n        # Replace the NaN values with the mean.\n        df[col].fillna(mean, inplace=True)\n    # Return the processed DataFrame.\n    return df", "compilation_passed": true, "time": 0.0027849674224853516, "tests_passed": false, "error": "pandas.errors.EmptyDataError"}
