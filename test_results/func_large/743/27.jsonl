{"code": "prefix_counts = {prefix: 0 for prefix in PREFIXES}  # Initialize prefix counts to 0\n\n    # Iterate over all files in the directory\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            filepath = os.path.join(directory, filename)\n\n            with open(filepath, 'r') as file:\n                try:\n                    data = json.load(file)  # Load the JSON data from the file\n\n                    # Flatten the JSON data into a list of keys\n                    keys = flatten_json(data)\n\n                    # Count occurrences of keys starting with prefixes\n                    for prefix in prefix_counts:\n                        prefix_counts[prefix] += sum(1 for key in keys if key.startswith(prefix))\n\n                except json.JSONDecodeError as e:\n                    print(f\"Error parsing JSON file '{filename}': {e}\")\n\n    return prefix_counts", "compilation_passed": true, "time": 0.0025911331176757812, "tests_passed": false, "error": "NameError"}
{"code": "stats = {prefix: 0 for prefix in PREFIXES}  # Initialize counts\n\n    # Iterate over files in the directory\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):  # Only consider JSON files\n            filepath = os.path.join(directory, filename)\n\n            # Read JSON file\n            with open(filepath, 'r') as file:\n                try:\n                    data = json.load(file)\n                    if isinstance(data, dict):\n                        # Iterate over keys in the dictionary\n                        for key in data.keys():\n                            for prefix in PREFIXES:\n                                if key.startswith(prefix):\n                                    stats[prefix] += 1\n                except json.JSONDecodeError:\n                    print(f\"Error decoding JSON file: {filepath}\")\n\n    return stats", "compilation_passed": true, "time": 0.00958108901977539, "tests_passed": true, "error": null}
{"code": "prefix_counts = {prefix: 0 for prefix in PREFIXES}\n    json_files = [f for f in os.listdir(directory) if f.endswith(\".json\")]\n\n    for json_file in json_files:\n        file_path = os.path.join(directory, json_file)\n\n        with open(file_path, \"r\") as file:\n            data = json.load(file)\n\n        for key in data.keys():\n            for prefix in PREFIXES:\n                if key.startswith(prefix):\n                    prefix_counts[prefix] += 1\n\n    return prefix_counts", "compilation_passed": true, "time": 0.009477853775024414, "tests_passed": true, "error": null}
{"code": "statistics = {}  # dictionary to store the statistics\n    for prefix in PREFIXES:\n        statistics[prefix] = 0\n\n    # walk through all files in the directory\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            filepath = os.path.join(directory, filename)\n            with open(filepath, \"r\") as f:\n                data = json.load(f)\n                if type(data) == dict:\n                    # traverse the JSON data recursively and count occurrences\n                    for key in get_all_keys(data):\n                        for prefix in PREFIXES:\n                            if key.startswith(prefix):\n                                statistics[prefix] += 1\n    return statistics", "compilation_passed": true, "time": 0.0024061203002929688, "tests_passed": false, "error": "NameError"}
{"code": "# Create a dictionary to store the counts of each prefix\n    prefix_counts = {prefix: 0 for prefix in PREFIXES}\n\n    # Loop through all JSON files in the specified directory\n    for file_name in os.listdir(directory):\n        if file_name.endswith('.json'):\n            # Read the JSON file\n            with open(os.path.join(directory, file_name), 'r') as f:\n                try:\n                    json_data = json.load(f)\n                except json.JSONDecodeError as e:\n                    print(f\"Error reading {file_name}: {e}\")\n                    continue\n\n            # Loop through each key in the JSON object\n            for key in json_data.keys():\n                # Check if the key starts with any of the prefixes\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        prefix_counts[prefix] += 1\n\n    return prefix_counts", "compilation_passed": true, "time": 0.009335041046142578, "tests_passed": true, "error": null}
{"code": "stats = {prefix: 0 for prefix in PREFIXES}\n\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                try:\n                    data = json.load(file)\n                    for prefix in PREFIXES:\n                        stats[prefix] += sum(\n                            1 for key in data.keys() if key.startswith(prefix))\n                except json.JSONDecodeError:\n                    print(\n                        f\"Error: Invalid JSON in file '{filename}'. Skipping.\")\n\n    return stats", "compilation_passed": true, "time": 0.009453773498535156, "tests_passed": true, "error": null}
{"code": "prefix_counts = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename)) as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in prefix_counts:\n                    if key.startswith(prefix):\n                        prefix_counts[prefix] += 1\n    return prefix_counts", "compilation_passed": true, "time": 0.009277820587158203, "tests_passed": true, "error": null}
{"code": "if not os.path.isdir(directory):\n        raise ValueError(\"Invalid directory path provided.\")\n\n    key_counts = {prefix: 0 for prefix in PREFIXES}\n\n    for file in os.listdir(directory):\n        if file.endswith(\".json\"):\n            file_path = os.path.join(directory, file)\n\n            with open(file_path, \"r\") as f:\n                try:\n                    data = json.load(f)\n                except json.JSONDecodeError as e:\n                    print(f\"Error decoding JSON file '{file}': {str(e)}\")\n                    continue\n\n                if isinstance(data, dict):\n                    for key in data.keys():\n                        for prefix in PREFIXES:\n                            if key.startswith(prefix):\n                                key_counts[prefix] += 1\n\n    return key_counts", "compilation_passed": true, "time": 0.0023169517517089844, "tests_passed": false, "error": "ValueError"}
{"code": "# Initialize the statistics dictionary\n    stats = {prefix: 0 for prefix in PREFIXES}\n\n    # Iterate through all JSON files in the directory\n    for file in os.listdir(directory):\n        if file.endswith(\".json\"):\n            filepath = os.path.join(directory, file)\n\n            # Load the JSON data\n            with open(filepath, \"r\") as f:\n                data = json.load(f)\n\n            # Count the occurrences of keys starting with each prefix\n            for prefix in PREFIXES:\n                for key in data.keys():\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n\n    return stats", "compilation_passed": true, "time": 0.009146928787231445, "tests_passed": true, "error": null}
{"code": "stats = {prefix: 0 for prefix in PREFIXES}\n\n    for file_name in os.listdir(directory):\n        if file_name.endswith(\".json\"):\n            with open(os.path.join(directory, file_name), \"r\", encoding=\"utf-8\") as json_file:\n                data = json.load(json_file)\n\n                for key in data.keys():\n                    for prefix in PREFIXES:\n                        if key.startswith(prefix):\n                            stats[prefix] += 1\n                            break\n\n    return stats", "compilation_passed": true, "time": 0.009124040603637695, "tests_passed": true, "error": null}
{"code": "prefix_counts = {prefix: 0 for prefix in PREFIXES}\n    for file in os.listdir(directory):\n        if file.endswith('.json'):\n            with open(os.path.join(directory, file), 'r') as f:\n                data = json.load(f)\n            for prefix in PREFIXES:\n                for key in data.keys():\n                    if key.startswith(prefix):\n                        prefix_counts[prefix] += 1\n    return prefix_counts", "compilation_passed": true, "time": 0.00923919677734375, "tests_passed": true, "error": null}
{"code": "result_dict = {prefix: 0 for prefix in PREFIXES}\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        result_dict[prefix] += 1\n    return result_dict", "compilation_passed": true, "time": 0.009181976318359375, "tests_passed": true, "error": null}
{"code": "# Initialize the counts dictionary\n    counts = {prefix: 0 for prefix in PREFIXES}\n\n    # Iterate over all files in the directory\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            filepath = os.path.join(directory, filename)\n            with open(filepath, \"r\", encoding=\"utf-8\") as f:\n                data = json.load(f)\n\n            # Count the occurrence of keys starting with certain prefixes\n            for prefix in PREFIXES:\n                if data.get(prefix):\n                    counts[prefix] += 1\n\n    # Return the counts dictionary\n    return counts", "compilation_passed": true, "time": 0.003579854965209961, "tests_passed": true, "error": null}
{"code": "statistics = {prefix: 0 for prefix in PREFIXES}\n    for root, _, files in os.walk(directory):\n        for filename in files:\n            if filename.endswith('.json'):\n                with open(os.path.join(root, filename)) as f:\n                    data = json.load(f)\n                    for prefix in PREFIXES:\n                        for key in data.keys():\n                            if key.startswith(prefix):\n                                statistics[prefix] += 1\n    return statistics", "compilation_passed": true, "time": 0.0037801265716552734, "tests_passed": true, "error": null}
{"code": "prefix_counts = {prefix: 0 for prefix in PREFIXES}\n\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(file)\n\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        prefix_counts[prefix] += 1\n\n    return prefix_counts", "compilation_passed": true, "time": 0.009119033813476562, "tests_passed": true, "error": null}
{"code": "# Initialize the statistics dictionary with default values of zero\n    statistics = {prefix: 0 for prefix in PREFIXES}\n\n    # Iterate over the files in the specified directory\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            # Load the JSON file\n            with open(os.path.join(directory, filename), \"r\") as file:\n                data = json.load(file)\n\n            # Iterate over the keys and update the statistics\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        statistics[prefix] += 1\n\n    return statistics", "compilation_passed": true, "time": 0.00853109359741211, "tests_passed": true, "error": null}
{"code": "result = {prefix: 0 for prefix in PREFIXES}\n\n    for file in os.listdir(directory):\n        if file.endswith(\".json\"):\n            with open(os.path.join(directory, file), \"r\") as f:\n                data = json.load(f)\n\n            for prefix in PREFIXES:\n                if any(key.startswith(prefix) for key in data.keys()):\n                    result[prefix] += 1\n\n    return result", "compilation_passed": true, "time": 0.009278297424316406, "tests_passed": true, "error": null}
{"code": "stats = {prefix: 0 for prefix in PREFIXES}  # Initialize count for each prefix\n\n    # Traverse JSON files in the directory\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory, filename), 'r', encoding='utf-8') as file:\n                data = json.load(file)\n\n            # Check prefixes in key names\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n                        break\n\n    return stats", "compilation_passed": true, "time": 0.00917506217956543, "tests_passed": true, "error": null}
{"code": "prefix_counts = {prefix: 0 for prefix in PREFIXES}\n\n    for file in os.listdir(directory):\n        if file.endswith(\".json\"):\n            with open(os.path.join(directory, file), \"r\") as json_file:\n                try:\n                    json_data = json.load(json_file)\n                    for prefix in prefix_counts:\n                        if isinstance(json_data, dict):\n                            prefix_counts[prefix] += sum(\n                                str(k).startswith(prefix)\n                                for k in json_data.keys()\n                            )\n                        elif isinstance(json_data, list):\n                            prefix_counts[prefix] += sum(\n                                sum(str(k).startswith(prefix) for k in elem.keys())\n                                for elem in json_data\n                            )\n                except json.JSONDecodeError:\n                    pass\n\n    return prefix_counts", "compilation_passed": true, "time": 0.009402036666870117, "tests_passed": true, "error": null}
{"code": "# Initialize dictionary with prefixes as keys\n    stats = {prefix: 0 for prefix in PREFIXES}\n\n    # Iterate over all files in the directory\n    for file_name in os.listdir(directory):\n        # Check if the file is a JSON file\n        if file_name.endswith(\".json\"):\n            file_path = os.path.join(directory, file_name)\n\n            # Open JSON file and read its content\n            with open(file_path, \"r\") as f:\n                try:\n                    data = json.load(f)\n                except json.JSONDecodeError:\n                    continue\n\n                # Iterate over keys in the JSON file\n                for key in data:\n                    for prefix in PREFIXES:\n                        if key.startswith(prefix):\n                            stats[prefix] += 1\n                            break\n\n    return stats", "compilation_passed": true, "time": 0.009208917617797852, "tests_passed": true, "error": null}
{"code": "# Initialize the dictionary of prefix counts\n    prefix_counts = {prefix: 0 for prefix in PREFIXES}\n\n    # Iterate through all the JSON files in the specified directory\n    for file_name in os.listdir(directory):\n        if file_name.endswith(\".json\"):\n            json_file_path = os.path.join(directory, file_name)\n            with open(json_file_path, \"r\", encoding=\"utf-8\") as json_file:\n                data = json.load(json_file)\n\n            # Check if the first key in the JSON object starts with a prefix from PREFIXES\n            first_key = list(data.keys())[0]\n            for prefix in PREFIXES:\n                if first_key.startswith(prefix):\n                    prefix_counts[prefix] += 1\n                    break\n\n    return prefix_counts", "compilation_passed": true, "time": 0.0035610198974609375, "tests_passed": true, "error": null}
{"code": "statistics = {}\n    for prefix in PREFIXES:\n        statistics[prefix] = 0\n\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), \"r\") as file:\n                data = json.load(file)\n                for key in data.keys():\n                    for prefix in PREFIXES:\n                        if key.startswith(prefix):\n                            statistics[prefix] += 1\n\n    return statistics", "compilation_passed": true, "time": 0.009311914443969727, "tests_passed": true, "error": null}
{"code": "# Initialize the dictionary\n    stats = {prefix: 0 for prefix in PREFIXES}\n\n    # Loop through all files in the directory\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):  # Check if the file is a JSON file\n            # Load the JSON file\n            with open(os.path.join(directory, filename), 'r') as file:\n                data = json.load(file)\n\n            # Count the occurrence of keys starting with certain prefixes\n            for prefix in PREFIXES:\n                stats[prefix] += len([key for key in data if key.startswith(prefix)])\n\n    return stats", "compilation_passed": true, "time": 0.009341955184936523, "tests_passed": true, "error": null}
{"code": "stats = {prefix: 0 for prefix in PREFIXES}\n\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory, filename), \"r\") as file:\n                data = json.load(file)\n\n                for key in data.keys():\n                    for prefix in PREFIXES:\n                        if key.startswith(prefix):\n                            stats[prefix] += 1\n\n    return stats", "compilation_passed": true, "time": 0.009222269058227539, "tests_passed": true, "error": null}
{"code": "# Initialize a dictionary with zeros for each prefix\n    stats = {prefix: 0 for prefix in PREFIXES}\n\n    # Iterate through the JSON files in the directory\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            # Read the JSON file\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n\n            # Check if any of the keys in the data start with a prefix in the list PREFIXES\n            for key in data.keys():\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n                        break\n\n    return stats", "compilation_passed": true, "time": 0.00935673713684082, "tests_passed": true, "error": null}
{"code": "stats = {}\n    for prefix in PREFIXES:\n        count = 0\n        for file in os.listdir(directory):\n            if file.endswith('.json'):\n                with open(os.path.join(directory, file)) as f:\n                    data = json.load(f)\n                    for key in data.keys():\n                        if key.startswith(prefix):\n                            count += 1\n        stats[prefix] = count\n    return stats", "compilation_passed": true, "time": 0.0024950504302978516, "tests_passed": false, "error": "StopIteration"}
{"code": "if not os.path.isdir(directory):\n        print(\"Error: directory does not exist\")\n        return {}\n\n    counts = {prefix: 0 for prefix in PREFIXES}\n\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            filepath = os.path.join(directory, filename)\n            with open(filepath, 'r', encoding='utf-8') as json_file:\n                data = json.load(json_file)\n\n                for prefix in PREFIXES:\n                    for key in data.keys():\n                        if key.startswith(prefix):\n                            counts[prefix] += 1\n\n    return counts", "compilation_passed": true, "time": 0.003065824508666992, "tests_passed": true, "error": null}
{"code": "prefix_counts = {prefix: 0 for prefix in PREFIXES}\n\n    for file in os.listdir(directory):\n        if file.endswith(\".json\"):\n            with open(os.path.join(directory, file), \"r\") as f:\n                data = json.load(f)\n                for key in data.keys():\n                    for prefix in PREFIXES:\n                        if key.startswith(prefix):\n                            prefix_counts[prefix] += 1\n\n    return prefix_counts", "compilation_passed": true, "time": 0.009370088577270508, "tests_passed": true, "error": null}
{"code": "# Create an empty dictionary to store the key statistics\n    stats = {prefix: 0 for prefix in PREFIXES}\n\n    # Loop through all JSON files in the specified directory\n    for filename in os.listdir(directory):\n        if filename.endswith(\".json\"):\n            # Load the JSON data from the file\n            with open(os.path.join(directory, filename), 'r') as f:\n                data = json.load(f)\n\n            # Count the occurrence of keys starting with each prefix\n            for key in data:\n                for prefix in PREFIXES:\n                    if key.startswith(prefix):\n                        stats[prefix] += 1\n\n    return stats", "compilation_passed": true, "time": 0.00849008560180664, "tests_passed": true, "error": null}
{"code": "result_dict = {prefix: 0 for prefix in PREFIXES}\n\n    for file_name in os.listdir(directory):\n        if file_name.endswith(\".json\"):\n            with open(os.path.join(directory, file_name), 'r') as file:\n                data = json.load(file)\n\n            for prefix in PREFIXES:\n                if any(key.startswith(prefix) for key in data.keys()):\n                    result_dict[prefix] += 1\n\n    return result_dict", "compilation_passed": true, "time": 0.009315013885498047, "tests_passed": true, "error": null}
