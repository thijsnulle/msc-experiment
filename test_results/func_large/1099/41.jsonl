{"code": "text = re.sub(r'https?://\\S+', '', text)\n    text = text.split()\n    stopwords_count = Counter([word for word in text if word in PREDEFINED_STOPWORDS])\n    return stopwords_count.most_common()", "compilation_passed": true, "time": 0.001178741455078125, "tests_passed": true, "error": null}
{"code": "# TODO: Implement me\n    pass", "compilation_passed": true, "time": 0.0007791519165039062, "tests_passed": true, "error": null}
{"code": "# Remove URLs from the text\n    text = re.sub(r'https?://\\S+', '', text)\n\n    # Count the number of stopwords in the text\n    word_counter = Counter(text.split())\n    stopwords_counter = Counter({word: freq for word, freq in word_counter.items() if word in PREDEFINED_STOPWORDS})\n\n    # Sort the stopwords and their frequencies\n    sorted_stopwords = sorted(stopwords_counter.items(), key=lambda x: (-x[1], x[0]))\n\n    # Return the top 5 most common stopwords and their frequencies\n    return sorted_stopwords", "compilation_passed": true, "time": 0.0009951591491699219, "tests_passed": true, "error": null}
{"code": "# remove all URLs\n    text = re.sub(r'https?://\\S+', '', text)\n    # make the stopword list\n    stopword_set = set(PREDEFINED_STOPWORDS)\n    # make the word counter\n    counter = Counter()\n    for word in text.split():\n        if word in stopword_set:\n            counter[word] += 1\n    return counter.most_common()", "compilation_passed": true, "time": 0.001032114028930664, "tests_passed": true, "error": null}
{"code": "# Write your code here\n    text = re.sub(r'(https?:\\/\\/.*\\.\\S+)', '', text)\n    words = text.split()\n    counter = Counter(words)\n    return [x for x in counter.most_common() if x[0] in PREDEFINED_STOPWORDS]", "compilation_passed": true, "time": 0.0010612010955810547, "tests_passed": true, "error": null}
{"code": "# TODO\n    pass", "compilation_passed": true, "time": 0.0007491111755371094, "tests_passed": true, "error": null}
{"code": "text = re.sub(r\"http\\S+\", \"\", text)\n    words = text.split()\n    stopwords_freq = Counter([word for word in words if word in PREDEFINED_STOPWORDS])\n    most_common_stopwords = stopwords_freq.most_common()\n    return most_common_stopwords", "compilation_passed": true, "time": 0.0010309219360351562, "tests_passed": true, "error": null}
{"code": "# Remove URLs\n    text_without_urls = re.sub(r'https?://\\S+', '', text)\n\n    # Split text into words and count stopwords\n    word_counts = Counter(text_without_urls.split())\n    stopword_counts = [(word, count) for word, count in word_counts.items() if word in PREDEFINED_STOPWORDS]\n\n    return stopword_counts", "compilation_passed": true, "time": 0.0008461475372314453, "tests_passed": true, "error": null}
{"code": "# your code here\n    # remove the URLS\n    text = re.sub(r'http\\S+', '', text)\n    # remove the special characters\n    text = re.sub(r'[^\\w\\s]', '', text)\n    # tokenize the text\n    tokens = re.findall(r'\\w+', text)\n    # remove the stopwords\n    tokens = [word for word in tokens if word not in PREDEFINED_STOPWORDS]\n    # count the word frequency\n    word_freq = Counter(tokens).most_common()\n    # sort the word frequency\n    word_freq = sorted(word_freq, key=lambda x: x[1], reverse=True)\n    return word_freq", "compilation_passed": true, "time": 0.0009770393371582031, "tests_passed": true, "error": null}
{"code": "# Remove URLs and convert to lowercase\n    text = re.sub(r'https?://\\S+', '', text.lower())\n    words = Counter(re.findall(r'\\b[a-z]{3,}\\b', text))\n    stopword_counts = sorted([(word, count) for word, count in words.items() if word in PREDEFINED_STOPWORDS], key=lambda x: (-x[1], x[0]))\n    return stopword_counts", "compilation_passed": true, "time": 0.0009779930114746094, "tests_passed": true, "error": null}
{"code": "# Remove URLs from the text using regular expressions\n    text_without_urls = re.sub(r'https?:\\/\\/[a-zA-Z0-9./]+', '', text)\n\n    # Split the text into words and count the occurrences of each word\n    word_counts = Counter(text_without_urls.split())\n\n    # Extract only stopwords with their counts from the word count dictionary\n    stopword_counts = [(word, count) for word, count in word_counts.items() if word in PREDEFINED_STOPWORDS]\n\n    # Sort the stopwords in descending order by their count, then alphabetically by the word\n    sorted_stopwords = sorted(stopword_counts, key=lambda x: (-x[1], x[0]))\n\n    # Return the list of stopwords with their counts\n    return sorted_stopwords", "compilation_passed": true, "time": 0.0009860992431640625, "tests_passed": true, "error": null}
{"code": "pass", "compilation_passed": true, "time": 0.0007238388061523438, "tests_passed": true, "error": null}
{"code": "text_without_url = re.sub(r'https?://[^\\s]+', '', text)\n    words_list = re.findall(r'\\w+', text_without_url)\n    c = Counter(words_list)\n    stopwords = c.most_common()\n    result = [item for item in stopwords if item[0] in PREDEFINED_STOPWORDS]\n    return result", "compilation_passed": true, "time": 0.0012559890747070312, "tests_passed": true, "error": null}
{"code": "# Remove URLs\n    text = re.sub(r'https?://\\S+', '', text)\n\n    # Count stopwords\n    words = text.split()\n    word_counts = Counter(words)\n    stopword_counts = [(word, count) for word, count in word_counts.items() if word in PREDEFINED_STOPWORDS]\n\n    return sorted(stopword_counts, key=lambda x: x[1], reverse=True)", "compilation_passed": true, "time": 0.0010590553283691406, "tests_passed": true, "error": null}
{"code": "# Remove URLs using regex\n    text_without_urls = re.sub(r\"https?://\\S+|www\\.\\S+\", \"\", text)\n\n    # Split the text into words\n    words = text_without_urls.split()\n\n    # Count the stopwords\n    counter = Counter(word for word in words if word in PREDEFINED_STOPWORDS)\n\n    # Get the top N most common words\n    top_n_words = counter.most_common()\n\n    return top_n_words", "compilation_passed": true, "time": 0.0010707378387451172, "tests_passed": true, "error": null}
{"code": "# Remove the URLs from the text\n    text = re.sub(r'https?://\\S+', '', text)\n\n    # Count the stopwords\n    words = re.findall(r'\\w+', text)\n    counter = Counter(words)\n    stopword_counter = Counter()\n\n    for word in words:\n        if word.lower() in PREDEFINED_STOPWORDS:\n            stopword_counter[word] += 1\n\n    # Convert the Counter into a sorted list of tuples\n    stopword_list = sorted(stopword_counter.items(), key=lambda x: x[1], reverse=True)\n\n    # Return only the top 5 most frequent stopwords\n    return stopword_list[:5]", "compilation_passed": true, "time": 0.0010521411895751953, "tests_passed": true, "error": null}
{"code": "# Remove URLs and convert text to lowercase\n    text = re.sub(r'https?://\\S+', '', text).lower()\n\n    # Split text into words and count their frequency\n    word_counts = Counter(text.split())\n\n    # Sort the words based on frequency and alphabetically\n    sorted_words = sorted(word_counts.items(), key=lambda x: (-x[1], x[0]))\n\n    # Extract only the words that are in the predefined stopword list\n    stopwords = [word for word, freq in sorted_words if word in PREDEFINED_STOPWORDS]\n\n    # Return the stopword count list\n    return Counter(stopwords).most_common()", "compilation_passed": true, "time": 0.0009520053863525391, "tests_passed": true, "error": null}
{"code": "text_without_url = re.sub(r'https?://(?:[-\\w.]|(?:%[\\da-fA-F]{2}))+', '', text)\n    words = text_without_url.split()\n\n    word_counter = Counter(word for word in words if word.lower() in PREDEFINED_STOPWORDS)\n    stopword_count = word_counter.most_common()\n\n    return stopword_count", "compilation_passed": true, "time": 0.0010731220245361328, "tests_passed": true, "error": null}
{"code": "# TODO: Implement\n    return []", "compilation_passed": true, "time": 0.0007641315460205078, "tests_passed": true, "error": null}
{"code": "# remove urls\n    text = re.sub(r'https?://\\S+', '', text)\n\n    # get word count\n    words = re.findall(r'\\b\\w+\\b', text)\n    word_count = Counter(words)\n\n    # get stopword count\n    stopwords = set(PREDEFINED_STOPWORDS) & set(words)\n    stopword_count = Counter({word: word_count[word] for word in stopwords})\n\n    # convert stopword count to sorted list of tuples\n    sorted_stopwords = sorted(stopword_count.items(), key=lambda x: (-x[1], x[0]))\n\n    return sorted_stopwords[:5]  # return top 5 stopwords", "compilation_passed": true, "time": 0.0009758472442626953, "tests_passed": true, "error": null}
{"code": "text = re.sub(r'http\\S+', '', text)\n    counter = Counter(re.findall(r'\\w+', text))\n    return sorted(((word, count) for word, count in counter.items() if word in PREDEFINED_STOPWORDS), key=lambda t: t[1], reverse=True)", "compilation_passed": true, "time": 0.0010561943054199219, "tests_passed": true, "error": null}
{"code": "# Write your code here\n    # Remove URLs from the text\n    text = re.sub(r'https?://\\S+', '', text)\n\n    # Count the frequency of stopwords\n    stopwords = Counter([word for word in text.lower().split() if word in PREDEFINED_STOPWORDS])\n\n    # Convert the counter to a list of tuples and return it\n    return list(stopwords.most_common())", "compilation_passed": true, "time": 0.000997304916381836, "tests_passed": true, "error": null}
{"code": "# Remove URLs from the text\n    text = re.sub(r'https?://(?:[-\\w.]|(?:%[\\da-fA-F]{2}))+', '', text)\n\n    # Count the stopwords\n    counter = Counter([word for word in re.findall(r'\\b\\w+\\b', text) if word.lower() in PREDEFINED_STOPWORDS])\n\n    # Convert the counter to a list of tuples sorted by frequency and then alphabetically\n    return sorted(counter.items(), key=lambda x: (-x[1], x[0]))", "compilation_passed": true, "time": 0.0009310245513916016, "tests_passed": true, "error": null}
{"code": "# Remove URLs\n    text = re.sub(r'https?://(?:[-\\w.]|(?:%[\\da-fA-F]{2}))+', '', text)\n\n    # Split the text into words\n    words = text.split()\n\n    # Remove any trailing punctuation from the words\n    words = [word.rstrip(\".,!?\") for word in words]\n\n    # Count the frequency of each word that is also a stopword\n    word_counts = Counter(word for word in words if word in PREDEFINED_STOPWORDS)\n\n    # Return a list of tuples containing the stopword and its frequency\n    return [(word, count) for word, count in word_counts.items()]", "compilation_passed": true, "time": 0.0008881092071533203, "tests_passed": true, "error": null}
{"code": "text_without_url = re.sub(r'https?://[^\\s]+', '', text)\n    word_list = re.findall(r'\\b\\w+\\b', text_without_url)\n\n    stopwords_count = Counter()\n    for word in word_list:\n        if word in PREDEFINED_STOPWORDS:\n            stopwords_count[word] += 1\n\n    return sorted(stopwords_count.items(), key=lambda x: (-x[1], x[0]))", "compilation_passed": true, "time": 0.0009570121765136719, "tests_passed": true, "error": null}
{"code": "# your code goes here\n    pass", "compilation_passed": true, "time": 0.0007102489471435547, "tests_passed": true, "error": null}
{"code": "# Remove URLs from the text\n    text = re.sub(r'https?://[^\\s]+', '', text)\n\n    # Split the text into words\n    words = text.split()\n\n    # Count the stopwords\n    stopwords = [word for word in words if word in PREDEFINED_STOPWORDS]\n    counter = Counter(stopwords)\n\n    # Sort the count result by value, and return it as a list\n    sorted_count = sorted(counter.items(), key=lambda x: x[1], reverse=True)\n    return list(sorted_count)", "compilation_passed": true, "time": 0.0011248588562011719, "tests_passed": true, "error": null}
{"code": "# remove URL, split each word\n    splitted = re.sub(r'https?://[^\\s]+', '', text).split()\n\n    # count the word in splitted list\n    cnt = Counter(splitted)\n\n    # find the key-word in count\n    ans = [\n        (word, count)\n        for word, count in cnt.items()\n        if word in PREDEFINED_STOPWORDS\n    ]\n\n    # sort by count, then by word\n    return sorted(ans, key=lambda x: (-x[1], x[0]))", "compilation_passed": true, "time": 0.0009431838989257812, "tests_passed": true, "error": null}
{"code": "# your code here\n\n    # Step 1. Replace URL to a blank space\n    text = re.sub(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', '', text)\n\n    # Step 2. Count the words in the text\n    words = text.split()\n    counter = Counter(words)\n\n    # Step 3. Sort the words by frequency and then alphabetically\n    sorted_words = sorted(counter.items(), key=lambda x: (-x[1], x[0]))\n\n    # Step 4. Return the first four words\n    return sorted_words[:4]", "compilation_passed": true, "time": 0.0010330677032470703, "tests_passed": true, "error": null}
{"code": "# remove the url in the text\n    text = re.sub(r\"https?://\\S+\", \"\", text)\n\n    # split the text to words, remove the punctuation\n    text = re.sub(r\"[\\W]\", \" \", text)\n\n    # convert words to lower case and split\n    words = text.lower().split()\n\n    # count each word\n    counts = Counter(words)\n\n    # filter stop words and sort by frequency\n    stop_words = [word for word, count in counts.items() if word in PREDEFINED_STOPWORDS]\n    return sorted(stop_words, key=lambda x: counts[x], reverse=True)", "compilation_passed": true, "time": 0.0009829998016357422, "tests_passed": true, "error": null}
