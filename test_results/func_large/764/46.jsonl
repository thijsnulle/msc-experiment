{"code": "if not isinstance(csv_file, str):\n        raise TypeError('csv_file must be a string')\n    if not isinstance(latin_names, list):\n        raise TypeError('latin_names must be an array')\n    if not isinstance(names, list):\n        raise TypeError('names must be an array')\n    random.seed(rng_seed)\n    with open(csv_file, 'w', newline='', encoding=encoding) as csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerow(['Name', 'Age'])\n        for i in range(100):\n            if random.random() < 0.5:\n                name = random.choice(latin_names)\n            else:\n                name = random.choice(names)\n            age = random.randint(20, 50)\n            writer.writerow([name, age])\n    return csv_file", "compilation_passed": true, "time": 0.009244203567504883, "tests_passed": false, "error": "IndexError"}
{"code": "if not isinstance(csv_file, str):\n        raise TypeError('csv_file must be a string')\n    if not isinstance(latin_names, list):\n        raise TypeError('latin_names must be a list')\n    if not isinstance(names, list):\n        raise TypeError('names must be a list')\n    random.seed(rng_seed)\n\n    with open(csv_file, 'w', newline='', encoding=encoding) as csvfile:\n        fieldnames = ['Name', 'Age']\n        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n        writer.writeheader()\n        for i in range(100):\n            writer.writerow({'Name': random.choice(names + latin_names), 'Age': random.randint(20, 50)})\n\n    return csv_file", "compilation_passed": true, "time": 0.00901031494140625, "tests_passed": false, "error": "IndexError"}
{"code": "if not isinstance(csv_file, str):\n        raise TypeError('csv_file must be a string')\n\n    if not isinstance(latin_names, list):\n        raise TypeError('latin_names must be an array')\n\n    if not isinstance(names, list):\n        raise TypeError('names must be an array')\n\n    random.seed(rng_seed)\n    random_names = random.sample(latin_names, len(latin_names)//2) + random.sample(names, len(names)//2)\n    if len(random_names) == 0:\n        return\n    with open(csv_file, 'w', newline='', encoding=encoding) as csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerow(['Name', 'Age'])\n        for i in range(100):\n            name = random.choice(random_names)\n            age = random.randint(20, 50)\n            writer.writerow([name, age])\n    return csv_file", "compilation_passed": true, "time": 0.0021109580993652344, "tests_passed": true, "error": null}
{"code": "if not isinstance(csv_file, str):\n        raise TypeError(\"csv_file must be a string\")\n    if not isinstance(latin_names, list):\n        raise TypeError(\"latin_names must be an array\")\n    if not isinstance(names, list):\n        raise TypeError(\"names must be an array\")\n    if rng_seed is not None:\n        random.seed(rng_seed)\n    with open(csv_file, 'w', newline='', encoding=encoding) as csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerow(['Name', 'Age'])\n        for i in range(100):\n            if i % 2 == 0:\n                name = random.choice(latin_names)\n            else:\n                name = random.choice(names)\n            age = random.randint(20, 50)\n            writer.writerow([name, age])\n    return csv_file", "compilation_passed": true, "time": 0.008565902709960938, "tests_passed": false, "error": "IndexError"}
{"code": "if not isinstance(csv_file, str):\n        raise TypeError('csv_file must be a string')\n    if not isinstance(latin_names, (list, tuple)):\n        raise TypeError('latin_names must be a list or a tuple')\n    if not isinstance(names, (list, tuple)):\n        raise TypeError('names must be a list or a tuple')\n\n    random.seed(rng_seed)\n\n    with open(csv_file, 'w', newline='', encoding=encoding) as csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerow(['Name', 'Age'])\n\n        for i in range(100):\n            name = random.choice(latin_names + names)\n            age = random.randint(20, 50)\n            writer.writerow([name, age])\n    return csv_file", "compilation_passed": true, "time": 0.008475065231323242, "tests_passed": false, "error": "IndexError"}
{"code": "if not isinstance(csv_file, str):\n        raise TypeError('csv_file must be a string')\n\n    if not isinstance(latin_names, list):\n        raise TypeError('latin_names must be a list')\n\n    if not isinstance(names, list):\n        raise TypeError('names must be a list')\n\n    random.seed(rng_seed)\n\n    with open(csv_file, 'w', newline='', encoding=encoding) as csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerow(['Name', 'Age'])\n\n        for i in range(100):\n            if len(latin_names) == 0:\n                name = random.choice(names)\n            elif len(names) == 0:\n                name = random.choice(latin_names)\n            else:\n                name = random.choice([random.choice(latin_names), random.choice(names)])\n            age = random.randint(20, 50)\n            writer.writerow([name, age", "compilation_passed": false, "time": 0.0003719329833984375, "tests_passed": false, "error": "SyntaxError"}
{"code": "if type(csv_file) != str:\n        raise TypeError('csv_file must be a string')\n\n    if type(latin_names) != list:\n        raise TypeError('latin_names must be an array')\n\n    if type(names) != list:\n        raise TypeError('names must be an array')\n\n    # set the seed for the rng\n    rng = random.Random(rng_seed)\n    # create a list with a header\n    data = [['Name', 'Age']]\n    # fill the list with random data\n    for _ in range(100):\n        name = rng.choice(latin_names + names).title()\n        age = rng.randint(20, 50)\n        data.append([name, age])\n    # write the list to a csv file\n    with open(csv_file, 'w', newline='', encoding=encoding) as csvfile:\n        writer = csv.writer(csvfile, quoting=csv.QUOTE_MINIMAL)", "compilation_passed": true, "time": 0.001888275146484375, "tests_passed": true, "error": null}
{"code": "if type(csv_file) is not str:\n        raise TypeError('csv_file must be a string')\n    if type(latin_names) is not list:\n        raise TypeError('latin_names must be a list')\n    if type(names) is not list:\n        raise TypeError('names must be a list')\n    if rng_seed is not None:\n        random.seed(rng_seed)\n    if len(names) == 0 and len(latin_names) == 0:\n        with open(csv_file, 'w') as f:\n            writer = csv.writer(f)\n            writer.writerow(['Name', 'Age'])\n    for i in range(100):\n        if i < 50:\n            name = random.choice(names)\n        else:\n            name = random.choice(latin_names)\n        age = random.randint(20, 50)\n        with open(csv_file, 'a', newline='', encoding=encoding) as f:\n            writer = csv.writer", "compilation_passed": true, "time": 0.0031828880310058594, "tests_passed": true, "error": null}
{"code": "# Check that csv_file is a string\n    if not isinstance(csv_file, str):\n        raise TypeError(f'csv_file must be a string, not {type(csv_file)}')\n    # Check that latin_names is a list or empty\n    if not isinstance(latin_names, list):\n        raise TypeError(f'latin_names must be a list, not {type(latin_names)}')\n    # Check that names is a list or empty\n    if not isinstance(names, list):\n        raise TypeError(f'names must be a list, not {type(names)}')\n    # Initialize the rng\n    random.seed(rng_seed)\n\n    # Open the file with the specified encoding\n    with open(csv_file, 'w', newline='', encoding=encoding) as csvfile:\n        writer = csv.writer(csvfile)\n\n        # Write the header\n        writer.writerow(['Name', 'Age'])\n        for i in range(100):\n            # Generate a random name from the list of names\n            ", "compilation_passed": false, "time": 0.0002932548522949219, "tests_passed": false, "error": "IndentationError"}
{"code": "if not isinstance(csv_file, str):\n        raise TypeError('csv_file must be a string')\n\n    if not isinstance(latin_names, list):\n        raise TypeError('latin_names must be a list')\n\n    if not isinstance(names, list):\n        raise TypeError('names must be a list')\n\n    if rng_seed is not None:\n        random.seed(rng_seed)\n\n    with open(csv_file, 'w', newline='', encoding=encoding) as csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerow(['Name', 'Age'])\n\n        if len(latin_names) > 0 and len(names) > 0:\n            for _ in range(100):\n                if random.randint(0, 1) == 0:\n                    writer.writerow([random.choice(names), random.randint(20, 50)])\n                else:\n                    writer.writerow([random.choice(latin_names), random.rand", "compilation_passed": false, "time": 0.0003292560577392578, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Check the type of the parameters\n    if not isinstance(csv_file, str):\n        raise TypeError(f'csv_file must be a string, not {type(csv_file).__name__}')\n\n    if not isinstance(latin_names, list):\n        raise TypeError(f'latin_names must be a list, not {type(latin_names).__name__}')\n\n    if not isinstance(names, list):\n        raise TypeError(f'names must be a list, not {type(names).__name__}')\n\n    # Check if the file is not already created\n    if os.path.isfile(csv_file):\n        raise FileExistsError(f'{csv_file} already exists')\n\n    # Create the file\n    with open(csv_file, 'w', newline='', encoding=encoding) as csvfile:\n        # Check if there is any name in the arrays\n        if not (latin_names and names):\n            # If not, write only the headers\n            writer = csv.writer(csvfile)\n            ", "compilation_passed": true, "time": 0.0017430782318115234, "tests_passed": false, "error": "FileExistsError"}
{"code": "if not isinstance(csv_file, str):\n        raise TypeError('csv_file must be a string')\n    if not isinstance(latin_names, list):\n        raise TypeError('latin_names must be an array')\n    if not isinstance(names, list):\n        raise TypeError('names must be an array')\n    if rng_seed:\n        random.seed(rng_seed)\n    with open(csv_file, 'w', newline='', encoding=encoding) as csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerow(['Name', 'Age'])\n        for _ in range(100):\n            name = random.choice(latin_names if len(latin_names) > 0 else names)\n            age = random.randint(20, 50)\n            writer.writerow([name, age])\n    return csv_file", "compilation_passed": true, "time": 0.008508920669555664, "tests_passed": false, "error": "IndexError"}
{"code": "if not isinstance(csv_file, str):\n        raise TypeError(\"csv_file must be a string\")\n    if not isinstance(latin_names, list):\n        raise TypeError(\"latin_names must be an array\")\n    if not isinstance(names, list):\n        raise TypeError(\"names must be an array\")\n\n    random.seed(rng_seed)\n\n    with open(csv_file, 'w', newline='', encoding=encoding) as f:\n        writer = csv.writer(f)\n        writer.writerow(['Name', 'Age'])\n        for i in range(100):\n            writer.writerow([random.choice(latin_names if i % 2 == 0 else names), random.randint(20, 50)])\n\n    return csv_file", "compilation_passed": true, "time": 0.00884389877319336, "tests_passed": false, "error": "IndexError"}
{"code": "if not isinstance(csv_file, str):\n        raise TypeError('csv_file must be a string')\n    if not isinstance(latin_names, list):\n        raise TypeError('latin_names must be an array')\n    if not isinstance(names, list):\n        raise TypeError('names must be an array')\n    random.seed(rng_seed)\n    with open(csv_file, 'w', newline='', encoding=encoding) as csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerow(['Name', 'Age'])\n        for i in range(100):\n            name = random.choice(latin_names + names)\n            age = random.randint(20, 50)\n            writer.writerow([name, age])\n    return csv_file", "compilation_passed": true, "time": 0.008662223815917969, "tests_passed": false, "error": "IndexError"}
{"code": "# Check if the input arguments are correct\n    if not isinstance(csv_file, str):\n        raise TypeError(\"csv_file must be a string\")\n    if not isinstance(latin_names, list):\n        raise TypeError(\"latin_names must be a list\")\n    if not isinstance(names, list):\n        raise TypeError(\"names must be a list\")\n\n    # Set the seed for the random number generator\n    if rng_seed is not None:\n        random.seed(rng_seed)\n\n    # Create the CSV file\n    with open(csv_file, 'w', newline='', encoding=encoding) as csvfile:\n        writer = csv.writer(csvfile)\n        # Write the header\n        writer.writerow(['Name', 'Age'])\n\n        # Write the lines\n        for _ in range(100):\n            # Choose a random name from the input arrays\n            if random.randint(0, 1) == 0:\n                name = random.choice(latin_names)\n            else:\n                ", "compilation_passed": false, "time": 0.00030803680419921875, "tests_passed": false, "error": "IndentationError"}
{"code": "random.seed(rng_seed)\n    if not isinstance(csv_file, str):\n        raise TypeError('csv_file must be a string')\n    if not isinstance(latin_names, list):\n        raise TypeError('latin_names must be a list')\n    if not isinstance(names, list):\n        raise TypeError('names must be a list')\n\n    with open(csv_file, 'w', newline='', encoding=encoding) as csv_file_out:\n        writer = csv.writer(csv_file_out, delimiter=',')\n        writer.writerow(['Name', 'Age'])\n\n        for i in range(100):\n            name = random.choice(latin_names) if i % 2 == 0 else random.choice(names)\n            age = random.randint(20, 50)\n            writer.writerow([name, age])\n    return csv_file", "compilation_passed": true, "time": 0.008753776550292969, "tests_passed": false, "error": "IndexError"}
{"code": "if not isinstance(csv_file, str):\n        raise TypeError(f'Expected a str, got a {type(csv_file)}')\n    if not isinstance(latin_names, list):\n        raise TypeError(f'Expected a list, got a {type(latin_names)}')\n    if not isinstance(names, list):\n        raise TypeError(f'Expected a list, got a {type(names)}')\n    if not isinstance(encoding, str):\n        raise TypeError(f'Expected a str, got a {type(encoding)}')\n    if rng_seed is not None:\n        if not isinstance(rng_seed, int):\n            raise TypeError(f'Expected an int, got a {type(rng_seed)}')\n    if len(names) == 0 and len(latin_names) == 0:\n        with open(csv_file, 'w', newline='', encoding=encoding) as csvfile:\n            writer = csv.writer(csvfile, delimiter=',', quotechar='\"', quoting=csv.QUOTE_", "compilation_passed": false, "time": 0.00036907196044921875, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not isinstance(csv_file, str):\n        raise TypeError(\"csv_file must be a string\")\n    if not isinstance(latin_names, list):\n        raise TypeError(\"latin_names must be a list\")\n    if not isinstance(names, list):\n        raise TypeError(\"names must be a list\")\n    random.seed(rng_seed)\n    with open(csv_file, 'w', newline='', encoding=encoding) as f:\n        writer = csv.writer(f)\n        writer.writerow(['Name', 'Age'])\n        for _ in range(100):\n            if len(names) > 0 and len(latin_names) > 0:\n                name = random.choice(names + latin_names)\n            elif len(names) > 0:\n                name = random.choice(names)\n            elif len(latin_names) > 0:\n                name = random.choice(latin_names)\n            else:\n                name = ''\n            age = random.randint(20", "compilation_passed": false, "time": 0.0003180503845214844, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not isinstance(csv_file, str):\n        raise TypeError(\"csv_file must be a string\")\n    if not isinstance(latin_names, list):\n        raise TypeError(\"latin_names must be an array\")\n    if not isinstance(names, list):\n        raise TypeError(\"names must be an array\")\n\n    if rng_seed is None:\n        rng_seed = random.randint(0, 2**32 - 1)\n    random.seed(rng_seed)\n\n    with open(csv_file, 'w', newline='', encoding=encoding) as f:\n        writer = csv.writer(f)\n        writer.writerow(['Name', 'Age'])\n        for i in range(100):\n            if i % 2 == 0:\n                writer.writerow([random.choice(names), random.randint(20, 50)])\n            else:\n                writer.writerow([random.choice(latin_names), random.randint(20, 50", "compilation_passed": false, "time": 0.00031113624572753906, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not isinstance(csv_file, str):\n        raise TypeError('csv_file must be a string')\n    if not isinstance(latin_names, list):\n        raise TypeError('latin_names must be a list')\n    if not isinstance(names, list):\n        raise TypeError('names must be a list')\n\n    with open(csv_file, 'w', newline='', encoding=encoding) as csvfile:\n        csv_writer = csv.writer(csvfile, delimiter=',')\n        csv_writer.writerow(['Name', 'Age'])\n\n        for i in range(100):\n            if rng_seed is not None:\n                random.seed(rng_seed + i)\n            name = random.choice(latin_names) if i % 2 == 0 else random.choice(names)\n            age = random.randint(20, 50)\n            csv_writer.writerow([name, age])\n\n    return csv_file", "compilation_passed": true, "time": 0.010686159133911133, "tests_passed": false, "error": "IndexError"}
{"code": "if not isinstance(csv_file, str):\n        raise TypeError(f'csv_file must be a string')\n\n    if not isinstance(latin_names, list):\n        raise TypeError(f'latin_names must be an array')\n\n    if not isinstance(names, list):\n        raise TypeError(f'names must be an array')\n\n    if rng_seed is not None:\n        random.seed(rng_seed)\n\n    with open(csv_file, 'w', newline='', encoding=encoding) as csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerow(['Name', 'Age'])\n        for i in range(100):\n            if i % 2 == 0:\n                writer.writerow([random.choice(latin_names), random.randint(20, 50)])\n            else:\n                writer.writerow([random.choice(names), random.randint(20, 50)])\n\n    return csv_file", "compilation_passed": true, "time": 0.008411884307861328, "tests_passed": false, "error": "IndexError"}
{"code": "if not isinstance(csv_file, str):\n        raise TypeError('csv_file must be a string')\n    if not isinstance(latin_names, list) and not isinstance(latin_names, tuple):\n        raise TypeError('latin_names must be an array')\n    if not isinstance(names, list) and not isinstance(names, tuple):\n        raise TypeError('names must be an array')\n    if rng_seed:\n        random.seed(rng_seed)\n    with open(csv_file, 'w', newline='', encoding=encoding) as csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerow(['Name', 'Age'])\n        for _ in range(100):\n            name = random.choice(names + latin_names)\n            age = random.randint(20, 50)\n            writer.writerow([name, age])\n    return csv_file", "compilation_passed": true, "time": 0.008664131164550781, "tests_passed": false, "error": "IndexError"}
{"code": "random.seed(rng_seed)\n    if not isinstance(csv_file, str):\n        raise TypeError(\"csv_file must be a string\")\n    if not isinstance(latin_names, list):\n        raise TypeError(\"latin_names must be an array\")\n    if not isinstance(names, list):\n        raise TypeError(\"names must be an array\")\n    with open(csv_file, 'w', newline='', encoding=encoding) as csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerow(['Name', 'Age'])\n        for _ in range(100):\n            if not names:\n                name = random.choice(latin_names)\n            elif not latin_names:\n                name = random.choice(names)\n            elif random.random() < len(names) / (len(latin_names) + len(names)):\n                name = random.choice(names)\n            else:\n                name = random.choice(latin_names)\n            writer.writerow([name, random", "compilation_passed": false, "time": 0.0003571510314941406, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not isinstance(csv_file, str):\n        raise TypeError('csv_file must be a string')\n\n    if not isinstance(latin_names, list):\n        raise TypeError('latin_names must be a list')\n\n    if not isinstance(names, list):\n        raise TypeError('names must be a list')\n\n    # shuffle names\n    random.seed(rng_seed)\n\n    latin_names_shuffled = random.sample(latin_names, len(latin_names))\n    names_shuffled = random.sample(names, len(names))\n\n    # create a list of 100 names with half latin and half english names\n    names_list = []\n    for i in range(50):\n        names_list.append([latin_names_shuffled[i], random.randint(20, 50)])\n        names_list.append([names_shuffled[i], random.randint(20, 50)])\n\n    # create a csv file with the names\n    with open", "compilation_passed": false, "time": 0.00029277801513671875, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not isinstance(csv_file, str):\n        raise TypeError('csv_file must be a string')\n    if not isinstance(latin_names, list):\n        raise TypeError('latin_names must be a list')\n    if not isinstance(names, list):\n        raise TypeError('names must be a list')\n    if not rng_seed:\n        rng_seed = random.randint(0, 200)\n    random.seed(rng_seed)\n    if len(latin_names) == 0 and len(names) == 0:\n        header = ['Name', 'Age']\n    elif len(latin_names) == 0:\n        header = ['Name', 'Age']\n        latin_names = [''] * len(names)\n    elif len(names) == 0:\n        header = ['Name', 'Age']\n        names = [''] * len(latin_names)\n    else:\n        header = ['Name', 'Age']\n\n    with open(csv_file, 'w', newline=''", "compilation_passed": false, "time": 0.00031185150146484375, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Check inputs\n    if not isinstance(csv_file, str):\n        raise TypeError(\"csv_file must be a string\")\n    if not isinstance(latin_names, (list, tuple)):\n        raise TypeError(\"latin_names must be a list or tuple\")\n    if not isinstance(names, (list, tuple)):\n        raise TypeError(\"names must be a list or tuple\")\n\n    # Set RNG seed\n    random.seed(rng_seed)\n\n    # Generate lines\n    lines = [f\"{name},{random.randint(20, 50)}\" for name in random.sample(latin_names + names, 100)]\n\n    # Write lines to CSV file\n    with open(csv_file, 'w', newline='', encoding=encoding) as csvfile:\n        writer = csv.writer(csvfile, delimiter=',')\n        writer.writerow(['Name', 'Age'])\n        writer.writerows([line.split(',') for line in lines])\n\n    #", "compilation_passed": true, "time": 0.0018739700317382812, "tests_passed": false, "error": "ValueError"}
{"code": "random.seed(rng_seed)\n\n    if not isinstance(csv_file, str):\n        raise TypeError('csv_file should be a string')\n    if not isinstance(latin_names, list) or not isinstance(names, list):\n        raise TypeError('latin_names and names should be arrays')\n    if len(names) == 0 and len(latin_names) == 0:\n        raise ValueError(\"Please provide at least one name or one latin name to generate a valid csv file.\")\n\n    with open(csv_file, 'w', newline='', encoding=encoding) as csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerow(['Name', 'Age'])\n\n        for i in range(100):\n            # Choose a random name from the two arrays\n            name = random.choice(latin_names if random.random() < 0.5 else names)\n\n            # Generate a random age between 20 and 50\n            age = random.randint(20, 50)", "compilation_passed": true, "time": 0.00185394287109375, "tests_passed": true, "error": null}
{"code": "# Check arguments\n    if not isinstance(csv_file, str):\n        raise TypeError('csv_file must be a string')\n    if not isinstance(latin_names, list):\n        raise TypeError('latin_names must be a list')\n    if not isinstance(names, list):\n        raise TypeError('names must be a list')\n\n    # Create CSV file\n    with open(csv_file, 'w+', encoding=encoding) as csvfile:\n        fieldnames = ['Name', 'Age']\n        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n        writer.writeheader()\n        for i in range(100):\n            name = random.choice(latin_names + names)\n            writer.writerow({'Name': name, 'Age': random.randint(20, 50)})\n    return csv_file", "compilation_passed": true, "time": 0.008788108825683594, "tests_passed": false, "error": "IndexError"}
{"code": "if not isinstance(csv_file, str):\n        raise TypeError(\"csv_file must be a string\")\n    if not isinstance(latin_names, list):\n        raise TypeError(\"latin_names must be a list\")\n    if not isinstance(names, list):\n        raise TypeError(\"names must be a list\")\n\n    if rng_seed:\n        random.seed(rng_seed)\n\n    with open(csv_file, 'w', encoding=encoding, newline='') as csvfile:\n        writer = csv.writer(csvfile, delimiter=',')\n        writer.writerow(['Name', 'Age'])\n\n        if latin_names and names:\n            for _ in range(100):\n                if random.random() < 0.5:\n                    writer.writerow([random.choice(latin_names), random.randint(20, 50)])\n                else:\n                    writer.writerow([random.choice(names), random.randint(20, 50)])", "compilation_passed": true, "time": 0.0019140243530273438, "tests_passed": true, "error": null}
{"code": "if not isinstance(csv_file, str):\n        raise TypeError('csv_file must be a string')\n    if not isinstance(latin_names, list):\n        raise TypeError('latin_names must be a list')\n    if not isinstance(names, list):\n        raise TypeError('names must be a list')\n    if rng_seed is not None:\n        random.seed(rng_seed)\n    if latin_names == [] and names == []:\n        with open(csv_file, 'w', newline='', encoding=encoding) as csvfile:\n            writer = csv.writer(csvfile)\n            writer.writerow(['Name', 'Age'])\n    else:\n        with open(csv_file, 'w', newline='', encoding=encoding) as csvfile:\n            writer = csv.writer(csvfile)\n            writer.writerow(['Name', 'Age'])\n            for i in range(100):\n                if i < 50:\n                    writer.writerow([random.choice(latin_names),", "compilation_passed": false, "time": 0.0003371238708496094, "tests_passed": false, "error": "SyntaxError"}
