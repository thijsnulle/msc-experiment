{"code": "np.random.seed(seed)  # Set the seed for reproducibility\n\n    # Generate the sample\n    sample = np.random.normal(mu, sigma, sample_size)\n\n    # Compute the empirical mean and standard deviation of the sample\n    empirical_mean = np.mean(sample)\n    empirical_std = np.std(sample)\n\n    # Plot the histogram with normal probability density function\n    x = np.linspace(min(sample), max(sample), sample_size)\n    ax = plt.subplot()\n    ax.hist(sample, bins='auto', density=True, alpha=0.5, label='Empirical Distribution')\n    ax.plot(x, stats.norm.pdf(x, mu, sigma), label='Normal Distribution')\n    ax.set_title('Normal Distribution with $\\\\mu = %0.2f, \\\\sigma = %0.2f$' % (mu, sigma))\n    ax.set_xlabel('X')\n    ax.set_ylabel('Density')\n    ax.legend()\n\n    return ax, empirical_mean, empirical_", "compilation_passed": true, "time": 0.0071887969970703125, "tests_passed": false, "error": "NameError"}
{"code": "np.random.seed(seed)\n    sample = np.random.normal(mu, sigma, sample_size)\n    ax = plt.figure()\n\n    ax = plt.hist(sample, bins=20, density=True)\n    x = np.linspace(min(sample), max(sample), 100)\n    pdf = stats.norm.pdf(x, mu, sigma)\n    ax = plt.plot(x, pdf)\n    ax = plt.title(f\"Normal Distribution with mu = {mu}, sigma = {sigma}\")\n    plt.show()\n\n    mean = np.mean(sample)\n    std = np.std(sample)\n    return ax, mean, std", "compilation_passed": true, "time": 0.018104076385498047, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    sample = stats.norm.rvs(mu, sigma, sample_size)\n    # Plot the histogram\n    plt.hist(sample, normed=True, alpha=0.5, bins=20)\n    # Plot the normal PDF\n    xmin, xmax = plt.xlim()\n    x = np.linspace(xmin, xmax, 10000)\n    p = stats.norm.pdf(x, mu, sigma)\n    plt.plot(x, p, 'k', linewidth=2)\n    plt.xlabel('Observed data')\n    plt.ylabel('Density')\n    # Set title\n    plt.title(r'Normal Distribution with $\\mu = {:.2f}$, $\\sigma = {:.2f}$'.format(mu, sigma))\n    ax = plt.gca()\n    # Return the Axes object and the empirical mean and standard deviation\n    return ax, sample.mean(), sample.std()", "compilation_passed": true, "time": 0.004976034164428711, "tests_passed": false, "error": "AttributeError"}
{"code": "np.random.seed(seed)\n    sample = np.random.normal(mu, sigma, sample_size)\n    empirical_mean = np.mean(sample)\n    empirical_std = np.std(sample)\n    x = np.linspace(mu - 3 * sigma, mu + 3 * sigma, 100)\n    ax = plt.subplot(111)\n    ax.hist(sample, normed=True, histtype='stepfilled', alpha=0.2)\n    ax.plot(x, stats.norm.pdf(x, mu, sigma), label='normal distribution')\n    ax.set_title(f'Normal Distribution with $\\\\mu = {mu:.2f}, \\\\sigma = {sigma:.2f}$')\n    ax.legend()\n    plt.show()\n\n    return ax, empirical_mean, empirical_std", "compilation_passed": true, "time": 0.0019779205322265625, "tests_passed": false, "error": "AttributeError"}
{"code": "# Set the seed for reproducibility\n    np.random.seed(seed)\n\n    # Generate the sample\n    sample = np.random.normal(mu, sigma, sample_size)\n\n    # Calculate empirical mean and standard deviation\n    sample_mean = np.mean(sample)\n    sample_std = np.std(sample)\n\n    # Create a figure and axes for plotting\n    fig, ax = plt.subplots()\n\n    # Plot the histogram of the sample\n    ax.hist(sample, density=True, bins=50)\n\n    # Create a range of x values to plot the PDF\n    x = np.linspace(-4, 4, 1000)\n\n    # Calculate the PDF using scipy.stats\n    pdf = stats.norm.pdf(x, mu, sigma)\n\n    # Plot the PDF\n    ax.plot(x, pdf, 'r-')\n\n    # Set the plot title\n    ax.set_title('Normal Distribution with $\\\\mu = %0.2f, \\\\sigma = %0.2f$' % (mu, sigma))\n\n    #", "compilation_passed": true, "time": 0.022868871688842773, "tests_passed": false, "error": "TypeError"}
{"code": "np.random.seed(seed)\n    x = stats.norm.rvs(loc=mu, scale=sigma, size=sample_size)\n    mean = np.mean(x)\n    std = np.std(x)\n    ax = plt.figure().add_subplot()\n    ax.hist(x, bins=20, density=True, edgecolor='white', linewidth=0.5)\n    x = np.linspace(min(x), max(x), 100)\n    ax.plot(x, stats.norm.pdf(x, mu, sigma), linewidth=2)\n    ax.set_title('Normal Distribution with $\\\\mu = %0.2f, \\\\sigma = %0.2f$' % (mu, sigma))\n    plt.show()\n\n    return ax, mean, std", "compilation_passed": true, "time": 0.08559370040893555, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    sample = np.random.normal(mu, sigma, sample_size)\n\n    x = np.linspace(sample.min(), sample.max(), 100)\n    ax = plt.subplot()\n    plt.plot(x, stats.norm.pdf(x, mu, sigma))\n\n    ax.hist(sample, bins=20, density=True)\n    ax.set_title(f'Normal Distribution with $\\\\mu = {mu:.2f}$, $\\\\sigma = {sigma:.2f}$')\n\n    mean = np.mean(sample)\n    std = np.std(sample, ddof=1)\n    print(f\"Mean: {mean:.2f}, Std: {std:.2f}\")\n\n    return ax, mean, std", "compilation_passed": true, "time": 0.0050258636474609375, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    sample = np.random.normal(mu, sigma, sample_size)\n    x = np.linspace(min(sample), max(sample), num=100)\n    ax = plt.subplot()\n    ax.plot(x, stats.norm.pdf(x, mu, sigma))\n    ax.hist(sample, bins=30, normed=True)\n    ax.set_title('Normal Distribution with $\\\\mu = %0.2f, \\\\sigma = %0.2f$' % (mu, sigma))\n    return ax, np.mean(sample), np.std(sample)", "compilation_passed": true, "time": 0.006961822509765625, "tests_passed": false, "error": "AttributeError"}
{"code": "np.random.seed(seed)\n    sample = np.random.normal(mu, sigma, sample_size)\n    ax = plt.figure()\n    ax = plt.hist(sample, bins=50, density=True)\n    x = np.linspace(min(sample), max(sample), 1000)\n    ax = plt.plot(x, stats.norm.pdf(x, mu, sigma))\n    plt.title(f\"Normal Distribution with $\\\\mu = {mu}, \\\\sigma = {sigma}$\")\n    plt.show()\n    return ax, np.mean(sample), np.std(sample)", "compilation_passed": true, "time": 0.02256488800048828, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    x = np.random.normal(mu, sigma, sample_size)\n\n    fig, ax = plt.subplots(1, 1)\n    ax.set_title(r'Normal Distribution with $\\mu = %0.2f, \\sigma = %0.2f$' % (mu, sigma))\n    ax.set_xlabel('Sample Values')\n    ax.set_ylabel('Probability Density')\n\n    # Plot the histogram with vertical lines on each bar with length of the probability density function for the bar's value.\n    ax.hist(x, bins=30, density=True, edgecolor='black')\n    x_line = np.linspace(np.min(x), np.max(x), 1000)\n    ax.plot(x_line, stats.norm.pdf(x_line, mu, sigma), 'r', label=r'$f(x) = \\frac{1}{\\sqrt{2\\pi}\\sigma}e^{\\frac{-(x-\\mu)^2}{2\\sigma^2}}$')\n\n", "compilation_passed": true, "time": 0.021421194076538086, "tests_passed": false, "error": "TypeError"}
{"code": "np.random.seed(seed)\n    x = np.random.normal(mu, sigma, sample_size)\n    mean = np.mean(x)\n    std = np.std(x)\n\n    ax = plt.subplot()\n    ax.hist(x, bins='auto')\n    x = np.linspace(min(x), max(x), 1000)\n    ax.plot(x, stats.norm.pdf(x, np.mean(x), np.std(x)), linewidth=1, color='r')\n    ax.set_title(f\"Normal Distribution with $\\\\mu = {np.round(mu, 2)}, \\\\sigma = {np.round(sigma, 2)}$\")\n\n    return ax, mean, std", "compilation_passed": true, "time": 0.005681037902832031, "tests_passed": true, "error": null}
{"code": "# Initialize the random seed for reproducibility\n    np.random.seed(seed)\n\n    # Generate a sample of 1000 values from a normal distribution with mean 0 and standard deviation 1\n    sample = np.random.normal(mu, sigma, sample_size)\n\n    # Find the empirical mean and standard deviation of the sample\n    sample_mean = np.mean(sample)\n    sample_std = np.std(sample)\n\n    # Plot the histogram of the sample with bins of width 1 and alpha=0.2\n    # Add vertical lines at the mean and standard deviation of the sample with colors 'red' and 'green'\n    # Add the x and y labels 'x' and 'Frequency', respectively, to the plot\n    # Add the title 'Normal Distribution with $\\\\mu = %0.2f, \\\\sigma = %0.2f$' to the plot, where the mean and standard deviation values are formatted to two decimal places\n    # Set the ylim of the plot to (0, 0.4)\n    ax = sns.histplot(sample, bins='auto', color='blue'", "compilation_passed": false, "time": 0.00017571449279785156, "tests_passed": false, "error": "SyntaxError"}
{"code": "np.random.seed(seed)\n    sample = np.random.normal(mu, sigma, sample_size)\n\n    mean = np.mean(sample)\n    std = np.std(sample)\n\n    fig, ax = plt.subplots()\n    ax.hist(sample, density=True, bins=20)\n\n    x = np.linspace(min(sample), max(sample), 100)\n    pdf = stats.norm.pdf(x, mu, sigma)\n    ax.plot(x, pdf, linewidth=2)\n\n    ax.set_title(f\"Normal Distribution with $\\\\mu = {mu}, \\\\sigma = {sigma}$\")\n\n    return ax, mean, std", "compilation_passed": true, "time": 0.019338130950927734, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    sample = np.random.normal(mu, sigma, size=sample_size)\n    # Plot the histogram\n    fig, ax = plt.subplots()\n    ax.hist(sample, bins=30, density=True, alpha=0.6, edgecolor='black')\n\n    # Add the normal distribution PDF\n    x = np.linspace(min(sample), max(sample), 1000)\n    ax.plot(x, stats.norm.pdf(x, mu, sigma), lw=2, color='red')\n\n    # Set the title\n    ax.set_title(f'Normal Distribution with $\\\\mu = {mu:.2f}, \\\\sigma = {sigma:.2f}$')\n    ax.set_xlabel('x')\n    ax.set_ylabel('Probability Density')\n    plt.tight_layout()\n    plt.show()\n    return ax, np.mean(sample), np.std(sample)", "compilation_passed": true, "time": 0.4093739986419678, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)  # set seed\n    sample = np.random.normal(mu, sigma, sample_size)  # generate a sample\n    emp_mean = np.mean(sample)  # empirical mean of the sample\n    emp_std = np.std(sample)  # empirical standard deviation of the sample\n    # generate a sequence of x values for the normal PDF\n    x = np.linspace(min(sample), max(sample), 1000)\n    # calculate the corresponding y values for the normal PDF\n    y = stats.norm.pdf(x, mu, sigma)\n    # plot the histogram of the sample\n    ax = plt.gca()  # get the current axes object\n    ax.hist(sample, bins=20, density=True)\n    # plot the normal PDF on top of the histogram\n    ax.plot(x, y)\n    # set the title of the plot\n    ax.set_title(f'Normal Distribution with $\\\\mu = {mu}$, $\\\\sigma = {sigma}$')\n    return ax, emp_mean, emp_std", "compilation_passed": true, "time": 0.005657672882080078, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    data = stats.norm.rvs(size=sample_size, loc=mu, scale=sigma)\n    ax = plt.subplots()[1]\n\n    # Plot histogram with 30 bins\n    ax.hist(data, bins=30, density=True)\n\n    # Plot normal PDF\n    x = np.linspace(-4, 4, 100)\n    ax.plot(x, stats.norm.pdf(x, loc=mu, scale=sigma))\n\n    ax.set_title(f\"Normal Distribution with $\\\\mu = {mu:0.2f}, \\\\sigma = {sigma:0.2f}$\")\n    return ax, np.mean(data), np.std(data)", "compilation_passed": true, "time": 0.09962201118469238, "tests_passed": true, "error": null}
{"code": "# Set seed for reproducibility\n    np.random.seed(seed)\n    # Generate the sample\n    sample = stats.norm.rvs(mu, sigma, size=sample_size)\n    # Empirical mean and standard deviation of the sample\n    mean = np.mean(sample)\n    std = np.std(sample)\n    # Plot the histogram of the sample\n    ax = plt.axes()\n    ax.hist(sample, bins=100, density=True, alpha=0.75, color='blue', edgecolor='black')\n    # Add normal PDF to the plot\n    x = np.linspace(-5, 5, 1000)\n    y = stats.norm.pdf(x, mu, sigma)\n    ax.plot(x, y, 'r-', lw=2, alpha=0.75, label='Normal PDF')\n    # Set the plot title\n    ax.set_title('Normal Distribution with $\\\\mu = %0.2f, \\\\sigma = %0.2f$' % (mu, sigma))\n    # Return the Axes object representing the", "compilation_passed": true, "time": 0.023524761199951172, "tests_passed": false, "error": "TypeError"}
{"code": "np.random.seed(seed)\n    sample = np.random.normal(mu, sigma, sample_size)\n    empirical_mean = np.mean(sample)\n    empirical_std = np.std(sample)\n\n    fig, ax = plt.subplots()\n    ax.hist(sample, bins=20, density=True, alpha=0.6, color='blue')\n    ax.set_title(f'Normal Distribution with $\\mu = {mu}, \\sigma = {sigma}$')\n    x = np.linspace(min(sample), max(sample), 100)\n    y = stats.norm.pdf(x, mu, sigma)\n    ax.plot(x, y, color='red', linewidth=2)\n\n    return ax, empirical_mean, empirical_std", "compilation_passed": true, "time": 0.01929306983947754, "tests_passed": true, "error": null}
{"code": "# Set the seed for reproducibility\n    np.random.seed(seed)\n    # Generate a sample from a normal distribution with a given mean and a standard deviation\n    sample = stats.norm.rvs(loc=mu, scale=sigma, size=sample_size)\n    # Calculate empirical mean and standard deviation of the sample\n    sample_mean = np.mean(sample)\n    sample_std = np.std(sample, ddof=1)\n    # Plot the histogram of the sample\n    ax = plt.subplot(121)\n    ax.hist(sample, bins='auto')\n    ax.set_title('Normal Distribution with $\\\\mu = %0.2f, \\\\sigma = %0.2f$' % (mu, sigma))\n    # Plot the probability density function of the normal distribution\n    ax = plt.subplot(122)\n    x = np.linspace(stats.norm.ppf(0.01), stats.norm.ppf(0.99), 100)\n    ax.plot(x, stats.norm.pdf(x), 'r-'", "compilation_passed": false, "time": 0.000270843505859375, "tests_passed": false, "error": "SyntaxError"}
{"code": "np.random.seed(seed)\n    sample = stats.norm.rvs(loc=mu, scale=sigma, size=sample_size)\n    mean = np.mean(sample)\n    std = np.std(sample)\n    ax = plt.subplot()\n    ax.set_title('Normal Distribution with $\\\\mu = %0.2f, \\\\sigma = %0.2f$' % (mu, sigma))\n    ax.set_xlabel('x')\n    ax.set_ylabel('Frequency')\n    ax.grid(linestyle='--')\n    # Plot the histogram\n    ax.hist(sample, density=True, histtype='step', label='Empirical Sample')\n    # Plot the theoretical probability density function\n    x = np.linspace(min(sample), max(sample), 1000)\n    y = stats.norm.pdf(x, loc=mu, scale=sigma)\n    ax.plot(x, y, label='Normal PDF')\n    ax.legend()\n    plt.show()\n    return ax, mean, std", "compilation_passed": true, "time": 0.011135101318359375, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    x = np.random.normal(mu, sigma, sample_size)\n    mean = np.mean(x)\n    std = np.std(x, ddof=1)\n    ax = plt.subplot(111)\n    ax.set_title(f'Normal Distribution with $\\\\mu = {mu}, \\\\sigma = {sigma}$')\n    ax.hist(x, bins=25, density=True)\n    ax.set_xlabel('x')\n    ax.set_ylabel('Density')\n    x_pdf = np.linspace(min(x), max(x), 1000)\n    ax.plot(x_pdf, stats.norm.pdf(x_pdf, mu, sigma),\n            label=f'mean: {mean:.2f}, std: {std:.2f}')\n    return ax, mean, std", "compilation_passed": true, "time": 0.006733894348144531, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    data = np.random.normal(mu, sigma, sample_size)\n    mean = np.mean(data)\n    std = np.std(data)\n    x = np.linspace(min(data), max(data), 1000)\n    ax = plt.axes()\n    ax.hist(data, bins=30, density=True, alpha=0.6, label=\"empiric\")\n    ax.plot(x, stats.norm.pdf(x, mu, sigma), label=\"theoretical\")\n    ax.set_title('Normal Distribution with $\\\\mu = %0.2f, \\\\sigma = %0.2f$' % (mu, sigma))\n    ax.legend()\n    plt.show()\n    return ax, mean, std", "compilation_passed": true, "time": 0.04972386360168457, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    X = np.random.normal(mu, sigma, sample_size)\n    mean = np.mean(X)\n    std = np.std(X)\n    ax = plt.subplot(111)\n    ax.hist(X, density=True, label='Sample', edgecolor='black')\n    x = np.linspace(stats.norm.ppf(0.001, mu, sigma), stats.norm.ppf(\n        0.999, mu, sigma), 1000)\n    ax.plot(x, stats.norm.pdf(x, mu, sigma),\n            'r-', label='Probability Density Function')\n    ax.set_title('Normal Distribution with $\\\\mu = %0.2f, \\\\sigma = %0.2f$' %\n                 (mu, sigma))\n    ax.legend()\n    return ax, mean, std", "compilation_passed": true, "time": 0.024748802185058594, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    sample = stats.norm.rvs(loc=mu, scale=sigma, size=sample_size)\n    mean, std = np.mean(sample), np.std(sample)\n\n    # create normal distribution\n    norm_data = np.linspace(min(sample) - 3 * std, max(sample) + 3 * std, sample_size)\n    norm_prob = stats.norm.pdf(norm_data, loc=mu, scale=sigma)\n\n    # create figure and plot\n    fig, ax = plt.subplots(1, 1, figsize=(7, 7))\n    ax.hist(sample, bins=100, density=True, edgecolor='black', color='#2196f3', linewidth=1)\n    ax.set_title(rf'Normal Distribution with $\\mu = {round(mu, 3)}, \\sigma = {round(sigma, 3)}$')\n    ax.set_xlabel('x')\n    ax.set_ylabel('Density')\n\n    # plot normal distribution\n    ", "compilation_passed": true, "time": 0.03559613227844238, "tests_passed": false, "error": "TypeError"}
{"code": "np.random.seed(seed)\n    # Generate a sample from a normal distribution with mean mu and standard deviation sigma.\n    sample = stats.norm.rvs(loc=mu, scale=sigma, size=sample_size)\n    # Plot the histogram of the sample with the probability density function.\n    x = np.linspace(min(sample), max(sample), 100)\n    ax = plt.hist(sample, bins=100, density=True)\n    plt.plot(x, stats.norm.pdf(x, mu, sigma))\n    # Add a title to the plot with the given mean and standard deviation.\n    plt.title(f'Normal Distribution with $\\\\mu = {mu:.2f}, \\\\sigma = {sigma:.2f}$')\n    plt.xlabel('x')\n    plt.ylabel('density')\n    plt.grid()\n    # Return the axes object representing the plot, the empirical mean and standard deviation of the sample.\n    return ax, np.mean(sample), np.std(sample)", "compilation_passed": true, "time": 0.018666982650756836, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    data = stats.norm.rvs(size=sample_size, loc=mu, scale=sigma)\n    ax = plt.hist(data, density=True, alpha=0.8, bins=100)\n    mean = np.mean(data)\n    std = np.std(data)\n    # Plot the probability density function\n    x = np.linspace(min(data), max(data), 1000)\n    y = stats.norm.pdf(x, mu, sigma)\n    plt.plot(x, y, 'r', linewidth=2)\n    plt.title(f\"Normal Distribution with $\\\\mu = {mu}, \\\\sigma = {sigma}$\")\n    return ax, mean, std", "compilation_passed": true, "time": 0.019302845001220703, "tests_passed": true, "error": null}
{"code": "# Set the seed\n    np.random.seed(seed)\n    # Generate a sample\n    sample = stats.norm.rvs(loc=mu, scale=sigma, size=sample_size)\n    # Compute empirical mean and standard deviation of the sample\n    mean = np.mean(sample)\n    std = np.std(sample)\n    # Plot the histogram\n    ax = plt.subplot(2, 1, 1)\n    plt.hist(sample, bins='auto', density=True)\n    # Plot the probability density function\n    x = np.linspace(min(sample), max(sample), 1000)\n    plt.plot(x, stats.norm.pdf(x, mu, std))\n    plt.title('Normal Distribution with $\\\\mu = %0.2f, \\\\sigma = %0.2f$' % (mu, std))\n    plt.tight_layout()\n    # Return the Axes object representing the plot and the empirical mean and standard deviation of the sample\n    return ax, mean, std", "compilation_passed": true, "time": 0.03671884536743164, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    sample = np.random.normal(mu, sigma, sample_size)\n    emp_mean = np.mean(sample)\n    emp_std = np.std(sample)\n\n    # plot the histogram and the normal PDF together\n    ax = plt.subplot()\n    ax.hist(sample, bins=20, density=True, alpha=0.6, label='Histogram')\n\n    # generate the normal PDF\n    x = np.linspace(-5, 5, 1000)\n    pdf = stats.norm.pdf(x, mu, sigma)\n\n    # plot the normal PDF\n    ax.plot(x, pdf, label='Normal PDF')\n\n    # set the title of the plot\n    ax.set_title(f'Normal Distribution with $\\mu = {mu}, \\sigma = {sigma}$')\n\n    # set the x-axis label\n    ax.set_xlabel('Sample value')\n\n    # set the y-axis label\n    ax.set_ylabel('Probability density')\n\n    # display the legend\n    ", "compilation_passed": true, "time": 0.005600929260253906, "tests_passed": false, "error": "TypeError"}
{"code": "np.random.seed(seed)\n    data = np.random.normal(mu, sigma, sample_size)\n\n    # Create a histogram of the sample\n    ax = plt.subplot()\n    ax.hist(data, bins=30, density=True, edgecolor='black', color='red')\n\n    # Add a normal probability density function with the same mean and standard deviation\n    x = np.linspace(data.min(), data.max(), 100)\n    y = stats.norm.pdf(x, mu, sigma)\n    ax.plot(x, y, 'k', linewidth=2)\n    ax.set_title(f'Normal Distribution with $\\mu = {mu}, \\\\sigma = {sigma}$')\n    ax.set_xlabel('x')\n    ax.set_ylabel('PDF')\n\n    # Calculate the empirical mean and standard deviation of the sample\n    empirical_mean = data.mean()\n    empirical_std = data.std()\n\n    return ax, empirical_mean, empirical_std", "compilation_passed": true, "time": 0.0073699951171875, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    sample = np.random.normal(mu, sigma, sample_size)\n    x = np.linspace(min(sample), max(sample), 100)\n    ax = plt.subplot(1, 2, 1)\n    plt.hist(sample, density=True, edgecolor='black', bins=30)\n    plt.plot(x, stats.norm.pdf(x, mu, sigma))\n    ax.set_title(f\"Normal Distribution with $\\\\mu = {mu:.2f}, \\\\sigma = {sigma:.2f}$\")\n    plt.subplot(1, 2, 2)\n    plt.hist(sample, density=True, edgecolor='black', bins=30)\n    plt.plot(x, stats.norm.pdf(x, mu, sigma))\n    plt.title(f\"Normal Distribution with $\\\\mu = {mu:.2f}, \\\\sigma = {sigma:.2f}$\")\n    ax.set_title(f\"Normal Distribution with $\\\\mu = {mu", "compilation_passed": false, "time": 0.0001270771026611328, "tests_passed": false, "error": "SyntaxError"}
