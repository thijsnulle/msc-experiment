{"code": "if length < 0:\n        raise ValueError(\"Length must be non-negative.\")\n    random.seed(seed)\n\n    def has_uppercase(s: str):\n        return any(c.isupper() for c in s)\n\n    def has_lowercase(s: str):\n        return any(c.islower() for c in s)\n\n    def has_numbers(s: str):\n        return any(c.isdigit() for c in s)\n\n    def has_special_chars(s: str):\n        return any(c in string.punctuation for c in s)\n\n    predicates_func = {\n        \"has_uppercase\": has_uppercase,\n        \"has_lowercase\": has_lowercase,\n        \"has_numbers\": has_numbers,\n        \"has_special_chars\": has_special_chars\n    }\n\n    predicates = set(predicates)\n    text = ''.join(random.choice(string.ascii_letters + string.digits + string.punctuation) for _ in range(length))\n", "compilation_passed": true, "time": 0.0011181831359863281, "tests_passed": false, "error": "TypeError"}
{"code": "# Raise ValueError if the length is negative\n    if length < 0:\n        raise ValueError(\"Length must be non-negative.\")\n\n    # Deduplicate predicates\n    unique_predicates = set(predicates)\n\n    # Initialize the result dictionary with all predicates as keys and empty lists as values\n    result = {}\n    for predicate in unique_predicates:\n        result[predicate] = False\n\n    # Set random seed if provided\n    if seed:\n        random.seed(seed)\n\n    # Generate random string\n    chars = string.ascii_letters + string.digits + string.punctuation\n    random_text = \"\".join(random.choice(chars) for _ in range(length))\n\n    # Check for each predicate and set the corresponding value in the result dictionary\n    if 'has_uppercase' in unique_predicates:\n        result['has_uppercase'] = any(c.isupper() for c in random_text)\n    if 'has_lowercase' in unique_predicates:\n        result['has_lowercase'] = any(c.", "compilation_passed": false, "time": 0.0002071857452392578, "tests_passed": false, "error": "SyntaxError"}
{"code": "if length < 0:\n        raise ValueError(\"Length must be non-negative\")\n\n    # Remove duplicates from predicates\n    unique_predicates = set(predicates)\n    valid_predicates = {'has_uppercase', 'has_lowercase', 'has_special_chars', 'has_numbers'}\n    if unique_predicates - valid_predicates:\n        raise KeyError(\"Unrecognized predicates: {}\".format(unique_predicates - valid_predicates))\n\n    # Initialize the random number generator with seed\n    if seed:\n        random.seed(seed)\n\n    # Generate a random string of specified length\n    all_chars = string.ascii_letters + string.digits + string.punctuation\n    random_str = ''.join(random.sample(all_chars, length))\n\n    # Check string properties\n    has_upper = False\n    has_lower = False\n    has_special = False\n    has_digits = False\n    for char in random_str:\n        if char.isupper():\n            has_upper = True\n", "compilation_passed": true, "time": 0.0010361671447753906, "tests_passed": false, "error": "TypeError"}
{"code": "if length < 0:\n        raise ValueError(\"Length cannot be negative\")\n\n    if seed is not None:\n        random.seed(seed)\n\n    # dedupe predicates\n    predicates = list(set(predicates))\n\n    # generate random string\n    characters = string.ascii_letters + string.digits + string.punctuation\n    random_str = ''.join(random.sample(characters, length))\n\n    # define dictionary of characteristic functions\n    char_dict = {\n        'has_uppercase': lambda s: any(c.isupper() for c in s),\n        'has_lowercase': lambda s: any(c.islower() for c in s),\n        'has_special_chars': lambda s: any(c in string.punctuation for c in s),\n        'has_numbers': lambda s: any(c.isdigit() for c in s)\n    }\n\n    # evaluate the random string for all characteristics\n    result = {char_name: char_func(random_str) for char_name, char_func in", "compilation_passed": false, "time": 0.00022411346435546875, "tests_passed": false, "error": "SyntaxError"}
{"code": "if length < 0:\n        raise ValueError(\"Length must be positive.\")\n\n    if seed:\n        random.seed(seed)\n\n    chars = string.ascii_letters + string.digits + string.punctuation\n    text = random.choices(chars, k=length)\n\n    text = ''.join(text)\n\n    result = dict()\n    predicates = set(predicates)  # deduplicate\n    try:\n        result['has_uppercase'] = any(c.isupper() for c in text)\n        result['has_lowercase'] = any(c.islower() for c in text)\n        result['has_special_chars'] = any(c in string.punctuation for c in text)\n        result['has_numbers'] = any(c.isdigit() for c in text)\n        return text, {p: result[p] for p in predicates}\n    except KeyError:\n        raise KeyError(f'Unknown predicate: {predicates}')", "compilation_passed": true, "time": 0.012407064437866211, "tests_passed": true, "error": null}
{"code": "# Validate length\n    if length < 0:\n        raise ValueError(\"Length must be a positive integer\")\n\n    # Validate seed\n    if seed is not None:\n        random.seed(seed)\n\n    # Deduplicate predicates\n    predicates = list(set(predicates))\n\n    # Define the characters that can be used in the string\n    chars = string.ascii_letters + string.digits + string.punctuation\n    # Generate a random string\n    text = ''.join(random.choice(chars) for _ in range(length))\n\n    # Evaluate the string for each predicate\n    result = {}\n    if 'has_uppercase' in predicates:\n        result['has_uppercase'] = any(c.isupper() for c in text)\n    if 'has_lowercase' in predicates:\n        result['has_lowercase'] = any(c.islower() for c in text)\n    if 'has_numbers' in predicates:\n        result['has_numbers'] = any(c.isdigit() for c in text)\n    if '", "compilation_passed": false, "time": 0.00010180473327636719, "tests_passed": false, "error": "SyntaxError"}
{"code": "if length < 0:\n        raise ValueError(\"length cannot be negative.\")\n    # generate the random string\n    if seed is not None:\n        random.seed(seed)\n\n    # deduplicate predicates\n    predicates = list(set(predicates))\n\n    chars = string.ascii_letters + string.digits + string.punctuation\n    s = \"\".join(random.choice(chars) for _ in range(length))\n\n    result = {}\n    for predicate in predicates:\n        if predicate == \"has_uppercase\":\n            result[predicate] = any(c.isupper() for c in s)\n        elif predicate == \"has_lowercase\":\n            result[predicate] = any(c.islower() for c in s)\n        elif predicate == \"has_special_chars\":\n            result[predicate] = any(c in string.punctuation for c in s)\n        elif predicate == \"has_numbers\":\n            result[predicate] = any(c.isdigit() for c in s)\n        else:\n            raise KeyError(f", "compilation_passed": false, "time": 0.00024390220642089844, "tests_passed": false, "error": "SyntaxError"}
{"code": "if length < 0:\n        raise ValueError('Length must be greater than or equal to 0')\n\n    if not isinstance(seed, type(None)):\n        random.seed(seed)\n    letters = string.ascii_letters + string.digits + string.punctuation\n    text = ''.join(random.sample(letters, length))\n\n    predicates = set(predicates)\n    result = {}\n    if 'has_uppercase' in predicates:\n        result['has_uppercase'] = any(char.isupper() for char in text)\n    if 'has_lowercase' in predicates:\n        result['has_lowercase'] = any(char.islower() for char in text)\n    if 'has_special_chars' in predicates:\n        result['has_special_chars'] = any(char in string.punctuation for char in text)\n    if 'has_numbers' in predicates:\n        result['has_numbers'] = any(char.isdigit() for char in text)\n\n    return text, result", "compilation_passed": true, "time": 0.0011639595031738281, "tests_passed": true, "error": null}
{"code": "if seed is not None:\n        random.seed(seed)\n\n    if length < 0:\n        raise ValueError(\"Length cannot be negative\")\n\n    available_predicates = {\"has_uppercase\", \"has_lowercase\", \"has_special_chars\", \"has_numbers\"}\n\n    for predicate in predicates:\n        if predicate not in available_predicates:\n            raise KeyError(f\"Unrecognized predicate: {predicate}\")\n\n    predicates = set(predicates)\n\n    character_set = \"\"\n    if \"has_uppercase\" in predicates:\n        character_set += string.ascii_uppercase\n    if \"has_lowercase\" in predicates:\n        character_set += string.ascii_lowercase\n    if \"has_numbers\" in predicates:\n        character_set += string.digits\n    if \"has_special_chars\" in predicates:\n        character_set += string.punctuation\n\n    result = \"\".join(random.choices(character_set, k=length))\n\n    result", "compilation_passed": true, "time": 0.0010790824890136719, "tests_passed": false, "error": "TypeError"}
{"code": "# Validate the length argument\n    if length < 0:\n        raise ValueError(\"Length must be non-negative\")\n\n    # Seed the random number generator for reproducibility\n    if seed is not None:\n        random.seed(seed)\n\n    # Define the possible characters to sample from\n    chars = string.ascii_letters + string.digits + string.punctuation\n\n    # Sample characters randomly and concatenate them into a string\n    result = \"\".join(random.choice(chars) for _ in range(length))\n\n    # Deduplicate the predicates\n    predicates = list(set(predicates))\n\n    # Define the predicate functions\n    predicates_map = {\n        'has_uppercase': lambda s: any(c.isupper() for c in s),\n        'has_lowercase': lambda s: any(c.islower() for c in s),\n        'has_special_chars': lambda s: any(c in string.punctuation for c in s),\n        'has_numbers': lambda s: any(c.isdigit() for c in", "compilation_passed": false, "time": 0.0002238750457763672, "tests_passed": false, "error": "SyntaxError"}
{"code": "if length < 0:\n        raise ValueError(\"Length must be non-negative\")\n\n    # Deduplicate predicates\n    unique_predicates = set(predicates)\n    # Set random seed for reproducibility\n    random.seed(seed)\n    # Initialize the generated string with empty string\n    text = ''\n    # Generate random characters for each predicate\n    for predicate in unique_predicates:\n        if predicate == 'has_uppercase':\n            text += random.choice(string.ascii_uppercase)\n        elif predicate == 'has_lowercase':\n            text += random.choice(string.ascii_lowercase)\n        elif predicate == 'has_numbers':\n            text += random.choice(string.digits)\n        elif predicate == 'has_special_chars':\n            text += random.choice(string.punctuation)\n        else:\n            raise KeyError(f'Predicate {predicate} is not recognized')\n    # Fill in the rest of the string with random characters\n    for _ in range(length - len(text)):\n        text += random.choice(string.ascii_", "compilation_passed": false, "time": 0.00025391578674316406, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Check if the length is valid\n    if length < 0:\n        raise ValueError('Length must be a positive integer')\n    if seed is not None:\n        random.seed(seed)\n    # Generate the string of desired length\n    chars = string.ascii_letters + string.digits + string.punctuation\n    text = ''.join(random.choices(chars, k=length))\n    # Evaluate the string for each predicate\n    result = {}\n    predicates = list(set(predicates))\n    for predicate in predicates:\n        if predicate == 'has_uppercase':\n            result[predicate] = any(char.isupper() for char in text)\n        elif predicate == 'has_lowercase':\n            result[predicate] = any(char.islower() for char in text)\n        elif predicate == 'has_special_chars':\n            result[predicate] = any(char in string.punctuation for char in text)\n        elif predicate == 'has_numbers':\n            result[predicate] = any(char.isdigit() for char in text)\n        else:", "compilation_passed": false, "time": 0.00024199485778808594, "tests_passed": false, "error": "IndentationError"}
{"code": "if seed is not None:\n        random.seed(seed)\n\n    if length < 0:\n        raise ValueError(\"Length should not be negative.\")\n\n    predicates = set(predicates)\n    result = {k: False for k in predicates}\n\n    chars_pool = string.ascii_letters + string.digits + string.punctuation\n    result_string = \"\"\n\n    for i in range(length):\n        char = random.choice(chars_pool)\n        result_string += char\n\n    for predicate in predicates:\n        if predicate == \"has_uppercase\":\n            result[predicate] = any(char.isupper() for char in result_string)\n        elif predicate == \"has_lowercase\":\n            result[predicate] = any(char.islower() for char in result_string)\n        elif predicate == \"has_special_chars\":\n            result[predicate] = any(\n                char in string.punctuation for char in result_string\n            )\n        elif predicate == \"has_numbers\":\n            result[predicate] = any", "compilation_passed": true, "time": 0.0011792182922363281, "tests_passed": false, "error": "TypeError"}
{"code": "if length < 0:\n        raise ValueError(\"Length must be non-negative.\")\n    if seed is not None:\n        random.seed(seed)\n    chars_pool = ''\n    predicates = set(predicates)\n    chars = [string.ascii_letters, string.digits, string.punctuation]\n    for pred in predicates:\n        if pred not in [\"has_uppercase\", \"has_lowercase\", \"has_special_chars\", \"has_numbers\"]:\n            raise KeyError(f\"Predicate {pred} not recognized.\")\n        else:\n            if \"has_uppercase\" in pred:\n                chars_pool += string.ascii_uppercase\n            elif \"has_lowercase\" in pred:\n                chars_pool += string.ascii_lowercase\n            elif \"has_special_chars\" in pred:\n                chars_pool += string.punctuation\n            elif \"has_numbers\" in pred:\n                chars_pool += string.digits\n    text = \"\".join(random.choices(chars_pool, k=", "compilation_passed": false, "time": 0.00024390220642089844, "tests_passed": false, "error": "SyntaxError"}
{"code": "if length < 0:\n        raise ValueError(\"Length must be a positive integer\")\n\n    # Generate a random text\n    if seed is not None:\n        random.seed(seed)\n\n    chars_set = set()\n    if 'has_uppercase' in predicates:\n        chars_set.add(string.ascii_uppercase)\n\n    if 'has_lowercase' in predicates:\n        chars_set.add(string.ascii_lowercase)\n\n    if 'has_special_chars' in predicates:\n        chars_set.add(string.punctuation)\n\n    if 'has_numbers' in predicates:\n        chars_set.add(string.digits)\n\n    # Remove duplicates and combine character sets\n    chars = ''.join(set(''.join(chars_set)))\n\n    rand_text = \"\".join(random.choices(chars, k=length))\n\n    result = {}\n\n    if \"has_uppercase\" in predicates:\n        result[\"has_uppercase\"] = any(c.is", "compilation_passed": false, "time": 0.00022125244140625, "tests_passed": false, "error": "SyntaxError"}
{"code": "if length < 0:\n        raise ValueError(\"length must be non-negative.\")\n\n    if seed is not None:\n        random.seed(seed)\n\n    # Generate the random text\n    characters = string.ascii_letters + string.digits + string.punctuation\n    random_text = ''.join(random.choice(characters) for _ in range(length))\n\n    # Evaluate the string based on the predicates\n    result = {}\n    for predicate in set(predicates):\n        if predicate == 'has_uppercase':\n            result[predicate] = any(char.isupper() for char in random_text)\n        elif predicate == 'has_lowercase':\n            result[predicate] = any(char.islower() for char in random_text)\n        elif predicate == 'has_special_chars':\n            result[predicate] = any(char in string.punctuation for char in random_text)\n        elif predicate == 'has_numbers':\n            result[predicate] = any(char.isdigit() for char in random_text)\n        else", "compilation_passed": false, "time": 0.00012111663818359375, "tests_passed": false, "error": "SyntaxError"}
{"code": "if length < 0:\n        raise ValueError(\"The length of the text cannot be negative\")\n    # if len(predicates) > len(set(predicates)):\n    #     raise ValueError(\"The predicates list contains duplicate values\")\n\n    if seed is not None:\n        random.seed(seed)\n\n    chars_set = set(string.ascii_letters)\n    characters_map = {\n        'has_uppercase': lambda: random.sample(string.ascii_uppercase, length),\n        'has_lowercase': lambda: random.sample(string.ascii_lowercase, length),\n        'has_numbers': lambda: random.sample(string.digits, length),\n        'has_special_chars': lambda: random.sample(string.punctuation, length)\n    }\n\n    for predicate in predicates:\n        if predicate in characters_map:\n            chars_set.update(characters_map[predicate]())\n        else:\n            raise KeyError(f\"Predicate '{predicate}' is not recognized\")\n\n", "compilation_passed": true, "time": 0.0011870861053466797, "tests_passed": false, "error": "TypeError"}
{"code": "if length < 0:\n        raise ValueError(\"Length must be a non-negative integer\")\n\n    predicates = set(predicates)\n\n    random.seed(seed)\n\n    result_text = ''.join(\n        random.choice(string.ascii_letters + string.digits + string.punctuation)\n        for _ in range(length)\n    )\n\n    result_dict = {}\n    if 'has_uppercase' in predicates:\n        result_dict['has_uppercase'] = any(char.isupper() for char in result_text)\n    if 'has_lowercase' in predicates:\n        result_dict['has_lowercase'] = any(char.islower() for char in result_text)\n    if 'has_numbers' in predicates:\n        result_dict['has_numbers'] = any(char.isdigit() for char in result_text)\n    if 'has_special_chars' in predicates:\n        result_dict['has_special_chars'] = any(\n            char in string.punctuation for char in result_text", "compilation_passed": false, "time": 0.00022292137145996094, "tests_passed": false, "error": "SyntaxError"}
{"code": "if length < 0:\n        raise ValueError(\"length cannot be negative\")\n\n    if seed is not None:\n        random.seed(seed)\n    if not isinstance(predicates, list):\n        predicates = list(predicates)\n    characters = string.ascii_letters + string.digits + string.punctuation\n\n    result = ''.join(random.sample(characters, length))\n\n    unique_predicates = set(predicates)\n    characteristics = {}\n    for predicate in unique_predicates:\n        if predicate == \"has_uppercase\":\n            characteristics[predicate] = any(c.isupper() for c in result)\n        elif predicate == \"has_lowercase\":\n            characteristics[predicate] = any(c.islower() for c in result)\n        elif predicate == \"has_special_chars\":\n            characteristics[predicate] = any(c in string.punctuation for c in result)\n        elif predicate == \"has_numbers\":\n            characteristics[predicate] = any(c.isdigit() for c in result)\n        ", "compilation_passed": true, "time": 0.0011491775512695312, "tests_passed": false, "error": "TypeError"}
{"code": "if length < 0:\n        raise ValueError(\"The length must be positive!\")\n    if seed is not None:\n        random.seed(seed)\n\n    chars = ''.join([string.ascii_letters, string.digits, string.punctuation])\n    result_string = ''.join(random.sample(chars, length))\n    predicates = set(predicates)\n\n    result_dict = {}\n    if \"has_uppercase\" in predicates:\n        result_dict[\"has_uppercase\"] = any(c.isupper() for c in result_string)\n    if \"has_lowercase\" in predicates:\n        result_dict[\"has_lowercase\"] = any(c.islower() for c in result_string)\n    if \"has_special_chars\" in predicates:\n        result_dict[\"has_special_chars\"] = any(c in string.punctuation for c in result_string)\n    if \"has_numbers\" in predicates:\n        result_dict[\"has_numbers\"] = any(c.is", "compilation_passed": false, "time": 0.00022602081298828125, "tests_passed": false, "error": "SyntaxError"}
{"code": "if length < 0:\n        raise ValueError('Length cannot be negative.')\n\n    # Deduplicate the predicates\n    predicates = list(set(predicates))\n\n    # Initialize the result dictionary\n    result = {}\n\n    # Define a function to evaluate each predicate\n    def evaluate(predicate: str):\n        if predicate == 'has_uppercase':\n            return any(c.isupper() for c in text)\n        elif predicate == 'has_lowercase':\n            return any(c.islower() for c in text)\n        elif predicate == 'has_special_chars':\n            return any(c in string.punctuation for c in text)\n        elif predicate == 'has_numbers':\n            return any(c.isdigit() for c in text)\n        else:\n            raise KeyError(f'Unknown predicate: {predicate}')\n\n    # Initialize the random number generator with the seed, if provided\n    if seed is not None:\n        random.seed(seed)\n\n    # Define the characters to sample from\n    characters = string.ascii_letters + string.digits +", "compilation_passed": false, "time": 0.0002219676971435547, "tests_passed": false, "error": "SyntaxError"}
{"code": "if length < 0:\n        raise ValueError(\"Length must be positive\")\n    if not isinstance(predicates, list):\n        raise ValueError(\"Predicates must be a list of strings\")\n\n    random.seed(seed)\n    chars = ''.join(\n        [string.ascii_letters, string.digits, string.punctuation])\n    text = ''.join(random.choice(chars) for _ in range(length))\n\n    result = {}\n    for predicate in set(predicates):\n        if predicate == 'has_uppercase':\n            result['has_uppercase'] = any(char.isupper() for char in text)\n        elif predicate == 'has_lowercase':\n            result['has_lowercase'] = any(char.islower() for char in text)\n        elif predicate == 'has_special_chars':\n            result['has_special_chars'] = any(\n                char in string.punctuation for char in text)\n        elif predicate == 'has_numbers':\n            result['has_numbers'] = any(char.isdigit() for char in text", "compilation_passed": false, "time": 0.0002532005310058594, "tests_passed": false, "error": "SyntaxError"}
{"code": "if length < 0:\n        raise ValueError('Length must be a positive integer')\n    random.seed(seed)\n    chars = []\n    for predicate in set(predicates):\n        if predicate == 'has_uppercase':\n            chars.extend(string.ascii_uppercase)\n        elif predicate == 'has_lowercase':\n            chars.extend(string.ascii_lowercase)\n        elif predicate == 'has_numbers':\n            chars.extend(string.digits)\n        elif predicate == 'has_special_chars':\n            chars.extend(string.punctuation)\n        else:\n            raise KeyError(f'Unrecognized predicate {predicate}')\n    text = ''.join(random.choice(chars) for _ in range(length))\n    result = {}\n    for predicate in set(predicates):\n        if predicate == 'has_uppercase':\n            result['has_uppercase'] = any(char.isupper() for char in text)\n        elif predicate == 'has_lowercase':\n            result['has_lowercase'] = any(char.islower()", "compilation_passed": false, "time": 0.0002529621124267578, "tests_passed": false, "error": "SyntaxError"}
{"code": "if length < 0:\n        raise ValueError(\"Length cannot be negative.\")\n\n    # Deduplicate predicates\n    unique_predicates = list(set(predicates))\n\n    random.seed(seed)\n    characters = list(string.ascii_letters + string.digits + string.punctuation)\n\n    generated_text = ''.join(random.sample(characters, length))\n\n    result = {}\n    for predicate in unique_predicates:\n        if predicate == 'has_uppercase':\n            result[predicate] = any(c.isupper() for c in generated_text)\n        elif predicate == 'has_lowercase':\n            result[predicate] = any(c.islower() for c in generated_text)\n        elif predicate == 'has_special_chars':\n            result[predicate] = any(not c.isalnum() for c in generated_text)\n        elif predicate == 'has_numbers':\n            result[predicate] = any(c.isnumeric() for c in generated_text)\n        else:\n            raise KeyError(\"Un", "compilation_passed": false, "time": 9.703636169433594e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "if length < 0:\n        raise ValueError(\"Length cannot be negative.\")\n    if seed is not None:\n        random.seed(seed)\n\n    random_text = \"\".join(random.choices(\n        string.ascii_letters + string.digits + string.punctuation, k=length))\n\n    result = {}\n    for predicate in set(predicates):\n        if predicate == \"has_uppercase\":\n            result[predicate] = any(char.isupper() for char in random_text)\n        elif predicate == \"has_lowercase\":\n            result[predicate] = any(char.islower() for char in random_text)\n        elif predicate == \"has_special_chars\":\n            result[predicate] = any(\n                char in string.punctuation for char in random_text)\n        elif predicate == \"has_numbers\":\n            result[predicate] = any(char.isdigit() for char in random_text)\n        else:\n            raise KeyError(f\"Unknown predicate: {predicate}\")\n\n    return (random_text,", "compilation_passed": false, "time": 0.0002307891845703125, "tests_passed": false, "error": "SyntaxError"}
{"code": "if length < 0:\n        raise ValueError(\"Length of string should be >= 0.\")\n\n    if not predicates:\n        predicates = []\n\n    # Deduplicate predicates to avoid excessive work\n    predicates = set(predicates)\n\n    # Check if the predicates are valid\n    for predicate in predicates:\n        if not hasattr(task_func, f\"_{predicate}\"):\n            raise KeyError(f\"Invalid predicate: {predicate}. Predicate not found in task_func.\")\n\n    # Set the seed for reproducibility if provided\n    if seed is not None:\n        random.seed(seed)\n\n    # Create a pool of characters for sampling\n    characters = string.ascii_letters + string.digits + string.punctuation\n\n    # Sample characters randomly with replacement to create the string\n    text = ''.join(random.choice(characters) for _ in range(length))\n\n    # Evaluate the string for each predicate\n    result = {predicate: getattr(task_func, f\"_{predicate}\")(text) for predicate", "compilation_passed": false, "time": 0.0002028942108154297, "tests_passed": false, "error": "SyntaxError"}
{"code": "if seed is not None:\n        random.seed(seed)\n    if length < 0:\n        raise ValueError(f\"Length must be a positive integer, not {length}\")\n    all_options = {\n        'has_uppercase': string.ascii_uppercase,\n        'has_lowercase': string.ascii_lowercase,\n        'has_numbers': string.digits,\n        'has_special_chars': string.punctuation,\n    }\n    predicates = set(predicates)\n    selected_options = []\n    for predicate in predicates:\n        try:\n            selected_options.append(all_options[predicate])\n        except KeyError:\n            raise KeyError(f\"Invalid predicate: {predicate}\")\n    # Join the selected character options and sample the string\n    chars = ''.join(selected_options)\n    result = ''.join(random.choices(chars, k=length))\n    # Evaluate the characteristics of the generated string\n    characteristics = {}\n    for predicate in predicates:\n        try:\n            characteristics[predicate]", "compilation_passed": false, "time": 0.00022220611572265625, "tests_passed": false, "error": "SyntaxError"}
{"code": "if length < 0:\n        raise ValueError(\"Length must be non-negative.\")\n\n    random.seed(seed)\n    predicates = list(set(predicates))  # Deduplicate\n\n    chars = set(string.ascii_letters + string.digits + string.punctuation)\n\n    text = \"\".join(random.sample(list(chars), k=length))\n\n    result = {\n        \"has_uppercase\": any(map(str.isupper, text)),\n        \"has_lowercase\": any(map(str.islower, text)),\n        \"has_special_chars\": any(not c.isalnum() for c in text),\n        \"has_numbers\": any(map(str.isdigit, text)),\n    }\n\n    return text, {predicate: result[predicate] for predicate in predicates}", "compilation_passed": true, "time": 0.015440940856933594, "tests_passed": true, "error": null}
{"code": "if length < 0:\n        raise ValueError(\"Length must be positive\")\n    random.seed(seed)\n    text = ''.join(random.choices(string.ascii_letters + string.digits + string.punctuation, k=length))\n\n    res = {}\n    for predicate in set(predicates):\n        if predicate == 'has_uppercase':\n            res['has_uppercase'] = any(char.isupper() for char in text)\n        elif predicate == 'has_lowercase':\n            res['has_lowercase'] = any(char.islower() for char in text)\n        elif predicate == 'has_special_chars':\n            res['has_special_chars'] = any(char in string.punctuation for char in text)\n        elif predicate == 'has_numbers':\n            res['has_numbers'] = any(char.isdigit() for char in text)\n        else:\n            raise KeyError(\"Predicate not recognized\")\n\n    return text, res", "compilation_passed": true, "time": 0.012197017669677734, "tests_passed": true, "error": null}
{"code": "if length < 0:\n        raise ValueError(\"The length of the string cannot be negative.\")\n\n    predicates = set(predicates)\n\n    chars = set(string.ascii_letters)\n    if \"has_special_chars\" in predicates:\n        chars.update(string.punctuation)\n    if \"has_numbers\" in predicates:\n        chars.update(string.digits)\n\n    random.seed(seed)\n    s = \"\".join(random.choices(\"\".join(chars), k=length))\n\n    res = {}\n\n    if \"has_uppercase\" in predicates:\n        res[\"has_uppercase\"] = any(x.isupper() for x in s)\n\n    if \"has_lowercase\" in predicates:\n        res[\"has_lowercase\"] = any(x.islower() for x in s)\n\n    if \"has_special_chars\" in predicates:\n        res[\"has_special_chars\"] = any(x in string.punctuation for x in s)", "compilation_passed": true, "time": 0.0010879039764404297, "tests_passed": false, "error": "TypeError"}
