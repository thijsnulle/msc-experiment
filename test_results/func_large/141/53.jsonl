{"code": "if not isinstance(rows, int) or rows <= 0:\n        raise ValueError(\"'rows' must be a positive integer greater than 0\")\n\n    df = pd.DataFrame(np.random.randint(1, 101, size=(rows, len(columns))), columns=columns)\n\n    results = {col: {'mean': round(df[col].mean()), 'median': statistics.median(df[col])} for col in columns}\n\n    return df, results", "compilation_passed": true, "time": 0.002354860305786133, "tests_passed": true, "error": null}
{"code": "# Input validation for rows\n    if not isinstance(rows, int) or rows < 1:\n        raise ValueError(\"'rows' must be a positive integer greater than 0.\")\n\n    np.random.seed(seed)\n\n    # Create random values between 1 and 100 for each column\n    data = {col: np.random.randint(1, 101, rows) for col in columns}\n\n    # Create DataFrame from dictionary\n    df = pd.DataFrame(data)\n\n    # Calculate mean and median for each column\n    stats = {col: {'mean': df[col].mean(), 'median': statistics.median(df[col])} for col in columns}\n\n    return df, stats", "compilation_passed": true, "time": 0.002975940704345703, "tests_passed": true, "error": null}
{"code": "if not isinstance(rows, int) or rows <= 0:\n        raise ValueError(\"'rows' must be a positive integer greater than 0\")\n\n    np.random.seed(seed)\n    df = pd.DataFrame(np.random.randint(low=1, high=101, size=(rows, len(columns))), columns=columns)\n    stats = {}\n    for col in columns:\n        col_values = df[col]\n        mean = col_values.mean()\n        median = statistics.median(col_values)\n        stats[col] = {'mean': int(mean), 'median': int(median)}\n\n    return df, stats", "compilation_passed": true, "time": 0.002206087112426758, "tests_passed": true, "error": null}
{"code": "if rows <= 0:\n        raise ValueError(\"'rows' must be a positive integer greater than 0\")\n\n    # Convert the column names to a NumPy array\n    columns = np.array(columns)\n\n    # Generate random data using NumPy\n    data = np.random.randint(1, 101, size=(rows, len(columns)))\n\n    # Create a Pandas DataFrame from the generated data\n    df = pd.DataFrame(data, columns=columns)\n\n    # Calculate the mean and median for each column\n    mean_col = df.mean(axis=0)\n    median_col = df.median(axis=0)\n\n    # Create a dictionary to store the calculated statistics\n    stats = {}\n    for col in columns:\n        stats[col] = {'mean': mean_col[col], 'median': median_col[col]}\n\n    return df, stats", "compilation_passed": true, "time": 0.0013780593872070312, "tests_passed": false, "error": "TypeError"}
{"code": "# Validate input\n    if not isinstance(rows, int) or rows <= 0:\n        raise ValueError(\"'rows' must be a positive integer greater than 0\")\n\n    # Seed the random number generator for reproducibility\n    np.random.seed(seed)\n\n    # Generate random data using numpy\n    data = np.random.randint(1, 101, size=(rows, len(columns)))\n\n    # Create a Pandas DataFrame with the specified column names and data\n    df = pd.DataFrame(data, columns=columns)\n\n    # Initialize an empty dictionary for storing column statistics\n    stats = {}\n\n    # Iterate through each column in the DataFrame\n    for col in df.columns:\n        col_name = col  # Get the column name\n        col_data = df[col_name]  # Get the column data\n        col_mean = col_data.mean()  # Calculate the mean for the column\n        col_median = statistics.median(col_data)  # Calculate the median for the column\n        # Store the statistics in the dictionary using the column", "compilation_passed": true, "time": 0.0011057853698730469, "tests_passed": false, "error": "TypeError"}
{"code": "if not isinstance(rows, int) or rows < 1:\n        raise ValueError(\"'rows' must be a positive integer greater than 0\")\n    np.random.seed(seed)\n    data = {column: np.random.randint(1, 101, size=rows) for column in columns}\n    df = pd.DataFrame(data)\n    col_stats = {column: {'mean': df[column].mean(), 'median': statistics.median(df[column])} for column in columns}\n    return df, col_stats", "compilation_passed": true, "time": 0.002820730209350586, "tests_passed": true, "error": null}
{"code": "# Validate the rows parameter\n    if not isinstance(rows, int) or rows <= 0:\n        raise ValueError(\"'rows' must be a positive integer greater than 0\")\n\n    # Generate the DataFrame with specified columns and random numbers\n    df = pd.DataFrame({\n        column: np.random.randint(1, 101, rows)\n        for column in columns\n    })\n\n    # Calculate the mean and median for each column\n    stats = {}\n    for column in columns:\n        mean = np.mean(df[column])\n        median = statistics.median(df[column])\n        stats[column] = {\n            'mean': mean,\n            'median': median\n        }\n\n    # Return the DataFrame and the statistics dictionary\n    return df, stats", "compilation_passed": true, "time": 0.0023779869079589844, "tests_passed": true, "error": null}
{"code": "if not isinstance(rows, int) or rows <= 0:\n        raise ValueError(\"'rows' must be a positive integer greater than 0.\")\n\n    rng = np.random.default_rng(seed)\n    data = {}\n\n    for col in columns:\n        data[col] = rng.integers(1, 101, size=rows)\n\n    df = pd.DataFrame(data)\n\n    column_stats = {}\n    for col in columns:\n        mean = df[col].mean()\n        median = statistics.median(df[col])\n        column_stats[col] = {'mean': mean, 'median': median}\n\n    return df, column_stats", "compilation_passed": true, "time": 0.0029180049896240234, "tests_passed": true, "error": null}
{"code": "if not isinstance(rows, int) or rows <= 0:\n        raise ValueError(\"'rows' must be a positive integer greater than 0\")\n\n    data = np.random.randint(1, 101, size=(rows, len(columns)))\n    df = pd.DataFrame(data, columns=columns)\n\n    stats = {}\n    for col in columns:\n        mean = df[col].mean()\n        median = df[col].median()\n        stats[col] = {'mean': mean, 'median': median}\n\n    return df, stats", "compilation_passed": true, "time": 0.0027141571044921875, "tests_passed": true, "error": null}
{"code": "if not isinstance(rows, int) or rows <= 0:\n        raise ValueError(\"'rows' must be a positive integer greater than 0\")\n\n    np.random.seed(seed)\n    data = np.random.randint(1, 101, size=(rows, len(columns)))\n    df = pd.DataFrame(data, columns=columns)\n\n    stats = {col: {\n        'mean': statistics.mean(df[col]),\n        'median': statistics.median(df[col])} for col in columns}\n\n    return df, stats", "compilation_passed": true, "time": 0.0025358200073242188, "tests_passed": true, "error": null}
{"code": "# Check if 'rows' is a positive integer greater than 0\n    if not isinstance(rows, int) or rows <= 0:\n        raise ValueError(\"'rows' must be a positive integer greater than 0\")\n\n    # Create a DataFrame with specified number of rows and columns, filled with random numbers between 1 and 100\n    np.random.seed(seed)\n    data = np.random.randint(low=1, high=101, size=(rows, len(columns)))\n    df = pd.DataFrame(data, columns=columns)\n\n    # Calculate mean and median for each column and store them in a dictionary\n    stats_dict = {}\n    for col in df.columns:\n        mean_value = df[col].mean()\n        median_value = statistics.median(df[col])\n        stats_dict[col] = {'mean': mean_value, 'median': median_value}\n\n    return df, stats_dict", "compilation_passed": true, "time": 0.0025589466094970703, "tests_passed": true, "error": null}
{"code": "if not isinstance(rows, int) or rows <= 0:\n        raise ValueError(\"'rows' must be a positive integer greater than 0.\")\n\n    np.random.seed(seed)\n    data = np.random.randint(1, 101, size=(rows, len(columns)))\n    df = pd.DataFrame(data=data, columns=columns)\n\n    stat_dict = {}\n    for col in columns:\n        mean_val = round(statistics.mean(df[col]))\n        median_val = round(statistics.median(df[col]))\n        stat_dict[col] = {'mean': mean_val, 'median': median_val}\n\n    return df, stat_dict", "compilation_passed": true, "time": 0.0019190311431884766, "tests_passed": true, "error": null}
{"code": "# Perform data validation for the 'rows' argument\n    if not isinstance(rows, int) or rows <= 0:\n        raise ValueError(\n            \"'rows' must be a positive integer greater than 0.\")\n\n    # Generate random numbers using numpy's random number generator (numpy.random)\n    data = np.random.randint(1, 101, size=(rows, len(columns)))\n    df = pd.DataFrame(data, columns=columns)\n\n    # Calculate the mean and median for each column\n    stats = {}\n    for col in columns:\n        col_values = df[col]\n        mean = np.mean(col_values)\n        median = statistics.median(col_values)\n        stats[col] = {'mean': mean, 'median': median}\n\n    return df, stats", "compilation_passed": true, "time": 0.0021800994873046875, "tests_passed": true, "error": null}
{"code": "if not isinstance(rows, int) or rows <= 0:\n        raise ValueError(\"rows must be a positive integer greater than 0\")\n\n    np.random.seed(seed)\n\n    df = pd.DataFrame({c: np.random.randint(1, 101, rows) for c in columns})\n\n    stats = {}\n    for c in columns:\n        stats[c] = {}\n        stats[c]['mean'] = df[c].mean()\n        stats[c]['median'] = statistics.median(df[c])\n\n    return df, stats", "compilation_passed": true, "time": 0.0028409957885742188, "tests_passed": true, "error": null}
{"code": "# Validate the input parameters\n    if not isinstance(rows, int) or rows <= 0:\n        raise ValueError(\"'rows' must be a positive integer greater than 0.\")\n\n    # Set the random seed\n    np.random.seed(seed)\n\n    # Generate the data with random numbers between 1 and 100\n    data = np.random.randint(1, 101, size=(rows, len(columns)))\n\n    # Create a DataFrame from the data\n    df = pd.DataFrame(data, columns=columns)\n\n    # Calculate the mean and median for each column\n    stats = {}\n    for col in columns:\n        mean = df[col].mean()\n        median = statistics.median(df[col])\n        stats[col] = {'mean': mean, 'median': median}\n\n    return df, stats", "compilation_passed": true, "time": 0.0025930404663085938, "tests_passed": true, "error": null}
{"code": "# Check if the input is valid\n    if not isinstance(rows, int) or rows <= 0:\n        raise ValueError(\"'rows' must be a positive integer greater than 0.\")\n\n    # Create a random seed with the provided seed for reproducibility\n    np.random.seed(seed)\n\n    # Create the data with specified rows and columns\n    data = {column: np.random.randint(low=1, high=101, size=rows) for column in columns}\n\n    # Create a DataFrame from the generated data\n    df = pd.DataFrame(data)\n\n    # Calculate the mean and median for each column in the DataFrame\n    stats = {}\n    for column in columns:\n        mean_value = df[column].mean()\n        median_value = statistics.median(df[column])\n        stats[column] = {'mean': mean_value, 'median': median_value}\n\n    return df, stats", "compilation_passed": true, "time": 0.0028228759765625, "tests_passed": true, "error": null}
{"code": "# Validate the input\n    if not isinstance(rows, int) or rows < 1:\n        raise ValueError(\"'rows' must be a positive integer greater than 0.\")\n\n    # Set the seed\n    np.random.seed(seed)\n\n    # Create a DataFrame\n    df = pd.DataFrame(np.random.randint(1, 101, size=(rows, len(columns))), columns=columns)\n\n    # Create a dictionary to store the mean and median for each column\n    stats = {}\n\n    # Calculate the mean and median for each column\n    for col in columns:\n        col_stats = {\n            'mean': df[col].mean(),\n            'median': statistics.median(df[col])\n        }\n        stats[col] = col_stats\n\n    return df, stats", "compilation_passed": true, "time": 0.002588033676147461, "tests_passed": true, "error": null}
{"code": "# Validate input: 'rows' must be a positive integer greater than 0\n    if not isinstance(rows, int) or rows < 1:\n        raise ValueError(\"'rows' must be a positive integer greater than 0\")\n\n    # Create a NumPy array of random integers between 1 and 100 with the specified dimensions and seed\n    arr = np.random.RandomState(seed).randint(1, 101, size=(rows, len(columns)))\n\n    # Create a DataFrame from the array using the specified column names\n    df = pd.DataFrame(arr, columns=columns)\n\n    # Calculate the mean and median for each column in the DataFrame\n    stats = {col: {'mean': df[col].mean(), 'median': statistics.median(df[col])} for col in columns}\n\n    return df, stats", "compilation_passed": true, "time": 0.003094196319580078, "tests_passed": true, "error": null}
{"code": "if not isinstance(rows, int) or rows <= 0:\n        raise ValueError(\"'rows' must be a positive integer greater than 0.\")\n\n    if not isinstance(columns, list):\n        columns = [columns]\n    # Initialize the DataFrame with specified number of rows and columns filled with NaN\n    df = pd.DataFrame(np.nan, index=range(rows), columns=columns)\n    # Set a seed for the random number generator\n    np.random.seed(seed)\n\n    for column in df:\n        # Fill the column with random integers between 1 and 100\n        df[column] = np.random.randint(low=1, high=101, size=rows)\n\n    # Dictionary to store the calculated mean and median for each column\n    stats = {}\n    for column in df:\n        # Calculate mean and median for each column\n        mean = np.mean(df[column])\n        median = statistics.median(df[column])\n        # Add the calculated values to the stats dictionary\n        stats[column] = {'mean': int(mean", "compilation_passed": false, "time": 0.00026416778564453125, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not isinstance(rows, int) or rows <= 0:\n        raise ValueError(\"'rows' must be a positive integer greater than 0.\")\n\n    data = {col: np.random.randint(1, 101, size=rows) for col in columns}\n    df = pd.DataFrame(data)\n\n    # Calculate mean and median for each column\n    column_stats = {col: {'mean': df[col].mean(), 'median': statistics.median(df[col])} for col in columns}\n\n    return df, column_stats", "compilation_passed": true, "time": 0.0023059844970703125, "tests_passed": true, "error": null}
{"code": "# Validate input\n    if not isinstance(rows, int) or rows <= 0:\n        raise ValueError(\"'rows' must be a positive integer greater than 0.\")\n\n    # Initialize random number generator with the specified seed\n    np.random.seed(seed)\n\n    # Generate random numbers between 1 and 100 for each column\n    data = {col: np.random.randint(1, 101, rows) for col in columns}\n\n    # Create DataFrame\n    df = pd.DataFrame(data)\n\n    # Calculate mean and median for each column\n    stats = {}\n    for col in columns:\n        stats[col] = {\n            'mean': df[col].mean(),\n            'median': df[col].median()\n        }\n\n    # Print DataFrame and stats\n    print(df)\n    print(stats)\n\n    return df, stats", "compilation_passed": true, "time": 0.0037031173706054688, "tests_passed": true, "error": null}
{"code": "if not isinstance(rows, int) or rows <= 0:\n        raise ValueError(\"'rows' must be a positive integer greater than 0\")\n\n    np.random.seed(seed)\n    data = {col: np.random.randint(1, 101, size=rows) for col in columns}\n    df = pd.DataFrame(data)\n    mean = {col: np.mean(df[col]) for col in columns}\n    median = {col: statistics.median(df[col]) for col in columns}\n\n    return df, {col: {'mean': mean[col], 'median': median[col]} for col in columns}", "compilation_passed": true, "time": 0.002933979034423828, "tests_passed": true, "error": null}
{"code": "# Check if rows is a positive integer greater than 0\n    if not isinstance(rows, int) or rows <= 0:\n        raise ValueError(\"Number of rows must be a positive integer greater than 0.\")\n\n    # Use the provided seed for reproducibility\n    np.random.seed(seed)\n\n    # Generate random numbers between 1 and 100 for each column in the DataFrame\n    df = pd.DataFrame({col: np.random.randint(1, 101, rows) for col in columns})\n\n    # Calculate mean and median for each column\n    stats = {}\n    for col in columns:\n        mean = df[col].mean()\n        median = df[col].median()\n        stats[col] = {'mean': mean, 'median': median}\n\n    return df, stats", "compilation_passed": true, "time": 0.003771066665649414, "tests_passed": true, "error": null}
{"code": "# Check that rows is a positive integer greater than 0\n    if not isinstance(rows, int) or rows < 1:\n        raise ValueError(\"'rows' must be a positive integer greater than 0\")\n\n    # Create a random seed for reproducibility\n    np.random.seed(seed)\n\n    # Generate random integers between 1 and 100 for each row and column\n    data = {\n        column: np.random.randint(1, 101, size=rows) for column in columns\n    }\n\n    # Create a pandas DataFrame from the data dictionary\n    df = pd.DataFrame(data)\n\n    # Create a dictionary to store the calculated mean and median for each column\n    stats = {}\n    for column in columns:\n        column_values = df[column].to_list()\n        stats[column] = {\n            'mean': statistics.mean(column_values),\n            'median': statistics.median(column_values)\n        }\n\n    return df, stats", "compilation_passed": true, "time": 0.002377033233642578, "tests_passed": true, "error": null}
{"code": "if not isinstance(rows, int) or rows <= 0:\n        raise ValueError(\"'rows' must be a positive integer greater than 0\")\n    # Set the seed for reproducibility\n    np.random.seed(seed)\n    # Create an empty DataFrame with specified columns\n    df = pd.DataFrame(columns=columns)\n    # Fill each column with random numbers between 1 and 100\n    for column in columns:\n        df[column] = np.random.randint(1, 101, size=rows)\n    # Calculate mean and median for each column\n    stats = {}\n    for column in columns:\n        stats[column] = {\n            'mean': np.mean(df[column]),\n            'median': statistics.median(df[column])\n        }\n    return df, stats", "compilation_passed": true, "time": 0.004979133605957031, "tests_passed": true, "error": null}
{"code": "# Validate that 'rows' is a positive integer\n    if not isinstance(rows, int) or rows <= 0:\n        raise ValueError(\"'rows' must be a positive integer.\")\n\n    # Generate a DataFrame with the specified number of rows and columns filled with random numbers\n    df = pd.DataFrame(np.random.randint(1, 101, size=(rows, len(columns))), columns=columns)\n\n    # Calculate the mean and median for each column\n    stats = {}\n    for col in columns:\n        mean = np.mean(df[col])\n        median = statistics.median(df[col])\n        stats[col] = {'mean': int(mean) if mean.is_integer() else mean, 'median': int(median) if median.is_integer() else median}\n\n    return df, stats", "compilation_passed": true, "time": 0.002274036407470703, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    data = {c: np.random.randint(1, 101, size=rows) for c in columns}\n    df = pd.DataFrame(data)\n    stats = {c: {'mean': np.mean(df[c]), 'median': statistics.median(df[c])} for c in columns}\n    return df, stats", "compilation_passed": true, "time": 0.0013918876647949219, "tests_passed": false, "error": "numpy.core._exceptions._UFuncNoLoopError"}
{"code": "# Check if 'rows' is a positive integer greater than 0\n    if not isinstance(rows, int) or rows <= 0:\n        raise ValueError(\"'rows' must be a positive integer greater than 0.\")\n\n    # Set the random seed for reproducibility\n    np.random.seed(seed)\n\n    # Initialize an empty DataFrame with the specified columns\n    df = pd.DataFrame(columns=columns)\n\n    # Generate random values for each column and store in the DataFrame\n    for column in columns:\n        df[column] = np.random.randint(1, 101, size=rows)\n\n    # Initialize an empty dictionary to store the calculated statistics\n    stats = {}\n\n    # Iterate over each column and calculate the mean and median\n    for column in columns:\n        stats[column] = {\n            'mean': df[column].mean(),\n            'median': statistics.median(df[column])\n        }\n\n    # Return the DataFrame and the dictionary of statistics\n    return df, stats", "compilation_passed": true, "time": 0.004785060882568359, "tests_passed": true, "error": null}
{"code": "# Input validation\n    if not isinstance(rows, int) or rows <= 0:\n        raise ValueError(\"'rows' must be a positive integer greater than 0.\")\n\n    # Seed for reproducibility\n    np.random.seed(seed)\n\n    # Generate random numbers in the specified range\n    data = np.random.randint(1, 101, size=(rows, len(columns)))\n\n    # Create the DataFrame\n    df = pd.DataFrame(data, columns=columns)\n\n    # Calculate mean and median for each column\n    mean = df.mean(axis=0).to_dict()\n    median = df.median(axis=0).to_dict()\n\n    # Combine mean and median into a single dictionary\n    column_stats = {col: {'mean': mean[col], 'median': median[col]} for col in columns}\n\n    return df, column_stats", "compilation_passed": true, "time": 0.003268003463745117, "tests_passed": true, "error": null}
{"code": "# Raise ValueError if 'rows' is not a positive integer greater than 0\n    if not isinstance(rows, int) or rows <= 0:\n        raise ValueError(\"'rows' must be a positive integer greater than 0.\")\n\n    # Check if columns parameter is a list\n    if not isinstance(columns, list):\n        raise ValueError(\"'columns' must be a list of strings.\")\n\n    # Initialize random number generator with the seed\n    np.random.seed(seed)\n\n    # Initialize dictionary for storing mean and median for each column\n    col_stats = {}\n\n    # Generate random data for each column\n    for col in columns:\n        col_data = np.random.randint(low=1, high=101, size=rows)\n        # Calculate mean and median for each column\n        col_mean = np.mean(col_data)\n        col_median = np.median(col_data)\n        #col_stats[col] = {\"mean\": col_mean, \"median\": col_median}\n        col_stats[col", "compilation_passed": false, "time": 0.0002067089080810547, "tests_passed": false, "error": "SyntaxError"}
