{"code": "if df.empty:\n        raise ValueError(\"Input DataFrame is empty.\")\n\n    df_summed = df.fillna(0).cumsum()\n\n    fig, ax = plt.subplots()\n    df_summed.plot(kind=\"bar\", legend=True, ax=ax)\n\n    plt.title(\"Cumulative Sum per Column\")\n    plt.xlabel(\"Index\")\n    plt.ylabel(\"Cumulative Sum\")\n\n    return df_summed, fig", "compilation_passed": true, "time": 0.036267995834350586, "tests_passed": true, "error": null}
{"code": "if df.empty:\n        raise ValueError(\"The DataFrame is empty\")\n\n    # Calculate cumulative sum for each column\n    result_df = df.cumsum()\n\n    # Create a plot\n    fig, ax = plt.subplots()\n\n    # Plot bar chart using cumulative sum data and set colors\n    for column in result_df.columns:\n        ax.bar(result_df.index, result_df[column], label=column, alpha=0.7)\n\n    # Set plot title\n    ax.set_title('Cumulative Sum per Column')\n\n    # Set x-axis label\n    ax.set_xlabel('Index')\n\n    # Set y-axis label\n    ax.set_ylabel('Cumulative Sum')\n\n    # Set legend\n    ax.legend()\n\n    # Remove grid lines\n    ax.grid(False)\n\n    # Add legend\n    ax.legend(loc='best')\n\n    return result_df, fig", "compilation_passed": true, "time": 0.528364896774292, "tests_passed": true, "error": null}
{"code": "if df.empty:\n        raise ValueError(\"Input DataFrame must not be empty\")\n    if not df.columns.isin(df.select_dtypes(include=['number']).columns).all():\n        raise ValueError(\"Input DataFrame must contain only numeric data\")\n\n    # Calculate the cumulative sum\n    cumsum_df = df.cumsum()\n\n    # Plot the cumulative sum\n    ax = cumsum_df.plot(kind='bar')\n    ax.set_title('Cumulative Sum per Column')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Cumulative Sum')\n    plt.legend(bbox_to_anchor=(1.0, 1.0), loc='upper left')\n    fig = plt.gcf()\n\n    return cumsum_df, fig", "compilation_passed": true, "time": 0.0542910099029541, "tests_passed": true, "error": null}
{"code": "# Check if the input DataFrame is not empty\n    if df.empty:\n        raise ValueError(\"DataFrame must not be empty\")\n\n    # Check if all values in the DataFrame are numeric\n    if not df.applymap(np.isreal).all(axis=None):\n        raise ValueError(\"DataFrame must contain only numeric values\")\n\n    # Calculate the cumulative sum\n    df_cumsum = df.cumsum()\n\n    # Plot the cumulative sum\n    fig, ax = plt.subplots()\n    df_cumsum.plot(kind='bar', legend=True, ax=ax)\n    ax.set_title('Cumulative Sum per Column')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Cumulative Sum')\n\n    return df_cumsum, fig", "compilation_passed": true, "time": 0.05292487144470215, "tests_passed": true, "error": null}
{"code": "if df.empty:\n        raise ValueError('DataFrame must not be empty')\n\n    for col in df.columns:\n        if not df[col].dtype.kind in {'i', 'u', 'f'}:\n            raise ValueError('DataFrame must contain numeric data')\n\n    df_cumsum = df.fillna(0).cumsum()\n\n    fig, ax = plt.subplots()\n\n    ax.set_title('Cumulative Sum per Column')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Cumulative Sum')\n\n    for col in df.columns:\n        ax.bar(df_cumsum.index, df_cumsum[col], label=col)\n\n    ax.legend()\n\n    return df_cumsum, fig", "compilation_passed": true, "time": 0.02321314811706543, "tests_passed": true, "error": null}
{"code": "# Check that the DataFrame is not empty and has only numeric values\n    if df.empty:\n        raise ValueError(\"DataFrame is empty\")\n    if not df.applymap(np.isreal).all().all():\n        raise ValueError(\"DataFrame contains non-numeric data\")\n\n    # Create a copy of the DataFrame for manipulation\n    df_out = df.copy()\n\n    # Calculate cumulative sums and assign them to the output DataFrame\n    df_out = df.apply(lambda x: x.fillna(0).cumsum())\n\n    # Create a plot of cumulative sums for each column\n    df_out.plot.bar(rot=0)\n    plt.title('Cumulative Sum per Column')\n    plt.xlabel('Index')\n    plt.ylabel('Cumulative Sum')\n    plt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\n    fig = plt.gcf()\n\n    return df_out, fig", "compilation_passed": true, "time": 0.03917098045349121, "tests_passed": true, "error": null}
{"code": "if df.empty:\n        raise ValueError(\"The provided DataFrame is empty.\")\n\n    if not all(pd.api.types.is_numeric_dtype(column) for column in df):\n        raise ValueError(\"The provided DataFrame contains non-numeric data.\")\n\n    cumsum = df.cumsum()\n\n    # Plotting\n    fig, ax = plt.subplots()\n    cumsum.plot(kind='bar', ax=ax)\n    plt.title('Cumulative Sum per Column')\n    plt.xlabel('Index')\n    plt.ylabel('Cumulative Sum')\n    plt.legend()\n\n    return cumsum, fig", "compilation_passed": true, "time": 0.0014629364013671875, "tests_passed": false, "error": "ValueError"}
{"code": "# Check that the DataFrame is not empty and contains only numeric data\n    if df.empty:\n        raise ValueError(\"DataFrame must not be empty\")\n\n    # Check that the DataFrame contains only numeric data\n    if not df.columns.isin(df.select_dtypes(include=\"number\").columns).all():\n        raise ValueError(\"DataFrame must contain only numeric data\")\n\n    # Calculate the cumulative sum for each column\n    cumsum_df = df.cumsum()\n\n    # Create a bar chart with the cumulative sums for each column\n    fig, ax = plt.subplots()\n    for column in cumsum_df.columns:\n        ax.plot(cumsum_df.index, cumsum_df[column], label=column)\n\n    # Set the plot title, x-axis label, y-axis label, and legend\n    ax.set_title(\"Cumulative Sum per Column\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Sum\")\n    ax.legend()\n\n    # Return the output", "compilation_passed": true, "time": 0.005828857421875, "tests_passed": false, "error": "TypeError"}
{"code": "if df.empty:\n        raise ValueError(\"Input DataFrame must not be empty\")\n\n    if not all([pd.api.types.is_numeric_dtype(col) for col in df.columns]):\n        raise ValueError(\"Input DataFrame must contain only numeric data\")\n\n    df_sum = df.cumsum()\n\n    df_sum.plot(kind=\"bar\")\n    plt.title(\"Cumulative Sum per Column\")\n    plt.xlabel(\"Index\")\n    plt.ylabel(\"Cumulative Sum\")\n    plt.legend()\n    plt.grid()\n\n    fig = plt.gcf()\n\n    return df_sum, fig", "compilation_passed": true, "time": 0.0013780593872070312, "tests_passed": false, "error": "ValueError"}
{"code": "# Check if DataFrame is not empty\n    if df.empty:\n        raise ValueError(\"DataFrame is empty\")\n\n    # Check if DataFrame contains only numeric values\n    if not df.select_dtypes(include='number').empty:\n        raise ValueError(\"DataFrame contains non-numeric data\")\n\n    # Create a bar chart\n    df_cumsum = df.cumsum()\n    fig, ax = plt.subplots()\n    ax.bar(df_cumsum.index, df_cumsum.values)\n    ax.legend(df_cumsum.columns)\n    ax.set_title('Cumulative Sum per Column')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Cumulative Sum')\n\n    return df_cumsum, fig", "compilation_passed": true, "time": 0.0012662410736083984, "tests_passed": false, "error": "ValueError"}
{"code": "if df.empty:\n        raise ValueError(\"Input DataFrame is empty.\")\n\n    if not all(df.dtypes == 'float64' or df.dtypes == 'int64'):\n        raise ValueError(\"Input DataFrame contains non-numeric data.\")\n\n    cum_sum_df = df.cumsum()\n    cum_sum_df = cum_sum_df.astype(int)\n    cum_sum_df = cum_sum_df.rename_axis(index=df.index).rename(columns=df.columns)\n\n    fig, ax = plt.subplots()\n    cum_sum_df.plot(kind='bar', ax=ax)\n    ax.set_title('Cumulative Sum per Column')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Cumulative Sum')\n    ax.legend()\n    fig.tight_layout()\n    plt.close(fig)\n    return cum_sum_df, fig", "compilation_passed": true, "time": 0.0013818740844726562, "tests_passed": false, "error": "ValueError"}
{"code": "if df.empty:\n        raise ValueError(\"DataFrame must not be empty.\")\n\n    if not (df.applymap(pd.api.types.is_number).all().all()):\n        raise ValueError(\"DataFrame must contain only numeric data.\")\n\n    # Calculate cumulative sum for each column and drop NaN rows\n    cumulative_sums = df.fillna(0).cumsum()\n\n    # Set plot title and axis labels\n    plt.title('Cumulative Sum per Column')\n    plt.xlabel('Index')\n    plt.ylabel('Cumulative Sum')\n\n    # Plot cumulative sums for each column\n    for i, column in enumerate(cumulative_sums):\n        plt.plot(cumulative_sums.index, cumulative_sums[column], label=column)\n\n    # Include legend in plot\n    plt.legend()\n\n    # Store the current figure as a variable\n    fig = plt.gcf()\n\n    # Close the plot to free memory\n    plt.close(fig)\n\n    return cumulative_sums, fig", "compilation_passed": true, "time": 0.006027936935424805, "tests_passed": true, "error": null}
{"code": "# check that the DataFrame is not empty\n    if df.empty:\n        raise ValueError(\"DataFrame must not be empty\")\n\n    # check that the DataFrame contains only numeric data\n    if not df.columns.isin(df.select_dtypes(include='number').columns).all():\n        raise ValueError(\"DataFrame must contain only numeric values\")\n\n    # calculate the cumulative sum for each column in the DataFrame\n    cum_sum = df.cumsum()\n\n    # plot the results in a bar chart\n    fig, ax = plt.subplots()\n    cum_sum.plot(kind='bar', ax=ax)\n\n    # set the plot title\n    ax.set_title('Cumulative Sum per Column')\n\n    # set the X-axis label\n    ax.set_xlabel('Index')\n\n    # set the Y-axis label\n    ax.set_ylabel('Cumulative Sum')\n\n    # add a legend\n    ax.legend()\n\n    # return the cumulative sum DataFrame and the plot Figure\n    return cum_sum, fig", "compilation_passed": true, "time": 0.05402493476867676, "tests_passed": true, "error": null}
{"code": "if df.empty:\n        raise ValueError(\"DataFrame is empty\")\n    if not all(df.columns.str.match('^[A-Za-z_]\\w*$')):\n        raise ValueError(\"Column names must contain only alphanumeric characters\")\n    if not all(df.dtypes.isin(['int64', 'float64'])):\n        raise ValueError(\"DataFrame must contain only numeric values\")\n\n    # Calculate cumulative sum\n    cumsum_df = df.cumsum()\n\n    # Plot the results\n    fig, ax = plt.subplots()\n    for i, col in enumerate(df.columns):\n        ax.bar(df.index, cumsum_df[col], label=col)\n\n    # Set plot title, axes labels, and legend\n    ax.set_title(\"Cumulative Sum per Column\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Sum\")\n    ax.legend()\n\n    return cumsum_df, fig", "compilation_passed": true, "time": 0.001748800277709961, "tests_passed": false, "error": "ValueError"}
{"code": "if df.empty:\n        raise ValueError(\"DataFrame is empty\")\n\n    if not all(df.columns.dtype.kind == 'f'):\n        raise ValueError(\"DataFrame contains non-numeric data\")\n\n    # Calculate cumulative sum\n    df = df.cumsum()\n\n    # Plot the results\n    fig = plt.figure()\n    for i, col in enumerate(df.columns):\n        df[col].plot(label=col, kind='bar', legend=True, ylabel=\"Cumulative Sum\")\n    plt.title(\"Cumulative Sum per Column\")\n    plt.xlabel(\"Index\")\n\n    return df, fig", "compilation_passed": true, "time": 0.0012388229370117188, "tests_passed": false, "error": "TypeError"}
{"code": "# Check if the DataFrame is empty.\n    if df.empty:\n        raise ValueError(\"DataFrame must not be empty.\")\n\n    # Check if the DataFrame contains non-numeric data.\n    if not df.columns.isin(df.select_dtypes(include=[\"number\"]).columns).all():\n        raise ValueError(\"DataFrame must contain only numeric data.\")\n\n    # Create a new DataFrame with cumulative sums for each column.\n    cumulative_sums_df = df.apply(lambda x: x.cumsum(), axis=0)\n\n    # Plot the cumulative sums in a bar chart.\n    fig, ax = plt.subplots(figsize=(6, 4))\n    ax.bar(\n        cumulative_sums_df.index,\n        cumulative_sums_df.values.T,\n        bottom=np.concatenate(([0], cumulative_sums_df.iloc[:-1, :].values.T.sum(axis=0))),\n        color=plt.rcParams[\"axes.prop_cycle\"]", "compilation_passed": false, "time": 0.0002410411834716797, "tests_passed": false, "error": "SyntaxError"}
{"code": "if df.empty:\n        raise ValueError(\"The DataFrame is empty.\")\n\n    # Check if there are NaN values in the DataFrame and raise an error if\n    # there are any\n    if df.isna().any().any():\n        raise ValueError(\"The DataFrame contains NaN values.\")\n\n    # Create a new DataFrame with cumulative sums\n    cumulative_df = df.cumsum()\n\n    # Create a bar chart of cumulative sums\n    fig, ax = plt.subplots()\n    ax.bar(df.index, cumulative_df.values)\n\n    # Set plot title and axis labels\n    ax.set_title('Cumulative Sum per Column')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Cumulative Sum')\n\n    # Add legend to plot\n    ax.legend(df.columns)\n\n    return cumulative_df, fig", "compilation_passed": true, "time": 0.0052187442779541016, "tests_passed": false, "error": "ValueError"}
{"code": "# Check for empty DataFrame\n    if df.empty:\n        raise ValueError(\"DataFrame must not be empty.\")\n\n    # Check for non-numeric DataFrame\n    if not df.columns.isin(['A', 'B']).any():\n        raise ValueError(\"DataFrame must contain numeric data.\")\n\n    # Create a copy of the DataFrame for manipulation\n    df_copy = df.copy()\n\n    # Calculate cumulative sum for each column\n    for col in df_copy.columns:\n        df_copy[col] = df_copy[col].fillna(0).cumsum()\n\n    # Set plot title\n    plt.title('Cumulative Sum per Column')\n\n    # Set plot labels\n    plt.xlabel('Index')\n    plt.ylabel('Cumulative Sum')\n\n    # Create bar plot\n    fig = plt.figure(figsize=(10, 5))\n    df_copy.plot(kind='bar')\n    plt.grid(True)\n    plt.legend(bbox_to_anchor=(0.8, 0.8))\n\n    ", "compilation_passed": true, "time": 0.010298967361450195, "tests_passed": false, "error": "TypeError"}
{"code": "# Check if the DataFrame is empty or contains non-numeric data\n    if df.empty or not df.select_dtypes(include=['number']).empty:\n        raise ValueError('DataFrame must not be empty and must contain'\n                         ' numeric data to plot')\n\n    # Create a new DataFrame with cumulative sums for each column\n    output_df = df.cumsum()\n\n    # Create a bar chart of the cumulative sums\n    fig, ax = plt.subplots()\n    for col in df.columns:\n        ax.bar(output_df.index, output_df[col], label=col)\n    ax.set_title('Cumulative Sum per Column')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Cumulative Sum')\n    ax.legend()\n\n    return output_df, fig", "compilation_passed": true, "time": 0.0014116764068603516, "tests_passed": false, "error": "ValueError"}
{"code": "# Check if the DataFrame is empty\n    if df.empty:\n        raise ValueError(\"The DataFrame must not be empty.\")\n\n    # Check if the DataFrame contains only numeric values\n    if not df.select_dtypes(include=['number']).columns.equals(df.columns):\n        raise ValueError(\"The DataFrame must contain only numeric values.\")\n\n    # Calculate cumulative sum for each column\n    cumulative_sums = df.cumsum()\n\n    # Plot the cumulative sums in a bar chart\n    fig, ax = plt.subplots()\n    for i, col in enumerate(cumulative_sums.columns):\n        ax.bar(cumulative_sums.index, cumulative_sums[col], bottom=cumulative_sums[cumulative_sums.columns[:i]].sum(axis=1), label=col)\n    ax.legend()\n    ax.set_title('Cumulative Sum per Column')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Cumulative Sum')\n\n    return cumulative_sums, fig", "compilation_passed": true, "time": 0.03611898422241211, "tests_passed": true, "error": null}
{"code": "# Check that the DataFrame is not empty\n    if df.empty:\n        raise ValueError(\"DataFrame must not be empty\")\n\n    # Check that the DataFrame contains only numeric data\n    if not df.columns.isin(df.select_dtypes(include='number').columns).all():\n        raise ValueError(\"DataFrame must contain only numeric data\")\n\n    # Calculate the cumulative sum for each column\n    cumsum_df = df.cumsum()\n\n    # Plot the results in a bar chart\n    fig, ax = plt.subplots()\n    for i, col in enumerate(cumsum_df):\n        ax.bar(cumsum_df.index, cumsum_df[col], bottom=cumsum_df[col].cumsum().shift(1, fill_value=0), label=col)\n    ax.set_title('Cumulative Sum per Column')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Cumulative Sum')\n    ax.legend()\n\n    # Return the DataFrame and the figure\n    return cumsum_df", "compilation_passed": true, "time": 0.0071790218353271484, "tests_passed": true, "error": null}
{"code": "if df.empty:\n        raise ValueError(\"Input DataFrame cannot be empty\")\n\n    if df.select_dtypes(include='number').shape != df.shape:\n        raise ValueError(\"Input DataFrame must contain only numeric data\")\n\n    cumsum_df = df.cumsum()\n\n    fig, ax = plt.subplots()\n    ax.bar(cumsum_df.columns, cumsum_df.tail(1), label=cumsum_df.columns)\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Cumulative Sum')\n    ax.legend()\n    ax.set_title('Cumulative Sum per Column')\n\n    plt.tight_layout()\n\n    return cumsum_df, fig", "compilation_passed": true, "time": 0.005086183547973633, "tests_passed": false, "error": "ValueError"}
{"code": "# Check if the DataFrame is empty\n    if df.empty:\n        raise ValueError(\"Input DataFrame is empty.\")\n\n    # Check if the DataFrame contains non-numeric data\n    if df.dtypes.apply(pd.api.types.is_numeric_dtype).any():\n        raise ValueError(\"Input DataFrame contains non-numeric data.\")\n\n    # Calculate cumulative sums\n    output_df = df.cumsum()\n\n    # Create bar chart\n    fig, ax = plt.subplots()\n    output_df.plot(kind='bar', ax=ax)\n    ax.set_title('Cumulative Sum per Column')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Cumulative Sum')\n    ax.legend()\n\n    # Show the plot if needed\n    # plt.show()\n\n    # Return the DataFrame and bar chart Figure\n    return output_df, fig", "compilation_passed": true, "time": 0.0014617443084716797, "tests_passed": false, "error": "ValueError"}
{"code": "# Check if DataFrame is empty and raise ValueError if it is\n    if df.empty:\n        raise ValueError(\"DataFrame cannot be empty\")\n    # Check if DataFrame contains non-numeric data and raise ValueError if it\n    # does\n    if not df.columns.isin(['float', 'int']).any():\n        raise ValueError(\"DataFrame must contain numeric data\")\n\n    # Create a cumulative sum DataFrame\n    cum_sum_df = df.cumsum()\n\n    # Plot the cumulative sum data\n    fig, ax = plt.subplots()\n    cum_sum_df.plot(kind='bar', ax=ax)\n    ax.set_title('Cumulative Sum per Column')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Cumulative Sum')\n    ax.legend()\n    plt.tight_layout()\n    return cum_sum_df, fig", "compilation_passed": true, "time": 0.0012507438659667969, "tests_passed": false, "error": "ValueError"}
{"code": "# Check that the DataFrame is not empty and contains only numeric data.\n    if df.empty:\n        raise ValueError(\"The input DataFrame is empty.\")\n    if not df.applymap(lambda x: isinstance(x, (int, float))).all().all():\n        raise ValueError(\"The input DataFrame contains non-numeric data.\")\n\n    # Calculate cumulative sum for each column.\n    cumulative_sum_df = df.apply(lambda x: x.cumsum(), axis=0)\n\n    # Create a plot with a legend.\n    fig, ax = plt.subplots()\n    ax.bar(df.index, cumulative_sum_df.iloc[-1])\n    ax.set_title('Cumulative Sum per Column')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Cumulative Sum')\n    ax.legend(cumulative_sum_df.columns)\n\n    # Return the cumulative sum DataFrame and plot Figure.\n    return cumulative_sum_df, fig", "compilation_passed": true, "time": 0.005224943161010742, "tests_passed": false, "error": "ValueError"}
{"code": "# Check if the DataFrame is empty and raise ValueError if so\n    if df.empty:\n        raise ValueError(\"DataFrame is empty\")\n\n    # Check if DataFrame contains non-numeric data and raise ValueError if so\n    if not df.columns.isin(df.select_dtypes(include='number').columns).all():\n        raise ValueError(\"DataFrame contains non-numeric data\")\n\n    # Calculate cumulative sum for each column\n    df_cumulative_sum = df.cumsum()\n\n    # Plot the cumulative sums in a bar chart\n    fig, ax = plt.subplots()\n    df_cumulative_sum.plot(kind='bar', ax=ax)\n    ax.set_title('Cumulative Sum per Column')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Cumulative Sum')\n    ax.legend(title='Columns')\n\n    return df_cumulative_sum, fig", "compilation_passed": true, "time": 0.05400204658508301, "tests_passed": true, "error": null}
{"code": "if df.empty:\n        raise ValueError(\"The DataFrame must not be empty.\")\n\n    if not all(df.dtypes == 'float64'):\n        raise ValueError(\"The DataFrame must contain numeric values only.\")\n\n    df = df.fillna(0)\n    cum_sum = df.cumsum()\n    fig, ax = plt.subplots()\n    for i, col in enumerate(cum_sum.columns):\n        ax.bar(cum_sum.index, cum_sum[col], bottom=cum_sum[col].shift(1, fill_value=0), label=col)\n    ax.legend()\n    ax.set_title('Cumulative Sum per Column')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Cumulative Sum')\n    return cum_sum, fig", "compilation_passed": true, "time": 0.0015990734100341797, "tests_passed": false, "error": "ValueError"}
{"code": "# Check that the input DataFrame is not empty\n    if df.empty:\n        raise ValueError('Input DataFrame is empty')\n\n    # Check that the input DataFrame contains only numeric data\n    if not df.columns.isin(df.select_dtypes(include=np.number).columns).all():\n        raise ValueError('Input DataFrame contains non-numeric data')\n\n    # Calculate the cumulative sum for each column\n    cum_sum = df.cumsum()\n\n    # Set the plot title, X-axis and Y-axis labels\n    plt.title('Cumulative Sum per Column')\n    plt.xlabel('Index')\n    plt.ylabel('Cumulative Sum')\n\n    # Create the bar chart and legend\n    for col in df.columns:\n        plt.plot(cum_sum[col], label=col)\n    plt.legend()\n\n    # Create the matplotlib figure\n    fig = plt.gcf()\n\n    return cum_sum, fig", "compilation_passed": true, "time": 0.006686210632324219, "tests_passed": true, "error": null}
{"code": "if df.empty:\n        raise ValueError(\"The DataFrame is empty.\")\n\n    # Calculate the cumulative sum for each column in the DataFrame\n    cum_sum = df.fillna(0).cumsum()\n\n    # Create the bar chart\n    fig, ax = plt.subplots()\n    cum_sum.plot(kind='bar', ax=ax, legend=True)\n\n    # Set the plot title, labels, and legend\n    ax.set_title('Cumulative Sum per Column')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Cumulative Sum')\n    ax.legend(title='Columns', bbox_to_anchor=(1, 1), loc='upper left')\n\n    return cum_sum, fig", "compilation_passed": true, "time": 0.03786611557006836, "tests_passed": true, "error": null}
{"code": "# Check if the DataFrame is empty\n    if df.empty:\n        raise ValueError(\"The DataFrame must not be empty.\")\n\n    # Check if all values in each column are of numeric data type\n    if not all(pd.api.types.is_numeric_dtype(df[col]) for col in df):\n        raise ValueError(\"All values in the DataFrame must be numeric.\")\n\n    # Calculate the cumulative sum for each column in the DataFrame\n    df_cumsum = df.apply(lambda col: col.cumsum())\n\n    # Plot the cumulative sum as bar chart\n    fig, ax = plt.subplots()\n    df_cumsum.plot(kind='bar', ax=ax)\n    ax.set_title('Cumulative Sum per Column')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Cumulative Sum')\n    ax.legend()\n    return df_cumsum, fig", "compilation_passed": true, "time": 0.054270029067993164, "tests_passed": true, "error": null}
