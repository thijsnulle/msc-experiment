{"code": "if not text:\n        raise ValueError(\"Input text cannot be empty.\")\n\n    if seed is not None:\n        random.seed(seed)\n\n    mapping = {}\n    for char in text:\n        if not char.isprintable() or char == \" \":\n            continue\n        elif char in mapping:\n            continue\n        elif char.isalpha():\n            mapping[char] = random.choice(string.ascii_lowercase)\n        elif char.isdigit():\n            mapping[char] = str(random.randint(0, 9))\n        else:\n            mapping[char] = char\n\n    return \"\".join([mapping.get(char, char) for char in text])", "compilation_passed": true, "time": 0.0010466575622558594, "tests_passed": true, "error": null}
{"code": "random.seed(seed)\n    alphabet = string.ascii_lowercase\n    digits = string.digits\n    password = \"\"\n    for char in text:\n        if char.isalpha():\n            password += random.choice(alphabet)\n        elif char.isdigit():\n            password += random.choice(digits)\n        elif char == \" \":\n            if random.random() < 0.5:\n                password += random.choice(digits)\n            else:\n                password += random.choice(alphabet)\n        else:\n            password += char\n    return password", "compilation_passed": true, "time": 0.0009391307830810547, "tests_passed": true, "error": null}
{"code": "if not text:\n        raise ValueError(\"Input text must not be empty\")\n\n    if seed is not None:\n        random.seed(seed)\n\n    ascii_lowercase_letters = string.ascii_lowercase\n    random_lowercase_letter = lambda: random.choice(ascii_lowercase_letters)\n\n    single_digit_numbers = list(range(10))\n    random_digit = lambda: str(random.choice(single_digit_numbers))\n\n    def replace_char(char):\n        if char.isalpha():\n            return random_lowercase_letter()\n        elif char.isdigit():\n            return random_digit()\n        elif char == \" \":\n            return random.choice([random_digit(), random_lowercase_letter()])\n        else:\n            return char\n\n    password = \"\".join(map(replace_char, text))\n\n    return password", "compilation_passed": true, "time": 0.002048969268798828, "tests_passed": true, "error": null}
{"code": "random.seed(seed)\n\n    if not text:\n        raise ValueError(\"Input text must not be empty.\")\n\n    password = \"\"\n\n    for char in text:\n        if char in string.ascii_letters:\n            password += random.choice(string.ascii_lowercase)\n        elif char in string.digits:\n            password += str(random.randint(0, 9))\n        elif char == \" \":\n            if random.choice([0, 1]):\n                password += str(random.randint(0, 9))\n            else:\n                password += random.choice(string.ascii_lowercase)\n        else:\n            password += char\n\n    return password", "compilation_passed": true, "time": 0.0009350776672363281, "tests_passed": true, "error": null}
{"code": "if seed is not None:\n        random.seed(seed)\n\n    if not text:\n        raise ValueError(\"Empty string\")\n\n    alphabet_map = {char: random.choice(string.ascii_lowercase) for char in string.ascii_lowercase}\n    digits_map = {digit: str(random.randint(0, 9)) for digit in string.digits}\n    spaces_map = {space: random.choice(string.digits + string.ascii_lowercase) for space in string.whitespace}\n\n    def replace_char(char):\n        if char.isalpha():\n            return alphabet_map[char]\n        elif char.isdigit():\n            return digits_map[char]\n        elif char.isspace():\n            return spaces_map[char]\n        else:\n            return char\n\n    return \"\".join(replace_char(char) for char in text)", "compilation_passed": true, "time": 0.0009698867797851562, "tests_passed": false, "error": "KeyError"}
{"code": "if not text:\n        raise ValueError(\"Input text cannot be empty\")\n\n    if seed is not None:\n        random.seed(seed)\n\n    mapping = str.maketrans(\n        \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890 \",\n        \"\".join(random.choice(\"abcdefghijklmnopqrstuvwxyz\" + str(i) + (str(i) if random.random() > 0.5 else random.choice(\"abcdefghijklmnopqrstuvwxyz\")) for i in range(10))))\n    return text.translate(mapping)", "compilation_passed": true, "time": 0.000888824462890625, "tests_passed": false, "error": "TypeError"}
{"code": "# Validate the input text\n    if not text:\n        raise ValueError(\"Input text must not be empty\")\n\n    # Set the seed for the random number generator\n    if seed is not None:\n        random.seed(seed)\n\n    # Initialize the output string\n    output = \"\"\n\n    # Loop through each character in the text and mirror it\n    for char in text:\n        if char.isalpha():  # Mirror alphabetic characters\n            output += random.choice(string.ascii_lowercase)\n        elif char.isdigit():  # Mirror digits with random single-digit numbers\n            output += str(random.randint(0, 9))\n        elif char.isspace():  # Mirror spaces with random digit or letter at equal probabilities\n            if random.choice([True, False]):\n                output += str(random.randint(0, 9))\n            else:\n                output += random.choice(string.ascii_lowercase)\n        else:  # Leave other characters unchanged\n            output += char\n\n    return output", "compilation_passed": true, "time": 0.0008921623229980469, "tests_passed": true, "error": null}
{"code": "if not text:\n        raise ValueError(\"Text cannot be empty\")\n\n    if seed is not None:\n        random.seed(seed)\n\n    ascii_lowercase = string.ascii_lowercase  # All lowercase letters\n    digits = string.digits  # All digits\n    alphabet = ascii_lowercase + digits  # Combined alphabet of lowercase letters and digits\n\n    password = []\n    for char in text:\n        if char.isalpha():\n            # Replace alphabetic characters with random lowercase letters\n            password.append(random.choice(ascii_lowercase))\n        elif char.isdigit():\n            # Replace digits with random single-digit numbers\n            password.append(random.choice(digits))\n        elif char == ' ':\n            # Replace spaces with either a random digit or lowercase letter at equal probability\n            choice = random.choice([ascii_lowercase, digits])\n            password.append(random.choice(choice))\n        else:\n            # Keep other characters unchanged\n            password.append(char)\n\n    return ''.join(password)", "compilation_passed": true, "time": 0.001026153564453125, "tests_passed": true, "error": null}
{"code": "if not text:\n        raise ValueError(\"Input text cannot be empty\")\n\n    if seed is not None:\n        random.seed(seed)\n\n    password = \"\"\n    for char in text:\n        if char.isalpha():\n            new_char = random.choice(string.ascii_lowercase)\n        elif char.isdigit():\n            new_char = random.choice(string.digits)\n        elif char == \" \":\n            if random.random() < 0.5:  # Generate a letter or digit with equal probability\n                new_char = random.choice(string.ascii_lowercase + string.digits)\n            else:\n                new_char = random.choice(string.digits)\n        else:\n            new_char = char\n\n        password += new_char\n\n    return password", "compilation_passed": true, "time": 0.0009429454803466797, "tests_passed": true, "error": null}
{"code": "if not text:\n        raise ValueError(\"Input text must not be empty.\")\n\n    random.seed(seed)\n\n    # Create a mapping of each alphabetic character to a random ascii lowercase letter\n    alpha_map = {ord(c): ord(random.choice(string.ascii_lowercase)) for c in string.ascii_letters}\n    # Create a mapping of each digit character to a random single-digit number\n    digit_map = {ord(d): ord(random.choice(string.digits)) for d in string.digits}\n    # Create a mapping of space characters to a random choice of digit or letter at equal probability\n    space_map = {32: ord(random.choice(string.digits + string.ascii_lowercase))}\n    # Create a mapping of other characters to themselves\n    other_map = {ord(c): ord(c) for c in string.punctuation}\n\n    # Merge the mappings\n    all_maps = dict(alpha_map, **digit_map, **space_map, **other_map)\n\n    # Create", "compilation_passed": true, "time": 0.0009350776672363281, "tests_passed": false, "error": "TypeError"}
{"code": "if not text:\n        raise ValueError(\"The input text should not be empty.\")\n\n    random.seed(seed)\n\n    alphabet_chars = string.ascii_lowercase\n    digit_chars = string.digits\n\n    mirror_password = []\n\n    for char in text:\n        if char.isalpha():\n            mirror_char = random.choice(alphabet_chars)\n        elif char.isdigit():\n            mirror_char = random.choice(digit_chars)\n        elif char.isspace():\n            mirror_char = random.choice(alphabet_chars + digit_chars)\n        else:\n            mirror_char = char\n        mirror_password.append(mirror_char)\n\n    return \"\".join(mirror_password)", "compilation_passed": true, "time": 0.000885009765625, "tests_passed": true, "error": null}
{"code": "# Raise ValueError if the input text is empty\n    if not text:\n        raise ValueError(\"Input text must not be empty\")\n\n    # Set the seed for the random number generator if provided\n    if seed is not None:\n        random.seed(seed)\n\n    # Create dictionaries to map alphabetic characters and digits to random replacements\n    alphabetic_to_random = string.ascii_lowercase\n    digits_to_random = string.digits\n    space_to_random = string.digits + string.ascii_lowercase\n\n    # Generate the password by replacing each character in the input text with a random replacement\n    # from the corresponding dictionaries\n    password = ''\n    for char in text:\n        if char.isalpha():\n            password += random.choice(alphabetic_to_random)\n        elif char.isdigit():\n            password += random.choice(digits_to_random)\n        elif char == ' ':\n            password += random.choice(space_to_random)\n        else:\n            password += char\n\n    return password", "compilation_passed": true, "time": 0.0008711814880371094, "tests_passed": true, "error": null}
{"code": "if not text:\n        raise ValueError(\"Input text cannot be empty\")\n    if seed is not None:\n        random.seed(seed)\n    # Initialize the new password as an empty list\n    new_password = []\n    # Loop through each character in the input text\n    for c in text:\n        if c.isalpha():\n            # If the character is alphabetic, replace it with a random lowercase letter\n            new_password.append(random.choice(string.ascii_lowercase))\n        elif c.isdigit():\n            # If the character is a digit, replace it with a random digit\n            new_password.append(random.choice(string.digits))\n        elif c == ' ':\n            # If the character is a space, replace it with either a random digit or letter at equal probability\n            if random.randint(0,1) == 1:\n                new_password.append(random.choice(string.ascii_lowercase))\n            else:\n                new_password.append(random.choice(string.digits))\n        else:\n            # Otherwise, just add the", "compilation_passed": false, "time": 0.00019311904907226562, "tests_passed": false, "error": "IndentationError"}
{"code": "if len(text) == 0:\n        raise ValueError(\"Input text must not be empty\")\n\n    if seed is not None:\n        random.seed(seed)\n\n    alphabetic = list(string.ascii_lowercase)\n    digits = list(\"123456789\")\n    all_letters = alphabetic + digits\n    result = \"\"\n\n    for char in text:\n        if char.isalpha():\n            result += random.choice(alphabetic)\n        elif char.isdigit():\n            result += random.choice(digits)\n        elif char == \" \":\n            result += random.choice(all_letters)\n        else:\n            result += char\n\n    return result", "compilation_passed": true, "time": 0.0008976459503173828, "tests_passed": true, "error": null}
{"code": "# Initialize the random number generator with the provided seed\n    random.seed(seed)\n\n    # Define replacement mappings for each category\n    alphabetic_mapping = random.sample(string.ascii_lowercase, 26)\n    digit_mapping = [str(i) for i in random.sample(range(10), 10)]\n    space_mapping = [random.choice(string.digits + string.ascii_lowercase) for _ in range(2)]\n\n    # Create a dictionary to store replacement mappings based on characters\n    replacement_dict = {}\n    for char, replacement in zip(string.ascii_letters, alphabetic_mapping):\n        replacement_dict[char] = replacement\n\n    for char, replacement in zip(string.digits, digit_mapping):\n        replacement_dict[char] = replacement\n\n    replacement_dict[\" \"] = space_mapping\n\n    # Generate the password by replacing characters with their mapped replacements\n    password = []\n    for char in text:\n        replacement = replacement_dict.get(char, char)\n        if isinstance(replace", "compilation_passed": false, "time": 0.00021314620971679688, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Check input text\n    if not text:\n        raise ValueError(\"Input text cannot be empty\")\n\n    # Initialize random number generator with the provided seed (if any)\n    if seed is not None:\n        random.seed(seed)\n\n    # Set the alphabet, digits, and punctuation as lists of characters\n    alphabet_list = list(string.ascii_lowercase)\n    digits_list = [str(i) for i in range(10)]\n    punctuation_list = list(string.punctuation)\n\n    # Generate the mirrored password\n    result = []\n    for char in text:\n        # If character is an alphabet, choose a random lowercase letter\n        if char.isalpha():\n            result.append(random.choice(alphabet_list))\n\n        # If character is a digit, choose a random digit\n        elif char.isdigit():\n            result.append(random.choice(digits_list))\n\n        # If character is a space, choose either a random digit or lowercase letter at random\n        elif char.isspace():\n            choice = random.choice", "compilation_passed": true, "time": 0.0008721351623535156, "tests_passed": false, "error": "TypeError"}
{"code": "if seed is not None:\n        random.seed(seed)\n    password = \"\"\n    for char in text:\n        if char.isalpha():\n            password += random.choice(string.ascii_lowercase)\n        elif char.isdigit():\n            password += str(random.randint(0, 9))\n        elif char == \" \":\n            password += random.choice([str(random.randint(0, 9)), random.choice(string.ascii_lowercase)])\n        else:\n            password += char\n    return password", "compilation_passed": true, "time": 0.0009810924530029297, "tests_passed": true, "error": null}
{"code": "if not text:\n        raise ValueError(\"Input text cannot be empty\")\n\n    if seed is not None:\n        random.seed(seed)\n\n    password = \"\"\n\n    for char in text:\n        if char.isalpha():\n            password += random.choice(string.ascii_lowercase)\n        elif char.isdigit():\n            password += random.choice(string.digits)\n        elif char == \" \":\n            password += random.choice(string.digits + string.ascii_lowercase)\n        else:\n            password += char\n\n    return password", "compilation_passed": true, "time": 0.0008609294891357422, "tests_passed": true, "error": null}
{"code": "if not text:\n        raise ValueError(\"Input text cannot be empty.\")\n\n    if seed is not None:\n        random.seed(seed)\n\n    password = \"\"\n    for char in text:\n        if char.isalpha():\n            password += random.choice(string.ascii_lowercase)\n        elif char.isdigit():\n            password += random.choice(string.digits)\n        elif char == \" \":\n            password += random.choice(string.digits + string.ascii_lowercase)\n        else:\n            password += char\n\n    return password", "compilation_passed": true, "time": 0.0008540153503417969, "tests_passed": true, "error": null}
{"code": "if not text:\n        raise ValueError(\"Input text must not be empty\")\n\n    if seed:\n        random.seed(seed)\n\n    alphabets = string.ascii_lowercase\n    digits = string.digits\n    password = ''\n\n    for char in text:\n        if char.isalpha():\n            password += random.choice(alphabets)\n        elif char.isdigit():\n            password += str(random.randint(0, 9))\n        elif char.isspace():\n            password += random.choice(alphabets + digits)\n        else:\n            password += char\n\n    return password", "compilation_passed": true, "time": 0.0008592605590820312, "tests_passed": true, "error": null}
{"code": "if not text:\n        raise ValueError(\"Input text must not be empty.\")\n\n    random.seed(seed)\n    password = \"\"\n    for char in text:\n        if char.isalpha():\n            password += random.choice(string.ascii_lowercase)\n        elif char.isdigit():\n            password += str(random.randint(0, 9))\n        elif char == \" \":\n            password += random.choice(string.digits + string.ascii_lowercase)\n        else:\n            password += char\n    return password", "compilation_passed": true, "time": 0.0008399486541748047, "tests_passed": true, "error": null}
{"code": "if not text:\n        raise ValueError(\"Text cannot be empty\")\n\n    random.seed(seed)\n\n    # Define the mapping of alphabets, digits, and spaces to their random replacements\n    alphabets = string.ascii_lowercase\n    digits = '0123456789'\n    spaces = alphabets + digits\n\n    # Create a translation table for each type of character\n    alphabets_table = str.maketrans(alphabets, ''.join(random.choice(alphabets) for _ in range(len(alphabets))))\n    digits_table = str.maketrans(digits, ''.join(random.choice(digits) for _ in range(len(digits))))\n    spaces_table = str.maketrans(spaces, ''.join(random.choice(spaces) for _ in range(len(spaces))))\n\n    # Use a generator expression to process each character with the appropriate translation table\n    transformed_chars = (c.translate(alphabets_table) if c", "compilation_passed": false, "time": 0.00019097328186035156, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not text:\n        raise ValueError(\"Input text must not be empty\")\n\n    # Initialize the random number generator with the specified seed (if any)\n    if seed is not None:\n        random.seed(seed)\n\n    password = \"\"\n    for char in text:\n        # Generate a random password character based on the character type\n        if char.isalpha():\n            password += random.choice(string.ascii_lowercase)\n        elif char.isdigit():\n            password += random.choice(string.digits)\n        elif char == \" \":\n            password += random.choice(string.ascii_lowercase + string.digits)\n        else:\n            password += char\n\n    return password", "compilation_passed": true, "time": 0.0009589195251464844, "tests_passed": true, "error": null}
{"code": "if not text:\n        raise ValueError(\"Input text must not be empty\")\n\n    if seed is not None:\n        random.seed(seed)\n\n    alphabetic_map = string.ascii_lowercase\n    numeric_map = '0123456789'\n\n    password = ''\n    for char in text:\n        if char.isalpha():\n            password += random.choice(alphabetic_map)\n        elif char.isdigit():\n            password += random.choice(numeric_map)\n        elif char == ' ':\n            password += random.choice(alphabetic_map + numeric_map)\n        else:\n            password += char\n\n    return password", "compilation_passed": true, "time": 0.0010497570037841797, "tests_passed": true, "error": null}
{"code": "if not text:\n        raise ValueError(\"text must not be empty\")\n\n    random.seed(seed)\n    mapping = {\n        \"ascii_lowercase\": string.ascii_lowercase,\n        \"ascii_digits\": string.digits,\n        \"ascii_lowercase_or_ascii_digits\": string.ascii_lowercase + string.digits,\n    }\n    password = \"\"\n\n    for char in text:\n        if char in string.ascii_lowercase:\n            password += random.choice(mapping[\"ascii_lowercase\"])\n        elif char in string.ascii_uppercase:\n            password += random.choice(mapping[\"ascii_lowercase\"]).upper()\n        elif char in string.digits:\n            password += random.choice(mapping[\"ascii_digits\"])\n        elif char == \" \":\n            password += random.choice(mapping[\"ascii_lowercase_or_ascii_digits\"])\n        else:\n            password += char\n\n    return password", "compilation_passed": true, "time": 0.0009810924530029297, "tests_passed": true, "error": null}
{"code": "if seed is not None:\n        random.seed(seed)\n    if not text:\n        raise ValueError(\"input text must not be empty\")\n\n    # Define dictionaries for replacement\n    alphabetic_map = {c: random.choice(string.ascii_lowercase) for c in string.ascii_letters}\n    digit_map = {c: random.choice(string.digits) for c in string.digits}\n    space_map = {\" \": random.choice(string.digits + string.ascii_lowercase)}\n\n    # Define a dictionary for all the other characters\n    other_map = {c: c for c in string.printable if c not in alphabetic_map and c not in digit_map and c not in space_map}\n\n    # Combine the dictionaries into a single dictionary\n    full_map = {**alphabetic_map, **digit_map, **space_map, **other_map}\n\n    # Use a dictionary comprehension to create a dictionary of the characters of the input text\n    # with their mapped replacements\n    password_dict = {char:", "compilation_passed": false, "time": 0.00019502639770507812, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not text:\n        raise ValueError(\"The text must not be empty\")\n\n    # Define the replacements for alphabetic characters, digits, and spaces\n    alphabet = string.ascii_lowercase\n    digits = string.digits\n    space = digits + string.ascii_lowercase\n\n    # Define the pattern for matching alphabetic, digit, space, or other characters\n    pattern = r'[a-zA-Z]|[0-9]|\\s|.'\n\n    # Set the random seed if provided\n    if seed is not None:\n        random.seed(seed)\n\n    # Generate the password\n    password = ''\n    for char in re.findall(pattern, text, re.IGNORECASE):\n        if char.isalpha():\n            password += random.choice(alphabet)\n        elif char.isdigit():\n            password += random.choice(digits)\n        elif char.isspace():\n            password += random.choice(space)\n        else:\n            password += char\n\n    return password", "compilation_passed": true, "time": 0.0008661746978759766, "tests_passed": false, "error": "NameError"}
{"code": "if not text:\n        raise ValueError(\"Text must not be empty\")\n    if seed is not None:\n        random.seed(seed)\n\n    password = \"\"\n    for char in text:\n        if char.isalpha():\n            password += random.choice(string.ascii_lowercase)\n        elif char.isdigit():\n            password += str(random.randint(0, 9))\n        elif char == \" \":\n            password += random.choice([random.choice(string.ascii_lowercase), str(random.randint(0, 9))])\n        else:\n            password += char\n\n    return password", "compilation_passed": true, "time": 0.0008609294891357422, "tests_passed": true, "error": null}
{"code": "# Check if the input text is empty\n    if not text:\n        raise ValueError(\"Input text must not be empty.\")\n\n    # Set the seed for the random number generator if provided\n    if seed is not None:\n        random.seed(seed)\n\n    # Initialize the random seed if not provided\n    if seed is None:\n        random.seed()\n\n    # Create dictionaries to map characters to their replacements\n    letters_dict = dict(zip(string.ascii_letters, string.ascii_lowercase*2))\n    digits_dict = dict(zip(string.digits, string.digits*9))\n\n    # Initialize an empty list to store the password\n    password = []\n\n    # Iterate through each character in the input text\n    for char in text:\n        if char in string.ascii_letters:\n            # If it's an alphabetic character, replace it with a random lowercase letter\n            password.append(random.choice(letters_dict[char]))\n        elif char in string.digits:\n            # If it's a digit, replace it with a random", "compilation_passed": false, "time": 0.00017023086547851562, "tests_passed": false, "error": "IndentationError"}
{"code": "if not text:\n        raise ValueError(\"The text must not be empty\")\n\n    if seed is not None:\n        random.seed(seed)\n\n    # Create the replacement dictionary\n    alphabets_dict = dict(zip(string.ascii_lowercase, string.ascii_lowercase))\n    digits_dict = dict(zip(string.digits, string.digits))\n    replacement_dict = {**alphabets_dict, **digits_dict, **{\" \": \" \"}}\n\n    # Update the replacement dictionary for spaces\n    space_values = random.choice([\" \", string.ascii_lowercase, string.digits])\n    replacement_dict.update({\" \": space_values})\n\n    # Create the mirrored string using the replacement dictionary\n    return \"\".join(replacement_dict.get(char, char) for char in text)", "compilation_passed": true, "time": 0.0009272098541259766, "tests_passed": true, "error": null}
