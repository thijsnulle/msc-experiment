{"code": "# Set the random seed\n    np.random.seed(seed)\n\n    # Generate random numeric values\n    values = np.random.randint(1, 101, size=(data_size, len(column_names)))\n\n    # Create the DataFrame\n    df = pd.DataFrame(values, columns=column_names)\n\n    # Replace values less than 10 with -1\n    df = df.apply(lambda x: x.where(x >= 10, -1))\n\n    return df", "compilation_passed": true, "time": 0.004171133041381836, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    data = pd.DataFrame(np.random.randint(1, 101, size=(data_size, len(column_names))), columns=column_names)\n    data[data < 10] = -1\n    return data", "compilation_passed": true, "time": 0.0026099681854248047, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    data = {\n        col_name: np.random.randint(1, 101, data_size)\n        for col_name in column_names\n    }\n    df = pd.DataFrame(data)\n    df = df.where(df >= 10, -1)\n    return df", "compilation_passed": true, "time": 0.002518892288208008, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    df = pd.DataFrame(np.random.randint(low=1, high=101, size=(data_size, len(column_names))), columns=column_names)\n    df[df < 10] = -1\n    return df", "compilation_passed": true, "time": 0.0025589466094970703, "tests_passed": true, "error": null}
{"code": "# Set random seed for reproducibility\n    np.random.seed(seed)\n\n    # Generate random numeric values between 1 and 100 (inclusive)\n    data = np.random.randint(1, 101, size=(data_size, len(column_names)))\n\n    # Replace values less than 10 with -1\n    data[data < 10] = -1\n\n    # Create DataFrame and replace column names\n    df = pd.DataFrame(data)\n    df.columns = column_names\n\n    return df", "compilation_passed": true, "time": 0.0016970634460449219, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    data = np.random.randint(1, 101, size=(data_size, len(column_names)))\n    data[data < 10] = -1\n    return pd.DataFrame(data, columns=column_names)", "compilation_passed": true, "time": 0.0015649795532226562, "tests_passed": true, "error": null}
{"code": "# Set the random seed for reproducibility\n    np.random.seed(seed)\n\n    # Generate random numeric values\n    values = np.random.randint(1, 101, size=(data_size, len(column_names)))\n\n    # Create the DataFrame\n    df = pd.DataFrame(values, columns=column_names)\n\n    # Replace values less than 10 with -1\n    df = df.where(df >= 10, -1)\n\n    return df", "compilation_passed": true, "time": 0.0023398399353027344, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    df = pd.DataFrame(np.random.randint(1, 101, size=(data_size, len(column_names))), columns=column_names)\n    df[df < 10] = -1\n    return df", "compilation_passed": true, "time": 0.002489805221557617, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)  # Set the random seed for reproducibility\n    data = np.random.randint(1, 101, size=(data_size, len(column_names)))  # Generate random integers between 1 and 100\n    df = pd.DataFrame(data, columns=column_names)  # Create a DataFrame\n    df[df < 10] = -1  # Replace values less than 10 with -1\n\n    return df", "compilation_passed": true, "time": 0.0025680065155029297, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed) # set the seed for reproducibility\n    data = np.random.randint(1, 101, size=(data_size, len(column_names)))\n    df = pd.DataFrame(data=data, columns=column_names)\n\n    return df.where(df >= 10, -1)", "compilation_passed": true, "time": 0.0022878646850585938, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    data = np.random.randint(1, 101, size=(data_size, len(column_names)))\n    data = data.clip(lower=10) - 10\n    df = pd.DataFrame(data, columns=column_names)\n    df = df.replace(to_replace=-1, value=10)\n    return df", "compilation_passed": true, "time": 0.0008697509765625, "tests_passed": false, "error": "ValueError"}
{"code": "np.random.seed(seed)\n    df = pd.DataFrame(np.random.randint(1, 101, size=(data_size, len(column_names))), columns=column_names)\n    df.loc[df < 10] = -1\n    return df", "compilation_passed": true, "time": 0.0014581680297851562, "tests_passed": false, "error": "KeyError"}
{"code": "# Set random seed\n    np.random.seed(seed)\n\n    # Generate random numeric values between 1 and 100, inclusive\n    values = np.random.randint(1, 101, size=(data_size, len(column_names)))\n\n    # Create a DataFrame with the generated values\n    df = pd.DataFrame(values, columns=column_names)\n\n    # Replace all occurrences of values less than 10 with -1\n    df = df.where(df >= 10, -1)\n\n    return df", "compilation_passed": true, "time": 0.0023660659790039062, "tests_passed": true, "error": null}
{"code": "# Set the random seed for reproducibility\n    np.random.seed(seed)\n\n    # Generate random numeric values between 1 and 100, inclusive\n    data = np.random.randint(1, 101, (data_size, len(column_names)))\n\n    # Convert the generated data to a DataFrame\n    df = pd.DataFrame(data, columns=column_names)\n\n    # Replace all occurrences of values less than 10 with -1\n    df[df < 10] = -1\n\n    return df", "compilation_passed": true, "time": 0.002624988555908203, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n\n    df = pd.DataFrame(np.random.randint(1, 101, size=(data_size, len(column_names))), columns=column_names)\n    df[df < 10] = -1\n\n    return df", "compilation_passed": true, "time": 0.0025968551635742188, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n\n    data = np.random.randint(1, 101, (data_size, len(column_names)))\n    df = pd.DataFrame(data=data, columns=column_names)\n    df = df.where(df >= 10, -1)\n\n    return df", "compilation_passed": true, "time": 0.0022830963134765625, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n\n    df = pd.DataFrame(np.random.randint(1, 101, (data_size, len(column_names))), columns=column_names)\n    df[df < 10] = -1\n\n    return df", "compilation_passed": true, "time": 0.0025739669799804688, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    data = {col: np.random.randint(1, 101, data_size) for col in column_names}\n    df = pd.DataFrame(data)\n    return df.where(df >= 10, -1)", "compilation_passed": true, "time": 0.0023889541625976562, "tests_passed": true, "error": null}
{"code": "# Set the random seed for reproducible results\n    np.random.seed(seed)\n\n    # Create a DataFrame with random numeric values between 1 and 100\n    df = pd.DataFrame(np.random.randint(1, 101, size=(data_size, len(column_names))), columns=column_names)\n\n    # Replace all values less than 10 with -1\n    df.loc[df < 10] = -1\n\n    return df", "compilation_passed": true, "time": 0.0014369487762451172, "tests_passed": false, "error": "KeyError"}
{"code": "# Initialize the random number generator with the given seed\n    np.random.seed(seed)\n\n    # Create a DataFrame with random numeric values between 1 and 100\n    df = pd.DataFrame(np.random.randint(1, 101, size=(data_size, len(column_names))), columns=column_names)\n\n    # Replace all values less than 10 with -1\n    df = df.where(df >= 10, -1)\n\n    return df", "compilation_passed": true, "time": 0.002257108688354492, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    # Initialize an empty DataFrame\n    df = pd.DataFrame()\n\n    # Generate random values for each column using NumPy's random function\n    for column_name in column_names:\n        # Generate a NumPy array with random integers between 1 and 100\n        random_values = np.random.randint(1, 101, data_size)\n        # Create a new column in the DataFrame with the generated values and the given column name\n        df[column_name] = random_values\n\n    # Replace all values less than 10 with -1 using NumPy's where function\n    for column_name in column_names:\n        df[column_name] = np.where(df[column_name] < 10, -1, df[column_name])\n\n    return df", "compilation_passed": true, "time": 0.004712104797363281, "tests_passed": true, "error": null}
{"code": "# Set random seed\n    np.random.seed(seed)\n\n    # Generate random numeric values\n    data = np.random.randint(1, 101, size=(data_size, len(column_names)))\n\n    # Replace values less than 10 with -1\n    data[data < 10] = -1\n\n    # Create DataFrame\n    df = pd.DataFrame(data, columns=column_names)\n\n    return df", "compilation_passed": true, "time": 0.0015659332275390625, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    data = np.random.randint(1, 101, size=(data_size, len(column_names)))\n    data[np.where(data < 10)] = -1\n\n    return pd.DataFrame(data, columns=column_names)", "compilation_passed": true, "time": 0.0016429424285888672, "tests_passed": true, "error": null}
{"code": "# Set the random seed to ensure reproducibility\n    np.random.seed(seed)\n\n    # Generate random values between 1 and 100, inclusive\n    data = np.random.randint(1, 101, (data_size, len(column_names)))\n\n    # Convert data to DataFrame with specified column names\n    df = pd.DataFrame(data, columns=column_names)\n\n    # Replace values less than 10 with -1\n    df[df < 10] = -1\n\n    return df", "compilation_passed": true, "time": 0.002476930618286133, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    data = pd.DataFrame(np.random.randint(1, 101, size=(data_size, len(column_names))), columns=column_names)\n    data = data.where(data >= 10, -1)\n\n    return data", "compilation_passed": true, "time": 0.0023450851440429688, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n\n    data = {}\n    for column_name in column_names:\n        data[column_name] = np.random.randint(1, 101, data_size)\n\n    df = pd.DataFrame(data)\n    df = df.mask(df < 10, -1)\n\n    return df", "compilation_passed": true, "time": 0.002454042434692383, "tests_passed": true, "error": null}
{"code": "# Set the random seed\n    np.random.seed(seed)\n\n    # Generate a Pandas DataFrame with random numeric values between 1 and 100, inclusive\n    df = pd.DataFrame(np.random.randint(1, 101, size=(data_size, len(column_names))), columns=column_names)\n\n    # Replace all occurrences of values less than 10 with -1\n    df = df.apply(lambda x: x.where(x >= 10, -1), axis=0)\n\n    return df", "compilation_passed": true, "time": 0.003885030746459961, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n\n    df = pd.DataFrame(np.random.randint(1, 101, size=(data_size, len(column_names))))\n    df.columns = column_names\n\n    # Replace values less than 10 with -1\n    df[df < 10] = -1\n\n    return df", "compilation_passed": true, "time": 0.002523183822631836, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed) # Set a seed for reproducibility\n    data = np.random.randint(1, 101, size=(data_size, len(column_names)))\n    df = pd.DataFrame(data, columns=column_names)\n    df = df.where(df >= 10, -1)\n\n    return df", "compilation_passed": true, "time": 0.0023441314697265625, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)  # Set a random seed for reproducibility\n    data = np.random.randint(1, 101, size=(data_size, len(column_names)))  # Generate random numbers between 1 and 100\n\n    data[data < 10] = -1  # Replace values < 10 with -1\n\n    df = pd.DataFrame(data, columns=column_names)  # Create Pandas DataFrame\n\n    return df", "compilation_passed": true, "time": 0.0015616416931152344, "tests_passed": true, "error": null}
