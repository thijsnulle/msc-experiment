{"code": "json_files = glob.glob(os.path.join(directory, \"*.json\"))\n    errors = []\n    for file in json_files:\n        try:\n            shutil.move(file, os.path.join(archive_dir, os.path.basename(file)))\n        except Exception as e:\n            errors.append(str(e))\n    return (len(errors) == 0, errors)", "compilation_passed": true, "time": 0.0009028911590576172, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "json_files = glob.glob(os.path.join(directory, \"*.json\"))\n    success = True\n    errors = []\n\n    for file in json_files:\n        filename = os.path.basename(file)\n        target_dir = os.path.join(archive_dir)\n        target_path = os.path.join(target_dir, filename)\n        try:\n            os.makedirs(target_dir, exist_ok=True)\n            shutil.move(file, target_path)\n            print(f\"Moved '{filename}' to '{target_dir}'\")\n        except Exception as e:\n            success = False\n            errors.append(f\"Error moving '{filename}': {str(e)}\")\n    return success, errors", "compilation_passed": true, "time": 0.0009448528289794922, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "files = glob.glob(os.path.join(directory, \"*.json\"))\n    errors = []\n    success = True\n    for file in files:\n        file_name = os.path.basename(file)\n        try:\n            shutil.move(file, os.path.join(archive_dir, file_name))\n        except Exception as e:\n            success = False\n            errors.append(f\"Failed to archive {file_name}: {str(e)}\")\n    return success, errors", "compilation_passed": true, "time": 0.0008921623229980469, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "success = False\n    error_msgs = []\n\n    try:\n        os.makedirs(archive_dir, exist_ok=True)\n\n        json_files = glob.glob(os.path.join(directory, \"*.json\"))\n        for file in json_files:\n            file_name = os.path.basename(file)\n            shutil.move(file, os.path.join(archive_dir, file_name))\n    except Exception as e:\n        error_msgs.append(str(e))\n    else:\n        success = True\n\n    return success, error_msgs", "compilation_passed": true, "time": 0.0008938312530517578, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "try:\n        os.makedirs(archive_dir, exist_ok=True)\n        json_files = glob.glob(os.path.join(directory, \"*.json\"))\n        errors = []\n        for file in json_files:\n            try:\n                shutil.move(file, os.path.join(archive_dir, os.path.basename(file)))\n            except Exception as e:\n                errors.append(f\"Error archiving {file}: {str(e)}\")\n        return (len(errors) == 0, errors)\n    except Exception as e:\n        return False, [str(e)]", "compilation_passed": true, "time": 0.0009129047393798828, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "errors = []\n    for file in glob.glob(os.path.join(directory, \"*.json\")):\n        try:\n            shutil.move(file, os.path.join(archive_dir, os.path.basename(file)))\n        except Exception as e:\n            errors.append(f\"Failed to archive file '{file}': {e}\")\n\n    return (not errors, errors)", "compilation_passed": true, "time": 0.0008549690246582031, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Validate and sanitize input parameters\n    directory = os.path.abspath(directory)\n    archive_dir = os.path.abspath(archive_dir)\n\n    # Check if the source directory exists\n    if not os.path.exists(directory):\n        raise ValueError(f\"Source directory '{directory}' does not exist.\")\n\n    # Check if the destination directory exists, create if necessary\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n\n    # Initialize variables for error handling\n    errors = []\n    success = True\n\n    # Find all JSON files in the directory and its subdirectories\n    json_files = glob.glob(os.path.join(directory, \"**\", \"*.json\"), recursive=True)\n\n    # Loop through each JSON file and move it to the archive directory\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, archive_dir)\n            print(f\"Moved {json_file} to {archive_dir}\"", "compilation_passed": false, "time": 0.00020599365234375, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not os.path.exists(directory):\n        return (False, [\"Directory '{}' doesn't exist\".format(directory)])\n\n    os.chdir(directory)\n    json_files = [file for file in glob.glob(\"*.json\")]\n    if not json_files:\n        return (False, [\"No JSON files found in directory '{}'\".format(directory)])\n\n    os.chdir('..')\n    os.mkdir(archive_dir)\n    os.chdir(archive_dir)\n\n    errors = []\n    for file in json_files:\n        try:\n            shutil.move(os.path.join(directory, file), os.getcwd())\n        except Exception as e:\n            errors.append(\"Failed to move '{}' to archive directory: {}\".format(file, str(e)))\n\n    os.chdir('..')\n\n    if errors:\n        return (False, errors)\n\n    return (True, [])", "compilation_passed": true, "time": 0.0009698867797851562, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "errors = []\n\n    # Check if the directory exists\n    if not os.path.exists(directory):\n        error_msg = f\"Directory '{directory}' does not exist.\"\n        errors.append(error_msg)\n        return False, errors\n\n    # Check if there are any JSON files in the directory\n    json_files = glob.glob(os.path.join(directory, \"*.json\"))\n    if not json_files:\n        error_msg = f\"No JSON files found in directory: '{directory}'.\"\n        errors.append(error_msg)\n        return False, errors\n\n    # Move the JSON files to the archive directory\n    archive_path = os.path.join(directory, archive_dir)\n    os.makedirs(archive_path, exist_ok=True)  # Create the archive directory if it doesn't exist\n    for json_file in json_files:\n        filename = os.path.basename(json_file)\n        shutil.move(json_file, os.path.join(archive_path, filename))\n        # Check if the", "compilation_passed": true, "time": 0.0009272098541259766, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "error_messages = []\n    if os.path.isdir(directory):\n        for file_name in glob.glob(directory + os.sep + \"*.json\"):\n            try:\n                shutil.move(file_name, archive_dir)\n            except Exception as e:\n                error_messages.append(f\"Error moving {file_name}: {str(e)}\")\n    else:\n        error_messages.append(f\"Directory {directory} does not exist\")\n\n    return not error_messages, error_messages", "compilation_passed": true, "time": 0.0009400844573974609, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "errors = []\n    json_files = glob.glob(os.path.join(directory, \"*.json\"))\n    for file in json_files:\n        try:\n            shutil.move(file, archive_dir)\n        except Exception as e:\n            errors.append(str(e))\n    if errors:\n        return False, errors\n    else:\n        return True, []", "compilation_passed": true, "time": 0.0008521080017089844, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "try:\n        json_files = glob.glob(os.path.join(directory, '*.json'))\n        error_messages = []\n        for file in json_files:\n            file_name = os.path.basename(file)\n            new_file_path = os.path.join(archive_dir, file_name)\n            shutil.move(file, new_file_path)\n            if os.path.exists(file):\n                error_messages.append(f\"File {file} failed to move.\")\n        if error_messages:\n            return (False, error_messages)\n        return (True, [])\n    except Exception as e:\n        error_message = f\"Error occurred while archiving: {str(e)}\"\n        return (False, [error_message])", "compilation_passed": true, "time": 0.0009238719940185547, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "errors = []\n    for file in glob.glob(os.path.join(directory, \"*.json\")):\n        try:\n            shutil.move(file, os.path.join(archive_dir, os.path.basename(file)))\n        except Exception as e:\n            errors.append(f\"Error archiving {file}: {str(e)}\")\n\n    return len(errors) == 0, errors", "compilation_passed": true, "time": 0.000865936279296875, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "error_messages = []\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n\n    # Create the archive directory if it doesn't exist\n    os.makedirs(archive_dir, exist_ok=True)\n\n    # Move the JSON files to the archive directory\n    for json_file in json_files:\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        except OSError as e:\n            error_message = f\"Error occurred while archiving {json_file}: {str(e)}\"\n            error_messages.append(error_message)\n\n    if len(error_messages) > 0:\n        return (False, error_messages)\n    else:\n        return (True, [])", "compilation_passed": true, "time": 0.0009098052978515625, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "files = glob.glob(os.path.join(directory, \"*.json\"))\n    error_messages = []\n    success = True\n    for file in files:\n        try:\n            shutil.move(file, os.path.join(archive_dir, os.path.basename(file)))\n        except Exception as e:\n            success = False\n            error_messages.append(str(e))\n    return success, error_messages", "compilation_passed": true, "time": 0.0008740425109863281, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Check if the input directory exists and is readable\n    if not os.access(directory, os.R_OK):\n        return False, [f\"Directory '{directory}' is not readable.\"]\n\n    # Define a list for storing error messages\n    error_messages = []\n\n    # Define the archive directory path\n    archive_path = os.path.join(directory, archive_dir)\n\n    # Create the archive directory if it doesn't exist\n    if not os.path.exists(archive_path):\n        try:\n            os.mkdir(archive_path)\n        except OSError as e:\n            error_messages.append(f\"Failed to create archive directory: {e}\")\n\n    # Get a list of all JSON files in the input directory\n    json_files = glob.glob(os.path.join(directory, \"*.json\"))\n\n    # Iterate over the JSON files and move them to the archive directory\n    for file_path in json_files:\n        try:\n            shutil.move(file_path, archive_path)\n        except shutil.Error as", "compilation_passed": false, "time": 0.00019288063049316406, "tests_passed": false, "error": "SyntaxError"}
{"code": "error_messages = []\n\n    try:\n        if os.path.isdir(archive_dir):\n            os.mkdir(archive_dir)\n    except OSError as e:\n        error_messages.append(f\"Error: Could not create archive directory {archive_dir}\")\n        return (False, error_messages)\n\n    try:\n        for json_file in glob.iglob(os.path.join(directory, '*.json')):\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n    except OSError as e:\n        error_messages.append(f\"Error: Could not move {json_file} to {archive_dir}\")\n        return (False, error_messages)\n\n    return (True, error_messages)", "compilation_passed": true, "time": 0.0009260177612304688, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "try:\n        json_files = glob.glob(os.path.join(directory, '*.json'))\n        if not json_files:\n            return False, ['no_files']\n        if not os.path.exists(os.path.join(directory, archive_dir)):\n            os.makedirs(os.path.join(directory, archive_dir))\n        errors = []\n        for json_file in json_files:\n            try:\n                shutil.move(json_file, os.path.join(directory, archive_dir, os.path.basename(json_file)))\n            except Exception as e:\n                errors.append(f\"Error occurred while archiving '{json_file}': {str(e)}\")\n        return not errors, errors\n    except Exception as e:\n        return False, [str(e)]", "compilation_passed": true, "time": 0.0009400844573974609, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "files_list = [os.path.join(directory, file) for file in os.listdir(directory) if file.endswith('.json')]\n    errors = []\n    for file in files_list:\n        try:\n            shutil.move(file, os.path.join(archive_dir, file))\n        except Exception as e:\n            errors.append(str(e))\n    return True, errors if not errors else errors", "compilation_passed": true, "time": 0.0008800029754638672, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "errors = []\n\n    # Use glob to search for all JSON files in the given directory\n    json_files = glob.glob(f\"{directory}/*.json\")\n\n    # Check if there are any JSON files to move\n    if len(json_files) == 0:\n        errors.append(\"No JSON files found in the specified directory.\")\n        return False, errors\n\n    # Check if the archive directory exists. If not, create it.\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n\n    # Move each JSON file to the archive directory\n    for file in json_files:\n        try:\n            shutil.move(file, archive_dir)\n            print(f\"Moved {file} to {archive_dir}\")\n        except Exception as e:\n            errors.append(f\"Failed to move {file}: {str(e)}\")\n\n    if len(errors) > 0:\n        return False, errors\n    else:\n        return True, []", "compilation_passed": true, "time": 0.0009279251098632812, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "moved = []\n    errors = []\n\n    if not os.path.isdir(directory):\n        # print(f\"Invalid directory: {directory}\")\n        errors.append(f\"Invalid directory: {directory}\")\n        return False, errors\n\n    os.makedirs(archive_dir, exist_ok=True)\n\n    for json_file in glob.glob(f'{directory}/*.json'):\n        try:\n            shutil.move(json_file, archive_dir)\n            moved.append(json_file)\n            # print(f\"File {json_file} moved to {archive_dir}.\")\n        except Exception as e:\n            # print(f\"Failed to move file {json_file}: {str(e)}\")\n            errors.append(f\"Failed to move file {json_file}: {str(e)}\")\n\n    return len(errors) == 0, errors", "compilation_passed": true, "time": 0.0009000301361083984, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "success = True\n    errors = []\n    os.makedirs(archive_dir, exist_ok=True)\n    for json_file in glob.glob(f'{directory}/**/*.json', recursive=True):\n        shutil.move(json_file, archive_dir)\n        if not os.path.exists(json_file):\n            errors.append(f\"Failed to move '{json_file}'.\")\n            success = False\n    return success, errors", "compilation_passed": true, "time": 0.0008599758148193359, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "json_files = glob.glob(os.path.join(directory, '*.json'))\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    error_msgs = []\n    for file in json_files:\n        filename = os.path.basename(file)\n        new_path = os.path.join(archive_dir, filename)\n        try:\n            shutil.move(file, new_path)\n        except Exception as e:\n            error_msgs.append(str(e))\n    if error_msgs:\n        return False, error_msgs\n    else:\n        return True, []", "compilation_passed": true, "time": 0.0009648799896240234, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "json_files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n\n    for json_file in json_files:\n        file_name = os.path.basename(json_file)\n        try:\n            shutil.move(json_file, os.path.join(archive_dir, file_name))\n        except Exception as e:\n            error_messages.append(f\"Error archiving {file_name}: {str(e)}\")\n\n    return len(error_messages) == 0, error_messages", "compilation_passed": true, "time": 0.0008807182312011719, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if not os.path.isdir(directory):\n        return False, [\"Directory does not exist\"]\n\n    if not os.path.isdir(archive_dir):\n        os.mkdir(archive_dir)\n\n    files_to_move = glob.glob(os.path.join(directory, \"*.json\"))\n    errors = []\n    for file_path in files_to_move:\n        filename = os.path.basename(file_path)\n        new_file_path = os.path.join(archive_dir, filename)\n        try:\n            shutil.move(file_path, new_file_path)\n        except Exception as e:\n            errors.append(str(e))\n    return bool(errors), errors", "compilation_passed": true, "time": 0.0009288787841796875, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "files = glob.glob(os.path.join(directory, \"*.json\"))\n    errors = []\n\n    for file in files:\n        try:\n            shutil.move(file, os.path.join(archive_dir, os.path.basename(file)))\n        except Exception as e:\n            errors.append(f\"Failed to move file {file}. Error: {str(e)}\")\n\n    return len(errors) == 0, errors", "compilation_passed": true, "time": 0.0008449554443359375, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Define the function for archiving the file\n    def archive_file(file):\n        try:\n            shutil.move(os.path.join(directory, file), os.path.join(archive_dir, file))\n            return True\n        except Exception as e:\n            return False, str(e)\n\n    # Iterate over all JSON files in the directory and archive them\n    files = glob.glob(os.path.join(directory, '*.json'))\n    error_messages = []\n    for file in files:\n        result = archive_file(file)\n        if not result[0]:  # If the file failed to archive, add the error message to the list\n            error_messages.append(result[1])\n\n    # Return a boolean indicating success and a list of error messages\n    return all(result[0] for result in results), error_messages", "compilation_passed": true, "time": 0.0009222030639648438, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "errors = []\n\n    if not os.path.exists(directory):\n        os.mkdir(directory)\n\n    if not os.path.exists(archive_dir):\n        os.mkdir(archive_dir)\n\n    json_files = glob.glob(os.path.join(directory, \"*.json\"))\n\n    if not json_files:\n        errors.append(\"No JSON files found in directory: \" + directory)\n        return False, errors\n\n    for json_file in json_files:\n        basename = os.path.basename(json_file)\n        destination = os.path.join(archive_dir, basename)\n\n        try:\n            shutil.move(json_file, destination)\n        except Exception as e:\n            errors.append(\"Failed to archive: \" + json_file + \" - Error: \" + str(e))\n\n    if not errors:\n        return True, []\n    else:\n        return False, errors", "compilation_passed": true, "time": 0.0009479522705078125, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "errors = []\n    moved_files = 0\n    os.makedirs(archive_dir, exist_ok=True)\n    for file in glob.glob(os.path.join(directory, '*.json')):\n        try:\n            shutil.move(file, archive_dir)\n            moved_files += 1\n        except Exception as e:\n            errors.append(f\"Failed to move {file}: {str(e)}\")\n    if errors:\n        return False, errors\n    else:\n        return True, []", "compilation_passed": true, "time": 0.0008881092071533203, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "files = glob.glob(os.path.join(directory, '*.json'))\n    success = True\n    error_messages = []\n\n    for file in files:\n        try:\n            shutil.move(file, os.path.join(archive_dir, os.path.basename(file)))\n        except Exception as e:\n            success = False\n            error_messages.append(f\"Error occurred while archiving {file}: {str(e)}\")\n\n    return success, error_messages", "compilation_passed": true, "time": 0.000865936279296875, "tests_passed": false, "error": "FileNotFoundError"}
