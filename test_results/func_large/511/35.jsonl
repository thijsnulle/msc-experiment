{"code": "# Check if the input list is empty\n    if not data:\n        # Set all statistics to NaN in case of empty list\n        sum_value = 0\n        mean = min_value = max_value = np.nan\n    else:\n        # Use pandas DataFrame to analyze data\n        df = pd.DataFrame(data, columns=['Age', 'Salary', 'Experience'])\n\n        # Calculate statistics using numpy\n        sum_value = np.sum(df[column])\n        mean = np.mean(df[column])\n        min_value = np.min(df[column])\n        max_value = np.max(df[column])\n\n    # Create dictionary with calculated statistics\n    stats = {\n        'sum': sum_value,\n        'mean': mean,\n        'min': min_value,\n        'max': max_value\n    }\n\n    # Create pie chart using matplotlib\n    labels = df['Age']\n    colors = ['red', 'green', 'blue', 'yellow', 'orange']\n    fig, ax = plt.subplots()\n    ax.", "compilation_passed": false, "time": 0.00026917457580566406, "tests_passed": false, "error": "SyntaxError"}
{"code": "df = pd.DataFrame(data, columns=[\"Age\", \"Salary\", \"Experience\"])\n    sum_column = df[column].sum()\n    mean_column = df[column].mean()\n    min_column = df[column].min()\n    max_column = df[column].max()\n\n    # Visualize\n    ax = plt.pie(df[column], labels=df[\"Age\"])\n    plt.title(f\"{column} distribution per Age\")\n    plt.show()\n\n    # Return results\n    return {\n        \"sum\": sum_column,\n        \"mean\": mean_column,\n        \"min\": min_column,\n        \"max\": max_column,\n    }, ax", "compilation_passed": true, "time": 0.027634859085083008, "tests_passed": true, "error": null}
{"code": "column_indices = {'Age': 0, 'Salary': 1, 'Experience': 2}\n    valid_columns = ['Age', 'Salary', 'Experience']\n\n    if column not in valid_columns:\n        raise KeyError(f\"Invalid column '{column}'. Please use one of {', '.join(valid_columns)}\")\n\n    if data:\n        column_data = [row[column_indices[column]] for row in data]\n        stats = {\n            'sum': sum(column_data),\n            'mean': np.mean(column_data),\n            'min': min(column_data),\n            'max': max(column_data)\n        }\n    else:\n        stats = {\n            'sum': 0,\n            'mean': np.nan,\n            'min': np.nan,\n            'max': np.nan\n        }\n\n    age_data = [row[0] for row in data]\n    age_labels = {25: '25-34', 35: '35", "compilation_passed": false, "time": 0.00014781951904296875, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Check if the column is valid\n    if column not in ['Age', 'Salary', 'Experience']:\n        raise KeyError(\"Invalid column name. Valid columns are 'Age', 'Salary', and 'Experience'.\")\n\n    # Convert the data list to a DataFrame\n    dataframe = pd.DataFrame(data, columns=['Age', 'Salary', 'Experience'])\n\n    # If the data is empty, the sum will be 0 and mean, min, and max values will be NaN\n    if dataframe.empty:\n        stats = {'sum': 0, 'mean': np.nan, 'min': np.nan, 'max': np.nan}\n    else:\n        # Calculate statistics for the given column\n        stats = {'sum': dataframe[column].sum(),\n                 'mean': dataframe[column].mean(),\n                 'min': dataframe[column].min(),\n                 'max': dataframe[column].max()}\n\n    # Visualize the data using a pie chart\n    plt.pie(dataframe[column],", "compilation_passed": false, "time": 0.0002334117889404297, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not data:\n        raise ValueError(\"Empty data list provided.\")\n\n    if column not in ['Age', 'Salary', 'Experience']:\n        raise KeyError(\"Invalid column. Valid columns: 'Age', 'Salary', 'Experience'.\")\n\n    column_index = {\n        'Age': 0,\n        'Salary': 1,\n        'Experience': 2\n    }[column]\n\n    df = pd.DataFrame(data, columns=['Age', 'Salary', 'Experience'])\n    column_stats = df[column].describe()\n\n    # Filter the column statistics and map to the desired dictionary keys\n    stats_dict = {\n        'sum': column_stats['sum'],\n        'mean': column_stats['mean'],\n        'min': column_stats['min'],\n        'max': column_stats['max']\n    }\n\n    # Visualize the column data using a pie chart\n    labels = df['Age'].astype(str)\n    sizes = df[column]\n\n    #", "compilation_passed": true, "time": 0.002137899398803711, "tests_passed": false, "error": "KeyError"}
{"code": "# Validate column parameter\n    valid_columns = ['Age', 'Salary', 'Experience']\n    if column not in valid_columns:\n        raise KeyError(\"Invalid column name. Must be one of: 'Age', 'Salary', or 'Experience'\")\n\n    # Initialize a dictionary to hold the statistics\n    stats_dict = {'sum': None, 'mean': None, 'min': None, 'max': None}\n\n    # Check if the data list is empty\n    if not data:\n        return stats_dict\n\n    # Convert data list to pandas DataFrame\n    df = pd.DataFrame(data, columns=['Age', 'Salary', 'Experience'])\n\n    # Calculate sum, mean, min, and max for the selected column\n    stats_dict['sum'] = df[column].sum()\n    stats_dict['mean'] = df[column].mean()\n    stats_dict['min'] = df[column].min()\n    stats_dict['max'] = df[column].max()\n\n    # Plot the data with pie chart\n    labels =", "compilation_passed": false, "time": 0.00021457672119140625, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not data:\n        sum = 0\n        mean = np.nan\n        min = np.nan\n        max = np.nan\n    else:\n        df = pd.DataFrame(data, columns=['Age', 'Salary', 'Experience'])\n        sum = df[column].sum()\n        mean = df[column].mean()\n        min = df[column].min()\n        max = df[column].max()\n\n    dict = {'sum': sum, 'mean': mean, 'min': min, 'max': max}\n    fig, ax = plt.subplots()\n    ax.pie(df['Age'], labels=df['Age'], autopct='%1.1f%%')\n\n    return dict, ax", "compilation_passed": true, "time": 0.02309131622314453, "tests_passed": false, "error": "UnboundLocalError"}
{"code": "if column not in ['Age', 'Salary', 'Experience']:\n        raise KeyError(\"Column name should be either 'Age', 'Salary', or 'Experience'\")\n\n    # convert data to pandas DataFrame\n    df = pd.DataFrame(data, columns=['Age', 'Salary', 'Experience'])\n\n    if df.empty:\n        result = {'sum': 0, 'mean': np.nan, 'min': np.nan, 'max': np.nan}\n    else:\n        result = {'sum': df[column].sum(),\n                  'mean': df[column].mean(),\n                  'min': df[column].min(),\n                  'max': df[column].max()}\n\n    # Visualize the data with pie chart\n    fig, ax = plt.subplots()\n    ax.pie(df['Age'], labels=df['Age'], autopct='%1.1f%%')\n    ax.set_title(\"Age distribution of employees\")\n\n    return result, ax", "compilation_passed": true, "time": 0.033149003982543945, "tests_passed": true, "error": null}
{"code": "column_dict = {'Age': 0, 'Salary': 1, 'Experience': 2}\n    try:\n        column_index = column_dict[column]\n    except KeyError as e:\n        print(f\"Error: Invalid column {column}\")\n        raise e\n\n    # Create a DataFrame\n    df = pd.DataFrame(data, columns=column_dict.keys())\n\n    if data:\n        # Calculate sum, mean, min, and max of column\n        stats_dict = {\n            'sum': df[column].sum(),\n            'mean': df[column].mean(),\n            'min': df[column].min(),\n            'max': df[column].max()\n        }\n    else:\n        # If data is empty, sum is 0, mean, min, and max are NaN\n        stats_dict = {\n            'sum': 0,\n            'mean': np.nan,\n            'min': np.nan,\n            'max': np.nan\n        }\n\n    # Visualize the data with a pie chart\n", "compilation_passed": true, "time": 0.002582073211669922, "tests_passed": false, "error": "TypeError"}
{"code": "if not data:\n        result = {\"sum\": 0, \"mean\": np.nan, \"min\": np.nan, \"max\": np.nan}\n        df = pd.DataFrame(data, columns=[\"Age\", \"Salary\", \"Experience\"])\n        ax = df[\"Age\"].plot.pie(labels=[\"Age\", \"Salary\", \"Experience\"], autopct='%1.1f%%')\n        return result, ax\n    else:\n        df = pd.DataFrame(data, columns=[\"Age\", \"Salary\", \"Experience\"])\n        result = df[column].agg([\"sum\", \"mean\", \"min\", \"max\"]).to_dict()\n        ax = df[\"Age\"].plot.pie(labels=[\"Age\", \"Salary\", \"Experience\"], autopct='%1.1f%%')\n        plt.show()\n        return result, ax", "compilation_passed": true, "time": 0.0053331851959228516, "tests_passed": false, "error": "ValueError"}
{"code": "if column not in ['Age', 'Salary', 'Experience']:\n        raise KeyError(\"Invalid column. Valid columns are 'Age', 'Salary', and 'Experience'.\")\n    data_dict = {'Age': [], 'Salary': [], 'Experience': []}\n    for i in data:\n        data_dict['Age'].append(i[0])\n        data_dict['Salary'].append(i[1])\n        data_dict['Experience'].append(i[2])\n\n    df = pd.DataFrame(data_dict)\n    df_sum = df[column].sum()\n    df_mean = df[column].mean()\n    df_min = df[column].min()\n    df_max = df[column].max()\n\n    stats = {'sum': df_sum, 'mean': df_mean, 'min': df_min, 'max': df_max}\n    plt.pie(df[column], labels=df['Age'], autopct='%1.1f%%')\n    return stats", "compilation_passed": true, "time": 0.0069730281829833984, "tests_passed": false, "error": "ValueError"}
{"code": "if column not in ['Age', 'Salary', 'Experience']:\n        raise KeyError(f\"Invalid column: {column}\")\n    df = pd.DataFrame(data, columns=['Age', 'Salary', 'Experience'])\n    df = df.fillna(0)  # Fill missing values with 0\n    if column == 'Age':\n        # Set age column as index and group by age\n        df = df.set_index('Age')\n        grouped = df.groupby('Age')\n        # Count number of employees in each age group\n        count = grouped['Salary'].count()\n        # Filter the data by age group and calculate statistics for the other columns\n        df = df.loc[df['Age'].isin(count.index)]\n        # Calculate statistics\n        sum_val = df[column].sum()\n        mean = df[column].mean()\n        min_val = df[column].min()\n        max_val = df[column].max()\n        # Plot the age distribution using a pie chart\n        labels = count.index\n        sizes =", "compilation_passed": false, "time": 0.0002570152282714844, "tests_passed": false, "error": "SyntaxError"}
{"code": "try:\n        if column not in ['Age', 'Salary', 'Experience']:\n            raise ValueError(\"Invalid column. Please choose either 'Age', 'Salary', or 'Experience'.\")\n\n        column_indices = {'Age': 0, 'Salary': 1, 'Experience': 2}\n        index = column_indices[column]\n\n        if len(data) > 0:\n            # Convert the nested lists to a pandas DataFrame for easier analysis\n            df = pd.DataFrame(data, columns=['Age', 'Salary', 'Experience'])\n            col_values = df[column]\n\n            # Calculate statistics\n            col_stats = {\n                'sum': col_values.sum(),\n                'mean': col_values.mean(),\n                'min': col_values.min(),\n                'max': col_values.max()\n            }\n        else:\n            # If the data list is empty, the sum will be 0 and mean, min, and max values will be NaN\n            col_stats = {\n                'sum", "compilation_passed": false, "time": 9.202957153320312e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "if column == 'Age':\n        df = pd.DataFrame(data, columns=['Age', 'Salary', 'Experience'])\n        df['Age'] = pd.to_numeric(df['Age'])\n        sum_ = df['Age'].sum()\n        mean_ = df['Age'].mean()\n        min_ = df['Age'].min()\n        max_ = df['Age'].max()\n\n        # Visualize the data using a pie chart\n        labels = df['Age'].apply(str)\n        plt.pie(df['Age'], labels=labels, autopct='%1.1f%%')\n        plt.title('Age distribution')\n        ax = plt.gca()\n    elif column == 'Salary':\n        df = pd.DataFrame(data, columns=['Age', 'Salary', 'Experience'])\n        df['Salary'] = pd.to_numeric(df['Salary'])\n        sum_ = df['Salary'].sum()\n        mean_ = df['Salary'].mean()\n        min_ = df['Salary'].min()\n", "compilation_passed": true, "time": 0.0015611648559570312, "tests_passed": false, "error": "TypeError"}
{"code": "# Raise an error if the column is not valid\n    if column not in ['Age', 'Salary', 'Experience']:\n        raise KeyError(f\"Invalid column name: '{column}'. Valid names are 'Age', 'Salary', and 'Experience'.\")\n\n    # If data is empty, return 0 for sum and NaN for mean, min, and max\n    if not data:\n        return {'sum': 0, 'mean': np.nan, 'min': np.nan, 'max': np.nan}, None\n\n    # Convert the data list to a DataFrame with column names\n    df = pd.DataFrame(data, columns=['Age', 'Salary', 'Experience'])\n\n    # Calculate the sum, mean, min, and max for the given column\n    sum_value = df[column].sum()\n    mean_value = df[column].mean()\n    min_value = df[column].min()\n    max_value = df[column].max()\n\n    # Create a dictionary with the calculated statistics\n    stats_dict =", "compilation_passed": false, "time": 0.00022125244140625, "tests_passed": false, "error": "SyntaxError"}
{"code": "if column not in ['Age', 'Salary', 'Experience']:\n        raise KeyError(f\"Invalid column: {column}. Valid values are 'Age', 'Salary', and 'Experience'.\")\n\n    if data is None:\n        return {}, None\n\n    if not data:\n        stats = {'sum': 0, 'mean': np.NaN, 'min': np.NaN, 'max': np.NaN}\n        fig, ax = plt.subplots()\n        ax.pie([0], labels=[''], autopct='%1.1f%%', startangle=90)\n        ax.set_title('No data')\n        return stats, ax\n\n    df = pd.DataFrame(data, columns=['Age', 'Salary', 'Experience'])\n    df['Salary'] = df['Salary'].astype(float)\n\n    if column == 'Salary':\n        df = df[['Age', column]]\n\n    elif column == 'Age':\n        df = df[['Age']]\n\n    elif column ==", "compilation_passed": false, "time": 0.0002639293670654297, "tests_passed": false, "error": "SyntaxError"}
{"code": "if len(data) == 0:\n        # If the data list is empty, sum will be 0 and mean, min, and max values will be NaN.\n        sum_value = 0\n        mean_value = np.nan\n        min_value = np.nan\n        max_value = np.nan\n    else:\n        # Calculate the sum, mean, min, and max values of the column.\n        sum_value = np.sum(np.array(data)[:, column])\n        mean_value = np.mean(np.array(data)[:, column])\n        min_value = np.min(np.array(data)[:, column])\n        max_value = np.max(np.array(data)[:, column])\n\n    # Create a dictionary with the statistics.\n    stats = {'sum': sum_value, 'mean': mean_value, 'min': min_value, 'max': max_value}\n\n    # Create a DataFrame from the data list.\n    df = pd.DataFrame(data, columns=['Age', 'Salary', 'Experience'])\n\n", "compilation_passed": true, "time": 0.0012140274047851562, "tests_passed": false, "error": "IndexError"}
{"code": "if column not in ['Age', 'Salary', 'Experience']:\n        raise KeyError(\"Invalid column\")\n    df = pd.DataFrame(data, columns=['Age', 'Salary', 'Experience'])\n    if len(data) == 0:\n        stats = {'sum': 0, 'mean': np.nan, 'min': np.nan, 'max': np.nan}\n    else:\n        stats = {'sum': df[column].sum(), 'mean': df[column].mean(), 'min': df[column].min(), 'max': df[column].max()}\n    if column == 'Age':\n        ax = df[column].value_counts().plot(kind='pie', autopct='%1.1f%%', title='Distribution of Ages')\n    elif column == 'Salary':\n        ax = df[column].value_counts().plot(kind='pie', autopct='%1.1f%%', title='Distribution of Salaries')\n    else:\n        ax = df[column].value", "compilation_passed": true, "time": 0.008516073226928711, "tests_passed": false, "error": "TypeError"}
{"code": "if column not in {'Age', 'Salary', 'Experience'}:\n        raise KeyError(f\"Invalid column: {column}\")\n    df = pd.DataFrame(data, columns=['Age', 'Salary', 'Experience'])\n    df[column] = pd.to_numeric(df[column])\n    stats = df[column].describe().loc['sum':'max'].to_dict()\n\n    # \u7ed8\u5236\u997c\u56fe\n    labels = df['Age']\n    sizes = df[column]\n    ax = plt.subplots()[1]\n    ax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90)\n    ax.axis('equal')  # \u786e\u4fdd\u997c\u56fe\u662f\u4e00\u4e2a\u5706\u5f62\n    plt.title(f'{column} Distribution by Age')\n    plt.show()\n    return stats, ax", "compilation_passed": true, "time": 0.002282857894897461, "tests_passed": false, "error": "KeyError"}
{"code": "# Create a dictionary for each column and initialize all values to 0\n    stats = {\n        'sum': 0,\n        'mean': 0,\n        'min': 0,\n        'max': 0\n    }\n\n    # Check if the data list is empty. If so, return the initialized statistics.\n    if not data:\n        return stats\n\n    # Create a pandas DataFrame using the employee data, with column names 'Age', 'Salary', and 'Experience'.\n    df = pd.DataFrame(data, columns=['Age', 'Salary', 'Experience'])\n\n    # Get the specified column from the DataFrame.\n    col = df[column]\n\n    # Calculate the sum of the column values.\n    stats['sum'] = np.sum(col)\n\n    # Calculate the mean, minimum, and maximum values of the column.\n    stats['mean'] = np.mean(col)\n    stats['min'] = np.min(col)\n    stats['max'] = np.max(col)\n\n    # Create a pie chart visualization of the column data, using", "compilation_passed": true, "time": 0.0013141632080078125, "tests_passed": false, "error": "TypeError"}
{"code": "if column not in ['Age', 'Salary', 'Experience']:\n        raise KeyError(\"Invalid column. Please choose one of 'Age', 'Salary', 'Experience'.\")\n    # Check that the data list is not empty\n    if not data:\n        return {'sum': 0, 'mean': np.nan, 'min': np.nan, 'max': np.nan}, None\n    # Create a DataFrame from the data list\n    df = pd.DataFrame(data, columns=['Age', 'Salary', 'Experience'])\n    # Calculate sum, mean, min, and max for the specified column\n    result = {\n        'sum': df[column].sum(),\n        'mean': df[column].mean(),\n        'min': df[column].min(),\n        'max': df[column].max(),\n    }\n    # Create a pie chart for visualization\n    fig, ax = plt.subplots()\n    labels = df['Age'].astype(str).values\n    ax.pie(df[column], labels", "compilation_passed": false, "time": 0.00024008750915527344, "tests_passed": false, "error": "SyntaxError"}
{"code": "try:\n        # Define the column to analyze\n        if column == 'Age':\n            selected_column = 0\n        elif column == 'Salary':\n            selected_column = 1\n        elif column == 'Experience':\n            selected_column = 2\n        else:\n            raise KeyError(\"Invalid column. Valid values: Age, Salary, Experience\")\n\n        # Calculate statistics\n        df = pd.DataFrame(data, columns=['Age', 'Salary', 'Experience'])\n        stats = df[column].describe().loc[['sum', 'mean', 'min', 'max']]\n\n        # Visualize the data using a pie chart\n        labels = df['Age']\n        ax = plt.subplot()\n        ax.pie(df[column], labels=labels, autopct='%1.1f%%', startangle=90, counterclock=False)\n        ax.axis('equal')\n\n        # Return the stats and the pie chart axes object\n        return stats, ax\n\n    except Exception as e:\n        print(f\"Error: {", "compilation_passed": false, "time": 0.0001010894775390625, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not data:\n        # Return empty stats and empty figure if data is empty\n        return {}, plt.figure()\n\n    df = pd.DataFrame(data, columns=['Age', 'Salary', 'Experience'])\n    df = df[column]\n\n    # Calculate statistics\n    stats = {\n        'sum': df.sum(),\n        'mean': df.mean(),\n        'min': df.min(),\n        'max': df.max()\n    }\n\n    # Visualization\n    plt.pie(\n        df.value_counts().values,\n        labels=df.value_counts().index,\n        autopct='%1.1f%%',\n        startangle=90,\n        counterclock=False\n    )\n    plt.title(f'{column} Pie Chart')\n    plt.axis('equal')\n    plt.show()\n\n    return stats, plt.gcf()", "compilation_passed": true, "time": 0.020511150360107422, "tests_passed": true, "error": null}
{"code": "# If the column is Age, convert it to a list\n    if column == 'Age':\n        column_lst = [row[0] for row in data]\n    # If the column is Salary, convert it to a list\n    elif column == 'Salary':\n        column_lst = [row[1] for row in data]\n    # If the column is Experience, convert it to a list\n    elif column == 'Experience':\n        column_lst = [row[2] for row in data]\n    # If the column is not one of the valid columns, raise an error\n    else:\n        raise KeyError(\"Invalid column. Must be 'Age', 'Salary', or 'Experience'.\")\n\n    # Convert the column list to a pandas series\n    series = pd.Series(column_lst)\n    # Calculate the sum, mean, minimum, and maximum of the column\n    sum_value = series.sum()\n    mean = series.mean()\n    min_value = series.min()\n    max_value = series.max()\n    # Create a dictionary with the statistics\n    stats =", "compilation_passed": false, "time": 0.0002281665802001953, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Create a DataFrame from the data list\n    df = pd.DataFrame(data, columns=['Age', 'Salary', 'Experience'])\n\n    # Check if the column is valid\n    if column not in df.columns:\n        raise KeyError(f\"Invalid column: {column}\")\n\n    # Check if the data list is empty\n    if len(data) == 0:\n        stats = {\n            'sum': 0,\n            'mean': np.nan,\n            'min': np.nan,\n            'max': np.nan\n        }\n    else:\n        # Calculate the sum, mean, min, and max of the column\n        stats = {\n            'sum': df[column].sum(),\n            'mean': df[column].mean(),\n            'min': df[column].min(),\n            'max': df[column].max()\n        }\n\n    # Visualize the data with a pie chart\n    plt.pie(df[column], labels=df['Age'], autopct='%1.1f%%')\n    plt.", "compilation_passed": false, "time": 0.00023508071899414062, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Check if the column is valid\n    if column not in ['Age', 'Salary', 'Experience']:\n        raise KeyError('Invalid column')\n\n    # Convert data to a pandas DataFrame\n    df = pd.DataFrame(data, columns=['Age', 'Salary', 'Experience'])\n\n    # Calculate sum, mean, min, and max values for the column\n    sum_val = df[column].sum()\n    mean_val = df[column].mean()\n    min_val = df[column].min()\n    max_val = df[column].max()\n\n    # Create a dictionary with the column statistics\n    statistics = {'sum': sum_val, 'mean': mean_val, 'min': min_val, 'max': max_val}\n\n    # Create a pie chart of the Age column\n    age_counts = df['Age'].value_counts()\n    plt.pie(age_counts.values, labels=age_counts.index, autopct='%1.1f%%')\n    plt.title('Age Distribution')\n\n    # Return the", "compilation_passed": true, "time": 0.007235050201416016, "tests_passed": false, "error": "TypeError"}
{"code": "if column not in ['Age', 'Salary', 'Experience']:\n        raise KeyError(f\"Invalid column: {column}\")\n\n    df = pd.DataFrame(data, columns=['Age', 'Salary', 'Experience'])\n    stats = df[column].describe()\n    values = df[column].values\n    labels = df['Age'].values\n\n    plt.pie(values, labels=labels, autopct='%1.1f%%')\n    plt.axis('equal')\n    plt.title(f\"{column} by Age\")\n    ax = plt.gca()\n    plt.show()\n\n    return {'sum': stats['sum'], 'mean': stats['mean'], 'min': stats['min'], 'max': stats['max']}, ax", "compilation_passed": true, "time": 0.009018898010253906, "tests_passed": false, "error": "KeyError"}
{"code": "# Check if column is valid\n    if column not in {'Age', 'Salary', 'Experience'}:\n        raise KeyError(\"Invalid column. Valid options are: 'Age', 'Salary', 'Experience'\")\n\n    # Extract column data into a list\n    column_data = [row[column_indices[column]] for row in data]\n\n    # Check if column_data is empty\n    if not column_data:\n        # If the data list is empty, the sum will be 0 and mean, min, and max values will be NaN.\n        return {'sum': 0, 'mean': np.nan, 'min': np.nan, 'max': np.nan}, plt.gca()\n\n    # Calculate the sum, mean, min, and max values of the column\n    summary_statistics = {\n        'sum': np.sum(column_data),\n        'mean': np.mean(column_data),\n        'min': np.min(column_data),\n        'max': np.max(column_data)\n    }\n\n    ", "compilation_passed": true, "time": 0.0011730194091796875, "tests_passed": false, "error": "NameError"}
{"code": "if column not in ['Age', 'Salary', 'Experience']:\n        raise KeyError(f\"Invalid column name '{column}'. Valid options are 'Age', 'Salary', 'Experience'.\")\n\n    if not data:\n        sum_column = 0\n        mean_column = np.nan\n        min_column = np.nan\n        max_column = np.nan\n    else:\n        # Create a pandas dataframe from the data\n        df = pd.DataFrame(data, columns=['Age', 'Salary', 'Experience'])\n\n        # Extract the specified column from the dataframe\n        column_data = df[column]\n\n        # Calculate the sum, mean, min, and max of the specified column\n        sum_column = column_data.sum()\n        mean_column = column_data.mean()\n        min_column = column_data.min()\n        max_column = column_data.max()\n\n    # Create a dictionary with the column statistics\n    stats = {\n        'sum': sum_column,\n        'mean': mean_column", "compilation_passed": false, "time": 0.00022101402282714844, "tests_passed": false, "error": "SyntaxError"}
{"code": "columns = ['Age', 'Salary', 'Experience']\n    if column not in columns:\n        raise KeyError(\"Invalid column. Valid columns are 'Age', 'Salary', and 'Experience'.\")\n\n    df = pd.DataFrame(data, columns=columns)\n\n    column_stats = df[column].describe()[[\"sum\", \"mean\", \"min\", \"max\"]]\n    column_stats = {key: column_stats[key] for key in column_stats.index}\n\n    ax = df[column].plot(kind=\"pie\", labels=df[\"Age\"])\n\n    return column_stats, ax", "compilation_passed": true, "time": 0.002154111862182617, "tests_passed": false, "error": "KeyError"}
