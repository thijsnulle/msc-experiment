{"code": "if random_seed is not None:\n        np.random.seed(random_seed)\n        random.seed(random_seed)\n    df = pd.DataFrame({\n        'title': [f'Article {i}' for i in range(n)],\n        'title_url': [f'{domain}/Article_{i}' for i in range(n)],\n        'id': [i for i in range(n)],\n        'category': [random.choice(categories) for i in range(n)],\n        'views': [np.random.poisson(1000) for i in range(n)],\n    })\n    return df", "compilation_passed": true, "time": 0.006753206253051758, "tests_passed": true, "error": null}
{"code": "if random_seed is not None:\n        random.seed(random_seed)\n        np.random.seed(random_seed)\n    df = pd.DataFrame()\n    df['title'] = ['Article ' + str(i) for i in range(n)]\n    df['title_url'] = [domain + '/' + x.replace(' ', '_') for x in df['title']]\n    df['id'] = [i for i in range(n)]\n    df['category'] = [random.choice(categories) for _ in range(n)]\n    df['views'] = np.random.poisson(1000, n)\n    return df", "compilation_passed": true, "time": 0.008054018020629883, "tests_passed": true, "error": null}
{"code": "assert isinstance(n, int), \"n must be an integer\"\n    assert isinstance(domain, str), \"domain must be a string\"\n    assert isinstance(categories, list), \"categories must be a list\"\n    assert random_seed is None or isinstance(random_seed, int), \"random_seed must be None or an integer\"\n\n    if random_seed is not None:\n        np.random.seed(random_seed)\n\n    article_list = []\n    for i in range(n):\n        title = f\"Article {i}\"\n        title_url = f\"{domain}/{title.replace(' ', '_')}\"\n        article_id = i\n        category = np.random.choice(categories)\n        views = np.random.poisson(1000)\n        article_list.append((title, title_url, article_id, category, views))\n\n    return pd.DataFrame(article_list, columns=['title', 'title_url', 'id', 'category', 'views'])", "compilation_passed": true, "time": 0.018400907516479492, "tests_passed": true, "error": null}
{"code": "if random_seed:\n        np.random.seed(random_seed)\n        random.seed(random_seed)\n\n    articles = []\n    for i in range(n):\n        title = f\"Article {i}\"\n        title_url = f\"{domain}/{title}\"\n        views = np.random.poisson(1000)\n        category = random.choice(categories)\n        articles.append((title, title_url, i, category, views))\n\n    # Create a DataFrame from the list of articles\n    df = pd.DataFrame(articles, columns=[\"title\", \"title_url\", \"id\", \"category\", \"views\"])\n    return df", "compilation_passed": true, "time": 0.0022840499877929688, "tests_passed": true, "error": null}
{"code": "# set random seed\n    if random_seed:\n        random.seed(random_seed)\n        np.random.seed(random_seed)\n\n    # create dataframe with article information\n    articles = pd.DataFrame()\n\n    # create list of titles and URLs\n    articles['title'] = ['Article ' + str(i) for i in range(n)]\n    articles['title_url'] = ['{}/Article_{}'.format(domain, i) for i in range(n)]\n\n    # create list of views by sampling from a poisson distribution with lambda=1000\n    articles['views'] = np.random.poisson(lam=1000, size=n)\n\n    # create list of categories by randomly sampling from categories list\n    articles['category'] = [random.choice(categories) for _ in range(n)]\n\n    # create list of IDs\n    articles['id'] = list(range(n))\n\n    return articles", "compilation_passed": true, "time": 0.008015155792236328, "tests_passed": true, "error": null}
{"code": "random.seed(random_seed)\n\n    # generate the articles\n    articles = pd.DataFrame(np.array([f\"Article {i}\" for i in range(n)]).reshape(-1, 1), columns=['title'])\n\n    # add URLs and IDs\n    articles['title_url'] = articles.title.str.replace(\" \", \"_\").str.cat(f\"http://{domain}/\")\n    articles['id'] = np.arange(n)\n\n    # add categories\n    articles['category'] = random.choices(categories, k=len(articles))\n\n    # add views\n    articles['views'] = np.random.poisson(1000, size=n)\n\n    return articles", "compilation_passed": true, "time": 0.0022020339965820312, "tests_passed": false, "error": "ValueError"}
{"code": "if random_seed is not None:\n      np.random.seed(random_seed)\n      random.seed(random_seed)\n\n    articles = {}\n    for i in range(n):\n        articles[i] = {'title': 'Article ' + str(i),\n                       'title_url': f'{domain}/Article_{i}',\n                       'id': i,\n                       'category': np.random.choice(categories),\n                       'views': np.random.poisson(lam=1000, size=1)[0]\n                       }\n\n    return pd.DataFrame.from_dict(articles, orient='index')", "compilation_passed": true, "time": 0.02360987663269043, "tests_passed": true, "error": null}
{"code": "if random_seed:\n        random.seed(random_seed)\n    # Generate unique article titles and URLs with randomly chosen categories\n    articles = {\n        \"title\": [f\"Article {i}\" for i in range(n)],\n        \"title_url\": [f\"{domain}/Article_{i}\" for i in range(n)],\n        \"id\": [i for i in range(n)],\n        \"category\": [random.choice(categories) for i in range(n)],\n        \"views\": [random.randrange(1, 10000) for _ in range(n)],\n    }\n    # Convert articles dictionary to a DataFrame\n    df = pd.DataFrame(articles)\n    df[\"views\"] = np.random.poisson(lam=1000, size=n)\n    return df", "compilation_passed": true, "time": 0.009563922882080078, "tests_passed": true, "error": null}
{"code": "random.seed(random_seed)\n\n    # Define the template for article URLs\n    url_template = f\"{domain}/{{}}\"\n\n    # Initialize an empty dictionary to hold article data\n    articles = {'title': [], 'title_url': [], 'id': [], 'category': [], 'views': []}\n\n    # Iterate through the range from 0 to n-1\n    for i in range(n):\n        # Generate random values for the article fields using the given random seed\n        title = f\"Article {i}\"\n        title_url = url_template.format(title.replace(' ', '_'))\n        id_ = i\n        category = random.choice(categories)\n        views = random.randint(1000, 2000)\n\n        # Append the generated values to the articles dictionary\n        articles['title'].append(title)\n        articles['title_url'].append(title_url)\n        articles['id'].append(id_)\n        articles['category'].append(category)\n        articles['views'].append(views)\n\n    ", "compilation_passed": true, "time": 0.0014090538024902344, "tests_passed": false, "error": "TypeError"}
{"code": "# Set random seed if provided\n    if random_seed:\n        np.random.seed(random_seed)\n\n    # Generate article titles and URLs\n    titles = [\"Article \" + str(i) for i in range(n)]\n    urls = [f\"{domain}/Article_{i}\" for i in range(n)]\n\n    # Generate article IDs\n    article_ids = [i for i in range(n)]\n\n    # Sample views from poisson distribution\n    views = np.random.poisson(1000, n)\n\n    # Randomly assign categories from the given categories list\n    categories_choice = np.random.choice(categories, n)\n\n    # Create DataFrame from the lists generated above\n    df = pd.DataFrame({'title': titles, 'title_url': urls, 'id': article_ids, 'category': categories_choice, 'views': views})\n\n    return df", "compilation_passed": true, "time": 0.005363941192626953, "tests_passed": true, "error": null}
{"code": "if random_seed is not None:\n        random.seed(random_seed)\n    df = pd.DataFrame()\n    df['title'] = ['Article ' + str(i) for i in range(n)]\n    df['title_url'] = ['{}/Article_{}'.format(domain, i) for i in range(n)]\n    df['id'] = list(range(n))\n    df['category'] = [random.choice(categories) for i in range(n)]\n    df['views'] = [np.random.poisson(1000) for i in range(n)]\n    return df", "compilation_passed": true, "time": 0.011526823043823242, "tests_passed": true, "error": null}
{"code": "if random_seed:\n        np.random.seed(random_seed)\n\n    articles = []\n    for i in range(n):\n        article = dict()\n        article['title'] = f'Article {i}'\n        article['title_url'] = f'{domain}/Article_{i}'\n        article['id'] = i\n        article['category'] = random.choice(categories)\n        article['views'] = np.random.poisson(1000)\n        articles.append(article)\n    return pd.DataFrame(articles)", "compilation_passed": true, "time": 0.00773310661315918, "tests_passed": true, "error": null}
{"code": "if random_seed is not None:\n        random.seed(random_seed)\n\n    titles = [f'Article {i}' for i in range(n)]\n    urls = [f'{domain}/Article_{i}' for i in range(n)]\n    ids = [i for i in range(n)]\n    categories = random.choices(categories, k=n)\n    views = np.random.poisson(lam=1000, size=n)\n\n    df = pd.DataFrame(list(zip(titles, urls, ids, categories, views)),\n                  columns=['title', 'title_url', 'id', 'category', 'views'])\n\n    return df", "compilation_passed": true, "time": 0.010057926177978516, "tests_passed": true, "error": null}
{"code": "# set the random seed if one is given\n    if random_seed:\n        np.random.seed(random_seed)\n    else:\n        np.random.seed()\n\n    # create a list of articles with random titles, urls, ids, categories, and views\n    articles = []\n    for i in range(n):\n        title = 'Article {}'.format(i)\n        url = domain + '/Article_{}'.format(i)\n        id = i\n        category = random.choice(categories)\n        views = np.random.poisson(1000)\n        article = {'title': title, 'title_url': url, 'id': id, 'category': category, 'views': views}\n        articles.append(article)\n\n    # convert the list of articles to a pandas DataFrame\n    df = pd.DataFrame(articles)\n\n    # return the DataFrame\n    return df", "compilation_passed": true, "time": 0.008105993270874023, "tests_passed": true, "error": null}
{"code": "random.seed(random_seed)\n    np.random.seed(random_seed)\n\n    # Create empty DataFrame\n    df = pd.DataFrame()\n    df['id'] = range(n)\n\n    # Add titles and title_urls\n    df['title'] = [f'Article {i}' for i in range(n)]\n    df['title_url'] = [f'{domain}/Article_{i}' for i in range(n)]\n\n    # Add categories by randomly sampling without replacement\n    df['category'] = np.random.choice(categories, size=n, replace=True)\n\n    # Add views using a Poisson distribution\n    df['views'] = np.random.poisson(lam=1000, size=n)\n\n    return df", "compilation_passed": true, "time": 0.007317066192626953, "tests_passed": true, "error": null}
{"code": "if random_seed:\n        random.seed(random_seed)\n        np.random.seed(random_seed)\n\n    articles = []\n    for i in range(n):\n        title = f'Article {i}'\n        url = f\"{domain}/{title.replace(' ', '_')}\"\n        id = i\n        category = random.choice(categories)\n        views = np.random.poisson(1000)\n        articles.append({\"title\": title, \"title_url\": url, \"id\": id, \"category\": category, \"views\": views})\n\n    return pd.DataFrame(articles)", "compilation_passed": true, "time": 0.007591962814331055, "tests_passed": true, "error": null}
{"code": "rng = np.random.default_rng(random_seed)\n    return pd.DataFrame({\n        'title': [f\"Article {i}\" for i in range(n)],\n        'title_url': [f\"{domain}/Article_{i}\" for i in range(n)],\n        'id': range(n),\n        'category': [random.choice(categories) for _ in range(n)],\n        'views': rng.poisson(1000, n).tolist()\n    })", "compilation_passed": true, "time": 0.005951881408691406, "tests_passed": true, "error": null}
{"code": "# Set seed if provided\n    if random_seed is not None:\n        random.seed(random_seed)\n        np.random.seed(random_seed)\n\n    # Generate article titles, URLs, and IDs\n    titles = [f\"Article {i}\" for i in range(n)]\n    urls = [f\"{domain}/Article_{i}\" for i in range(n)]\n    ids = list(range(n))\n\n    # Choose a random category for each article\n    categories_list = [random.choice(categories) for _ in range(n)]\n\n    # Generate views by sampling from a poisson distribution with lambda=1000\n    views = np.random.poisson(1000, size=n).tolist()\n\n    # Create a DataFrame with the generated data\n    df = pd.DataFrame({\n        'title': titles,\n        'title_url': urls,\n        'id': ids,\n        'category': categories_list,\n        'views': views\n    })\n    return df", "compilation_passed": true, "time": 0.005903959274291992, "tests_passed": true, "error": null}
{"code": "random.seed(random_seed)\n    articles = pd.DataFrame(columns=['title', 'title_url', 'id', 'category', 'views'])\n    for i in range(n):\n        title = f\"Article {i}\"\n        title_url = f\"{domain}/Article_{i}\"\n        random.choice(categories)\n        category = random.choice(categories)\n        views = np.random.poisson(1000)\n        articles.loc[i] = [title, title_url, i, category, views]\n\n    return articles", "compilation_passed": true, "time": 0.6467478275299072, "tests_passed": true, "error": null}
{"code": "if random_seed:\n        np.random.seed(random_seed)\n    else:\n        random.seed(random_seed)\n\n    titles = [f\"Article {i}\" for i in range(n)]\n    urls = [f\"{domain}/Article_{i}\" for i in range(n)]\n    ids = [i for i in range(n)]\n    categories = [random.choice(categories) for i in range(n)]\n    views = [np.random.poisson(1000) for i in range(n)]\n\n    df = pd.DataFrame({\n        'title': titles,\n        'title_url': urls,\n        'id': ids,\n        'category': categories,\n        'views': views\n    })\n\n    return df", "compilation_passed": true, "time": 0.006967782974243164, "tests_passed": true, "error": null}
{"code": "random.seed(random_seed)\n    np.random.seed(random_seed)\n    df = pd.DataFrame({'title': [f'Article {i}' for i in range(n)],\n                       'title_url': [f'{domain}/Article_{i}' for i in range(n)],\n                       'id': range(n),\n                       'category': [random.choice(categories) for i in range(n)],\n                       'views': [np.random.poisson(1000) for i in range(n)]\n                       })\n    return df", "compilation_passed": true, "time": 0.0066449642181396484, "tests_passed": true, "error": null}
{"code": "if random_seed is not None:\n        np.random.seed(random_seed)\n    articles = []\n    for i in range(n):\n        title = \"Article \"+str(i)\n        title_url = domain + \"/\" + title\n        id = i\n        category = random.choice(categories)\n        views = np.random.poisson(1000)\n        article = {'title': title, 'title_url': title_url, 'id': id, 'category': category, 'views': views}\n        articles.append(article)\n    df = pd.DataFrame(articles)\n    return df", "compilation_passed": true, "time": 0.0019109249114990234, "tests_passed": true, "error": null}
{"code": "if random_seed:\n        np.random.seed(random_seed)\n    else:\n        random_seed = np.random.randint(0, 999999)\n\n    print('using random seed {} for sampling views and choosing categories'.format(random_seed))\n    random.seed(random_seed)\n    np.random.seed(random_seed)\n\n    articles = []\n\n    for i in range(n):\n        title = \"Article \" + str(i)\n        title_url = \"/\".join([domain, title])\n        article_id = i\n        category = random.choice(categories)\n        views = np.random.poisson(1000)\n\n        articles.append({\n            'title': title,\n            'title_url': title_url,\n            'id': article_id,\n            'category': category,\n            'views': views\n        })\n\n    return pd.DataFrame(articles)", "compilation_passed": true, "time": 0.0019130706787109375, "tests_passed": true, "error": null}
{"code": "random.seed(random_seed)\n    np.random.seed(random_seed)\n    df = pd.DataFrame({\n        'title': [f'Article {i}' for i in range(n)],\n        'title_url': [f'{domain}/Article_{i}' for i in range(n)],\n        'id': [i for i in range(n)],\n        'category': [random.choice(categories) for _ in range(n)],\n        'views': [np.random.poisson(1000) for _ in range(n)]\n    })\n    return df", "compilation_passed": true, "time": 0.00683283805847168, "tests_passed": true, "error": null}
{"code": "if random_seed is not None:\n        random.seed(random_seed)\n        np.random.seed(random_seed)\n\n    df = pd.DataFrame({\n        'title': [f\"Article {i}\" for i in range(n)],\n        'title_url': [f\"{domain}/Article_{i}\" for i in range(n)],\n        'id': [i for i in range(n)],\n        'category': np.random.choice(categories, n),\n        'views': np.random.poisson(lam=1000, size=n)\n    })\n\n    return df", "compilation_passed": true, "time": 0.005319356918334961, "tests_passed": true, "error": null}
{"code": "# Set seed if provided\n    if random_seed is not None:\n        random.seed(random_seed)\n\n    # Initialize an empty DataFrame\n    df = pd.DataFrame()\n\n    # Generate random article titles and URLs\n    titles = [f\"Article {i}\" for i in range(n)]\n    urls = [f\"{domain}/Article_{i}\" for i in range(n)]\n\n    # Assign random views\n    views = np.random.poisson(lam=1000, size=n)\n\n    # Assign random category\n    category = [random.choice(categories) for _ in range(n)]\n\n    # Create a DataFrame with the generated data\n    df = pd.DataFrame({'title': titles, 'title_url': urls, 'id': range(n), 'category': category, 'views': views})\n\n    return df", "compilation_passed": true, "time": 0.008574962615966797, "tests_passed": true, "error": null}
{"code": "if random_seed:\n        random.seed(random_seed)\n        np.random.seed(random_seed)\n\n    df = pd.DataFrame({'title': [f\"Article {i}\" for i in range(n)],\n                       'title_url': [f\"{domain}/Article_{i}\" for i in range(n)],\n                       'id': list(range(n)),\n                       'category': [random.choice(categories) for _ in range(n)],\n                       'views': [np.random.poisson(1000) for _ in range(n)]})\n    return df", "compilation_passed": true, "time": 0.006678104400634766, "tests_passed": true, "error": null}
{"code": "random.seed(random_seed)\n\n    data = []\n    for i in range(n):\n        title = f\"Article {i}\"\n        title_url = f\"{domain}/Article_{i}\"\n        category = random.choice(categories)\n        views = np.random.poisson(1000)\n        data.append([title, title_url, i, category, views])\n\n    df = pd.DataFrame(data, columns=['title', 'title_url', 'id', 'category', 'views'])\n    return df", "compilation_passed": true, "time": 0.00950312614440918, "tests_passed": true, "error": null}
{"code": "assert isinstance(n, int) and n > 0, f\"Expected `n` to be an integer > 0, got {type(n)} with value {n}\"\n    assert isinstance(domain, str), f\"Expected `domain` to be an str, got {type(domain)} with value {domain}\"\n    assert isinstance(categories, list), f\"Expected `categories` to be a list, got {type(categories)} with value {categories}\"\n    assert random_seed is None or isinstance(random_seed, int), f\"Expected `random_seed` to be an int, got {type(random_seed)} with value {random_seed}\"\n\n    # set random seed\n    if random_seed is not None:\n        random.seed(random_seed)\n\n    # generate n articles\n    titles = [f\"Article {i}\" for i in range(n)]\n    ids = [i for i in range(n)]\n    views = np.random.poisson(1000, n)\n    categories = random.choices(categories, k=n)\n\n    df = pd.DataFrame(", "compilation_passed": false, "time": 0.00028896331787109375, "tests_passed": false, "error": "SyntaxError"}
{"code": "if random_seed is not None:\n        random.seed(random_seed)\n        np.random.seed(random_seed)\n    else:\n        random_seed = random.randint(0, 1000000)\n        np.random.seed(random_seed)\n\n    articles = pd.DataFrame({'title': ['Article {}'.format(i) for i in range(n)],\n                             'title_url': ['{}/Article_{}'.format(domain, i) for i in range(n)],\n                             'id': np.arange(n),\n                             'category': [random.choice(categories) for i in range(n)],\n                             'views': np.random.poisson(lam=1000, size=n)})\n    return articles", "compilation_passed": true, "time": 0.005613088607788086, "tests_passed": true, "error": null}
