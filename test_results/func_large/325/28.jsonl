{"code": "matches = {}  # Initialize an empty dictionary to store the matches\n\n    for file_path in glob.glob(os.path.join(directory_path, '*.txt')):  # Iterate over all text files in the specified directory\n        file_name = os.path.basename(file_path)  # Get the file name without the path\n\n        try:\n            with open(file_path, 'r', encoding='utf-8') as file:  # Open the file in read mode with UTF-8 encoding\n                text = file.read()  # Read the file contents\n\n            # Extract matches from the text using the regex pattern\n            matches[file_name] = re.findall(regex_pattern, text)\n\n        except Exception as e:\n            print(f\"Error reading or processing file: {file_name}. Error: {e}\")\n\n    return matches", "compilation_passed": true, "time": 0.003286123275756836, "tests_passed": true, "error": null}
{"code": "# Check that directory_path is a valid directory\n    if not os.path.isdir(directory_path):\n        raise ValueError(f\"The provided directory path '{directory_path}' is not a valid directory.\")\n\n    # Check that regex_pattern is a valid regular expression\n    try:\n        re.compile(regex_pattern)\n    except re.error as e:\n        raise ValueError(f\"Invalid regular expression pattern: {e}\")\n\n    # Find all text files in the specified directory\n    text_files = glob.glob(os.path.join(directory_path, '*.txt'))\n\n    # Initialize a dictionary to store the extracted matches\n    matches = {}\n\n    # Iterate over each text file\n    for file in text_files:\n        # Extract the file name (without the path)\n        file_name = os.path.basename(file)\n\n        # Read the text file and find all matches using the regular expression pattern\n        with open(file, 'r', encoding='utf-8') as f:\n            # Read the entire file as a single string\n            ", "compilation_passed": false, "time": 0.0002009868621826172, "tests_passed": false, "error": "IndentationError"}
{"code": "file_matches = {}\n    for file_path in glob.glob(os.path.join(directory_path, '*.txt')):\n        file_name = Path(file_path).stem\n        with open(file_path, 'r') as file:\n            file_content = file.read()\n            file_matches[file_name] = re.findall(regex_pattern, file_content)\n    return file_matches", "compilation_passed": true, "time": 0.002207517623901367, "tests_passed": true, "error": null}
{"code": "pattern = re.compile(regex_pattern)\n    matches_dict = {}\n\n    for file_path in glob.glob(os.path.join(directory_path, '*.txt')):\n        file_name = os.path.basename(file_path)\n        with open(file_path, 'r') as file:\n            contents = file.read()\n            matches_dict[file_name] = pattern.findall(contents)\n    return matches_dict", "compilation_passed": true, "time": 0.003403902053833008, "tests_passed": true, "error": null}
{"code": "try:\n        # Compile the regex pattern\n        pattern = re.compile(regex_pattern)\n\n        # Find all text files in the directory and its subdirectories\n        text_files = glob.glob(os.path.join(directory_path, '**/*.txt'), recursive=True)\n\n        # Initialize a dictionary to store the matches\n        matches = {}\n\n        # Loop through each file and extract matches\n        for file_path in text_files:\n            file_name = os.path.basename(file_path)\n            with open(file_path, 'r') as file:\n                text = file.read()\n                found = pattern.findall(text)\n                if found:\n                    matches[file_name] = found\n        return matches\n\n    except Exception as e:\n        # Log the exception message\n        raise e", "compilation_passed": true, "time": 0.0018990039825439453, "tests_passed": true, "error": null}
{"code": "# Initialize an empty dictionary to store the matches\n    matches = {}\n\n    # Use glob to get a list of all text files in the directory\n    text_files = glob.glob(os.path.join(directory_path, '*.txt'))\n\n    # Iterate through each text file\n    for file_path in text_files:\n        # Get the file name without path using Path\n        file_name = Path(file_path).stem\n        # Initialize an empty list to store the matches for this file\n        matches[file_name] = []\n\n        # Read the file contents and split into lines\n        with open(file_path, 'r', encoding='utf-8') as file:\n            lines = file.readlines()\n\n        # Iterate through each line\n        for line in lines:\n            # Find all matches in the line\n            line_matches = re.findall(regex_pattern, line.strip())\n            # If there are any matches, add them to the list of matches for this file\n            if line_matches:\n                matches[file_name] += line_matches\n\n    return matches", "compilation_passed": true, "time": 0.0018928050994873047, "tests_passed": true, "error": null}
{"code": "matches = {}\n\n    # Iterate through the text files in the given directory\n    for file in glob.glob(os.path.join(directory_path, '*.txt')):\n        file_name = os.path.basename(file)\n        matches[file_name] = []\n\n        # Read each line from the file\n        with open(file, 'r') as f:\n            for line in f:\n                # Extract the matches from the line based on the provided regular expression pattern\n                results = re.findall(regex_pattern, line)\n\n                # Check if results are valid and add them to the dictionary\n                if results:\n                    for result in results:\n                        matches[file_name].append(result)\n\n    return matches", "compilation_passed": true, "time": 0.003271818161010742, "tests_passed": true, "error": null}
{"code": "# Get all .txt files in the directory and its subdirectories\n    files = glob.glob(f\"{directory_path}/**/*.txt\", recursive=True)\n    matches = {}\n    for file in files:\n        with open(file, \"r\") as f:\n            # Extract matches from the file\n            matches[file] = re.findall(regex_pattern, f.read())\n\n    return matches", "compilation_passed": true, "time": 0.0019140243530273438, "tests_passed": true, "error": null}
{"code": "# Initialize an empty dictionary\n    results = {}\n\n    # Convert the directory path to a Path object for ease of use\n    path = Path(directory_path)\n\n    # Find all text files in the directory\n    file_list = glob.glob(f'{path}/**/*.txt', recursive=True)\n\n    # Iterate over each file and extract matches\n    for file_path in file_list:\n        # Open each file in read mode\n        with open(file_path, 'r') as file:\n            # Extract the file name without the path\n            file_name = os.path.basename(file_path)\n            # Read the contents of the file\n            file_contents = file.read()\n            # Use the regular expression pattern to find matches in the file contents\n            matches = re.findall(regex_pattern, file_contents)\n            # Add the file name and extracted matches to the dictionary\n            results[file_name] = matches\n\n    return results", "compilation_passed": true, "time": 0.0033140182495117188, "tests_passed": true, "error": null}
{"code": "files = glob.glob(f\"{directory_path}*.txt\")\n    file_name_matches_dict = {}\n\n    for file in files:\n        file_name = os.path.basename(file)\n        with open(file, 'r') as f:\n            content = f.read()\n            matches = re.findall(regex_pattern, content)\n            file_name_matches_dict[file_name] = matches\n\n    return file_name_matches_dict", "compilation_passed": true, "time": 0.0016977787017822266, "tests_passed": true, "error": null}
{"code": "if Path(directory_path).is_dir():\n        files = glob.glob(directory_path + \"/**/*.txt\", recursive=True)\n        files_dict = {os.path.basename(file): re.findall(\n            regex_pattern, file) for file in files}\n        return files_dict\n    else:\n        return 'No directory found'", "compilation_passed": true, "time": 0.003011941909790039, "tests_passed": true, "error": null}
{"code": "if os.path.isdir(directory_path):\n        results = dict()\n        files_list = glob.glob(os.path.join(directory_path, '*.txt'))\n        for file in files_list:\n            with open(file, 'r', encoding='utf-8') as f:\n                filename = os.path.basename(file)\n                results[filename] = re.findall(regex_pattern, f.read())\n    return results", "compilation_passed": true, "time": 0.003309965133666992, "tests_passed": true, "error": null}
{"code": "# Get a list of all text files in the directory\n    text_files = glob.glob(os.path.join(directory_path, \"*.txt\"))\n\n    # Create a dictionary to store the matches for each file\n    matches = {}\n\n    # Loop over each file and extract matches using regex pattern\n    for file in text_files:\n        with open(file, \"r\", encoding='utf-8') as f:\n            # Use re.findall() to find all matches in the file\n            file_matches = re.findall(regex_pattern, f.read())\n\n            # Use Path to get the file name without path\n            file_name = Path(file).name\n\n            # Add the file name and its matches to the dictionary\n            matches[file_name] = file_matches\n\n    return matches", "compilation_passed": true, "time": 0.003328084945678711, "tests_passed": true, "error": null}
{"code": "matches = {}\n    regex_pattern = re.compile(regex_pattern)\n\n    files = glob.glob(os.path.join(directory_path, \"*.txt\"))\n    for file in files:\n        with open(file, 'r', encoding='utf-8') as f:\n            matches[os.path.basename(file)] = [m.group(1) or m.group(0) for m in regex_pattern.finditer(f.read())]\n    return matches", "compilation_passed": true, "time": 0.002904176712036133, "tests_passed": false, "error": "IndexError"}
{"code": "matches = {}  # Empty dictionary to store the matches for each file\n\n    # Use Path.glob to get a list of all text files in the directory\n    text_files = glob.glob(os.path.join(directory_path, '*.txt'))\n\n    # Iterate through the text files\n    for file in text_files:\n        file_name = os.path.basename(file)  # Get the file name without the path\n        with open(file, 'r', encoding='utf-8') as f:\n            content = f.read()\n            file_matches = re.findall(regex_pattern, content)  # Find all matches in the file\n            matches[file_name] = file_matches  # Add the matches to the dictionary with file name as the key\n\n    return matches  # Return the dictionary of matches", "compilation_passed": true, "time": 0.0033457279205322266, "tests_passed": true, "error": null}
{"code": "matches_per_file = {}\n    file_pattern = f\"{directory_path}*.txt\"\n    text_files = glob.glob(file_pattern)\n\n    for file_path in text_files:\n        file_name = os.path.basename(file_path)\n        with open(file_path, 'r', encoding='utf-8') as f:\n            content = f.read()\n            matches = re.findall(regex_pattern, content)\n            if matches:\n                matches_per_file[file_name] = matches\n\n    return matches_per_file", "compilation_passed": true, "time": 0.0017459392547607422, "tests_passed": true, "error": null}
{"code": "# Check if directory path is a string\n    if not isinstance(directory_path, str):\n        raise TypeError(\"directory_path must be a string\")\n    # Check if regex_pattern is a string\n    if not isinstance(regex_pattern, str):\n        raise TypeError(\"regex_pattern must be a string\")\n    # Check if directory path exists\n    if not os.path.exists(directory_path):\n        raise ValueError(\"directory_path must be a valid directory\")\n    # Check if directory path is a valid directory\n    if not os.path.isdir(directory_path):\n        raise ValueError(\"directory_path must be a valid directory\")\n    # Check if regex pattern is valid\n    if re.compile(regex_pattern) is None:\n        raise ValueError(\"regex_pattern must be a valid regex pattern\")\n\n    matches = {}\n    for file in glob.glob(f'{directory_path}**/*.txt', recursive=True):\n        with open(file, 'r') as f:\n            matches[os.path.basename(file)] =", "compilation_passed": false, "time": 0.00022912025451660156, "tests_passed": false, "error": "SyntaxError"}
{"code": "# create a list of text files in the directory\n    file_list = glob.glob(directory_path + '\\\\*.txt')\n\n    # create a dictionary to store the matches for each file\n    matches_dict = {}\n\n    # iterate over each file in the list\n    for file_path in file_list:\n        file_name = os.path.basename(file_path)\n\n        with open(file_path, 'r') as file:\n            # read the file contents and remove non-word characters\n            content = file.read().replace('\\n', ' ').replace('\\t', '')\n            content = re.sub(r\"[^\\w'\\s]+\", '', content)\n\n            # extract matches from the file contents\n            matches = re.findall(regex_pattern, content)\n            matches_dict[file_name] = matches\n\n    return matches_dict", "compilation_passed": true, "time": 0.0018057823181152344, "tests_passed": true, "error": null}
{"code": "matches = {}  # Empty dictionary to store matches\n\n    for file in glob.glob(os.path.join(directory_path, '*.txt')):  # Iterate through all text files in the directory\n        filename = os.path.basename(file)\n        if not filename:\n            continue  # Skip if the file name is empty\n        matches[filename] = []  # Create a list for the file's matches\n\n        # Read the file\n        with open(file, 'r') as f:\n            content = f.read()\n        matches[filename] = re.findall(regex_pattern, content)  # Extract matches for the file\n    return matches", "compilation_passed": true, "time": 0.0033249855041503906, "tests_passed": true, "error": null}
{"code": "matches = {}\n    for file_path in glob.glob(os.path.join(directory_path, \"*.txt\")):\n        with open(file_path, \"r\", encoding=\"utf-8\") as f:\n            matches[os.path.basename(file_path)] = [match for match in re.findall(regex_pattern, f.read()) if match]\n    return matches", "compilation_passed": true, "time": 0.0032930374145507812, "tests_passed": true, "error": null}
{"code": "matches = {}\n    for file_path in glob.glob(os.path.join(directory_path, '*.txt')):\n        file_name = os.path.basename(file_path)\n        with open(file_path, 'r') as file:\n            content = file.read()\n            extracted_content = re.findall(regex_pattern, content)\n            matches[file_name] = extracted_content\n    return matches", "compilation_passed": true, "time": 0.003880023956298828, "tests_passed": true, "error": null}
{"code": "# Extract matches from all text files in directory\n    matches = {}\n    for file in glob.glob(f'{directory_path}\\*.txt', recursive=True):\n        with open(file, 'r') as f:\n            file_name = os.path.basename(file) # Extract file name without path\n            matches[file_name] = re.findall(regex_pattern, f.read()) # Add matches for each file\n\n    return matches # Return the dictionary", "compilation_passed": true, "time": 0.0019941329956054688, "tests_passed": true, "error": null}
{"code": "text_files = glob.glob(f'{directory_path}\\\\**\\\\*.txt', recursive=True) # Get all .txt files in the directory.\n    text_files = [text_file for text_file in text_files if not re.search(r'\\\\__MACOSX\\\\', text_file)] # Filter out files in __MACOSX folder (MacOS specific).\n    matches = {} # Create empty dictionary to store matches.\n    for text_file in text_files: # Loop through each text file.\n        file_path = Path(text_file) # Convert file path string to Path object.\n        file_name = str(file_path.name) # Extract file name as a string.\n        with open(text_file, mode=\"r\", encoding=\"utf8\") as file: # Open each text file in read mode, specifying encoding.\n            data = file.read() # Read all file contents as a single string.\n            matches[file_name] = re.findall(regex_pattern, data) # Extract matches from file contents, and add them as a list to the dictionary.\n", "compilation_passed": true, "time": 0.001990795135498047, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(directory_path):\n        raise ValueError('The specified directory does not exist.')\n\n    matches = {}\n    for file in glob.glob(os.path.join(directory_path, '*.txt')):\n        file_path = Path(file)\n        file_name = file_path.name\n        with file_path.open(encoding='utf-8') as text_file:\n            content = text_file.read()\n            result = re.findall(pattern=regex_pattern, string=content)\n            matches[file_name] = result\n    return matches", "compilation_passed": true, "time": 0.0034508705139160156, "tests_passed": true, "error": null}
{"code": "matches = {}\n\n    # Get the absolute path of the directory\n    dir_path = os.path.abspath(directory_path)\n    print(\"Directory Path:\", dir_path)\n\n    # Search for all text files in the directory\n    for file in Path(dir_path).rglob('*.txt'):\n        print(\"File:\", file)\n\n        # Extract the file name without the path\n        file_name = os.path.basename(file)\n        print(\"File Name:\", file_name)\n\n        # Read the file contents\n        with open(file, 'r') as f:\n            file_content = f.read()\n\n        # Extract matches using regex pattern\n        file_matches = re.findall(regex_pattern, file_content)\n        matches[file_name] = file_matches\n\n    return matches", "compilation_passed": true, "time": 0.0034780502319335938, "tests_passed": true, "error": null}
{"code": "# Get all files in the directory\n    file_paths = glob.glob(directory_path + \"/*.txt\")\n    matches_dict = {}\n\n    # Iterate over each file\n    for file_path in file_paths:\n        # Open the file and extract all matches\n        with open(file_path, \"r\") as f:\n            text = f.read()\n            matches = re.findall(regex_pattern, text)\n            # Store the matches in the dictionary, keyed by the file name\n            matches_dict[os.path.basename(file_path)] = matches\n\n    return matches_dict", "compilation_passed": true, "time": 0.0031859874725341797, "tests_passed": true, "error": null}
{"code": "# Create an empty dictionary to store the matches for each file\n    matches = {}\n\n    # Iterate through all text files in the directory\n    for file_path in glob.glob(os.path.join(directory_path, \"*.txt\")):\n        with open(file_path, \"r\") as file:\n            # Use regex to find matches based on the provided pattern\n            file_matches = re.findall(regex_pattern, file.read())\n\n            # Add the matches to the dictionary with the file name as the key\n            matches[os.path.basename(file_path)] = file_matches\n\n    return matches", "compilation_passed": true, "time": 0.0032138824462890625, "tests_passed": true, "error": null}
{"code": "# Use a regular expression to extract matches from the text\n    matches = {}\n\n    for filename in glob.glob(os.path.join(directory_path, '*.txt')):\n        with open(filename, 'r') as file:\n            # Read the content of the file\n            text = file.read()\n            # Use the regex pattern to extract the desired matches from the text\n            pattern = re.compile(regex_pattern)\n            extracted_matches = pattern.findall(text)\n            # Add the matches to the dictionary\n            matches[os.path.basename(filename)] = extracted_matches\n    return matches", "compilation_passed": true, "time": 0.0032820701599121094, "tests_passed": true, "error": null}
{"code": "all_files = glob.glob(os.path.join(directory_path, '*.txt'))\n    matches = {}\n    for file_path in all_files:\n        with open(file_path, 'r') as file:\n            text = file.read()\n            matches[os.path.basename(file_path)] = re.findall(regex_pattern, text)\n    return matches", "compilation_passed": true, "time": 0.003261089324951172, "tests_passed": true, "error": null}
{"code": "file_names = [os.path.basename(file_name) for file_name in glob.glob(os.path.join(directory_path, '*.txt'))]\n    matches = {}\n    for file_name in file_names:\n        text = Path(file_name).read_text()\n        match_objects = re.finditer(regex_pattern, text, re.MULTILINE | re.DOTALL)\n        matches[file_name] = [match.group() for match in match_objects]\n    return matches", "compilation_passed": true, "time": 0.0018131732940673828, "tests_passed": false, "error": "FileNotFoundError"}
