{"code": "# Check for non-negative numbers\n    if np.any(data < 0):\n        raise ValueError(\"Input array must contain only non-negative numbers.\")\n\n    # Check for NaNs\n    if np.any(np.isnan(data)):\n        raise ValueError(\"Input array must not contain NaNs.\")\n\n    # Create a new figure and plot the cumulative probability distribution\n    fig, ax = plt.subplots()\n    sorted_data = np.sort(data)\n    cum_prob = np.arange(len(data)) / len(data)\n    ax.plot(sorted_data, cum_prob, 'o-', alpha=0.5, label='Cumulative Probability')\n\n    # Set plot title and labels\n    ax.set_title('Cumulative Probability Plot')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Cumulative Probability')\n\n    return ax", "compilation_passed": true, "time": 0.018371105194091797, "tests_passed": true, "error": null}
{"code": "if np.any(data < 0) or np.any(np.isnan(data)):\n        raise ValueError(\"The input array should contain only non-negative numbers.\")\n\n    try:\n        # Ensure the input is a NumPy array\n        data = np.array(data)\n    except ValueError:\n        raise TypeError(\"The input array should contain only numeric inputs.\")\n\n    if data.size < 2:\n        raise ValueError(\"The input array should contain at least two elements.\")\n\n    # Create a figure and axis\n    fig, ax = plt.subplots()\n\n    # Sort the data in ascending order\n    sorted_data = np.sort(data)\n\n    # Calculate the cumulative sum\n    cumulative_sum = np.cumsum(sorted_data)\n\n    # Calculate the cumulative probability\n    cumulative_prob = cumulative_sum / np.sum(sorted_data)\n\n    # Plot cumulative probabilities\n    ax.plot(np.arange(len(cumulative_prob)), cumulative_prob, marker='o', linestyle", "compilation_passed": false, "time": 0.00023674964904785156, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not np.all(np.isfinite(data)):\n        raise ValueError(\"Input data must be finite.\")\n    if np.any(data < 0):\n        raise ValueError(\"Input data must be non-negative.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input data must be numeric.\")\n\n    data = data.astype(float)\n    data.sort()\n    probabilities = np.arange(1, len(data)+1) / len(data)\n\n    fig, ax = plt.subplots()\n    ax.plot(data, probabilities, marker='o', linestyle='-')\n    ax.set_title('Cumulative Probability Plot')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Cumulative Probability')\n    return ax", "compilation_passed": true, "time": 0.032536983489990234, "tests_passed": true, "error": null}
{"code": "data = np.sort(data)\n    total_num_elements = len(data)\n\n    # Check for negative numbers and NaNs\n    if np.any(data < 0) or np.any(np.isnan(data)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n\n    # Calculate the cumulative probability\n    cumulative_probability = np.arange(1, total_num_elements + 1) / total_num_elements\n\n    # Plot the cumulative probability\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.plot(np.arange(total_num_elements), cumulative_probability, '-o')\n    ax.set_title('Cumulative Probability Plot')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Cumulative Probability')\n    ax.set_xlim([-0.05 * total_num_elements, 1.05 * total_num_elements])\n    ax.set_ylim([-0.05, 1.05", "compilation_passed": false, "time": 0.0002620220184326172, "tests_passed": false, "error": "SyntaxError"}
{"code": "if np.any(data < 0) or np.any(np.isnan(data)):\n        raise ValueError(\"The data contains negative values or NaNs.\")\n\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"The data contains non-numeric inputs.\")\n\n    fig, ax = plt.subplots()\n\n    ax.plot(\n        np.arange(len(data)),\n        np.cumsum(np.sort(data)) / np.sum(data),\n        marker=\"o\",\n        linestyle=\"-\",\n    )\n\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_xlim(-0.02 * len(data), len(data) + 0.02 * len(data))\n    ax.set_ylim(-0.02, 1.02)\n\n    return ax", "compilation_passed": true, "time": 0.06675100326538086, "tests_passed": true, "error": null}
{"code": "if np.any(data < 0):\n        raise ValueError(\"Input array must not contain negative numbers.\")\n    if np.any(np.isnan(data)):\n        raise ValueError(\"Input array must not contain NaNs.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array must contain numeric values.\")\n\n    sorted_data = np.sort(data)\n    cumulative_prob = np.arange(1, len(data) + 1) / len(data)\n\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(1, len(data) + 1), cumulative_prob, marker='o', linestyle='-')\n    ax.set_title('Cumulative Probability Plot')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Cumulative Probability')\n\n    return ax", "compilation_passed": true, "time": 0.03167390823364258, "tests_passed": true, "error": null}
{"code": "# Check the array has no negative values or NaNs.\n    if np.any(data < 0) or np.isnan(data).any():\n        raise ValueError(\"Input array should contain non-negative numbers.\")\n\n    # Check the array has no non-numeric values.\n    if not np.all([isinstance(n, (int, float)) for n in data]):\n        raise TypeError(\"Input array should contain non-negative numbers.\")\n\n    # Calculate the cumulative probability of each data element.\n    cum_prob = np.zeros(len(data))\n    for idx in range(1, len(data)):\n        cum_prob[idx] = (idx+1)/len(data)\n\n    # Plot the cumulative probability and return the plot axis.\n    ax = plt.plot(range(len(data)), cum_prob, \"o-\", label=\"Cumulative Probability\")\n    plt.title(\"Cumulative Probability Plot\")\n    plt.xlabel(\"Index\")\n    plt.ylabel(\"Cumulative Probability\")\n", "compilation_passed": true, "time": 0.0014481544494628906, "tests_passed": false, "error": "TypeError"}
{"code": "# Validate data\n    if np.any(np.isnan(data)):\n        raise ValueError(\"Input array must not contain NaN values\")\n    if np.any(data < 0):\n        raise ValueError(\"Input array must contain non-negative numbers\")\n\n    # Check if input array is of type NumPy\n    if not isinstance(data, np.ndarray):\n        raise TypeError(\"Input must be a NumPy array\")\n\n    # Sort input array in ascending order and calculate cumulative sum\n    sorted_data = np.sort(data)\n    cumulative_sum = np.cumsum(sorted_data)\n\n    # Create x-values for plotting\n    x = np.arange(len(sorted_data))\n\n    # Create plot\n    fig, ax = plt.subplots()\n    ax.plot(x, cumulative_sum / cumulative_sum[-1], 'o-', markersize=10, linewidth=2)\n\n    # Set plot title and axis labels\n    ax.set_title(\"Cumulative Probability Plot\")\n    ", "compilation_passed": true, "time": 0.01630997657775879, "tests_passed": true, "error": null}
{"code": "if np.any(data < 0) or np.any(np.isnan(data)):\n        raise ValueError(\"Input array must contain only non-negative numbers.\")\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array must be numeric.\")\n\n    probabilities = np.sort(data) / data.sum()  # cumulative sum of probabilities\n    ax = plt.plot(probabilities.cumsum(), linestyle='-', marker='o')\n    plt.title(\"Cumulative Probability Plot\")\n    plt.xlabel(\"Index\")\n    plt.ylabel(\"Cumulative Probability\")\n    return ax", "compilation_passed": true, "time": 0.015362977981567383, "tests_passed": true, "error": null}
{"code": "# Check for negative numbers or NaNs in the input array\n    if np.any(data < 0) or np.any(np.isnan(data)):\n        raise ValueError('Input array should contain non-negative numbers')\n\n    # Check for non-numeric inputs in the input array\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError('Input array should contain numeric inputs')\n\n    # Sort the array in ascending order\n    data = np.sort(data)\n\n    # Calculate the cumulative probability\n    cdf = np.cumsum(data) / np.sum(data)\n\n    # Create a new figure and axis object\n    fig, ax = plt.subplots()\n\n    # Plot the cumulative probability curve\n    ax.plot(cdf, 'o-')\n\n    # Set the plot title and labels\n    ax.set_title('Cumulative Probability Plot')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Cumulative Probability')\n\n    # Show the plot\n    plt.show()\n\n    # Return the", "compilation_passed": true, "time": 0.015558004379272461, "tests_passed": true, "error": null}
{"code": "# Check if the input data is a numpy array\n    if not isinstance(data, np.ndarray):\n        raise TypeError('Input data is not a numpy array')\n\n    # Check if the input data has only non-negative values\n    if np.any(data < 0):\n        raise ValueError('Input data contains negative values')\n\n    # Check if the input data has only numeric values\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError('Input data contains non-numeric values')\n\n    # Calculate the cumulative probability of the input data\n    cum_prob = np.cumsum(data) / np.sum(data)\n\n    # Plot the cumulative probability curve\n    ax = plt.gca()\n    ax.plot(cum_prob, linestyle='-', marker='o', markersize=3)\n    ax.set_title('Cumulative Probability Plot')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Cumulative Probability')\n\n    return ax", "compilation_passed": true, "time": 0.049137115478515625, "tests_passed": true, "error": null}
{"code": "# Check if the array contains negative or NaN values.\n    if np.any(data < 0) or np.any(np.isnan(data)):\n        raise ValueError(\"Input array must contain only non-negative numbers.\")\n    # Check if the array contains only numeric values.\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input array must contain only numeric values.\")\n\n    # Sort the array in ascending order\n    sorted_data = np.sort(data)\n\n    # Calculate the cumulative probabilities\n    cumulative_probabilities = np.arange(1, len(sorted_data) + 1) / len(sorted_data)\n\n    # Create a Matplotlib figure and axis\n    fig, ax = plt.subplots()\n\n    # Plot the cumulative probabilities\n    ax.plot(cumulative_probabilities, marker='o', linestyle='-')\n\n    # Set the plot title and axis labels\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_", "compilation_passed": true, "time": 0.01817798614501953, "tests_passed": false, "error": "AttributeError"}
{"code": "# Check if the array contains non-numeric inputs\n    if np.any(~np.isfinite(data)):\n        raise ValueError(\"The input array should only contain numeric values.\")\n\n    # Check if the array contains negative values\n    if np.any(data < 0):\n        raise ValueError(\"The input array should contain only non-negative values.\")\n\n    # Get the number of data points in the array\n    n = len(data)\n\n    # Sort the array\n    sorted_data = np.sort(data)\n\n    # Calculate the cumulative sum and normalize\n    cum_sum = np.cumsum(sorted_data)\n    cum_prob = cum_sum / cum_sum[-1]\n\n    # Create a figure and axis object\n    fig, ax = plt.subplots()\n\n    # Plot the cumulative probability\n    ax.plot(range(n), cum_prob, 'o-')\n\n    # Set plot title and axis labels\n    ax.set_title('Cumulative Probability Plot')\n    ax.set_xlabel('Index')\n    ax", "compilation_passed": true, "time": 0.015004873275756836, "tests_passed": true, "error": null}
{"code": "# Check if the input array contains negative numbers or NaNs\n    if np.any(data < 0) or np.any(np.isnan(data)):\n        raise ValueError(\"The input array should contain non-negative numbers.\")\n\n    # Sort the data in ascending order\n    sorted_data = np.sort(data)\n\n    # Calculate the cumulative sums\n    cumulative_sums = np.cumsum(sorted_data)\n\n    # Calculate cumulative probabilities\n    cumulative_probs = cumulative_sums / sum(sorted_data)\n\n    # Create a figure and axis object for the plot\n    fig, ax = plt.subplots()\n\n    # Plot the cumulative probability\n    ax.plot(range(len(cumulative_probs)), cumulative_probs, '-o', label='Cumulative Probability')\n\n    # Set plot title and labels\n    ax.set_title('Cumulative Probability Plot')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Cumulative Probability')\n\n    # Show the legend\n    ax", "compilation_passed": true, "time": 0.016531944274902344, "tests_passed": true, "error": null}
{"code": "if np.any(np.isnan(data)):\n        raise ValueError(\"The input array contains NaN values.\")\n\n    if np.any(data < 0):\n        raise ValueError(\"The input array contains negative numbers.\")\n\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"The input array contains non-numeric inputs.\")\n\n    sorted_data = np.sort(data)\n\n    # Create an array of cumulative counts\n    cumulative_counts = np.arange(1, len(sorted_data) + 1) / len(sorted_data)\n\n    plt.plot(np.arange(1, len(sorted_data) + 1), cumulative_counts, marker=\"o\", linestyle=\"-\")\n\n    plt.title(\"Cumulative Probability Plot\")\n    plt.xlabel(\"Index\")\n    plt.ylabel(\"Cumulative Probability\")\n\n    ax = plt.gca()\n    plt.show()\n    ", "compilation_passed": true, "time": 0.017354965209960938, "tests_passed": true, "error": null}
{"code": "if np.any(data < 0) or np.any(np.isnan(data)):\n        raise ValueError(\"Array contains negative numbers or NaNs.\")\n\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Array contains non-numeric inputs.\")\n\n    # Sort the array in ascending order and calculate the cumulative sum\n    sorted_data = np.sort(data)\n    cumulative_sum = np.cumsum(sorted_data)\n    total_sum = cumulative_sum[-1]\n    cumulative_probability = cumulative_sum / total_sum\n\n    # Plot the cumulative probability as a function of the data index\n    fig, ax = plt.subplots()\n    ax.plot(\n        np.arange(data.size),\n        cumulative_probability,\n        marker=\"o\",\n        linestyle=\"-\",\n    )\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(", "compilation_passed": false, "time": 0.000247955322265625, "tests_passed": false, "error": "SyntaxError"}
{"code": "if data.min() < 0 or np.isnan(data).any():\n        raise ValueError(\"Input array must contain only non-negative numbers and no NaNs.\")\n\n    data = np.sort(data)\n    cumulative_prob = np.arange(1, len(data)+1) / len(data)\n    plt.plot(cumulative_prob, 'o-')\n    plt.title('Cumulative Probability Plot')\n    plt.xlabel('Index')\n    plt.ylabel('Cumulative Probability')\n\n    return plt.gca()", "compilation_passed": true, "time": 0.03508114814758301, "tests_passed": true, "error": null}
{"code": "# Check if the input array contains any negative or NaN values.\n    if not np.isfinite(data).all() or np.any(data < 0):\n        raise ValueError(\"The input array should contain only non-negative numbers.\")\n\n    # Create a figure with a single subplot.\n    fig, ax = plt.subplots()\n\n    # Calculate the cumulative sum of the data and normalize by the sum of the data.\n    cum_prob = np.cumsum(data) / np.sum(data)\n\n    # Plot the cumulative probability as a function of the index of the data.\n    ax.plot(range(data.size), cum_prob, '-o')\n\n    # Set the plot title and axis labels.\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n\n    return ax", "compilation_passed": true, "time": 0.060192108154296875, "tests_passed": true, "error": null}
{"code": "# Validate the data\n    if np.any(data < 0):\n        raise ValueError(\"The input array must contain only non-negative numbers\")\n\n    if np.any(np.isnan(data)):\n        raise ValueError(\"The input array must not contain NaNs\")\n\n    # Plot the cumulative probability\n    ax = plt.subplot()\n    sorted_data = np.sort(data)\n    cumsum = np.cumsum(sorted_data) / np.sum(sorted_data)\n    ax.plot(cumsum, '-o')\n\n    # Set the plot labels\n    ax.set_title('Cumulative Probability Plot')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Cumulative Probability')\n\n    return ax", "compilation_passed": true, "time": 0.061421871185302734, "tests_passed": true, "error": null}
{"code": "if np.any(data < 0) or np.any(np.isnan(data)):\n        raise ValueError(\"Input array contains negative numbers or NaNs.\")\n\n    data = np.asarray(data, dtype=float)  # Ensure input is a float array\n\n    if np.any(~np.isfinite(data)):\n        raise ValueError(\"Input array contains non-finite values.\")\n\n    probabilities = np.cumsum(np.sort(data))\n    probabilities /= probabilities[-1]\n\n    fig, ax = plt.subplots()\n    ax.plot(probabilities, \"o-\")\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    ax.set_xlim(0, probabilities.size)  # Ensure the x-axis range is correct\n\n    return ax", "compilation_passed": true, "time": 0.05800199508666992, "tests_passed": true, "error": null}
{"code": "if np.any(data < 0):\n        raise ValueError('The array contains negative numbers.')\n    if np.any(np.isnan(data)):\n        raise ValueError('The array contains NaNs.')\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError('The array contains non-numeric inputs.')\n\n    data = np.sort(data)  # Sort data in ascending order\n    cumulative_probability = np.arange(len(data)) / len(data)  # Calculate cumulative probability\n\n    ax = plt.Axes(figsize=(12, 8))\n    ax.plot(np.arange(1, len(data) + 1), cumulative_probability, 'o-', label='Cumulative Probability')\n    ax.set_title('Cumulative Probability Plot')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Cumulative Probability')\n    return ax", "compilation_passed": true, "time": 0.0013649463653564453, "tests_passed": false, "error": "TypeError"}
{"code": "# Check for negative and NaN values in the input array\n    if np.any(data < 0):\n        raise ValueError(\"Input array contains negative numbers\")\n    if np.any(np.isnan(data)):\n        raise ValueError(\"Input array contains NaN values\")\n    # Sort the input array in ascending order\n    sorted_data = np.sort(data)\n    # Calculate the cumulative sum of the sorted array\n    cum_sum = np.cumsum(sorted_data)\n    # Normalize the cumulative sum by the total sum of the sorted array\n    cum_prob = cum_sum / np.sum(sorted_data)\n    # Create a Matplotlib figure and axis\n    fig, ax = plt.subplots()\n    # Plot the cumulative probability against the index values\n    ax.plot(cum_prob, '-o')\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n    return ax", "compilation_passed": true, "time": 0.06197214126586914, "tests_passed": true, "error": null}
{"code": "if np.any(data < 0) or np.any(np.isnan(data)):\n        raise ValueError(\"Input array must contain only non-negative numbers.\")\n\n    data = np.sort(data)\n    cumulative_probability = np.linspace(0, 1, len(data))\n\n    plt.plot(data, cumulative_probability, '-o')\n    plt.title('Cumulative Probability Plot')\n    plt.xlabel('Index')\n    plt.ylabel('Cumulative Probability')\n\n    return plt.gca()", "compilation_passed": true, "time": 0.01703786849975586, "tests_passed": true, "error": null}
{"code": "if np.any(data < 0):\n        raise ValueError('Input array contains negative numbers.')\n    if np.any(np.isnan(data)):\n        raise ValueError('Input array contains NaNs.')\n    if np.any(np.logical_not(np.isfinite(data))):\n        raise ValueError('Input array contains non-finite numbers.')\n    if not all(isinstance(x, (int, float)) for x in data):\n        raise TypeError('Input array contains non-numeric inputs.')\n\n    data_sorted = np.sort(data)\n    cum_prob = np.arange(len(data_sorted)) / len(data_sorted)\n\n    ax = plt.figure().add_subplot(111)\n    ax.plot(np.arange(len(data)), cum_prob, marker='o', linestyle='-')\n    ax.set_title('Cumulative Probability Plot')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Cumulative Probability')\n\n    return ax", "compilation_passed": true, "time": 0.0013649463653564453, "tests_passed": false, "error": "TypeError"}
{"code": "# Check for non-numeric values in the input data\n    if not all(np.issubdtype(data[i], np.number) for i in range(len(data))):\n        raise TypeError(\"The input array contains non-numeric values.\")\n\n    # Check for negative values in the input data\n    if not all(data >= 0):\n        raise ValueError(\"The input array contains negative values.\")\n\n    # Sort the data in ascending order\n    data = np.sort(data)\n\n    # Calculate cumulative sum of the data\n    cum_sum = np.cumsum(data)\n\n    # Calculate cumulative probability, ensuring the sum doesn't exceed 1\n    cum_prob = np.minimum(cum_sum / cum_sum[-1], 1)\n\n    # Create a new plot with title, x-axis label, and y-axis label\n    fig, ax = plt.subplots()\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cum", "compilation_passed": false, "time": 8.869171142578125e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Check if the data contains negative numbers or NaNs\n    if np.any(data < 0):\n        raise ValueError(\"The array contains negative numbers.\")\n    if np.any(np.isnan(data)):\n        raise ValueError(\"The array contains NaNs.\")\n\n    # Check if the data contains non-numeric inputs\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"The array contains non-numeric inputs.\")\n\n    # Compute the cumulative probability\n    data = np.sort(data)\n    cum_prob = np.arange(1, len(data) + 1) / len(data)\n\n    # Plot the cumulative probability\n    fig, ax = plt.subplots()\n    ax.plot(np.arange(1, len(data) + 1), cum_prob, marker='o', linestyle='-')\n    ax.set_title('Cumulative Probability Plot')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Cumulative Probability')", "compilation_passed": true, "time": 0.015037059783935547, "tests_passed": true, "error": null}
{"code": "# Ensure input is a NumPy array\n    data = np.asarray(data)\n\n    # Check if input contains negative values\n    if np.any(data < 0):\n        raise ValueError(\"Input data must be non-negative.\")\n\n    # Check if input contains NaNs\n    if np.any(np.isnan(data)):\n        raise ValueError(\"Input data must not contain NaNs.\")\n\n    # Check if input contains non-numeric elements\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError(\"Input data must contain only numeric values.\")\n\n    # Compute cumulative probability distribution\n    cumprob = np.cumsum(data) / data.size\n\n    # Plot cumulative probability\n    fig, ax = plt.subplots(figsize=(7, 5))\n    ax.plot(data, cumprob, 'o-', linewidth=1, alpha=0.6)\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_xlabel(\"Index\")\n    ax", "compilation_passed": true, "time": 0.014979124069213867, "tests_passed": true, "error": null}
{"code": "if np.any(np.isnan(data)):\n        raise ValueError(\"Input array contains NaNs.\")\n    if np.any(data < 0):\n        raise ValueError(\"Input array contains negative numbers.\")\n    if np.any(~np.isfinite(data)):\n        raise ValueError(\"Input array contains non-finite numbers.\")\n\n    sorted_data = np.sort(data)\n    cumsum_data = np.cumsum(sorted_data)\n    cumsum_data = cumsum_data / cumsum_data.max()\n\n    fig, ax = plt.subplots(figsize=(16, 8))\n    ax.plot(cumsum_data, linestyle=\"-\", marker=\"o\", color=\"b\")\n\n    ax.set_title(\"Cumulative Probability Plot\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Probability\")\n\n    return ax", "compilation_passed": true, "time": 0.06004190444946289, "tests_passed": true, "error": null}
{"code": "# Check that the input is a non-empty array of non-negative numbers\n    if not isinstance(data, np.ndarray):\n        raise TypeError('Input data must be a NumPy array')\n    if data.size == 0:\n        raise ValueError('Input data must be a non-empty array')\n    if not np.issubdtype(data.dtype, np.number):\n        raise TypeError('Input data must contain numeric values')\n    if np.any(data < 0):\n        raise ValueError('Input data must contain only non-negative numbers')\n    if np.any(np.isnan(data)):\n        raise ValueError('Input data must not contain NaNs')\n\n    # Create the plot\n    fig, ax = plt.subplots()\n    x = np.arange(1, len(data) + 1)  # x-values for each data point\n    y = np.cumsum(data) / np.sum(data)  # cumulative probabilities\n    ax.plot(x, y, marker='o', linestyle='-')  # plot cumulative probabilities\n    ax", "compilation_passed": true, "time": 0.016109943389892578, "tests_passed": true, "error": null}
{"code": "if np.any(data < 0):\n        raise ValueError('The input array contains negative values.')\n    if np.any(np.isnan(data)):\n        raise ValueError('The input array contains NaNs.')\n\n    if len(data.shape) > 1:\n        data = data.flatten()\n\n    data = data[~np.isnan(data)]\n\n    data = np.sort(data)\n    cumulative_prob = np.linspace(0, 1, len(data) + 1)[1:]\n\n    ax = plt.axes()\n    ax.plot(np.arange(1, len(data)+1), cumulative_prob, marker='o', linestyle='-', color='b')\n    ax.set_title('Cumulative Probability Plot')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Cumulative Probability')\n    ax.grid(True, which='major', linestyle='--')\n    ax.grid(True, which='minor')\n\n    return ax<|endoftext|", "compilation_passed": false, "time": 0.0003139972686767578, "tests_passed": false, "error": "SyntaxError"}
