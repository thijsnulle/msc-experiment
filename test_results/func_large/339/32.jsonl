{"code": "if not isinstance(req_data, dict):\n        raise TypeError(\"Request data must be a dictionary.\")\n\n    req_data = json.dumps(req_data, sort_keys=True, separators=(',', ':'))\n    secret_key = secret_key.encode('utf-8')\n    req_data = req_data.encode('utf-8')\n\n    hmac_signature = hmac.new(secret_key, req_data, hashlib.sha256).digest()\n    url_encoded_signature = urllib.parse.quote(hmac_signature)\n    url_encoded_signature = url_encoded_signature.replace(' ', '+')\n\n    return url_encoded_signature", "compilation_passed": true, "time": 0.001039266586303711, "tests_passed": true, "error": null}
{"code": "if not isinstance(req_data, dict):\n        raise TypeError(\"req_data should be a dict\")\n\n    req_data = json.dumps(req_data, sort_keys=True, ensure_ascii=False)\n    req_data = req_data.encode('utf-8')\n    secret_key = secret_key.encode('utf-8')\n    hmac_signature = hmac.new(secret_key, req_data, hashlib.sha256).digest()\n    signature = urllib.parse.quote(hmac_signature.decode('latin1'), safe='')\n    signature = signature.replace(' ', '+')\n    return signature", "compilation_passed": true, "time": 0.0010056495666503906, "tests_passed": true, "error": null}
{"code": "# Validate the input data types\n    if not isinstance(req_data, dict):\n        raise TypeError(\"req_data should be a dictionary.\")\n\n    # Serialize the request data to JSON\n    req_data_json = json.dumps(req_data)\n\n    # Sign the request data using HMAC SHA256\n    req_data_bytes = bytes(req_data_json, 'utf-8')\n    secret_key_bytes = bytes(secret_key, 'utf-8')\n    signature = hmac.new(secret_key_bytes, req_data_bytes, hashlib.sha256).digest()\n\n    # Encode the signature to base64\n    signature_encoded = urllib.parse.quote(signature.decode('utf-8'), safe='')\n\n    # Replace spaces with '+'\n    signature_encoded_plus = signature_encoded.replace(' ', '+')\n\n    return signature_encoded_plus", "compilation_passed": true, "time": 0.0009601116180419922, "tests_passed": false, "error": "UnicodeDecodeError"}
{"code": "# Ensure that the input is a dictionary.\n    if not isinstance(req_data, dict):\n        raise TypeError('req_data must be a dictionary')\n\n    # Convert the request data to JSON.\n    req_data = json.dumps(req_data)\n\n    # Sign the request data with the secret key.\n    hmac_signature = hmac.new(secret_key.encode(), req_data.encode(), hashlib.sha256).digest()\n\n    # URL encode the HMAC signature and replace spaces with '+'.\n    url_encoded_hmac = urllib.parse.quote(hmac_signature).replace(' ', '+')\n\n    return url_encoded_hmac", "compilation_passed": true, "time": 0.0009617805480957031, "tests_passed": true, "error": null}
{"code": "if not isinstance(req_data, dict):\n        raise TypeError(\"'req_data' must be a dictionary.\")\n    req_data = json.dumps(req_data, sort_keys=True)\n    req_data = req_data.encode('utf-8')\n    secret_key = secret_key.encode('utf-8')\n    hashed = hmac.new(secret_key, req_data, hashlib.sha256).digest()\n    hashed = urllib.parse.quote(hashed, safe='')\n    return hashed.replace(' ', '+')", "compilation_passed": true, "time": 0.0009639263153076172, "tests_passed": true, "error": null}
{"code": "if not isinstance(req_data, dict):\n        raise TypeError(\"Expected req_data to be a dictionary\")\n\n    # Serialize the data dictionary into a JSON string and encode it as bytes for HMAC signing\n    data = json.dumps(req_data).encode()\n\n    # Sign the data using HMAC SHA256 with the secret key\n    signature = hmac.new(secret_key.encode(), data, hashlib.sha256).digest()\n\n    # Encode the signature in base64 and URL encode it for safe transmission over HTTP\n    url_encoded_signature = urllib.parse.quote_plus(signature.decode('utf-8'), safe=\"\")\n\n    return url_encoded_signature", "compilation_passed": true, "time": 0.0010731220245361328, "tests_passed": false, "error": "UnicodeDecodeError"}
{"code": "if not isinstance(req_data, dict):\n        raise TypeError(\"The req_data argument must be a dictionary.\")\n\n    data_str = json.dumps(req_data)\n    sign_bytes = hmac.new(secret_key.encode(), data_str.encode(), hashlib.sha256).digest()\n    sign_str = urllib.parse.quote_plus(sign_bytes.hex())\n\n    return sign_str", "compilation_passed": true, "time": 0.0009660720825195312, "tests_passed": true, "error": null}
{"code": "if not isinstance(req_data, dict):\n        raise TypeError(\"The 'req_data' argument should be a dictionary.\")\n\n    sorted_items = sorted(req_data.items(), key=lambda item: item[0])\n\n    encoded_request = json.dumps(sorted_items).encode()\n    sign = hmac.new(secret_key.encode(), encoded_request, hashlib.sha256)\n    signature = urllib.parse.quote(sign.digest()).replace(\" \", \"+\")\n\n    return signature", "compilation_passed": true, "time": 0.0010223388671875, "tests_passed": true, "error": null}
{"code": "if not isinstance(req_data, dict):\n        raise TypeError(\"The 'req_data' argument must be a dictionary.\")\n    # Convert request data to JSON string\n    json_data = json.dumps(req_data, sort_keys=True, separators=(',', ':'))\n\n    # Calculate HMAC signature\n    hmac_sig = hmac.new(secret_key.encode('utf-8'), json_data.encode('utf-8'), hashlib.sha256).digest()\n\n    # URL encode the signature\n    encoded_sig = urllib.parse.quote(hmac_sig)\n\n    # Replace spaces with '+'\n    final_sig = encoded_sig.replace('%20', '+')\n\n    return final_sig", "compilation_passed": true, "time": 0.0009887218475341797, "tests_passed": true, "error": null}
{"code": "if not isinstance(req_data, dict):\n        raise TypeError(\"req_data must be a dictionary\")\n\n    req_data_str = json.dumps(req_data, sort_keys=True, separators=(',', ':'))\n    secret_key_bytes = secret_key.encode('utf-8')\n    hmac_obj = hmac.new(secret_key_bytes, req_data_str.encode('utf-8'), hashlib.sha256)\n    signature = hmac_obj.digest().hex()\n    quoted_signature = urllib.parse.quote(signature, safe='').replace('%20', '+')\n\n    return quoted_signature", "compilation_passed": true, "time": 0.0009720325469970703, "tests_passed": true, "error": null}
{"code": "# Validate the input data type\n    if not isinstance(req_data, dict):\n        raise TypeError(\"req_data should be a dictionary.\")\n\n    # Convert the request data to a JSON string\n    data = json.dumps(req_data)\n\n    # Calculate the HMAC signature of the request data using HMAC SHA256 and the provided secret key\n    hmac_signature = hmac.new(secret_key.encode(), data.encode(), hashlib.sha256).digest()\n\n    # URL encode the signature and replace spaces with '+'\n    url_encoded = urllib.parse.quote(hmac_signature, safe='').replace('%20', '+')\n\n    return url_encoded", "compilation_passed": true, "time": 0.0009479522705078125, "tests_passed": true, "error": null}
{"code": "req_data_str = json.dumps(req_data, ensure_ascii=False, sort_keys=True)\n    hashed = hmac.new(\n        bytes(secret_key, 'utf-8'),\n        bytes(req_data_str, 'utf-8'),\n        digestmod=hashlib.sha256\n    )\n    return urllib.parse.quote(hashed.digest()).replace('%2B', '+')", "compilation_passed": true, "time": 0.0009579658508300781, "tests_passed": true, "error": null}
{"code": "if not isinstance(req_data, dict):\n        raise TypeError('Request data should be a dictionary')\n\n    req_data_json = json.dumps(req_data, sort_keys=True)\n    req_data_bytes = bytes(req_data_json, 'utf-8')\n    secret_key_bytes = bytes(secret_key, 'utf-8')\n\n    hmac_signature = hmac.new(secret_key_bytes, req_data_bytes, hashlib.sha256).digest()\n    hmac_signature_base64 = urllib.parse.quote_plus(hmac_signature.hex())\n\n    return hmac_signature_base64", "compilation_passed": true, "time": 0.0009658336639404297, "tests_passed": true, "error": null}
{"code": "if not isinstance(req_data, dict):\n        raise TypeError(\"Invalid request data type. Expected dict.\")\n\n    # Convert the request data dictionary to a JSON-encoded string\n    data = json.dumps(req_data)\n\n    # Create a hashlib.sha256 hash object and pass the secret key as bytes\n    signing_hash = hmac.new(secret_key.encode(), digestmod=hashlib.sha256)\n\n    # Update the hash object with the data and digest (finalize) the hash\n    signing_hash.update(data.encode())\n    digest = signing_hash.digest()\n\n    # Convert the digest to a hexadecimal string and URL encode it\n    url_encoded_digest = urllib.parse.quote(digest.hex(), safe='')\n\n    # Replace spaces with '+'\n    url_encoded_digest = url_encoded_digest.replace(\"%20\", \"+\")\n\n    return url_encoded_digest", "compilation_passed": true, "time": 0.0009930133819580078, "tests_passed": true, "error": null}
{"code": "if not isinstance(req_data, dict):\n        raise TypeError('req_data must be a dictionary')\n    # Convert the request data dictionary to a JSON string\n    req_data = json.dumps(req_data)\n    # Sign the request data using HMAC SHA256 with the secret key\n    hmac_signature = hmac.new(secret_key.encode(), req_data.encode(), hashlib.sha256).digest()\n    # URL encode the signature and replace spaces with '+'\n    hmac_signature_url_encoded = urllib.parse.quote(hmac_signature, safe='').replace(' ', '+')\n    return hmac_signature_url_encoded", "compilation_passed": true, "time": 0.0009551048278808594, "tests_passed": true, "error": null}
{"code": "if not isinstance(req_data, dict):\n        raise TypeError(\"req_data must be a dictionary\")\n    json_data = json.dumps(req_data).encode(\"utf-8\")\n    hmac_digest = hmac.new(secret_key.encode(), json_data, hashlib.sha256).digest()\n    url_encoded_digest = urllib.parse.quote(hmac_digest).replace(\"+\", \"%20\")\n    return url_encoded_digest", "compilation_passed": true, "time": 0.0009348392486572266, "tests_passed": true, "error": null}
{"code": "if not isinstance(req_data, dict):\n        raise TypeError(\"req_data should be a dictionary\")\n\n    req_data = json.dumps(req_data).encode()\n    hashed = hmac.new(secret_key.encode(), req_data, hashlib.sha256).digest()\n    encoded = urllib.parse.quote_plus(hashed)\n    return encoded", "compilation_passed": true, "time": 0.0009491443634033203, "tests_passed": true, "error": null}
{"code": "# Check if req_data is a dictionary\n    if not isinstance(req_data, dict):\n        raise TypeError(\"req_data should be a dictionary.\")\n\n    # Convert req_data to JSON format\n    req_data_str = json.dumps(req_data)\n\n    # Encode the request data and secret key to bytes\n    req_data_bytes = req_data_str.encode()\n    secret_key_bytes = secret_key.encode()\n\n    # Sign the request data with HMAC SHA256 using the secret key\n    hmac_obj = hmac.new(secret_key_bytes, req_data_bytes, hashlib.sha256)\n    signature = hmac_obj.digest()\n\n    # URL encode the signature and replace spaces with '+'\n    url_encoded_signature = urllib.parse.quote_plus(signature.hex())\n\n    return url_encoded_signature", "compilation_passed": true, "time": 0.0010352134704589844, "tests_passed": true, "error": null}
{"code": "if not isinstance(req_data, dict):\n        raise TypeError(\"`req_data` must be a dictionary.\")\n    data = json.dumps(req_data, separators=(',', ':'), sort_keys=True)\n    hash_obj = hmac.new(secret_key.encode(), data.encode(), hashlib.sha256)\n    hash_result = urllib.parse.quote(hash_obj.digest()).replace(' ', '+')\n    return hash_result", "compilation_passed": true, "time": 0.0009601116180419922, "tests_passed": true, "error": null}
{"code": "if not isinstance(req_data, dict):\n        raise TypeError(\"`req_data` must be a dictionary.\")\n    signature = hmac.new(secret_key.encode('utf-8'),\n                         json.dumps(req_data, sort_keys=True).encode('utf-8'),\n                         hashlib.sha256).hexdigest()\n    return urllib.parse.quote_plus(signature)", "compilation_passed": true, "time": 0.0009617805480957031, "tests_passed": true, "error": null}
{"code": "if not isinstance(req_data, dict):\n        raise TypeError(\"`req_data` must be a dictionary\")\n\n    message = json.dumps(req_data)\n    secret = secret_key.encode()\n    hmac_signature = hmac.new(secret, message.encode(), hashlib.sha256).digest()\n    url_encoded_signature = urllib.parse.quote_plus(hmac_signature)\n    return url_encoded_signature", "compilation_passed": true, "time": 0.0009579658508300781, "tests_passed": true, "error": null}
{"code": "if not isinstance(req_data, dict):\n        raise TypeError(\"req_data must be a dictionary\")\n    json_str = json.dumps(req_data)\n    signature = hmac.new(secret_key.encode(), json_str.encode(), hashlib.sha256).digest()\n    url_encoded = urllib.parse.quote(signature).replace('+', ' ')\n    return url_encoded", "compilation_passed": true, "time": 0.0009319782257080078, "tests_passed": true, "error": null}
{"code": "if not isinstance(req_data, dict):\n        raise TypeError(\"`req_data` must be a dictionary.\")\n    # Convert the request data to a JSON string\n    req_data_json = json.dumps(req_data)\n    # Sign the request data with the secret key using HMAC SHA256\n    hmac_signature = hmac.new(\n        secret_key.encode(), req_data_json.encode(), hashlib.sha256\n    ).digest()\n    # URL encode the HMAC signature and replace spaces with '+'\n    encoded_signature = urllib.parse.quote(\n        hmac_signature, safe=''\n    ).replace(' ', '+')\n    return encoded_signature", "compilation_passed": true, "time": 0.0009491443634033203, "tests_passed": true, "error": null}
{"code": "# Validate input types\n    if not isinstance(req_data, dict):\n        raise TypeError(\"req_data must be a dictionary\")\n\n    # Sort keys in the request data\n    sorted_data = sorted(req_data.items(), key=lambda x: x[0])\n\n    # Serialize the sorted request data to a string\n    serialized_data = json.dumps(sorted_data)\n\n    # Encode the serialized request data and secret key as bytes\n    data_bytes = serialized_data.encode('utf-8')\n    key_bytes = secret_key.encode('utf-8')\n\n    # Sign the serialized request data with the secret key using HMAC SHA256\n    hmac_digest = hmac.new(key_bytes, data_bytes, hashlib.sha256).digest()\n\n    # URL encode the HMAC signature and replace spaces with '+'\n    hmac_signature = urllib.parse.quote_plus(urllib.parse.unquote(hmac_digest.hex()))\n\n    #", "compilation_passed": true, "time": 0.0009751319885253906, "tests_passed": true, "error": null}
{"code": "# Check that req_data is a dictionary\n    if not isinstance(req_data, dict):\n        raise TypeError(\"`req_data` should be a dictionary\")\n\n    # Serialize the request data\n    serialized_data = json.dumps(req_data)\n\n    # Sign the request data with a secret key using HMAC SHA256\n    hmac_signature = hmac.new(secret_key.encode(), msg=serialized_data.encode(), digestmod=hashlib.sha256).digest()\n\n    # URL encode the signature\n    encoded_signature = urllib.parse.quote_plus(hmac_signature.hex())\n\n    return encoded_signature", "compilation_passed": true, "time": 0.0009789466857910156, "tests_passed": true, "error": null}
{"code": "req_data = json.dumps(req_data)\n    hash = hmac.new(secret_key.encode('utf-8'), req_data.encode('utf-8'), hashlib.sha256)\n    return urllib.parse.quote(hash.digest(), safe='').replace(' ', '+')", "compilation_passed": true, "time": 0.0009241104125976562, "tests_passed": true, "error": null}
{"code": "if not isinstance(req_data, dict):\n        raise TypeError(\"req_data must be a dictionary\")\n\n    req_data = json.dumps(req_data, sort_keys=True)\n    hmac_digest = hmac.new(secret_key.encode('utf-8'), req_data.encode('utf-8'), hashlib.sha256).digest()\n    hmac_base64 = base64.b64encode(hmac_digest).decode('utf-8')\n    return urllib.parse.quote(hmac_base64.strip(), safe='~()*!.\\'').replace('%20', '+')", "compilation_passed": true, "time": 0.0009200572967529297, "tests_passed": false, "error": "NameError"}
{"code": "# Convert the request data to a JSON string.\n    req_data_json = json.dumps(req_data, separators=(\n        ',', ':'), sort_keys=True).encode()\n    # Compute the HMAC SHA256 signature.\n    hmac_signature = hmac.new(secret_key.encode(), req_data_json,\n                              hashlib.sha256).digest()\n    # URL encode the signature.\n    url_encoded_signature = urllib.parse.quote_plus(hmac_signature.hex())\n    return url_encoded_signature", "compilation_passed": true, "time": 0.0009307861328125, "tests_passed": true, "error": null}
{"code": "if not isinstance(req_data, dict):\n        raise TypeError('req_data should be a dictionary')\n\n    json_req_data = json.dumps(req_data, sort_keys=True, separators=(',', ':'))\n    hmac_signature = hmac.new(\n        secret_key.encode('utf-8'),\n        json_req_data.encode('utf-8'),\n        digestmod=hashlib.sha256)\n    return urllib.parse.quote(hmac_signature.digest(), safe='').replace('%20', '+')", "compilation_passed": true, "time": 0.0009648799896240234, "tests_passed": true, "error": null}
{"code": "if not isinstance(req_data, dict):\n        raise TypeError(f\"req_data must be a dictionary, not {type(req_data)}\")\n\n    req_data = json.dumps(req_data)\n\n    req_data_b = req_data.encode('utf-8')\n    secret_key_b = secret_key.encode('utf-8')\n\n    signature = hmac.new(secret_key_b, req_data_b, digestmod=hashlib.sha256).digest()\n    signature_url_encoded = urllib.parse.quote_plus(urllib.parse.quote_plus(signature.hex()))\n\n    return signature_url_encoded", "compilation_passed": true, "time": 0.0010752677917480469, "tests_passed": true, "error": null}
