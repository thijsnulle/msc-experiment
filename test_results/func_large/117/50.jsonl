{"code": "# Validation\n    if num_of_students < 1:\n        raise ValueError(\"Number of students must be a positive integer.\")\n\n    # Data generation\n    set_seed(seed)\n    name_list = name_list or ['John', 'Mike', 'Sara', 'Emma', 'Nick']\n    gender_list = gender_list or ['Male', 'Female']\n    student_names = [choice(name_list) for _ in range(num_of_students)]\n    student_ages = np.random.randint(*age_range, size=num_of_students)\n    student_genders = [choice(gender_list) for _ in range(num_of_students)]\n    student_scores = np.random.randint(*score_range, size=num_of_students)\n\n    # Creating a DataFrame\n    data = {'Name': student_names, 'Age': student_ages, 'Gender': student_genders, 'Score': student_scores}\n    return pd.DataFrame(data)", "compilation_passed": true, "time": 0.002438068389892578, "tests_passed": true, "error": null}
{"code": "# Input validation\n    if num_of_students <= 0:\n        raise ValueError(\"num_of_students must be a positive integer.\")\n\n    # Set the seed for the random number generator for reproducible data\n    set_seed(seed)\n\n    # Default values\n    name_list = name_list if name_list else ['John', 'Mike', 'Sara', 'Emma', 'Nick']\n    gender_list = gender_list if gender_list else ['Male', 'Female']\n\n    # Create a NumPy array of random names from the list\n    student_names = np.array([choice(name_list) for i in range(num_of_students)])\n\n    # Create a NumPy array of random ages from the specified range\n    student_ages = np.random.randint(low=age_range[0], high=age_range[1]+1, size=num_of_students)\n\n    # Create a NumPy array of random genders from the list\n    student_genders = np.array([choice(", "compilation_passed": false, "time": 0.0002410411834716797, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Raise an error if num_of_students is non-positive\n    if num_of_students < 0:\n        raise ValueError(\"num_of_students must be a positive integer\")\n\n    # Set the seed for reproducible results\n    set_seed(seed)\n\n    # Default name list\n    if name_list is None:\n        name_list = ['John', 'Mike', 'Sara', 'Emma', 'Nick']\n\n    # Default gender list\n    if gender_list is None:\n        gender_list = ['Male', 'Female']\n\n    # Initialize DataFrame\n    student_data = pd.DataFrame(columns=['Name', 'Age', 'Gender', 'Score'])\n\n    # Generate randomized data for each student\n    for i in range(num_of_students):\n        name = choice(name_list)\n        age = np.random.randint(age_range[0], age_range[1] + 1)\n        gender = choice(gender_list)\n        score = np.random", "compilation_passed": true, "time": 0.001348257064819336, "tests_passed": false, "error": "TypeError"}
{"code": "# Raise ValueError if num_of_students is non-positive.\n    if num_of_students < 1:\n        raise ValueError(\"Number of students must be a positive integer.\")\n\n    # Set the seed for the random number generator.\n    set_seed(seed)\n\n    # Default values for name_list, gender_list, age_range, and score_range if not provided.\n    name_list = ['John', 'Mike', 'Sara', 'Emma', 'Nick'] if name_list is None else name_list\n    gender_list = ['Male', 'Female'] if gender_list is None else gender_list\n\n    # Randomly select student names from name_list.\n    names = np.array([choice(name_list) for _ in range(num_of_students)])\n\n    # Randomly select student genders from gender_list.\n    genders = np.array([choice(gender_list) for _ in range(num_of_students)])\n\n    # Randomly generate student ages within the specified range", "compilation_passed": true, "time": 0.0009319782257080078, "tests_passed": false, "error": "TypeError"}
{"code": "if num_of_students < 1:\n        raise ValueError('num_of_students must be positive')\n\n    name_list = name_list if name_list else ['John', 'Mike', 'Sara', 'Emma', 'Nick']\n    gender_list = gender_list if gender_list else ['Male', 'Female']\n\n    set_seed(seed)\n    student_names = [choice(name_list) for _ in range(num_of_students)]\n    student_ages = np.random.randint(*age_range, size=num_of_students)\n    student_genders = [choice(gender_list) for _ in range(num_of_students)]\n    student_scores = np.random.randint(*score_range, size=num_of_students)\n\n    student_data = {\n        'Name': student_names,\n        'Age': student_ages,\n        'Gender': student_genders,\n        'Score': student_scores\n    }\n\n    return pd.DataFrame(student", "compilation_passed": false, "time": 0.0002551078796386719, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Validate input\n    if num_of_students <= 0:\n        raise ValueError(\"num_of_students must be a positive integer.\")\n\n    # Set the seed for random number generator\n    set_seed(seed)\n\n    # Default lists to use if not provided\n    default_name_list = ['John', 'Mike', 'Sara', 'Emma', 'Nick']\n    default_gender_list = ['Male', 'Female']\n\n    # Set default parameters if not provided\n    name_list = name_list or default_name_list\n    gender_list = gender_list or default_gender_list\n\n    # Create DataFrame with randomized data\n    student_data = pd.DataFrame({\n        'Name': [choice(name_list) for _ in range(num_of_students)],\n        'Age': np.random.randint(*age_range, size=num_of_students),\n        'Gender': [choice(gender_list) for _ in range(num_of_students)],\n        'Score", "compilation_passed": false, "time": 9.799003601074219e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "if num_of_students < 1:\n        raise ValueError(\"Number of students must be a positive integer\")\n\n    set_seed(seed)\n    if name_list is None:\n        name_list = ['John', 'Mike', 'Sara', 'Emma', 'Nick']\n\n    if gender_list is None:\n        gender_list = ['Male', 'Female']\n\n    # create lists with specified number of randomized values for each attribute\n    names = [choice(name_list) for _ in range(num_of_students)]\n    ages = np.random.randint(age_range[0], age_range[1], size=num_of_students)\n    genders = [choice(gender_list) for _ in range(num_of_students)]\n    scores = np.random.randint(score_range[0], score_range[1], size=num_of_students)\n\n    # create a DataFrame with the randomized data\n    data = pd.DataFrame({\n        'Name': names,", "compilation_passed": false, "time": 0.0002491474151611328, "tests_passed": false, "error": "SyntaxError"}
{"code": "if name_list is None:\n        name_list = ['John', 'Mike', 'Sara', 'Emma', 'Nick']\n\n    if gender_list is None:\n        gender_list = ['Male', 'Female']\n\n    if not isinstance(num_of_students, int) or num_of_students <= 0:\n        raise ValueError(\"num_of_students must be a positive integer\")\n\n    set_seed(seed)\n\n    names = [choice(name_list) for _ in range(num_of_students)]\n    ages = np.random.randint(age_range[0], age_range[1]+1, num_of_students)\n    genders = [choice(gender_list) for _ in range(num_of_students)]\n    scores = np.random.randint(score_range[0], score_range[1]+1, num_of_students)\n\n    return pd.DataFrame({\n        'Name': names,\n        'Age': ages,\n        'G", "compilation_passed": false, "time": 0.0001068115234375, "tests_passed": false, "error": "SyntaxError"}
{"code": "if num_of_students <= 0:\n        raise ValueError(\"The 'num_of_students' must be a positive integer.\")\n\n    # Set the seed\n    set_seed(seed)\n\n    # If name_list is not provided, default to a list of names\n    name_list = ['John', 'Mike', 'Sara', 'Emma', 'Nick'] if not name_list else name_list\n    # If gender_list is not provided, default to a list of genders\n    gender_list = ['Male', 'Female'] if not gender_list else gender_list\n\n    # Generate randomized student data\n    name = np.array([name_list[np.random.randint(len(name_list))] for _ in range(num_of_students)])\n    age = np.random.randint(age_range[0], age_range[1]+1, size=num_of_students)\n    gender = np.array([gender_list[np.random.randint(len(gender_list))] for", "compilation_passed": false, "time": 0.00021982192993164062, "tests_passed": false, "error": "SyntaxError"}
{"code": "set_seed(seed)\n    if num_of_students < 1:\n        raise ValueError(\"num_of_students must be a positive integer.\")\n    if name_list is None:\n        name_list = ['John', 'Mike', 'Sara', 'Emma', 'Nick']\n    if gender_list is None:\n        gender_list = ['Male', 'Female']\n\n    student_dict = {}\n    student_dict[\"Name\"] = [choice(name_list) for _ in range(num_of_students)]\n    student_dict[\"Age\"] = [np.random.randint(age_range[0], age_range[1]+1) for _ in range(num_of_students)]\n    student_dict[\"Gender\"] = [choice(gender_list) for _ in range(num_of_students)]\n    student_dict[\"Score\"] = [np.random.randint(score_range[0], score_range[1]+1) for _ in range(num", "compilation_passed": false, "time": 0.00025200843811035156, "tests_passed": false, "error": "SyntaxError"}
{"code": "if num_of_students < 1:\n        raise ValueError(\"Number of students must be a positive integer.\")\n\n    set_seed(seed)\n\n    name_list = name_list or [\"John\", \"Mike\", \"Sara\", \"Emma\", \"Nick\"]\n    gender_list = gender_list or [\"Male\", \"Female\"]\n\n    if len(name_list) < num_of_students:\n        name_list = name_list * (num_of_students // len(name_list) + 1)\n    if len(gender_list) < num_of_students:\n        gender_list = gender_list * (num_of_students // len(gender_list) + 1)\n\n    student_data = pd.DataFrame({\n        \"Name\": np.random.choice(name_list, num_of_students),\n        \"Age\": np.random.randint(age_range[0], age_range[1]+1, num_of_students),\n        ", "compilation_passed": false, "time": 0.00022482872009277344, "tests_passed": false, "error": "SyntaxError"}
{"code": "if num_of_students <= 0:\n        raise ValueError(\"'num_of_students' must be a positive integer.\")\n\n    set_seed(seed)\n\n    # Default name list\n    if name_list is None:\n        name_list = [\"John\", \"Mike\", \"Sara\", \"Emma\", \"Nick\"]\n\n    # Default gender list\n    if gender_list is None:\n        gender_list = [\"Male\", \"Female\"]\n\n    student_names = np.array([choice(name_list) for _ in range(num_of_students)])\n    student_genders = np.array([choice(gender_list) for _ in range(num_of_students)])\n    student_ages = np.random.randint(age_range[0], age_range[1]+1, size=num_of_students)\n    student_scores = np.random.randint(score_range[0], score_range[1]+1, size=num_of_students)", "compilation_passed": true, "time": 0.0010223388671875, "tests_passed": false, "error": "TypeError"}
{"code": "# validate num_of_students\n    if num_of_students <= 0:\n        raise ValueError(\"num_of_students must be a positive integer\")\n\n    # set_seed and validate name_list, gender_list\n    set_seed(seed)\n    name_list = name_list if name_list else ['John', 'Mike', 'Sara', 'Emma', 'Nick']\n    gender_list = gender_list if gender_list else ['Male', 'Female']\n\n    # generate random student data\n    name = [choice(name_list) for _ in range(num_of_students)]\n    age = np.random.randint(*age_range, num_of_students)\n    gender = [choice(gender_list) for _ in range(num_of_students)]\n    score = np.random.randint(*score_range, num_of_students)\n\n    # create dataframe\n    student_data = pd.DataFrame()\n    student_data['Name'] = name\n    student_data['Age", "compilation_passed": false, "time": 0.000102996826171875, "tests_passed": false, "error": "SyntaxError"}
{"code": "if num_of_students < 0:\n        raise ValueError(\"num_of_students must be positive.\")\n\n    set_seed(seed)\n\n    if name_list is None:\n        name_list = [\"John\", \"Mike\", \"Sara\", \"Emma\", \"Nick\"]\n\n    if gender_list is None:\n        gender_list = [\"Male\", \"Female\"]\n\n    names = np.random.choice(name_list, num_of_students)\n    ages = np.random.randint(*age_range, size=num_of_students)\n    genders = np.random.choice(gender_list, num_of_students)\n    scores = np.random.randint(*score_range, size=num_of_students)\n\n    student_data = {\n        \"Name\": names,\n        \"Age\": ages,\n        \"Gender\": genders,\n        \"Score\": scores,\n    }\n\n    student_data = pd.DataFrame(student_data)\n    ", "compilation_passed": true, "time": 0.0011708736419677734, "tests_passed": false, "error": "TypeError"}
{"code": "set_seed(seed)\n\n    if num_of_students <= 0:\n        raise ValueError(\"Number of students must be a positive integer.\")\n\n    student_names = np.array(name_list if name_list is not None else ['John', 'Mike', 'Sara', 'Emma', 'Nick'])\n    student_genders = np.array(gender_list if gender_list is not None else ['Male', 'Female'])\n\n    student_names = np.random.choice(student_names, num_of_students)\n    student_ages = np.random.randint(age_range[0], age_range[1] + 1, num_of_students)\n    student_genders = np.random.choice(student_genders, num_of_students)\n    student_scores = np.random.randint(score_range[0], score_range[1] + 1, num_of_students)\n\n    student_data = pd.DataFrame({'Name': student_names,\n                ", "compilation_passed": false, "time": 0.0002608299255371094, "tests_passed": false, "error": "SyntaxError"}
{"code": "if name_list is None:\n        name_list = ['John', 'Mike', 'Sara', 'Emma', 'Nick']\n    if gender_list is None:\n        gender_list = ['Male', 'Female']\n\n    try:\n        seed = int(seed)\n        if seed < 0:\n            raise ValueError(\"Seed value cannot be negative.\")\n    except ValueError:\n        raise ValueError(\"Seed value must be a positive integer.\")\n\n    if num_of_students <= 0:\n        raise ValueError(\"The number of students must be a positive integer.\")\n\n    set_seed(seed)\n\n    students = pd.DataFrame()\n    students['Name'] = [choice(name_list) for _ in range(num_of_students)]\n    students['Age'] = np.random.randint(age_range[0], age_range[1] + 1, size=num_of_students)\n    students['Gender'] = [choice(gender_list)", "compilation_passed": false, "time": 0.00026488304138183594, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Check if the provided number of students is a positive integer\n    if num_of_students < 1:\n        raise ValueError(\"Number of students must be a positive integer.\")\n\n    # Set the seed for random number generation\n    set_seed(seed)\n\n    # Assign default values to the lists of names, genders, and ranges if they are not provided\n    if name_list is None:\n        name_list = ['John', 'Mike', 'Sara', 'Emma', 'Nick']\n    if gender_list is None:\n        gender_list = ['Male', 'Female']\n    if age_range is None:\n        age_range = (15, 20)\n    if score_range is None:\n        score_range = (50, 100)\n\n    # Create the DataFrame\n    data = pd.DataFrame({\n        \"Name\": [choice(name_list) for _ in range(num_of_students)],\n        \"Age\": [choice(np.arange(*age_range)) for _ in range", "compilation_passed": false, "time": 0.0002219676971435547, "tests_passed": false, "error": "SyntaxError"}
{"code": "if num_of_students < 1:\n        raise ValueError(\"The number of students must be a positive integer.\")\n\n    set_seed(seed)\n    student_names = name_list if name_list is not None else [\n        'John', 'Mike', 'Sara', 'Emma', 'Nick']\n    student_gender = gender_list if gender_list is not None else [\n        'Male', 'Female']\n    student_ages = np.random.randint(low=age_range[0], high=age_range[1]+1, size=num_of_students)\n    student_scores = np.random.randint(\n        low=score_range[0], high=score_range[1]+1, size=num_of_students)\n    student_df = pd.DataFrame({\n        'Name': [choice(student_names) for i in range(num_of_students)],\n        'Age': student_ages,\n        'Gender': [choice(student_gender) for i in range(", "compilation_passed": false, "time": 0.000247955322265625, "tests_passed": false, "error": "SyntaxError"}
{"code": "if num_of_students <= 0:\n        raise ValueError(\"num_of_students should be positive\")\n\n    if name_list is None:\n        name_list = ['John', 'Mike', 'Sara', 'Emma', 'Nick']\n\n    if gender_list is None:\n        gender_list = ['Male', 'Female']\n\n    set_seed(seed)\n\n    data = pd.DataFrame({\n        'Name': [choice(name_list) for _ in range(num_of_students)],\n        'Age': [np.random.randint(age_range[0], age_range[1] + 1) for _ in range(num_of_students)],\n        'Gender': [choice(gender_list) for _ in range(num_of_students)],\n        'Score': [np.random.randint(score_range[0], score_range[1] + 1) for _ in range(num_of_students)]\n    })\n    return data", "compilation_passed": true, "time": 0.0025179386138916016, "tests_passed": true, "error": null}
{"code": "if name_list is None:\n        name_list = ['John', 'Mike', 'Sara', 'Emma', 'Nick']\n    if gender_list is None:\n        gender_list = ['Male', 'Female']\n\n    if not isinstance(num_of_students, int) or num_of_students < 1:\n        raise ValueError(\"Number of students must be a positive integer.\")\n\n    set_seed(seed)\n\n    data = {'Name': [choice(name_list) for _ in range(num_of_students)],\n            'Age': np.random.randint(age_range[0], age_range[1]+1, size=num_of_students),\n            'Gender': [choice(gender_list) for _ in range(num_of_students)],\n            'Score': np.random.randint(score_range[0], score_range[1]+1, size=num_of_students)}\n\n    student_df = pd.DataFrame(data)\n    return", "compilation_passed": true, "time": 0.0011589527130126953, "tests_passed": false, "error": "TypeError"}
{"code": "# Validate the number of students\n    if num_of_students <= 0:\n        raise ValueError(\"The number of students must be positive.\")\n\n    # Set the random seed\n    set_seed(seed)\n\n    # Initialize default values\n    name_list = name_list or ['John', 'Mike', 'Sara', 'Emma', 'Nick']\n    gender_list = gender_list or ['Male', 'Female']\n\n    # Randomly generate student names, ages, genders, and scores\n    names = [choice(name_list) for _ in range(num_of_students)]\n    ages = np.random.randint(age_range[0], age_range[1]+1, size=num_of_students)\n    genders = np.random.choice(gender_list, size=num_of_students)\n    scores = np.random.randint(score_range[0], score_range[1]+1, size=num_of_students)\n\n    # Create a DataFrame and return it", "compilation_passed": true, "time": 0.0010099411010742188, "tests_passed": false, "error": "TypeError"}
{"code": "set_seed(seed)\n\n    if num_of_students <= 0:\n        raise ValueError(\"Number of students must be a positive integer\")\n\n    # Initialize default parameters\n    if name_list is None:\n        name_list = ['John', 'Mike', 'Sara', 'Emma', 'Nick']\n    if gender_list is None:\n        gender_list = ['Male', 'Female']\n\n    # Generate student names, ages, genders, and scores randomly\n    names = np.array([choice(name_list) for _ in range(num_of_students)])\n    ages = np.random.randint(age_range[0], age_range[1] + 1, size=num_of_students)\n    genders = np.array([choice(gender_list) for _ in range(num_of_students)])\n    scores = np.random.randint(score_range[0], score_range[1] + 1, size=num_of_students)\n\n    # Create and", "compilation_passed": true, "time": 0.0009829998016357422, "tests_passed": false, "error": "TypeError"}
{"code": "# Check for positive integer input\n    if not isinstance(num_of_students, int) or num_of_students <= 0:\n        raise ValueError(\"'num_of_students' must be a positive integer.\")\n\n    # Set seed for reproducibility\n    set_seed(seed)\n\n    # Set default values for name_list, gender_list if not provided\n    name_list = ['John', 'Mike', 'Sara', 'Emma', 'Nick'] if name_list is None else name_list\n    gender_list = ['Male', 'Female'] if gender_list is None else gender_list\n\n    # Create randomized data for each column using the provided parameters or defaults\n    df = pd.DataFrame({\n        'Name': [choice(name_list) for _ in range(num_of_students)],\n        'Age': [np.random.randint(*age_range) for _ in range(num_of_students)],\n        'Gender': [choice(gender_list) for _ in range(num_of_stud", "compilation_passed": false, "time": 0.0002288818359375, "tests_passed": false, "error": "SyntaxError"}
{"code": "if num_of_students < 1:\n        raise ValueError('The number of students must be a positive integer')\n    seed = set_seed(seed)\n\n    if name_list is None:\n        name_list = ['John', 'Mike', 'Sara', 'Emma', 'Nick']\n\n    if gender_list is None:\n        gender_list = ['Male', 'Female']\n\n    student_data = {'Name': [choice(name_list) for _ in range(num_of_students)],\n                    'Age': np.random.randint(low=age_range[0], high=age_range[1] + 1, size=num_of_students),\n                    'Gender': [choice(gender_list) for _ in range(num_of_students)],\n                    'Score': np.random.randint(low=score_range[0], high=score_range[1] + 1, size=num_of_students),\n                    }\n\n    return pd.DataFrame", "compilation_passed": true, "time": 0.000985860824584961, "tests_passed": false, "error": "TypeError"}
{"code": "if num_of_students < 1:\n        raise ValueError(\"Number of students must be a positive integer.\")\n\n    # Seed the random number generator\n    set_seed(seed)\n\n    # Default values\n    default_name_list = ['John', 'Mike', 'Sara', 'Emma', 'Nick']\n    default_gender_list = ['Male', 'Female']\n\n    # Set the values, if None provided\n    name_list = name_list or default_name_list\n    gender_list = gender_list or default_gender_list\n\n    # Generate the data\n    names = [choice(name_list) for _ in range(num_of_students)]\n    ages = np.random.randint(age_range[0], age_range[1] + 1, size=num_of_students)\n    genders = [choice(gender_list) for _ in range(num_of_students)]\n    scores = np.random.randint(score_range[0], score_range[1] +", "compilation_passed": false, "time": 0.0002429485321044922, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Validate the number of students\n    if num_of_students < 1:\n        raise ValueError(\"The number of students should be positive\")\n\n    # Default values if no custom lists provided\n    if name_list is None:\n        name_list = ['John', 'Mike', 'Sara', 'Emma', 'Nick']\n    if gender_list is None:\n        gender_list = ['Male', 'Female']\n\n    # Set the random seed\n    set_seed(seed)\n\n    # Initialize the data lists\n    student_names = [choice(name_list) for _ in range(num_of_students)]\n    student_ages = np.random.randint(age_range[0], age_range[1] + 1, size=num_of_students)\n    student_genders = [choice(gender_list) for _ in range(num_of_students)]\n    student_scores = np.random.randint(score_range[0], score_range[1] + 1, size=num_", "compilation_passed": false, "time": 0.00023794174194335938, "tests_passed": false, "error": "SyntaxError"}
{"code": "if num_of_students <= 0:\n        raise ValueError(\"Number of students must be a positive integer.\")\n\n    set_seed(seed)\n    if name_list is None:\n        name_list = ['John', 'Mike', 'Sara', 'Emma', 'Nick']\n\n    if gender_list is None:\n        gender_list = ['Male', 'Female']\n\n    # Generate random data for each attribute using a dictionary comprehension\n    data = {\n        'Name': [choice(name_list) for _ in range(num_of_students)],\n        'Age': np.random.randint(age_range[0], age_range[1]+1, num_of_students),\n        'Gender': [choice(gender_list) for _ in range(num_of_students)],\n        'Score': np.random.randint(score_range[0], score_range[1]+1, num_of_students)\n    }\n\n    # Create a DataFrame from the dictionary\n    student", "compilation_passed": true, "time": 0.000988006591796875, "tests_passed": false, "error": "NameError"}
{"code": "# Verify num_of_students is a positive integer\n    if num_of_students <= 0:\n        raise ValueError(\"num_of_students must be a positive integer.\")\n\n    # Set the seed for the random number generator\n    set_seed(seed)\n\n    # Define the lists of names and genders if not provided\n    if not name_list:\n        name_list = [\"John\", \"Mike\", \"Sara\", \"Emma\", \"Nick\"]\n    if not gender_list:\n        gender_list = [\"Male\", \"Female\"]\n\n    # Randomly select names, genders, ages, and scores\n    names = [choice(name_list) for _ in range(num_of_students)]\n    genders = [choice(gender_list) for _ in range(num_of_students)]\n    ages = np.random.randint(*age_range, num_of_students)\n    scores = np.random.randint(*score_range, num_of_students)\n\n    #", "compilation_passed": true, "time": 0.000946044921875, "tests_passed": false, "error": "TypeError"}
{"code": "# Check for positive integer\n    if num_of_students < 0:\n        raise ValueError(\"'num_of_students' must be a positive integer.\")\n\n    # Set up random number generator with a seed\n    set_seed(seed)\n\n    # Default parameters\n    if name_list is None:\n        name_list = ['John', 'Mike', 'Sara', 'Emma', 'Nick']\n\n    if gender_list is None:\n        gender_list = ['Male', 'Female']\n\n    # Generate randomized student data as NumPy arrays\n    student_names = np.array([choice(name_list) for _ in range(num_of_students)])\n    student_ages = np.random.randint(age_range[0], age_range[1]+1, size=num_of_students)\n    student_genders = np.array([choice(gender_list) for _ in range(num_of_students)])\n    student_scores = np.random.randint(score_range[0]", "compilation_passed": false, "time": 0.00023317337036132812, "tests_passed": false, "error": "SyntaxError"}
{"code": "if num_of_students <= 0:\n        raise ValueError(\"Number of students must be positive.\")\n\n    # Ensure reproducibility of data\n    set_seed(seed)\n\n    if name_list is None:\n        name_list = ['John', 'Mike', 'Sara', 'Emma', 'Nick']\n    if gender_list is None:\n        gender_list = ['Male', 'Female']\n\n    # Generate randomized data for each student\n    names = [choice(name_list) for _ in range(num_of_students)]\n    ages = np.random.randint(age_range[0], age_range[1] + 1, size=num_of_students)\n    genders = [choice(gender_list) for _ in range(num_of_students)]\n    scores = np.random.randint(score_range[0], score_range[1] + 1, size=num_of_students)\n\n    # Create DataFrame from the generated data\n    return pd.DataFrame({", "compilation_passed": false, "time": 0.0002422332763671875, "tests_passed": false, "error": "SyntaxError"}
