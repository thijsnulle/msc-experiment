{"code": "sns.set(style=\"white\")\n    boston = pd.read_csv(data_url)\n    boston['rad_cat'] = pd.cut(boston['rad'], 5)\n    boston['chas'] = boston['chas'].replace({0:'No', 1:'Yes'})\n    boston_corr = boston.corr()\n    mask = np.zeros_like(boston_corr, dtype=np.bool)\n    mask[np.triu_indices_from(mask)] = True\n    f, ax = plt.subplots(figsize=(11, 9))\n    cmap = sns.light_palette(\"blue\", as_cmap=True)\n    sns.heatmap(boston_corr, mask=mask, vmax=.8, square=True, cmap=cmap)\n    plt.show()", "compilation_passed": true, "time": 0.6675958633422852, "tests_passed": false, "error": ""}
{"code": "np.random.seed(seed)\n    # load the dataset\n    df = pd.read_csv('housing.data', header=None,\n                     names=[\"CRIM\", \"ZN\", \"INDUS\", \"CHAS\", \"NOX\", \"RM\", \"AGE\", \"DIS\", \"RAD\",\n                            \"TAX\", \"PTRATIO\", \"B\", \"LSTAT\", \"MEDV\"])\n\n    # plot the correlation matrix using seaborn\n    try:\n        sns.set_theme(style='dark')\n        sns.set(font_scale=1.2)\n        sns.set_style(style='darkgrid')\n        # set the figure size\n        plt.rcParams['figure.figsize'] = (15, 15)\n        # set the font\n        plt.rcParams['font.family'] = 'sans-serif'\n        plt.rcParams['font.sans-serif'] = 'Arial'\n        # plot the heatmap\n        ax = sns.heat", "compilation_passed": false, "time": 0.0007300376892089844, "tests_passed": false, "error": "SyntaxError"}
{"code": "import matplotlib as mpl\n    import os\n    import pandas as pd\n    import seaborn as sns\n    import numpy as np\n    mpl.rcParams['font.family'] = 'sans-serif'\n    mpl.rcParams['font.sans-serif'] = ['Arial']\n    # Set the font\n\n    # Download and read the Boston Housing dataset\n    data = pd.read_table(data_url, sep=\"\\s+\", skiprows=22, header=None)\n    data = np.hstack([data.values[:, :13],\n                     data.values[:, 13:]])\n    data_df = pd.DataFrame(data)\n    data_df.columns = ['CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE',\n                       'DIS', 'RAD', 'TAX', 'PTRATIO', 'B', 'LSTAT', 'MEDV']\n    data_df.head()\n\n    #", "compilation_passed": true, "time": 0.6911270618438721, "tests_passed": false, "error": "ValueError"}
{"code": "data_url = \"http://lib.stat.cmu.edu/datasets/boston\"\n    df = pd.read_csv(data_url, sep=\"\\n\", header=None, skiprows=40, names=None).dropna(axis=0, how='all')\n\n    data = np.asarray(df)\n\n    with open(os.path.join(os.getcwd(), 'housing.csv'), 'wb') as file:\n        np.savetxt(file, data, delimiter=',', fmt='%s')\n\n    df = pd.read_csv(\"housing.csv\", header=None)\n    df.columns = ['CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE', 'DIS', 'RAD', 'TAX', 'PTRATIO', 'B', 'LSTAT']\n\n    sns.set_style('whitegrid')\n    sns.set_style('ticks')\n    sns", "compilation_passed": true, "time": 0.004914045333862305, "tests_passed": false, "error": "ValueError"}
{"code": "import matplotlib.pyplot as plt\n    import pandas as pd\n    import seaborn as sns\n    import numpy as np\n    import os\n\n    try:\n        # Download and process the Boston housing dataset\n        data = pd.read_csv(\n            \"boston.csv\",\n            delim_whitespace=True,\n            skiprows=3,\n            header=None,\n            names=[\n                \"CRIM\",\n                \"ZN\",\n                \"INDUS\",\n                \"CHAS\",\n                \"NOX\",\n                \"RM\",\n                \"AGE\",\n                \"DIS\",\n                \"RAD\",\n                \"TAX\",\n                \"PTRATIO\",\n                \"B\",\n                \"LSTAT\",\n                \"MEDV\",\n            ],\n        )\n\n        # Set random seed for reproducibility\n        np.random.seed(seed)\n\n        # Compute pairwise correlations\n        corr = data.corr().round(2)\n\n        # Generate the heatmap using Seaborn\n        sns.", "compilation_passed": false, "time": 0.00047469139099121094, "tests_passed": false, "error": "SyntaxError"}
{"code": "sns.set()\n    sns.set_context(\"poster\", font_scale=1.5, rc={\"grid.color\": \"#999999\"})\n    np.random.seed(seed)\n\n    raw_data = \"\"\n\n    with requests.get(data_url, stream=True) as response:\n        raw_data = response.text\n\n    data_start = raw_data.split(\"----------------------\")[1]\n    header = raw_data.split(\"\\n\")[8].strip()\n    column_names = header.split()\n    data = pd.read_csv(io.StringIO(data_start), delim_whitespace=True, names=column_names)\n\n    if len(data) < 1:\n        raise ValueError(\"The dataframe is empty.\")\n    if len(data.columns) < 2:\n        raise ValueError(\"The dataframe contains less than 2 columns.\")\n\n    # Generate the correlation heatmap using Seaborn\n    ", "compilation_passed": true, "time": 0.0029239654541015625, "tests_passed": false, "error": "NameError"}
{"code": "import matplotlib\n\n    matplotlib.style.use(\"seaborn-v0_8\")\n\n    # load the data\n    df = pd.read_csv(data_url)\n\n    # set the font\n    matplotlib.rcParams[\"font.family\"] = \"sans-serif\"\n    matplotlib.rcParams[\"font.sans-serif\"] = \"Arial\"\n\n    # draw the plot\n    ax = sns.heatmap(\n        df.corr(),\n        linewidths=0.3,\n        xticklabels=df.corr().columns,\n        yticklabels=df.corr().columns,\n    )\n\n    return ax", "compilation_passed": true, "time": 0.6738338470458984, "tests_passed": false, "error": ""}
{"code": "try:\n        # Check if the plot directory exists and create it if not\n        plot_dir = \"plots\"\n        if not os.path.exists(plot_dir):\n            os.makedirs(plot_dir)\n\n        # Read the data from the URL and clean the header\n        response = requests.get(data_url)\n        data = response.content\n\n        boston_housing_data = pd.read_csv(StringIO(data.decode('utf-8').split('\\n\\n'][1]), delimiter=r\"\\s+\", skiprows=1),\n                                          header=None,\n                                          names=[\"CRIM\", \"ZN\", \"INDUS\", \"CHAS\", \"NOX\", \"RM\", \"AGE\", \"DIS\", \"RAD\", \"TAX\",\n                                                 \"PTRATIO\", \"B\", \"LSTAT\", \"MEDV\"])\n\n        # Create a heatmap of the correlation matrix using seaborn\n        corr = boston_housing_data.corr", "compilation_passed": false, "time": 0.00025391578674316406, "tests_passed": false, "error": "SyntaxError"}
{"code": "import matplotlib.pyplot as plt\n    import pandas as pd\n    import seaborn as sns\n    import numpy as np\n    import os\n\n    # get the dataset\n    with os.popen(\"wget -O data.txt 'http://lib.stat.cmu.edu/datasets/boston'\") as file:\n        _ = file.read()\n\n    data = pd.read_csv(\"data.txt\", sep=\",\", header=0, skiprows=3)\n\n    # delete the downloaded file\n    os.remove(\"data.txt\")\n\n    # generate the plot\n    ax = sns.heatmap(data.corr())\n\n    # return the Axes object\n    return ax", "compilation_passed": true, "time": 0.10331177711486816, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Get the data from the url.\n    raw_data = urllib.request.urlopen(data_url).read()\n    start = raw_data.find(b\"Table 1.\") + 1\n    stop = raw_data.find(b\"H3.\") - 2\n    boston = np.asarray(\n        pd.read_csv(io.StringIO(raw_data[start:stop].decode(\"utf-8\")))\n    )\n    # Check for errors.\n    if boston is None:\n        raise ValueError(\"Error: Could not get the data.\")\n    # Get the correlation heatmap of the Boston Housing dataset using Seaborn.\n    sns.set_theme(style=\"white\")\n    mask = np.triu(np.ones_like(boston, dtype=bool))\n    heatmap = sns.heatmap(boston, mask=mask, cmap=\"coolwarm\")\n    # Check for errors.\n    if heatmap is None:\n        raise ValueError(\"Error: Could not generate the heat", "compilation_passed": false, "time": 0.00017404556274414062, "tests_passed": false, "error": "SyntaxError"}
{"code": "data = pd.read_table(data_url, sep=\",\", header=None,skiprows=2)\n\n    data.columns = [\n        \"CRIM\",\n        \"ZN\",\n        \"INDUS\",\n        \"CHAS\",\n        \"NOX\",\n        \"RM\",\n        \"AGE\",\n        \"DIS\",\n        \"RAD\",\n        \"TAX\",\n        \"PTRATIO\",\n        \"B\",\n        \"LSTAT\",\n        \"MEDV\",\n    ]\n\n    np.random.seed(seed)\n\n    ax = sns.heatmap(data.corr(),annot=True)\n    try:\n        ax.set_title(\"Heatmap of the Boston Housing Dataset\",fontsize=18)\n        ax.set_xticklabels(ax.get_xticklabels(),fontsize=18)\n        ax.set_yticklabels(ax.get_yticklabels(),fontsize=18)\n    except Exception as e:\n        print(", "compilation_passed": false, "time": 0.0002818107604980469, "tests_passed": false, "error": "SyntaxError"}
{"code": "sns.set_style(\"white\")\n    data = pd.read_csv(\"Housing.csv\")\n    plt.rcParams[\"font.family\"] = \"sans-serif\"\n    plt.rcParams[\"font.sans-serif\"] = [\"Arial\"]\n    corr_matrix = data.corr().round(2)\n    mask = np.triu(np.ones_like(corr_matrix, dtype=bool))\n    heatmap = sns.heatmap(corr_matrix, mask=mask, annot=True, cmap=\"coolwarm\", fmt='.2f', linewidths=1,\n                          annot_kws={\"fontsize\": 8})\n    for cbar in heatmap.figure.axes[-1].yaxis.majorTicks:\n        cbar.tick1line.set_markersize(0)\n    return heatmap", "compilation_passed": true, "time": 0.0021250247955322266, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "np.random.seed(seed)\n    from os import environ\n    from matplotlib import rcParams\n    rcParams.update({'font.family': 'sans-serif', 'font.sans-serif': ['Arial']})\n    sns.set()\n    # download the data\n    from urllib.request import urlretrieve\n    urlretrieve(data_url, 'boston.csv')\n    df = pd.read_csv(\"boston.csv\", sep=\",\\s+\", engine='python')\n    corr = df.corr()\n    ax = sns.heatmap(corr)\n    return ax", "compilation_passed": true, "time": 0.4902381896972656, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "sns.set()\n    # Download the data from the specified URL using the given seed\n    df = pd.read_csv(data_url, sep=\"\\s+\", skiprows=27, header=None, names=[\n                     \"CRIM\", \"ZN\", \"INDUS\", \"CHAS\", \"NOX\", \"RM\", \"AGE\", \"DIS\", \"RAD\", \"TAX\", \"PTRATIO\", \"B\", \"LSTAT\", \"MEDV\"])\n    # Calculate the correlation matrix\n    correlation = df.corr()\n    # Create a mask for the upper triangle of the heatmap\n    mask = np.zeros_like(correlation, dtype=bool)\n    mask[np.triu_indices_from(mask)] = True\n    # Set the default Seaborn style\n    sns.set_style(\"white\")\n    # Plot the heatmap using Seaborn\n    ax = sns.heatmap(correlation, mask=mask, cmap='coolwarm',\n                     annot=True, vmax=1,", "compilation_passed": false, "time": 0.0007388591766357422, "tests_passed": false, "error": "SyntaxError"}
{"code": "import matplotlib.pyplot as plt\n    import pandas as pd\n    import seaborn as sns\n    import numpy as np\n    import os\n    import urllib\n\n    plt.rcParams['font.family'] = 'sans-serif'\n    plt.rcParams['font.serif'] = ['Arial']\n\n    # Download the data from the URL\n    with urllib.request.urlopen(data_url) as response:\n        data = response.read().decode(\"utf-8\")\n\n    # Parse the data into a DataFrame\n    header_text = data[:data.find(\".. note::\")]\n    data_text = data[data.find(\"Dataset Statistics\"):]\n\n    # Parse the header text to extract the column names\n    lines = header_text.strip().split('\\n')\n    column_names = [line.split('----')[0].strip() for line in lines if line.startswith('| Feature') or line.startswith('| **Feature**')]\n    column_names = [col.split('", "compilation_passed": false, "time": 0.000347137451171875, "tests_passed": false, "error": "SyntaxError"}
{"code": "import matplotlib.pyplot as plt\n    import pandas as pd\n    import seaborn as sns\n    import numpy as np\n    import requests\n    import io\n\n    # Fetch the data from the specified URL using the Requests library\n    response = requests.get(data_url)\n\n    # Extract the dataset content from the response\n    data = response.text\n\n    # Search for the dataset content in the response text\n    data_start = data.index(\"Dataset\")\n    data_content = data[data_start:]\n\n    # Load the dataset content as a string buffer\n    data_buffer = io.StringIO(data_content)\n\n    # Load the dataset content as a DataFrame\n    boston = pd.read_csv(data_buffer)\n    # Add dummy column\n    boston[\"dummy\"] = 1\n\n    # Set the plot style to white grid\n    sns.set_style(\"whitegrid\")\n\n    # Set the font family to Arial\n    plt.rcParams['font.family'] = 'sans-serif'\n    plt.rcParams", "compilation_passed": true, "time": 0.6994631290435791, "tests_passed": false, "error": "ValueError"}
{"code": "# Initialize random number generator for reproducibility\n    np.random.seed(seed)\n\n    # Read data\n    data = pd.read_csv(\"housing.data\",\n                       header=None,\n                       delim_whitespace=True,\n                       skiprows=1,\n                       names=[\"CRIM\", \"ZN\", \"INDUS\", \"CHAS\", \"NOX\", \"RM\",\n                              \"AGE\", \"DIS\", \"RAD\", \"TAX\", \"PTRATIO\", \"B\",\n                              \"LSTAT\", \"MEDV\"],)\n\n    # Draw heatmap\n    ax = sns.heatmap(data.corr(),\n                     annot=True,\n                     linewidths=1,\n                     linecolor=\"lightgray\",\n                     edgecolor=\"lightgray\",\n                     fmt=\".1f\")\n\n    # Customize\n    ax.tick_params(axis='both',\n                   which='both',\n                   bottom=False,\n", "compilation_passed": false, "time": 0.0004489421844482422, "tests_passed": false, "error": "SyntaxError"}
{"code": "from matplotlib import pyplot as plt\n    import os\n\n    # Download the Boston Housing dataset if not already present\n    if not os.path.exists(\"boston_housing.data\"):\n        with open(\"boston_housing.data\", \"wb\") as f:\n            f.write(requests.get(data_url).content)\n\n    # Extract the dataset\n    column_names = [\n        \"CRIM\",\n        \"ZN\",\n        \"INDUS\",\n        \"CHAS\",\n        \"NOX\",\n        \"RM\",\n        \"AGE\",\n        \"DIS\",\n        \"RAD\",\n        \"TAX\",\n        \"PTRATIO\",\n        \"B\",\n        \"LSTAT\",\n        \"MEDV\",\n    ]\n    df = pd.read_table(\n        \"boston_housing.data\", header=None, skiprows=1, names=column_names\n    )\n\n    # Calculate the correlation matrix\n    corr_matrix = df.corr().", "compilation_passed": false, "time": 0.0003409385681152344, "tests_passed": false, "error": "SyntaxError"}
{"code": "np.random.seed(seed)\n\n    # Download dataset from the internet\n    data = pd.read_csv(data_url, header=0)\n    # print(data.describe())\n\n    # Drop target feature\n    data = data.drop(\"MEDV\", axis=1)\n\n    # Calculate the correlation matrix\n    corr_matrix = data.corr().round(2)\n\n    # Generate Seaborn heatmap plot\n    ax = sns.heatmap(corr_matrix, annot=True, cmap=\"coolwarm\")\n    return ax", "compilation_passed": true, "time": 0.6756808757781982, "tests_passed": false, "error": ""}
{"code": "import pandas as pd\n    import numpy as np\n    import seaborn as sns\n    import matplotlib.pyplot as plt\n    import os\n\n    # Load the data and split it into a header and data\n    data_url = \"http://lib.stat.cmu.edu/datasets/boston\"\n    response = requests.get(data_url)\n    header, *data = response.text.split('-------------------------------------------')\n\n    # Clean the data and split it into a header and the rest of the data\n    header = header.strip().split('\\n')[1].replace(' ', '').split(' ')\n    data = '\\n'.join(data)\n    data = pd.read_table(io.StringIO(data), sep=\" \", names=header)\n\n    # Calculate the correlation matrix and heatmap\n    corr = data.corr().round(2)\n    mask = np.zeros_like(corr, dtype=bool)\n    mask[np.triu_indices_from(mask)] = True\n", "compilation_passed": true, "time": 0.003787994384765625, "tests_passed": false, "error": "NameError"}
{"code": "np.random.seed(seed)\n    try:\n        # Import the required libraries\n        import os\n        import seaborn as sns\n        import numpy as np\n        from urllib.request import urlopen\n\n        # Import the data\n        headers = [\n            \"CRIM\",\n            \"ZN\",\n            \"INDUS\",\n            \"CHAS\",\n            \"NOX\",\n            \"RM\",\n            \"AGE\",\n            \"DIS\",\n            \"RAD\",\n            \"TAX\",\n            \"PTRATIO\",\n            \"B\",\n            \"LSTAT\",\n            \"MEDV\",\n        ]\n        url = urlopen(data_url)\n        df = pd.read_table(url, skiprows=2, names=headers, na_values=\"\")\n\n        # Convert dataframe to numpy array\n        data = df.to_numpy()\n\n        # Generate the correlation matrix\n        correlation_matrix = np.corrcoef(data.transpose())\n\n        # Generate a mask for the upper triangle", "compilation_passed": false, "time": 0.0005459785461425781, "tests_passed": false, "error": "SyntaxError"}
{"code": "sns.set()\n\n    raw_data = pd.read_csv(data_url, sep='[\\n]+',skiprows=17)\n    data = pd.DataFrame(raw_data.to_records())\n\n    corr = data.corr()\n\n    # Generate a mask for the upper triangle\n    mask = np.triu(np.ones_like(corr, dtype=bool))\n\n    # Set up the Matplotlib figure\n    # f, ax = plt.subplots(figsize=(11, 9))\n\n    # Draw the heatmap with the mask and correct aspect ratio\n    ax = sns.heatmap(corr, mask=mask, cmap='RdBu_r', vmin=-1, vmax=1, square=True, annot=True)\n\n    # Add title\n    ax.set_title('Heatmap of Correlation between Attributes in the Boston Housing Dataset')\n\n    # Set font\n    ax.figure.axes[-1].yaxis.label.set_fontfamily('sans-serif')\n    ax.figure.axes[-1].", "compilation_passed": false, "time": 0.0004951953887939453, "tests_passed": false, "error": "SyntaxError"}
{"code": "from os.path import exists\n    import pandas as pd\n    import seaborn as sns\n    import matplotlib.pyplot as plt\n    import requests\n\n    try:\n        response = requests.get(data_url)\n        content = response.text\n        start_index = content.lower().find(\"dataset\")\n        if start_index == -1:\n            raise ValueError(\"Dataset not found in the response content.\")\n        start_index = content.lower().find(\"\\n\", start_index)\n\n        # Check if the start_index is not at the end of the content\n        if start_index == len(content) - 1:\n            raise ValueError(\"Dataset content not found after dataset keyword.\")\n\n        end_index = content.find(\"\\n\\n\\n\", start_index)\n        if end_index == -1:\n            end_index = len(content)  # Use the end of the content if not found\n        dataset_text = content[start_index+1:end_index]  # Adjust the slicing\n\n        ", "compilation_passed": false, "time": 0.0004940032958984375, "tests_passed": false, "error": "SyntaxError"}
{"code": "np.random.seed(seed)\n\n    data = pd.read_csv(data_url, skiprows=23, header=None, delimiter=',', columns=['CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX',\n                                                                                   'RM', 'AGE', 'DIS', 'RAD', 'TAX',\n                                                                                   'PTRATIO', 'B', 'LSTAT'])\n    ax = sns.heatmap(data.corr(), annot=True, fmt='.2f', mask=np.tril(data.corr()), center=0, vmax=1, vmin=-1,\n                     square=True, cmap='RdBu', linewidth=0.5)\n    plt.tight_layout()\n    plt.show()\n    return ax", "compilation_passed": true, "time": 0.002566099166870117, "tests_passed": false, "error": "TypeError"}
{"code": "from io import StringIO\n\n    from matplotlib import font_manager\n    from matplotlib import pyplot as plt\n    import pandas as pd\n    import seaborn as sns\n    import numpy as np\n    import os\n    plt.style.use('seaborn')\n    font_path = r'./font/Arial/arial.ttf'\n    font_manager.fontManager.addfont(font_path)\n    plt.rcParams['font.family'] = ['sans-serif', 'Arial']\n    if not os.path.exists(font_path):\n        print(f\"Font file not found at {font_path}\")\n\n    plt.rcParams[\"axes.unicode_minus\"] = False\n    plt.rcParams[\"font.size\"] = 12\n    plt.rcParams[\"figure.figsize\"] = (10, 7)\n    plt.rcParams[\"savefig.dpi\"] = 50\n    sns.set_theme(\"dark\")\n\n    # Seed random numbers for reproducibility\n    np.", "compilation_passed": false, "time": 0.00042700767517089844, "tests_passed": false, "error": "SyntaxError"}
{"code": "try:\n        if not all([isinstance(x, int) for x in [seed]]):\n            raise ValueError(\"'seed' should be an integer.\")\n    except Exception as exc:\n        raise ValueError(exc)\n    try:\n        with open(\"boston.txt\", \"r\", encoding='utf-8') as f:\n            # read the first two lines\n            data = f.read()\n            # split the data into rows\n            rows = data.split('\\n')[2:]\n            # split the rows into columns\n            boston = [[float(x) for x in r.split(' ') if x != ''] for r in rows]\n        df = pd.DataFrame(boston, columns=[\"CRIM\", \"ZN\", \"INDUS\", \"CHAS\", \"NOX\", \"RM\", \"AGE\", \"DIS\", \"RAD\", \"TAX\", \"PTRATIO\", \"B\", \"LSTAT\"])\n        # calculate the correlation matrix\n        corr = df.corr()\n        # create the", "compilation_passed": false, "time": 0.00047898292541503906, "tests_passed": false, "error": "SyntaxError"}
{"code": "if data_url.endswith(\".txt\"):\n        boston_housing_header = [\n            \"crime_rate\",\n            \"residence_zone_ratio\",\n            \"bus_town_prox\",\n            \"acres_near_river\",\n            \"termed_proportion\",\n            \"nonretail_business_acres\",\n            \"lower_status_people_proportion\",\n            \"higher_status_people_proportion\",\n            \"no_of_roads\",\n            \"distance_to_employment_central\",\n            \"accessibility_index\",\n            \"sanitation\",\n            \"fire_protection\",\n            \"school_safety_index\",\n            \"school_bus_proportion\",\n            \"house_values\",\n        ]\n        boston_housing_data = pd.read_table(\n            data_url, sep=\"\\s+\", header=None, skiprows=2, names=boston_housing_header\n        )\n    else:\n        raise Value", "compilation_passed": true, "time": 0.0021419525146484375, "tests_passed": false, "error": "NameError"}
{"code": "# Downloading the data from the website\n    raw_data = \"\"\n    for i, line in enumerate(requests.get(data_url).text.splitlines()):\n        if 9 <= i <= 377:\n            raw_data += line\n\n    # Create a DataFrame with the raw_data\n    df = pd.read_csv(StringIO(raw_data), delim_whitespace=True)\n\n    # Calculating the correlation matrix\n    correlation = df.corr()\n\n    # Creating the Seaborn heatmap\n    ax = sns.heatmap(correlation, annot=True, cmap=sns.color_palette('RdBu', as_cmap=True))\n\n    return ax", "compilation_passed": true, "time": 0.0020627975463867188, "tests_passed": false, "error": "NameError"}
{"code": "np.random.seed(seed)\n    boston = pd.read_csv(data_url)\n    boston.columns = boston.columns.str.replace(\".\", \"_\", regex=True)\n\n    # Plotting\n    with plt.rc_context({\"font.family\": \"sans-serif\", \"font.sans-serif\": [\"Arial\"]}):\n        sns.heatmap(boston.corr(), annot=True)\n\n    # Check that the plot was created and return it\n    if not plt.fignum_exists(1):\n        raise ValueError(\"Plot creation failed\")\n\n    return plt.gca()", "compilation_passed": true, "time": 0.6896560192108154, "tests_passed": false, "error": ""}
{"code": "sns.set()\n    headers = [\n        \"crime rate\",\n        \"residence land zonning\",\n        \"distance to employment\",\n        \"accessibility to road network\",\n        \"positive industry\",\n        \"access to river\",\n        \"older age\",\n        \"normalized per capita crime rate\",\n        \"average number of rooms\",\n        \"proportion of buildings built before 1940\",\n        \"proportion of white population\",\n        \"proportion of black population\",\n        \"weighted index of lower status of resident\",\n        \"value\",\n    ]\n    df = pd.read_table(\n        data_url,\n        sep=\",\",\n        header=None,\n        skipinitialspace=True,\n        skiprows=1,\n        names=headers,\n    )\n    corr = df.corr()\n    mask = np.zeros_like(corr, dtype=bool)\n    mask[np.triu_indices_from(mask)] = True\n    with sns.axes_style(\"white\"):\n", "compilation_passed": false, "time": 0.0006809234619140625, "tests_passed": false, "error": "IndentationError"}
