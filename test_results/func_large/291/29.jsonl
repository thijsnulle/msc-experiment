{"code": "np.random.seed(seed)\n\n    s = np.random.normal(mu, sigma, 1000)\n\n    # Use seaborn to make the plot prettier\n    ax = sns.distplot(s, kde=False)\n    ax.set(\n        title=\"Normal Distribution\",\n        xlabel=\"Value\",\n        ylabel=\"Frequency\",\n    )\n\n    # Add a colorbar showing the mean and standard deviation of the distribution\n    vmin, vmax = ax.get_xlim()\n    x = np.linspace(vmin, vmax, 100)\n    ax.plot(x, np.ones_like(x) * mu, \"r\", lw=2)\n    ax.plot(x, np.ones_like(x) * mu + sigma, \"g\", lw=2)\n    ax.plot(x, np.ones_like(x) * mu - sigma, \"g\", lw=2)\n    ax.legend([\"Mean\", f\"$\\pm{sigma}$\"])\n", "compilation_passed": true, "time": 0.007297039031982422, "tests_passed": true, "error": null}
{"code": "# Set the random number generator seed\n    np.random.seed(seed)\n\n    # Generate a normal distribution with the given mean and standard deviation\n    norm = np.random.normal(mu, sigma, 1000)\n\n    # Create a histogram of the distribution\n    plot = sns.histplot(norm, kde=True)\n\n    # Set the labels for the x-axis and y-axis\n    plot.set_xlabel(\"Sample Value\")\n    plot.set_ylabel(\"Density\")\n\n    # Show the color bar\n    plot.figure.colorbar(plot)\n\n    # Return the Axes object of the plotted distribution\n    return plot", "compilation_passed": true, "time": 0.01614212989807129, "tests_passed": false, "error": "AttributeError"}
{"code": "random.seed(seed)\n    sample = np.random.normal(mu, sigma, 1000)\n\n    _, ax = plt.subplots()\n\n    sns.kdeplot(\n        sample,\n        ax=ax,\n        fill=True,\n        legend=True,\n        color=\"blue\"\n    )\n\n    ax.set_title('Normal distribution with mean {0} and std {1} using {2} samples'.format(mu, sigma, 1000))\n    ax.set_ylabel('Density')\n    ax.grid(axis=\"y\")\n\n    plt.show(block=False)\n\n    return ax", "compilation_passed": true, "time": 0.0008819103240966797, "tests_passed": false, "error": "NameError"}
{"code": "sns.set()\n    sns.set_style(\"whitegrid\")\n    np.random.seed(seed)\n    x = np.random.normal(mu, sigma, 1000)\n    sns.distplot(x, hist=False)\n    return plt", "compilation_passed": true, "time": 0.004486083984375, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    nums = np.random.normal(mu, sigma, 1000)\n    plt.hist(nums, bins=20)\n    plt.xlabel('Value')\n    plt.ylabel('Frequency')\n    plt.axis([mu - 5 * sigma, mu + 5 * sigma, 0, 0.6])\n    sns.set_style('whitegrid')\n    sns.despine()\n    return plt.show()", "compilation_passed": true, "time": 0.0059010982513427734, "tests_passed": true, "error": null}
{"code": "# Define the seed for the random number generator\n    np.random.seed(seed)\n    # Create the data to plot\n    x = np.random.normal(mu, sigma, 1000)\n    # Create the plot\n    ax = sns.kdeplot(x, shade=True)\n    # Set the x and y axis labels\n    ax.set(xlabel='x', ylabel='Probability density')\n    # Return the Axes object of the plotted distribution\n    return ax", "compilation_passed": true, "time": 0.02297496795654297, "tests_passed": true, "error": null}
{"code": "# Set the seed.\n    rng = np.random.default_rng(seed)\n\n    # Generate the distribution.\n    num_samples = 1000\n    samples = rng.normal(mu, sigma, num_samples)\n\n    # Set the color bar and its ticks.\n    sns.set_theme(style=\"darkgrid\")\n\n    # Plot the distribution.\n    fig, ax = plt.subplots()\n    ax.hist(samples, bins=\"auto\")\n    ax.set_xlim((-3.2, 3.2))\n    ax.set_xticks([mu - (1.96*sigma), mu, mu + (1.96*sigma)])\n    ax.set_xticklabels([\"1.96\u03c3\", \"\u03bc\", \"1.96\u03c3\"])\n    ax.set_title(f\"\u03bc = {mu:.2f}, \u03c3 = {sigma:.2f}\")\n\n    return ax", "compilation_passed": true, "time": 0.010425806045532227, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    x = np.random.normal(mu, sigma, size=1000)\n    sns.kdeplot(x, fill=True, color=\"red\", alpha=0.7, linewidth=3, label='normal distribution')\n    sns.kdeplot(x, color='black', label='sample distribution')\n    return plt.gca()", "compilation_passed": true, "time": 0.04130220413208008, "tests_passed": true, "error": null}
{"code": "# Set the random seed\n    np.random.seed(seed)\n    # Set the number of samples\n    samples = 1000\n    # Generate a normal distribution with the given mean, standard deviation, and number of samples\n    values = np.random.normal(mu, sigma, samples)\n    # Create a figure with a grid layout of 1 row and 2 columns\n    fig, ax = plt.subplots()\n    # Plot the histogram of the normal distribution with the given number of bins, alpha value, and color\n    ax.hist(values, bins=10, alpha=0.75, color='red')\n    # Show the plot\n    plt.show()\n    # Return the Axes object of the plotted distribution\n    return ax", "compilation_passed": true, "time": 0.006582021713256836, "tests_passed": true, "error": null}
{"code": "# Set the seed for reproducibility.\n    np.random.seed(seed)\n\n    # Set the parameters of the distribution.\n    x = np.random.normal(mu, sigma, 1000)\n\n    # Plot the distribution.\n    ax = sns.kdeplot(x, fill=True)\n    ax.set(xlabel='x')\n    ax.set_title(f'Distribution with Mean of {mu:.2f} and Standard Deviation of {sigma:.2f}')\n\n    # Indicate the mean and standard deviation with a color bar.\n    ax.axvspan(mu - sigma, mu + sigma, facecolor='red', alpha=0.2, lw=0)\n    ax.axvline(mu, color='red', linestyle='--')\n\n    return ax", "compilation_passed": true, "time": 0.0883018970489502, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    sns.set_theme(style=\"white\")\n    x = np.random.normal(mu, sigma, 1000)\n\n    ax = sns.kdeplot(x=x, fill=True, bw_adjust=0.5)\n    ax.set(xlabel=\"$x$\")\n    ax.figure.tight_layout()\n\n    return ax", "compilation_passed": true, "time": 0.14546680450439453, "tests_passed": true, "error": null}
{"code": "seed = 0\n    # Setting the seed\n    np.random.seed(seed)\n\n    # Generate 1000 values of normal distribution\n    x = np.random.normal(mu, sigma, 1000)\n\n    # Setting the seaborn context\n    sns.set_context(\"talk\")\n\n    # Plotting the distribution with seaborn\n    ax = sns.distplot(x,\n              hist=True,\n              kde=True,\n              bins=50,\n              color = 'darkblue',\n              hist_kws={'edgecolor':'black'},\n              kde_kws={'linewidth': 2},\n              )\n\n    # Adding the mean and stdv as a line\n    ax.axvline(x=mu, linestyle='--', color='red')\n    ax.axvline(x=mu+sigma, linestyle='--', color='red')\n    ax.axvline(x=mu-sigma, linestyle='--', color='red')\n\n    # Adding the legend\n    ax", "compilation_passed": true, "time": 0.04741811752319336, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    sample = np.random.normal(mu, sigma, 1000)\n    ax = sns.histplot(sample, stat='density', color='salmon', bins=30)\n    ax.axvline(mu, color='black', lw=2)\n    ax.axvline(mu+sigma, color='green', lw=2)\n    ax.axvline(mu-sigma, color='green', lw=2)\n    ax.set(title='Distribution with 3 sigma',\n           xlabel=\"Sample\", ylabel='Density')\n    return ax", "compilation_passed": true, "time": 0.052288055419921875, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    r = np.random.normal(mu, sigma, 1000)\n\n    fig, ax = plt.subplots()\n    ax.hist(r, bins=50)\n    ax.set_title(f'\u03bc={mu}, \u03c3={sigma}')\n    sns.set_style(\"whitegrid\")\n\n    return ax", "compilation_passed": true, "time": 0.013834953308105469, "tests_passed": true, "error": null}
{"code": "sns.set_theme()\n    np.random.seed(seed)\n    ax = sns.distplot(np.random.normal(mu, sigma, size=1000), rug=True, hist_kws={\"density\": True})\n    plt.colorbar()\n    ax.set(title=f'Mean={mu}, std={sigma}', xlabel=None, ylabel=None)\n    return ax", "compilation_passed": true, "time": 0.031037092208862305, "tests_passed": false, "error": "RuntimeError"}
{"code": "# set the seed of the random number generator\n    np.random.seed(seed)\n\n    # draw a normal distribution using a 1000 samples\n    x = np.random.normal(mu, sigma, 1000)\n\n    # plot the distribution\n    sns.distplot(x, hist=False, kde=True, bins=100)\n\n    # show the mean and standard deviation with a color bar\n    plt.axvline(mu, color='r', linestyle='--')\n    plt.axvline(mu + sigma, color='g', linestyle='--')\n    plt.axvline(mu - sigma, color='g', linestyle='--')\n\n    # return the Axes object\n    return plt.gca()", "compilation_passed": true, "time": 0.11424493789672852, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    sns.set()\n    dist = np.random.normal(mu, sigma, 1000)\n    sns.distplot(dist, hist=False)\n    return plt.show()", "compilation_passed": true, "time": 0.00954580307006836, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    sns.set_theme()\n    sns.set_palette(\"rocket\")\n    # create normal distribution with mean and standard deviation\n    x = np.random.normal(mu, sigma, 1000)\n    # create histogram\n    plot = sns.histplot(x, bins=30, color=\"green\", line_kws={'linewidth':3,'color':'tab:orange'},\n                    label=r'$\\mu={},\\ \\sigma={}$'.format(mu, sigma), element=\"step\")\n    # add legend\n    plt.legend(fontsize=10)\n    # add labels\n    plt.xlabel('x')\n    plt.ylabel('Probability density')\n    # add title\n    plt.title('Normal distribution')\n    # add grid\n    plt.grid(True)\n    # add color bar\n    plt.colorbar()\n    return plot", "compilation_passed": true, "time": 0.005906105041503906, "tests_passed": false, "error": "RuntimeError"}
{"code": "np.random.seed(seed)\n    dist = np.random.normal(mu, sigma, 1000)\n\n    fig = plt.figure()\n\n    ax = sns.histplot(data=dist, bins=50, color='red')\n\n    ax.set_title(f\"Distribution mean: {mu}, distribution std: {sigma}\")\n\n    return ax", "compilation_passed": true, "time": 0.0222928524017334, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    x = np.random.normal(mu, sigma, 1000)\n    plot = sns.kdeplot(x, shade=True, color=\"darkred\", bw=\"silverman\")\n    plot.set_title(\"Distribution\")\n    plot.axvline(mu, color=\"r\", linestyle=\"--\")\n    plot.set_xlabel(\"Value\", labelpad=5)\n    plot.set_ylabel(\"Density\", labelpad=5)\n    plot.fill_between(\n        x,\n        plot.lines[0].get_ydata(),\n        facecolor=\"r\",\n        alpha=0.1,\n        color=\"darkred\",\n    )\n    return plot", "compilation_passed": true, "time": 0.0505220890045166, "tests_passed": false, "error": "ValueError"}
{"code": "np.random.seed(seed)\n    sample_data = np.random.normal(mu, sigma, size=1000)\n    plt.figure()\n    ax = sns.distplot(sample_data, hist=False, kde=True,\n                      kde_kws={\"shade\": True, \"linewidth\": 3},\n                      line_kws={\"linewidth\": 4},\n                      label=f\"\u03bc={mu}, \u03c3={sigma}\")\n    return ax", "compilation_passed": true, "time": 0.0011539459228515625, "tests_passed": false, "error": "TypeError"}
{"code": "sns.set()\n    np.random.seed(seed)\n\n    x = np.random.normal(mu, sigma, 1000)\n\n    ax = sns.distplot(x, kde=True, rug=True, color='#0000FF', hist_kws={\"alpha\": 1.0})\n    ax.set_title(\"Normal Distribution with mean = {} and std = {}\".format(mu, sigma))\n    ax.legend([\"mu = {}\".format(mu)])\n    return ax", "compilation_passed": true, "time": 0.14896488189697266, "tests_passed": true, "error": null}
{"code": "sns.set(style=\"ticks\")\n    np.random.seed(seed)\n    # Draw 1000 samples of the distribution\n    dist = np.random.normal(mu, sigma, 1000)\n    ax = sns.histplot(x=dist, bins=150)\n    # Draw color bar\n    sns.colorbar(ax=ax)\n    sns.despine(left=True)\n    sns.set(style=\"ticks\")\n    sns.set_palette(\"Set1\")\n    return ax", "compilation_passed": true, "time": 0.033818960189819336, "tests_passed": false, "error": "AttributeError"}
{"code": "np.random.seed(seed)\n\n    sns.set_style(\"whitegrid\")\n    ax = sns.kdeplot(np.random.normal(mu, sigma, 1000), color=\"skyblue\",\n                      shade=True,\n                      label=\"\u03bc: %.1f, \u03c3: %.1f\" % (mu, sigma))\n\n    return ax", "compilation_passed": true, "time": 0.08061408996582031, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n\n    x = np.random.normal(mu, sigma, 1000)\n    sns.set_theme()\n    ax = sns.histplot(x=x)\n    ax.set(xlabel=\"\", ylabel=\"\")\n    ax.axvline(x=mu, color=\"r\", linestyle=\"--\", lw=2)\n    ax.axvline(x=sigma, color=\"g\", linestyle=\"--\", lw=2)\n    return ax", "compilation_passed": true, "time": 0.06523799896240234, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n\n    normal = np.random.normal(mu, sigma, 1000)\n\n    plt.figure()\n    plot = sns.histplot(normal)\n    plot.set(xlabel=\"Value\", ylabel=\"Frequency\")\n    plt.axvline(x=mu, color=\"r\", linestyle=\"--\", linewidth=2)\n    plt.axvline(x=mu + sigma, color=\"g\", linestyle=\"--\", linewidth=2)\n    plt.axvline(x=mu - sigma, color=\"g\", linestyle=\"--\", linewidth=2)\n    plt.show()\n\n    return plot", "compilation_passed": true, "time": 0.018735170364379883, "tests_passed": true, "error": null}
{"code": "sns.set_style('darkgrid')\n    np.random.seed(seed)\n    dist = np.random.normal(mu, sigma, 1000)\n    plot = sns.distplot(dist)\n    plot.set(xlabel='Mean: 0, Standard Deviation: 1')\n    return plot", "compilation_passed": true, "time": 0.03436279296875, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    data = np.random.normal(mu, sigma, 1000)\n    ax = sns.histplot(data, stat='probability', color=\"y\", bins=20)\n    plt.axvline(x=mu, c=\"r\", label=r\"$\\mu$\")\n    plt.axvline(x=mu - sigma, c='g', label=r\"$\\mu - \\sigma$\")\n    plt.axvline(x=mu + sigma, c='g')\n    plt.axvline(x=mu - sigma * 3, c='b', label=r\"$\\mu - 3 \\sigma$\")\n    plt.axvline(x=mu + sigma * 3, c='b')\n    plt.axvline(x=mu - sigma * 6, c='c', label=r\"$\\mu - 6 \\sigma$\")\n    plt.axvline(x=mu + sigma * 6, c='c')\n    plt.axvline(x=", "compilation_passed": false, "time": 0.0002830028533935547, "tests_passed": false, "error": "SyntaxError"}
{"code": "np.random.seed(seed)\n    sns.set_theme()\n    x = np.random.normal(mu, sigma, 1000)\n    ax = sns.histplot(x=x)\n    ax.axvline(mu, color='red')\n    ax.axvline(sigma, color='green')\n    ax.set_xlim(-10, 10)\n    return ax", "compilation_passed": true, "time": 0.010763883590698242, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    x = np.random.normal(mu, sigma, 1000)\n    ax = sns.distplot(x,\n                      bins=30,\n                      color='b',\n                      hist_kws={\"linewidth\": 25, 'alpha':1})\n    plt.axvline(x=mu, color='r', linestyle='--', linewidth=2)\n    plt.axvline(x=sigma, color='g', linestyle='--', linewidth=2)\n    ax.set_title(\"Normal distribution\")\n    return ax", "compilation_passed": true, "time": 0.03799605369567871, "tests_passed": true, "error": null}
