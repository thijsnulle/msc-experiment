{"code": "extracted_dirs = []\n    for filename in os.listdir(directory):\n        if re.match(pattern, filename):\n            prefix, suffix = filename.rsplit('-', 1)\n            zip_path = os.path.join(directory, filename)\n            extract_dir = os.path.join(prefix)\n            with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n                zip_ref.extractall(extract_dir)\n            extracted_dirs.append(extract_dir)\n    return extracted_dirs", "compilation_passed": true, "time": 0.002064943313598633, "tests_passed": true, "error": null}
{"code": "# Use a set to avoid duplicates\n    extracted_dirs = set()\n    zip_pattern = re.compile(pattern)\n    for filename in os.listdir(directory):\n        zip_match = zip_pattern.search(filename)\n        if zip_match:\n            zip_filename = os.path.join(directory, filename)\n            zip_file = zipfile.ZipFile(zip_filename)\n            prefix_name = zip_match.group(1)\n            extract_dir = os.path.join(directory, prefix_name)\n            extracted_dirs.add(extract_dir)\n            zip_file.extractall(extract_dir)\n\n    return list(extracted_dirs)", "compilation_passed": true, "time": 0.0020029544830322266, "tests_passed": true, "error": null}
{"code": "dirs = []\n    pattern = re.compile(pattern)\n    for fn in os.listdir(directory):\n        fn = os.path.join(directory, fn)\n        match = re.match(pattern, fn)\n        if match:\n            target_dir = match.group(1)\n            with zipfile.ZipFile(fn) as zf:\n                zf.extractall(target_dir)\n            dirs.append(target_dir)\n    return tuple(dirs)", "compilation_passed": true, "time": 0.0027189254760742188, "tests_passed": true, "error": null}
{"code": "regex = re.compile(pattern)\n    extracted_dirs = []\n\n    for filename in os.listdir(directory):\n        full_path = os.path.join(directory, filename)\n        if filename.endswith('.zip'):\n            match = regex.match(filename)\n            if match:\n                prefix = match.group(1)\n                output_dir = os.path.join('/tmp/backup', prefix)\n\n                with zipfile.ZipFile(full_path, 'r') as zip_ref:\n                    zip_ref.extractall(output_dir)\n\n                extracted_dirs.append(output_dir)\n\n    return directory, extracted_dirs", "compilation_passed": true, "time": 0.002026796340942383, "tests_passed": false, "error": "TypeError"}
{"code": "# Check if the directory exists\n    if not os.path.exists(directory):\n        raise Exception(f\"The directory '{directory}' does not exist\")\n\n    # Initialize the list to store the directory names\n    dirs = []\n\n    # Use os.walk to iterate over files in the directory and its subdirectories\n    for root, dirs, files in os.walk(directory):\n        # Iterate over the files\n        for file in files:\n            # Check if the file matches the given pattern\n            match = re.search(pattern, file)\n            if match:\n                # Extract the prefix of the filename\n                prefix = match.group(1)\n\n                # Construct the directory path\n                extracted_dir = os.path.join(directory, prefix)\n\n                # Create the extracted directory if it does not exist\n                if not os.path.exists(extracted_dir):\n                    os.mkdir(extracted_dir)\n\n                # Extract the zip file to the extracted directory\n                zipfile_path = os.path.join(root, file)\n                with zipfile.Z", "compilation_passed": false, "time": 0.0002319812774658203, "tests_passed": false, "error": "SyntaxError"}
{"code": "dirs = []\n    for filename in os.listdir(directory):\n        m = re.match(pattern, filename)\n        if not m:\n            continue\n        name = m.group(1)\n        print(filename, '->', name)\n        with zipfile.ZipFile(os.path.join(directory, filename), 'r') as zip_ref:\n            zip_ref.extractall(name)\n            dirs.append(name)\n    return dirs", "compilation_passed": true, "time": 0.002196073532104492, "tests_passed": true, "error": null}
{"code": "extracted_dirs = []\n\n    for file in os.listdir(directory):\n        match = re.match(pattern, file)\n        if match:\n            filename = match.group(1)\n            zip_file = os.path.join(directory, file)\n            extracted_dir = os.path.join(directory, filename)\n            with zipfile.ZipFile(zip_file, 'r') as zip_ref:\n                zip_ref.extractall(extracted_dir)\n            extracted_dirs.append(extracted_dir)\n\n    return (directory, extracted_dirs)", "compilation_passed": true, "time": 0.0021491050720214844, "tests_passed": false, "error": "TypeError"}
{"code": "if not os.path.exists(directory):\n        os.makedirs(directory)\n    pattern = re.compile(pattern)\n    dir_list = []\n    for zip_name in os.listdir(directory):\n        result = pattern.search(zip_name)\n        if result:\n            prefix = result.group(1)\n            zip_path = os.path.join(directory, zip_name)\n            with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n                zip_ref.extractall(os.path.join(directory, prefix))\n                dir_list.append(prefix)\n            # Remove zip file after extraction\n            os.remove(zip_path)\n    return dir_list", "compilation_passed": true, "time": 0.002727985382080078, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "dirs = []\n    for filename in os.listdir(directory):\n        if re.match(pattern, filename) and filename.endswith('.zip'):\n            prefix = re.match(pattern, filename).groups()[0]\n            file_path = os.path.join(directory, filename)\n            if os.path.isfile(file_path):\n                with zipfile.ZipFile(file_path, 'r') as zip_ref:\n                    zip_ref.extractall(prefix)\n                    dirs.append(prefix)\n    return dirs", "compilation_passed": true, "time": 0.0019168853759765625, "tests_passed": true, "error": null}
{"code": "# \u83b7\u53d6\u76ee\u5f55\u4e2d\u7684\u6240\u6709\u6587\u4ef6\n    files = os.listdir(directory)\n    # \u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u8fc7\u6ee4\u6587\u4ef6\n    zip_files = []\n    for f in files:\n        if re.match(pattern, f):\n            zip_files.append(os.path.join(directory, f))\n    # \u521b\u5efa\u7528\u4e8e\u4fdd\u5b58\u89e3\u538b\u540e\u6587\u4ef6\u7684\u76ee\u5f55\n    extracted_dirs = []\n    for zip_file in zip_files:\n        base_name = os.path.basename(zip_file)\n        # \u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u4ece\u6587\u4ef6\u540d\u4e2d\u5206\u79bb\u51fa\u76ee\u5f55\u540d\u79f0\n        match = re.match(pattern, base_name)\n        if match:\n            dir_name = match.group(1)\n            # \u521b\u5efa\u76ee\u5f55\u5e76\u6dfb\u52a0\u5230\u5217\u8868\u4e2d\n            extracted_dir = os.path.join(directory, dir_name)\n            if not os.path.exists(extracted_dir):\n                os.makedirs(extracted_dir)\n            extracted_dirs.append(extracted_dir)\n            # \u6253\u5f00ZIP\u6587\u4ef6\u5e76\u89e3\u538b\u5230\u6307\u5b9a\u76ee\u5f55", "compilation_passed": true, "time": 0.0018808841705322266, "tests_passed": false, "error": "TypeError"}
{"code": "dirs = []\n    for root, dirs, files in os.walk(directory):\n        for file in files:\n            # if not file.endswith('.zip'): continue\n            filename = os.path.join(root, file)\n            match = re.match(pattern, file)\n            if match:\n                dir = os.path.join(root, match.group(1))\n                with zipfile.ZipFile(filename) as zip_ref:\n                    zip_ref.extractall(dir)\n                dirs.append(dir)\n    return tuple(dirs)", "compilation_passed": true, "time": 0.0018982887268066406, "tests_passed": true, "error": null}
{"code": "# \u521b\u5efa\u4e00\u4e2a\u7a7a\u5217\u8868\uff0c\u7528\u4e8e\u5b58\u653e\u89e3\u538b\u7f29\u540e\u7684\u76ee\u5f55\u5217\u8868\n    extracted_dirs = []\n    # \u83b7\u53d6\u6307\u5b9a\u76ee\u5f55\u4e0b\u7684\u6240\u6709\u6587\u4ef6\u5217\u8868\n    files = os.listdir(directory)\n    # \u904d\u5386\u6587\u4ef6\u5217\u8868\n    for file in files:\n        # \u4f7f\u7528\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u6587\u4ef6\u540d\u662f\u5426\u6ee1\u8db3\u8981\u6c42\n        match = re.match(pattern, file)\n        if match:\n            # \u83b7\u53d6\u5339\u914d\u5230\u7684\u6587\u4ef6\u540d\n            zip_file = match.group()\n            # \u83b7\u53d6\u5339\u914d\u5230\u7684\u524d\u7f00\u5b57\u7b26\u4e32\n            prefix = match.group(1)\n            # \u521b\u5efa\u89e3\u538b\u7f29\u76ee\u5f55\u7684\u8def\u5f84\n            extracted_dir = os.path.join(directory, prefix)\n            # \u521b\u5efa\u89e3\u538b\u7f29\u76ee\u5f55\n            os.makedirs(extracted_dir, exist_ok=True)\n            # \u83b7\u53d6zip\u6587\u4ef6\u7684\u7edd\u5bf9\u8def\u5f84\n            zip_file_path = os.path.join(directory, zip_file)\n            # \u521b\u5efaZipFile\u5bf9\u8c61\uff0c\u4ecezip\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e\uff0c\u5c06\u6570\u636e\u89e3\u538b\u7f29\u5230\u6307\u5b9a\u8def\u5f84\n            with zipfile.ZipFile(zip_file_path, 'r", "compilation_passed": false, "time": 9.012222290039062e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "extracted_directories = []\n    pattern = re.compile(pattern)\n    for filename in os.listdir(directory):\n        if filename.endswith('.zip'):\n            match = pattern.match(filename)\n            if match:\n                prefix = match.group(1)\n                print(prefix)\n                print(directory)\n                zip_file = zipfile.ZipFile(os.path.join(directory, filename))\n                zip_file.extractall(os.path.join(directory, prefix))\n                extracted_directories.append(prefix)\n    return extracted_directories", "compilation_passed": true, "time": 0.002012968063354492, "tests_passed": true, "error": null}
{"code": "unzip_directories = []\n\n    for filename in os.listdir(directory):\n        filepath = os.path.join(directory, filename)\n\n        match = re.match(pattern, filename)\n        if not match:\n            continue\n\n        if not zipfile.is_zipfile(filepath):\n            continue\n\n        prefix = match.group(1)\n\n        if not prefix:\n            continue\n\n        destination = os.path.join(directory, prefix)\n        with zipfile.ZipFile(filepath, 'r') as zip_ref:\n            zip_ref.extractall(destination)\n        unzip_directories.append(destination)\n\n    return unzip_directories", "compilation_passed": true, "time": 0.002741098403930664, "tests_passed": true, "error": null}
{"code": "p = re.compile(pattern)\n    files = os.listdir(directory)\n    zip_files = []\n    for fname in files:\n        if p.match(fname):\n            zip_files.append(fname)\n\n    extract_dirs = []\n    for fname in zip_files:\n        zip_path = os.path.join(directory, fname)\n        zip_file = zipfile.ZipFile(zip_path)\n        zip_list = zip_file.namelist()\n        # \u901a\u8fc7\u6700\u540e\u4e00\u4e2a \"-\" \u5206\u9694\u7b26\u62c6\u5206\u6587\u4ef6\u540d\u5f97\u5230\u76ee\u5f55\n        new_dir = p.match(fname).group(1)\n        extract_path = os.path.join(directory, new_dir)\n        if not os.path.exists(extract_path):\n            os.makedirs(extract_path)\n        for item in zip_list:\n            if item.endswith('/'):\n                os.mkdir(os.path.join(extract_path, item))\n        zip_file.extractall(path=extract_path)", "compilation_passed": true, "time": 0.0024979114532470703, "tests_passed": false, "error": "TypeError"}
{"code": "extract_dirs = []\n\n    # Iterate over all files in the directory\n    for file in os.listdir(directory):\n        # Check if the file matches the specified pattern\n        match = re.match(pattern, file)\n        if match:\n            # Extract the prefix part of the filename\n            prefix = match.group(1)\n            # Create a new directory for extraction\n            extract_dir = f'{directory}/{prefix}'\n            extract_dirs.append(extract_dir)\n            # Create the directory if it does not exist\n            os.makedirs(extract_dir, exist_ok=True)\n            # Extract the zip file contents\n            with zipfile.ZipFile(f'{directory}/{file}', 'r') as zip_ref:\n                zip_ref.extractall(extract_dir)\n\n    # Return the list of extract_dirs\n    return extract_dirs", "compilation_passed": true, "time": 0.004834651947021484, "tests_passed": true, "error": null}
{"code": "if not os.path.isdir(directory):\n        return \"Error: directory not found\"\n    zips = os.listdir(directory)\n    if not zips:\n        return \"Error: no zip files found in directory\"\n    match_dirs = []\n    for zip_file in zips:\n        zip_path = os.path.join(directory, zip_file)\n        if not os.path.isfile(zip_path):\n            continue\n        match = re.search(pattern, zip_file)\n        if not match:\n            continue\n        match_dir = match.group(1)\n        match_dirs.append(match_dir)\n        match_dir_path = os.path.join(directory, match_dir)\n        os.makedirs(match_dir_path, exist_ok=True)\n        with zipfile.ZipFile(zip_path, \"r\") as zip_ref:\n            zip_ref.extractall(match_dir_path)\n    return match_dirs", "compilation_passed": true, "time": 0.0031261444091796875, "tests_passed": true, "error": null}
{"code": "dirs = []\n    for filename in os.listdir(directory):\n        filepath = os.path.join(directory, filename)\n        if os.path.isfile(filepath):\n            match = re.match(pattern, filename)\n            if match:\n                prefix = match.group(1)\n                extract_dir = os.path.join(directory, prefix)\n                dirs.append(extract_dir)\n                with zipfile.ZipFile(filepath) as zipf:\n                    zipf.extractall(extract_dir)\n    return (directory, dirs)", "compilation_passed": true, "time": 0.0018801689147949219, "tests_passed": false, "error": "TypeError"}
{"code": "os.makedirs(directory, exist_ok=True)\n    dirs = []\n    for file in os.listdir(directory):\n        if re.match(pattern, file):\n            zip_file = os.path.join(directory, file)\n            if zipfile.is_zipfile(zip_file):\n                prefix_part = re.match(pattern, file).group(1)\n                #print(file, prefix_part)\n                extract_dir = os.path.join(directory, prefix_part)\n                with zipfile.ZipFile(zip_file) as zf:\n                    zf.extractall(extract_dir)\n                dirs.append(extract_dir)\n    return dirs", "compilation_passed": true, "time": 0.0019910335540771484, "tests_passed": true, "error": null}
{"code": "dirs = []\n\n    for filename in os.listdir(directory):\n        match = re.match(pattern, filename)\n        if match:\n            prefix = match.group(1)\n            zip_filepath = os.path.join(directory, filename)\n\n            # Check if the extracted directory already exists\n            extract_path = os.path.join(directory, prefix)\n            if not os.path.exists(extract_path):\n                os.mkdir(extract_path)\n                dirs.append(extract_path)\n\n            # Extract the zip file to the directory determined by the prefix\n            with zipfile.ZipFile(zip_filepath) as zip_file:\n                zip_file.extractall(extract_path)\n\n    return dirs", "compilation_passed": true, "time": 0.0018792152404785156, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Create an empty list to store directories where files are extracted\n    dirs = []\n    # Get a list of all zip files in the directory\n    files = [f for f in os.listdir(directory) if os.path.isfile(os.path.join(directory, f))]\n    # Loop through each zip file\n    for f in files:\n        # Extract filename without extension\n        filename = os.path.splitext(f)[0]\n        # Check if zip file name matches the pattern\n        match = re.match(pattern, filename)\n        if match:\n            # If zip file name matches, extract to the prefix part of the filename\n            prefix = match.group(1)\n            # Create the extract directory if it doesn't exist\n            dir_name = os.path.join(directory, prefix)\n            os.makedirs(dir_name, exist_ok=True)\n            # Extract zip file to the directory\n            zip_file = zipfile.ZipFile(os.path.join(directory, f))\n            zip_file.extractall(dir_name)\n            zip", "compilation_passed": true, "time": 0.001814126968383789, "tests_passed": false, "error": "TypeError"}
{"code": "result_dirs = []\n    for file_name in os.listdir(directory):\n        match = re.match(pattern, file_name)\n        if match:\n            prefix = match.group(1)\n            full_path = os.path.join(directory, file_name)\n            with zipfile.ZipFile(full_path) as zip_file:\n                zip_file.extractall(os.path.join(directory, prefix))\n                result_dirs.append(os.path.join(directory, prefix))\n    return result_dirs", "compilation_passed": true, "time": 0.002008199691772461, "tests_passed": true, "error": null}
{"code": "ret_list = []\n    for zip_file_name in os.listdir(directory):\n        match = re.match(pattern, zip_file_name)\n        if match:\n            zip_file_path = os.path.join(directory, zip_file_name)\n            with zipfile.ZipFile(zip_file_path) as zf:\n                prefix = match.group(1)\n                extract_dir = os.path.join(directory, prefix)\n                zf.extractall(extract_dir)\n                ret_list.append(prefix)\n    return ret_list", "compilation_passed": true, "time": 0.0026679039001464844, "tests_passed": true, "error": null}
{"code": "res_list = []\n    for name in os.listdir(directory):\n        if not re.match(pattern, name):\n            continue\n\n        name = os.path.join(directory, name)\n        with zipfile.ZipFile(name, 'r') as zf:\n            prefix = re.match(pattern, os.path.basename(name)).group(1)\n            extract_dir = os.path.join(directory, prefix)\n            if os.path.exists(extract_dir):\n                print(f'Error: extract_dir already exists: {extract_dir}')\n                return (None, res_list)\n            zf.extractall(extract_dir)\n            res_list.append(extract_dir)\n\n    return (None, res_list)", "compilation_passed": true, "time": 0.002051115036010742, "tests_passed": false, "error": "TypeError"}
{"code": "prefix_dirs = []\n\n    for file_name in os.listdir(directory):\n        if re.match(pattern, file_name):\n            with zipfile.ZipFile(os.path.join(directory, file_name), 'r') as zip_ref:\n                file_name_without_extension = os.path.splitext(file_name)[0]\n                file_name_parts = file_name_without_extension.rsplit('-', 1)\n                prefix = file_name_parts[0]\n                if os.path.exists(prefix):\n                    prefix += f\"_{len(prefix_dirs)+1}\"\n                prefix_dirs.append(prefix)\n                zip_ref.extractall(prefix)\n    return prefix_dirs", "compilation_passed": true, "time": 0.0020639896392822266, "tests_passed": true, "error": null}
{"code": "regex = re.compile(pattern)\n    dirs = []\n    for file in os.listdir(directory):\n        # print(file)\n        if zipfile.is_zipfile(os.path.join(directory, file)):\n            match = regex.search(file)\n            if match:\n                prefix, ext = os.path.splitext(match.group(1))\n                dir_name = os.path.join(directory, prefix)\n                os.makedirs(dir_name, exist_ok=True)\n                with zipfile.ZipFile(os.path.join(directory, file), 'r') as zip_ref:\n                    zip_ref.extractall(dir_name)\n                dirs.append(dir_name)\n    return directory, dirs", "compilation_passed": true, "time": 0.0018892288208007812, "tests_passed": false, "error": "TypeError"}
{"code": "directories = []\n\n    for file in os.listdir(directory):\n        if re.match(pattern, file) is not None:\n            file_path = os.path.join(directory, file)\n            if os.path.isfile(file_path):\n                with zipfile.ZipFile(file_path, 'r') as zip_ref:\n                    zip_ref.extractall(os.path.join(directory, os.path.splitext(re.sub(pattern, r'\\1', file))[0]))\n                    directories.append(os.path.join(directory, os.path.splitext(re.sub(pattern, r'\\1', file))[0]))\n\n    return directory, directories", "compilation_passed": true, "time": 0.002544879913330078, "tests_passed": false, "error": "TypeError"}
{"code": "prefix_dict = {}\n    for filename in os.listdir(directory):\n        match = re.match(pattern, filename)\n        if match:\n            prefix = match.group(1)\n            if prefix not in prefix_dict:\n                prefix_dict[prefix] = []\n            prefix_dict[prefix].append(filename)\n\n    # Extract files and create a directory for each prefix\n    extracted_dirs = []\n    for prefix, filenames in prefix_dict.items():\n        extracted_dir = os.path.join(directory, prefix)\n        if not os.path.exists(extracted_dir):\n            os.mkdir(extracted_dir)\n        extracted_dirs.append(extracted_dir)\n\n        for filename in filenames:\n            zip_file = os.path.join(directory, filename)\n            with zipfile.ZipFile(zip_file, \"r\") as zip_ref:\n                zip_ref.extractall(extracted_dir)\n            # Delete the original zip file\n            os.remove(zip_file)\n", "compilation_passed": true, "time": 0.0019419193267822266, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "files = [f for f in os.listdir(directory) if re.search(pattern, f)]\n    dirs = []\n    for f in files:\n        dir_name = re.search(pattern, f).group(1)\n        if not os.path.exists(dir_name):\n            os.makedirs(dir_name)\n        with zipfile.ZipFile(os.path.join(directory, f), 'r') as zip_ref:\n            zip_ref.extractall(dir_name)\n            dirs.append(dir_name)\n    return (dirs, [])", "compilation_passed": true, "time": 0.0020978450775146484, "tests_passed": false, "error": "TypeError"}
{"code": "extracted_directories = []\n    for file in os.listdir(directory):\n        if os.path.isfile(os.path.join(directory, file)):\n            m = re.search(pattern, file)\n            if m:\n                prefix = m.group(1)\n                zip_path = os.path.join(directory, file)\n                extract_dir = os.path.join(directory, prefix)\n                extracted_directories.append(extract_dir)\n                with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n                    zip_ref.extractall(extract_dir)\n    return extracted_directories", "compilation_passed": true, "time": 0.0018169879913330078, "tests_passed": true, "error": null}
