{"code": "### BEGIN SOLUTION\n    sentences = re.split(r\"[.]\", text)\n    sentence_counts = {}\n    for i, sentence in enumerate(sentences):\n        words_in_sentence = 0\n        for word in sentence.split():\n            if word.lower() not in STOPWORDS:\n                words_in_sentence += 1\n        if words_in_sentence > 0:\n            sentence_counts[\"Sentence {}\".format(i + 1)] = words_in_sentence\n    series = pd.Series(sentence_counts)\n    return series\n    ### END SOLUTION", "compilation_passed": true, "time": 0.0013382434844970703, "tests_passed": true, "error": null}
{"code": "pass", "compilation_passed": true, "time": 0.0007140636444091797, "tests_passed": true, "error": null}
{"code": "# Your code here\n    raise NotImplementedError", "compilation_passed": true, "time": 0.0007338523864746094, "tests_passed": false, "error": "NotImplementedError"}
{"code": "# ... your code here\n    pass", "compilation_passed": true, "time": 0.0007979869842529297, "tests_passed": true, "error": null}
{"code": "sentences = re.split(r'[.?!]+', text)\n    sent_dict = dict()\n    for i in range(1,len(sentences)):\n        words = re.split(r'[^\\w]+', sentences[i])\n        if len(words) == 0:\n            continue\n        sent_dict[\"Sentence {}\".format(i)] = len([word for word in words if word not in STOPWORDS])\n    return pd.Series(sent_dict)", "compilation_passed": true, "time": 0.001458883285522461, "tests_passed": true, "error": null}
{"code": "# write your code here\n    sentences = re.split(r' *[\\.\\?!][\\'\"\\)\\]]* *', text)[:-1]\n    words_count = []\n    for sentence in sentences:\n        words = [word for word in sentence.split() if word not in STOPWORDS]\n        words_count.append(len(words))\n    sentence_names = [\"Sentence {}\".format(i+1) for i in range(len(sentences))]\n    return pd.Series(words_count, index=sentence_names)", "compilation_passed": true, "time": 0.0013630390167236328, "tests_passed": true, "error": null}
{"code": "# <COMPLETE>\n    raise NotImplementedError", "compilation_passed": true, "time": 0.0005867481231689453, "tests_passed": false, "error": "NotImplementedError"}
{"code": "### BEGIN SOLUTION\n    # Split the text into sentences\n    sentences = re.split(\"[.!?]\", text)\n    # Create an empty dictionary\n    dictionary = {}\n    # Loop over the sentences\n    for i, sentence in enumerate(sentences, start=1):\n        # Split the sentence into words\n        words = sentence.split()\n        # Count the words that are not in the stopwords list\n        word_count = len([word for word in words if word not in STOPWORDS])\n        # Add the word count to the dictionary\n        dictionary[f\"Sentence {i}\"] = word_count\n    # Create a pandas Series from the dictionary\n    return pd.Series(dictionary)\n    ### END SOLUTION", "compilation_passed": true, "time": 0.0009379386901855469, "tests_passed": true, "error": null}
{"code": "# Your code here\n    sentences = re.split(r'[?.!]', text)\n    words = sentences.split(\" \")\n    words_list = list(words)\n\n    count_words = 0\n    for word in words_list:\n        if word not in STOPWORDS:\n            count_words += 1\n\n    sent_count = []\n    for i in sentences:\n        sent_count.append(count_words)\n\n    dict_sentences = dict(zip(sentences, sent_count))\n    sentences_df = pd.DataFrame(dict_sentences, index=sentences)\n\n    return sentences_df", "compilation_passed": true, "time": 0.0007090568542480469, "tests_passed": false, "error": "AttributeError"}
{"code": "# your code here\n    pass", "compilation_passed": true, "time": 0.0005960464477539062, "tests_passed": true, "error": null}
{"code": "# BEGIN SOLUTION\n    text_sentences = re.split(\"[.]\", text)\n    sentences = []\n    sentence_id = 0\n    for sentence in text_sentences:\n        if sentence:\n            sentence_id = sentence_id + 1\n            sentence = re.sub(\"[,!@#$%^&*()]\",\"\", sentence)\n            sentences.append(sentence)\n\n    sentence_dict = dict()\n    for sentence in sentences:\n        sentence = sentence.split(\" \")\n        sentence_count = 0\n        for word in sentence:\n            if word and word not in STOPWORDS:\n                sentence_count += 1\n        sentence_dict[sentence_id] = sentence_count\n\n    return pd.Series(sentence_dict, index=[f\"Sentence {i}\" for i in sentence_dict.keys()])\n    # END SOLUTION", "compilation_passed": true, "time": 0.001703023910522461, "tests_passed": true, "error": null}
{"code": "# Your code here\n    sentences = re.split('[.?!]', text)\n    sentences = [sentence for sentence in sentences if sentence != '']\n    sentence_counts = {}\n    for i in range(len(sentences)):\n        sentence = sentences[i]\n        words = sentence.split()\n        count = len([word for word in words if word not in STOPWORDS])\n        sentence_counts[\"Sentence {}\".format(i + 1)] = count\n    series = pd.Series(sentence_counts)\n    return series", "compilation_passed": true, "time": 0.0016140937805175781, "tests_passed": true, "error": null}
{"code": "# YOUR CODE HERE\n    return", "compilation_passed": true, "time": 0.0007669925689697266, "tests_passed": true, "error": null}
{"code": "# ====================================\n    # !!!! Your code here !!!!\n    # ====================================\n\n    pass", "compilation_passed": true, "time": 0.000701904296875, "tests_passed": true, "error": null}
{"code": "sentences = re.split(r'[.?!]+', text)\n    sentences = [sentence.strip() for sentence in sentences if sentence]\n    dict = {}\n    for i in range(len(sentences)):\n        words = sentences[i].split()\n        words = [word for word in words if word not in STOPWORDS]\n        if len(words) > 0:\n            dict[\"Sentence \" + str(i + 1)] = len(words)\n\n    return pd.Series(dict)", "compilation_passed": true, "time": 0.001512765884399414, "tests_passed": true, "error": null}
{"code": "sentences = re.split(\"[\\.\\?!]\", text)\n    output = {}\n\n    for i, sentence in enumerate(sentences):\n        if len(sentence) == 0:\n            continue\n\n        words = sentence.split(\" \")\n        words_to_consider = [word for word in words if word not in STOPWORDS]\n\n        output[f\"Sentence {i+1}\"] = len(words_to_consider)\n\n    return pd.Series(output)", "compilation_passed": true, "time": 0.001300811767578125, "tests_passed": true, "error": null}
{"code": "raise NotImplementedError", "compilation_passed": true, "time": 0.0008330345153808594, "tests_passed": false, "error": "NotImplementedError"}
{"code": "raise NotImplementedError\n\n    # return pd.Series(data={'Sentence 1': 0, 'Sentence 2': 0}, index=['Sentence 1', 'Sentence 2'])", "compilation_passed": true, "time": 0.0006997585296630859, "tests_passed": false, "error": "NotImplementedError"}
{"code": "raise NotImplementedError\n\n    # <--- ADD HERE YOUR SOLUTION\n\n    # <--- ADD HERE YOUR SOLUTION", "compilation_passed": true, "time": 0.0008072853088378906, "tests_passed": false, "error": "NotImplementedError"}
{"code": "# 1. Create a dictionary that will contain the sentence and the number of words in each sentence\n    # 2. Split the text into sentences\n    # 3. Count the number of words in each sentence\n    # 4. Return the dictionary\n    pass", "compilation_passed": true, "time": 0.0007469654083251953, "tests_passed": true, "error": null}
{"code": "raise Exception('Function not implemented')", "compilation_passed": true, "time": 0.0006291866302490234, "tests_passed": false, "error": "Exception"}
{"code": "pass # ADD YOUR CODE HERE", "compilation_passed": true, "time": 0.0007319450378417969, "tests_passed": true, "error": null}
{"code": "# write your code here\n    return df", "compilation_passed": true, "time": 0.0007190704345703125, "tests_passed": false, "error": "NameError"}
{"code": "## First, we split the text into sentences.\n    sentences = re.split(\"[\\.]\",text)\n    ## Then, we create a dictionary where the keys are the sentences and the values are their lengths.\n    s_dic = {}\n    for sentence in sentences:\n        ## We ignore the empty sentences.\n        if sentence == \"\":\n            continue\n        sentence = sentence.strip()\n        words = sentence.split(\" \")\n        ## We ignore the words in the STOPWORDS list.\n        s_dic[sentence] = len([word for word in words if word not in STOPWORDS])\n\n    ## We create a pandas Series from the dictionary.\n    df = pd.DataFrame({\n        \"Sentence\":s_dic.keys(),\n        \"Length\":s_dic.values()\n    })\n    ## We set the index of the Series to the sentence numbers.\n    df.index = [\"Sentence {}\".format(i) for i in range(1,df.shape[0]+1)]\n    ## We return the Series.\n    return df[\"Length\"]\n\n", "compilation_passed": true, "time": 0.0014009475708007812, "tests_passed": true, "error": null}
{"code": "# -----------------------------------------------------------------------\n    # TASK: implement the function.\n    # -----------------------------------------------------------------------\n    # TO IMPLEMENT\n    # -----------------------------------------------------------------------\n\n    return 0", "compilation_passed": true, "time": 0.0006620883941650391, "tests_passed": true, "error": null}
{"code": "raise Exception('TODO')", "compilation_passed": true, "time": 0.0006687641143798828, "tests_passed": false, "error": "Exception"}
{"code": "raise NotImplementedError(\"Your solution code is missing\")", "compilation_passed": true, "time": 0.0006108283996582031, "tests_passed": false, "error": "NotImplementedError"}
{"code": "### BEGIN SOLUTION\n    sentences = re.findall(r'[^.]*?\\.',text)\n    sentences = [x for x in sentences if x != \" \"]\n    sentence_num = [\"Sentence \" + str(x) for x in range(1,len(sentences)+1)]\n    word_count = [len([x for x in sentence.split() if x not in STOPWORDS]) for sentence in sentences]\n    return pd.Series(word_count,index=sentence_num)\n    ### END SOLUTION", "compilation_passed": true, "time": 0.0012710094451904297, "tests_passed": true, "error": null}
