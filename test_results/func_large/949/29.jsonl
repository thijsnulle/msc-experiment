{"code": "np.random.seed(seed)\n    random_matrix = np.random.rand(rows, columns)\n    return pd.DataFrame(random_matrix)", "compilation_passed": true, "time": 0.0020296573638916016, "tests_passed": true, "error": null}
{"code": "if seed:\n        np.random.seed(seed)\n    random_values = np.random.rand(rows, columns)\n    df = pd.DataFrame(random_values)\n    return df", "compilation_passed": true, "time": 0.002019166946411133, "tests_passed": true, "error": null}
{"code": "if seed is not None:\n        np.random.seed(seed)\n    matrix = np.random.rand(rows, columns)\n    df = pd.DataFrame(matrix)\n    return df", "compilation_passed": true, "time": 0.001987934112548828, "tests_passed": true, "error": null}
{"code": "if seed is not None:\n        np.random.seed(seed)\n    data = np.random.rand(rows, columns)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.001978158950805664, "tests_passed": true, "error": null}
{"code": "if seed:\n        np.random.seed(seed)\n    matrix = np.random.rand(rows, columns)\n    df = pd.DataFrame(matrix)\n    return df", "compilation_passed": true, "time": 0.0019998550415039062, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    arr = np.random.rand(rows, columns)\n    df = pd.DataFrame(arr)\n    return df", "compilation_passed": true, "time": 0.002009153366088867, "tests_passed": true, "error": null}
{"code": "if seed is not None:\n        np.random.seed(seed)\n\n    df = pd.DataFrame(np.random.rand(rows, columns))\n\n    return df", "compilation_passed": true, "time": 0.0019736289978027344, "tests_passed": true, "error": null}
{"code": "# Set the seed for random number generation if provided\n    if seed:\n        np.random.seed(seed)\n\n    # Create a matrix of random values\n    matrix = np.random.rand(rows, columns)\n\n    # Create a DataFrame from the matrix\n    df = pd.DataFrame(matrix)\n\n    return df", "compilation_passed": true, "time": 0.002135753631591797, "tests_passed": true, "error": null}
{"code": "# Set random seed if provided\n    if seed:\n        np.random.seed(seed)\n\n    # Generate random values as a matrix\n    matrix = np.random.random([rows, columns])\n\n    # Convert the matrix to a Pandas DataFrame\n    df = pd.DataFrame(matrix)\n\n    # Return the DataFrame\n    return df", "compilation_passed": true, "time": 0.0020139217376708984, "tests_passed": true, "error": null}
{"code": "if seed is not None:\n        np.random.seed(seed)\n    matrix = np.random.random((rows, columns))\n    return pd.DataFrame(matrix)", "compilation_passed": true, "time": 0.001973867416381836, "tests_passed": true, "error": null}
{"code": "if seed:\n        np.random.seed(seed)\n    matrix = np.random.random((rows, columns))\n    df = pd.DataFrame(matrix)\n    return df", "compilation_passed": true, "time": 0.0019741058349609375, "tests_passed": true, "error": null}
{"code": "if seed is not None:\n        np.random.seed(seed)\n    mat = np.random.rand(rows, columns)\n    df = pd.DataFrame(mat)\n    return df", "compilation_passed": true, "time": 0.0019860267639160156, "tests_passed": true, "error": null}
{"code": "if seed is not None:\n        np.random.seed(seed)\n    # create a matrix of given dimensions with random values between 0 and 1\n    df = pd.DataFrame(np.random.rand(rows, columns))\n    return df", "compilation_passed": true, "time": 0.0019638538360595703, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n\n    df = pd.DataFrame(np.random.rand(rows, columns))\n\n    return df", "compilation_passed": true, "time": 0.0019502639770507812, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n\n    # Generate random values as a 2D array\n    values = np.random.rand(rows, columns)\n\n    # Create a DataFrame from the 2D array\n    df = pd.DataFrame(values)\n\n    return df", "compilation_passed": true, "time": 0.0019588470458984375, "tests_passed": true, "error": null}
{"code": "if seed:\n        np.random.seed(seed)\n    return pd.DataFrame(np.random.rand(rows, columns))", "compilation_passed": true, "time": 0.001950979232788086, "tests_passed": true, "error": null}
{"code": "if seed is not None:\n        np.random.seed(seed)\n    matrix = np.random.rand(rows, columns)\n    return pd.DataFrame(matrix)", "compilation_passed": true, "time": 0.0019876956939697266, "tests_passed": true, "error": null}
{"code": "# Set the random seed for reproducible results\n    np.random.seed(seed)\n\n    # Generate the matrix with random values between 0 and 1\n    matrix = np.random.rand(rows, columns)\n\n    # Convert the matrix to a DataFrame with column and row names\n    df = pd.DataFrame(matrix)\n\n    return df", "compilation_passed": true, "time": 0.001965045928955078, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    result = np.random.rand(rows, columns)\n    return pd.DataFrame(result)", "compilation_passed": true, "time": 0.0019659996032714844, "tests_passed": true, "error": null}
{"code": "# set random seed for reproducibility\n    np.random.seed(seed)\n    # generate random matrix\n    matrix = np.random.random((rows, columns))\n    # convert matrix to DataFrame\n    df = pd.DataFrame(matrix)\n    return df", "compilation_passed": true, "time": 0.0020530223846435547, "tests_passed": true, "error": null}
{"code": "if seed:\n        np.random.seed(seed)\n\n    matrix = np.random.rand(rows, columns)\n    df = pd.DataFrame(matrix)\n    return df", "compilation_passed": true, "time": 0.001955747604370117, "tests_passed": true, "error": null}
{"code": "if seed is not None:\n        np.random.seed(seed)\n    a = np.random.rand(rows, columns)\n    return pd.DataFrame(a)", "compilation_passed": true, "time": 0.001967906951904297, "tests_passed": true, "error": null}
{"code": "rng = np.random.default_rng(seed)\n    matrix = rng.uniform(low=0, high=1, size=(rows, columns))\n    df = pd.DataFrame(matrix)\n    return df", "compilation_passed": true, "time": 0.002115964889526367, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    matrix = np.random.random((rows, columns))\n    df = pd.DataFrame(matrix)\n    return df", "compilation_passed": true, "time": 0.0019750595092773438, "tests_passed": true, "error": null}
{"code": "rng = np.random.RandomState(seed)\n    result = rng.rand(rows, columns)\n    return pd.DataFrame(result)", "compilation_passed": true, "time": 0.0024557113647460938, "tests_passed": true, "error": null}
{"code": "if seed is not None:\n        np.random.seed(seed)\n    return pd.DataFrame(np.random.rand(rows, columns))", "compilation_passed": true, "time": 0.0019676685333251953, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    df = pd.DataFrame(np.random.random((rows, columns)))\n    return df", "compilation_passed": true, "time": 0.001962900161743164, "tests_passed": true, "error": null}
