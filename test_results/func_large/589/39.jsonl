{"code": "# Generate random data points within the specified range\n    data = np.random.rand(SIZE, 2) * RANGE\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Create a scatter plot of the data points with different colors for each cluster\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='rainbow')\n    # Highlight the centroids of each cluster\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1],\n                marker='*', c='black', s=200)\n    return data, kmeans", "compilation_passed": true, "time": 0.024045944213867188, "tests_passed": true, "error": null}
{"code": "# Generate random points\n    points = np.random.randint(-RANGE, RANGE, (SIZE, 2))\n\n    # Perform K-means clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0).fit(points)\n\n    # Create scatter plot\n    for i in range(CLUSTERS):\n        # Plot clustered data points for each cluster\n        plt.scatter(points[kmeans.labels_ == i, 0], points[kmeans.labels_ == i, 1], s=50, alpha=0.5, label=f\"Cluster {i}\")\n        # Highlight cluster centroids\n        plt.scatter(\n            kmeans.cluster_centers_[i, 0],\n            kmeans.cluster_centers_[i, 1],\n            marker=\"X\",\n            c=\"r\",\n            s=100,\n            label=f\"Centroid {i}\",\n        )\n\n    plt.legend()\n    plt.show()\n\n    return points, kmeans", "compilation_passed": true, "time": 0.0335080623626709, "tests_passed": true, "error": null}
{"code": "# Generate random points within specified range and size\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0).fit(data)\n    # Plot the clustered points and centroids\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='tab20b')\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=200, linewidths=3, color='black')\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.017922163009643555, "tests_passed": true, "error": null}
{"code": "# Generate random points\n    data = np.random.rand(SIZE, 2) * RANGE\n\n    # KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n\n    # Create a scatter plot\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis')\n\n    # Plot the centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='red')\n\n    return data, kmeans", "compilation_passed": true, "time": 0.017484188079833984, "tests_passed": true, "error": null}
{"code": "data = np.random.randint(0, RANGE, (SIZE, 2))\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0).fit(data)\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='tab20')\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='red')\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.01970529556274414, "tests_passed": true, "error": null}
{"code": "# Generate random data points\n    data = np.random.randint(0, RANGE, (SIZE, 2))\n    # Initialize and fit the KMeans model\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    # Plot the clusters\n    for i, x in enumerate(kmeans.cluster_centers_):\n        plt.scatter(data[np.where(kmeans.labels_ == i), 0],\n                    data[np.where(kmeans.labels_ == i), 1], cmap='brg', alpha=0.5)\n        plt.scatter(x[0], x[1], c='black')\n    plt.title(\"Scatter plot of randomly generated points and Kmeans clusters\")\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.03747391700744629, "tests_passed": true, "error": null}
{"code": "data = np.random.rand(SIZE, 2) * RANGE\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=42)\n    kmeans.fit(data)\n\n    # Generate the plot\n    plt.scatter(\n        data[:, 0],\n        data[:, 1],\n        c=kmeans.labels_,\n        cmap=\"rainbow\",\n        alpha=0.9\n    )\n    plt.scatter(\n        kmeans.cluster_centers_[:, 0],\n        kmeans.cluster_centers_[:, 1],\n        color=\"black\",\n        marker=\"x\"\n    )\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.019894123077392578, "tests_passed": true, "error": null}
{"code": "# Generate a set of 2D random points within a specified range and size\n    data = np.random.rand(SIZE, 2) * RANGE\n\n    # Fit the KMeans clustering algorithm to the data points\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n\n    # Plot the clustered data points with cluster centroids highlighted\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap=plt.cm.rainbow)\n    plt.scatter(\n        kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], color=\"black\"\n    )\n    plt.show()\n\n    # Return the data array and fitted KMeans model\n    return data, kmeans", "compilation_passed": true, "time": 0.01725006103515625, "tests_passed": true, "error": null}
{"code": "data = np.array([[np.random.randint(-RANGE, RANGE), np.random.randint(-RANGE, RANGE)] for i in range(SIZE)])\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n\n    # Plot the clustered data points\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis')\n\n    # Plot the cluster centroids\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='red', s=200, marker='*')\n    plt.show()\n\n    return data, kmeans", "compilation_passed": true, "time": 0.019012928009033203, "tests_passed": true, "error": null}
{"code": "# Generate a random set of 2D points within a specified range and size.\n    data = np.array([np.random.rand(SIZE) * RANGE,\n                     np.random.rand(SIZE) * RANGE]).T\n    # Apply the K-means clustering algorithm.\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0).fit(data)\n    # Display the clusters of points in a scatter plot\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis')\n    # Display the centroids of the clusters\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black')\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.016638994216918945, "tests_passed": true, "error": null}
{"code": "# Generate random points\n    x1 = np.random.randint(0, RANGE, SIZE)\n    x2 = np.random.randint(0, RANGE, SIZE)\n    data = np.array([x1, x2]).T\n\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0)\n    kmeans.fit(data)\n\n    # Plot the clusters and centroids\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c=\"red\", s=100)\n\n    # Show the plot\n    plt.show()\n\n    return data, kmeans", "compilation_passed": true, "time": 0.019709110260009766, "tests_passed": true, "error": null}
{"code": "# Generate random points in 2D within the specified range and size\n    data = np.random.rand(SIZE, 2) * RANGE\n\n    # Initialize the KMeans algorithm with 5 clusters\n    kmeans = KMeans(n_clusters=CLUSTERS)\n\n    # Fit the KMeans algorithm to the data\n    kmeans.fit(data)\n\n    # Create a scatter plot of the points, with each cluster represented by a different color\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='rainbow')\n\n    # Plot the centroids of the clusters in red\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1],\n                marker='*', c='red', s=200)\n\n    # Show the plot\n    plt.show()\n\n    # Return the numpy array of data points and the fitted KMeans model\n    return data, kmeans", "compilation_passed": true, "time": 0.021009206771850586, "tests_passed": true, "error": null}
{"code": "# Generate a set of 2D random points\n    data = np.random.randint(-RANGE, RANGE, (SIZE, 2))\n    # Perform KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0).fit(data)\n    # Plot the results\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis')\n    plt.scatter(kmeans.cluster_centers_[:, 0],\n                kmeans.cluster_centers_[:, 1],\n                c='black', marker='+')\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.012209892272949219, "tests_passed": true, "error": null}
{"code": "data = np.random.random((SIZE, 2)) * RANGE\n\n    # apply KMeans clustering to the data\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0)\n    kmeans = kmeans.fit(data)\n\n    # plot the results\n    fig, ax = plt.subplots()\n\n    # plot each cluster with a different color\n    for i in range(CLUSTERS):\n        points = data[kmeans.labels_ == i]\n        ax.scatter(points[:, 0], points[:, 1], label=f\"Cluster {i}\")\n\n    # plot the centroids\n    ax.scatter(\n        kmeans.cluster_centers_[:, 0],\n        kmeans.cluster_centers_[:, 1],\n        marker=\"x\",\n        color=\"black\",\n        s=200,\n        alpha=0.7,\n    )\n\n    plt.title(\"KMeans Clustering\")\n    plt.xlabel(\"X\")\n    plt.", "compilation_passed": false, "time": 0.0002491474151611328, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Create random points for data\n    data = np.random.rand(SIZE, 2) * RANGE\n\n    # Initialize and fit the KMeans model\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n\n    # Plot the clusters with centroids\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='X', s=200, c='r')\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.018457889556884766, "tests_passed": true, "error": null}
{"code": "# Generate random data with two features\n    data = np.random.rand(SIZE, 2) * RANGE\n\n    # Fit the KMeans model to the data\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0)\n    kmeans.fit(data)\n\n    # Plot the data points with each cluster displayed in a different color\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='rainbow')\n\n    # Plot the centroids of the clusters in red\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='*', s=100, c='red')\n\n    # Add labels and title to the plot\n    plt.xlabel(\"Feature 1\")\n    plt.ylabel(\"Feature 2\")\n    plt.title(\"Clustering of Random Data\")\n\n    # Show the plot\n    plt.show()\n\n    return data, kmeans", "compilation_passed": true, "time": 0.018221139907836914, "tests_passed": true, "error": null}
{"code": "# Generate random points within the specified range and size\n    points = RANGE * np.random.random((SIZE, 2))\n\n    # Fit K-Means clustering to the generated data\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=17).fit(points)\n\n    # Create a scatter plot of the data points with each cluster displayed in a different color\n    for i in range(len(kmeans.cluster_centers_)):\n        points_x = points[kmeans.labels_ == i, 0]\n        points_y = points[kmeans.labels_ == i, 1]\n        plt.scatter(points_x, points_y)\n\n    # Plot the centroids of the clusters\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=200, marker='x')\n    plt.title(\"K-Means Clustering\")\n    plt.show()\n\n    # Return the data points and fitted KMeans model\n    return points", "compilation_passed": true, "time": 0.008498907089233398, "tests_passed": false, "error": "ValueError"}
{"code": "data = np.random.rand(SIZE, 2) * RANGE\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    plt.scatter(\n        data[:, 0],\n        data[:, 1],\n        c=kmeans.labels_,\n        cmap='viridis'\n    )\n    plt.scatter(\n        kmeans.cluster_centers_[:, 0],\n        kmeans.cluster_centers_[:, 1],\n        color='black',\n        marker='x'\n    )\n    plt.xlabel('X')\n    plt.ylabel('Y')\n    plt.title('Clustered Points')\n    plt.show()\n\n    return data, kmeans", "compilation_passed": true, "time": 0.018523216247558594, "tests_passed": true, "error": null}
{"code": "# Generate random points within a specified range and size\n    x = np.random.randint(-RANGE, RANGE, SIZE)\n    y = np.random.randint(-RANGE, RANGE, SIZE)\n\n    # Combine the x and y values into a numpy array\n    data = np.array([x, y]).T\n\n    # Apply KMeans clustering to the data\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n\n    # Plot the results\n    colors = ['r', 'g', 'b', 'c', 'm']\n    for i in range(CLUSTERS):\n        cluster_mask = kmeans.labels_ == i\n        plt.scatter(data[cluster_mask, 0], data[cluster_mask, 1], c=colors[i])\n        plt.scatter(kmeans.cluster_centers_[i][0], kmeans.cluster_centers_[i][1], c='k', marker='x')\n\n    # Show the plot\n    plt.show()", "compilation_passed": true, "time": 0.008365154266357422, "tests_passed": false, "error": "TypeError"}
{"code": "# Create random data\n    x = np.random.randint(0, RANGE, size=(SIZE, 1))\n    y = np.random.randint(0, RANGE, size=(SIZE, 1))\n    data = np.append(x, y, axis=1)\n\n    # Cluster the data\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n\n    # Visualize the clusters\n    for i in range(CLUSTERS):\n        # Get the data points for this cluster\n        idx = np.where(kmeans.labels_ == i)\n        current = data[idx]\n\n        # Display the data points for this cluster with a different color\n        plt.scatter(current[:, 0], current[:, 1])\n\n        # Highlight the centroids of the clusters\n        centroid = kmeans.cluster_centers_[i]\n        plt.scatter(centroid[0], centroid[1], marker='x', s=200, c='r')\n\n    return data, kmeans\n\n", "compilation_passed": true, "time": 0.6751909255981445, "tests_passed": true, "error": null}
{"code": "# Generate random points\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Fit KMeans\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n    # Plot clustered data with centroids\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis')\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=200, c='red')\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.02301311492919922, "tests_passed": true, "error": null}
{"code": "# Generate random data points\n    data = np.random.random((SIZE, 2)) * RANGE\n\n    # Apply KMeans clustering to the data points\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n\n    # Plot the data points with different colors for each cluster\n    colors = ['red', 'green', 'blue', 'black', 'orange']\n    for i, (cluster, color) in enumerate(zip(kmeans.labels_, colors)):\n        x_i = data[cluster == i, 0]\n        y_i = data[cluster == i, 1]\n        plt.scatter(x_i, y_i, color=color)\n\n    # Plot the centroids of each cluster in red\n    for x_c, y_c in kmeans.cluster_centers_:\n        plt.scatter(x_c, y_c, c='r', marker='x', s=100, linewidths=10)\n\n    # Add labels and title to the plot\n    plt.xlabel", "compilation_passed": true, "time": 0.009712934494018555, "tests_passed": false, "error": "TypeError"}
{"code": "# Generate a set of random data points within a range and size\n    data = np.random.random((SIZE, 2)) * RANGE\n\n    # Fit the KMeans clustering algorithm on the data points\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n\n    # Plot the clustered data points\n    for cluster, color in zip(kmeans.cluster_centers_, ['r', 'g', 'b', 'c', 'm']):\n        points = data[kmeans.labels_ == cluster[0]]\n        plt.scatter(points[:, 0], points[:, 1], c=color, edgecolors='none', alpha=0.5)\n\n    # Display the centroid coordinates as red dots\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1],\n                c='red', edgecolors='none', s=100)\n\n    # Display the plot\n    plt.show()\n\n    # Return the data and fitted KMe", "compilation_passed": true, "time": 0.005896806716918945, "tests_passed": false, "error": "TypeError"}
{"code": "# Generate random data points within a specified range and size\n    data = np.array([[np.random.randint(0, RANGE), np.random.randint(0, RANGE)]\n                     for _ in range(SIZE)])\n    # Apply KMeans clustering with a specified number of clusters\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    # Generate scatter plot of clustered data points with different colors for each cluster\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    # Plot the centroids of each cluster as red stars\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker=\"*\", c=\"red\", s=300, linewidth=2,\n                label=\"Centroids\")\n    # Set axis labels and title and display the plot\n    plt.xlabel('x')\n    plt.ylabel('y')\n    plt.title('Clustered Data Points')\n    #", "compilation_passed": true, "time": 0.006577014923095703, "tests_passed": false, "error": "TypeError"}
{"code": "# Generate a set of random points in a 2D space\n    x = np.random.rand(SIZE) * RANGE\n    y = np.random.rand(SIZE) * RANGE\n    data = np.array([x, y]).T\n\n    # Apply K-Means clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0)\n    kmeans.fit(data)\n\n    # Plot the results\n    colors = plt.cm.rainbow(np.linspace(0, 1, CLUSTERS))\n    for i, color in enumerate(colors):\n        cluster = data[np.where(kmeans.labels_ == i)]\n        plt.scatter(cluster[:, 0], cluster[:, 1], c=color, edgecolors='k', alpha=0.5)\n        plt.scatter(kmeans.cluster_centers_[i][0], kmeans.cluster_centers_[i][1], c='k', marker=\"x\", s=200, alpha=0.8)\n    plt.show", "compilation_passed": true, "time": 0.008754253387451172, "tests_passed": false, "error": "TypeError"}
{"code": "# Generate random data points\n    X = np.random.rand(RANGE, SIZE).reshape(-1, 2)\n\n    # Fit the model with KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(X)\n\n    # Create a scatter plot\n    plt.scatter(X[:, 0], X[:, 1], c=kmeans.labels_)\n\n    # Add centroids\n    centroids = kmeans.cluster_centers_\n    plt.scatter(centroids[:, 0], centroids[:, 1], marker='x', s=100, c='red')\n\n    plt.show()\n    return X, kmeans", "compilation_passed": true, "time": 0.20480585098266602, "tests_passed": true, "error": null}
{"code": "# Generate random points within the specified range and size\n    points = np.random.randint(-RANGE, RANGE, (SIZE, 2))\n\n    # Apply KMeans clustering with 5 clusters\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(points)\n\n    # Create a scatter plot of the clustered points\n    for i in range(CLUSTERS):\n        cluster_data = points[kmeans.labels_ == i]\n        plt.plot(cluster_data[:, 0], cluster_data[:, 1], 'o', label=f\"Cluster {i+1}\")\n\n    # Plot the cluster centroids\n    plt.plot(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], 'ro', markersize=5,\n             label='Centroids', markerfacecolor='none', markeredgecolor='red', markeredgewidth=1)\n\n    # Show the plot\n    plt.legend(loc='best')\n    plt.grid", "compilation_passed": true, "time": 0.01460409164428711, "tests_passed": false, "error": "TypeError"}
{"code": "# Generate random 2D data\n    data = np.random.rand(SIZE, 2) * RANGE\n\n    # Use k-means clustering to identify 5 clusters\n    kmeans = KMeans(n_clusters=CLUSTERS)\n\n    # Fit the k-means model to the data\n    kmeans.fit(data)\n\n    # Plot the points and centroids\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x', s=200, c='red')\n    plt.show()\n\n    return data, kmeans", "compilation_passed": true, "time": 0.08452510833740234, "tests_passed": true, "error": null}
{"code": "# Generate random data\n    data = np.random.rand(SIZE, 2) * RANGE\n    # Apply kmeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0).fit(data)\n    # Plotting\n    for i in range(CLUSTERS):\n        plt.scatter(data[kmeans.labels_ == i, 0], data[kmeans.labels_ == i, 1])\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=200, c=None, marker=\"*\")\n    return (data, kmeans)", "compilation_passed": true, "time": 0.06413793563842773, "tests_passed": true, "error": null}
{"code": "# Generate random points and create a KMeans object\n    data = np.random.rand(SIZE, 2) * RANGE\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0)\n\n    # Fit the KMeans object to the data\n    kmeans = kmeans.fit(data)\n\n    # Plot the clusters with centroids\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis')\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='black')\n    plt.show()\n\n    # Return the data array and fitted KMeans object\n    return data, kmeans", "compilation_passed": true, "time": 0.02174997329711914, "tests_passed": true, "error": null}
