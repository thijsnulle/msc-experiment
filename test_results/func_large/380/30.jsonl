{"code": "extensions = []\n    for file in os.listdir(directory):\n        if os.path.isfile(os.path.join(directory, file)):\n            _, ext = os.path.splitext(file)\n            if ext not in extensions:\n                extensions.append(ext)\n                os.mkdir(os.path.join(directory, ext[1:]))\n            shutil.move(os.path.join(directory, file),\n                        os.path.join(directory, ext[1:], file))", "compilation_passed": true, "time": 0.002679586410522461, "tests_passed": false, "error": "FileExistsError"}
{"code": "extensions = set()\n    for item in os.listdir(directory):\n        _, ext = os.path.splitext(item)\n        if ext and '.' in ext:\n            extensions.add(ext)\n    for ext in extensions:\n        ext_dir = directory + '/' + ext[1:]  # Remove '.' from extension\n        os.mkdir(ext_dir)\n        for item in os.listdir(directory):\n            _, item_ext = os.path.splitext(item)\n            if item_ext == ext:\n                src = os.path.join(directory, item)\n                dest = os.path.join(ext_dir, item)\n                shutil.move(src, dest)", "compilation_passed": true, "time": 0.005676746368408203, "tests_passed": false, "error": "FileExistsError"}
{"code": "extensions = {}\n    for file in os.listdir(directory):\n        extension = os.path.splitext(file)[1][1:]\n        extensions.setdefault(extension, []).append(file)\n    for ext, files in extensions.items():\n        ext_dir = os.path.join(directory, ext)\n        os.makedirs(ext_dir, exist_ok=True)\n        for file in files:\n            src_path = os.path.join(directory, file)\n            dst_path = os.path.join(ext_dir, file)\n            shutil.move(src_path, dst_path)", "compilation_passed": true, "time": 0.005710124969482422, "tests_passed": true, "error": null}
{"code": "if directory and os.path.exists(directory):\n        dirs = os.listdir(directory)\n        for file in dirs:\n            path = os.path.join(directory, file)\n            if os.path.isfile(path):\n                if os.path.splitext(path)[-1] != '':\n                    ext = re.sub(r\"\\.\", \"\", os.path.splitext(path)[-1])\n                    os.chdir(directory)\n                    os.makedirs(ext, exist_ok=True)\n                    new_path = os.path.join(directory, ext, file)\n                    shutil.move(path, new_path)", "compilation_passed": true, "time": 0.004796743392944336, "tests_passed": true, "error": null}
{"code": "for filename in os.listdir(directory):\n        file_extension = re.search(\"\\.[a-zA-Z0-9]{3,4}$\", filename).group()\n        sub_dir = os.path.join(directory, file_extension)\n        if not os.path.exists(sub_dir):\n            os.mkdir(sub_dir)\n\n        file_path = os.path.join(directory, filename)\n        shutil.move(file_path, sub_dir)", "compilation_passed": true, "time": 0.002482891082763672, "tests_passed": true, "error": null}
{"code": "file_extensions = set([f.split('.')[-1] for f in os.listdir(directory) if '.' in f])\n    for ext in file_extensions:\n        ext_dir = os.path.join(directory, ext)\n        os.mkdir(ext_dir)\n        for f in os.listdir(directory):\n            if f.endswith(f'.{ext}'):\n                shutil.move(os.path.join(directory, f), ext_dir)", "compilation_passed": true, "time": 0.004966020584106445, "tests_passed": false, "error": "FileExistsError"}
{"code": "extensions = []\n    for file in os.listdir(directory):\n        extension = os.path.splitext(file)[1].lower()\n        extensions.append(extension)\n    extensions = sorted(list(set(extensions)))\n\n    for ext in extensions:\n        new_dir = os.path.join(directory, ext[1:])\n        os.mkdir(new_dir)\n\n        for file in os.listdir(directory):\n            file_ext = os.path.splitext(file)[1].lower()\n            if file_ext == ext:\n                shutil.move(os.path.join(directory, file), new_dir)", "compilation_passed": true, "time": 0.0029370784759521484, "tests_passed": false, "error": "FileExistsError"}
{"code": "# List all files in the directory\n    all_files = os.listdir(directory)\n\n    # Extract file extensions\n    extensions = [re.sub(r\".*\\.\", \"\", f) for f in all_files]\n\n    # Create new directories for each extension\n    new_dirs = {f\"{ext}\": [] for ext in set(extensions)}\n\n    # Move files to corresponding directories\n    for f, ext in zip(all_files, extensions):\n        if os.path.isfile(os.path.join(directory, f)):\n            if ext in new_dirs:\n                shutil.move(os.path.join(directory, f), os.path.join(directory, ext, f))", "compilation_passed": true, "time": 0.0019309520721435547, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "pattern = re.compile('\\.(\\w+)$')\n    if directory == \".\":\n        directory = os.getcwd()\n    elif directory == \"\":\n        raise ValueError(\"Directory name is empty\")\n    elif os.path.isfile(directory):\n        raise TypeError(f\"'{directory}' is a file\")\n    elif os.path.isdir(directory):\n        pass\n    else:\n        raise NotADirectoryError(f\"'{directory}' is not a directory\")\n    files = os.listdir(directory)\n    extensions = set()\n    for file in files:\n        if os.path.isfile(directory + \"/\" + file):\n            ext = pattern.search(file)\n            if ext is not None:\n                extensions.add(ext.group(1))\n    for ext in extensions:\n        os.mkdir(directory + \"/\" + ext)\n        for file in files:\n            if os.path.isfile(directory + \"/\" + file) and ext == pattern.search(file).group(1):\n                shutil.move(directory", "compilation_passed": false, "time": 0.00026702880859375, "tests_passed": false, "error": "SyntaxError"}
{"code": "for file_name in os.listdir(directory):\n        path = os.path.join(directory, file_name)\n        if os.path.isfile(path):\n            if '.' in file_name:\n                extension = re.findall(r'\\.([^/]+)', file_name)[-1]\n                new_dir = os.path.join(directory, extension)\n                if not os.path.isdir(new_dir):\n                    os.mkdir(new_dir)\n                shutil.move(path, os.path.join(new_dir, file_name))", "compilation_passed": true, "time": 0.0049800872802734375, "tests_passed": true, "error": null}
{"code": "# Initialize a dictionary to keep track of the directory names\n    dir_dict = {}\n\n    # Loop through all files in the directory\n    for file in os.listdir(directory):\n        # Check if the file has an extension\n        if '.' in file:\n            # Extract the extension of the file\n            ext = file.split('.')[-1]\n            # Create the corresponding directory if it does not exist\n            if ext not in dir_dict:\n                dir_dict[ext] = os.path.join(directory, ext)\n                os.makedirs(dir_dict[ext])\n            # Move the file to the corresponding directory\n            shutil.move(os.path.join(directory, file), dir_dict[ext])", "compilation_passed": true, "time": 0.004827022552490234, "tests_passed": false, "error": "FileExistsError"}
{"code": "# Get a list of all files in the directory\n    files = os.listdir(directory)\n\n    # Loop through each file and move it to a folder based on its extension\n    for f in files:\n        # Check if the file is a directory\n        if os.path.isdir(os.path.join(directory, f)):\n            continue\n\n        # Extract the file extension\n        extension = re.sub(r'^.*\\.(.*)', r'\\1', f)\n\n        # Create the folder if it doesn't exist\n        if not os.path.isdir(os.path.join(directory, extension)):\n            os.mkdir(os.path.join(directory, extension))\n\n        # Move the file to the corresponding folder\n        shutil.move(os.path.join(directory, f),\n                    os.path.join(directory, extension, f))", "compilation_passed": true, "time": 0.0028688907623291016, "tests_passed": false, "error": "FileExistsError"}
{"code": "if not os.path.exists(directory):\n        return\n    os.chdir(directory)\n    for file in os.listdir(directory):\n        ext = file.split('.')[-1] if '.' in file else ''\n        if os.path.isfile(file):\n            if not os.path.exists(ext):\n                os.mkdir(ext)\n            shutil.move(file, ext)", "compilation_passed": true, "time": 0.0035178661346435547, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "extensions = set()\n\n    for filename in os.listdir(directory):\n        _, ext = os.path.splitext(filename)\n        ext = ext[1:]\n        if ext:\n            extensions.add(ext)\n\n    for ext in extensions:\n        ext_dir = os.path.join(directory, ext)\n        os.makedirs(ext_dir, exist_ok=True)\n        for filename in os.listdir(directory):\n            _, ext = os.path.splitext(filename)\n            ext = ext[1:]\n            if ext == ext:\n                shutil.move(os.path.join(directory, filename), os.path.join(ext_dir, filename))\n\n    return None", "compilation_passed": true, "time": 0.0022649765014648438, "tests_passed": false, "error": "shutil.Error"}
{"code": "extensions = {}\n    for filename in os.listdir(directory):\n        name, ext = os.path.splitext(filename)\n        extensions[ext] = extensions.get(ext, []) + [filename]\n\n    for ext, files in extensions.items():\n        ext_dir = os.path.join(directory, ext[1:])\n        if not os.path.exists(ext_dir):\n            os.mkdir(ext_dir)\n        for filename in files:\n            shutil.move(os.path.join(directory, filename), os.path.join(ext_dir, filename))", "compilation_passed": true, "time": 0.006766080856323242, "tests_passed": true, "error": null}
{"code": "for file in os.listdir(directory):\n        file_path = os.path.join(directory, file)\n        if not os.path.isfile(file_path):\n            continue\n        _, file_extension = os.path.splitext(file_path)\n        file_extension = file_extension.lower()\n        if file_extension == '':\n            continue\n        dest_dir = os.path.join(directory, file_extension)\n        if not os.path.exists(dest_dir):\n            os.makedirs(dest_dir)\n        dest_path = os.path.join(dest_dir, file)\n        shutil.move(file_path, dest_path)", "compilation_passed": true, "time": 0.0026340484619140625, "tests_passed": true, "error": null}
{"code": "pattern = re.compile(r'[A-Za-z0-9_-]+\\.txt')\n    txt_files = list(filter(pattern.match, os.listdir(directory)))\n    # print(txt_files)\n    txt_dir = os.path.join(directory, 'txt')\n    if not os.path.exists(txt_dir):\n        os.mkdir(txt_dir)\n    for f in txt_files:\n        shutil.move(os.path.join(directory, f), txt_dir)", "compilation_passed": true, "time": 0.001934051513671875, "tests_passed": true, "error": null}
{"code": "file_extensions = set([os.path.splitext(f)[-1].replace(\".\", \"\") for f in os.listdir(directory)])\n    for ext in file_extensions:\n        os.makedirs(directory + '/' + ext, exist_ok=True)\n        for f in os.listdir(directory):\n            file_ext = os.path.splitext(f)[-1].replace(\".\", \"\")\n            if file_ext == ext:\n                shutil.move(directory + '/' + f, directory + '/' + ext + '/' + f)\n\n    return file_extensions", "compilation_passed": true, "time": 0.005333900451660156, "tests_passed": true, "error": null}
{"code": "dirs = []\n    for file in os.listdir(directory):\n        name, ext = os.path.splitext(file)\n        if ext not in dirs:\n            dirs.append(ext)\n            os.mkdir(f'{directory}/{ext[1:]}')\n\n        shutil.move(f'{directory}/{file}', f'{directory}/{ext[1:]}/{file}')", "compilation_passed": true, "time": 0.0029921531677246094, "tests_passed": false, "error": "FileExistsError"}
{"code": "if os.path.exists(directory):\n        # create dictionary of ext\n        ext_dict = {}\n\n        for file in os.listdir(directory):\n            match = re.search(r\"\\.[^.]+$\", file)\n            if match:\n                file_ext = match.group()\n                if file_ext not in ext_dict.keys():\n                    ext_dict[file_ext] = []\n                ext_dict[file_ext].append(file)\n\n        # create directories and move files to directories\n        for ext in ext_dict.keys():\n            os.mkdir(directory + '/' + ext[1:])\n            for file in ext_dict[ext]:\n                shutil.move(directory + '/' + file, directory + '/' + ext[1:] + '/' + file)\n    else:\n        print(f\"Error: Directory {directory} not found.\")", "compilation_passed": true, "time": 0.004754066467285156, "tests_passed": false, "error": "FileExistsError"}
{"code": "# Find all file paths in the directory\n    file_paths = []\n    for root, _, files in os.walk(directory):\n        for file in files:\n            file_paths.append(os.path.join(root, file))\n\n    # Sort file paths by extension and move the files to the corresponding directories\n    for file_path in file_paths:\n        # Extract file extension and directory name\n        match = re.search(r\"(\\.[^/.]+)$\", file_path)\n        extension = match.group(1) if match else \"\"\n        dir_name = directory + extension\n\n        # Create a new directory if it doesn't exist\n        if not os.path.isdir(dir_name):\n            os.mkdir(dir_name)\n\n        # Move the file to the corresponding directory\n        shutil.move(file_path, os.path.join(dir_name, os.path.basename(file_path)))", "compilation_passed": true, "time": 0.0021080970764160156, "tests_passed": true, "error": null}
{"code": "extensions = {}\n\n    for file_name in os.listdir(directory):\n        file_path = os.path.join(directory, file_name)\n        if os.path.isfile(file_path):\n            extension = os.path.splitext(file_name)[1][1:]\n            if extension in extensions:\n                extensions[extension].append(file_name)\n            else:\n                extensions[extension] = [file_name]\n\n    for extension, file_names in extensions.items():\n        extension_dir = os.path.join(directory, extension)\n        os.mkdir(extension_dir)\n        for file_name in file_names:\n            file_path = os.path.join(directory, file_name)\n            shutil.move(file_path, extension_dir)", "compilation_passed": true, "time": 0.003164052963256836, "tests_passed": false, "error": "FileExistsError"}
{"code": "extensions = {}\n    for file in os.listdir(directory):\n        if os.path.isfile(os.path.join(directory, file)):\n            ext = os.path.splitext(file)[1]\n            if ext != '':\n                if ext not in extensions:\n                    extensions[ext] = []\n                extensions[ext].append(file)\n\n    for ext, files in extensions.items():\n        ext_dir = directory + ext\n        if not os.path.exists(ext_dir):\n            os.makedirs(ext_dir)\n        for file in files:\n            shutil.move(os.path.join(directory, file), ext_dir)", "compilation_passed": true, "time": 0.0020449161529541016, "tests_passed": true, "error": null}
{"code": "# check if the directory exists\n    if os.path.exists(directory):\n        # loop through all files in the directory\n        for file in os.listdir(directory):\n            # get the file extension\n            file_ext = os.path.splitext(file)[1]\n            # if the file has an extension\n            if file_ext != '':\n                # create a new directory for the extension\n                if not os.path.exists(directory + file_ext):\n                    os.mkdir(directory + file_ext)\n                # move the file to the corresponding directory\n                shutil.move(directory + '/' + file, directory + file_ext + '/' + file)\n    else:\n        print('The directory does not exist.')", "compilation_passed": true, "time": 0.001905202865600586, "tests_passed": true, "error": null}
{"code": "os.chdir(directory)\n    list_of_files = os.listdir()\n    for file in list_of_files:\n        if os.path.isfile(file):\n            extension = re.search(r'\\.\\w+$', file)\n            if extension:\n                os.mkdir(extension.group())\n                os.rename(file, extension.group() + \"/\" + file)", "compilation_passed": true, "time": 0.0022170543670654297, "tests_passed": true, "error": null}
{"code": "# Create a list of all files in the directory\n    files = os.listdir(directory)\n\n    # Loop through each file\n    for file in files:\n        # Split the file name and extension using the 're' module\n        split_file = re.split(r'\\.', file)\n        # If the file has an extension and the extension is not 'DS_Store'\n        if len(split_file) > 1 and split_file[1] != 'DS_Store':\n            # Create a new directory for the extension if it doesn't exist\n            if not os.path.isdir(os.path.join(directory, split_file[1])):\n                os.mkdir(os.path.join(directory, split_file[1]))\n            # Move the file to the corresponding directory\n            shutil.move(os.path.join(directory, file), os.path.join(directory, split_file[1]))", "compilation_passed": true, "time": 0.004873991012573242, "tests_passed": true, "error": null}
{"code": "# Find all the files in the directory and subdirectories\n    all_files = [f for f in glob.iglob(directory + \"/**\", recursive=True) if os.path.isfile(f)]\n\n    for f in all_files:\n        # Extract the file extension\n        ext = f.split(\".\")[-1]\n\n        # Create a new directory for the file extension if it does not exist\n        if not os.path.exists(os.path.join(directory, ext)):\n            os.makedirs(os.path.join(directory, ext))\n\n        # Move the file to the corresponding directory\n        shutil.move(f, os.path.join(directory, ext, os.path.basename(f)))", "compilation_passed": true, "time": 0.0017781257629394531, "tests_passed": false, "error": "NameError"}
{"code": "# Create a dictionary of file extensions\n    extensions = {}\n    for file_name in os.listdir(directory):\n        if os.path.isfile(os.path.join(directory, file_name)):\n            base_name, ext = os.path.splitext(file_name)\n            if ext not in extensions:\n                extensions[ext] = []\n            extensions[ext].append(file_name)\n\n    # Move the files to the corresponding directories\n    for ext, file_names in extensions.items():\n        if ext != '':\n            ext = ext[1:]\n            new_dir = os.path.join(directory, ext)\n            if not os.path.exists(new_dir):\n                os.makedirs(new_dir)\n            for file_name in file_names:\n                shutil.move(os.path.join(directory, file_name), os.path.join(new_dir, file_name))", "compilation_passed": true, "time": 0.006382942199707031, "tests_passed": true, "error": null}
{"code": "file_ext = list(map(lambda x: re.search(r'[^.]*$', x).group(0), os.listdir(directory)))\n    file_ext = list(filter(lambda x: x is not None, file_ext))\n    dirs = [directory + '/' + x for x in set(file_ext)]\n    for directory in dirs:\n        if not os.path.isdir(directory):\n            os.mkdir(directory)\n    for file in os.listdir(directory):\n        extension = re.search(r'[^.]*$', file).group(0)\n        file_path = directory + '/' + file\n        destination = directory + '/' + extension + '/' + file\n        shutil.move(file_path, destination)", "compilation_passed": true, "time": 0.0028100013732910156, "tests_passed": false, "error": "FileExistsError"}
{"code": "# Find all files in the directory\n    files = os.listdir(directory)\n\n    # Iterate over the files\n    for f in files:\n        # Check if it is a file\n        if os.path.isfile(os.path.join(directory, f)):\n            # Extract the file extension\n            ext = os.path.splitext(f)[1]\n            # Create a new directory for the extension if not already exists\n            if not os.path.exists(os.path.join(directory, ext[1:])):\n                os.makedirs(os.path.join(directory, ext[1:]))\n            # Move the file to the corresponding directory\n            shutil.move(os.path.join(directory, f), os.path.join(directory, ext[1:], f))", "compilation_passed": true, "time": 0.0049059391021728516, "tests_passed": true, "error": null}
