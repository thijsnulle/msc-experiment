{"code": "if not isinstance(length, int) or not isinstance(num_digits, int):\n        raise TypeError('Length and num_digits must be integers.')\n    if length <= 0 or num_digits < 0 or num_digits > length:\n        raise ValueError('Invalid value for length or num_digits.')\n\n    num_letters = length - num_digits\n    password = ''.join(random.sample(LETTERS + DIGITS, length))\n    return password", "compilation_passed": true, "time": 0.0006651878356933594, "tests_passed": true, "error": null}
{"code": "# Validate input\n    if not isinstance(length, int) or not isinstance(num_digits, int):\n        raise TypeError(\"Inputs must be integers.\")\n    if length < 0 or num_digits < 0:\n        raise ValueError(\"Length and number of digits must be positive.\")\n    if length < num_digits:\n        raise ValueError(\"Total length of password must be greater than or equal to number of digits.\")\n\n    # Generate password\n    password = \"\"\n    digits_count = 0\n\n    while len(password) < length:\n        char = random.choice(LETTERS + DIGITS)\n        if char in DIGITS:\n            digits_count += 1\n        password += char\n\n        # If we've reached the specified number of digits, stop adding digits\n        if digits_count == num_digits:\n            password += \"\".join(set(LETTERS) - set(password))\n            break\n\n    # Randomize password\n    password = list(password)\n    random.shuffle(password)", "compilation_passed": true, "time": 0.0008227825164794922, "tests_passed": false, "error": "TypeError"}
{"code": "if not isinstance(length, int) or length <= 0:\n        raise TypeError(\"'length' must be a positive integer\")\n\n    if not isinstance(num_digits, int) or num_digits < 0:\n        raise TypeError(\"'num_digits' must be a non-negative integer\")\n\n    if num_digits > length:\n        raise ValueError(\"'num_digits' cannot be greater than 'length'\")\n\n    # Generate a list of characters with the required length and number of digits\n    chars = [random.choice(DIGITS) for _ in range(num_digits)] + [\n        random.choice(LETTERS) for _ in range(length - num_digits)\n    ]\n\n    # Randomly shuffle the list of characters\n    random.shuffle(chars)\n\n    # Join the characters to form a string\n    return \"\".join(chars)", "compilation_passed": true, "time": 0.0006759166717529297, "tests_passed": false, "error": "TypeError"}
{"code": "# Check input parameters\n    assert num_digits <= length, \"The number of digits in the password cannot exceed the total length.\"\n\n    # Generate a password\n    chars = LETTERS + DIGITS\n    password = \"\".join(random.choices(chars, k=length))\n\n    # Convert a part of the password into numbers\n    for i in range(num_digits):\n        pos = random.randint(0, length - 1)\n        password = password[:pos] + random.choice(DIGITS) + password[pos + 1:]\n\n    # Shuffle the password\n    password = \"\".join(random.sample(password, length))\n\n    return password", "compilation_passed": true, "time": 0.0007021427154541016, "tests_passed": true, "error": null}
{"code": "if length <= 0 or num_digits < 0 or length < num_digits:\n        return \"Invalid input\"\n\n    # Generate random letters and digits\n    letters = random.choices(LETTERS, k=length - num_digits)\n    digits = random.choices(DIGITS, k=num_digits)\n\n    # Combine letters and digits\n    password = letters + digits\n\n    # Shuffle the password\n    random.shuffle(password)\n\n    # Join the password components\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0006079673767089844, "tests_passed": true, "error": null}
{"code": "if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be non-negative and less than or equal to the length.\")\n\n    # Generate random letters and digits\n    num_letters = length - num_digits\n    letters = random.sample(LETTERS, k=num_letters)\n    digits = random.sample(DIGITS, k=num_digits)\n\n    # Combine letters and digits\n    password = letters + digits\n    random.shuffle(password)\n\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0006501674652099609, "tests_passed": true, "error": null}
{"code": "# Check if the input is valid\n    if not isinstance(length, int) or length <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if not isinstance(num_digits, int) or num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and less than or equal to the total length\")\n\n    # Create a list of all possible characters, excluding ambiguous ones\n    chars = [c for c in LETTERS if c not in \"Ilo01\"] + [c for c in DIGITS if c not in \"01\"]\n\n    # Shuffle the characters to make the password more secure\n    random.shuffle(chars)\n\n    # Split the list into two parts, one for digits and the other for letters\n    digits = chars[:num_digits]\n    letters = chars[num_digits:num_digits+length-num_digits]\n\n    # Shuffle the lists to ensure variability\n    random.shuffle(digits)\n    random.", "compilation_passed": false, "time": 0.0001857280731201172, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Check if the length is a positive integer\n    if not isinstance(length, int) or length <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n\n    # Check if the number of digits is a non-negative integer and less than or equal to the length of the password\n    if not isinstance(num_digits, int) or num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and less than or equal to the total length of the password\")\n\n    # Generate a random password with specified length and number of digits\n    password = ''.join(random.sample(LETTERS + DIGITS, length - num_digits)) + ''.join(random.sample(DIGITS, num_digits))\n\n    # Shuffle the characters in the password to ensure variability\n    password = ''.join(random.sample(password, len(password)))\n\n    return password", "compilation_passed": true, "time": 0.0011000633239746094, "tests_passed": true, "error": null}
{"code": "# Check for valid length and num_digits inputs\n    if length <= 0 or num_digits < 0 or num_digits > length:\n        return \"Invalid input\"\n\n    # Create a list of letters and digits, and select the digits\n    char_list = LETTERS + DIGITS\n    digits = random.sample(DIGITS, num_digits)\n\n    # Select the remaining characters and concatenate them with the digits\n    letters = random.sample(char_list, length - num_digits)\n    password = digits + letters\n\n    # Shuffle the password and return it as a string\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0006158351898193359, "tests_passed": true, "error": null}
{"code": "if not isinstance(length, int) or length <= 0:\n        raise TypeError(\"length must be a positive integer\")\n    if not isinstance(num_digits, int) or num_digits < 0 or num_digits > length:\n        raise TypeError(\"num_digits must be a non-negative integer and less than or equal to length\")\n\n    # Generate random letters and digits\n    num_letters = length - num_digits\n    letters = random.choices(LETTERS, k=num_letters)\n    digits = random.choices(DIGITS, k=num_digits)\n\n    # Combine letters and digits\n    password = letters + digits\n\n    # Shuffle the password to ensure variability\n    random.shuffle(password)\n\n    # Convert the list to a string\n    password = ''.join(password)\n\n    return password", "compilation_passed": true, "time": 0.0007059574127197266, "tests_passed": false, "error": "TypeError"}
{"code": "# Check that the length and num_digits are valid\n    assert isinstance(length, int) and length > 0, \"Length must be a positive integer\"\n    assert isinstance(num_digits, int) and num_digits >= 0, \"Num_digits must be a non-negative integer\"\n    assert length >= num_digits, \"Length must be greater than or equal to num_digits\"\n\n    # Generate a list of letters and digits\n    chars = LETTERS + DIGITS\n\n    # Select random characters for the password\n    password = ''.join(random.choices(chars, k=length))\n\n    # Shuffle the password to ensure variability\n    password = ''.join(random.sample(password, k=length))\n\n    return password", "compilation_passed": true, "time": 0.00061798095703125, "tests_passed": true, "error": null}
{"code": "if not isinstance(length, int) or length <= 0:\n        raise ValueError(\"length must be a positive integer\")\n    if not isinstance(num_digits, int) or num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length\")\n\n    num_letters = length - num_digits\n    password = random.choices(LETTERS, k=num_letters) + random.choices(DIGITS, k=num_digits)\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0006241798400878906, "tests_passed": true, "error": null}
{"code": "if length <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be non-negative and less than or equal to length\")\n\n    # Generate the password\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length - num_digits))\n    password += ''.join(random.choice(DIGITS) for _ in range(num_digits))\n\n    # Shuffle the password to ensure variability\n    password_list = list(password)\n    random.shuffle(password_list)\n    password = ''.join(password_list)\n\n    return password", "compilation_passed": true, "time": 0.0007579326629638672, "tests_passed": true, "error": null}
{"code": "if not isinstance(length, int) or length <= 0:\n        raise TypeError(\"length must be a positive integer\")\n    if not isinstance(num_digits, int) or num_digits < 0:\n        raise TypeError(\"num_digits must be a non-negative integer\")\n    if num_digits > length:\n        raise ValueError(\"num_digits must be less than or equal to length\")\n    letters_count = length - num_digits\n    password = random.sample(LETTERS, letters_count) + random.sample(DIGITS, num_digits)\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0006430149078369141, "tests_passed": false, "error": "TypeError"}
{"code": "if num_digits > length or num_digits < 0:\n        raise ValueError(\"The number of digits must be a non-negative integer and less than or equal to the total length of the password\")\n\n    chars = LETTERS\n    letters = list(chars)\n    password = []\n\n    for i in range(length):\n        if i < num_digits:\n            password.append(random.choice(DIGITS))\n            letters.remove(password[-1])\n        else:\n            password.append(random.choice(letters))\n            letters.remove(password[-1])\n\n    random.shuffle(password)\n\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007259845733642578, "tests_passed": false, "error": "ValueError"}
{"code": "if not isinstance(length, int) or length <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if not isinstance(num_digits, int) or num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and less than or equal to the total length of the password\")\n\n    num_letters = length - num_digits\n    letters = \"\".join(random.choice(LETTERS) for _ in range(num_letters))\n    digits = \"\".join(random.choice(DIGITS) for _ in range(num_digits))\n\n    password = \"\".join(random.sample(letters + digits, length))\n    return password", "compilation_passed": true, "time": 0.0006892681121826172, "tests_passed": true, "error": null}
{"code": "if not isinstance(length, int) or length <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n\n    if not isinstance(num_digits, int) or num_digits < 0 or num_digits > length:\n        raise ValueError(\n            \"Number of digits must be a non-negative integer and less than or equal to the total length\"\n        )\n\n    letters = string.ascii_letters\n    digits = string.digits\n    password = \"\"\n\n    # Generate a random password with the specified length and number of digits\n    password += \"\".join(random.sample(letters, length - num_digits))\n    password += \"\".join(random.sample(digits, num_digits))\n\n    # Shuffle the password to ensure variability\n    password = \"\".join(random.sample(password, len(password)))\n    return password", "compilation_passed": true, "time": 0.0008428096771240234, "tests_passed": true, "error": null}
{"code": "if not isinstance(length, int) or not isinstance(num_digits, int):\n        raise TypeError(\"Length and num_digits must be integers.\")\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n\n    num_letters = length - num_digits\n    letters = random.choices(LETTERS, k=num_letters)\n    digits = random.choices(DIGITS, k=num_digits)\n    password = ''.join(random.sample(letters + digits, length))\n    return password", "compilation_passed": true, "time": 0.0006918907165527344, "tests_passed": true, "error": null}
{"code": "if num_digits > length:\n        raise ValueError(\"The number of digits cannot be greater than the total length of the password.\")\n    num_letters = length - num_digits\n    password = ''.join(random.choices(LETTERS, k=num_letters) + random.choices(DIGITS, k=num_digits))\n    return password", "compilation_passed": true, "time": 0.0006229877471923828, "tests_passed": true, "error": null}
{"code": "if num_digits > length:\n        raise ValueError(\"The number of digits cannot exceed the total length of the password\")\n    if num_digits < 0:\n        raise ValueError(\"The number of digits must be a non-negative integer\")\n    if length <= 0:\n        raise ValueError(\"The total length of the password must be a positive integer\")\n    letters_count = length - num_digits\n    letters = [random.choice(LETTERS) for _ in range(letters_count)]\n    digits = [random.choice(DIGITS) for _ in range(num_digits)]\n    password = \"\".join(random.sample(letters + digits, length))\n    return password", "compilation_passed": true, "time": 0.0007319450378417969, "tests_passed": true, "error": null}
{"code": "# Validate input parameters\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if num_digits < 0:\n        raise ValueError(\"Number of digits must be non-negative\")\n    if num_digits > length:\n        raise ValueError(\"Number of digits cannot exceed the total length of the password\")\n\n    # Generate a random password with a specified number of digits\n    password = [random.choice(DIGITS) for _ in range(num_digits)]\n    password.extend([random.choice(LETTERS) for _ in range(length - num_digits)])\n\n    # Shuffle the password to ensure variability\n    random.shuffle(password)\n\n    return ''.join(password)", "compilation_passed": true, "time": 0.0006582736968994141, "tests_passed": true, "error": null}
{"code": "if num_digits > length:\n        raise ValueError(\"The number of digits must be less than or equal to the total length of the password.\")\n    num_letters = length - num_digits\n    password = random.choices(LETTERS + DIGITS, k=num_letters) + random.choices(DIGITS, k=num_digits)\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0006337165832519531, "tests_passed": true, "error": null}
{"code": "if not isinstance(length, int) or length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not isinstance(num_digits, int) or num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and less than or equal to the length.\")\n\n    password = ''.join(random.choices(LETTERS + DIGITS, k=length))\n    digits = ''.join(random.choices(DIGITS, k=num_digits))\n    password = ''.join(random.sample(password, length))\n    password = password.replace(digits, '', num_digits)\n    password = password[:length - num_digits] + digits\n    password = ''.join(random.sample(password, len(password)))\n\n    return password", "compilation_passed": true, "time": 0.0007910728454589844, "tests_passed": true, "error": null}
{"code": "if not isinstance(length, int) or not isinstance(num_digits, int):\n        raise TypeError(\"'length' and 'num_digits' must be integers\")\n    if length <= 0:\n        raise ValueError(\"'length' must be a positive integer\")\n    if num_digits < 0:\n        raise ValueError(\"'num_digits' must be a non-negative integer\")\n    if num_digits > length:\n        raise ValueError(\"'num_digits' must be less than or equal to 'length'\")\n\n    # Generate the password\n    password = ''.join(random.choices(LETTERS + DIGITS, k=length - num_digits))\n    password += ''.join(random.choices(DIGITS, k=num_digits))\n\n    # Shuffle the password to ensure variability\n    password = ''.join(random.sample(password, len(password)))\n\n    return password", "compilation_passed": true, "time": 0.0007131099700927734, "tests_passed": true, "error": null}
{"code": "if not isinstance(length, int) or length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n\n    if not isinstance(num_digits, int) or num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and less than or equal to the total length.\")\n\n    # Generate letters and digits\n    letters = [random.choice(LETTERS) for _ in range(length - num_digits)]\n    digits = [random.choice(DIGITS) for _ in range(num_digits)]\n\n    # Concatenate letters and digits and shuffle\n    password = letters + digits\n    random.shuffle(password)\n\n    # Join the shuffled password into a string and return it\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007159709930419922, "tests_passed": true, "error": null}
{"code": "if length <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and less than or equal to the total length of the password\")\n\n    # Generate letters and digits\n    letters = random.choices(LETTERS, k=length - num_digits)\n    digits = random.choices(DIGITS, k=num_digits)\n\n    # Combine letters and digits\n    password = letters + digits\n\n    # Shuffle the password\n    random.shuffle(password)\n\n    # Join the password and return it as a string\n    return ''.join(password)", "compilation_passed": true, "time": 0.0006058216094970703, "tests_passed": true, "error": null}
{"code": "if not isinstance(length, int) or not isinstance(num_digits, int):\n        raise TypeError(\"length and num_digits must be integers\")\n    if length <= 0:\n        raise ValueError(\"length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length\")\n\n    password = random.choices(LETTERS, k=length - num_digits) + random.choices(DIGITS, k=num_digits)\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0006909370422363281, "tests_passed": true, "error": null}
{"code": "if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0:\n        raise ValueError(\"Number of digits must be a non-negative integer.\")\n    if num_digits > length:\n        raise ValueError(\n            \"Number of digits must be less than or equal to length.\")\n\n    chars = LETTERS + DIGITS\n    password = ''.join(random.choice(chars) for _ in range(length))\n    digits = password[:num_digits]\n    letters = password[num_digits:]\n\n    shuffled = list(digits + letters)\n    random.shuffle(shuffled)\n    return ''.join(shuffled)", "compilation_passed": true, "time": 0.000701904296875, "tests_passed": true, "error": null}
{"code": "if not isinstance(length, int) or length <= 0:\n        raise TypeError(\"The length of the password must be a positive integer\")\n    if not isinstance(num_digits, int) or num_digits < 0 or num_digits > length:\n        raise TypeError(\"Number of digits in the password must be a non-negative integer and less than or equal to the total length of the password\")\n\n    # Generate a random password\n    password = ''.join(random.choice(LETTERS) for i in range(length - num_digits))\n    password += ''.join(random.choice(DIGITS) for i in range(num_digits))\n\n    # Shuffle the password to ensure variability\n    password_list = list(password)\n    random.shuffle(password_list)\n    password = ''.join(password_list)\n\n    return password", "compilation_passed": true, "time": 0.0007390975952148438, "tests_passed": false, "error": "TypeError"}
{"code": "if not isinstance(length, int) or length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not isinstance(num_digits, int) or num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num_digits must be a non-negative integer and less than or equal to length.\")\n    num_letters = length - num_digits\n    password = ''.join(random.choices(LETTERS, k=num_letters) + random.choices(DIGITS, k=num_digits))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007188320159912109, "tests_passed": false, "error": "TypeError"}
