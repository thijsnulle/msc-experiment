{"code": "key_counts = collections.Counter()\n    for filename in os.listdir(directory_path):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory_path, filename), \"r\") as file:\n                data = json.load(file)\n                key_counts.update(data.keys())\n    return key_counts", "compilation_passed": true, "time": 0.006849050521850586, "tests_passed": true, "error": null}
{"code": "key_counter = collections.Counter()\n\n    for file in os.listdir(directory_path):\n        if file.endswith(\".json\"):\n            with open(os.path.join(directory_path, file), \"r\") as f:\n                data = json.load(f)\n                key_counter.update(data.keys())\n\n    return dict(key_counter)", "compilation_passed": true, "time": 0.006905794143676758, "tests_passed": true, "error": null}
{"code": "# Initialize an empty dictionary to store the counts of keys\n    key_counts = dict()\n\n    # Iterate over all files in the specified directory\n    for filename in os.listdir(directory_path):\n        # Check if the file is a JSON file\n        if filename.endswith('.json'):\n            # Open the JSON file and read its data\n            with open(os.path.join(directory_path, filename), 'r') as file:\n                data = json.load(file)\n\n            # Update the key counts dictionary with the keys in the JSON file\n            for key in data.keys():\n                if key in key_counts:\n                    key_counts[key] += 1\n                else:\n                    key_counts[key] = 1\n\n    # Return the key counts dictionary\n    return key_counts", "compilation_passed": true, "time": 0.005882740020751953, "tests_passed": true, "error": null}
{"code": "total_counts = collections.Counter()\n\n    for filename in os.listdir(directory_path):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory_path, filename), 'r') as file:\n                data = json.load(file)\n                key_counts = collections.Counter(data)\n                total_counts.update(key_counts)\n\n    return dict(total_counts)", "compilation_passed": true, "time": 0.0028100013732910156, "tests_passed": false, "error": "TypeError"}
{"code": "result = collections.defaultdict(int)\n    for file in os.listdir(directory_path):\n        if file.endswith(\".json\"):\n            with open(os.path.join(directory_path, file)) as f:\n                try:\n                    data = json.load(f)\n                    for key in data.keys():\n                        result[key] += 1\n                except json.JSONDecodeError as e:\n                    print(f\"Error decoding JSON in file {file}: {e}\")\n    return result", "compilation_passed": true, "time": 0.006052970886230469, "tests_passed": true, "error": null}
{"code": "counter = collections.Counter()\n    for file in os.listdir(directory_path):\n        if file.endswith(\".json\"):\n            with open(os.path.join(directory_path, file), \"r\") as f:\n                counter.update(json.load(f))\n    return counter", "compilation_passed": true, "time": 0.002067089080810547, "tests_passed": false, "error": "TypeError"}
{"code": "key_counts = collections.defaultdict(int)\n\n    # Iterate over all files in the directory\n    for file_name in os.listdir(directory_path):\n        # Load each JSON file\n        with open(os.path.join(directory_path, file_name), \"r\") as file:\n            data = json.load(file)\n\n        # Count the total appearances of all keys\n        for key in data.keys():\n            key_counts[key] += 1\n\n    return dict(key_counts)", "compilation_passed": true, "time": 0.005662202835083008, "tests_passed": true, "error": null}
{"code": "counter = collections.Counter()\n\n    # Iterate through all the JSON files in the directory\n    for filename in os.listdir(directory_path):\n        if filename.endswith('.json'):\n            file_path = os.path.join(directory_path, filename)\n            with open(file_path, 'r') as f:\n                try:\n                    data = json.load(f)\n                    counter.update(data.keys())\n                except json.JSONDecodeError:\n                    print(f'Error: could not decode JSON file {file_path}')\n\n    return dict(counter)", "compilation_passed": true, "time": 0.005711793899536133, "tests_passed": true, "error": null}
{"code": "# Initialize the result dictionary\n    result_dict = {}\n\n    # Loop through all files in the directory\n    for filename in os.listdir(directory_path):\n        # Only process JSON files\n        if filename.endswith(\".json\"):\n            # Read the JSON file\n            with open(os.path.join(directory_path, filename), 'r') as f:\n                data = json.load(f)\n            # Count the keys in the JSON data\n            result_dict = {key: result_dict.get(key, 0) + 1 for key in data.keys()}\n\n    # Return the result dictionary\n    return result_dict", "compilation_passed": true, "time": 0.0021986961364746094, "tests_passed": true, "error": null}
{"code": "# Use a defaultdict with a default value of 0 to count the occurrences of keys\n    counts = collections.defaultdict(int)\n\n    # Iterate over all files in the directory\n    for file in os.listdir(directory):\n        if file.endswith('.json'):\n            # Load the JSON data from the file\n            with open(os.path.join(directory, file), 'r') as f:\n                data = json.load(f)\n\n            # Increment the count of each key in the JSON data\n            for key in data.keys():\n                counts[key] += 1\n\n    # Return the dictionary of key counts\n    return dict(counts)", "compilation_passed": true, "time": 0.001955747604370117, "tests_passed": false, "error": "NameError"}
{"code": "result = collections.Counter()\n    for file_name in os.listdir(directory_path):\n        if file_name.endswith('.json'):\n            with open(os.path.join(directory_path, file_name), 'r') as file:\n                result += collections.Counter(json.load(file))\n    return dict(result)", "compilation_passed": true, "time": 0.0019741058349609375, "tests_passed": false, "error": "TypeError"}
{"code": "keys = []\n    for file in os.listdir(directory_path):\n        if file.endswith('.json'):\n            with open(os.path.join(directory_path, file), 'r') as f:\n                data = json.load(f)\n                keys.extend(list(data.keys()))\n    return dict(collections.Counter(keys))", "compilation_passed": true, "time": 0.005693912506103516, "tests_passed": true, "error": null}
{"code": "# Initialize an empty dictionary to store the counts for each key\n    key_counts = collections.defaultdict(int)\n\n    # Get a list of all the JSON files in the specified directory\n    json_files = [f for f in os.listdir(directory_path) if f.endswith(\".json\")]\n\n    # Loop through each JSON file in the directory\n    for json_file in json_files:\n        # Open the JSON file\n        with open(os.path.join(directory_path, json_file), 'r') as file:\n            # Load the JSON data into a Python dictionary\n            json_data = json.load(file)\n            # Loop through each key in the JSON data\n            for key in json_data:\n                # Increment the count for the key in the key_counts dictionary\n                key_counts[key] += 1\n\n    # Return the key_counts dictionary\n    return key_counts", "compilation_passed": true, "time": 0.006097316741943359, "tests_passed": true, "error": null}
{"code": "keys_counts = collections.Counter()\n    for file in os.listdir(directory_path):\n        if file.endswith('.json'):\n            with open(os.path.join(directory_path, file), 'r') as f:\n                json_data = json.load(f)\n                keys_counts.update(json_data.keys())\n    return dict(keys_counts)", "compilation_passed": true, "time": 0.006258964538574219, "tests_passed": true, "error": null}
{"code": "# Initialize an empty dictionary to hold the count of each key\n    key_counts = {}\n\n    # Loop through all files in the directory\n    for filename in os.listdir(directory_path):\n        # Check if the file is a JSON file\n        if filename.endswith(\".json\"):\n            # Open the file and load its data into a dictionary\n            file_path = os.path.join(directory_path, filename)\n            with open(file_path, \"r\") as file:\n                data = json.load(file)\n\n            # Loop through each key in the data dictionary\n            for key in data.keys():\n                # If the key is already in the key_counts dictionary, increment its count\n                if key in key_counts:\n                    key_counts[key] += 1\n                # Otherwise, add the key to the key_counts dictionary with a count of 1\n                else:\n                    key_counts[key] = 1\n\n    # Return the final key count dictionary\n    return key_counts", "compilation_passed": true, "time": 0.005725860595703125, "tests_passed": true, "error": null}
{"code": "counter = collections.Counter()\n    for file in os.listdir(directory_path):\n        if file.endswith(\".json\"):\n            with open(os.path.join(directory_path, file), \"r\") as f:\n                data = json.load(f)\n                counter.update(data.keys())\n    return dict(counter)", "compilation_passed": true, "time": 0.0054700374603271484, "tests_passed": true, "error": null}
{"code": "key_counts = collections.Counter()\n    for file in os.listdir(directory_path):\n        if file.endswith(\".json\"):\n            with open(os.path.join(directory_path, file), \"r\") as json_file:\n                json_data = json.load(json_file)\n                key_counts.update(json_data.keys())\n    return dict(key_counts)", "compilation_passed": true, "time": 0.005646705627441406, "tests_passed": true, "error": null}
{"code": "counter = collections.Counter()\n    for file in os.listdir(directory_path):\n        if file.endswith('.json'):\n            file_path = os.path.join(directory_path, file)\n            with open(file_path, 'r') as f:\n                data = json.load(f)\n                counter.update(data.keys())\n    return dict(counter)", "compilation_passed": true, "time": 0.005641937255859375, "tests_passed": true, "error": null}
{"code": "counts = collections.Counter()\n    for file_path in os.listdir(directory_path):\n        if file_path.endswith(\".json\"):\n            with open(os.path.join(directory_path, file_path), \"r\") as file:\n                data = json.load(file)\n                counts += collections.Counter(data.keys())\n    return dict(counts)", "compilation_passed": true, "time": 0.006863117218017578, "tests_passed": true, "error": null}
{"code": "result = collections.Counter()\n    for file in os.listdir(directory_path):\n        if file.endswith(\".json\"):\n            with open(os.path.join(directory_path, file), 'r') as f:\n                data = json.load(f)\n                result.update(data.keys())\n    return dict(result)", "compilation_passed": true, "time": 0.0066089630126953125, "tests_passed": true, "error": null}
{"code": "key_counts = collections.Counter()\n    for file in os.listdir(directory_path):\n        if file.endswith(\".json\"):\n            with open(f\"{directory_path}/{file}\", \"r\") as jsonfile:\n                data = json.load(jsonfile)\n            key_counts.update(data.keys())\n    return dict(key_counts)", "compilation_passed": true, "time": 0.29445910453796387, "tests_passed": true, "error": null}
{"code": "keys_counts = collections.Counter()\n\n    for file_name in os.listdir(directory_path):\n        if file_name.endswith(\".json\"):\n            file_path = os.path.join(directory_path, file_name)\n            with open(file_path, 'r') as file:\n                data = json.load(file)\n                keys_counts.update(data.keys())\n\n    return dict(keys_counts)", "compilation_passed": true, "time": 0.005799055099487305, "tests_passed": true, "error": null}
{"code": "# Initialize an empty dictionary for the counts\n    counts = collections.defaultdict(int)\n\n    # Iterate over each file in the directory\n    for file in os.listdir(directory):\n        # Check if the file ends with '.json' extension\n        if file.endswith('.json'):\n            # Open the file in read mode\n            with open(os.path.join(directory, file), 'r') as f:\n                # Load the JSON data from the file\n                data = json.load(f)\n\n            # Extract the keys from the JSON data\n            keys = data.keys()\n\n            # Increment the count for each key\n            for key in keys:\n                counts[key] += 1\n\n    # Convert the defaultdict to a regular dictionary for the output\n    return dict(counts)", "compilation_passed": true, "time": 0.0019381046295166016, "tests_passed": false, "error": "NameError"}
{"code": "counter = collections.Counter()\n\n    for file_name in os.listdir(directory_path):\n        if file_name.endswith(\".json\"):\n            with open(os.path.join(directory_path, file_name)) as file:\n                data = json.load(file)\n                counter.update(data.keys())\n\n    return dict(counter)", "compilation_passed": true, "time": 0.005833148956298828, "tests_passed": true, "error": null}
{"code": "# Count the total appearances of all keys in all JSON files in the specified directory\n    counter = collections.Counter()\n    for file in os.listdir(directory_path):\n        if file.endswith(\".json\"):\n            with open(os.path.join(directory_path, file), \"r\") as f:\n                json_data = json.load(f)\n                counter.update(json_data.keys())\n    return dict(counter)", "compilation_passed": true, "time": 0.006119966506958008, "tests_passed": true, "error": null}
{"code": "# create an empty dictionary to store the key counts\n    key_counts = {}\n\n    # loop through all JSON files in the specified directory\n    for filename in os.listdir(directory_path):\n        if filename.endswith(\".json\"):\n            # read the JSON file into a dictionary\n            with open(os.path.join(directory_path, filename), 'r') as file:\n                data = json.load(file)\n\n            # update the key counts dictionary with the keys from the JSON file\n            for key in data.keys():\n                if key in key_counts:\n                    key_counts[key] += 1\n                else:\n                    key_counts[key] = 1\n\n    # return the key counts dictionary\n    return key_counts", "compilation_passed": true, "time": 0.006300210952758789, "tests_passed": true, "error": null}
{"code": "keys = collections.Counter()\n\n    for filename in os.listdir(directory_path):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory_path, filename), 'r') as file:\n                data = json.load(file)\n                keys.update(data.keys())\n\n    return dict(keys)", "compilation_passed": true, "time": 0.006545305252075195, "tests_passed": true, "error": null}
{"code": "counts = collections.Counter()\n    for filename in os.listdir(directory_path):\n        if filename.endswith('.json'):\n            filepath = os.path.join(directory_path, filename)\n            with open(filepath, 'r') as file:\n                data = json.load(file)\n                for key in data:\n                    counts[key] += 1\n    return dict(counts)", "compilation_passed": true, "time": 0.006445169448852539, "tests_passed": true, "error": null}
{"code": "result = collections.defaultdict(int)\n    for file in os.listdir(directory_path):\n        if file.endswith(\".json\"):\n            with open(os.path.join(directory_path, file), 'r') as f:\n                data = json.load(f)\n                for key in data:\n                    result[key] += 1\n    return dict(result)", "compilation_passed": true, "time": 0.005824089050292969, "tests_passed": true, "error": null}
{"code": "counter = collections.Counter()\n    for filename in os.listdir(directory_path):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory_path, filename), 'r') as file:\n                data = json.load(file)\n                counter.update(key for key in data)\n    return dict(counter)", "compilation_passed": true, "time": 0.005877017974853516, "tests_passed": true, "error": null}
