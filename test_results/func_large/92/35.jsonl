{"code": "# Check if 'data' is a pd.DataFrame\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"Input data must be a pd.DataFrame.\")\n\n    # Check if 'n_clusters' is an integer greater than 1\n    if not isinstance(n_clusters, int) or n_clusters <= 1:\n        raise ValueError(\"n_clusters must be an integer greater than 1.\")\n\n    # Perform K-means clustering using sklearn.cluster.KMeans\n    kmeans = KMeans(n_clusters=n_clusters, random_state=42)\n    kmeans.fit(data)\n\n    # Assign cluster labels to each sample\n    cluster_labels = kmeans.labels_\n\n    # Create a scatter plot using matplotlib.pyplot\n    fig, ax = plt.subplots()\n    ax.scatter(data[data.columns[0]], data[data.columns[1]], c=cluster_labels, cmap='rainbow', edgecolors='k', alpha=0.7)\n    ax.set_xlabel(data.columns", "compilation_passed": false, "time": 0.00026702880859375, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"'data' must be a pandas DataFrame.\")\n    if not isinstance(n_clusters, int) or n_clusters < 2:\n        raise ValueError(\"'n_clusters' must be an integer greater than or equal to 2.\")\n\n    # Perform K-means clustering\n    kmeans = KMeans(n_clusters=n_clusters, random_state=0)\n    kmeans.fit(data)\n\n    # Create a scatter plot to visualize the clusters\n    fig, ax = plt.subplots()\n    ax.scatter(data.iloc[:, 0], data.iloc[:, 1], c=kmeans.labels_, cmap=plt.cm.rainbow)\n    ax.set_title(f\"K-Means Clustering ({n_clusters} clusters)\")\n\n    # Show the centroids\n    centroids = kmeans.cluster_centers_\n    ax.scatter(centroids[:, 0], centroids[:, 1], marker='x', s", "compilation_passed": false, "time": 0.0002319812774658203, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"data must be a pandas DataFrame\")\n\n    if not isinstance(n_clusters, int) or n_clusters <= 1:\n        raise ValueError(\"n_clusters must be an integer greater than 1\")\n\n    # Create a K-Means object and fit it to the data\n    kmeans = KMeans(n_clusters=n_clusters, random_state=0)\n    cluster_labels = kmeans.fit_predict(data)\n\n    # Create a scatter plot of the data points, color-coded by cluster\n    fig, ax = plt.subplots(figsize=(10, 10))\n    scatter = ax.scatter(data.iloc[:, 0], data.iloc[:, 1], c=cluster_labels, cmap='rainbow')\n\n    # Extract the PathCollection object from the scatter plot to modify its properties\n    path_collection = scatter.get_children()[0]\n    path_collection.set_edgecolors(\"black\")\n    path_collection.set_", "compilation_passed": true, "time": 0.014800071716308594, "tests_passed": false, "error": "IndexError"}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"'data' must be a pd.DataFrame\")\n\n    if not isinstance(n_clusters, int) or n_clusters <= 1:\n        raise ValueError(\"'n_clusters' must be an integer greater than 1\")\n\n    model = KMeans(n_clusters=n_clusters, random_state=11)\n    model.fit(data)\n    cluster_labels = model.labels_\n    centroids = model.cluster_centers_\n\n    # Create a scatter plot with different colors for each cluster\n    fig, ax = plt.subplots()\n    scatter = ax.scatter(data.iloc[:, 0], data.iloc[:, 1], c=cluster_labels, alpha=0.5)\n\n    # Create a legend\n    handles, labels = scatter.legend_elements()\n    ax.legend(handles, labels, loc='upper right', title='Clusters')\n\n    # Add the centroids as red stars\n    ax.scatter(centroids[:, 0]", "compilation_passed": false, "time": 0.0002949237823486328, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"'data' must be a pandas DataFrame\")\n\n    if not isinstance(n_clusters, int) or n_clusters <= 1:\n        raise ValueError(\"'n_clusters' must be an integer greater than 1\")\n\n    kmeans = KMeans(n_clusters=n_clusters, random_state=0).fit(data)\n\n    # Create a figure and axis\n    fig, ax = plt.subplots()\n\n    # Scatter plot\n    ax.scatter(data.iloc[:, 0], data.iloc[:, 1], c=kmeans.labels_)\n\n    # Set title and labels\n    ax.set_title(\"K-Means Clustering\")\n    ax.set_xlabel(data.columns[0])\n    ax.set_ylabel(data.columns[1])\n\n    # Get all PathCollection objects in the axis\n    path_collections = [child for child in ax.get_children() if isinstance(child, PathCollection)]\n\n    # Iterate", "compilation_passed": true, "time": 0.015443801879882812, "tests_passed": false, "error": "TypeError"}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"'data' must be a pd.DataFrame\")\n    if not isinstance(n_clusters, int) or n_clusters < 2:\n        raise ValueError(\"'n_clusters' must be an integer greater than 1\")\n\n    model = KMeans(n_clusters=n_clusters, random_state=42)\n    model.fit(data)\n    cluster_labels = model.labels_\n\n    fig, ax = plt.subplots()\n    scatter = ax.scatter(data[data.columns[0]], data[data.columns[1]], c=cluster_labels, alpha=0.5)\n\n    # Add centroids\n    centroids = model.cluster_centers_\n    ax.scatter(centroids[:, 0], centroids[:, 1], marker=\"x\", s=200, c=\"red\")\n\n    # Add colorbar\n    colorbar = fig.colorbar(scatter, ax=ax)\n    colorbar.set_label(\"Cluster\"", "compilation_passed": false, "time": 0.0002980232238769531, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"'data' must be a pd.DataFrame\")\n    if not isinstance(n_clusters, int) or n_clusters < 2:\n        raise ValueError(\"'n_clusters' must be an integer greater than 1\")\n\n    kmeans = KMeans(n_clusters=n_clusters)\n    kmeans.fit(data)\n\n    ax = data.plot.scatter(x=data.columns[0], y=data.columns[1], c=kmeans.labels_, cmap='tab20')\n\n    for i, (label, centroid) in enumerate(zip(kmeans.labels_.unique(), kmeans.cluster_centers_)):\n        centroid_x, centroid_y = centroid\n        ax.scatter(centroid_x, centroid_y, s=100, c=kmeans.predict([centroid]), marker='D', zorder=2)\n        ax.annotate(f\"C{i}\", xy=(centroid_x,", "compilation_passed": false, "time": 0.0002548694610595703, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Check the inputs\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"'data' must be a pd.DataFrame.\")\n    if not isinstance(n_clusters, int) or n_clusters <= 1:\n        raise ValueError(\"'n_clusters' must be an integer greater than 1.\")\n\n    # Perform K-means clustering\n    kmeans = KMeans(n_clusters=n_clusters)\n    kmeans.fit(data)\n\n    # Extract the cluster labels\n    labels = kmeans.labels_\n\n    # Generate the scatter plot\n    fig, ax = plt.subplots()\n    ax.scatter(data.iloc[:, 0], data.iloc[:, 1], c=labels, cmap='rainbow')\n\n    # Extract and plot the centroids\n    centroids = kmeans.cluster_centers_\n    ax.scatter(centroids[:, 0], centroids[:, 1], marker='*', c='black', s=200)\n\n    # Set plot labels and", "compilation_passed": true, "time": 0.015194892883300781, "tests_passed": false, "error": "TypeError"}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"'data' must be a pd.DataFrame.\")\n    if not isinstance(n_clusters, int) or n_clusters <= 1:\n        raise ValueError(\"'n_clusters' must be an integer greater than 1.\")\n\n    kmeans = KMeans(n_clusters=n_clusters)\n    kmeans.fit(data)\n\n    clusters = kmeans.labels_\n    centroids = kmeans.cluster_centers_\n\n    _, ax = plt.subplots()\n    scatter = ax.scatter(data[data.columns[0]], data[data.columns[1]], c=clusters, cmap='rainbow')\n\n    # Add a color bar to the plot\n    cbar = plt.colorbar(scatter)\n    cbar.set_label('Cluster Label')\n\n    ax.scatter(centroids[:, 0], centroids[:, 1], color='black', marker='x', s=200, linewidths=2)\n\n    ax.set_", "compilation_passed": true, "time": 0.020799875259399414, "tests_passed": false, "error": "AttributeError"}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"data must be a pd.DataFrame\")\n    if not isinstance(n_clusters, int) or n_clusters <= 1:\n        raise ValueError(\"n_clusters must be an integer greater than 1\")\n\n    # Perform K-means clustering\n    kmeans = KMeans(n_clusters=n_clusters)\n    kmeans.fit(data)\n    labels = kmeans.labels_\n    centroids = kmeans.cluster_centers_\n\n    # Generate the scatter plot\n    fig, ax = plt.subplots()\n    ax.scatter(data[data.columns[0]], data[data.columns[1]], c=labels, cmap='rainbow')\n    ax.scatter(centroids[:, 0], centroids[:, 1], c='black', s=300, marker='o')\n\n    # Set the title and labels\n    ax.set_title('K-Means Clustering')\n\n    # Display the plot\n    plt.show()\n\n    return labels,", "compilation_passed": true, "time": 0.015780925750732422, "tests_passed": false, "error": "ValueError"}
{"code": "# Check that data is a pd.DataFrame\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"Input 'data' must be a pd.DataFrame.\")\n\n    # Check that n_clusters is an integer greater than 1\n    if not isinstance(n_clusters, int) or n_clusters <= 1:\n        raise ValueError(\"Input 'n_clusters' must be an integer greater than 1.\")\n\n    # Perform K-means clustering using the sklearn library\n    kmeans = KMeans(n_clusters=n_clusters).fit(data)\n    labels = kmeans.labels_\n    centroids = kmeans.cluster_centers_\n\n    # Create a scatter plot of the samples and their cluster labels\n    plt.figure()\n    ax = plt.scatter(data.iloc[:, 0], data.iloc[:, 1], c=labels, alpha=0.8, edgecolor='k')\n\n    # Add centroids to the scatter plot\n    plt.scatter(centroids[:, 0], centroids[:, 1], marker", "compilation_passed": false, "time": 0.0002682209014892578, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"'data' must be a pandas DataFrame.\")\n    if not isinstance(n_clusters, int) or n_clusters <= 1:\n        raise ValueError(\"'n_clusters' must be an integer greater than 1.\")\n\n    model = KMeans(n_clusters=n_clusters)\n    model.fit(data)\n    labels = model.labels_\n    centroids = model.cluster_centers_\n\n    fig, ax = plt.subplots()\n    ax.scatter(data.iloc[:, 0], data.iloc[:, 1], c=labels, s=20)\n    ax.scatter(centroids[:, 0], centroids[:, 1], marker='x', s=40, c='r')\n    ax.set_xlabel('Feature 1')\n    ax.set_ylabel('Feature 2')\n    ax.set_title('K-Means Clustering')\n\n    return labels, ax", "compilation_passed": true, "time": 0.015149831771850586, "tests_passed": true, "error": null}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"Input 'data' must be a pd.DataFrame\")\n    if not isinstance(n_clusters, int) or n_clusters <= 1:\n        raise ValueError(\"Input 'n_clusters' must be an integer greater than 1\")\n    # Perform K-means clustering\n    kmeans = KMeans(n_clusters=n_clusters)\n    kmeans.fit(data)\n    labels = kmeans.labels_\n    centroids = kmeans.cluster_centers_\n    # Create a scatter plot\n    plt.figure()\n    ax = plt.axes()\n    scatter = ax.scatter(data.iloc[:, 0], data.iloc[:, 1], c=labels, s=50, cmap='viridis')\n    for i in range(n_clusters):\n        # Add centroids as black stars\n        ax.scatter(centroids[i][0], centroids[i][1], cmap='Blues', marker=\"*\", s=300, linewidth=1", "compilation_passed": false, "time": 0.0003161430358886719, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"'data' must be a pd.DataFrame\")\n\n    if not isinstance(n_clusters, int) or n_clusters < 2:\n        raise ValueError(\"'n_clusters' must be an integer greater than 1\")\n\n    kmeans = KMeans(n_clusters=n_clusters)\n    kmeans.fit(data)\n    labels = kmeans.labels_\n\n    fig, ax = plt.subplots()\n    ax.set_title('K-Means Clustering')\n    ax.scatter(data.iloc[:, 0], data.iloc[:, 1], c=labels)\n\n    centroids = kmeans.cluster_centers_\n    for i, centroid in enumerate(centroids):\n        ax.scatter(centroid[0], centroid[1], c='black', marker='x', s=100, label=f'Centroid {i+1}')\n\n    return labels, ax", "compilation_passed": true, "time": 0.016949892044067383, "tests_passed": true, "error": null}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"'data' must be a pandas DataFrame.\")\n    if not isinstance(n_clusters, int) or n_clusters <= 1:\n        raise ValueError(\"'n_clusters' must be an integer greater than 1.\")\n\n    model = KMeans(n_clusters=n_clusters, random_state=42)\n    cluster_labels = model.fit_predict(data)\n    cluster_centers = model.cluster_centers_\n\n    plt.scatter(cluster_centers[:, 0], cluster_centers[:, 1], marker='X', s=100, c='r')\n\n    fig, ax = plt.subplots()\n    for cluster_idx in range(n_clusters):\n        cluster_data = data.loc[cluster_labels == cluster_idx]\n        ax.scatter(cluster_data.iloc[:, 0], cluster_data.iloc[:, 1], label=f'Cluster {cluster_idx}', marker='o')\n\n", "compilation_passed": true, "time": 0.017056941986083984, "tests_passed": false, "error": "TypeError"}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"'data' must be a pd.DataFrame\")\n    if not isinstance(n_clusters, int) or n_clusters <= 1:\n        raise ValueError(\"'n_clusters' must be an integer greater than 1\")\n\n    kmeans = KMeans(n_clusters=n_clusters)\n    kmeans.fit(data)\n\n    ax = data.plot(kind=\"scatter\", x=0, y=1, marker='.', colorbar=False,\n                   color='darkgray', ax=plt.axes(projection='3d'), zorder=0)\n\n    cluster_labels = kmeans.labels_\n    cluster_centers = kmeans.cluster_centers_\n\n    sc = ax.scatter(data[0], data[1], cluster_labels, marker='.', cmap='tab20', zorder=2)\n    sc = ax.scatter(cluster_centers[:, 0], cluster_centers[:, 1], cluster_labels,", "compilation_passed": false, "time": 0.00030493736267089844, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"Input data must be a pd.DataFrame\")\n\n    if not isinstance(n_clusters, int) or n_clusters < 2:\n        raise ValueError(\"Number of clusters must be an integer greater than 1\")\n\n    kmeans = KMeans(n_clusters=n_clusters, random_state=42)\n    kmeans.fit(data)\n\n    labels = kmeans.labels_\n\n    plt.figure(figsize=(8, 6))\n    plt.title('K-Means Clustering')\n    plt.xlabel('Feature 1')\n    plt.ylabel('Feature 2')\n\n    plt.scatter(data.iloc[:, 0], data.iloc[:, 1], c=labels)\n\n    # Extracting cluster centroids\n    cluster_centers = kmeans.cluster_centers_\n\n    # Adding centroids to the plot\n    plt.scatter(cluster_centers[:, 0], cluster_centers[:, 1],\n                marker='X", "compilation_passed": false, "time": 0.0001049041748046875, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"Input 'data' must be a pd.DataFrame.\")\n\n    if not isinstance(n_clusters, int) or n_clusters <= 1:\n        raise ValueError(\"Input 'n_clusters' must be an integer greater than 1.\")\n\n    model = KMeans(n_clusters=n_clusters)\n    model.fit(data)\n    clusters = model.labels_\n\n    plt.figure(figsize=(8, 6))\n\n    scatter = plt.scatter(\n        data[data.columns[0]],\n        data[data.columns[1]],\n        c=clusters,\n        cmap=\"viridis\"\n    )\n\n    centroids = model.cluster_centers_\n    for i, centroid in enumerate(centroids):\n        plt.scatter(\n            [centroid[0]],\n            [centroid[1]],\n            c=\"red\",\n            s=200,\n            marker=\"o\",\n            edgecolors=\"black\",\n", "compilation_passed": false, "time": 0.000247955322265625, "tests_passed": false, "error": "SyntaxError"}
{"code": "# check input types\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"'data' must be a pandas DataFrame\")\n    if not isinstance(n_clusters, int) or n_clusters <= 1:\n        raise ValueError(\"'n_clusters' must be an integer greater than 1\")\n\n    # perform clustering\n    kmeans = KMeans(n_clusters=n_clusters)\n    kmeans.fit(data)\n    labels = kmeans.labels_\n\n    # create scatter plot\n    plt.scatter(data[data.columns[0]], data[data.columns[1]], c=labels)\n\n    # add centroids\n    centroids = kmeans.cluster_centers_\n    plt.scatter(centroids[:, 0], centroids[:, 1], marker='x', color='red')\n\n    # set title and labels\n    plt.title('K-Means Clustering')\n    plt.xlabel(data.columns[0])\n    plt.ylabel(data.columns[1])\n\n    # show plot\n    ", "compilation_passed": true, "time": 0.0035359859466552734, "tests_passed": false, "error": "TypeError"}
{"code": "# Validate input data\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"Input data must be a pandas DataFrame.\")\n\n    # Validate number of clusters\n    if not isinstance(n_clusters, int) or n_clusters < 2:\n        raise ValueError(\"Number of clusters must be an integer greater than 1.\")\n\n    # Perform K-means clustering\n    kmeans = KMeans(n_clusters=n_clusters, random_state=42)\n    labels = kmeans.fit_predict(data)\n\n    # Generate a scatter plot\n    fig, ax = plt.subplots()\n    ax.scatter(data.iloc[:, 0], data.iloc[:, 1], c=labels, cmap='rainbow')\n    ax.set_title('K-Means Clustering')\n    ax.set_xlabel(data.columns[0])\n    ax.set_ylabel(data.columns[1])\n\n    # Plot centroids as red stars\n    for i, centroid in enumerate(kmeans.cluster_centers", "compilation_passed": false, "time": 0.0002391338348388672, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"'data' should be a pandas DataFrame\")\n\n    if not isinstance(n_clusters, int) or n_clusters <= 1:\n        raise ValueError(\"'n_clusters' should be an integer greater than 1\")\n\n    kmeans = KMeans(n_clusters=n_clusters, random_state=0)\n    labels = kmeans.fit_predict(data)\n\n    fig, ax = plt.subplots()\n    ax.scatter(data[data.columns[0]], data[data.columns[1]], c=labels, cmap='rainbow')\n\n    centroids = kmeans.cluster_centers_\n    ax.scatter(centroids[:, 0], centroids[:, 1], marker='x', color='black', s=80, linewidths=5)\n\n    ax.set_title('K-Means Clustering')\n\n    return labels, ax", "compilation_passed": true, "time": 0.014912128448486328, "tests_passed": true, "error": null}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"Input must be a pandas DataFrame.\")\n\n    if not isinstance(n_clusters, int) or n_clusters <= 1:\n        raise ValueError(\"Number of clusters must be an integer greater than 1.\")\n\n    # Perform K-means clustering\n    kmeans = KMeans(n_clusters=n_clusters, random_state=42)\n    kmeans.fit(data)\n    labels = kmeans.labels_\n\n    # Create a scatter plot for the clustered data\n    _, ax = plt.subplots()\n    ax.scatter(data[data.columns[0]], data[data.columns[1]], c=labels)\n\n    # Add centroids\n    centroids = kmeans.cluster_centers_\n    ax.scatter(centroids[:, 0], centroids[:, 1], marker='o', c=np.linspace(0, 1, n_clusters, endpoint=False), s=100,\n               edgecolor='k')\n\n    #", "compilation_passed": true, "time": 0.016450166702270508, "tests_passed": false, "error": "TypeError"}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"data must be a pandas DataFrame.\")\n\n    if not isinstance(n_clusters, int) or n_clusters <= 1:\n        raise ValueError(\"n_clusters must be an integer greater than 1.\")\n\n    # Perform K-means clustering\n    kmeans = KMeans(n_clusters=n_clusters)\n    kmeans.fit(data)\n    labels = kmeans.labels_\n\n    # Create a scatter plot\n    plt.figure(figsize=(8, 6))\n    ax = plt.gca()\n    plt.title('K-Means Clustering', fontsize=16)\n\n    # Plot clusters\n    for i in range(n_clusters):\n        mask = labels == i\n        ax.scatter(data[mask]['Feature1'], data[mask]['Feature2'], s=50, c=f'C{i}')\n\n    # Plot centroids\n    for i in range(n_clusters):\n        centroid = kmeans.cluster_centers_[i", "compilation_passed": false, "time": 0.00030493736267089844, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"Input data must be a pandas DataFrame.\")\n\n    if not isinstance(n_clusters, int) or n_clusters < 2:\n        raise ValueError(\"Number of clusters 'n_clusters' must be an integer greater than 1.\")\n\n    model = KMeans(n_clusters=n_clusters)\n    labels = model.fit_predict(data)\n\n    plt.figure(figsize=(10, 6))\n    plt.scatter(data[data.columns[0]], data[data.columns[1]], c=labels, cmap='viridis')\n    centroids = model.cluster_centers_\n    plt.scatter(centroids[:, 0], centroids[:, 1], marker='o', c='black', s=50, label='Centroids')\n    plt.legend()\n    plt.title('K-Means Clustering')\n    plt.xlabel(data.columns[0])\n    plt.ylabel(data.columns[1])\n    plt.show", "compilation_passed": true, "time": 0.01596999168395996, "tests_passed": false, "error": "TypeError"}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"'data' must be a pd.DataFrame\")\n\n    if not isinstance(n_clusters, int) or n_clusters <= 1:\n        raise ValueError(\"'n_clusters' must be an integer greater than 1\")\n\n    # Perform K-means clustering\n    kmeans = KMeans(n_clusters=n_clusters, random_state=0)\n    labels = kmeans.fit_predict(data)\n\n    # Create a scatter plot\n    fig, ax = plt.subplots()\n    scatter = ax.scatter(data.iloc[:, 0], data.iloc[:, 1], c=labels)\n    centroids = kmeans.cluster_centers_\n    ax.scatter(centroids[:, 0], centroids[:, 1], marker='x', s=200, linewidths=2, c=\"red\")\n\n    ax.set_xlabel(f'Feature {data.columns[0]}')\n    ax.set_ylabel(f'Feature {", "compilation_passed": false, "time": 0.00014781951904296875, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"Input data must be a pandas DataFrame\")\n    if not isinstance(n_clusters, int) or n_clusters < 2:\n        raise ValueError(\"Number of clusters must be an integer greater than 1\")\n    # Create a scatter plot with different colors for each cluster\n    kmeans = KMeans(n_clusters=n_clusters, random_state=42)\n    cluster_labels = kmeans.fit_predict(data)\n    ax = data.plot.scatter(x=data.columns[0], y=data.columns[1], c=cluster_labels, cmap=plt.cm.coolwarm)\n    # Plot cluster centroids\n    cluster_centers = kmeans.cluster_centers_\n    ax.scatter(cluster_centers[:, 0], cluster_centers[:, 1], marker=\"x\", s=200, linewidth=5, color=\"black\")\n    plt.title(\"K-Means Clustering\")\n    plt.legend([\"Cluster", "compilation_passed": false, "time": 0.00010085105895996094, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"'data' must be a pandas DataFrame.\")\n    if not isinstance(n_clusters, int) or n_clusters <= 1:\n        raise ValueError(\"'n_clusters' must be an integer greater than 1.\")\n    model = KMeans(n_clusters=n_clusters).fit(data)\n    labels = model.labels_\n    centroids = model.cluster_centers_\n    ax = data.plot.scatter(x=0, y=1, c=labels, cmap='viridis')\n    for i in range(n_clusters):\n        ax.scatter(centroids[i, 0], centroids[i, 1], s=100, marker='X', color='red', label=i)\n    plt.title(\"K-Means Clustering\")\n    plt.legend()\n    return labels, ax", "compilation_passed": true, "time": 0.026150226593017578, "tests_passed": true, "error": null}
{"code": "# Check if the input 'data' is a pd.DataFrame\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"Input 'data' must be a pd.DataFrame.\")\n\n    # Check if the input 'n_clusters' is an integer greater than 1\n    if not isinstance(n_clusters, int) or n_clusters <= 1:\n        raise ValueError(\"Input 'n_clusters' must be an integer greater than 1.\")\n\n    # Create a K-means object\n    kmeans = KMeans(n_clusters=n_clusters)\n\n    # Fit the K-means model to the data\n    kmeans.fit(data)\n\n    # Predict the cluster labels for each sample\n    cluster_labels = kmeans.labels_\n\n    # Create a scatter plot with different colors for each cluster\n    fig, ax = plt.subplots()\n    scatter = ax.scatter(data[data.columns[0]], data[data.columns[1]], c=cluster_labels, cmap='rainbow')\n\n    # Set the title and labels for the plot", "compilation_passed": true, "time": 0.01469111442565918, "tests_passed": false, "error": "TypeError"}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"'data' must be a pandas DataFrame.\")\n\n    if not isinstance(n_clusters, int) or n_clusters <= 1:\n        raise ValueError(\"'n_clusters' must be an integer greater than 1.\")\n\n    # Perform K-means clustering\n    kmeans = KMeans(n_clusters=n_clusters)\n    kmeans.fit(data)\n    labels = kmeans.labels_\n\n    # Create a scatter plot of the data points colored by cluster label\n    plt.scatter(data.iloc[:, 0], data.iloc[:, 1], c=labels, cmap='rainbow')\n\n    # Plot the centroids as red circles\n    centroids = kmeans.cluster_centers_\n    plt.scatter(centroids[:, 0], centroids[:, 1], marker='o', c='red', s=200, alpha=0.75)\n\n    # Add labels and title to the plot\n    plt.xlabel('Feature", "compilation_passed": false, "time": 0.00013208389282226562, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"'data' must be a pd.DataFrame\")\n    if not isinstance(n_clusters, int) or n_clusters <= 1:\n        raise ValueError(\"'n_clusters' must be an integer greater than 1\")\n    X = data.values\n    kmeans = KMeans(n_clusters=n_clusters).fit(X)\n    labels = kmeans.labels_\n    cluster_centers = kmeans.cluster_centers_\n    # Plot the clusters and centroids\n    fig, ax = plt.subplots()\n    ax.scatter(X[:, 0], X[:, 1], c=labels, cmap='rainbow')\n    ax.set_title(\"K-Means Clustering\")\n    # Plot the cluster centroids\n    scat = ax.scatter(cluster_centers[:, 0], cluster_centers[:, 1],\n                      marker='*', s=200, c='black')\n    scat.set_edgecolors('white", "compilation_passed": false, "time": 0.0001049041748046875, "tests_passed": false, "error": "SyntaxError"}
