{"code": "moved_files_count = 0\n\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n\n    for file_name in os.listdir(source_dir):\n        if re.match(file_pattern, file_name):\n            src_path = os.path.join(source_dir, file_name)\n            dst_path = os.path.join(target_dir, file_name)\n            shutil.move(src_path, dst_path)\n            moved_files_count += 1\n\n    return moved_files_count", "compilation_passed": true, "time": 0.008379936218261719, "tests_passed": true, "error": null}
{"code": "moved_files_count = 0\n\n    # Create target directory if it doesn't exist\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n\n    # Loop through all files in the source directory\n    for file_name in os.listdir(source_dir):\n        file_path = os.path.join(source_dir, file_name)\n\n        # Check if the file name matches the pattern\n        if re.fullmatch(file_pattern, file_name):\n            # Move file to target directory\n            shutil.move(file_path, os.path.join(target_dir, file_name))\n            moved_files_count += 1\n\n    return moved_files_count", "compilation_passed": true, "time": 0.00802302360534668, "tests_passed": true, "error": null}
{"code": "# Count the number of files that were successfully moved from the source directory to the target directory\n    moved_files_count = 0\n    for filename in os.listdir(source_dir):\n        if re.match(file_pattern, filename):\n            # Build the paths for the file in the source and target directories\n            source_filepath = os.path.join(source_dir, filename)\n            target_filepath = os.path.join(target_dir, filename)\n            try:\n                # Move the file from the source directory to the target directory\n                shutil.move(source_filepath, target_filepath)\n                moved_files_count += 1\n            except:\n                print(f'Error: Unable to move {source_filepath}')\n    return moved_files_count", "compilation_passed": true, "time": 0.007365703582763672, "tests_passed": true, "error": null}
{"code": "# Initialize a counter variable\n    moved_files_count = 0\n\n    # Create the target directory if it doesn't exist\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n\n    # Loop through all files in the source directory\n    for filename in os.listdir(source_dir):\n        # Check if the file matches the specified pattern\n        if re.search(file_pattern, filename):\n            # Get the full path of the file in both source and target directories\n            source_path = os.path.join(source_dir, filename)\n            target_path = os.path.join(target_dir, filename)\n\n            # Check if the file already exists in the target directory\n            if os.path.exists(target_path):\n                # Get the modification time of the file in both directories\n                source_mod_time = os.path.getmtime(source_path)\n                target_mod_time = os.path.getmtime(target_path)\n\n                # If the file in the source directory is more recent, overwrite it", "compilation_passed": true, "time": 0.0033600330352783203, "tests_passed": true, "error": null}
{"code": "moved_files_count = 0\n    for filename in os.listdir(source_dir):\n        if re.fullmatch(file_pattern, filename):\n            src_file = os.path.join(source_dir, filename)\n            target_file = os.path.join(target_dir, filename)\n            shutil.move(src_file, target_file)\n            moved_files_count += 1\n    return moved_files_count", "compilation_passed": true, "time": 0.008268117904663086, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "moved_files_count = 0\n    for filename in os.listdir(source_dir):\n        if re.match(file_pattern, filename):\n            src_path = os.path.join(source_dir, filename)\n            dst_path = os.path.join(target_dir, filename)\n            shutil.move(src_path, dst_path)\n            moved_files_count += 1\n    return moved_files_count", "compilation_passed": true, "time": 0.00780797004699707, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if not os.path.isdir(source_dir):\n        print(\"Error: Invalid source directory.\")\n        return 0\n\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n\n    moved_files_count = 0\n    for file in os.listdir(source_dir):\n        if re.match(file_pattern, file):\n            source_file = os.path.join(source_dir, file)\n            target_file = os.path.join(target_dir, file)\n            shutil.move(source_file, target_file)\n            moved_files_count += 1\n\n    return moved_files_count", "compilation_passed": true, "time": 0.002386808395385742, "tests_passed": true, "error": null}
{"code": "moved_files_count = 0\n    for root, dirs, files in os.walk(source_dir):\n        for file in files:\n            if re.match(file_pattern, file):\n                src_path = os.path.join(root, file)\n                dst_path = os.path.join(target_dir, file)\n                shutil.move(src_path, dst_path)\n                moved_files_count += 1\n    return moved_files_count", "compilation_passed": true, "time": 0.0021767616271972656, "tests_passed": true, "error": null}
{"code": "moved_files_count = 0\n\n    # Loop through all files in the source directory\n    for filename in os.listdir(source_dir):\n        # Check if the file name matches the pattern\n        if re.match(file_pattern, filename):\n            # Construct the full path to the file in the source and target directories\n            source_path = os.path.join(source_dir, filename)\n            target_path = os.path.join(target_dir, filename)\n\n            # Move the file from the source to the target directory\n            shutil.move(source_path, target_path)\n\n            # Increment the counter of moved files\n            moved_files_count += 1\n\n    return moved_files_count", "compilation_passed": true, "time": 0.007245779037475586, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "moved_files_count = 0\n\n    # Get a list of all files in the source directory\n    all_files = os.listdir(source_dir)\n\n    # Iterate through all files and move them to the target directory if their filename matches the pattern\n    for filename in all_files:\n        if re.match(file_pattern, filename) and os.path.isfile(os.path.join(source_dir, filename)):\n            shutil.move(os.path.join(source_dir, filename), target_dir)\n            moved_files_count += 1\n\n    return moved_files_count", "compilation_passed": true, "time": 0.00738525390625, "tests_passed": true, "error": null}
{"code": "moved_files_count = 0\n    for filename in os.listdir(source_dir):\n        filepath = os.path.join(source_dir, filename)\n        if os.path.isfile(filepath) and re.match(file_pattern, filename):\n            shutil.move(filepath, target_dir)\n            moved_files_count += 1\n    return moved_files_count", "compilation_passed": true, "time": 0.007609128952026367, "tests_passed": true, "error": null}
{"code": "moved_files_count = 0\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    for file in os.listdir(source_dir):\n        if re.match(file_pattern, file):\n            shutil.move(os.path.join(source_dir, file), target_dir)\n            moved_files_count += 1\n    return moved_files_count", "compilation_passed": true, "time": 0.008119821548461914, "tests_passed": true, "error": null}
{"code": "if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n    if os.path.isdir(source_dir):\n        files = os.listdir(source_dir)\n        moved_files_count = 0\n        for filename in files:\n            if re.search(file_pattern, filename):\n                shutil.move(os.path.join(source_dir, filename), target_dir)\n                moved_files_count += 1\n        return moved_files_count\n    else:\n        return 0", "compilation_passed": true, "time": 0.002312898635864258, "tests_passed": true, "error": null}
{"code": "# Get a list of all files in the source directory\n    files = os.listdir(source_dir)\n\n    # Initialize a counter for the number of moved files\n    moved_files_count = 0\n\n    # Iterate through each file in the source directory\n    for file_name in files:\n        # Check if the file matches the specified pattern\n        if re.match(file_pattern, file_name):\n            # Construct the full path of the source file\n            source_file = os.path.join(source_dir, file_name)\n            # Construct the full path of the target file\n            target_file = os.path.join(target_dir, file_name)\n\n            # Move the file to the target directory\n            shutil.move(source_file, target_file)\n\n            # Increment the counter\n            moved_files_count += 1\n\n    # Return the number of moved files\n    return moved_files_count", "compilation_passed": true, "time": 0.007436037063598633, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "moved_files_count = 0\n    for filename in os.listdir(source_dir):\n        if re.match(file_pattern, filename):\n            source_file_path = os.path.join(source_dir, filename)\n            target_file_path = os.path.join(target_dir, filename)\n            shutil.move(source_file_path, target_file_path)\n            moved_files_count += 1\n    return moved_files_count", "compilation_passed": true, "time": 0.007322072982788086, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Initialize a counter for the number of files moved\n    moved_files_count = 0\n\n    # Iterate through all files in the source directory\n    for file in os.listdir(source_dir):\n        # Check if the file matches the specified pattern\n        if re.match(file_pattern, file):\n            # Move the file to the target directory\n            shutil.move(os.path.join(source_dir, file), target_dir)\n            # Increment the counter\n            moved_files_count += 1\n\n    # Return the number of files moved\n    return moved_files_count", "compilation_passed": true, "time": 0.0074312686920166016, "tests_passed": true, "error": null}
{"code": "# Use regular expression to filter files based on file names\n    pattern = re.compile(file_pattern)\n    # Count of the moved files\n    moved_files_count = 0\n    # Iterate over all files in the source directory\n    for file_name in os.listdir(source_dir):\n        # Check if the file name matches the pattern\n        if pattern.match(file_name):\n            # Generate the source and destination paths\n            source_path = os.path.join(source_dir, file_name)\n            target_path = os.path.join(target_dir, file_name)\n            # Move the file to the target directory\n            shutil.move(source_path, target_path)\n            # Increment the count of moved files\n            moved_files_count += 1\n    # Return the number of moved files\n    return moved_files_count", "compilation_passed": true, "time": 0.008048772811889648, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "moved_files_count = 0\n    for file in os.listdir(source_dir):\n        if re.match(file_pattern, file):\n            src_path = os.path.join(source_dir, file)\n            dst_path = os.path.join(target_dir, file)\n            shutil.move(src_path, dst_path)\n            moved_files_count += 1\n    return moved_files_count", "compilation_passed": true, "time": 0.007925033569335938, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "moved_files_count = 0  # Initialize the count of moved files\n\n    # Check if the source directory exists\n    if not os.path.isdir(source_dir):\n        print(f\"Error: Source directory '{source_dir}' does not exist.\")\n        return moved_files_count\n\n    # Check if the target directory exists, if not, create it\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n\n    # Get all the file names in the source directory\n    file_names = os.listdir(source_dir)\n\n    # Loop through the file names and move the files\n    for file_name in file_names:\n        src_file = os.path.join(source_dir, file_name)  # Construct the source file path\n        if os.path.isfile(src_file):\n            # Check if the file name matches the pattern\n            if re.match(file_pattern, file_name):\n                dest_file = os.path.join(target_dir, file_name)  #", "compilation_passed": true, "time": 0.0022690296173095703, "tests_passed": true, "error": null}
{"code": "moved_files_count = 0\n    # Create the target directory if it doesn't exist\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n\n    # Loop through all files in the source directory\n    for file in os.listdir(source_dir):\n        # Check if the file name matches the specified pattern\n        if re.match(file_pattern, file):\n            # Get the full paths for the file in source and target directories\n            source_file_path = os.path.join(source_dir, file)\n            target_file_path = os.path.join(target_dir, file)\n            # Move the file from source to target directory\n            shutil.move(source_file_path, target_file_path)\n            moved_files_count += 1\n    return moved_files_count", "compilation_passed": true, "time": 0.007370948791503906, "tests_passed": true, "error": null}
{"code": "moved_files_count = 0\n    for filename in os.listdir(source_dir):\n        if re.match(file_pattern, filename) and os.path.isfile(os.path.join(source_dir, filename)):\n            shutil.move(os.path.join(source_dir, filename), target_dir)\n            moved_files_count += 1\n    return moved_files_count", "compilation_passed": true, "time": 0.007356166839599609, "tests_passed": true, "error": null}
{"code": "moved_files_count = 0\n    for filename in os.listdir(source_dir):\n        if re.search(file_pattern, filename):\n            source_path = os.path.join(source_dir, filename)\n            target_path = os.path.join(target_dir, filename)\n            shutil.move(source_path, target_path)\n            moved_files_count += 1\n    return moved_files_count", "compilation_passed": true, "time": 0.0076749324798583984, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "moved_files_count = 0\n    for file_name in os.listdir(source_dir):\n        if re.match(file_pattern, file_name):\n            source_path = os.path.join(source_dir, file_name)\n            target_path = os.path.join(target_dir, file_name)\n            shutil.move(source_path, target_path)\n            moved_files_count += 1\n    return moved_files_count", "compilation_passed": true, "time": 0.0078122615814208984, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "moved_files_count = 0\n\n    for filename in os.listdir(source_dir):\n        if re.match(file_pattern, filename):\n            full_filename = os.path.join(source_dir, filename)\n\n            shutil.move(full_filename, target_dir)\n            moved_files_count += 1\n\n    return moved_files_count", "compilation_passed": true, "time": 0.00728607177734375, "tests_passed": true, "error": null}
{"code": "moved_files_count = 0  # Variable to keep track of the number of moved files\n\n    # Create the target directory if it doesn't exist\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n\n    for filename in os.listdir(source_dir):\n        # Check if the filename matches the specified pattern\n        if re.match(file_pattern, filename):\n            # Build the full path of the file in the source directory\n            source_file = os.path.join(source_dir, filename)\n            # Build the full path of the file in the target directory\n            target_file = os.path.join(target_dir, filename)\n\n            # Move the file from the source directory to the target directory\n            shutil.move(source_file, target_file)\n\n            moved_files_count += 1\n\n    return moved_files_count", "compilation_passed": true, "time": 0.00736689567565918, "tests_passed": true, "error": null}
{"code": "if not os.path.isdir(source_dir):\n        print(f\"The directory {source_dir} does not exist.\")\n        return\n\n    if not os.path.isdir(target_dir):\n        os.makedirs(target_dir)\n\n    # Use the re library to compile the pattern\n    pattern = re.compile(file_pattern)\n\n    # Iterate over the files in the source directory\n    moved_files_count = 0\n    for file_name in os.listdir(source_dir):\n        # Check if the file name matches the pattern\n        if pattern.match(file_name):\n            # Construct the paths of the source and target files\n            source_file_path = os.path.join(source_dir, file_name)\n            target_file_path = os.path.join(target_dir, file_name)\n\n            # Move the file from the source directory to the target directory\n            try:\n                shutil.move(source_file_path, target_file_path)\n                moved_files_count += 1\n            ", "compilation_passed": false, "time": 0.0002269744873046875, "tests_passed": false, "error": "SyntaxError"}
{"code": "moved_files_count = 0\n    if os.path.exists(source_dir):\n        for filename in os.listdir(source_dir):\n            if re.search(file_pattern, filename):\n                src_path = os.path.join(source_dir, filename)\n                dst_path = os.path.join(target_dir, filename)\n                if os.path.exists(src_path):\n                    shutil.move(src_path, dst_path)\n                    moved_files_count += 1\n    return moved_files_count", "compilation_passed": true, "time": 0.0021140575408935547, "tests_passed": true, "error": null}
{"code": "moved_files_count = 0\n    for file_name in os.listdir(source_dir):\n        file_path = os.path.join(source_dir, file_name)\n        if os.path.isfile(file_path) and re.match(file_pattern, file_name):\n            shutil.move(file_path, os.path.join(target_dir, file_name))\n            moved_files_count += 1\n    return moved_files_count", "compilation_passed": true, "time": 0.00705718994140625, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Check if source directory exists\n    if not os.path.exists(source_dir):\n        print(f\"Directory '{source_dir}' does not exist.\")\n        return 0\n\n    # Check if target directory exists, if not create it\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n        print(f\"Directory '{target_dir}' created.\")\n\n    # Initialize counter for moved files\n    moved_files_count = 0\n\n    # Iterate through files in the source directory\n    for file_name in os.listdir(source_dir):\n        file_path = os.path.join(source_dir, file_name)\n        if os.path.isfile(file_path):\n            if re.match(file_pattern, file_name):\n                # Move the file to the target directory\n                shutil.move(file_path, target_dir)\n                print(f\"File '{file_name}' moved to '{target_dir}'.\")\n                moved_files_count +=", "compilation_passed": false, "time": 0.0002372264862060547, "tests_passed": false, "error": "SyntaxError"}
