{"code": "def exp_function(x, a, b, c):\n        return a * np.exp(-b * x) + c\n\n    def exp_function_with_const(x, a, b, c, d):\n        return a * np.exp(-b * x) + c * x + d\n\n    fig, ax = plt.subplots()\n    ax.set_xlabel('Time')\n    ax.set_ylabel('Gas concentration')\n\n    # Set the x axis limits to be from 0 to the maximum x value\n    x_max = max(map(lambda xi: np.max(xi), x))\n    ax.set_xlim([0, x_max])\n\n    for i in range(len(x)):\n        # Perform the fit\n        popt_const, pcov_const = curve_fit(exp_function_with_const, x[i], y[i])\n        popt, pcov = curve_fit(exp_function, x[i], y[i])\n\n        # Plot the fitted curves\n        ax.plot(x[i],", "compilation_passed": false, "time": 0.0002918243408203125, "tests_passed": false, "error": "SyntaxError"}
{"code": "# check if the input arrays are valid\n    if len(x) != len(y) or len(x) != len(labels):\n        print(\"Error: The length of x, y, and labels must be equal.\")\n        return None\n    if not all(isinstance(arr, np.ndarray) for arr in x) or not all(isinstance(arr, np.ndarray) for arr in y):\n        print(\"Error: x and y must be lists of numpy arrays.\")\n        return None\n\n    # define the function to fit\n    def exp_func(x, a, b, c):\n        return a * np.exp(-b * x) + c\n\n    # fit the data and plot the curves\n    fig, ax = plt.subplots()\n    ax.set_title('Fitted Exponential Curves')\n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n    ax.set_xlim(0, 11)\n    for i in range(len(x)):\n        # fit the data\n        popt", "compilation_passed": true, "time": 0.005410194396972656, "tests_passed": true, "error": null}
{"code": "for x, y, label in zip(x, y, labels):\n        # fit an exponential curve of the form f(x) = a * exp(-b * x) + c\n        def func(x, a, b, c):\n            return a * np.exp(-b * x) + c\n\n        popt, pcov = curve_fit(func, x, y)\n\n        # plot the fitted curve with the corresponding label\n        plt.plot(x, y, 'o', label=label)\n        plt.plot(x, func(x, *popt), label=\"fitted curve\")\n\n    plt.legend()\n    return plt.show()", "compilation_passed": true, "time": 0.001912832260131836, "tests_passed": true, "error": null}
{"code": "fig, ax = plt.subplots()\n    for i in range(len(x)):\n        # Fit an exponential curve to the data\n        def exp_func(x, a, b, c):\n            return a * np.exp(-b * x) + c\n        popt, _ = curve_fit(exp_func, x[i], y[i])\n\n        # Plot the fitted curve with the corresponding label\n        ax.plot(x[i], exp_func(x[i], *popt), label=labels[i])\n\n    # Add legend and axis labels to the plot\n    ax.legend()\n    ax.set_xlabel('X')\n    ax.set_ylabel('Y')\n    ax.set_title('Fitted Exponential Curves')\n    plt.show()\n    return fig", "compilation_passed": true, "time": 0.005028963088989258, "tests_passed": true, "error": null}
{"code": "# Define the function for the curve fit\n    def exp_func(x, a, b, c):\n        return a * np.exp(-b * x) + c\n\n    # Create a figure to hold the subplots\n    fig, axs = plt.subplots(1, 3, figsize=(12, 4))\n    fig.suptitle('Task 5 - 1.1.3. Fitting Curves', fontsize=14)\n    for ax, x, y, label in zip(axs, x, y, labels):\n        # Fit the data to the curve\n        popt, pcov = curve_fit(exp_func, x, y)\n        # Plot the fitted curve with label\n        ax.plot(x, exp_func(x, *popt), label=label)\n        ax.legend()\n\n    # Return the figure object\n    return fig", "compilation_passed": true, "time": 0.010867834091186523, "tests_passed": true, "error": null}
{"code": "def func(x, a, b, c):\n        return a * np.exp(-b * x) + c\n\n    fig, ax = plt.subplots()\n\n    for i, (x, y, label) in enumerate(zip(x, y, labels)):\n        popt, _ = curve_fit(func, x, y, p0=[1, 1, 1])\n        a, b, c = popt\n        print(\"a={:.2f}, b={:.2f}, c={:.2f}\".format(a, b, c))\n        x_space = np.linspace(min(x), max(x), 100)\n        ax.plot(x, y, 'o', label=label)\n        ax.plot(x_space, func(x_space, a, b, c), label=label)\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.004842042922973633, "tests_passed": true, "error": null}
{"code": "fig, ax = plt.subplots()\n    ax.grid()\n    # Set x axis values in ticks to multiples of 10\n    xticks = np.arange(0, 220, 20)\n    ax.set_xticks(xticks, minor=True)\n    ax.xaxis.grid(True, which='minor')\n\n    ax.set_xlabel(r'$T$', fontsize=18)\n    ax.set_ylabel(r'$K$', fontsize=18)\n    ax.set_ylim(0, 10000)\n    for x, y, label in zip(x, y, labels):\n        popt, _ = curve_fit(exp_function, x, y, p0=(1, 1, 1))\n        a, b, c = popt\n\n        # Plot the fitted curve\n        curve = ax.plot(x, exp_function(x, a, b, c), label=label, lw=2)\n        ax.scatter(x, y, s=100, color=\"", "compilation_passed": false, "time": 0.00011801719665527344, "tests_passed": false, "error": "SyntaxError"}
{"code": "fig, ax = plt.subplots()\n    ax.set_xlabel(\"x\")\n    ax.set_ylabel(\"y\")\n    ax.set_title(\"Fitted Exponential Curves\")\n    for x, y, label in zip(x, y, labels):\n        # Define the function to be fitted\n        def func(x, a, b, c):\n            return a * np.exp(-b * x) + c\n\n        # Fit the function to the data points\n        params, cov = curve_fit(func, x, y)\n\n        # Plot the fitted curve with the corresponding label\n        ax.plot(x, func(x, *params), label=label)\n\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.005363941192626953, "tests_passed": true, "error": null}
{"code": "import matplotlib.pyplot as plt\n    fig, ax = plt.subplots(1, figsize=(12, 7))\n    ax.set_title(\"Task 10\")\n    ax.set_xlabel(\"x\")\n    ax.set_ylabel(\"y\")\n    ax.set_xlim(0, 200)\n    ax.set_ylim(0, 20)\n    ax.grid(linestyle=\"--\")\n\n    def fit(x, a, b, c):\n        return a * np.exp(-b * x) + c\n\n    def plot_with_error(ax, x_data, y_data, label):\n        popt, _ = curve_fit(fit, x_data, y_data, p0=[1, 1, 1])\n        a, b, c = popt\n        x = np.linspace(np.min(x_data), np.max(x_data), 100)\n        y = fit(x, a, b, c)\n\n        ax.", "compilation_passed": false, "time": 0.0002770423889160156, "tests_passed": false, "error": "SyntaxError"}
{"code": "def func(x, a, b, c):\n        return a * np.exp(-b * x) + c\n\n    fig, axs = plt.subplots(figsize=(8, 8))\n\n    for i in range(len(x)):\n        popt, pcov = curve_fit(func, x[i], y[i])\n        print(\"label:\", labels[i])\n        print(\"a:\", popt[0], \"b:\", popt[1], \"c:\", popt[2])\n        axs.plot(x[i], func(x[i], *popt), label=labels[i])\n\n    axs.legend()\n    return fig", "compilation_passed": true, "time": 0.0047512054443359375, "tests_passed": true, "error": null}
{"code": "def exp_func(x, a, b, c):\n        return a * np.exp(-b * x) + c\n\n    figure = plt.figure()\n\n    for x_data, y_data, label in zip(x, y, labels):\n        if (not isinstance(x_data, np.ndarray)) or (not isinstance(y_data, np.ndarray)) or (not isinstance(label, str)):\n            raise ValueError(\"All elements of x, y, and labels must be of types: np.ndarray, np.ndarray, and string respectively\")\n\n        popt, _ = curve_fit(exp_func, x_data, y_data)\n        x_fit = np.linspace(min(x_data), max(x_data), 100)\n        y_fit = exp_func(x_fit, *popt)\n\n        plt.plot(x_fit, y_fit, label=label)\n\n    plt.legend()\n\n    return figure", "compilation_passed": true, "time": 0.004724025726318359, "tests_passed": true, "error": null}
{"code": "# Initialize a figure to plot the curves on\n    fig = plt.figure()\n\n    # Loop over each dataset\n    for i in range(len(x)):\n        # Extract the x and y data points for the current dataset\n        x_data = x[i]\n        y_data = y[i]\n        # Define the function to fit, f(x) = a * exp(-b * x) + c\n        def func(x, a, b, c):\n            return a * np.exp(-b * x) + c\n        # Use curve_fit to fit the function to the data points\n        popt, pcov = curve_fit(func, x_data, y_data)\n        # Plot the fitted curve with the corresponding label\n        plt.plot(x_data, func(x_data, *popt), label=labels[i])\n\n    # Add labels and title to the plot\n    plt.xlabel('Time (s)')\n    plt.ylabel('Value')\n    plt.title('Exponential curve fit')\n    plt.legend()\n    # Return the figure object\n    return", "compilation_passed": true, "time": 0.005491018295288086, "tests_passed": true, "error": null}
{"code": "def func_exp(x, a, b, c):\n        return a * np.exp(-b * x) + c\n\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n\n    for x, y, label in zip(x, y, labels):\n        popt, _ = curve_fit(func_exp, x, y, p0=[1, 1, 1])\n        x_fit = np.linspace(min(x), max(x), 100)\n        y_fit = func_exp(x_fit, *popt)\n        ax.plot(x_fit, y_fit, label=label)\n\n    ax.legend()\n    plt.show()\n\n    return fig", "compilation_passed": true, "time": 0.004979848861694336, "tests_passed": true, "error": null}
{"code": "def func(x, a, b, c):\n        return a * np.exp(-b * x) + c\n\n    fig, ax = plt.subplots()\n    for i in range(len(labels)):\n        popt, pcov = curve_fit(func, x[i], y[i])\n        ax.plot(x[i], y[i], label=labels[i])\n        ax.plot(x[i], func(x[i], *popt), label='Fit {}'.format(labels[i]))\n    ax.set_title(\"Exponential Fit\")\n    ax.set_xlabel('X')\n    ax.set_ylabel('Y')\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.004868030548095703, "tests_passed": true, "error": null}
{"code": "def exp_fit(x, a, b, c):\n        return a * np.exp(-b * x) + c\n\n    fig = plt.figure(figsize=(5, 4))\n    plt.xlabel(r\"$\\Delta\\sigma$\")\n    plt.ylabel(r\"$E$\")\n    for i, (x, y, label) in enumerate(zip(x, y, labels), 0):\n        popt, pcov = curve_fit(exp_fit, x, y)\n        plt.plot(x, y, label=label)\n        plt.plot(x, exp_fit(x, *popt), label='curve')\n\n    # Adjust the plot layout and display it\n    plt.legend()\n    plt.tight_layout()\n    plt.savefig(\"task.png\")\n    return fig", "compilation_passed": true, "time": 0.07803487777709961, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "def exp_func(x, a, b, c):\n        return a * np.exp(-b * x) + c\n\n    # Initialize empty list to hold all the axes objects\n    ax_all = []\n\n    for xi, yi, lab in zip(x, y, labels):\n        # Use curve_fit to fit the data to the exponential function\n        params, _ = curve_fit(exp_func, xi, yi, p0=[1, 1, 1])\n\n        # Create a new subplot for each dataset\n        fig, ax = plt.subplots()\n\n        # Add the fitted curve to the subplot\n        x_fit = np.linspace(xi.min(), xi.max(), num=100)\n        y_fit = exp_func(x_fit, *params)\n        ax.plot(x_fit, y_fit, label=lab)\n\n        # Set the axis labels and title for the subplot\n        ax.set_xlabel('x')\n        ax.set_ylabel('y')\n        ax.set_title('Fit to", "compilation_passed": false, "time": 0.00013208389282226562, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Define the function to be fitted\n    def func(x, a, b, c):\n        return a * np.exp(-b * x) + c\n\n    # Create a new figure\n    fig, ax = plt.subplots()\n\n    # Loop over the data and labels to fit the curves\n    for xi, yi, label in zip(x, y, labels):\n        # Fit the data using scipy.optimize.curve_fit\n        popt, pcov = curve_fit(func, xi, yi, p0=[1, 1, 1])\n        a, b, c = popt\n\n        # Plot the fitted curve with the label\n        x_line = np.linspace(min(xi), max(xi), 500)\n        y_line = func(x_line, a, b, c)\n        ax.plot(x_line, y_line, label=label)\n\n    # Set the plot labels and legend\n    ax.set_xlabel('X')\n    ax.set_ylabel('Y')\n    ax.legend()\n\n    ", "compilation_passed": true, "time": 0.005372047424316406, "tests_passed": true, "error": null}
{"code": "fig = plt.figure(figsize=(20, 10))\n    for i in range(len(x)):\n        plt.plot(x[i], y[i], label=labels[i])\n        x_vals = x[i]\n        y_vals = y[i]\n\n        popt, _ = curve_fit(func, x_vals, y_vals, bounds=(0, [np.inf, np.inf, np.inf]))\n        x_vals = np.linspace(np.min(x[i]), np.max(x[i]), 1000)\n        y_vals = func(x_vals, popt[0], popt[1], popt[2])\n        plt.plot(x_vals, y_vals, label=labels[i])\n    plt.legend(labels)\n    plt.show()\n    return fig", "compilation_passed": true, "time": 0.005657672882080078, "tests_passed": true, "error": null}
{"code": "# Validate input\n    assert len(x) == len(y), 'x and y must have the same length'\n    assert len(x) == len(labels), 'x and labels must have the same length'\n\n    fig = plt.figure()\n\n    # Define the function to fit\n    def exp_func(x, a, b, c):\n        return a * np.exp(-b * x) + c\n\n    for x_i, y_i, label in zip(x, y, labels):\n\n        # Fit the curve\n        popt, pcov = curve_fit(exp_func, x_i, y_i)\n        a, b, c = popt\n\n        # Plot the fitted curve\n        x_fit = np.linspace(min(x_i), max(x_i), 1000)\n        y_fit = exp_func(x_fit, a, b, c)\n        plt.plot(x_fit, y_fit, label=label)\n\n        # Print the best-fit parameters for each dataset\n        print(f", "compilation_passed": false, "time": 0.00024700164794921875, "tests_passed": false, "error": "SyntaxError"}
{"code": "fig, ax = plt.subplots()\n\n    # Define the function for the exponential fit\n    def func(x, a, b, c):\n        return a * np.exp(-b * x) + c\n\n    # Iterate through the data and labels, fit the curves, and plot\n    for data, label in zip(x, labels):\n        popt, _ = curve_fit(func, data, y)\n        x_line = np.linspace(data.min(), data.max(), 100)\n        y_line = func(x_line, *popt)\n        ax.plot(x_line, y_line, label=label)\n\n    ax.legend()\n    ax.set_title('Fitted Exponential Curves')\n    return fig", "compilation_passed": true, "time": 0.004846096038818359, "tests_passed": true, "error": null}
{"code": "assert len(x) == len(y) == len(labels), \"The lists of data, y-values, and labels must be of equal length.\"\n\n    # Create a new figure\n    fig, ax = plt.subplots()\n\n    for i in range(len(x)):\n        # Define the function to fit\n        def func(x, a, b, c):\n            return a * np.exp(-b * x) + c\n\n        # Fit the data\n        popt, pcov = curve_fit(func, x[i], y[i])\n\n        # Plot the fitted curve with the corresponding label\n        ax.plot(x[i], func(x[i], *popt), label=labels[i])\n\n    # Add axis labels and legend\n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n    ax.legend(loc='best')\n\n    return fig", "compilation_passed": true, "time": 0.0049059391021728516, "tests_passed": true, "error": null}
{"code": "# Fit a curve to each data set\n    def curve(x, a, b, c):\n        return a * np.exp(-b * x) + c\n\n    # Fit a curve to each data set\n    def curve(x, a, b, c):\n        return a * np.exp(-b * x) + c\n\n    popt_list = []\n    for xi, yi in zip(x, y):\n        popt, _ = curve_fit(curve, xi, yi)\n        popt_list.append(popt)\n\n    # Plot the data and fitted curves\n    fig, ax = plt.subplots()\n    for i, (xi, yi) in enumerate(zip(x, y)):\n        ax.plot(xi, yi, 'o', label=labels[i])\n        ax.plot(xi, curve(xi, *popt_list[i]), label=f'exp fit {labels[i]}')\n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n    ax.legend()\n\n    return", "compilation_passed": true, "time": 0.0054662227630615234, "tests_passed": true, "error": null}
{"code": "def fit_and_plot(x, y, label, fig, ax):\n        \"\"\"Fit and plot a single set of data points with the provided label.\"\"\"\n        def exp_func(x, a, b, c):\n            return a * np.exp(-b * x) + c\n\n        params, _ = curve_fit(exp_func, x, y)\n        x_range = np.linspace(min(x), max(x), 1000)\n        y_range = exp_func(x_range, *params)\n        ax.plot(x_range, y_range, label=label)\n        return y_range\n\n    fig, ax = plt.subplots()\n    y_ranges = []\n    for x, y, label in zip(x, y, labels):\n        y_range = fit_and_plot(x, y, label, fig, ax)\n        y_ranges.append(y_range)\n    ax.legend(loc='best')\n    fig.show()\n    return y_ranges", "compilation_passed": true, "time": 0.004818916320800781, "tests_passed": true, "error": null}
{"code": "assert len(x) == len(y) == len(labels), \"Input lists should have equal lengths\"\n\n    # Create figure and axis objects for plotting\n    fig, axs = plt.subplots(1, 1, figsize=(10, 8))\n    axs.set_xlabel('x')\n    axs.set_ylabel('y')\n\n    # Function definition for exponential fitting\n    def exp_func(x, a, b, c):\n        return a * np.exp(-b * x) + c\n\n    # Perform exponential fitting for each dataset\n    for i, (x_data, y_data, label) in enumerate(zip(x, y, labels)):\n        popt, pcov = curve_fit(exp_func, x_data, y_data)\n\n        # Plot the fitted curves\n        x_line = np.linspace(min(x_data), max(x_data), 1000)\n        y_line = exp_func(x_line, *popt)\n        axs.plot(x_line, y_line,", "compilation_passed": false, "time": 0.0002570152282714844, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Create a figure and a set of subplots\n    fig, axs = plt.subplots(nrows=1, ncols=3, figsize=(12, 4))\n\n    # Define the exponential function\n    def func(x, a, b, c):\n        return a * np.exp(-b * x) + c\n\n    # Loop over the datasets and fit the curves\n    for i in range(3):\n        # Fit the exponential function to the data\n        popt, pcov = curve_fit(func, x[i], y[i])\n\n        # Extract the best fit parameters\n        a, b, c = popt\n\n        # Plot the data points\n        axs[i].scatter(x[i], y[i], c='red', s=10)\n\n        # Plot the fitted curve\n        x_fit = np.linspace(x[i].min(), x[i].max(), 100)\n        y_fit = func(x_fit, a, b, c)\n        axs[i].plot", "compilation_passed": true, "time": 0.010841846466064453, "tests_passed": false, "error": "IndexError"}
{"code": "fig = plt.figure()\n    for i in range(len(x)):\n        popt, pcov = curve_fit(exponential_curve, x[i], y[i], bounds=(0, [np.inf, np.inf, np.inf]))\n        plt.plot(x[i], y[i], 'o', label=labels[i])\n        plt.plot(x[i], exponential_curve(x[i], *popt), label=f\"Exp. Fit {i + 1}\")\n\n    plt.xlabel('Time (s)')\n    plt.ylabel('Mole Fraction')\n    plt.title('Fitted Exponential Curve')\n    plt.legend()\n    return fig", "compilation_passed": true, "time": 0.0049648284912109375, "tests_passed": true, "error": null}
{"code": "fig, ax = plt.subplots(1, 1, figsize=(8, 6), dpi=300)\n\n    def exp_function(x, a, b, c):\n        return a * np.exp(-b * x) + c\n\n    for x, y, label in zip(x, y, labels):\n        popt, _ = curve_fit(exp_function, x, y)\n\n        ax.plot(x, y, 'o', label=f\"{label}: $f(x) = {popt[0]:.3f} * e^(-{popt[1]:.3f}x) + {popt[2]:.3f}$\")\n\n        x_line = np.linspace(min(x), max(x), 1000)\n        ax.plot(x_line, exp_function(x_line, *popt), '-', label=f\"{label} fit\")\n\n        ax.set_xlabel('Time (s)')\n        ax.set_ylabel('Decay')\n        ", "compilation_passed": true, "time": 0.005156278610229492, "tests_passed": true, "error": null}
{"code": "# Define a function for exponential fitting\n    def exp_fit_func(x, a, b, c):\n        return a * np.exp(-b * x) + c\n\n    # Initialize figure and set layout parameters\n    fig, ax = plt.subplots(1, 1, figsize=(8, 6))\n    plt.style.use(['science', 'no-latex'])\n\n    # Fit a curve to each set of data and plot the result\n    for x_i, y_i, label in zip(x, y, labels):\n        # Fit the data to the exponential function\n        popt, _ = curve_fit(exp_fit_func, x_i, y_i, bounds=(0, [np.inf, np.inf, np.inf]))\n        # Plot the fitted curve with the given label\n        ax.plot(x_i, exp_fit_func(x_i, *popt), label=label, linewidth=0.8, alpha=0.5)\n\n    # Set the plot title, labels, and legend\n    ax.set_title(\"Exponential Fit with", "compilation_passed": false, "time": 0.0001068115234375, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Create a figure to plot the data\n    fig, ax = plt.subplots()\n\n    # Set the figure size\n    fig.set_size_inches(16, 9)\n\n    # Loop over the data sets and plot the data points\n    for x, y, label in zip(x, y, labels):\n        # Fit an exponential curve to the data points\n        def func(x, a, b, c):\n            return a * np.exp(-b * x) + c\n\n        # Initial guesses for the parameters of the exponential function\n        a = max(y) - min(y)\n        b = 1\n        c = min(y)\n        p0 = [a, b, c]\n        # Fit the exponential function to the data points using curve_fit\n        popt, pcov = curve_fit(func, x, y, p0=p0)\n        # Unpack the fitted parameters\n        a, b, c = popt\n        # Plot the data points with a scatter plot\n        ax.scatter(x, y, label=label)\n        # Plot the fitted curve", "compilation_passed": true, "time": 0.004730939865112305, "tests_passed": true, "error": null}
{"code": "fig = plt.figure()\n    ax = fig.add_subplot(111)\n\n    def exp_curve(x, a, b, c):\n        return a * np.exp(-b * x) + c\n\n    def fit_exp_curve(x, y):\n        popt, pcov = curve_fit(exp_curve, x, y)\n        return exp_curve(x, *popt), popt\n\n    for x, y, label in zip(x, y, labels):\n        fitted_curve, params = fit_exp_curve(x, y)\n        a, b, c = params\n        ax.plot(x, fitted_curve, label=f\"{label} (a={a:.2f}, b={b:.2f}, c={c:.2f})\")\n\n    ax.legend()\n\n    return fig", "compilation_passed": true, "time": 0.00486302375793457, "tests_passed": true, "error": null}
