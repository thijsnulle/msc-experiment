{"code": "try:\n        response = requests.get(url)\n        response.raise_for_status()  # Raise an exception if the response status code is not 2xx\n\n        # Create the downloads directory if it doesn't exist\n        DOWNLOAD_DIR.mkdir(parents=True, exist_ok=True)\n\n        # Save the downloaded file in the downloads directory\n        file_path = DOWNLOAD_DIR / filename\n        with open(file_path, 'wb') as file:\n            file.write(response.content)\n\n        # Extract the zip file and get a list of filenames\n        extracted_files = []\n        with zipfile.ZipFile(file_path) as zip_ref:\n            zip_ref.extractall(ZIP_DIR)\n            extracted_files = zip_ref.namelist()\n\n        return 'Download and extraction successful', extracted_files\n    except (requests.exceptions.RequestException, zipfile.BadZipFile, PermissionError) as e:\n        return f'Error: {type(e).__name__} - {str(e", "compilation_passed": false, "time": 0.00043702125549316406, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Set up the download directory\n    DOWNLOAD_DIR.mkdir(exist_ok=True)\n\n    # Download the zip file\n    try:\n        response = requests.get(url, allow_redirects=True)\n        response.raise_for_status()\n        with open(DOWNLOAD_DIR / filename, 'wb') as file:\n            file.write(response.content)\n    except requests.RequestException as e:\n        return f\"Error downloading: {e}\", []\n\n    # Unzip the downloaded file\n    try:\n        with zipfile.ZipFile(DOWNLOAD_DIR / filename, 'r') as zip_ref:\n            unzipped_dir = ZIP_DIR / filename.split('.')[0]\n            unzipped_dir.mkdir(exist_ok=True)\n            zip_ref.extractall(unzipped_dir)\n            filenames = [file.relative_to(unzipped_dir) for file in unzipped_dir.glob('**/*')]\n            return \"Download and extraction successful\", filenames\n    except Exception as", "compilation_passed": false, "time": 0.0008082389831542969, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Create directories for downloads and unzipped files\n    DOWNLOAD_DIR.mkdir(parents=True, exist_ok=True)\n    ZIP_DIR.mkdir(parents=True, exist_ok=True)\n\n    try:\n        # Download the zip file using requests\n        with requests.get(url) as r:\n            r.raise_for_status()\n            with open(DOWNLOAD_DIR / filename, \"wb\") as f:\n                f.write(r.content)\n\n        # Extract the downloaded zip file to the specified directory\n        with zipfile.ZipFile(DOWNLOAD_DIR / filename, \"r\") as zip_ref:\n            zip_ref.extractall(ZIP_DIR)\n\n        # Return success status message and a list of filenames in the unzipped directory\n        filenames = [p.name for p in ZIP_DIR.glob(\"*\")]\n        return \"Download and extraction successful\", filenames\n\n    except requests.exceptions.RequestException as e:\n        # Log the network-related exceptions and return error status message\n", "compilation_passed": false, "time": 0.000553131103515625, "tests_passed": false, "error": "IndentationError"}
{"code": "try:\n        response = requests.get(url)\n        response.raise_for_status()\n\n        zip_file_path = DOWNLOAD_DIR / filename\n        with open(zip_file_path, \"wb\") as f:\n            f.write(response.content)\n\n        with zipfile.ZipFile(zip_file_path, \"r\") as zip_ref:\n            zip_ref.extractall(ZIP_DIR)\n\n        return (\n            \"Download and extraction successful\",\n            list(zip_file.name for zip_file in ZIP_DIR.iterdir()),\n        )\n\n    except requests.exceptions.RequestException as e:\n        print(f\"Error: {e}\")\n        return \"Error: Network issue\", []\n\n    except FileNotFoundError as e:\n        print(f\"Error: {e}\")\n        return \"Error: File issue\", []\n\n    except zipfile.BadZipFile as e:\n        print(f\"Error: {e}\")\n        return \"Error: Bad zip file\", []\n\n    ", "compilation_passed": true, "time": 0.008476018905639648, "tests_passed": true, "error": null}
{"code": "# Create the downloads directory if it doesn't exist\n    if not DOWNLOAD_DIR.exists():\n        DOWNLOAD_DIR.mkdir()\n\n    # Download the zip file\n    try:\n        response = requests.get(url)\n    except requests.exceptions.RequestException as e:\n        status_message = f\"Network error occurred while downloading file: {e}\"\n        return status_message, []\n\n    # Save the zip file in the downloads directory\n    zip_file_path = DOWNLOAD_DIR / filename\n    try:\n        with zip_file_path.open(\"wb\") as f:\n            f.write(response.content)\n        status_message = \"Download successful\"\n    except OSError as e:\n        status_message = f\"Error occurred while saving file: {e}\"\n        return status_message, []\n\n    # Unzip the file\n    try:\n        with zipfile.ZipFile(zip_file_path, 'r') as zip_ref:\n            # Create the unzip directory if it doesn't exist\n            if not ZIP_DIR.exists():", "compilation_passed": false, "time": 0.0004291534423828125, "tests_passed": false, "error": "IndentationError"}
{"code": "try:\n        if DOWNLOAD_DIR.exists() and not DOWNLOAD_DIR.is_dir():\n            raise FileExistsError(f\"'{DOWNLOAD_DIR}' is not a directory.\")\n\n        if ZIP_DIR.exists() and not ZIP_DIR.is_dir():\n            raise FileExistsError(f\"'{ZIP_DIR}' is not a directory.\")\n\n        DOWNLOAD_DIR.mkdir(exist_ok=True)\n        ZIP_DIR.mkdir(exist_ok=True)\n\n        # Download file and save it under the given filename\n        response = requests.get(url)\n        response.raise_for_status()\n        with open(DOWNLOAD_DIR / filename, \"wb\") as f:\n            f.write(response.content)\n\n        # Extract the zip file\n        with zipfile.ZipFile(DOWNLOAD_DIR / filename, \"r\") as zip_ref:\n            zip_ref.extractall(ZIP_DIR / filename[:-4])\n\n        # Get the names of all the files in the extracted directory\n        ext", "compilation_passed": false, "time": 0.000431060791015625, "tests_passed": false, "error": "SyntaxError"}
{"code": "try:\n        response = requests.get(url)\n\n        if response.status_code == 200:\n            DOWNLOAD_DIR.mkdir(exist_ok=True)\n            download_path = DOWNLOAD_DIR / filename\n\n            with open(download_path, 'wb') as file:\n                file.write(response.content)\n\n            ZIP_DIR.mkdir(exist_ok=True)\n            zip_path = ZIP_DIR / filename\n\n            try:\n                with zipfile.ZipFile(download_path) as zip_ref:\n                    zip_ref.extractall(zip_path)\n\n                files = [zip_file.name for zip_file in list(zip_path.iterdir()) if zip_file.is_file()]\n                return ('Download and extraction successful', files)\n\n            except Exception as e:\n                return ('Error: extraction failed', [])\n        else:\n            return ('Error: download failed', [])\n\n    except requests.exceptions.RequestException as e:\n        return ('Error: network error', [", "compilation_passed": false, "time": 0.0004868507385253906, "tests_passed": false, "error": "SyntaxError"}
{"code": "# create downloads directory if it doesn't exist\n    downloads_dir = DOWNLOAD_DIR\n    if not os.path.exists(downloads_dir):\n        os.mkdir(downloads_dir)\n\n    # download zip file from URL\n    try:\n        response = requests.get(url)\n        if response.status_code == 200:\n            with open(os.path.join(downloads_dir, filename), 'wb') as f:\n                f.write(response.content)\n        else:\n            return (f\"Download failed with status code {response.status_code}\", [])\n    except requests.exceptions.RequestException as e:\n        return (f\"Error while downloading: {e}\", [])\n\n    # extract zip file to unzipped_files directory\n    try:\n        with zipfile.ZipFile(os.path.join(downloads_dir, filename), 'r') as zip_ref:\n            zip_ref.extractall(ZIP_DIR)\n        # list filenames in unzipped directory\n        filenames =", "compilation_passed": false, "time": 0.00043010711669921875, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Download the zip file\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n        with open(DOWNLOAD_DIR / filename, \"wb\") as f:\n            f.write(response.content)\n    except requests.exceptions.RequestException as e:\n        return f\"Error downloading file: {e}\", []\n\n    # Extract the zip file\n    try:\n        with zipfile.ZipFile(DOWNLOAD_DIR / filename, \"r\") as zip_ref:\n            zip_ref.extractall(ZIP_DIR)\n    except zipfile.BadZipfile:\n        return \"Error extracting file\", []\n\n    # Get the list of filenames in the unzipped directory\n    filenames = [f.name for f in (ZIP_DIR / filename).glob(\"**/*\")]\n\n    return \"Download and extraction successful\", filenames", "compilation_passed": true, "time": 0.004878997802734375, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Download the zip file\n    try:\n        response = requests.get(url)\n        response.raise_for_status()  # Raise exception for unsuccessful HTTP status codes\n        with open(DOWNLOAD_DIR / filename, 'wb') as f:\n            f.write(response.content)\n    except (requests.exceptions.HTTPError, requests.exceptions.RequestException) as e:\n        return f\"Error: Network-related issue while downloading the file {filename}: {e}\", []\n    except (FileNotFoundError, PermissionError, OSError) as e:\n        return f\"Error: File-related issue while saving the file {filename}: {e}\", []\n\n    # Extract the zip file\n    try:\n        with zipfile.ZipFile(DOWNLOAD_DIR / filename, 'r') as zip_ref:\n            zip_ref.extractall(ZIP_DIR / filename.rsplit('.', 1)[0])\n        return \"Download and extraction successful\", [file for file in (ZIP_DIR / filename.rsplit('.', 1)[0] / \"", "compilation_passed": false, "time": 0.00019407272338867188, "tests_passed": false, "error": "SyntaxError"}
{"code": "try:\n        response = requests.get(url)\n        if not response.ok:\n            status_message = f\"Error: HTTP error {response.status_code}\"\n            return status_message, []\n\n        with open(DOWNLOAD_DIR / filename, \"wb\") as file:\n            file.write(response.content)\n            status_message = f\"Success: {filename} saved.\"\n    except requests.exceptions.RequestException as e:\n        status_message = f\"Error: Network error. {e}\"\n    except FileNotFoundError as e:\n        status_message = f\"Error: File handling error. {e}\"\n    except Exception as e:\n        status_message = f\"Error: Unknown error. {e}\"\n    else:\n        try:\n            with zipfile.ZipFile(DOWNLOAD_DIR / filename, \"r\") as zip_ref:\n                zip_ref.extractall(ZIP_DIR / filename.rsplit(\".\", 1)[0])\n                filenames = [zip_ref.namelist()]\n        except zipfile.BadZ", "compilation_passed": false, "time": 0.0004038810729980469, "tests_passed": false, "error": "SyntaxError"}
{"code": "try:\n        with requests.get(url) as response:\n            response.raise_for_status()\n            with open(DOWNLOAD_DIR / filename, \"wb\") as file:\n                file.write(response.content)\n            with zipfile.ZipFile(DOWNLOAD_DIR / filename, 'r') as zip_ref:\n                zip_ref.extractall(ZIP_DIR / filename.replace('.zip', ''))\n            return (\"Download and extraction successful\", [file.name for file in Path(\n                ZIP_DIR / filename.replace('.zip', '')).glob(\"**/*\")])\n    except requests.exceptions.RequestException as e:\n        return (f\"Error: {e}\", [])\n    except zipfile.BadZipfile as e:\n        return (f\"Error: {e}\", [])\n    except Exception as e:\n        return (f\"Error: {e}\", [])", "compilation_passed": true, "time": 0.0054280757904052734, "tests_passed": true, "error": null}
{"code": "zip_file = DOWNLOAD_DIR / filename\n    zip_dir = ZIP_DIR / filename.replace('.zip', '')\n\n    # Download zip file\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n        zip_file.write_bytes(response.content)\n    except (requests.HTTPError, requests.RequestException, requests.ConnectionError, requests.ConnectTimeout) as e:\n        return (f\"Network error: {e}. Failed to download {zip_file}.\", [])\n    except FileNotFoundError as e:\n        return (f\"File error: {e}. Failed to write {zip_file}.\", [])\n\n    # Extract zip file\n    try:\n        zip_ref = zipfile.ZipFile(zip_file, 'r')\n        zip_ref.extractall(zip_dir)\n        file_list = zip_ref.namelist()\n        zip_ref.close()\n        zip_file.unlink()\n    except (zipfile.BadZipFile, zipfile.LargeZ", "compilation_passed": false, "time": 0.00038909912109375, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Download the file from the provided URL\n    try:\n        response = requests.get(url, allow_redirects=True)\n        response.raise_for_status()\n        with open(filename, \"wb\") as f:\n            f.write(response.content)\n            print(f\"File downloaded: {filename}\")\n    except (requests.HTTPError, requests.ConnectionError, requests.RequestException) as e:\n        print(f\"Error downloading file: {filename}\")\n        print(f\"Exception: {e}\")\n        return f\"Error: {e}\", []\n\n    # Extract the files from the downloaded zip file\n    try:\n        with zipfile.ZipFile(filename) as zfile:\n            zfile.extractall(ZIP_DIR)\n            print(f\"Files extracted from {filename} to {ZIP_DIR}\")\n            return f\"Download and extraction successful: {filename}\", [entry.filename for entry in zfile.infolist()]\n    except (zipfile.BadZipfile, zipfile.LargeZipFile, OSError) as", "compilation_passed": false, "time": 0.0003941059112548828, "tests_passed": false, "error": "SyntaxError"}
{"code": "try:\n        response = requests.get(url)\n        response.raise_for_status()\n    except (requests.HTTPError, requests.ConnectionError, requests.Timeout) as e:\n        return f\"Error: Failed to download the file {filename} with error: {e}\", []\n    try:\n        DOWNLOAD_DIR.mkdir(exist_ok=True)\n        with open(DOWNLOAD_DIR / filename, \"wb\") as f:\n            f.write(response.content)\n        return download_unzip_files(DOWNLOAD_DIR, filename, ZIP_DIR)\n    except (FileNotFoundError, OSError) as e:\n        return f\"Error: Failed to save the file {filename} with error: {e}\", []", "compilation_passed": true, "time": 0.0046808719635009766, "tests_passed": false, "error": "NameError"}
{"code": "# Create directories if they don't exist\n    DOWNLOAD_DIR.mkdir(exist_ok=True)\n    ZIP_DIR.mkdir(exist_ok=True)\n\n    # Create file paths\n    filepath = DOWNLOAD_DIR / filename\n    unzipped_dirpath = ZIP_DIR / filename.rstrip(\".zip\")\n\n    # Check if file exists before downloading\n    if filepath.exists() and unzipped_dirpath.exists():\n        return f\"{filename} already exists. Skipping download and extraction.\", []\n\n    # Download file\n    try:\n        response = requests.get(url, stream=True)\n        response.raise_for_status()\n        with open(filepath, \"wb\") as file:\n            for chunk in response.iter_content(chunk_size=4096):\n                file.write(chunk)\n    except (requests.HTTPError, requests.ConnectionError, requests.Timeout) as e:\n        return f\"Network error while downloading {filename}: {e}\", []\n\n    # Extract file\n    try", "compilation_passed": false, "time": 0.0002040863037109375, "tests_passed": false, "error": "SyntaxError"}
{"code": "try:\n        # Download the file using requests\n        response = requests.get(url)\n        response.raise_for_status()\n\n        # Save the downloaded zip file to disk\n        with open(DOWNLOAD_DIR / filename, \"wb\") as f:\n            f.write(response.content)\n\n        # Extract the zip file to the ZIP_DIR\n        with zipfile.ZipFile(DOWNLOAD_DIR / filename, \"r\") as zip_ref:\n            zip_ref.extractall(ZIP_DIR)\n\n        # Return success and list of filenames in the unzipped directory\n        filenames = [str(file.relative_to(ZIP_DIR)) for file in Path(ZIP_DIR).rglob(\"*\")]\n        return (\"Download and extraction successful\", filenames)\n\n    except requests.exceptions.RequestException:\n        # Raised for any exceptions that occur during the download process\n        return (\"Error: Network-related issues encountered during the download process\", [])\n\n    except FileNotFoundError:\n        # Raised for", "compilation_passed": false, "time": 0.0002810955047607422, "tests_passed": false, "error": "IndentationError"}
{"code": "# Create the download directory if it doesn't exist\n    download_dir = DOWNLOAD_DIR\n    download_dir.mkdir(parents=True, exist_ok=True)\n    download_path = download_dir / filename\n\n    # Download the zip file\n    try:\n        with requests.get(url, stream=True, verify=False) as response:\n            response.raise_for_status()\n            with download_path.open('wb') as file:\n                for chunk in response.iter_content(chunk_size=1024):\n                    file.write(chunk)\n    except (requests.exceptions.RequestException, IOError) as e:\n        print(f\"Error downloading {filename}: {e}\")\n        return (f\"Error: {e}\", [])\n\n    # Extract the zip file\n    try:\n        zip_dir = ZIP_DIR\n        zip_dir.mkdir(parents=True, exist_ok=True)\n        unzip_path = zip_dir / filename.split(\".\")[0]\n        with zipfile.ZipFile(", "compilation_passed": false, "time": 0.0003409385681152344, "tests_passed": false, "error": "SyntaxError"}
{"code": "status = \"\"\n\n    # Check for errors before download\n    if not url:\n        status = \"Error: No URL provided\"\n        return (status, [])\n    if not filename:\n        status = \"Error: No filename provided\"\n        return (status, [])\n\n    try:\n        response = requests.get(url)\n\n        if not response.ok:\n            status = f\"Error: Response not ok. Status code: {response.status_code}\"\n            return (status, [])\n\n        # Create download directory if it doesn't exist\n        download_dir = DOWNLOAD_DIR.absolute()\n        download_dir.mkdir(parents=True, exist_ok=True)\n\n        # Save the downloaded file to the download directory\n        download_path = download_dir / filename\n        with open(download_path, \"wb\") as f:\n            f.write(response.content)\n\n        # Create unzipped directory if it doesn't exist\n        zip_dir = ZIP_DIR.absolute()\n        zip_dir.mkdir(parents=True, exist_ok=", "compilation_passed": false, "time": 0.00031495094299316406, "tests_passed": false, "error": "SyntaxError"}
{"code": "status_message = \"Download and extraction successful\"\n    filenames = []\n\n    # Create download and unzip directories if they don't exist\n    download_dir = DOWNLOAD_DIR\n    zip_dir = ZIP_DIR\n    download_dir.mkdir(parents=True, exist_ok=True)\n    zip_dir.mkdir(parents=True, exist_ok=True)\n\n    # Download the zip file\n    try:\n        r = requests.get(url)\n    except requests.exceptions.RequestException as e:\n        status_message = f\"Error: {e}\"\n        return status_message, filenames\n\n    zip_file_path = download_dir / filename\n    with open(zip_file_path, \"wb\") as f:\n        f.write(r.content)\n\n    # Extract the zip file\n    try:\n        with zipfile.ZipFile(zip_file_path, \"r\") as zip_ref:\n            zip_ref.extractall(zip_dir)\n    except zipfile.BadZipFile as e:\n", "compilation_passed": false, "time": 0.00027108192443847656, "tests_passed": false, "error": "IndentationError"}
{"code": "# Define the URLs and file names for the zip files\n    urls = [url]\n    filenames = [filename]\n\n    # Download the zip files and save them to the 'downloads' directory\n    for url, filename in zip(urls, filenames):\n        try:\n            response = requests.get(url)\n            response.raise_for_status()\n            DOWNLOAD_DIR.mkdir(exist_ok=True)\n            file_path = DOWNLOAD_DIR / filename\n            with open(file_path, \"wb\") as f:\n                f.write(response.content)\n                status = \"Download successful\"\n                print(f\"{status}: {url}\")\n        except requests.exceptions.RequestException as e:\n            status = \"Error - Network exception raised\"\n            print(f\"{status}: {e}\")\n        except (OSError, FileNotFoundError) as e:\n            status = \"Error - File handling exception raised\"\n            print(f\"{status}: {e}\")\n        except Exception as e:\n            status = \"Error - Unknown exception raised\"\n            print", "compilation_passed": true, "time": 0.0033369064331054688, "tests_passed": false, "error": "TypeError"}
{"code": "# Download the zip file\n    try:\n        r = requests.get(url)\n        r.raise_for_status()\n    except (requests.HTTPError, requests.ConnectionError, requests.Timeout) as e:\n        return f\"Error: {e}\", []\n    else:\n        if r.status_code == 200:\n            zip_path = DOWNLOAD_DIR / filename\n            with open(zip_path, \"wb\") as f:\n                f.write(r.content)\n\n            # Extract the zip file\n            try:\n                with zipfile.ZipFile(zip_path, 'r') as zip_ref:\n                    zip_ref.extractall(ZIP_DIR)\n                    unzipped_filenames = zip_ref.namelist()\n            except zipfile.BadZipfile as e:\n                return f\"Error: {e}\", []\n            except OSError as e:\n                return f\"Error: {e}\", []\n            else:\n                return \"Download and extraction successful\", unzipped_filenames\n        else", "compilation_passed": false, "time": 0.00019097328186035156, "tests_passed": false, "error": "SyntaxError"}
{"code": "print(f\"Processing {url}\")\n    # Define the download directory and create if it doesn't exist\n    download_dir = DOWNLOAD_DIR\n    if not download_dir.exists():\n        download_dir.mkdir()\n\n    # Download the file\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n    except (requests.exceptions.RequestException, IOError) as e:\n        return f\"Error downloading {url}: {e}\"\n\n    # Save the file to the specified filename\n    filepath = download_dir / filename\n    with open(filepath, 'wb') as f:\n        try:\n            f.write(response.content)\n        except (IOError, OSError) as e:\n            return f\"Error saving {filepath}: {e}\"\n\n    # Extract the zip file\n    try:\n        with zipfile.ZipFile(filepath, 'r') as zip_ref:\n            unzip_dir = ZIP_DIR / filename.rstrip(\".zip\")  # Remove .zip extension", "compilation_passed": false, "time": 0.0003180503845214844, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Download the file\n    response = requests.get(url)\n\n    # Check the response status code\n    if response.status_code == 200:\n        # Save the downloaded zip file to a specific directory\n        DOWNLOAD_DIR.mkdir(exist_ok=True)  # Ensure download directory exists\n        filepath = DOWNLOAD_DIR / filename\n        with open(filepath, \"wb\") as f:\n            f.write(response.content)\n        # Extract the zip file contents\n        ZIP_DIR.mkdir(exist_ok=True)  # Ensure unzipped files directory exists\n        with zipfile.ZipFile(filepath, \"r\") as zip_ref:\n            zip_ref.extractall(ZIP_DIR)\n        # Get the list of extracted file names\n        files_list = list(map(str, ZIP_DIR.iterdir()))\n        # Return a status message and the file list\n        return \"Download and extraction successful\", files_list\n    else:\n        # Return an error message if download fails\n        return f\"Error: Status code {response", "compilation_passed": false, "time": 0.00011706352233886719, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Create directory if it doesn't exist\n    DOWNLOAD_DIR.mkdir(exist_ok=True)\n    ZIP_DIR.mkdir(exist_ok=True)\n\n    # Download and extract file\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n\n        zip_filename = DOWNLOAD_DIR / filename\n        with open(zip_filename, \"wb\") as file:\n            file.write(response.content)\n\n        with zipfile.ZipFile(zip_filename) as zip_file:\n            zip_file.extractall(ZIP_DIR)\n\n        # Get list of filenames in unzipped directory\n        filenames = [item.name for item in ZIP_DIR.iterdir() if item.is_file()]\n\n        return (\"Download and extraction successful\", filenames)\n\n    except requests.exceptions.RequestException as error:\n        return (\"Error downloading file\", [str(error)])\n\n    except zipfile.BadZipFile as error:\n        return (\"Error", "compilation_passed": false, "time": 0.00013017654418945312, "tests_passed": false, "error": "SyntaxError"}
{"code": "response = requests.get(url)\n    if response.status_code == 200:\n        try:\n            with open(DOWNLOAD_DIR / filename, \"wb\") as f:\n                f.write(response.content)\n            with zipfile.ZipFile(DOWNLOAD_DIR / filename, \"r\") as zip_ref:\n                zip_ref.extractall(ZIP_DIR / filename.split(\".\")[0])\n                files_list = zip_ref.namelist()\n            return \"Download and extraction successful\", files_list\n        except FileNotFoundError as e:\n            return f\"Error: File not found - {e}\", []\n        except Exception as e:\n            return f\"Error: Unable to extract zip file - {e}\", []\n    else:\n        return f\"Error: Unable to download file - Status code {response.status_code}\", []", "compilation_passed": true, "time": 0.0030400753021240234, "tests_passed": true, "error": null}
{"code": "try:\n        # Create download directory\n        if not DOWNLOAD_DIR.exists():\n            DOWNLOAD_DIR.mkdir()\n\n        # Download the file\n        response = requests.get(url, stream=True)\n        response.raise_for_status()\n        filename = DOWNLOAD_DIR / filename\n        with open(filename, 'wb') as file:\n            for chunk in response.iter_content(chunk_size=1024):\n                file.write(chunk)\n\n        # Unzip the file\n        with zipfile.ZipFile(filename, 'r') as zip_ref:\n            zip_ref.extractall(ZIP_DIR)\n\n        # List the extracted files\n        unzipped_files = list(map(str, ZIP_DIR.iterdir()))\n\n        return ('Download and extraction successful', unzipped_files)\n\n    except requests.exceptions.RequestException as e:\n        return (f\"Error: Failed to download {filename} - {e}\", [])\n\n    except zipfile.BadZipFile as e:\n        return (f\"Error", "compilation_passed": false, "time": 0.00013589859008789062, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Download the zip file\n    response = requests.get(url)\n    if response.status_code != 200:\n        return \"Error: Failed to download file\"\n    with open(DOWNLOAD_DIR / filename, \"wb\") as file:\n        file.write(response.content)\n    print(f\"{filename} downloaded successfully\")\n\n    # Extract the zip file\n    try:\n        with zipfile.ZipFile(DOWNLOAD_DIR / filename, 'r') as zip_ref:\n            zip_ref.extractall(ZIP_DIR)\n    except (zipfile.BadZipFile, zipfile.LargeZipFile) as e:\n        return f\"Error: Failed to extract file {filename}\"\n    except PermissionError:\n        return f\"Error: Permission denied for file {filename}\"\n    except FileNotFoundError:\n        return f\"Error: File not found {filename}\"\n    except RuntimeError as e:\n        return f\"Error: {filename} is not a valid ZIP file\"\n    except Exception as e:\n        return f\"Error: An", "compilation_passed": false, "time": 0.00012683868408203125, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Check if the url is valid\n    if not url:\n        return \"No URL provided\"\n\n    # Download the zip file to a temporary location\n    try:\n        r = requests.get(url)\n        with open(DOWNLOAD_DIR / filename, \"wb\") as f:\n            f.write(r.content)\n    except Exception as e:\n        return f\"Error downloading {url}: {e}\"\n\n    # Extract the zip file to the specified directory\n    try:\n        zip_ref = zipfile.ZipFile(DOWNLOAD_DIR / filename)\n        zip_ref.extractall(ZIP_DIR / filename.rsplit('.', 1)[0])\n    except Exception as e:\n        return f\"Error extracting {filename}: {e}\"\n\n    # Check if the zip file contains any files\n    if not any(ZIP_DIR / filename.rsplit('.', 1)[0].iterdir()):\n        return \"The zip file does not contain any files\"\n\n    # Return a list of filenames in the unzipped directory\n    return \"Download", "compilation_passed": false, "time": 0.00011897087097167969, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Set up filepaths\n    download_path = DOWNLOAD_DIR / filename\n    unzip_path = ZIP_DIR / filename.replace(\".zip\", \"\")\n\n    # Download zip file\n    try:\n        response = requests.get(url)\n        with open(download_path, \"wb\") as file:\n            file.write(response.content)\n    except requests.exceptions.RequestException as e:\n        # Network error\n        return f\"Error downloading zip file {filename}: {e}\", []\n\n    # Extract zip file\n    try:\n        with zipfile.ZipFile(download_path, \"r\") as zip_ref:\n            zip_ref.extractall(unzip_path)\n    except (zipfile.BadZipFile, FileNotFoundError) as e:\n        # File error\n        return f\"Error extracting zip file {filename}: {e}\", []\n\n    # List unzipped files\n    unzipped_files = [f for f in os.listdir(unzip_path) if os.path.isfile(os.path", "compilation_passed": false, "time": 0.0002810955047607422, "tests_passed": false, "error": "SyntaxError"}
