{"code": "# Set the random seed\n    np.random.seed(seed)\n\n    # Generate the samples\n    samples = np.random.normal(mu, sigma, num_samples)\n\n    # Create the figure\n    fig, (ax1, ax2) = plt.subplots(nrows=1, ncols=2, figsize=(10, 5))\n\n    # Plot the histogram\n    ax1.hist(samples, bins=30, density=True, alpha=0.6, color='blue', label='Histogram')\n    x = np.linspace(min(samples), max(samples), 100)\n    ax1.plot(x, stats.norm.pdf(x, mu, sigma), label='PDF')\n    ax1.set_xlabel('x')\n    ax1.set_ylabel('Probability density')\n    ax1.set_title('Histogram')\n    ax1.legend()\n\n    # Plot the Q-Q plot\n    ax2.set_title('Q-Q plot')\n    ax2.set_xlabel('Theoretical quantiles", "compilation_passed": false, "time": 0.00015211105346679688, "tests_passed": false, "error": "SyntaxError"}
{"code": "np.random.seed(seed)  # Set a seed for reproducibility\n\n    # Generate samples from the normal distribution\n    samples = np.random.normal(mu, sigma, num_samples)\n\n    # Create a figure\n    fig, axs = plt.subplots(1, 2, figsize=(10, 5))\n\n    # Plot the histogram\n    axs[0].hist(samples, bins=20, edgecolor='black')\n    axs[0].set_xlabel('Value')\n    axs[0].set_ylabel('Frequency')\n    axs[0].set_title('Histogram of Samples')\n\n    # Plot the Q-Q plot\n    # Fit a theoretical distribution to the samples\n    dist = stats.norm(loc=mu, scale=sigma)\n\n    # Get quantiles of the theoretical distribution\n    theoretical_quantiles = dist.ppf(np.linspace(0.001, 0.999, num_samples))\n\n    # Get quantiles from the samples\n    sample_quantiles = np.", "compilation_passed": false, "time": 0.00023126602172851562, "tests_passed": false, "error": "SyntaxError"}
{"code": "np.random.seed(seed)\n    # Generate 1000 samples from a normal distribution with mean 0 and standard deviation 1.\n    samples = np.random.normal(mu, sigma, num_samples)\n\n    fig = plt.figure()\n    ax1 = fig.add_subplot(1, 2, 1)\n    # The .hist() function creates a histogram of the samples.\n    # The .title() function sets the title of the plot.\n    # The .xlabel() function sets the label of the x-axis.\n    # The .ylabel() function sets the label of the y-axis.\n    ax1.hist(samples, bins=20)\n    ax1.title.set_text('Histogram')\n    ax1.set_xlabel('Value')\n    ax1.set_ylabel('Frequency')\n\n    ax2 = fig.add_subplot(1, 2, 2)\n    # The .qqplot() function creates a Q-Q plot of the samples.\n    # The .title() function sets the title of the plot.", "compilation_passed": true, "time": 0.2426900863647461, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n\n    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 4))\n    ax1.hist(samples, bins=20, alpha=0.5, edgecolor='black')\n    ax1.set_xlabel('x')\n    ax1.set_ylabel('Frequency')\n    ax1.set_title('Histogram')\n\n    residuals = stats.probplot(samples, plot=ax2)[0][0]\n    ax2.scatter(residuals, samples, alpha=0.5, edgecolor='black')\n    ax2.set_xlabel('Theoretical quantiles')\n    ax2.set_ylabel('Ordered values')\n    ax2.set_title('Q-Q plot')\n\n    fig.tight_layout()\n    return fig", "compilation_passed": true, "time": 0.2507948875427246, "tests_passed": true, "error": null}
{"code": "# Set the seed for the random number generator\n    np.random.seed(seed)\n\n    # Generate the samples\n    samples = np.random.normal(mu, sigma, num_samples)\n\n    # Create the figure and axes\n    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\n\n    # Plot the histogram\n    ax1.hist(samples, bins='auto')\n    ax1.set_title(f\"Histogram (mean={mu}, sigma={sigma})\")\n    ax1.set_xlabel(\"Value\")\n    ax1.set_ylabel(\"Frequency\")\n\n    # Plot the Q-Q plot\n    # Create a list of normal distribution values to compare with the sample data\n    normal = np.linspace(stats.norm.ppf(0.01, mu, sigma), stats.norm.ppf(0.99, mu, sigma), 100)\n    # Use the percent point function (inverse of the CDF) to find the sample quantiles\n    sample_", "compilation_passed": true, "time": 0.012060880661010742, "tests_passed": false, "error": "NameError"}
{"code": "np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n\n    fig = plt.figure()\n\n    ax1 = fig.add_subplot(121)\n    ax1.hist(samples, bins='auto')\n    ax1.set_title(\"Histogram\")\n    ax1.set_xlabel('Value')\n    ax1.set_ylabel('Frequency')\n\n    ax2 = fig.add_subplot(122)\n    stats.probplot(samples, plot=ax2)\n    ax2.set_title(\"Q-Q plot\")\n    fig.tight_layout()\n\n    return fig", "compilation_passed": true, "time": 0.2160341739654541, "tests_passed": true, "error": null}
{"code": "# Set seed\n    np.random.seed(seed)\n    # Generate samples\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    # Create figure\n    fig, axs = plt.subplots(1, 2, figsize=(10, 5))\n    # Histogram\n    axs[0].hist(samples, bins=100)\n    axs[0].set_title('Histogram')\n    # Q-Q plot\n    stats.probplot(samples, dist=stats.norm, plot=axs[1])\n    axs[1].set_title('Q-Q plot')\n    plt.tight_layout()\n    # Return figure\n    return fig", "compilation_passed": true, "time": 0.3210141658782959, "tests_passed": true, "error": null}
{"code": "# Set the seed for the random number generator.\n    np.random.seed(seed)\n\n    # Generate normal distribution samples with the given mean and standard deviation.\n    samples = np.random.normal(mu, sigma, num_samples)\n\n    # Generate the figure and a grid of subplots with 1 row and 2 columns.\n    fig, (ax1, ax2) = plt.subplots(1, 2)\n\n    # Create the histogram of the normal distribution samples.\n    ax1.hist(samples, bins=30, edgecolor=\"black\")\n    ax1.set_xlabel('Value')\n    ax1.set_ylabel('Frequency')\n    ax1.set_title('Histogram')\n\n    # Create the Q-Q plot of the normal distribution samples.\n    ax2.set_title('Q-Q plot')\n    stats.probplot(samples, dist=\"norm\", plot=ax2)\n\n    # Set the aspect ratio of the figure.\n    fig.set_tight_layout(True)\n\n    return fig", "compilation_passed": true, "time": 0.09006190299987793, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    # Generate the samples\n    samples = np.random.normal(mu, sigma, size=num_samples)\n\n    # Create a figure to plot the histogram and Q-Q plot\n    fig, (ax1, ax2) = plt.subplots(nrows=1, ncols=2, figsize=(8, 4))\n\n    # Plot the histogram\n    ax1.hist(samples, bins='auto', density=True, alpha=0.6, color='green')\n\n    # Plot the Q-Q plot\n    # Sort the samples\n    sorted_samples = np.sort(samples)\n    # Create a normal distribution\n    dist = stats.norm(mu, sigma)\n    # Get the theoretical quantiles\n    theoretical_quantiles = dist.ppf(np.arange(1, num_samples + 1) / num_samples)\n    # Get the sample quantiles\n    sample_quantiles = sorted_samples\n    # Plot the Q-Q plot\n    ax2.plot(theoretical_quantiles, sample_quantiles, 'o'", "compilation_passed": false, "time": 0.0002741813659667969, "tests_passed": false, "error": "SyntaxError"}
{"code": "np.random.seed(seed)\n    # Generate num_samples random samples from a normal distribution with mean mu and standard deviation sigma\n    samples = np.random.normal(mu, sigma, num_samples)\n\n    # Create a new figure and add two subplots, one for the histogram and one for the Q-Q plot\n    fig, (ax1, ax2) = plt.subplots(1, 2)\n\n    # Create a histogram of the samples on the first subplot\n    ax1.hist(samples, bins=20, density=True)\n    ax1.set_title('Histogram')\n    ax1.set_xlabel('x')\n    ax1.set_ylabel('density')\n\n    # Create a Q-Q plot of the samples on the second subplot\n    ax2.plot(np.sort(samples), stats.norm.ppf(np.linspace(0, 1, num_samples)), 'bo', ms=5)\n    ax2.plot(np.linspace(stats.norm.ppf(0.001), stats.norm.ppf", "compilation_passed": false, "time": 0.00021696090698242188, "tests_passed": false, "error": "SyntaxError"}
{"code": "np.random.seed(seed)\n\n    normal = np.random.normal(mu, sigma, num_samples)\n\n    fig = plt.figure(figsize=(12, 10))\n    grid = plt.GridSpec(2, 2)\n    ax1 = fig.add_subplot(grid[0, 0])\n    ax2 = fig.add_subplot(grid[1, :])\n    plt.title(\"Skewness: {:.2f}  Kurtosis: {:.2f}\".format(stats.skew(normal), stats.kurtosis(normal)), y=1.0, x=1.0, loc=\"right\")\n    ax1.hist(normal, bins=10, range=(-4*sigma+mu, 4*sigma+mu))\n    stats.probplot(normal, dist=\"norm\", plot=ax2, line=\"r\")\n    ax2.grid(True)\n    ax2.set_xlabel(\"Theoretical quantiles\")\n    ax2.set_ylabel(\"Generated quantiles", "compilation_passed": false, "time": 0.0001049041748046875, "tests_passed": false, "error": "SyntaxError"}
{"code": "np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n\n    # Generate a figure with two subplots: a histogram and a Q-Q plot\n    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(8, 6))\n    ax1.hist(samples, bins=30, density=True)\n    ax1.set_title('Histogram')\n\n    # Draw the Q-Q plot\n    residuals = stats.probplot(samples, plot=ax2)\n    ax2.set_title('Q-Q plot')\n\n    # Add a legend to the Q-Q plot\n    line1, = ax2.get_lines()\n    line1.set_label(\"Sample quantiles\")\n    ax2.legend(loc=\"lower right\")\n    fig.tight_layout()\n    return fig", "compilation_passed": true, "time": 0.29984402656555176, "tests_passed": false, "error": "ValueError"}
{"code": "np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\n    ax1.hist(samples, bins=30, edgecolor='k', linewidth=0.5, alpha=0.7)\n    ax1.set_xlabel('Samples', fontsize=12)\n    ax1.set_ylabel('Frequency', fontsize=12)\n    ax1.set_title('Histogram', fontsize=14)\n    ax2.set_title('Q-Q plot', fontsize=14)\n    ax2.set_xlabel('Theoretical quantiles', fontsize=12)\n    ax2.set_ylabel('Samples quantiles', fontsize=12)\n    stats.probplot(samples, dist=stats.norm, plot=ax2)\n    plt.tight_layout()\n    return fig", "compilation_passed": true, "time": 0.252155065536499, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n\n    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 4))\n\n    ax1.hist(samples, bins='auto')\n    ax1.set_xlabel('x')\n    ax1.set_ylabel('Frequency')\n    ax1.set_title('Histogram')\n\n    prob = stats.probplot(samples, dist=\"norm\", plot=ax2)\n    ax2.set_xlabel('Standard Normal')\n    ax2.set_ylabel('x')\n    ax2.set_title('Q-Q plot')\n\n    fig.tight_layout()\n\n    return fig", "compilation_passed": true, "time": 0.24263429641723633, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    x = np.random.normal(mu, sigma, num_samples)\n\n    fig = plt.figure()\n    ax1 = fig.add_subplot(1, 2, 1)\n    ax1.hist(x, bins='auto')\n    ax1.set_title('Histogram')\n    ax2 = fig.add_subplot(1, 2, 2)\n    ax2.set_title('Q-Q plot')\n    stats.probplot(x, dist=stats.norm, plot=ax2)\n    return fig", "compilation_passed": true, "time": 0.08350014686584473, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n\n    # Generate samples from a normal distribution with the given mean and standard deviation\n    samples = stats.norm.rvs(mu, sigma, num_samples)\n\n    # Create a figure for plotting\n    fig = plt.figure()\n    ax1 = fig.add_subplot(211)\n    ax2 = fig.add_subplot(212)\n\n    # Plot a histogram of the generated samples\n    ax1.hist(samples, bins=30, edgecolor='black', color='blue', linewidth=2)\n    ax1.set_title('Histogram of generated samples')\n    ax1.set_xlabel('Sample value')\n    ax1.set_ylabel('Frequency')\n\n    # Plot a Q-Q plot of the generated samples against the distribution\n    ax2.set_title('Normal Q-Q plot of generated samples')\n    ax2.set_xlabel('Theoretical quantiles')\n    ax2.set_ylabel('Ordered quantiles')\n    res = stats.probplot(samples, dist=stats.norm, plot=ax", "compilation_passed": false, "time": 0.0002789497375488281, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Set the random seed.\n    np.random.seed(seed)\n\n    # Generate the samples.\n    samples = np.random.normal(mu, sigma, size=num_samples)\n\n    # Create the figure.\n    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(5, 5), constrained_layout=True)\n    fig.suptitle(f'\u03bc={mu}, \u03c3={sigma}')\n    ax1.hist(samples, bins=30, alpha=0.5)\n    ax1.grid(alpha=0.3)\n\n    # Generate the Q-Q plot.\n    stats.probplot(samples, dist='norm', plot=ax2)\n\n    return fig", "compilation_passed": true, "time": 0.09111499786376953, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    # Generate the samples from a normal distribution with the given mean and standard deviation\n    samples = np.random.normal(mu, sigma, num_samples)\n\n    # Create a figure and a grid of subplots\n    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(8,4))\n\n    # Plot the histogram of the samples\n    ax1.hist(samples, bins=30, edgecolor='black')\n    ax1.set_title('Histogram of Normal Samples')\n    ax1.set_xlabel('Value')\n    ax1.set_ylabel('Frequency')\n\n    # Plot the Q-Q plot of the samples\n    ax2.scatter(*stats.probplot(samples))\n    ax2.set_title('Q-Q Plot')\n    ax2.plot(*stats.probplot(samples, plot=ax2)[2], 'r--')\n\n    fig.tight_layout()\n\n    return fig", "compilation_passed": true, "time": 0.01354217529296875, "tests_passed": false, "error": "ValueError"}
{"code": "np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n\n    # Create a figure to plot the histogram and Q-Q plot\n    fig, (ax1, ax2) = plt.subplots(nrows=1, ncols=2, figsize=(10, 5))\n\n    # Plot the histogram\n    ax1.hist(samples, bins=30, density=True, alpha=0.5, label=\"Histogram\")\n    ax1.set_xlabel(\"Value\")\n    ax1.set_ylabel(\"Probability\")\n    ax1.set_title(\"Histogram of Normal Distribution Samples\")\n\n    # Plot the Q-Q plot\n    residuals = np.sort(samples)\n    expected = stats.norm.ppf(np.linspace(0, 1, num_samples))\n    ax2.scatter(expected, residuals, alpha=0.5, label=\"Q-Q plot\")\n    ax2.set_xlabel(\"Theoretical", "compilation_passed": false, "time": 0.00011515617370605469, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Initialize the random number generator\n    np.random.seed(seed)\n\n    # Generate the samples\n    samples = np.random.normal(mu, sigma, size=num_samples)\n\n    # Create a figure with two subplots\n    fig, ax = plt.subplots(1, 2, figsize=(10, 5))\n\n    # Plot the histogram\n    ax[0].hist(samples, bins='auto', edgecolor='black')\n    ax[0].set_title('Histogram')\n    ax[0].set_xlabel('Value')\n    ax[0].set_ylabel('Frequency')\n\n    # Plot the Q-Q plot\n    stats.probplot(samples, dist=\"norm\", plot=ax[1])\n    ax[1].set_title('Q-Q plot')\n    ax[1].set_xlabel('Standard Normal quantiles')\n    ax[1].set_ylabel('Sorted observed values')\n\n    # Adjust the layout\n    fig.tight_layout()\n\n    return fig", "compilation_passed": true, "time": 0.2438220977783203, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n\n    # Create a new figure\n    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(8, 3))\n\n    # Generate the histogram\n    ax1.hist(samples, bins=30, edgecolor='black')\n    ax1.set_title(f'Histogram (Mean = {mu}, Std = {sigma})')\n    ax1.set_xlabel('Value')\n    ax1.set_ylabel('Frequency')\n\n    # Generate the Q-Q plot\n    ax2.scatter(np.sort(samples), stats.norm.ppf(np.linspace(0, 1, num_samples)), alpha=0.6)\n    ax2.plot([np.min(samples), np.max(samples)], [np.min(samples), np.max(samples)], color='red')\n    ax2.set_title(f'Q-Q plot (Mean = {mu}, St", "compilation_passed": false, "time": 0.0001571178436279297, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Set random seed for reproducibility\n    np.random.seed(seed)\n\n    # Generate normal distribution\n    samples = np.random.normal(loc=mu, scale=sigma, size=num_samples)\n\n    # Create a figure with 1 row and 2 columns of subplots\n    fig, (ax1, ax2) = plt.subplots(1, 2)\n\n    # Plot the histogram\n    ax1.hist(samples, bins=50, edgecolor='black', facecolor='orange')\n    ax1.set_title('Histogram')\n\n    # Plot the Q-Q plot\n    res = stats.probplot(samples, plot=ax2)\n    ax2.set_title('Q-Q plot')\n\n    fig.tight_layout()\n    plt.show()\n\n    return fig", "compilation_passed": true, "time": 0.6084320545196533, "tests_passed": true, "error": null}
{"code": "# Set the random seed for reproducibility\n    np.random.seed(seed)\n    # Generate a sample from the normal distribution\n    sample = np.random.normal(mu, sigma, size=num_samples)\n\n    # Create a figure to display the histogram and Q-Q plot\n    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\n\n    # Plot the histogram\n    ax1.hist(sample, bins=50, density=True, alpha=0.6, edgecolor='k', linewidth=0.5)\n\n    # Plot the Q-Q plot\n    # Sort the sample and get the ordered values\n    ordered = np.sort(sample)\n    # Create an array of quantiles from 0 to 1 with the same length as the ordered values\n    quantiles = np.arange(1, len(ordered) + 1) / len(ordered)\n    # Calculate the theoretical quantiles based on the ordered values\n    theoretical = stats.norm.ppf(quantiles, mu, sigma)\n    # Plot the Q", "compilation_passed": true, "time": 0.017283916473388672, "tests_passed": true, "error": null}
{"code": "# Set the seed for the random number generator\n    np.random.seed(seed)\n\n    # Generate a normal distribution with the given mean and standard deviation\n    samples = np.random.normal(mu, sigma, num_samples)\n\n    # Create a figure for the histogram and Q-Q plot\n    fig, axs = plt.subplots(1, 2, figsize=(12, 5))\n\n    # Create a histogram of the generated samples\n    axs[0].hist(samples, bins=20, edgecolor='black')\n    axs[0].set_title('Histogram')\n\n    # Create a Q-Q plot of the generated samples\n    axs[1].scatter(stats.norm.ppf(np.arange(1, num_samples + 1) / (num_samples + 1)), np.sort(samples))\n    axs[1].set_title('Q-Q plot')\n\n    # Return the figure containing the histogram and Q-Q plot\n    return fig", "compilation_passed": true, "time": 0.01747274398803711, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig, (ax1, ax2) = plt.subplots(1, 2)\n    ax1.hist(samples, bins=20, edgecolor='black')\n    ax2.set_title('Q-Q plot')\n    stats.probplot(samples, dist='norm', plot=ax2,\n                   fit=True, sapmle_kw=dict(color='black', linewidth=2))\n    ax1.set_title(f'$\\mu$ = {mu}, $\\sigma$ = {sigma}')\n    ax1.set_xlabel('x')\n    ax1.set_ylabel('Frequency')\n    ax2.get_lines()[0].set_color('red')\n    plt.tight_layout()\n\n    return fig", "compilation_passed": true, "time": 0.011442184448242188, "tests_passed": false, "error": "TypeError"}
{"code": "# Set the seed and generate normal distribution\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n\n    # Create the figure and plots\n    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5))\n\n    # Create the histogram\n    ax1.hist(samples, bins=30, density=True)\n    ax1.set_title('Histogram')\n\n    # Create the Q-Q plot\n    ax2.set_title('Q-Q plot')\n    res = stats.probplot(samples, plot=ax2)\n\n    # Return the figure\n    return fig", "compilation_passed": true, "time": 0.08963894844055176, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig, (ax1, ax2) = plt.subplots(1, 2)\n    ax1.hist(samples, bins=100, edgecolor='black')\n    ax1.set_title('Histogram')\n    ax2.set_title('Q-Q plot')\n    rvs = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    ax2.set_ylabel(\"Ordered Normal Samples\")\n    stats.probplot(samples, dist=stats.norm, sparams=(mu, sigma), plot=ax2, fit=True)\n    ax2.axis(\"square\")\n    ax2.set_ylim(ax2.get_ylim())\n    ax2.set_xlim(ax2.get_xlim())\n    fig.tight_layout()\n    return fig", "compilation_passed": true, "time": 0.2993941307067871, "tests_passed": true, "error": null}
{"code": "# Set seed for reproducibility\n    np.random.seed(seed)\n\n    # Generate the samples\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n\n    # Create a figure containing a histogram and a Q-Q plot\n    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(8, 4))\n\n    # Plot the histogram\n    ax1.hist(samples, bins=50, density=True)\n    ax1.set_xlabel('x')\n    ax1.set_ylabel('Probability density')\n    ax1.set_title('Histogram')\n\n    # Plot the Q-Q plot\n    stats.probplot(samples, dist='norm', plot=ax2)\n    ax2.set_xlabel('Theoretical quantiles')\n    ax2.set_ylabel('Sample quantiles')\n    ax2.set_title('Q-Q plot')\n\n    return fig", "compilation_passed": true, "time": 0.1074988842010498, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\n    ax1.hist(samples, bins=30, edgecolor='k', color='lightblue',\n             linewidth=0.7)\n    ax1.set_title('Histogram of samples')\n    ax1.set_xlabel('Value')\n    ax1.set_ylabel('Frequency')\n    ax2.set_title('Q-Q plot')\n    ax2.set_xlabel('Theoretical quantiles')\n    ax2.set_ylabel('Ordered quantiles')\n    # Generate Q-Q plot\n    stats.probplot(samples, plot=ax2)\n\n    # Return the figure\n    return fig", "compilation_passed": true, "time": 0.0906219482421875, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n\n    fig = plt.figure()\n    ax1 = fig.add_subplot(1, 2, 1)\n    ax1.hist(samples, bins='auto')\n    ax1.set_title('Histogram')\n    ax1.set_xlabel('x')\n    ax1.set_ylabel('Frequency')\n\n    ax2 = fig.add_subplot(1, 2, 2)\n    qq = stats.probplot(samples, plot=ax2)\n    ax2.set_title('Q-Q plot')\n    ax2.set_ylabel('Theoretical quantiles')\n    ax2.set_xlabel('Sample quantiles')\n\n    return fig", "compilation_passed": true, "time": 0.08247685432434082, "tests_passed": true, "error": null}
