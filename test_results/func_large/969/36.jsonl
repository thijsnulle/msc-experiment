{"code": "# Check if DataFrame is empty\n    if df.empty:\n        raise ValueError(\"DataFrame is empty\")\n\n    # Check if DataFrame contains NaN values\n    if df.isna().any().any():\n        raise ValueError(\"DataFrame contains NaN values\")\n\n    # Check if DataFrame contains only numeric data types\n    if not df.dtypes.apply(np.issubdtype, args=(np.number,)).all():\n        raise TypeError(\"DataFrame must contain only numeric data types\")\n\n    # Compute cumulative sum for each column\n    cumsum_df = df.cumsum()\n\n    # Normalize the cumulative sum using MinMaxScaler\n    scaler = MinMaxScaler()\n    normalized_cumsum_df = scaler.fit_transform(cumsum_df)\n\n    # Convert the normalized cumulative sum to a DataFrame with the original column names\n    normalized_cumsum_df = pd.DataFrame(normalized_cumsum_df, columns=df.columns)\n\n    return normalized_cumsum_df", "compilation_passed": true, "time": 0.006244659423828125, "tests_passed": true, "error": null}
{"code": "if df.empty:\n        raise ValueError(\"Input DataFrame is empty.\")\n\n    if df.isna().any().any():\n        raise ValueError(\"Input DataFrame contains NaN values.\")\n\n    df_numeric = df.select_dtypes(include='number')\n    scaler = MinMaxScaler()\n    scaled_df = scaler.fit_transform(df_numeric)\n    df_normalized = pd.DataFrame(scaled_df, columns=df_numeric.columns)\n\n    output_df = pd.DataFrame({\n        df_numeric.columns[0]: df_normalized[df_numeric.columns[0]]\n    })\n\n    for i in range(1, len(df_numeric.columns)):\n        output_df[df_numeric.columns[i]] = df_normalized[df_numeric.columns[i]].cumsum()\n\n    return output_df", "compilation_passed": true, "time": 0.004181861877441406, "tests_passed": true, "error": null}
{"code": "# Check if the DataFrame is empty or contains NaN values\n    if df.empty or df.isna().values.any():\n        raise ValueError(\"The input DataFrame is empty or contains NaN values.\")\n\n    # Check if the DataFrame contains non-numeric data types\n    if not df.columns.isin(df.select_dtypes(include='number').columns).all():\n        raise TypeError(\"The DataFrame contains non-numeric data types.\")\n\n    # Convert DataFrame to NumPy array\n    data = df.to_numpy()\n\n    # Compute the cumulative sum of each column\n    cum_sum = np.cumsum(data, axis=0)\n\n    # Normalize each column by its range\n    scaler = MinMaxScaler()\n    norm_cum_sum = scaler.fit_transform(cum_sum)\n\n    # Convert NumPy array back to DataFrame\n    normalized_df = pd.DataFrame(norm_cum_sum, index=df.index, columns=df.columns)\n\n    return normalized_df", "compilation_passed": true, "time": 0.0032351016998291016, "tests_passed": true, "error": null}
{"code": "# Create a copy of the input DataFrame to avoid modifying the original data\n    df = df.copy()\n\n    # Check if the DataFrame is empty or contains NaN values\n    if df.empty or df.isnull().values.any():\n        raise ValueError(\"Input DataFrame cannot be empty or contain NaN values\")\n\n    # Check if the DataFrame contains non-numeric data types\n    if not df.select_dtypes(include=[np.number]).empty:\n        raise TypeError(\"DataFrame contains non-numeric data types\")\n\n    # For each numeric column in the DataFrame, calculate the cumulative sum,\n    # normalize it to the range 0 to 1 using MinMaxScaler,\n    # and replace the original column with the normalized cumulative sum\n    for column in df.select_dtypes(include=[np.number]).columns:\n        min_max_scaler = MinMaxScaler()\n        df[column] = min_max_scaler.fit_transform(df[column].values.reshape(-1, 1))\n\n    # Return the modified DataFrame\n    ", "compilation_passed": true, "time": 0.0012450218200683594, "tests_passed": false, "error": "TypeError"}
{"code": "# Check if the DataFrame is empty or contains NaN values\n    if df.empty or df.isnull().values.any():\n        raise ValueError(\"The DataFrame cannot be empty or contain NaN values\")\n\n    # Check if the DataFrame contains only numeric values\n    if not df.columns.isin(df.select_dtypes(include=[np.number]).columns).all():\n        raise TypeError(\"The DataFrame can only contain numeric data types\")\n\n    # Calculate the cumulative sum for each column\n    cumsum_df = df.cumsum()\n\n    # Perform MinMax normalization for each column\n    scaled_cumsum = MinMaxScaler().fit_transform(cumsum_df)\n\n    # Create a DataFrame with normalized cumulative sums and original column names\n    normalized_df = pd.DataFrame(scaled_cumsum, columns=cumsum_df.columns)\n\n    return normalized_df", "compilation_passed": true, "time": 0.004973888397216797, "tests_passed": true, "error": null}
{"code": "try:\n        # Extract numeric columns\n        numeric_cols = df.select_dtypes(include='number').columns\n        # Normalize the cumulative sum of each column\n        normalized_cum_sum = (df[numeric_cols].cumsum().apply(lambda x: (x - x.min()) / (x.max() - x.min())))\n        # Set the column names of the normalized_cum_sum DataFrame to the original column names\n        normalized_cum_sum.columns = df[numeric_cols].columns\n        return normalized_cum_sum\n\n    except TypeError:\n        print(\"The DataFrame contains non-numeric data types. Please ensure the DataFrame \"\n              \"only contains numeric values.\")\n    except ValueError:\n        print(\"The DataFrame is empty or contains NaN values. Please provide a non-empty \"\n              \"DataFrame without NaN values.\")", "compilation_passed": true, "time": 0.0023517608642578125, "tests_passed": true, "error": null}
{"code": "# Extract numeric columns from the input DataFrame\n    numeric_df = df.select_dtypes(include=np.number)\n\n    # Check for missing or NaN values in the DataFrame\n    if numeric_df.isna().any().any():\n        raise ValueError(\"DataFrame contains NaN values\")\n\n    # Compute cumulative sum for each numeric column\n    cumulative_sum = numeric_df.cumsum()\n\n    # Normalize the cumulative sum using MinMaxScaler\n    scaler = MinMaxScaler()\n    normalized_cumulative_sum = pd.DataFrame(scaler.fit_transform(cumulative_sum), index=cumulative_sum.index, columns=cumulative_sum.columns)\n\n    # Ensure each column in the output DataFrame retains its original name\n    normalized_cumulative_sum.columns = df.columns\n\n    return normalized_cumulative_sum", "compilation_passed": true, "time": 0.005485057830810547, "tests_passed": false, "error": "ValueError"}
{"code": "# Convert any int columns to float to avoid type conversion issues when scaling\n    df = df.astype('float64')\n    # Check that the DataFrame is not empty and contains no NaN values\n    if df.empty or df.isnull().values.any():\n        raise ValueError(\"DataFrame is empty or contains NaN values\")\n\n    # Find the numeric columns in the DataFrame\n    numeric_cols = df.select_dtypes(include=[np.number]).columns\n\n    # Calculate the cumulative sum for each numeric column\n    df[numeric_cols] = df[numeric_cols].cumsum()\n\n    # Normalize the cumulative sum columns to the range [0, 1] using MinMaxScaler\n    scaler = MinMaxScaler()\n    df[numeric_cols] = scaler.fit_transform(df[numeric_cols].values)\n\n    return df", "compilation_passed": true, "time": 0.00397491455078125, "tests_passed": false, "error": "ValueError"}
{"code": "# Check if the input DataFrame is empty\n    if df.empty:\n        raise ValueError(\"The input DataFrame is empty.\")\n\n    # Check if there are NaN values in the DataFrame\n    if df.isnull().values.any():\n        raise ValueError(\"The input DataFrame contains NaN values.\")\n\n    # Check if the DataFrame only contains numeric data types\n    if not df.select_dtypes(exclude=np.number).empty:\n        raise TypeError(\"The input DataFrame contains non-numeric data types.\")\n\n    # Calculate the cumulative sum of each column in the DataFrame\n    cum_sum = df.cumsum()\n\n    # Normalize the cumulative sum of each column using MinMaxScaler\n    scaler = MinMaxScaler()\n    cum_sum_normalized = scaler.fit_transform(cum_sum)\n\n    # Convert the normalized cumulative sum back to a DataFrame with original column names\n    df_normalized = pd.DataFrame(cum_sum_normalized, columns=df.columns)\n\n    # Set the index of the normalized DataFrame", "compilation_passed": true, "time": 0.0019037723541259766, "tests_passed": true, "error": null}
{"code": "df1 = df.copy()\n    if df1.empty:\n        raise ValueError(\"DataFrame is empty\")\n    if df1.isna().any().any():\n        raise ValueError(\"DataFrame contains NaN values\")\n\n    df_numeric = df1.select_dtypes(include=np.number)\n    cols = df_numeric.columns\n    cumsum_df = df_numeric.apply(lambda x: x.cumsum())\n\n    scaler = MinMaxScaler()\n    normalized_cumsum_df = pd.DataFrame(scaler.fit_transform(cumsum_df), columns=cumsum_df.columns)\n\n    df_with_normalized_cumsum = pd.concat([df.drop(cols, axis=1), normalized_cumsum_df], axis=1)\n\n    return df_with_normalized_cumsum", "compilation_passed": true, "time": 0.006542205810546875, "tests_passed": true, "error": null}
{"code": "numeric_df = df.select_dtypes(include='number')\n\n    if numeric_df.empty:\n        raise ValueError(\"DataFrame is empty or contains no numeric data types.\")\n\n    if numeric_df.isna().values.any():\n        raise ValueError(\"DataFrame contains NaN values.\")\n\n    scaler = MinMaxScaler()\n    normalized_values = scaler.fit_transform(numeric_df)\n\n    normalized_cumulative_sum = np.cumsum(normalized_values, axis=0)\n\n    normalized_df = pd.DataFrame(normalized_cumulative_sum, columns=numeric_df.columns)\n\n    return normalized_df", "compilation_passed": true, "time": 0.003358125686645508, "tests_passed": true, "error": null}
{"code": "numeric_columns = df.select_dtypes(include=np.number).columns\n    normalized_data = MinMaxScaler().fit_transform(numeric_columns.map(df.sum()).to_frame())\n    result = pd.DataFrame(normalized_data, index=numeric_columns, columns=numeric_columns)\n    return result", "compilation_passed": true, "time": 0.0022242069244384766, "tests_passed": false, "error": "ValueError"}
{"code": "if df.empty:\n        raise ValueError(\"The input DataFrame is empty.\")\n\n    if df.isnull().any().any():\n        raise ValueError(\"The input DataFrame contains NaN values.\")\n\n    # Extract numeric columns from the input DataFrame\n    numeric_df = df.select_dtypes(include='number')\n\n    # Calculate the cumulative sum for each numeric column\n    cum_sum_df = numeric_df.cumsum()\n\n    # Normalize the cumulative sum values using MinMaxScaler\n    scaler = MinMaxScaler()\n    scaled_df = pd.DataFrame(scaler.fit_transform(cum_sum_df), columns=cum_sum_df.columns, index=cum_sum_df.index)\n\n    return scaled_df", "compilation_passed": true, "time": 0.0052127838134765625, "tests_passed": true, "error": null}
{"code": "if df.empty:\n        raise ValueError(\"Input DataFrame is empty\")\n    if df.isnull().any().any():\n        raise ValueError(\"Input DataFrame contains NaN values\")\n\n    # Get the numeric columns in the DataFrame\n    numeric_columns = df.select_dtypes(include=np.number).columns\n    if not numeric_columns.any():\n        raise ValueError(\"Input DataFrame does not contain numeric columns\")\n\n    # Normalize the data using MinMaxScaler\n    scaler = MinMaxScaler()\n    df_numeric = df[numeric_columns]\n    normalized_data = scaler.fit_transform(df_numeric)\n\n    # Create a new DataFrame with normalized columns, retaining original column names\n    result = pd.DataFrame(normalized_data, columns=numeric_columns)\n    result = result.cumsum()\n    return result", "compilation_passed": true, "time": 0.003735065460205078, "tests_passed": true, "error": null}
{"code": "# Check for non-numeric data types\n    if not df.select_dtypes(include=np.number).empty:\n        # Normalize data and calculate cumulative sum\n        scaler = MinMaxScaler()\n        df_normalized = scaler.fit_transform(df.select_dtypes(include=np.number))\n        df_normalized = pd.DataFrame(df_normalized, index=df.index)\n        cumulative_sum = np.cumsum(df_normalized, axis=0)\n\n        # Set the original column names\n        cumulative_sum.columns = df.select_dtypes(include=np.number).columns\n\n        # Return the DataFrame with normalized cumulative sum\n        return cumulative_sum\n\n    else:\n        # Return the original DataFrame if there are no numeric columns\n        return df", "compilation_passed": true, "time": 0.0020952224731445312, "tests_passed": true, "error": null}
{"code": "# Extract the numeric columns from the DataFrame\n    numeric_df = df.select_dtypes(include=[np.number])\n\n    # Check if there are any numeric columns in the DataFrame\n    if numeric_df.empty:\n        raise ValueError(\"The DataFrame does not contain any numeric columns.\")\n\n    # Check if there are any NaN values in the DataFrame\n    if numeric_df.isna().any().any():\n        raise ValueError(\"The DataFrame contains NaN values. Please handle them before proceeding.\")\n\n    # Calculate the cumulative sum for each numeric column\n    cumulative_sum = numeric_df.cumsum()\n\n    # Perform MinMax normalization\n    scaler = MinMaxScaler()\n    normalized_cumulative_sum = scaler.fit_transform(cumulative_sum)\n\n    # Convert the normalized cumulative sum back to a DataFrame with original column names\n    result_df = pd.DataFrame(normalized_cumulative_sum, columns=numeric_df.columns)\n\n    return result_df", "compilation_passed": true, "time": 0.0051310062408447266, "tests_passed": true, "error": null}
{"code": "if df.empty or df.isna().any().any():\n        raise ValueError(\"Input DataFrame must not be empty or contain NaN values.\")\n\n    # Filter numeric columns\n    numeric_cols = df.select_dtypes(include=np.number).columns\n\n    # Compute cumulative sum and apply MinMax scaling\n    cumsum_df = df[numeric_cols].cumsum()\n    scaler = MinMaxScaler()\n    scaled_cumsum_df = scaler.fit_transform(cumsum_df)\n\n    # Create a new DataFrame with scaled cumulative sum values and original column names\n    scaled_df = pd.DataFrame(scaled_cumsum_df, columns=cumsum_df.columns)\n\n    return scaled_df", "compilation_passed": true, "time": 0.005541086196899414, "tests_passed": true, "error": null}
{"code": "# Check if the DataFrame is empty\n    if df.empty:\n        raise ValueError(\"The input DataFrame is empty.\")\n\n    # Check if the DataFrame contains NaN values\n    if df.isnull().values.any():\n        raise ValueError(\"The input DataFrame contains NaN values.\")\n\n    # Check if the DataFrame contains only numeric data types\n    if not all(df.dtypes == np.float64):\n        raise TypeError(\"The DataFrame contains non-numeric data types.\")\n\n    # Compute the cumulative sum\n    cum_sum_df = df.cumsum()\n\n    # Normalize the cumulative sum using MinMaxScaler\n    scaler = MinMaxScaler()\n    normalized_cum_sum_df = scaler.fit_transform(cum_sum_df)\n\n    # Convert the normalized cumulative sum back to DataFrame with original column names\n    output_df = pd.DataFrame(normalized_cum_sum_df, columns=df.columns)\n\n    return output_df", "compilation_passed": true, "time": 0.001249074935913086, "tests_passed": false, "error": "TypeError"}
{"code": "# Get numeric columns in the DataFrame\n    numeric_cols = df.select_dtypes(include=[np.number]).columns\n\n    # Check if the DataFrame contains non-numeric values\n    if not np.issubdtype(df[numeric_cols].values.dtype, np.number):\n        raise TypeError(\"DataFrame must contain only numeric values\")\n\n    # Check if the DataFrame is empty\n    if df.empty:\n        raise ValueError(\"DataFrame is empty\")\n\n    # Check if the DataFrame contains NaN values\n    if df.isna().values.any():\n        raise ValueError(\"DataFrame contains NaN values\")\n\n    # Calculate cumulative sum for numeric columns\n    cum_sum = df[numeric_cols].cumsum()\n\n    # Normalize the cumulative sum using MinMaxScaler\n    scaler = MinMaxScaler()\n    normalized_cum_sum = scaler.fit_transform(cum_sum)\n\n    # Create a new DataFrame with normalized cumulative sum\n    result_df = pd.DataFrame(normalized_cum_sum, columns=numeric", "compilation_passed": false, "time": 0.00020003318786621094, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Create a new DataFrame with the same shape and column names as the input DataFrame\n    new_df = df.copy()\n\n    # Iterate over the columns of the input DataFrame\n    for col in df:\n        # Check if the column contains numeric data\n        if df[col].dtype == 'float64' or df[col].dtype == 'int64':\n            # Check if the column contains NaN values\n            if df[col].isnull().values.any():\n                raise ValueError(f\"Column '{col}' contains NaN values\")\n            # Compute the cumulative sum of the column values\n            cumsum = df[col].cumsum()\n            # Scale the cumulative sum to the range [0, 1] using MinMaxScaler\n            scaler = MinMaxScaler()\n            scaled_cumsum = scaler.fit_transform(cumsum.values.reshape(-1, 1))\n            # Store the normalized cumulative sum in the corresponding column of the new DataFrame\n            new_df[col] = pd.Series(np.squeeze(scaled", "compilation_passed": false, "time": 0.00018405914306640625, "tests_passed": false, "error": "SyntaxError"}
{"code": "if df.empty or df.isnull().values.any():\n        raise ValueError(\"The DataFrame cannot be empty or contain NaN values.\")\n\n    # Convert non-numeric columns to numeric, if any\n    if df.dtypes.any(lambda dtype: dtype not in ('int64', 'float64')):\n        df = df.apply(pd.to_numeric, errors='raise')\n\n    # Compute cumulative sum for each numeric column\n    df_cumsum = df.select_dtypes(include='number').cumsum()\n\n    # Normalize the cumulative sum using MinMaxScaler\n    scaler = MinMaxScaler()\n    df_scaled = pd.DataFrame(scaler.fit_transform(df_cumsum), index=df_cumsum.index, columns=df_cumsum.columns)\n\n    # Add the normalized values to the original DataFrame with the same column names\n    df_result = df.copy()\n    df_result = df_result.drop(columns=df_scaled.columns).join(df_scaled)\n\n    return", "compilation_passed": true, "time": 0.001216888427734375, "tests_passed": false, "error": "TypeError"}
{"code": "# Create a MinMaxScaler object\n    scaler = MinMaxScaler()\n\n    # Convert DataFrame to NumPy array\n    array = df.values\n\n    # Normalize cumulative sum of each column\n    result = np.cumsum(array, axis=0)\n\n    # Apply scaling using the MinMaxScaler to the cumulative sum array\n    normalized_result = scaler.fit_transform(result)\n\n    # Convert the normalized cumulative sum array back to a DataFrame\n    output_df = pd.DataFrame(normalized_result, index=df.index)\n\n    # Set the column names to the original column names\n    output_df.columns = df.columns\n\n    return output_df", "compilation_passed": true, "time": 0.0021288394927978516, "tests_passed": true, "error": null}
{"code": "df_copy = df.copy()\n    if not isinstance(df_copy, pd.DataFrame):\n        raise TypeError(\"Input should be a DataFrame\")\n    if df_copy.empty:\n        raise ValueError(\"Cannot operate on empty DataFrame\")\n    if df_copy.isnull().any().any():\n        raise ValueError(\"DataFrame contains NaN values\")\n    scaler = MinMaxScaler()\n    for col in df_copy.columns:\n        if pd.api.types.is_numeric_dtype(df_copy[col]):\n            df_copy[col] = pd.Series(scaler.fit_transform(df_copy[[col]].values.reshape(-1,1)).reshape(1,-1)[0]).cumsum()\n    return df_copy", "compilation_passed": true, "time": 0.003606081008911133, "tests_passed": true, "error": null}
{"code": "# Check if the DataFrame is not empty and contains no NaN values\n    if df.empty or df.isnull().any().any():\n        raise ValueError(\"The DataFrame should not be empty and contain no NaN values.\")\n\n    # Ensure the DataFrame contains only numeric data types\n    if not df.dtypes.apply(np.issubdtype, np.number).all():\n        raise TypeError(\"The DataFrame should contain only numeric data types.\")\n\n    # Create a copy of the DataFrame\n    df = df.copy()\n\n    # Normalize the DataFrame values using MinMaxScaler\n    scaler = MinMaxScaler()\n    df_normalized = pd.DataFrame(scaler.fit_transform(df), columns=df.columns)\n\n    # Compute the cumulative sum\n    df_normalized = df_normalized.cumsum()\n\n    # Normalize the cumulative sum using MinMaxScaler\n    df_normalized = pd.DataFrame(scaler.fit_transform(df_normalized), columns=df.columns)\n\n    # Return the normalized DataFrame with", "compilation_passed": true, "time": 0.00148773193359375, "tests_passed": false, "error": "TypeError"}
{"code": "# Check the input DataFrame for NaN values\n    if df.isnull().values.any():\n        raise ValueError(\"Input DataFrame contains NaN values.\")\n\n    # Check that the DataFrame is not empty\n    if df.empty:\n        raise ValueError(\"Input DataFrame is empty.\")\n\n    # Check that the DataFrame only contains numeric data types\n    if not df.columns.isin([df.dtypes == np.number]).all():\n        raise TypeError(\"Input DataFrame contains non-numeric data types.\")\n\n    # Compute the cumulative sum for each column\n    cum_sum = df.cumsum()\n\n    # Normalize the cumulative sum using the MinMaxScaler from scikit-learn\n    scaled_cum_sum = MinMaxScaler().fit_transform(cum_sum)\n\n    # Convert the numpy array to a DataFrame with the original column names and return it\n    return pd.DataFrame(scaled_cum_sum, columns=cum_sum.columns)", "compilation_passed": true, "time": 0.0012459754943847656, "tests_passed": false, "error": "TypeError"}
{"code": "# Create a deep copy of the input DataFrame to avoid modifying it in-place\n    df = df.copy()\n\n    # Check if the DataFrame is empty\n    if df.empty:\n        raise ValueError(\"DataFrame is empty.\")\n\n    # Check if the DataFrame contains NaN values\n    if df.isnull().any().any():\n        raise ValueError(\"DataFrame contains NaN values.\")\n\n    # Check if all columns have numeric data types\n    if not df.dtypes.apply(lambda dtype: np.issubdtype(dtype, np.number)).all():\n        raise TypeError(\"DataFrame contains non-numeric data types.\")\n\n    # Iterate over each numeric column and normalize the cumulative sum\n    for column in df.select_dtypes(include='number').columns:\n        # Compute the cumulative sum for the column\n        cumulative_sum = df[column].cumsum()\n\n        # Normalize the cumulative sum using MinMaxScaler\n        scaler = MinMaxScaler()\n        normalized = scaler.fit_transform(cumulative_sum", "compilation_passed": false, "time": 0.0001971721649169922, "tests_passed": false, "error": "SyntaxError"}
{"code": "scaler = MinMaxScaler()\n    cum_sum = df.select_dtypes(include='number').cumsum()\n    scaled_cum_sum = scaler.fit_transform(cum_sum.astype(float))\n    result_df = pd.DataFrame(scaled_cum_sum, columns=cum_sum.columns)\n    return result_df", "compilation_passed": true, "time": 0.003978252410888672, "tests_passed": true, "error": null}
{"code": "# Check if the DataFrame is not empty and contains at least one numeric column\n    if df.empty:\n        raise ValueError(\"Input DataFrame is empty\")\n    if df.select_dtypes(include=[np.number]).empty:\n        raise ValueError(\"Input DataFrame has no numeric columns\")\n    if df.isnull().any().any():\n        raise ValueError(\"Input DataFrame contains NaN values\")\n\n    # Create a new DataFrame with the same column names as the input DataFrame\n    output_df = pd.DataFrame(columns=df.columns)\n\n    # Compute the cumulative sum for each numeric column\n    for col in df.columns:\n        if pd.api.types.is_numeric_dtype(df[col]):\n            # Calculate the cumulative sum of the column values\n            col_cumsum = df[col].cumsum()\n\n            # Normalize the cumulative sum using MinMaxScaler\n            scaler = MinMaxScaler()\n            col_normalized = scaler.fit_transform(col_cumsum.values.reshape(-1, 1", "compilation_passed": false, "time": 0.00020575523376464844, "tests_passed": false, "error": "SyntaxError"}
{"code": "scaler = MinMaxScaler()\n    df_numeric = df.select_dtypes(include='number')\n    if df_numeric.empty:\n        raise ValueError(\"DataFrame is empty. Please check the input.\")\n    if df_numeric.isnull().any().any():\n        raise ValueError(\"DataFrame contains NaN values. Please check the input.\")\n    cumsum_df = df_numeric.cumsum().fillna(0)\n    scaled_cumsum_df = pd.DataFrame(scaler.fit_transform(cumsum_df), index=cumsum_df.index, columns=cumsum_df.columns)\n    return scaled_cumsum_df", "compilation_passed": true, "time": 0.005355119705200195, "tests_passed": true, "error": null}
{"code": "numeric_cols = df.select_dtypes(include=np.number).columns\n    min_max_scaler = MinMaxScaler()\n\n    for col in numeric_cols:\n        # Compute the cumulative sum of the column\n        col_cumsum = df[col].fillna(0).cumsum()\n\n        # Normalize the cumulative sum\n        normalized_cumsum = min_max_scaler.fit_transform(col_cumsum.values.reshape(-1, 1)).flatten()\n        df[col] = normalized_cumsum\n\n    return df", "compilation_passed": true, "time": 0.0018079280853271484, "tests_passed": true, "error": null}
