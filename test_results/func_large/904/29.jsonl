{"code": "df = pd.DataFrame(d, columns=keys)\n    ax = df.plot(subplots=True)\n    return ax", "compilation_passed": true, "time": 0.03759407997131348, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(d)\n    ax = df[keys].plot(kind='scatter')\n    return ax", "compilation_passed": true, "time": 0.0017840862274169922, "tests_passed": false, "error": "ValueError"}
{"code": "df = pd.DataFrame(d)\n    df.plot(x=keys[0], y=keys[1:])\n    ax = plt.gca()\n    return ax", "compilation_passed": true, "time": 0.019726991653442383, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(d)\n    fig, ax = plt.subplots()\n\n    for key in keys:\n        ax.plot(df.index, df[key], label=key)\n\n    plt.legend()\n\n    return ax", "compilation_passed": true, "time": 0.04012584686279297, "tests_passed": false, "error": "KeyError"}
{"code": "df = pd.DataFrame(d)\n    return df[keys].plot.line()", "compilation_passed": true, "time": 0.038728952407836914, "tests_passed": false, "error": "KeyError"}
{"code": "df = pd.DataFrame(d)\n    if df.isnull().values.any():\n        raise ValueError(\"Input data contains NaN or None values.\")\n    if not all(isinstance(item, dict) for item in d):\n        raise ValueError(\"Input data must be a list of dictionaries.\")\n    for key in keys:\n        if key not in df.columns:\n            raise ValueError(f\"Input data does not contain the key '{key}'.\")\n        if not (df[key].dtype in [int, float]):\n            raise ValueError(f\"Column '{key}' should contain numerical values.\")\n    for item in d:\n        if not all(key in item for key in keys):\n            raise ValueError(\"Input data must be a list of dictionaries with the specified keys.\")\n        for key in item:\n            if not (isinstance(item[key], int) or isinstance(item[key], float)):\n                raise ValueError(f\"Input data should contain numerical values only. Found {item[key]}({type", "compilation_passed": false, "time": 0.00012803077697753906, "tests_passed": false, "error": "SyntaxError"}
{"code": "df = pd.DataFrame(d)\n    ax = df.plot(x=keys[0], y=keys[1:], kind='scatter', legend=True, figsize=(15, 5))\n    return ax", "compilation_passed": true, "time": 0.01503300666809082, "tests_passed": false, "error": "ValueError"}
{"code": "# Create a DataFrame from the list of dictionaries\n    df = pd.DataFrame(d)\n    # Set x-axis values to the 'x' column\n    x_values = df[keys[0]]\n    # Plot values of 'y' column against 'x' column\n    ax = df[keys[1]].plot(x=x_values)\n    # If there are additional keys specified, plot them against 'x'\n    if len(keys) > 2:\n        df[keys[2]].plot(x=x_values)\n    return ax", "compilation_passed": true, "time": 0.007606983184814453, "tests_passed": false, "error": "AttributeError"}
{"code": "# Create a dictionary of data\n    data = {'x': [dict_['x'] for dict_ in d],\n            'y': [dict_['y'] for dict_ in d],\n            'z': [dict_['z'] for dict_ in d]}\n\n    # Create a data frame\n    df = pd.DataFrame(data=data, index=[0, 1, 2])\n\n    # Plot the values\n    ax = df.plot(kind='line', title='Plot of specified values', legend=False, grid=True, figsize=(5, 3))\n\n    # Return the Axes object\n    return ax", "compilation_passed": true, "time": 0.02052927017211914, "tests_passed": false, "error": "AttributeError"}
{"code": "df = pd.DataFrame(d)\n    ax = df[keys].plot(kind='line')\n    return ax", "compilation_passed": true, "time": 0.038765907287597656, "tests_passed": false, "error": "KeyError"}
{"code": "# Create a DataFrame from the input list of dictionaries\n    df = pd.DataFrame(d)\n    # Select the specified keys from the DataFrame\n    df = df[keys]\n    # Plot the data from the DataFrame on the x-axis against the y-axis\n    ax = df.plot.line(x=keys[0], y=keys[1:])\n    # Return the plot as a Matplotlib Axes object\n    return ax", "compilation_passed": true, "time": 0.02134418487548828, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(d)\n    df = df[keys]\n    df.plot(x=keys[0], y=keys[1:])\n    ax = plt.gca()\n    plt.show()\n    return ax", "compilation_passed": true, "time": 0.019637107849121094, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(d)\n    df = df.loc[:, keys]\n    df = df.sort_values(keys[0])\n    ax = df.plot.line(x=keys[0])\n    plt.show()\n    return ax", "compilation_passed": true, "time": 0.019253969192504883, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(d)  # Convert the list of dictionaries to a pandas DataFrame\n    fig, ax = plt.subplots()  # Create a new figure and axis\n\n    # Loop over the keys and add a line plot of each key's values to the axis\n    for key in keys:\n        ax.plot(df.index, df[key], label=key)\n\n    ax.legend()  # Add a legend to the plot\n\n    return ax", "compilation_passed": true, "time": 0.04236578941345215, "tests_passed": false, "error": "KeyError"}
{"code": "df = pd.DataFrame(d)\n    fig, ax = plt.subplots()\n    for key in keys:\n        ax.plot(df[key])\n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n    ax.legend(keys)\n    return ax", "compilation_passed": true, "time": 0.04115414619445801, "tests_passed": false, "error": "KeyError"}
{"code": "# Create a dictionary with keys and empty lists as values\n    dct = {key: [] for key in keys}\n    # Populate the dictionary with values from the input list of dictionaries\n    for i in d:\n        for key in keys:\n            dct[key].append(i[key])\n    # Create a Pandas DataFrame from the dictionary\n    df = pd.DataFrame(dct)\n    # Create a scatter plot of the values based on specified keys\n    ax = df.plot.scatter(x=keys[0], y=keys[1], s=200, c=keys[2], colormap='viridis')\n    # Return the Matplotlib Axes object\n    return ax", "compilation_passed": true, "time": 0.03215503692626953, "tests_passed": false, "error": "AttributeError"}
{"code": "# Convert the list of dictionaries into a Pandas DataFrame\n    df = pd.DataFrame(d)\n\n    # Extract the values of specified keys from the DataFrame\n    x = df[keys[0]]\n    y = df[keys[1]]\n\n    # Create a plot with the extracted values\n    ax = plt.plot(x, y)\n\n    # Return the Matplotlib Axes object\n    return ax", "compilation_passed": true, "time": 0.0014531612396240234, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(d)\n\n    return df.plot(x=keys[0], y=keys[1:])", "compilation_passed": true, "time": 0.019258975982666016, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(d)\n    ax = df[keys].plot(kind='barh')\n    return ax", "compilation_passed": true, "time": 0.022886991500854492, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(d)\n    df.plot.line(x=keys[0], y=keys[1:])\n    plt.show()\n    return plt.gca()", "compilation_passed": true, "time": 0.019276142120361328, "tests_passed": true, "error": null}
{"code": "# Create a Pandas DataFrame from the list of dictionaries\n    df = pd.DataFrame(d)\n\n    # Filter out columns that are not in the keys list\n    df = df[keys]\n\n    # Create a Matplotlib Axes object from the DataFrame and return it\n    ax = df.plot.bar()\n    return ax", "compilation_passed": true, "time": 0.024842023849487305, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(d)\n    ax = df[keys].plot(kind='bar')\n    plt.show()\n    return ax", "compilation_passed": true, "time": 0.01991581916809082, "tests_passed": true, "error": null}
{"code": "data = pd.DataFrame(d)\n    ax = data[keys].plot()\n    return ax", "compilation_passed": true, "time": 0.0389101505279541, "tests_passed": false, "error": "KeyError"}
{"code": "df = pd.DataFrame(d)\n    ax = df.plot.line(x=keys[0], y=keys[1:])\n    return ax", "compilation_passed": true, "time": 0.021915912628173828, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(d)\n    df[keys].plot(kind=\"line\")\n    plt.show()", "compilation_passed": true, "time": 0.019786834716796875, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(d)\n    return df[keys].plot()", "compilation_passed": true, "time": 0.03894305229187012, "tests_passed": false, "error": "KeyError"}
{"code": "data = pd.DataFrame(d)  # Convert the list of dictionaries to a DataFrame\n    ax = plt.gca()  # Get the current Matplotlib Axes object\n    data[keys].plot(ax=ax)  # Plot the specified keys from the DataFrame on the Axes object\n    return ax", "compilation_passed": true, "time": 0.004926919937133789, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(d)\n    df = df[keys]\n    ax = df.plot()\n    return ax", "compilation_passed": true, "time": 0.03900909423828125, "tests_passed": false, "error": "KeyError"}
{"code": "df = pd.DataFrame(d)\n    df.plot(keys[0], keys[1])\n    plt.show()\n    ax = plt.gca()\n\n    return ax", "compilation_passed": true, "time": 0.019390106201171875, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(d)\n    df.plot.line(x=keys[0], y=keys[1:], marker='o')\n    ax = plt.gca()\n\n    return ax", "compilation_passed": true, "time": 0.01981377601623535, "tests_passed": true, "error": null}
