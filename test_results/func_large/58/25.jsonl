{"code": "# YOUR CODE HERE\n    # raise NotImplementedError\n    fig, ax = plt.subplots()\n    x = np.linspace(stats.norm.ppf(0.01, mu, sigma), stats.norm.ppf(0.99, mu, sigma), 100)\n    ax.plot(x, stats.norm.pdf(x, mu, sigma), 'r-', lw=5, alpha=0.6, label='norm pdf')\n    samples = np.random.normal(mu, sigma, num_samples)\n    ax.hist(samples, bins=20, density=True, alpha=0.6, label='histogram')\n    ax.set_title('Normal Distribution')\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.0384669303894043, "tests_passed": true, "error": null}
{"code": "plt.title('Normal Distribution')\n    x = np.linspace(mu - 3*sigma, mu + 3*sigma, 1000)\n    plt.plot(x, stats.norm.pdf(x, mu, sigma))\n\n    samples = np.random.normal(mu, sigma, num_samples)\n    plt.hist(samples, bins=100, density=True)\n    plt.show()\n\n    return plt", "compilation_passed": true, "time": 0.08491802215576172, "tests_passed": true, "error": null}
{"code": "x = np.linspace(-6, 6, 100)\n    plt.plot(x, stats.norm.pdf(x, mu, sigma), label='Normal Distribution')\n    samples = np.random.normal(mu, sigma, num_samples)\n    plt.hist(samples, bins=30, density=True, alpha=0.5, label='Randomly Generated Samples')\n    plt.title('Normal Distribution')\n    plt.legend()\n    plt.show()", "compilation_passed": true, "time": 0.007826089859008789, "tests_passed": false, "error": "AttributeError"}
{"code": "raise NotImplementedError(\"You need to implement this function.\")", "compilation_passed": true, "time": 0.0008618831634521484, "tests_passed": false, "error": "NotImplementedError"}
{"code": "# Your code here\n    return None", "compilation_passed": true, "time": 0.00080108642578125, "tests_passed": false, "error": "AttributeError"}
{"code": "fig, ax = plt.subplots()\n\n    norm_dist = stats.norm(mu, sigma)\n    x = np.linspace(-4 * sigma + mu, 4 * sigma + mu, 1000)\n    ax.plot(x, norm_dist.pdf(x), linewidth=2, color=\"red\")\n\n    ax.hist(\n        np.random.normal(mu, sigma, num_samples),\n        bins=35,\n        density=True,\n        histtype=\"step\",\n        linewidth=2,\n        color=\"blue\",\n    )\n\n    ax.set_title(f\"Normal Distribution: {mu} \u00b1 {sigma}\")\n\n    return fig", "compilation_passed": true, "time": 0.005778074264526367, "tests_passed": true, "error": null}
{"code": "plt.figure()\n    # The random variable to sample\n    rv = stats.norm(mu, sigma)\n    # Plot the normal distribution\n    x = np.linspace(rv.ppf(0.01), rv.ppf(0.99), 100)\n    plt.plot(x, rv.pdf(x))\n    # Generate samples from the distribution\n    samples = rv.rvs(num_samples)\n    # Plot the histogram of the samples\n    plt.hist(samples, normed=True, histtype='stepfilled', alpha=0.2)\n    # Set the plot title\n    plt.title('Normal Distribution')\n    return plt.gcf()", "compilation_passed": true, "time": 0.005918264389038086, "tests_passed": false, "error": "AttributeError"}
{"code": "# Your code here\n    pass", "compilation_passed": true, "time": 0.0008492469787597656, "tests_passed": false, "error": "AttributeError"}
{"code": "# Generate normal distribution\n    dist = stats.norm(loc=mu, scale=sigma)\n    x = np.linspace(dist.ppf(0.001), dist.ppf(0.999), 100)\n\n    # Generate samples\n    samples = dist.rvs(size=num_samples)\n\n    # Plot distribution\n    fig, ax = plt.subplots()\n    ax.plot(x, dist.pdf(x), label=f'$\\mu={mu:.2f}$, $\\sigma={sigma:.2f}$')\n    ax.set_title('Normal Distribution')\n\n    # Plot histogram\n    ax.hist(samples, bins=30, density=True, alpha=0.5, label='samples')\n    ax.legend()\n\n    return fig", "compilation_passed": true, "time": 0.0491480827331543, "tests_passed": true, "error": null}
{"code": "fig = plt.figure()\n    plt.title('Normal Distribution')\n    # ---- WRITE BELOW THIS LINE --- (but not above) ---\n\n    x = np.linspace(mu - 3*sigma, mu + 3*sigma, 100)\n    plt.plot(x, stats.norm.pdf(x, mu, sigma))\n    plt.hist(stats.norm.rvs(mu, sigma, size=num_samples), density=True, alpha=0.6, color='gray')\n\n    # ---- WRITE ABOVE THIS LINE --- (but not below) ---\n    return fig", "compilation_passed": true, "time": 0.027151107788085938, "tests_passed": true, "error": null}
{"code": "# Create a normal distribution with the given mean and standard deviation\n    norm_dist = stats.norm(loc=mu, scale=sigma)\n\n    # Generate samples from the distribution\n    samples = norm_dist.rvs(num_samples)\n\n    # Create a figure and subplot\n    fig, ax = plt.subplots()\n\n    # Plot the normal distribution\n    x = np.linspace(norm_dist.ppf(0.01), norm_dist.ppf(0.99), 100)\n    ax.plot(x, norm_dist.pdf(x), label='Normal Distribution')\n\n    # Plot the histogram of samples\n    ax.hist(samples, bins=30, density=True, alpha=0.5)\n\n    # Set plot title and labels\n    ax.set_title('Normal Distribution')\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Probability Density')\n\n    # Display the plot\n    plt.show()\n\n    # Return the generated figure\n    return fig", "compilation_passed": true, "time": 0.04746699333190918, "tests_passed": true, "error": null}
{"code": "# your code here\n    pass", "compilation_passed": true, "time": 0.0009169578552246094, "tests_passed": false, "error": "AttributeError"}
{"code": "raise NotImplementedError(\"TODO: Implement this function\")\n\n    # Your code here\n    # ...\n\n    # return fig", "compilation_passed": true, "time": 0.0007910728454589844, "tests_passed": false, "error": "NotImplementedError"}
{"code": "# TODO: implement me\n    pass", "compilation_passed": true, "time": 0.0007469654083251953, "tests_passed": false, "error": "AttributeError"}
{"code": "raise NotImplementedError()", "compilation_passed": true, "time": 0.0007700920104980469, "tests_passed": false, "error": "NotImplementedError"}
{"code": "fig, ax = plt.subplots()\n    # Create a normal distribution with mean 0 and standard deviation 1\n    normal_dist = stats.norm(mu, sigma)\n\n    # Plot the normal distribution\n    x = np.linspace(normal_dist.ppf(0.01), normal_dist.ppf(0.99), 1000)\n    ax.plot(x, normal_dist.pdf(x), 'r-', lw=2, alpha=0.6, label='Normal distribution')\n\n    # Generate random samples from the normal distribution\n    samples = normal_dist.rvs(num_samples)\n\n    # Plot the histogram of the random samples\n    ax.hist(samples, bins=50, density=True, alpha=0.6, label='Samples')\n\n    # Set the plot title and labels\n    ax.set_title('Normal Distribution')\n    ax.set_xlabel('x')\n    ax.set_ylabel('Density')\n    ax.legend()\n    ax.set_facecolor('white')\n\n    # Display the plot", "compilation_passed": true, "time": 0.014394044876098633, "tests_passed": false, "error": "AttributeError"}
{"code": "fig = plt.figure(figsize=(10, 5))\n\n    # Normal Distribution\n    x = np.linspace(stats.norm.ppf(0.01, loc=mu, scale=sigma), stats.norm.ppf(0.99, loc=mu, scale=sigma), 100)\n    plt.plot(x, stats.norm.pdf(x, mu, sigma), 'r-', lw=5, alpha=0.6, label='norm pdf')\n\n    # Sample from Normal Distribution\n    s = np.random.normal(mu, sigma, num_samples)\n\n    # Histogram\n    plt.hist(s, bins=30, normed=True, histtype='stepfilled', alpha=0.2)\n\n    plt.title('Normal Distribution')\n    plt.legend()\n\n    plt.show()\n\n    return fig", "compilation_passed": true, "time": 0.006211757659912109, "tests_passed": false, "error": "AttributeError"}
{"code": "fig, ax = plt.subplots()\n\n    # Generate a sample from a normal distribution with given mean and standard deviation\n    X = stats.norm.rvs(mu, sigma, size=num_samples)\n    # Plot the sample in histogram\n    ax.hist(X, bins=num_samples // 20)\n\n    # Plot a normal distribution with given mean and standard deviation\n    x = np.linspace(-3 * sigma + mu, 3 * sigma + mu, 100)\n    ax.plot(x, stats.norm.pdf(x, mu, sigma), lw=5, alpha=0.6, color='red')\n\n    ax.set_title('Normal Distribution')\n    plt.show()\n\n    return fig", "compilation_passed": true, "time": 0.027838945388793945, "tests_passed": false, "error": "ValueError"}
{"code": "fig, ax = plt.subplots()\n\n    x = np.linspace(-3, 3, 100)\n    y = stats.norm.pdf(x, mu, sigma)\n\n    ax.plot(x, y, color='blue', linewidth=2, label='Normal Distribution')\n    ax.hist(np.random.normal(mu, sigma, num_samples), bins=30, density=True, color='red', alpha=0.5, label='Random Samples')\n\n    ax.set_title('Normal Distribution')\n    ax.set_xlabel('x')\n    ax.set_ylabel('Probability Density')\n    ax.legend()\n\n    return fig", "compilation_passed": true, "time": 0.046585798263549805, "tests_passed": true, "error": null}
{"code": "# your implementation here\n    fig, ax = plt.subplots()\n    x = stats.norm.rvs(size=1000,loc=mu,scale=sigma)\n    ax.set_title('Normal Distribution')\n    ax.hist(x, alpha=0.5)\n    ax.plot(x, label='Normal Distribution')\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.028480052947998047, "tests_passed": true, "error": null}
{"code": "# Your code here", "compilation_passed": true, "time": 0.0008976459503173828, "tests_passed": false, "error": "AttributeError"}
{"code": "# Generate a normal distribution with mean 0 and standard deviation 1\n    dist = stats.norm(mu, sigma)\n\n    # Generate some random samples from the distribution\n    samples = dist.rvs(num_samples)\n\n    # Create a new figure\n    fig = plt.figure()\n\n    # Plot the distribution\n    x = np.linspace(dist.ppf(0.01), dist.ppf(0.99), 100)\n    plt.plot(x, dist.pdf(x), 'r-', lw=2, alpha=0.6, label='Normal distribution (\u03bc=%.2f, \u03c3=%.2f)' % (mu, sigma))\n\n    # Overlay the histogram of the samples\n    plt.hist(samples, bins=20, density=True, alpha=0.6, label='Samples')\n\n    # Set plot title\n    plt.title('Normal Distribution')\n\n    # Display the plot with legend\n    plt.legend()\n    plt.show()\n\n    return fig", "compilation_passed": true, "time": 0.04003190994262695, "tests_passed": true, "error": null}
{"code": "# Generate data\n    data = stats.norm.rvs(size=num_samples, loc=mu, scale=sigma)\n\n    # Set the size of the figure and number of bins\n    fig, ax = plt.subplots()\n    num_bins = 100\n\n    # Set plot parameters\n    ax.set_title('Normal Distribution')\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Probability')\n\n    # Generate the histogram\n    ax.hist(data, bins=num_bins, density=True, alpha=0.6, color='green', edgecolor='black')\n\n    # Generate normal distribution\n    x = np.linspace(-4, 4, 1000)\n    ax.plot(x, stats.norm.pdf(x, mu, sigma), color='blue')\n\n    return fig", "compilation_passed": true, "time": 0.10490584373474121, "tests_passed": true, "error": null}
{"code": "fig = plt.figure()\n\n    # Create a normal distribution\n    x = np.linspace(mu - 3 * sigma, mu + 3 * sigma, 10000)\n    prob = stats.norm.pdf(x, mu, sigma)\n\n    # Plot the normal distribution\n    plt.plot(x, prob, 'r-', lw=2, alpha=0.6, label='norm distribution')\n\n    # Generate random samples from the normal distribution and display the histogram\n    samples = np.random.normal(mu, sigma, num_samples)\n    plt.hist(samples, bins=50, density=True, alpha=0.3, label='random samples')\n\n    # Add legend and title\n    plt.legend()\n    plt.title('Normal Distribution')\n    plt.show()\n    return fig", "compilation_passed": true, "time": 0.4346129894256592, "tests_passed": true, "error": null}
{"code": "x = np.linspace(mu - 3*sigma, mu + 3*sigma, 1000)\n    y = stats.norm.pdf(x, mu, sigma)\n\n    fig, ax = plt.subplots()\n    ax.set_title('Normal Distribution')\n    ax.plot(x, y)\n\n    samples = np.random.normal(mu, sigma, num_samples)\n    ax.hist(samples, bins=20, alpha=0.5)\n    return fig", "compilation_passed": true, "time": 0.035675764083862305, "tests_passed": true, "error": null}
{"code": "fig, ax = plt.subplots()\n\n    # Generate the normal distribution\n    x = np.linspace(mu - 4*sigma, mu + 4*sigma, 1000)\n    y = stats.norm.pdf(x, mu, sigma)\n\n    # Plot the normal distribution\n    ax.plot(x, y, color='blue', label='Normal Distribution')\n\n    # Generate the random samples\n    samples = np.random.normal(mu, sigma, num_samples)\n\n    # Plot the histogram of the samples\n    ax.hist(samples, bins=100, alpha=0.5, color='red', label='Samples')\n\n    ax.set_title('Normal Distribution')\n\n    ax.legend()\n    ax.set_xlabel('X')\n    ax.set_ylabel('Density')\n\n    return fig", "compilation_passed": true, "time": 0.10708498954772949, "tests_passed": true, "error": null}
{"code": "x = np.linspace(-5, 5, 1000)\n    y = stats.norm.pdf(x, mu, sigma)\n    fig, ax = plt.subplots()\n    ax.plot(x, y, label='Normal Distribution')\n    ax.set_title('Normal Distribution')\n    ax.set_xlabel('x')\n    ax.set_ylabel('PDF')\n    ax.legend()\n\n    data = np.random.normal(mu, sigma, num_samples)\n    ax.hist(data, bins=30, alpha=0.5, density=True)\n    return fig", "compilation_passed": true, "time": 0.045844078063964844, "tests_passed": true, "error": null}
{"code": "fig, ax = plt.subplots()\n\n    # Generate random samples\n    samples = np.random.normal(mu, sigma, num_samples)\n\n    # Plot normal distribution\n    x = np.linspace(mu - 3 * sigma, mu + 3 * sigma, 1000)\n    ax.plot(x, stats.norm.pdf(x, mu, sigma), color=\"blue\", label=\"Normal Distribution\")\n\n    # Plot histogram of samples\n    ax.hist(samples, bins=30, density=True, alpha=0.5, color=\"red\", label=\"Random Samples\")\n\n    # Set plot title and labels\n    ax.set_title(\"Normal Distribution\")\n    ax.set_xlabel(\"Value\")\n    ax.set_ylabel(\"Probability Density\")\n\n    # Show the plot\n    plt.show()\n\n    return fig", "compilation_passed": true, "time": 0.044731855392456055, "tests_passed": true, "error": null}
{"code": "# Your code here\n\n    fig = plt.figure()\n\n    # create normal distribution\n    norm = stats.norm(mu, sigma)\n\n    # plot normal distribution\n    x = np.linspace(norm.ppf(0.01), norm.ppf(0.99), 100)\n    plt.plot(x, norm.pdf(x), '-')\n\n    # generate random samples and plot histogram\n    samples = np.random.normal(mu, sigma, num_samples)\n    plt.hist(samples, bins=30, density=True, alpha=0.6)\n\n    # add plot title\n    plt.title(\"Normal Distribution\")\n\n    # show plot\n    plt.show()\n\n    return fig", "compilation_passed": true, "time": 0.04619407653808594, "tests_passed": true, "error": null}
