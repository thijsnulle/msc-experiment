{"code": "random.seed(seed)\n    alphabet_lower = string.ascii_lowercase\n    alphabet_upper = string.ascii_uppercase\n    output = ''\n    for char in text:\n        if char in alphabet_lower:\n            output += random.choice(alphabet_lower)\n        elif char in alphabet_upper:\n            output += random.choice(alphabet_upper)\n        else:\n            output += char\n    return output", "compilation_passed": true, "time": 0.004209041595458984, "tests_passed": true, "error": null}
{"code": "# Set random seed for reproducibility (if provided)\n    if seed is not None:\n        random.seed(seed)\n\n    # Generate random replacements for lowercase and uppercase letters\n    random_lowercase = ''.join(random.choice(string.ascii_lowercase) for _ in range(26))\n    random_uppercase = ''.join(random.choice(string.ascii_uppercase) for _ in range(26))\n\n    # Create translation table for replacing letters while preserving case\n    trans_table = str.maketrans(string.ascii_lowercase + string.ascii_uppercase, random_lowercase + random_uppercase)\n\n    # Apply translations to text\n    return text.translate(trans_table)", "compilation_passed": true, "time": 0.0010848045349121094, "tests_passed": true, "error": null}
{"code": "random.seed(seed)\n    # Initialize an empty string for the transformed text\n    transformed = ''\n    # Iterate over each character in the input text\n    for char in text:\n        # Check if the current character is alphabetic and lowercase or uppercase\n        if char.isalpha():\n            # Generate a random letter of the same case as the original\n            letter = string.ascii_lowercase if char.islower() else string.ascii_uppercase\n            letter = random.choice(letter)\n            # Add the random letter to the transformed text\n            transformed += letter\n        else:\n            # If the character is non-alphabetic, add it as is to the transformed text\n            transformed += char\n    # Reset the random number generator seed to default\n    random.seed()\n    # Return the transformed text\n    return transformed", "compilation_passed": true, "time": 0.0010077953338623047, "tests_passed": true, "error": null}
{"code": "if seed is not None:\n        random.seed(seed)\n\n    def random_letter(c):\n        if c.isalpha():\n            alphabet = string.ascii_lowercase if c.islower() else string.ascii_uppercase\n            return random.choice(alphabet)\n        else:\n            return c\n\n    return ''.join(random_letter(c) for c in text)", "compilation_passed": true, "time": 0.0008771419525146484, "tests_passed": true, "error": null}
{"code": "random.seed(seed)  # Set the seed for reproducibility\n    new_text = []  # Initialize a list to store the transformed text\n    for char in text:  # Iterate through each character in the input text\n        if char.isalpha():  # Check if the character is alphabetic\n            if char.isupper():  # Check if the character is uppercase\n                new_char = random.choice(string.ascii_uppercase)  # Choose a random uppercase letter\n            else:\n                new_char = random.choice(string.ascii_lowercase)  # Choose a random lowercase letter\n            new_text.append(new_char)  # Append the random letter to the list\n        else:\n            new_text.append(char)  # Append non-alphabetic characters as they are\n    return ''.join(new_text)  # Join the list of transformed characters to form a string", "compilation_passed": true, "time": 0.00086212158203125, "tests_passed": true, "error": null}
{"code": "random.seed(seed)\n    replacements = {}\n    for c in text:\n        if c.isalpha():\n            if c.lower() not in replacements:\n                replacements[c.lower()] = random.choice(string.ascii_lowercase)\n            c = replacements[c.lower()].upper() if c.isupper() else replacements[c.lower()]\n        yield c", "compilation_passed": true, "time": 0.0008189678192138672, "tests_passed": false, "error": "TypeError"}
{"code": "# Set random seed for reproducibility\n    random.seed(seed)\n\n    # Define dictionaries for mapping lowercase and uppercase letters to random letters\n    lowercase_mapping = {c: random.choice(string.ascii_lowercase) for c in string.ascii_lowercase}\n    uppercase_mapping = {c: random.choice(string.ascii_uppercase) for c in string.ascii_uppercase}\n\n    # Iterate through each character in the input text\n    transformed_chars = []\n    for char in text:\n        if char.isalpha():\n            # For alphabetic characters, replace with a random letter from the corresponding case dictionary\n            if char.islower():\n                transformed_chars.append(lowercase_mapping[char])\n            else:\n                transformed_chars.append(uppercase_mapping[char])\n        else:\n            # For non-alphabetic characters, retain original character\n            transformed_chars.append(char)\n\n    # Join transformed characters into a single string\n    transformed_text = ''.join(transformed_chars)\n\n", "compilation_passed": true, "time": 0.0008530616760253906, "tests_passed": false, "error": "TypeError"}
{"code": "# Set the random seed for reproducibility\n    if seed is not None:\n        random.seed(seed)\n\n    # Initialize an empty string for the output\n    out = ''\n\n    # Loop through each character in the input text\n    for char in text:\n        # Check if the character is an alphabetic character\n        if char.isalpha():\n            # Select a random letter from the same case as the original\n            if char.isupper():\n                char = random.choice(string.ascii_uppercase)\n            elif char.islower():\n                char = random.choice(string.ascii_lowercase)\n\n        # Add the character to the output string\n        out += char\n\n    # Return the transformed string\n    return out", "compilation_passed": true, "time": 0.0008399486541748047, "tests_passed": true, "error": null}
{"code": "if seed is not None:\n        random.seed(seed)\n\n    ascii_upper = string.ascii_uppercase\n    ascii_lower = string.ascii_lowercase\n    transformed_text = ''\n\n    for char in text:\n        if char.isupper():\n            rand_idx = random.randint(0, len(ascii_upper) - 1)\n            transformed_text += ascii_upper[rand_idx]\n        elif char.islower():\n            rand_idx = random.randint(0, len(ascii_lower) - 1)\n            transformed_text += ascii_lower[rand_idx]\n        else:\n            transformed_text += char\n\n    return transformed_text", "compilation_passed": true, "time": 0.000885009765625, "tests_passed": true, "error": null}
{"code": "# Set random seed for reproducibility\n    random.seed(seed)\n\n    # Initialize empty output string\n    output_text = \"\"\n\n    # Define uppercase and lowercase alphabets for replacement\n    alphabet_lowercase = string.ascii_lowercase\n    alphabet_uppercase = string.ascii_uppercase\n\n    # Loop through each character in the input text\n    for char in text:\n        # If character is lowercase alphabetic, replace with a random lowercase letter\n        if char in alphabet_lowercase:\n            replacement = random.choice(alphabet_lowercase)\n        # If character is uppercase alphabetic, replace with a random uppercase letter\n        elif char in alphabet_uppercase:\n            replacement = random.choice(alphabet_uppercase)\n        # If character is not alphabetic, use it as it is\n        else:\n            replacement = char\n\n        # Append the replacement character to the output string\n        output_text += replacement\n\n    # Return the transformed text\n    return output_text", "compilation_passed": true, "time": 0.0010056495666503906, "tests_passed": true, "error": null}
{"code": "if not isinstance(text, str):\n        raise TypeError('text is not string')\n    if seed is not None:\n        random.seed(seed)\n\n    # Generate a random list of alphabetic replacements\n    replacements = [random.choice(string.ascii_lowercase) if char.islower() else random.choice(string.ascii_uppercase)\n                    for char in text if char.isalpha()]\n\n    # Create a dictionary for replacements, preserving the case\n    case_preserved_dict = {ord(text[i]): ord(replacements[i]) if text[i].isalpha()\n                           else text[i] for i in range(len(text))}\n\n    # Return the transformed text using the case-preserved dictionary\n    return text.translate(case_preserved_dict)", "compilation_passed": true, "time": 0.0009620189666748047, "tests_passed": false, "error": "IndexError"}
{"code": "# Set random seed if provided\n    if seed is not None:\n        random.seed(seed)\n\n    # Initialize empty list to store transformed characters\n    transformed_chars = []\n\n    # Iterate over each character in the input text\n    for char in text:\n        # Check if the character is alphabetic\n        if char.isalpha():\n            # Determine the case of the character (upper or lower case)\n            if char.isupper():\n                # Choose a random letter from upper case ascii characters\n                random_letter = random.choice(string.ascii_uppercase)\n            else:\n                # Choose a random letter from lower case ascii characters\n                random_letter = random.choice(string.ascii_lowercase)\n\n            # Append the random letter to the transformed characters\n            transformed_chars.append(random_letter)\n        else:\n            # Append non-alphabetic characters as is\n            transformed_chars.append(char)\n\n    # Join the transformed characters into a string and return it\n    return ''.join(transformed_chars)", "compilation_passed": true, "time": 0.0008769035339355469, "tests_passed": true, "error": null}
{"code": "# Set random seed for reproducibility\n    if seed is not None:\n        random.seed(seed)\n\n    # Generate alphabet replacements\n    lower_case = list(string.ascii_lowercase)\n    upper_case = list(string.ascii_uppercase)\n    random.shuffle(lower_case)\n    random.shuffle(upper_case)\n\n    # Initialize replacements\n    lower_mapping = {x: y for x, y in zip(string.ascii_lowercase, lower_case)}\n    upper_mapping = {x: y for x, y in zip(string.ascii_uppercase, upper_case)}\n    replacements = dict(**lower_mapping, **upper_mapping)\n\n    # Replace each character with the corresponding replacement\n    output = [replacements.get(char, char) for char in text]\n    return \"\".join(output)", "compilation_passed": true, "time": 0.0011000633239746094, "tests_passed": true, "error": null}
{"code": "# Set the random seed for reproducibility if provided\n    if seed:\n        random.seed(seed)\n\n    # Define the lowercase and uppercase alphabets using ascii characters\n    alphabets = [string.ascii_lowercase, string.ascii_uppercase]\n    # Create an empty list to store the transformed characters\n    transformed_chars = []\n    # Iterate through each character in the input text\n    for char in text:\n        # Check if the character is alphabetic\n        if char.isalpha():\n            # Get the random replacement character from the appropriate alphabet set\n            # (lowercase or uppercase) based on the original case of the character\n            transformed_char = random.choice(alphabets[char.isupper()])\n        else:\n            # If the character is not alphabetic, keep it as it is\n            transformed_char = char\n        # Append the transformed character to the list\n        transformed_chars.append(transformed_char)\n    # Join the transformed characters to form a transformed string\n    return ''.join(transformed_chars)<|", "compilation_passed": false, "time": 0.0001609325408935547, "tests_passed": false, "error": "SyntaxError"}
{"code": "if seed is not None:\n        random.seed(seed)\n\n    def replace_char(char):\n        if char.isalpha():\n            lowercase = string.ascii_lowercase if char.islower() else string.ascii_uppercase\n            return random.choice(lowercase)\n        return char\n\n    return \"\".join(replace_char(char) for char in text)", "compilation_passed": true, "time": 0.0008678436279296875, "tests_passed": true, "error": null}
{"code": "# Set the random seed\n    if seed is not None:\n        random.seed(seed)\n\n    # Generate a list of ascii characters based on the case of each alphabetic character in the original text\n    alphabet = []\n    for char in text:\n        if char.isalpha():\n            if char.isupper():\n                alphabet.append(string.ascii_uppercase)\n            else:\n                alphabet.append(string.ascii_lowercase)\n\n    # Use list comprehension to generate the random text\n    return \"\".join([random.choice(alphabet[i]) if char.isalpha() else char for i, char in enumerate(text)])", "compilation_passed": true, "time": 0.0008571147918701172, "tests_passed": false, "error": "IndexError"}
{"code": "# Set random seed for reproducibility\n    if seed is not None:\n        random.seed(seed)\n\n    # Define replacement functions for lower and upper cases\n    replace_lower = lambda: chr(random.randint(ord('a'), ord('z')))\n    replace_upper = lambda: chr(random.randint(ord('A'), ord('Z')))\n\n    # Check each character in the text for case and replace with a random letter accordingly\n    output = []\n    for char in text:\n        if char.islower():\n            output.append(replace_lower())\n        elif char.isupper():\n            output.append(replace_upper())\n        else:\n            output.append(char)\n\n    return ''.join(output)", "compilation_passed": true, "time": 0.0009219646453857422, "tests_passed": true, "error": null}
{"code": "random.seed(seed)\n    new_str = \"\"\n    for x in text:\n        if x.isalpha():\n            if x.isupper():\n                new_str += random.choice(string.ascii_uppercase)\n            else:\n                new_str += random.choice(string.ascii_lowercase)\n        else:\n            new_str += x\n    return new_str", "compilation_passed": true, "time": 0.0008301734924316406, "tests_passed": true, "error": null}
{"code": "if not isinstance(text, str):\n        raise TypeError(\"text must be a string\")\n\n    if not isinstance(seed, (type(None), int)):\n        raise TypeError(\"seed must be an integer or None\")\n\n    random.seed(seed)\n    upper_letters = string.ascii_uppercase\n    lower_letters = string.ascii_lowercase\n    result = []\n    for letter in text:\n        if letter.isalpha():\n            if letter.isupper():\n                result.append(random.choice(upper_letters))\n            else:\n                result.append(random.choice(lower_letters))\n        else:\n            result.append(letter)\n    return \"\".join(result)", "compilation_passed": true, "time": 0.0009102821350097656, "tests_passed": true, "error": null}
{"code": "# Set random seed if provided\n    if seed:\n        random.seed(seed)\n\n    # Generate a dictionary of replacements\n    alphabet = string.ascii_letters\n    replacements = {char: random.choice(alphabet) for char in alphabet}\n\n    # Convert non-alphabetic characters to lowercase for proper replacement\n    text = text.lower()\n\n    # Use the dictionary to replace each alphabetic character in the text\n    result = ''.join(replacements.get(char, char) for char in text)\n\n    return result", "compilation_passed": true, "time": 0.0008738040924072266, "tests_passed": true, "error": null}
{"code": "if seed:\n        random.seed(seed)\n\n    new_text = []\n\n    for char in text:\n        if char.isalpha():\n            if char.isupper():\n                alphabet = string.ascii_uppercase\n            else:\n                alphabet = string.ascii_lowercase\n            random_letter = random.choice(alphabet)\n            new_text.append(random_letter)\n        else:\n            new_text.append(char)\n\n    return \"\".join(new_text)", "compilation_passed": true, "time": 0.0008497238159179688, "tests_passed": true, "error": null}
{"code": "random.seed(seed)\n    alphabets = {\n        'ascii_lowercase': string.ascii_lowercase,\n        'ascii_uppercase': string.ascii_uppercase\n    }\n    result = ''\n    for char in text:\n        if char in alphabets['ascii_lowercase']:\n            result += random.choice(alphabets['ascii_lowercase'])\n        elif char in alphabets['ascii_uppercase']:\n            result += random.choice(alphabets['ascii_uppercase'])\n        else:\n            result += char\n    return result", "compilation_passed": true, "time": 0.0008640289306640625, "tests_passed": true, "error": null}
{"code": "if seed is not None:\n        random.seed(seed)\n\n    alphabet_lower = string.ascii_lowercase\n    alphabet_upper = string.ascii_uppercase\n\n    result = ''\n    for char in text:\n        if char.isalpha():\n            if char.islower():\n                replacement = random.choice(alphabet_lower)\n            else:\n                replacement = random.choice(alphabet_upper)\n        else:\n            replacement = char\n\n        result += replacement\n\n    return result", "compilation_passed": true, "time": 0.00084686279296875, "tests_passed": true, "error": null}
{"code": "if seed is not None:\n        random.seed(seed)\n    alphabet_lower = string.ascii_lowercase\n    alphabet_upper = string.ascii_uppercase\n    transformed_text = ''\n    for char in text:\n        if char.isalpha():\n            if char.islower():\n                transformed_text += random.choice(alphabet_lower)\n            else:\n                transformed_text += random.choice(alphabet_upper)\n        else:\n            transformed_text += char\n    return transformed_text", "compilation_passed": true, "time": 0.0008273124694824219, "tests_passed": true, "error": null}
{"code": "random.seed(seed)\n\n    new_text = \"\"\n    for char in text:\n        if char.isalpha():\n            if char.isupper():\n                char = random.choice(string.ascii_uppercase)\n            else:\n                char = random.choice(string.ascii_lowercase)\n        new_text += char\n\n    return new_text", "compilation_passed": true, "time": 0.0008077621459960938, "tests_passed": true, "error": null}
{"code": "if seed is not None:\n        random.seed(seed)\n    # Generate a list of random letters based on the case of the original letters in text\n    letters = []\n    for char in text:\n        if char.isalpha():\n            if char.isupper():\n                letters.append(random.choice(string.ascii_uppercase))\n            else:\n                letters.append(random.choice(string.ascii_lowercase))\n        else:\n            letters.append(char)\n    # Reconstruct the transformed text by replacing each original letter with a random letter\n    transformed_text = ''.join(letters)\n    return transformed_text", "compilation_passed": true, "time": 0.0009162425994873047, "tests_passed": true, "error": null}
{"code": "# set the random seed for reproducibility\n    if seed is not None:\n        random.seed(seed)\n\n    # define the alphabet as ascii letters of the same case as each original letter\n    alphabet = {\n        True: string.ascii_uppercase,\n        False: string.ascii_lowercase,\n    }\n\n    # build the transformed text by iterating over each character\n    new_text = ''\n    for letter in text:\n        if letter.isalpha():\n            # choose a random letter from the corresponding alphabet\n            new_text += random.choice(alphabet[letter.isupper()])\n        else:\n            # preserve non-alphabetic characters\n            new_text += letter\n\n    return new_text", "compilation_passed": true, "time": 0.000820159912109375, "tests_passed": true, "error": null}
{"code": "random.seed(seed)\n\n    alphabet_low = string.ascii_lowercase\n    alphabet_up = string.ascii_uppercase\n\n    # Create dictionaries for each alphabet case to store the replacements\n    alphabet_low_replacements = {char: random.choice(alphabet_low) for char in alphabet_low}\n    alphabet_up_replacements = {char: random.choice(alphabet_up) for char in alphabet_up}\n\n    # Create a dictionary for non-alphabetic characters to preserve their original case\n    non_alphabet = {char: char for char in string.punctuation + string.digits + string.whitespace}\n\n    # Combine all the dictionaries into a single dictionary\n    replacements = alphabet_low_replacements | alphabet_up_replacements | non_alphabet\n\n    # Use a list comprehension to transform the text using the replacements\n    result = ''.join([replacements[char] for char in text])\n\n    return result", "compilation_passed": true, "time": 0.0010013580322265625, "tests_passed": true, "error": null}
{"code": "# Set the random seed\n    if seed is not None:\n        random.seed(seed)\n\n    # Create a dictionary of corresponding ascii letters for uppercase and lowercase\n    ascii_letters = string.ascii_letters\n    uppercase_letters = string.ascii_uppercase\n    lowercase_letters = string.ascii_lowercase\n\n    letters_dict = dict(zip(ascii_letters, ascii_letters))\n\n    # Iterate over each character in the text and transform it\n    transformed_chars = []\n    for char in text:\n        if char.isalpha():\n            # If the character is alphabetic, choose a random corresponding letter\n            if char in uppercase_letters:\n                corresponding_letters = uppercase_letters\n            else:\n                corresponding_letters = lowercase_letters\n\n            letters = corresponding_letters\n\n            corresponding_letter = random.choice(letters)\n\n            transformed_chars.append(corresponding_letter)\n        else:\n            # If the character is not alphabetic, preserve it as is\n            transformed_chars.append(char)\n\n", "compilation_passed": true, "time": 0.0008549690246582031, "tests_passed": false, "error": "TypeError"}
{"code": "random.seed(seed)\n    # Define the ascii letters for each case\n    upper_alphabet = string.ascii_uppercase\n    lower_alphabet = string.ascii_lowercase\n    # Initialize an empty string for the transformed text\n    transformed_text = ''\n    # Iterate over each character in the input text\n    for char in text:\n        # If the character is an alphabetic letter\n        if char.isalpha():\n            # Choose a random letter from the corresponding alphabet case\n            if char.isupper():\n                random_letter = random.choice(upper_alphabet)\n            else:\n                random_letter = random.choice(lower_alphabet)\n            # Add the random letter to the transformed text\n            transformed_text += random_letter\n        # If the character is a non-alphabetic character, add it as is\n        else:\n            transformed_text += char\n    # Reset the random seed if it was used\n    if seed is not None:\n        random.seed()\n    # Return the transformed text\n    return transformed_text", "compilation_passed": true, "time": 0.0009930133819580078, "tests_passed": true, "error": null}
