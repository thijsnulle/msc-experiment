{"code": "if name not in ('John', 'Alice', 'Bob', 'Charlie', 'David'):\n        raise ValueError(\"Name should be one of 'John', 'Alice', 'Bob', 'Charlie', 'David'.\")\n\n    data = {\n        'Name': name,\n        'Age': age,\n        'Code': code,\n        'Salary': salary,\n        'Bio': bio,\n        'Job Title': ['Engineer', 'Manager', 'Analyst', 'Developer', 'Tester'][randint(0, 4)]\n    }\n    data_df = pd.DataFrame([data])\n    return data_df", "compilation_passed": true, "time": 0.0014090538024902344, "tests_passed": false, "error": "StopIteration"}
{"code": "# Check if name is one of the predefined names\n    if name not in ['John', 'Alice', 'Bob', 'Charlie', 'David']:\n        raise ValueError(\"Invalid name. Must be one of the predefined names: \"\n                         \"'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n\n    # Convert bio into a string with no spaces, first converting the list of tokens to a single string\n    bio = ''.join(str(bio).split())\n\n    # Define job titles\n    job_titles = ['Engineer', 'Manager', 'Analyst', 'Developer', 'Tester']\n\n    # Assign a job title randomly\n    job_title = job_titles[randint(0, len(job_titles) - 1)]\n\n    # Create the dataframe\n    data_df = pd.DataFrame({'Name': [name], 'Age': [age], 'Code': [code], 'Salary': [salary], 'Bio': [bio],\n                            'Job", "compilation_passed": false, "time": 9.703636169433594e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Check that the name provided is one of the predefined names. If not, raise ValueError.\n    if name not in [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eric\"]:\n        raise ValueError(\"Name must be one of the predefined names: 'John', 'Alice', 'Bob', 'Charlie', 'David', 'Eric'\")\n\n    # Create a list of job titles\n    job_titles = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n\n    # Create a DataFrame with the input details\n    data_df = pd.DataFrame({\"Name\": [name],\n                            \"Age\": [age],\n                            \"Code\": [code],\n                            \"Salary\": [salary],\n                            \"Bio\": [bio],\n                            \"Job Title\": [job_titles[randint(0, len(job_titles)-1)]]\n                            })\n    # Return the DataFrame\n    return data_df", "compilation_passed": true, "time": 0.0012242794036865234, "tests_passed": false, "error": "StopIteration"}
{"code": "# Check if name is valid\n    VALID_NAMES = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    if name not in VALID_NAMES:\n        raise ValueError(\n            f\"Name should be one of {', '.join(VALID_NAMES)}, but {name} was given.\"\n        )\n\n    # Check if age is positive\n    if age < 0:\n        raise ValueError(\n            f\"Age should be positive, but {age} was given for name {name}.\"\n        )\n\n    # Check if bio has more than 30 characters\n    if len(bio) > 30:\n        raise ValueError(\n            f\"Biography for {name} should not have more than 30 characters, but {len(bio)} were given.\"\n        )\n\n    # Assign job title randomly\n    JOB_TITLES = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    job_title = JOB_TITLES[rand", "compilation_passed": false, "time": 0.00022673606872558594, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Define the allowed names and job titles\n    allowed_names = [\n        \"John\",\n        \"Alice\",\n        \"Bob\",\n        \"Charlie\",\n        \"David\",\n        \"A\",\n        \"B\",\n        \"C\",\n        \"D\",\n        \"E\",\n        \"F\",\n        \"G\",\n        \"H\",\n        \"I\",\n    ]\n    job_titles = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n\n    # Check if the input name is allowed\n    if name not in allowed_names:\n        raise ValueError(f\"Invalid name: {name}\")\n\n    # Create the DataFrame with the given input and a random job title\n    data_df = pd.DataFrame(\n        {\n            \"Name\": [name],\n            \"Age\": [age],\n            \"Code\": [code],\n            \"Salary\": [salary],\n            \"Bio\": [bio],\n            \"Job Title\": [", "compilation_passed": false, "time": 0.0002300739288330078, "tests_passed": false, "error": "SyntaxError"}
{"code": "if name not in [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]:\n        raise ValueError(\"Invalid name provided. Must be one of: John, Alice, Bob, Charlie, David\")\n\n    job_titles = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    job_title = job_titles[randint(0, len(job_titles) - 1)]\n\n    data_df = pd.DataFrame({\n        'Name': [name],\n        'Age': [age],\n        'Code': [code],\n        'Salary': [salary],\n        'Bio': [bio],\n        'Job Title': [job_title]\n    })\n\n    return data_df", "compilation_passed": true, "time": 0.001219034194946289, "tests_passed": false, "error": "StopIteration"}
{"code": "# Validate input values\n    names = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    if name not in names:\n        raise ValueError(\"'name' must be one of: 'John', 'Alice', 'Bob', 'Charlie', 'David'.\")\n    if not isinstance(age, int) or age < 0:\n        raise ValueError(\"'age' must be a positive integer.\")\n    if not isinstance(code, str) or len(code) != 4:\n        raise ValueError(\"'code' must be a string of length 4.\")\n    if not isinstance(salary, (int, float)) or salary <= 0:\n        raise ValueError(\"'salary' must be a positive number.\")\n    if not isinstance(bio, str):\n        raise ValueError(\"'bio' must be a string.\")\n\n    # Validate 'name' and 'code'\n    if name.title() not in names:\n        raise ValueError(f\"'name' must be", "compilation_passed": false, "time": 9.703636169433594e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "if name not in [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]:\n        raise ValueError(f\"{name=} must be one of John, Alice, Bob, Charlie, David\")\n\n    job_titles = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    job_title = job_titles[randint(0, 4)]\n\n    data_df = pd.DataFrame(\n        data={\n            \"Name\": name,\n            \"Age\": age,\n            \"Code\": code,\n            \"Salary\": salary,\n            \"Bio\": bio,\n            \"Job Title\": job_title,\n        },\n        index=[0],\n    )\n    return data_df", "compilation_passed": true, "time": 0.0012731552124023438, "tests_passed": false, "error": "StopIteration"}
{"code": "# Check input values\n    names = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    if name not in names:\n        raise ValueError(f\"Name {name} not in the list {names}\")\n    if not isinstance(age, int) or age < 0:\n        raise ValueError(\"Age must be a positive integer\")\n    if not isinstance(code, str) or not code.isalnum() or len(code) != 4:\n        raise ValueError(\"Code must be 4 alphanumeric characters\")\n    if not isinstance(salary, (int, float)) or salary < 0:\n        raise ValueError(\"Salary must be a positive number\")\n    if not isinstance(bio, str):\n        raise ValueError(\"Bio must be a string\")\n\n    # Create DataFrame with input values\n    data = [[name, age, code, salary, bio]]\n    columns = [\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\"]\n    data_df = pd.DataFrame", "compilation_passed": true, "time": 0.0012462139129638672, "tests_passed": false, "error": "AttributeError"}
{"code": "# Validate name\n    valid_names = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    if name not in valid_names:\n        raise ValueError(\"Invalid name. Name must be one of the predefined names: \" + \", \".join(valid_names))\n\n    # Assign job title randomly\n    job_titles = ['Engineer', 'Manager', 'Analyst', 'Developer', 'Tester']\n    job_title = job_titles[randint(0, len(job_titles) - 1)]\n\n    # Generate pandas DataFrame\n    data_dict = {\n        'Name': [name],\n        'Age': [age],\n        'Code': [code],\n        'Salary': [salary],\n        'Bio': [bio],\n        'Job Title': [job_title]\n    }\n    data_df = pd.DataFrame(data_dict)\n\n    return data_df", "compilation_passed": true, "time": 0.0012578964233398438, "tests_passed": false, "error": "StopIteration"}
{"code": "name_list = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n\n    job_titles = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n\n    if name not in name_list:\n        raise ValueError(f\"Name '{name}' is not in the predefined list of names: {name_list}\")\n\n    if not isinstance(age, int) or age < 0:\n        raise ValueError(\"Age must be a positive integer.\")\n\n    if not isinstance(code, str):\n        raise ValueError(\"Code must be a string.\")\n\n    if len(code) != 4:\n        raise ValueError(\"Code must be a string of length 4.\")\n\n    if code[0].isdigit():\n        raise ValueError(\"Code must start with a letter.\")\n\n    if not code[1:].isupper():\n        raise ValueError(\"Code must be uppercase.\")\n\n    if not isinstance(salary", "compilation_passed": false, "time": 0.0002551078796386719, "tests_passed": false, "error": "SyntaxError"}
{"code": "name = name.strip().title()  # Remove whitespace and capitalize.\n    age = int(age)  # Convert to integer.\n    code = code.strip()\n    salary = float(salary)  # Convert to float.\n    bio = bio.strip()\n\n    # Assert that the inputs meet the requirements.\n    if name not in ['John', 'Alice', 'Bob', 'Charlie', 'David']:\n        raise ValueError(f\"Invalid name '{name}'. Must be one of the predefined names: 'John', 'Alice', 'Bob', 'Charlie', 'David'.\")\n\n    if age < 18 or age > 65:\n        raise ValueError(f\"Invalid age '{age}'. Must be between 18 and 65.\")\n\n    if len(code) < 4 or len(code) > 5:\n        raise ValueError(f\"Invalid code '{code}'. Must be between 4 and 5 characters.\")\n\n    if salary < 1000 or salary >", "compilation_passed": false, "time": 0.0002231597900390625, "tests_passed": false, "error": "SyntaxError"}
{"code": "job_titles = ['Engineer', 'Manager', 'Analyst', 'Developer', 'Tester']\n    if name not in ['John', 'Alice', 'Bob', 'Charlie', 'David']:\n        raise ValueError(\"Name must be one of the predefined names: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job_title = job_titles[randint(0, len(job_titles)-1)]\n    data_df = pd.DataFrame({'Name': [name],\n                            'Age': [age],\n                            'Code': [code],\n                            'Salary': [salary],\n                            'Bio': [bio],\n                            'Job Title': [job_title]})\n    return data_df", "compilation_passed": true, "time": 0.001233816146850586, "tests_passed": false, "error": "StopIteration"}
{"code": "# Initialize a list of predefined names for the employees\n    name_list = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\", \"Jane\", \"Tom\", \"Jenny\", \"Mike\"]\n    # Check if the name provided is in the list of predefined names, if not raise ValueError\n    if name not in name_list:\n        raise ValueError(\"Name must be one of the predefined names: John, Alice, Bob, Charlie, David\")\n    # Initialize a list of predefined job titles for the employees\n    job_titles = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    # Initialize the column names\n    column_names = [\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"]\n    # Initialize a dictionary to store the data, with keys as the column names and values as the data\n    data = {\"Name\": [name],\n            \"Age\": [age],\n            \"Code\": [code],\n            \"Sal", "compilation_passed": false, "time": 8.511543273925781e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "name_to_title = {'John': 'Engineer',\n                     'Alice': 'Manager',\n                     'Bob': 'Analyst',\n                     'Charlie': 'Developer',\n                     'David': 'Tester'}\n\n    if name not in name_to_title:\n        raise ValueError(f\"Name '{name}' not in the list: {list(name_to_title.keys())}\")\n\n    title = name_to_title[name]\n    data = {'Name': [name],\n            'Age': [age],\n            'Code': [code],\n            'Salary': [salary],\n            'Bio': [bio],\n            'Job Title': [title]}\n\n    data_df = pd.DataFrame(data)\n    return data_df", "compilation_passed": true, "time": 0.008629083633422852, "tests_passed": true, "error": null}
{"code": "names = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    job_titles = ['Engineer', 'Manager', 'Analyst', 'Developer', 'Tester']\n\n    if name not in names:\n        raise ValueError(\"'Name' must be one of the predefined names: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n\n    data = {\n        'Name': name,\n        'Age': age,\n        'Code': code,\n        'Salary': salary,\n        'Bio': bio,\n        'Job Title': job_titles[randint(0, len(job_titles) - 1)]\n    }\n\n    data_df = pd.DataFrame(data, index=[0])\n\n    return data_df", "compilation_passed": true, "time": 0.001291036605834961, "tests_passed": false, "error": "StopIteration"}
{"code": "# Check for valid name\n    if name not in ['John', 'Alice', 'Bob', 'Charlie', 'David']:\n        raise ValueError(\"Invalid name\")\n\n    # Define job titles\n    job_titles = ['Engineer', 'Manager', 'Analyst', 'Developer', 'Tester']\n\n    # Create dataframe with columns 'Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'\n    data = {'Name': [name],\n            'Age': [age],\n            'Code': [code],\n            'Salary': [salary],\n            'Bio': [bio],\n            'Job Title': [job_titles[randint(0, len(job_titles) - 1)]]\n            }\n    data_df = pd.DataFrame(data)\n\n    return data_df", "compilation_passed": true, "time": 0.0012519359588623047, "tests_passed": false, "error": "StopIteration"}
{"code": "# Validate the input\n    valid_names = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    if name not in valid_names:\n        raise ValueError(f\"Invalid name. Must be one of {', '.join(valid_names)}\")\n    if age < 18:\n        raise ValueError(\"Age must be greater than 18\")\n\n    # Assign job title\n    job_titles = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    job_title = job_titles[randint(0, len(job_titles) - 1)]\n\n    # Create the DataFrame\n    data = {\n        \"Name\": [name],\n        \"Age\": [age],\n        \"Code\": [code],\n        \"Salary\": [salary],\n        \"Bio\": [bio],\n        \"Job Title\": [job_title],\n    }\n    data_df = pd.DataFrame(data)\n\n    return data", "compilation_passed": true, "time": 0.001280069351196289, "tests_passed": false, "error": "StopIteration"}
{"code": "# Initialize the names list\n    names = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n\n    # Check if the name is in the predefined names\n    if name not in names:\n        raise ValueError(f\"Name '{name}' is not in the predefined names: {names}\")\n\n    # Check if the age is less than or equal to 25\n    if age <= 25:\n        raise ValueError(\"Age must be greater than 25\")\n\n    # Check if the salary is not zero\n    if salary <= 0:\n        raise ValueError(\"Salary must be greater than zero\")\n\n    # Check if the code contains both letters and digits\n    if not (any(c.isalpha() for c in code) and any(c.isdigit() for c in code)):\n        raise ValueError(\"Code must contain both letters and digits\")\n\n    # Check if the bio has more than 10 words\n    if len(bio.split()) < 10:\n        raise ValueError(\"Biography must have at", "compilation_passed": false, "time": 9.489059448242188e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Check if name is in the list of predefined names\n    names = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    if name not in names:\n        raise ValueError(f\"Name must be one of the following predefined names: {', '.join(names)}\")\n\n    # Define a list of job titles\n    job_titles = ['Engineer', 'Manager', 'Analyst', 'Developer', 'Tester']\n\n    # Assign a job title to the employee\n    job_title = job_titles[randint(0, 4)]\n\n    # Create a pandas DataFrame with the employee details\n    data = {'Name': [name], 'Age': [age], 'Code': [code], 'Salary': [salary],\n            'Bio': [bio], 'Job Title': [job_title]}\n    data_df = pd.DataFrame(data)\n\n    return data_df", "compilation_passed": true, "time": 0.0012860298156738281, "tests_passed": false, "error": "StopIteration"}
{"code": "names = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    jobs = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n\n    if name not in names:\n        raise ValueError(f\"Name must be one of {', '.join(names)}\")\n\n    data = {\"Name\": name, \"Age\": age, \"Code\": code, \"Salary\": salary, \"Bio\": bio}\n    data[\"Job Title\"] = jobs[randint(0, 4)]\n\n    return pd.DataFrame([data])", "compilation_passed": true, "time": 0.0013129711151123047, "tests_passed": false, "error": "StopIteration"}
{"code": "# check the name\n    names = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    if name not in names:\n        raise ValueError(f\"Invalid name: '{name}'. Valid names are: {names}\")\n\n    # define job titles\n    job_titles = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n\n    # create the dataframe\n    data_df = pd.DataFrame(\n        {\n            \"Name\": name,\n            \"Age\": age,\n            \"Code\": code,\n            \"Salary\": salary,\n            \"Bio\": bio,\n        },\n        index=[0],\n    )\n\n    # add random job title\n    data_df[\"Job Title\"] = data_df.apply(\n        lambda _: job_titles[randint(0, len(job_titles) - 1)], axis=1\n    )\n\n    return data_df", "compilation_passed": true, "time": 0.8598473072052002, "tests_passed": false, "error": "StopIteration"}
{"code": "name_list = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    job_titles = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n\n    if name not in name_list:\n        raise ValueError(f\"Name should be one of the predefined names: {', '.join(name_list)}\")\n\n    data = [(name, age, code, salary, bio)]\n    data_df = pd.DataFrame(\n        data, columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\"], index=range(len(data))\n    )\n    data_df[\"Job Title\"] = randint(0, len(job_titles))\n    return data_df", "compilation_passed": true, "time": 0.0015120506286621094, "tests_passed": false, "error": "StopIteration"}
{"code": "# Validate name parameter\n    valid_names = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    if name not in valid_names:\n        raise ValueError(\"Invalid name. Name must be one of the following: John, Alice, Bob, Charlie, David.\")\n\n    # Validate age parameter\n    if age < 18 or age > 120:\n        raise ValueError(\"Invalid age. Age must be between 18 and 120 years old.\")\n\n    # Validate code parameter\n    if len(code) < 2 or len(code) > 4:\n        raise ValueError(\"Invalid code. Code must be between 2 and 4 characters long.\")\n\n    # Validate salary parameter\n    if salary <= 0:\n        raise ValueError(\"Invalid salary. Salary must be greater than 0.\")\n\n    # Validate bio parameter\n    if len(bio) < 10 or len(bio) > 100:\n        raise ValueError(\"Invalid bio. Bio must be between ", "compilation_passed": false, "time": 8.702278137207031e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "job_titles = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n\n    # Check if the name is in the list of predefined names\n    if name not in ['John', 'Alice', 'Bob', 'Charlie', 'David']:\n        raise ValueError(f\"Invalid name {name}, must be one of the predefined names: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n\n    # Create the data dictionary\n    data = {'Name': name, 'Age': age, 'Code': code, 'Salary': salary, 'Bio': bio}\n\n    # Randomly assign a job title\n    data['Job Title'] = job_titles[randint(0, 4)]\n\n    # Convert the data dictionary to a Pandas DataFrame\n    data_df = pd.DataFrame(data, index=[0])\n\n    return data_df", "compilation_passed": true, "time": 0.0012333393096923828, "tests_passed": false, "error": "StopIteration"}
{"code": "# Check for validity\n    valid_names = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n\n    # check for name\n    if name not in valid_names:\n        raise ValueError(f\"Invalid name: {name}. Must be one of {valid_names}\")\n\n    # check for code\n    if not isinstance(code, str) or len(code) != 4:\n        raise ValueError(\"Code must be a string of 4 characters\")\n\n    # check for salary\n    if not isinstance(salary, (int, float)) or salary <= 0:\n        raise ValueError(\"Salary must be a positive number\")\n\n    # check for bio\n    if not isinstance(bio, str) or len(bio) > 50:\n        raise ValueError(\"Bio must be a string of less than 50 characters\")\n\n    # Check for age\n    if not isinstance(age, int) or age < 0:\n        raise ValueError(\"Age must be an integer greater than or equal to 0\")\n\n", "compilation_passed": true, "time": 0.0012290477752685547, "tests_passed": false, "error": "AttributeError"}
{"code": "# Check the provided values\n    names = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    job_titles = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    name = name.strip()\n    if name not in names:\n        raise ValueError(f\"The provided name {name} is not valid.\")\n\n    age = int(age)\n    if age < 18 or age > 120:\n        raise ValueError(f\"The provided age {age} is not valid.\")\n\n    code = code.strip()\n\n    salary = float(salary)\n    if salary < 0:\n        raise ValueError(f\"The provided salary {salary} is not valid.\")\n\n    # Generate a DataFrame with one row for the given input\n    data = {\n        \"Name\": name,\n        \"Age\": age,\n        \"Code\": code,\n        \"Salary\": salary,\n        \"Bio\": bio,\n        \"Job Title\":", "compilation_passed": false, "time": 0.0002598762512207031, "tests_passed": false, "error": "SyntaxError"}
{"code": "if name not in ['John', 'Alice', 'Bob', 'Charlie', 'David']:\n        raise ValueError(\"Invalid name! Must be one of the predefined names: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n    job_titles = ['Engineer', 'Manager', 'Analyst', 'Developer', 'Tester']\n    job_title = job_titles[randint(0, len(job_titles)-1)]\n    data_df = pd.DataFrame({'Name': [name],\n                            'Age': [age],\n                            'Code': [code],\n                            'Salary': [salary],\n                            'Bio': [bio],\n                            'Job Title': [job_title]})\n    return data_df", "compilation_passed": true, "time": 0.0012481212615966797, "tests_passed": false, "error": "StopIteration"}
{"code": "# Define the predefined names for the employee\n    predefined_names = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n\n    # Check if the input name is valid\n    if name not in predefined_names:\n        raise ValueError(f'Name must be one of the predefined names: {predefined_names}')\n\n    # Define the job titles\n    job_titles = ['Engineer', 'Manager', 'Analyst', 'Developer', 'Tester']\n\n    # Select a random job title from the predefined list\n    random_job_title = job_titles[randint(0, len(job_titles) - 1)]\n\n    # Create a dataframe with the employee details\n    data_df = pd.DataFrame({'Name': [name],\n                            'Age': [age],\n                            'Code': [code],\n                            'Salary': [salary],\n                            'Bio': [bio],\n                            'Job Title': [random_job_title]})\n\n    return data_df", "compilation_passed": true, "time": 0.0012309551239013672, "tests_passed": false, "error": "StopIteration"}
{"code": "valid_names = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    if name not in valid_names:\n        raise ValueError(f\"Name must be one of {valid_names}, but got {name}\")\n\n    job_titles = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n\n    data_dict = {\n        'Name': [name],\n        'Age': [age],\n        'Code': [code],\n        'Salary': [salary],\n        'Bio': [bio],\n        'Job Title': [job_titles[randint(0, len(job_titles) - 1)]]\n    }\n\n    data_df = pd.DataFrame(data_dict)\n    return data_df", "compilation_passed": true, "time": 0.001245737075805664, "tests_passed": false, "error": "StopIteration"}
