{"code": "# Generate random grades for each student for each course\n    grades = np.random.uniform(low=0, high=100, size=(len(STUDENTS), len(COURSES)))\n\n    # Create a DataFrame with the grades\n    df = pd.DataFrame(grades, index=STUDENTS, columns=COURSES)\n\n    # Calculate the average grade for each student\n    df['Average Grade'] = df.mean(axis=1)\n\n    # Add the name of each student as a new column\n    df['Name'] = df.index\n\n    # Reset the index to make the name column the new index\n    df = df.set_index('Name')\n\n    return df", "compilation_passed": true, "time": 0.0018320083618164062, "tests_passed": false, "error": "KeyError"}
{"code": "# Generate grades for each student in each course\n    grades = []\n    for student in STUDENTS:\n        student_grades = []\n        for course in COURSES:\n            student_grades.append([student, course, np.random.uniform(0, 100)])\n        grades.append(student_grades)\n\n    # Flatten the grades into a list of tuples\n    grades = [grade for student_grades in grades for grade in student_grades]\n\n    # Convert grades to a DataFrame\n    grades_df = pd.DataFrame(grades, columns=['Name', 'Course', 'Grade'])\n\n    # Group by student and calculate the average grade\n    grades_df['Average Grade'] = grades_df.groupby('Name')['Grade'].transform('mean')\n\n    # Sort by Average Grade in ascending order\n    grades_df.sort_values(by='Average Grade', inplace=True, ascending=False)\n\n    return grades_df", "compilation_passed": true, "time": 0.0034301280975341797, "tests_passed": false, "error": "TypeError"}
{"code": "grades = np.random.randint(0, 101, (len(STUDENTS), len(COURSES)))\n    grades_df = pd.DataFrame(grades, index=STUDENTS, columns=COURSES)\n\n    grades_df['Average Grade'] = grades_df.mean(axis=1).round(3)\n    grades_df['Name'] = grades_df.index\n    grades_df = grades_df.reset_index(drop=True)\n    return grades_df", "compilation_passed": true, "time": 0.0028710365295410156, "tests_passed": true, "error": null}
{"code": "# Initialize the DataFrame with the student names\n    grades = pd.DataFrame({'Name': STUDENTS})\n\n    # Add a column for each course with random grades for each student\n    for course in COURSES:\n        grades[course] = np.random.randint(0, 100, len(grades))\n\n    # Calculate an average grade column based on the average of all course grades\n    grades['Average Grade'] = grades.mean(axis=1)\n\n    # Return the DataFrame\n    return grades", "compilation_passed": true, "time": 0.002003908157348633, "tests_passed": false, "error": "TypeError"}
{"code": "# Create an empty DataFrame with columns for each student and the average grade\n    grades = pd.DataFrame(columns=STUDENTS + ['Average Grade'])\n\n    # Fill the DataFrame with random grades for each student and course\n    for course in COURSES:\n        grades[course] = np.random.randint(0, 101, len(STUDENTS))\n\n    # Calculate the average grade for each student\n    grades['Average Grade'] = grades[STUDENTS].mean(axis=1)\n\n    # Set the student names as the index\n    grades.set_index(STUDENTS, inplace=True)\n\n    return grades", "compilation_passed": true, "time": 0.0034210681915283203, "tests_passed": false, "error": "KeyError"}
{"code": "grades = {}\n    for course in COURSES:\n        grades[course] = [np.random.uniform(low=0, high=100) for _ in range(len(STUDENTS))]\n    for student in STUDENTS:\n        grades[student] = [grades[course][STUDENTS.index(student)] for course in COURSES]\n    for student in STUDENTS:\n        grades['Average Grade'][STUDENTS.index(student)] = np.mean(grades[student])\n    return pd.DataFrame(grades, columns=COURSES + ['Average Grade']).assign(Name=STUDENTS)", "compilation_passed": true, "time": 0.0011839866638183594, "tests_passed": false, "error": "KeyError"}
{"code": "# Initialize the DataFrame with student names\n    grades = pd.DataFrame({'Name': STUDENTS})\n\n    # Loop through each course\n    for course in COURSES:\n        # Generate random grades for each student and add to the DataFrame\n        grades[course] = np.random.randint(0, 101, size=len(STUDENTS))\n\n    # Calculate the average grade for each student and add to the DataFrame\n    grades['Average Grade'] = grades.iloc[:, 1:-1].mean(axis=1)\n\n    # Return the DataFrame\n    return grades", "compilation_passed": true, "time": 0.003676891326904297, "tests_passed": true, "error": null}
{"code": "grades = {student: {course: round(np.random.uniform(0, 100), 2) for course in COURSES} for student in STUDENTS}\n    data = pd.DataFrame(grades).transpose().reset_index()\n    data = data.rename(columns={'index': 'Name'})\n    data['Average Grade'] = data.mean(axis=1)\n\n    return data", "compilation_passed": true, "time": 0.0020127296447753906, "tests_passed": false, "error": "TypeError"}
{"code": "# Generate random grades for each student across all courses\n    grades = pd.DataFrame(\n        np.random.randint(0, 101, size=(len(STUDENTS), len(COURSES))),\n        index=STUDENTS,\n        columns=COURSES)\n\n    # Calculate average grade for each student\n    grades['Average Grade'] = grades.mean(axis=1)\n\n    # Set student names as index\n    grades.set_index('Name', inplace=True)\n\n    return grades", "compilation_passed": true, "time": 0.0013492107391357422, "tests_passed": false, "error": "KeyError"}
{"code": "# Initialize a dictionary to store the data\n    data = {'Name': STUDENTS}\n\n    # Generate grades for each student in each course\n    for course in COURSES:\n        course_grades = [np.random.uniform(0, 100) for _ in range(len(STUDENTS))]\n        data[course] = course_grades\n\n    # Calculate the average grade for each student\n    grades = pd.DataFrame(data)\n    grades['Average Grade'] = grades[COURSES].mean(axis=1)\n\n    return grades", "compilation_passed": true, "time": 0.004081010818481445, "tests_passed": true, "error": null}
{"code": "# Create a list to hold all the data\n    data = []\n\n    # For each student\n    for name in STUDENTS:\n        # Create a dictionary to hold this student's data\n        row = {}\n        row['Name'] = name\n\n        # For each course\n        for course in COURSES:\n            # Generate a random grade (between 0 and 100) for this course\n            row[course] = randint(0, 100)\n\n        # Calculate the average grade for this student across all courses\n        row['Average Grade'] = np.average(list(row.values())[1:])\n\n        # Add this student's data to the list of data\n        data.append(row)\n\n    # Convert the list of data to a DataFrame\n    grades = pd.DataFrame(data)\n\n    return grades", "compilation_passed": true, "time": 0.003651142120361328, "tests_passed": true, "error": null}
{"code": "# Generate random grades for each course for each student\n    grades = []\n    for i in range(len(STUDENTS)):\n        student_grades = [randint(0, 100) for course in COURSES]\n        grades.append(student_grades)\n    grades = np.array(grades)\n\n    # Create a DataFrame from the grades array\n    grades = pd.DataFrame(grades, columns=COURSES)\n\n    # Add a Name column to the DataFrame\n    grades['Name'] = STUDENTS\n\n    # Calculate the average grade for each student across all courses\n    grades['Average Grade'] = grades.mean(axis=1)\n\n    return grades", "compilation_passed": true, "time": 0.0018286705017089844, "tests_passed": false, "error": "TypeError"}
{"code": "# Generate a random set of grades for each student across each course\n    student_grades = {student: {course: randint(0, 100) for course in COURSES} for student in STUDENTS}\n\n    # Calculate an average grade for each student\n    for student, grades in student_grades.items():\n        grades['Average Grade'] = np.mean(list(grades.values()))\n\n    # Add the student names as a column in the dictionary\n    student_grades = {student: {'Name': student, **grades} for student, grades in student_grades.items()}\n\n    # Create a DataFrame from the dictionary\n    df = pd.DataFrame(student_grades).T\n\n    return df", "compilation_passed": true, "time": 0.004199981689453125, "tests_passed": true, "error": null}
{"code": "# Generate random grades for each student and course\n    grades = {}\n    for student in STUDENTS:\n        student_grades = {}\n        for course in COURSES:\n            grade = np.random.uniform(low=0, high=100)\n            student_grades[course] = round(grade, 3)\n        grades[student] = student_grades\n\n    # Calculate average grade for each student\n    average_grades = {}\n    for student in STUDENTS:\n        average_grades[student] = round(np.mean(list(grades[student].values())), 3)\n\n    # Create DataFrame\n    data = {'Name': STUDENTS, 'Average Grade': average_grades}\n    for course in COURSES:\n        course_grades = []\n        for student in STUDENTS:\n            course_grades.append(grades[student][course])\n        data[course] = course_grades\n\n    # Return DataFrame\n    return pd.DataFrame(data)", "compilation_passed": true, "time": 0.0015659332275390625, "tests_passed": false, "error": "ValueError"}
{"code": "# Create a DataFrame with one row for each student\n    grades = pd.DataFrame(STUDENTS, columns=['Name'])\n\n    # Add columns for each course, with randomly generated grades\n    for course in COURSES:\n        grades[course] = np.random.uniform(0, 100, len(STUDENTS))\n\n    # Add a column for the average grade across all courses\n    grades['Average Grade'] = grades[COURSES].mean(axis=1)\n\n    # Return the DataFrame with the Name and Average Grade columns\n    return grades[['Name', 'Average Grade']]", "compilation_passed": true, "time": 0.0038928985595703125, "tests_passed": true, "error": null}
{"code": "# Generate a random grade between 0 and 100 for each course\n    grades = [randint(0, 100) for course in COURSES]\n    # Create a DataFrame with a row for each student and a column for each course\n    df = pd.DataFrame({student: grade for student, grade in zip(STUDENTS, grades)}, index=range(1, len(STUDENTS)+1))\n    # Add a column with the student's average grade\n    df['Average Grade'] = df.mean(axis=1)\n    # Rename the index to be the student's name\n    df.index = STUDENTS\n    # Add a column for the name of the student\n    df['Name'] = df.index\n    return df", "compilation_passed": true, "time": 0.002766847610473633, "tests_passed": true, "error": null}
{"code": "# Generate random grades for each student and course\n    grades = pd.DataFrame({'Name': np.random.choice(STUDENTS, size=len(STUDENTS))})\n    for course in COURSES:\n        grades[course] = np.random.choice(range(101), size=len(STUDENTS))\n    # Calculate average grade for each student\n    grades['Average Grade'] = grades.mean(axis=1, numeric_only=True)\n    return grades", "compilation_passed": true, "time": 0.0019779205322265625, "tests_passed": true, "error": null}
{"code": "# Initialize DataFrame and add columns for each student and their grades\n    grades_df = pd.DataFrame(columns=['Name'])\n    grades_df['Name'] = STUDENTS\n    for course in COURSES:\n        grades_df[course] = [randint(0, 100) for i in range(len(STUDENTS))]\n\n    # Calculate average grade for each student and add it as a new column\n    grades_df['Average Grade'] = grades_df.iloc[:, 1:-1].mean(axis=1)\n\n    return grades_df", "compilation_passed": true, "time": 0.004534006118774414, "tests_passed": true, "error": null}
{"code": "# Generate random grades for each student and course\n    grades = np.random.randint(0, 100, size=(len(STUDENTS), len(COURSES)), dtype=int)\n\n    # Create a DataFrame with columns for each student\n    grades = pd.DataFrame(grades, columns=COURSES)\n\n    # Calculate the average grade for each student\n    grades['Average Grade'] = grades.mean(axis=1)\n\n    # Add student names as index\n    grades['Name'] = STUDENTS\n    grades = grades.set_index('Name')\n\n    return grades", "compilation_passed": true, "time": 0.0016260147094726562, "tests_passed": false, "error": "KeyError"}
{"code": "# Create an empty dictionary to hold the grades data\n    grades_dict = {'Name': STUDENTS}\n\n    # Generate grades for each course and add them to the dictionary\n    for course in COURSES:\n        grades_dict[course] = [randint(0, 100) for i in range(len(STUDENTS))]\n\n    # Calculate the average grade for each student and add it to the dictionary\n    grades_dict['Average Grade'] = [np.average(grades) for grades in zip(*[grades_dict[course] for course in COURSES])]\n\n    # Create a DataFrame from the grades dictionary and return it\n    return pd.DataFrame(grades_dict)", "compilation_passed": true, "time": 0.003777742385864258, "tests_passed": true, "error": null}
{"code": "# Randomly generate grades for each student across courses\n    grades = {}\n    for student in STUDENTS:\n        student_grades = []\n        for course in COURSES:\n            student_grades.append(randint(0,100))\n        grades[student] = student_grades\n\n    # Create DataFrame\n    grades_df = pd.DataFrame(grades, index=COURSES)\n    grades_df['Name'] = STUDENTS\n    grades_df = grades_df.set_index('Name')\n\n    # Add column containing average grade for each student\n    grades_df['Average Grade'] = grades_df.mean(axis=1)\n\n    return grades_df", "compilation_passed": true, "time": 0.001895904541015625, "tests_passed": false, "error": "KeyError"}
{"code": "grades = pd.DataFrame({'Name': STUDENTS})\n    for course in COURSES:\n        grades[course] = np.random.randint(0, 100, len(STUDENTS))\n    grades['Average Grade'] = grades.loc[:, COURSES].mean(axis=1)\n    return grades", "compilation_passed": true, "time": 0.00572514533996582, "tests_passed": true, "error": null}
{"code": "# Generate a DataFrame with one row for each student, with their name and grades for each course\n    grades = pd.DataFrame(\n        {\n            'Name': STUDENTS,\n            **{course: np.random.randint(0, 101, size=len(STUDENTS)) for course in COURSES}\n        }\n    )\n\n    # Calculate the average grade for each student, rounded to 3 decimal places\n    grades['Average Grade'] = grades[COURSES].mean(axis=1).round(3)\n\n    # Return the final DataFrame\n    return grades", "compilation_passed": true, "time": 0.0038542747497558594, "tests_passed": true, "error": null}
{"code": "# Create the DataFrame with empty columns and indexes\n    df = pd.DataFrame(columns=STUDENTS, index=COURSES)\n\n    # Populate the DataFrame with random grades\n    for s in STUDENTS:\n        for c in COURSES:\n            df.at[c, s] = np.random.uniform(0, 100)\n\n    # Calculate and append the average grade for each student\n    for s in STUDENTS:\n        df[s + ' Avg'] = df[s].mean()\n\n    # Sort the DataFrame in ascending order of average grade\n    df.sort_values(by=list(df.columns[-len(STUDENTS):]), inplace=True)\n\n    # Set the name column as the index\n    df.set_index('Name', inplace=True)\n\n    # Return the DataFrame\n    return df", "compilation_passed": true, "time": 0.003248929977416992, "tests_passed": false, "error": "KeyError"}
{"code": "students = STUDENTS\n    courses = COURSES\n\n    # Create the empty DataFrame\n    grades = pd.DataFrame({'Name': students})\n\n    # Add grades for each course\n    for course in courses:\n        grades[course] = np.random.randint(0, 101, len(students))\n\n    # Calculate the average grade for each student\n    grades['Average Grade'] = grades[courses].mean(axis=1)\n\n    return grades", "compilation_passed": true, "time": 0.005753278732299805, "tests_passed": true, "error": null}
{"code": "# Generate the list of students\n    student_list = STUDENTS\n    # Generate the list of courses\n    course_list = COURSES\n\n    # Generate the DataFrame with a column for each student\n    grades = pd.DataFrame(student_list, columns=['Name'])\n\n    # Add a column for each course and fill it with random grades\n    for course in course_list:\n        grades[course] = np.random.randint(low=0, high=101, size=len(student_list))\n\n    # Calculate the average grade for each student\n    grades['Average Grade'] = grades.loc[:, course_list].mean(axis=1)\n\n    return grades", "compilation_passed": true, "time": 0.005723237991333008, "tests_passed": true, "error": null}
{"code": "# Initialize empty DataFrame with columns for student names, courses, and average grade\n    grades_dict = {\n        'Name': pd.Series(name='Name', dtype='string'),\n        **{course: pd.Series(name=course, dtype='float32') for course in COURSES},\n        'Average Grade': pd.Series(name='Average Grade', dtype='float32')\n    }\n    grades = pd.DataFrame(grades_dict)\n\n    # Randomly generate grades for each student in the predefined list of COURSES\n    for name in STUDENTS:\n        course_grades = []\n        for course in COURSES:\n            grade = randint(0, 100)\n            course_grades.append(grade)\n            grades.loc[len(grades)] = [name, *course_grades, np.mean(course_grades)]\n\n    return grades", "compilation_passed": true, "time": 0.0020542144775390625, "tests_passed": false, "error": "ValueError"}
{"code": "# Generate random grades for each course using a uniform distribution\n    grades = pd.DataFrame({\n        student: np.random.randint(0, 100, size=len(COURSES))\n        for student in STUDENTS\n    })\n\n    # Add a column for the student's name\n    grades['Name'] = STUDENTS\n\n    # Add a column for the student's average grade\n    grades['Average Grade'] = grades.mean(axis=1)\n\n    return grades", "compilation_passed": true, "time": 0.0016810894012451172, "tests_passed": false, "error": "TypeError"}
{"code": "# Create the data\n    data = {}\n    data['Name'] = STUDENTS\n    for course in COURSES:\n        data[course] = np.random.randint(0, 101, len(STUDENTS))\n    data['Average Grade'] = np.mean(data.values(), axis=0)\n\n    # Create the DataFrame\n    grades = pd.DataFrame(data)\n\n    return grades", "compilation_passed": true, "time": 0.0011131763458251953, "tests_passed": false, "error": "numpy.exceptions.AxisError"}
{"code": "# Generate random grades for each course using a uniform distribution\n    grades = np.random.uniform(0, 100, (len(STUDENTS), len(COURSES)))\n    # Convert grades to a DataFrame\n    grades = pd.DataFrame(grades, index=STUDENTS, columns=COURSES)\n    # Add a column for the average grade\n    grades['Average Grade'] = grades.mean(axis=1)\n    grades['Name'] = grades.index\n    return grades", "compilation_passed": true, "time": 0.0026099681854248047, "tests_passed": true, "error": null}
