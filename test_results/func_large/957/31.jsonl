{"code": "punctuation = string.punctuation\n    words_list = re.findall(r'\\w+', text)\n    num_words = len(words_list)\n    num_chars = len([c for c in text if c not in punctuation and not c.isspace()])\n    num_unique_chars = len(set(c for c in text if c not in punctuation and not c.isspace()))\n    return num_words, num_chars, num_unique_chars", "compilation_passed": true, "time": 0.0008771419525146484, "tests_passed": true, "error": null}
{"code": "num_words = len(text.split())\n    num_chars = len(re.sub(r'[^\\w\\s]+', '', text))\n    unique_chars = len(set(text.replace(' ', '')))\n    return (num_words, num_chars, unique_chars)", "compilation_passed": true, "time": 0.0007276535034179688, "tests_passed": true, "error": null}
{"code": "word_count = len(text.split())\n\n    char_count = len([char for char in text if char not in string.punctuation + ' '])\n\n    unique_char_count = len(set([char for char in text if char not in string.punctuation + ' ']))\n\n    return word_count, char_count, unique_char_count", "compilation_passed": true, "time": 0.0007641315460205078, "tests_passed": true, "error": null}
{"code": "if not isinstance(text, str):\n        raise TypeError(\"Input must be a string\")\n\n    word_list = text.split()\n    words_count = len(word_list)\n    chars_count = sum(len(word) for word in word_list)\n\n    special_chars = set(string.punctuation)\n    filtered_chars = [char for word in word_list for char in word if char not in special_chars]\n    unique_chars_count = len(set(filtered_chars))\n\n    return (words_count, chars_count, unique_chars_count)", "compilation_passed": true, "time": 0.0007841587066650391, "tests_passed": true, "error": null}
{"code": "words = text.split()\n    characters = re.sub(r'[^\\w]', '', text)\n    unique_characters = set(characters)\n\n    return (len(words), len(characters), len(unique_characters))", "compilation_passed": true, "time": 0.0007240772247314453, "tests_passed": true, "error": null}
{"code": "# Count words by splitting the text into substrings separated by whitespace.\n    words_count = len(text.split())\n\n    # Create a set of characters from the text.\n    # We need this to get the number of unique characters in the text.\n    # We use set comprehension for this.\n    # We exclude whitespace and special characters here.\n    text_unique_characters = {\n        char\n        for char in text\n        if char not in string.whitespace and char not in string.punctuation\n    }\n\n    # Create a string of characters from the original text.\n    # We need this to count the total number of characters in the text.\n    # We use re.sub to remove whitespace and special characters.\n    text_characters_str = re.sub(\n        r\"[^\\w\\s]\",\n        \"\",\n        re.sub(r\"\\s+\", \"\", text)\n    )\n\n    # Count the characters in the string of characters.\n    characters_count = len(text_characters_str)\n\n    # Count the unique characters in the", "compilation_passed": true, "time": 0.0006780624389648438, "tests_passed": true, "error": null}
{"code": "if not isinstance(text, str):\n        raise TypeError(f'Expected str, got {type(text).__name__} instead')\n\n    text = re.sub(r'\\s+', ' ', text.strip())\n    text_lower = text.lower()\n\n    count_words = len(text.split())\n    count_characters = len(text_lower.translate(\n        str.maketrans('', '', string.whitespace + string.punctuation)))\n    count_unique_characters = len(\n        set(text_lower.translate(str.maketrans('', '', string.whitespace + string.punctuation))))\n\n    return count_words, count_characters, count_unique_characters", "compilation_passed": true, "time": 0.000904083251953125, "tests_passed": true, "error": null}
{"code": "text = re.sub(r\"[^\\w\\s]\", \"\", text).split()\n    word_count = len(text)\n\n    text = \"\".join(text)\n    char_count = len(text)\n\n    unique_char_count = len(set(text))\n\n    return word_count, char_count, unique_char_count", "compilation_passed": true, "time": 0.0007119178771972656, "tests_passed": true, "error": null}
{"code": "words = len(re.findall(r'\\S+', text))\n    # \\S+ matches one or more non-whitespace characters\n\n    chars = sum(len(word) for word in re.findall(r'\\w+', text))\n    # \\w+ matches one or more word characters\n\n    unique_chars = len(set(text.replace(\" \", \"\")) - set(string.punctuation))\n\n    return words, chars, unique_chars", "compilation_passed": true, "time": 0.0008060932159423828, "tests_passed": true, "error": null}
{"code": "assert isinstance(text, str), \"The argument must be a string.\"\n\n    text = text.strip(string.punctuation + string.whitespace)\n\n    words = len(re.sub(r\" +\", \" \", text).split(\" \"))\n    chars = len(re.sub(r\"[^a-zA-Z0-9]+\", \"\", text))\n    unique_chars = len(set(re.sub(r\"[^a-zA-Z0-9]+\", \"\", text)))\n\n    return (words, chars, unique_chars)", "compilation_passed": true, "time": 0.0007841587066650391, "tests_passed": true, "error": null}
{"code": "count_words: int = len(text.split())\n    count_char: int = len(re.findall(rf'[^{string.punctuation}\\s]', text))\n    count_unique_char: int = len(set(re.findall(rf'[^{string.punctuation}\\s]', text)))\n    return (count_words, count_char, count_unique_char)", "compilation_passed": true, "time": 0.0007867813110351562, "tests_passed": true, "error": null}
{"code": "if isinstance(text, str):\n        text = text.strip()\n        words = len(re.findall(r\"\\b\\w+\\b\", text))\n        chars = len(re.sub(r\"\\W+\", \"\", text))\n        unique_chars = len(set(text.lower()) - set(string.punctuation + \" \"))\n        return words, chars, unique_chars\n    else:\n        raise TypeError(\"Input value must be a string\")", "compilation_passed": true, "time": 0.0007410049438476562, "tests_passed": true, "error": null}
{"code": "word_list = re.findall(r'\\b\\w+\\b', text.lower())\n    char_list = list(filter(lambda c: c not in string.punctuation, text.lower()))\n\n    return len(word_list), len(char_list), len(set(char_list))", "compilation_passed": true, "time": 0.0007348060607910156, "tests_passed": true, "error": null}
{"code": "words = text.split()\n    chars = [c for c in text if c not in string.punctuation and c not in string.whitespace]\n    unique_chars = set(chars)\n    return len(words), len(chars), len(unique_chars)", "compilation_passed": true, "time": 0.0006568431854248047, "tests_passed": true, "error": null}
{"code": "# Count words\n    words = text.split()\n    num_words = len(words)\n\n    # Count characters\n    words_joined = ' '.join(words)\n    regex_pattern = fr\"[^{string.punctuation}\\s]+\"\n    chars = re.findall(regex_pattern, words_joined)\n    num_chars = len(''.join(chars))\n\n    # Count unique characters\n    unique_chars = set(chars)\n    num_unique_chars = len(unique_chars)\n\n    return num_words, num_chars, num_unique_chars", "compilation_passed": true, "time": 0.0007901191711425781, "tests_passed": true, "error": null}
{"code": "text = text.strip()\n    words_counter = len(re.findall(r'\\S+', text))\n\n    # exclude punctuation characters from characters_counter\n    characters_counter = len(re.sub(r'\\W+', '', text))\n\n    # exclude whitespace and punctuation characters from unique_characters_counter\n    unique_characters_counter = len(set(re.sub(r'\\W+', '', text)))\n    return words_counter, characters_counter, unique_characters_counter", "compilation_passed": true, "time": 0.0006821155548095703, "tests_passed": true, "error": null}
{"code": "assert isinstance(text, str)\n    # Remove all whitespace from the text\n    text = text.strip()\n    # Define regular expression pattern for words\n    word_pattern = r'\\w+'\n    # Define regular expression pattern for characters\n    char_pattern = r'[^\\s\\W]+'\n    # Count the number of words using regular expression\n    word_count = len(re.findall(word_pattern, text))\n    # Count the number of characters using regular expression\n    char_count = len(re.findall(char_pattern, text))\n    # Count the number of unique characters using string.punctuation\n    unique_char_count = len(set(text) - set(string.punctuation))\n    # Return the count as a tuple\n    return word_count, char_count, unique_char_count", "compilation_passed": true, "time": 0.0007688999176025391, "tests_passed": true, "error": null}
{"code": "word_count = len(re.split('\\s+', text))\n    char_count = len(string.ascii_letters + string.digits)\n    unique_char_count = len(set(char for char in text\n                                if char in string.ascii_letters + string.digits))\n\n    return (word_count, char_count, unique_char_count)", "compilation_passed": true, "time": 0.0006902217864990234, "tests_passed": true, "error": null}
{"code": "text_no_special_chars = re.sub(r'[^\\w\\s]', '', text)\n    word_count = len(text_no_special_chars.split())\n    char_count = len([char for char in text_no_special_chars\n                     if char not in string.whitespace and char not in string.punctuation])\n    unique_char_count = len(set(text_no_special_chars.lower()))\n    return word_count, char_count, unique_char_count", "compilation_passed": true, "time": 0.0009372234344482422, "tests_passed": true, "error": null}
{"code": "words = re.findall(r'\\b\\w+\\b', text)\n    word_count = len(words)\n\n    characters = [c for c in text if c not in string.punctuation + string.whitespace]\n    char_count = len(characters)\n\n    unique_characters = len(set(characters))\n    return word_count, char_count, unique_characters", "compilation_passed": true, "time": 0.0007381439208984375, "tests_passed": true, "error": null}
{"code": "words_count = len(re.findall(r'\\S+', text))\n\n    characters_count = len(re.sub(r'\\W+', '', text))\n\n    unique_characters_count = len(set(text.replace(' ', '')))\n\n    return (words_count, characters_count, unique_characters_count)", "compilation_passed": true, "time": 0.0007307529449462891, "tests_passed": true, "error": null}
{"code": "# Remove all special characters and whitespaces\n    pattern = re.compile(r'[^\\s\\w]')\n    cleaned_text = pattern.sub('', text)\n\n    # Split the text into words by whitespace\n    words = cleaned_text.split()\n\n    # Count the number of words\n    num_words = len(words)\n\n    # Count the number of characters\n    num_chars = len(''.join(words))\n\n    # Count the number of unique characters\n    unique_chars = len(''.join(set(cleaned_text)))\n\n    return (num_words, num_chars, unique_chars)", "compilation_passed": true, "time": 0.0007011890411376953, "tests_passed": true, "error": null}
{"code": "# Remove any punctuation characters from the text\n    clean_text = re.sub(f'[{string.punctuation}]', '', text)\n\n    # Count the number of words\n    words = len(text.split())\n\n    # Count the number of characters\n    chars = len([c for c in clean_text if c not in string.whitespace])\n\n    # Count the number of unique characters\n    unique_chars = len(set(clean_text) - set(string.whitespace))\n\n    return (words, chars, unique_chars)", "compilation_passed": true, "time": 0.0007574558258056641, "tests_passed": true, "error": null}
{"code": "# remove whitespace and special characters from the text\n    words = re.sub(r'\\s|[' + string.punctuation + ']', '', text).split()\n    unique_characters = set(words)\n\n    return len(words), len(text), len(unique_characters)", "compilation_passed": true, "time": 0.0006961822509765625, "tests_passed": true, "error": null}
{"code": "words_counter = len(text.split())\n    # punctuation = string.punctuation\n    # chars_counter = len([char for char in text if char not in punctuation])\n    chars_counter = len([char for char in text if char.isalpha()])\n    uniq_chars_counter = len(set(text))\n    return words_counter, chars_counter, uniq_chars_counter", "compilation_passed": true, "time": 0.0007171630859375, "tests_passed": true, "error": null}
{"code": "if not isinstance(text, str):\n        raise ValueError('Invalid input. Expected a string.')\n\n    words = string.punctuation\n\n    words = text.split()\n    characters = re.sub(r'[^A-Za-z\u0410-\u042f\u0430-\u044f\\ ]', '', text).replace(' ', '')\n    unique_characters = ''.join(set(re.sub(r'\\s+', '', characters)))\n\n    return len(words), len(characters), len(unique_characters)", "compilation_passed": true, "time": 0.0009560585021972656, "tests_passed": true, "error": null}
{"code": "# Removes punctuation symbols from the text using regular expressions\n    text_without_punctuation = re.sub(r'[^\\w\\s]', '', text)\n\n    # Counts the number of words in the text using string.punctuation as separators\n    number_of_words = len([word for word in string.split(text, string.punctuation) if word != ''])\n\n    # Counts the number of characters in the text excluding whitespace\n    number_of_characters = len(text_without_punctuation.replace(' ', ''))\n\n    # Counts the number of unique characters in the text excluding whitespace\n    number_of_unique_characters = len(set(text_without_punctuation.replace(' ', '')))\n\n    return number_of_words, number_of_characters, number_of_unique_characters", "compilation_passed": true, "time": 0.0007181167602539062, "tests_passed": false, "error": "AttributeError"}
{"code": "words = text.split()\n\n    words_num = len(words)\n    char_num = len(re.sub(r\"[^\\w]\", \"\", text))\n\n    unique_char = len(string.ascii_letters + string.digits)\n\n    return words_num, char_num, unique_char", "compilation_passed": true, "time": 0.0006649494171142578, "tests_passed": true, "error": null}
{"code": "# Remove whitespaces and special characters from text\n    text = text.translate(str.maketrans(\"\", \"\", string.whitespace + string.punctuation))\n    # Convert text to lowercase\n    text = text.lower()\n\n    # Count words using regular expressions\n    word_count = len(re.findall(r'\\b\\w+\\b', text))\n    # Count characters (excluding whitespace and special characters)\n    char_count = len([ch for ch in text if ch.isalpha()])\n    # Count unique characters\n    unique_char_count = len(set(text))\n    # Return the counts as a tuple\n    return (word_count, char_count, unique_char_count)", "compilation_passed": true, "time": 0.0007510185241699219, "tests_passed": true, "error": null}
{"code": "word_count = len(re.findall(r'\\S+', text))\n\n    # Using string.punctuation to exclude special characters\n    char_count = sum(len(re.sub(f'[{string.punctuation} \\s]', '', x))\n                     for x in re.split(r'\\W+', text) if x != '')\n\n    unique_char_count = len(set(re.sub(r'\\W+', '', text)))\n\n    return (word_count, char_count, unique_char_count)", "compilation_passed": true, "time": 0.0007779598236083984, "tests_passed": true, "error": null}
