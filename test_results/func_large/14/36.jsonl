{"code": "# Check if the configuration file exists\n    if not os.path.exists(config_file_path):\n        raise FileNotFoundError(\"Configuration file does not exist\")\n\n    # Read the configuration file\n    config = configparser.ConfigParser()\n    config.read(config_file_path)\n\n    # Check if the project directory exists\n    project_dir = config.get('Project', 'directory')\n    if not os.path.exists(project_dir):\n        raise FileNotFoundError(\"Project directory does not exist\")\n\n    # Create the ZIP archive\n    project_dir_name = os.path.basename(project_dir)\n    archive_file_path = os.path.join(archive_dir, project_dir_name + '.zip')\n    shutil.make_archive(archive_file_path, 'zip', project_dir)\n\n    # Check if the archive was created successfully\n    if os.path.exists(archive_file_path + '.zip'):\n        return True\n    else:\n        raise Exception(\"Failed to create ZIP archive\")", "compilation_passed": true, "time": 0.002588987350463867, "tests_passed": false, "error": "NameError"}
{"code": "parser = configparser.ConfigParser()\n    parser.read(config_file_path)\n\n    if \"Project\" not in parser:\n        raise Exception(\"Missing required section 'Project' in the config file\")\n\n    directory = parser.get(\"Project\", \"directory\", fallback=None)\n    if not directory:\n        raise Exception(\"Missing 'directory' value in the 'Project' section in the config file\")\n\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Specified project directory '{directory}' does not exist\")\n\n    # Archive directory\n    if not os.path.isdir(archive_dir):\n        os.makedirs(archive_dir, exist_ok=True)\n\n    basename = os.path.basename(directory)\n    zip_filename = f\"{basename}.zip\"\n    zip_file_path = os.path.join(archive_dir, zip_filename)\n\n    # Archive directory\n    shutil.make_archive(zip_filename, \"zip\", directory, archive_dir=", "compilation_passed": false, "time": 0.000247955322265625, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Check if config file exists\n    if not os.path.exists(config_file_path):\n        raise FileNotFoundError(f\"Config file does not exist: {config_file_path}\")\n\n    # Parse the config file\n    config = configparser.ConfigParser()\n    config.read(config_file_path)\n\n    # Check if section exists and contains the directory option\n    if not \"Project\" in config or not \"directory\" in config[\"Project\"]:\n        raise Exception(f\"Invalid config file format: {config_file_path}\")\n\n    # Get the project directory\n    project_dir = config[\"Project\"][\"directory\"]\n\n    # Check if project directory exists\n    if not os.path.exists(project_dir):\n        raise FileNotFoundError(f\"Project directory does not exist: {project_dir}\")\n\n    # Get the project directory's base name\n    project_dir_name = os.path.basename(os.path.normpath(project_dir))\n\n    # Generate the name of the ZIP archive based on the project directory's basename", "compilation_passed": true, "time": 0.02495288848876953, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(config_file_path):\n        raise FileNotFoundError(f\"Configuration file {config_file_path} does not exist.\")\n\n    config = configparser.ConfigParser()\n    config.read(config_file_path)\n    project_dir = config.get(\"Project\", \"directory\")\n\n    if not os.path.exists(project_dir):\n        raise FileNotFoundError(f\"Project directory {project_dir} does not exist.\")\n\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n\n    project_dir_basename = os.path.basename(os.path.normpath(project_dir))\n    zip_file_path = os.path.join(archive_dir, f\"{project_dir_basename}.zip\")\n    #shutil.make_archive(project_dir_basename, 'zip', project_dir)\n    shutil.make_archive(zip_file_path, 'zip', project_dir)\n    if os.", "compilation_passed": false, "time": 0.00032210350036621094, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Read configuration file and retrieve the project directory\n    config = configparser.ConfigParser()\n    config.read(config_file_path)\n    project_dir = config.get(\"Project\", \"directory\")\n    if not os.path.isdir(project_dir):\n        raise FileNotFoundError(\"Project directory does not exist\")\n\n    # Construct ZIP archive file path and archive project directory\n    zip_file_path = os.path.join(archive_dir, os.path.basename(project_dir) + \".zip\")\n    try:\n        shutil.make_archive(zip_file_path, \"zip\", project_dir)\n        return True\n    except Exception as e:\n        raise Exception(\"Failed to archive project directory\") from e", "compilation_passed": true, "time": 0.0022950172424316406, "tests_passed": false, "error": "NameError"}
{"code": "if not os.path.exists(config_file_path):\n        raise FileNotFoundError(f\"The config file '{config_file_path}' does not exist.\")\n\n    config = configparser.ConfigParser()\n    config.read(config_file_path)\n\n    if 'Project' not in config or 'directory' not in config['Project']:\n        raise Exception(\"Invalid config file format. Missing 'Project' section or 'directory' option.\")\n\n    project_dir = config['Project']['directory']\n\n    if not os.path.exists(project_dir):\n        raise FileNotFoundError(f\"The project directory '{project_dir}' does not exist.\")\n\n    project_basename = os.path.basename(project_dir)\n\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n\n    zip_file = os.path.join(archive_dir, f\"{project_basename}.zip\")\n\n    try:\n        shutil.make_archive(zip_file, 'zip'", "compilation_passed": false, "time": 0.00023508071899414062, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not os.path.exists(config_file_path):\n        raise FileNotFoundError(f\"{config_file_path} does not exist.\")\n\n    config = configparser.ConfigParser()\n    config.read(config_file_path)\n    project_directory = config.get('Project', 'directory')\n\n    if not os.path.exists(project_directory):\n        raise FileNotFoundError(f\"Project directory {project_directory} does not exist.\")\n\n    basename = os.path.basename(project_directory)\n    zip_path = os.path.join(archive_dir, basename) + \".zip\"\n\n    try:\n        shutil.make_archive(zip_path, 'zip', project_directory)\n    except Exception as e:\n        raise Exception(f\"Failed to create ZIP archive: {e}\")\n\n    return True", "compilation_passed": true, "time": 0.0018181800842285156, "tests_passed": false, "error": "NameError"}
{"code": "# Check if the configuration file exists\n    if not os.path.exists(config_file_path):\n        raise FileNotFoundError(\"Configuration file not found.\")\n\n    # Parse the configuration file\n    config = configparser.ConfigParser()\n    config.read(config_file_path)\n\n    # Check if the configuration section exists\n    if 'Project' not in config:\n        raise Exception(\"Missing configuration section.\")\n\n    # Get the project directory from the configuration file\n    directory = config.get('Project', 'directory')\n\n    # Check if the project directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Project directory not found.\")\n\n    # Get the basename of the project directory\n    base_name = os.path.basename(directory)\n\n    # Construct the archive file path\n    archive_file = os.path.join(archive_dir, base_name + \".zip\")\n\n    # Create the archive directory if it doesn't exist\n    if not os.path.exists(archive_dir):\n        os.", "compilation_passed": false, "time": 0.00018405914306640625, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Read the config file using configparse\n    config = configparser.ConfigParser()\n    config.read(config_file_path)\n\n    # Get the project directory from the config file\n    project_dir = config['Project']['directory']\n\n    # Check if the project directory exists\n    if not os.path.exists(project_dir):\n        raise FileNotFoundError(\"Project directory does not exist: {}\".format(project_dir))\n\n    # Create the ZIP file name\n    zip_filename = os.path.join(archive_dir, os.path.basename(project_dir) + '.zip')\n\n    # Check if the ZIP file already exists and remove it\n    if os.path.exists(zip_filename):\n        os.remove(zip_filename)\n\n    # Archive the project directory into the ZIP file\n    try:\n        shutil.make_archive(project_dir, 'zip', project_dir)\n        shutil.move(zip_filename, archive_dir)\n        print(f\"Archive created at {zip_filename}\")\n        return True\n    except", "compilation_passed": false, "time": 0.00018405914306640625, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not os.path.exists(config_file_path):\n        raise FileNotFoundError(f\"The specified configuration file does not exist: {config_file_path}\")\n    config = configparser.ConfigParser()\n    config.read(config_file_path)\n    project_dir = config.get('Project', 'directory')\n    if not os.path.exists(project_dir):\n        raise FileNotFoundError(f\"The specified project directory does not exist: {project_dir}\")\n    shutil.make_archive(os.path.join(archive_dir, os.path.basename(project_dir)), 'zip', project_dir)\n    return True", "compilation_passed": true, "time": 0.0017459392547607422, "tests_passed": false, "error": "NameError"}
{"code": "config = configparser.ConfigParser()\n    config.read(config_file_path)\n    project_dir = config.get('Project', 'directory')\n\n    if not os.path.exists(project_dir):\n        raise FileNotFoundError(\"Project directory does not exist.\")\n\n    project_dir_basename = os.path.basename(os.path.normpath(project_dir))\n    archive_path = os.path.join(archive_dir, project_dir_basename + \".zip\")\n\n    try:\n        shutil.make_archive(archive_path, 'zip', project_dir)\n        print(f'ZIP archive created: {archive_path}')\n        return True\n\n    except Exception as e:\n        raise Exception(f\"Failed to create ZIP archive: {str(e)}\")", "compilation_passed": true, "time": 0.0018079280853271484, "tests_passed": false, "error": "NameError"}
{"code": "config = configparser.ConfigParser()\n    config.read(config_file_path)\n\n    if config.has_option('Project', 'directory'):\n        project_directory = config.get('Project', 'directory')\n    else:\n        raise FileNotFoundError(f\"{config_file_path} does not contain the Project directory\")\n\n    if os.path.exists(project_directory):\n        project_directory_basename = os.path.basename(project_directory.rstrip('/'))\n        zip_file_path = os.path.join(archive_dir, f\"{project_directory_basename}.zip\")\n        shutil.make_archive(zip_file_path, 'zip', project_directory)\n        if os.path.exists(zip_file_path):\n            return True\n        else:\n            raise Exception(f\"Failed to create the ZIP archive at {zip_file_path}\")\n    else:\n        raise FileNotFoundError(f\"{project_directory} does not exist\")", "compilation_passed": true, "time": 0.0017399787902832031, "tests_passed": false, "error": "NameError"}
{"code": "config = configparser.ConfigParser()\n    config.read(config_file_path)\n    project_dir = config.get(\"Project\", \"directory\")\n    if not os.path.exists(project_dir):\n        raise FileNotFoundError(\"The specified project directory does not exist.\")\n    project_dir_basename = os.path.basename(project_dir.rstrip(os.sep))\n    archive_path = os.path.join(archive_dir, project_dir_basename)\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    if os.path.exists(archive_path):\n        os.remove(archive_path)\n    shutil.make_archive(archive_path, \"zip\", project_dir)\n    return True", "compilation_passed": true, "time": 0.0017137527465820312, "tests_passed": false, "error": "NameError"}
{"code": "if not os.path.exists(config_file_path):\n        raise FileNotFoundError(f\"Configuration file not found: {config_file_path}\")\n\n    parser = configparser.ConfigParser()\n    parser.read(config_file_path)\n\n    project_dir = parser.get(\"Project\", \"directory\")\n    if not os.path.exists(project_dir):\n        raise FileNotFoundError(f\"Project directory not found: {project_dir}\")\n\n    project_name = os.path.basename(project_dir)\n    zip_file_path = os.path.join(archive_dir, project_name + \".zip\")\n\n    try:\n        shutil.make_archive(zip_file_path, \"zip\", project_dir)\n    except Exception as e:\n        raise Exception(f\"Failed to create ZIP archive: {str(e)}\")\n\n    return True", "compilation_passed": true, "time": 0.0017490386962890625, "tests_passed": false, "error": "NameError"}
{"code": "# Load the config file\n    config = configparser.ConfigParser()\n    config.read(config_file_path)\n\n    # Extract the project directory from the config\n    project_dir = config['Project']['directory']\n    if not os.path.isdir(project_dir):\n        raise FileNotFoundError(\"Project directory not found: {}\".format(project_dir))\n\n    # Check if the archive directory exists. Create it if not.\n    if not os.path.isdir(archive_dir):\n        os.makedirs(archive_dir)\n\n    # Construct the destination path for the ZIP archive\n    archive_path = os.path.join(archive_dir, os.path.basename(project_dir) + \".zip\")\n\n    # Create the ZIP archive\n    try:\n        shutil.make_archive(base_name=archive_path, format='zip', root_dir=project_dir)\n        return True\n    except Exception as e:\n        raise Exception(\"Failed to create ZIP archive: {}\".format(str(e)))", "compilation_passed": true, "time": 0.0017671585083007812, "tests_passed": false, "error": "NameError"}
{"code": "if not os.path.exists(config_file_path):\n        raise FileNotFoundError(f\"Configuration file does not exist at: {config_file_path}\")\n\n    config = configparser.ConfigParser()\n    config.read(config_file_path)\n\n    if 'Project' not in config or 'directory' not in config['Project']:\n        raise Exception(f\"Invalid configuration file at: {config_file_path}\")\n\n    project_dir = config['Project']['directory']\n    if not os.path.exists(project_dir):\n        raise FileNotFoundError(f\"Project directory does not exist: {project_dir}\")\n\n    # Create the archive directory if it doesn't exist\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n\n    # Archive the project directory\n    zip_path = os.path.join(archive_dir, f\"{os.path.basename(project_dir)}.zip\")\n    shutil.make_archive(zip_path[:-4], \"zip\", project_dir", "compilation_passed": false, "time": 0.00023293495178222656, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Check if the config file exists\n    if not os.path.exists(config_file_path):\n        raise FileNotFoundError(f\"The config file does not exist at path '{config_file_path}'\")\n\n    # Read the configuration file using configparse\n    config = configparser.ConfigParser()\n    config.read(config_file_path)\n\n    # Get the project directory from the configuration file\n    project_directory = config.get(\"Project\", \"directory\")\n\n    # Check if the project directory exists\n    if not os.path.exists(project_directory):\n        raise FileNotFoundError(f\"The specified project directory does not exist at path '{project_directory}'\")\n\n    # Construct the ZIP file path\n    zip_file_path = os.path.join(archive_dir, os.path.basename(project_directory) + \".zip\")\n\n    # Create the ZIP archive using shutil\n    try:\n        shutil.make_archive(os.path.splitext(zip_file_path)[0], 'zip', project_", "compilation_passed": false, "time": 0.0001862049102783203, "tests_passed": false, "error": "SyntaxError"}
{"code": "try:\n        # Check if the configuration file exists\n        if not os.path.exists(config_file_path):\n            raise FileNotFoundError(f\"Configuration file {config_file_path} does not exist.\")\n\n        # Read the configuration file\n        config = configparser.ConfigParser()\n        config.read(config_file_path)\n\n        # Extract the project directory path from the configuration file\n        project_dir = config.get(\"Project\", \"directory\")\n\n        # Check if the project directory exists\n        if not os.path.exists(project_dir):\n            raise FileNotFoundError(f\"Project directory {project_dir} does not exist.\")\n\n        # Create the ZIP archive\n        archive_path = os.path.join(archive_dir, os.path.basename(project_dir) + \".zip\")\n        shutil.make_archive(archive_path, \"zip\", project_dir)\n\n        return True\n\n    except Exception as e:\n        raise Exception(f\"Error archiving project directory: {str(e)}\")<|", "compilation_passed": false, "time": 0.00020074844360351562, "tests_passed": false, "error": "SyntaxError"}
{"code": "# read the configuration file\n    config = configparser.ConfigParser()\n    config.read(config_file_path)\n    # read the configuration values\n    project_dir = config.get(\"Project\", \"directory\")\n    project_name = os.path.basename(project_dir)\n    project_archive = f\"{project_name}.zip\"\n    project_archive_path = os.path.join(archive_dir, project_archive)\n    # check if the project directory exists\n    if not os.path.exists(project_dir):\n        raise FileNotFoundError(f\"Project directory not found at {project_dir}\")\n    # check if the archive directory exists and create it if it doesn't\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    # archive the project directory into a ZIP file\n    shutil.make_archive(project_archive_path, \"zip\", project_dir)\n    # return True if the ZIP archive is created successfully\n    return os.path.exists(project_archive_path)<", "compilation_passed": false, "time": 0.0001838207244873047, "tests_passed": false, "error": "SyntaxError"}
{"code": "parser = configparser.ConfigParser()\n    parser.read(config_file_path)\n    project_directory = parser['Project']['directory']\n    project_basename = os.path.basename(project_directory)\n    archive_path = os.path.join(archive_dir, project_basename + \".zip\")\n    try:\n        shutil.make_archive(archive_path, 'zip', project_directory)\n    except Exception as e:\n        raise Exception(\"Failed to create ZIP archive: \" + str(e))\n    return True", "compilation_passed": true, "time": 0.0016770362854003906, "tests_passed": false, "error": "NameError"}
{"code": "config = configparser.ConfigParser()\n    config.read(config_file_path)\n    project_dir = config.get(\"Project\", \"directory\")\n\n    if os.path.exists(project_dir):\n        zip_path = os.path.join(archive_dir, f\"{os.path.basename(project_dir)}.zip\")\n        try:\n            with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zip_file:\n                for root, _, files in os.walk(project_dir):\n                    for file in files:\n                        file_path = os.path.join(root, file)\n                        rel_path = os.path.relpath(file_path, project_dir)\n                        zip_file.write(file_path, arcname=rel_path)\n            return True\n        except Exception as e:\n            raise e\n    else:\n        raise FileNotFoundError(f\"Specified project directory '{project_dir}' does not exist.\")", "compilation_passed": true, "time": 0.00201416015625, "tests_passed": false, "error": "NameError"}
{"code": "# Check if the file exists\n    if not os.path.exists(config_file_path):\n        raise FileNotFoundError(\"Config file does not exist\")\n\n    # Read the configuration file\n    config = configparser.ConfigParser()\n    config.read(config_file_path)\n\n    # Check if the [Project] section exists\n    if not config.has_section('Project'):\n        raise Exception(\"Invalid config file: [Project] section not found\")\n\n    # Get the project directory from the config\n    project_dir = config.get('Project', 'directory')\n\n    # Check if the project directory exists\n    if not os.path.exists(project_dir):\n        raise FileNotFoundError(\"Project directory does not exist\")\n\n    # Check if the archive directory exists, create it if not\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n\n    # Generate the output zip file path\n    project_basename = os.path.basename(os.path.normpath(project_dir))\n    zip_", "compilation_passed": true, "time": 0.0017027854919433594, "tests_passed": false, "error": "NameError"}
{"code": "if os.path.exists(config_file_path):\n\n        config = configparser.ConfigParser()\n        config.read(config_file_path)\n\n        project_directory = config.get('Project', 'directory')\n        if os.path.exists(project_directory):\n            basename = os.path.basename(project_directory)\n            zip_path = os.path.join(archive_dir, basename + '.zip')\n            with zipfile.ZipFile(zip_path, 'w') as zip_file:\n                for root, dirs, files in os.walk(project_directory):\n                    for file in files:\n                        zip_file.write(os.path.join(root, file))\n            return True\n        else:\n            raise FileNotFoundError('Project directory not found at ' + project_directory)\n    else:\n        raise FileNotFoundError('Config file not found at ' + config_file_path)", "compilation_passed": true, "time": 0.0017240047454833984, "tests_passed": false, "error": "NameError"}
{"code": "# Check if the file exists\n    if os.path.isfile(config_file_path):\n        # Create ConfigParser object\n        config = configparser.ConfigParser()\n        # Read the file\n        config.read(config_file_path)\n        # Check if the section 'Project' exists\n        if config.has_section('Project'):\n            # Check if the option 'directory' exists\n            if config.has_option('Project', 'directory'):\n                # Get the value of the option\n                project_directory = config.get('Project', 'directory')\n                # Check if the project directory exists\n                if os.path.isdir(project_directory):\n                    # Generate the name of the ZIP file using the project directory name\n                    zip_filename = project_directory.rsplit('/', 1)[-1] + '.zip'\n                    # Generate the full path to the ZIP file\n                    zip_path = os.path.join(archive_dir, zip_filename)\n                    # Use the shutil module to create a ZIP archive of the project directory\n                    sh", "compilation_passed": true, "time": 0.001981973648071289, "tests_passed": false, "error": "NameError"}
{"code": "if not os.path.isfile(config_file_path):\n        raise FileNotFoundError(f\"File not found: {config_file_path}\")\n\n    config = configparser.ConfigParser()\n    config.read(config_file_path)\n\n    project_dir = config.get(\"Project\", \"directory\")\n\n    if not os.path.isdir(project_dir):\n        raise FileNotFoundError(f\"Directory not found: {project_dir}\")\n\n    project_dir_basename = os.path.basename(project_dir)\n    zip_path = os.path.join(archive_dir, project_dir_basename + \".zip\")\n\n    try:\n        shutil.make_archive(zip_path, \"zip\", project_dir)\n        return True\n    except Exception as e:\n        raise Exception(f\"An error occurred while creating the ZIP archive: {str(e)}\")", "compilation_passed": true, "time": 0.0018112659454345703, "tests_passed": false, "error": "NameError"}
{"code": "# Read the configuration file and extract the project directory\n    config = configparser.ConfigParser()\n    config.read(config_file_path)\n    project_dir = config.get(\"Project\", \"directory\")\n\n    # Ensure that the project directory exists\n    if not os.path.exists(project_dir):\n        raise FileNotFoundError(\"Project directory does not exist\")\n\n    # Create the archive directory if it does not exist\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n\n    # Construct the output file path\n    zip_filename = os.path.basename(project_dir) + \".zip\"\n    zip_file_path = os.path.join(archive_dir, zip_filename)\n\n    # Create a ZIP archive\n    try:\n        shutil.make_archive(zip_file_path.rsplit('.', 1)[0], 'zip', root_dir=project_dir)\n    except Exception as e:\n        raise Exception(f\"An error occurred while creating the ZIP archive", "compilation_passed": false, "time": 9.322166442871094e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Check if config file exists\n    if not os.path.exists(config_file_path):\n        raise FileNotFoundError(\"Config file not found\")\n\n    # Parse the config file\n    config = configparser.ConfigParser()\n    config.read(config_file_path)\n\n    # Get the project directory from the config file\n    project_dir = config.get(\"Project\", \"directory\")\n\n    # Check if project directory exists\n    if not os.path.exists(project_dir):\n        raise FileNotFoundError(\"Project directory not found\")\n\n    # Create the ZIP archive\n    try:\n        # Get the project directory's basename\n        project_name = os.path.basename(os.path.normpath(project_dir))\n\n        # Construct the ZIP file name\n        zip_filename = project_name + \".zip\"\n\n        # Create the ZIP archive\n        shutil.make_archive(os.path.join(archive_dir, project_name), 'zip', project_dir)\n    except Exception as e:\n        raise", "compilation_passed": true, "time": 0.0017199516296386719, "tests_passed": false, "error": "NameError"}
{"code": "if not os.path.isfile(config_file_path):\n        raise FileNotFoundError(\"Configuration file not found at: {}\".format(config_file_path))\n\n    config = configparser.ConfigParser()\n    config.read(config_file_path)\n\n    project_dir = config.get(\"Project\", \"directory\")\n\n    if not os.path.isdir(project_dir):\n        raise FileNotFoundError(\"Project directory not found at: {}\".format(project_dir))\n\n    project_name = os.path.basename(project_dir)\n    zip_path = os.path.join(archive_dir, project_name + \".zip\")\n    zip_dir = os.path.dirname(zip_path)\n    if not os.path.exists(zip_dir):\n        os.makedirs(zip_dir)\n\n    try:\n        shutil.make_archive(zip_path, \"zip\", project_dir)\n    except Exception as e:\n        raise Exception(\"Error creating archive: {}\".format(e))", "compilation_passed": true, "time": 0.0017709732055664062, "tests_passed": false, "error": "NameError"}
{"code": "try:\n        # Check if the configuration file exists\n        if not os.path.exists(config_file_path):\n            raise FileNotFoundError(f\"Configuration file '{config_file_path}' does not exist.\")\n\n        # Read configuration file\n        config = configparser.ConfigParser()\n        config.read(config_file_path)\n\n        # Extract project directory from configuration\n        project_dir = config.get('Project', 'directory')\n        if not project_dir:\n            raise Exception(\"Project directory is not specified in the configuration file.\")\n\n        # Create the ZIP archive\n        zip_file_name = os.path.basename(project_dir) + '.zip'\n        zip_file_path = os.path.join(archive_dir, zip_file_name)\n        shutil.make_archive(zip_file_path, 'zip', project_dir)\n\n        return True\n\n    except FileNotFoundError as file_error:\n        raise file_error\n\n    except Exception as e:\n        raise Exception(f\"Failed to create the Z", "compilation_passed": false, "time": 9.679794311523438e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Initialize the config object and read the config file\n    config = configparser.ConfigParser()\n    config.read(config_file_path)\n\n    # Retrieve the project directory from the config file\n    project_directory = config['Project']['directory']\n\n    # Check if project directory exists\n    if not os.path.exists(project_directory):\n        raise FileNotFoundError(f\"Project directory '{project_directory}' does not exist.\")\n\n    # Check if archive directory exists, create if it doesn't\n    os.makedirs(archive_dir, exist_ok=True)\n\n    # Define the path for the ZIP file\n    zip_file_path = os.path.join(archive_dir, os.path.basename(project_directory) + \".zip\")\n\n    # Create the ZIP archive\n    try:\n        shutil.make_archive(os.path.splitext(zip_file_path)[0], \"zip\", project_directory)\n        return True\n    except Exception as e:\n        raise Exception(f\"Error creating ZIP archive: {", "compilation_passed": false, "time": 8.606910705566406e-05, "tests_passed": false, "error": "SyntaxError"}
