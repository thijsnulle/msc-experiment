{"code": "if not os.path.exists(directory):\n        raise ValueError(f'The specified directory {directory} does not exist!')\n\n    file_info = {}\n    for file_name in os.listdir(directory):\n        file_path = os.path.join(directory, file_name)\n        if os.path.isfile(file_path):\n            ascii_file_name = unicodedata.normalize('NFKD', file_name).encode('ascii', 'ignore').decode('ascii')\n\n            md5_hash = md5()\n            with open(file_path, 'rb') as file:\n                md5_hash.update(file.read())\n\n            file_info[ascii_file_name] = {\n                'Size': os.path.getsize(file_path),\n                'MD5 Hash': md5_hash.hexdigest()\n            }\n\n    return file_info", "compilation_passed": true, "time": 0.0024259090423583984, "tests_passed": true, "error": null}
{"code": "info = {}\n    for root, dirs, files in os.walk(directory):\n        for fname in files:\n            full_path = os.path.join(root, fname)\n            normalized_name = unicodedata.normalize('NFD', fname)\n            info[normalized_name] = {\n                'Size': os.stat(full_path).st_size,\n                'MD5 Hash': md5(pathlib.Path(full_path).read_bytes()).hexdigest(),\n            }\n    return info", "compilation_passed": true, "time": 0.0011010169982910156, "tests_passed": false, "error": "KeyError"}
{"code": "def _get_path_info(file_path):\n        return {\n            'Size': file_path.stat().st_size,\n            'MD5 Hash': md5(file_path.read_bytes()).hexdigest()\n        }\n\n    def _get_normalized_name(name):\n        # Remove whitespace from start and end of filename\n        name = name.strip()\n\n        # Remove non-ASCII characters\n        name = unicodedata.normalize('NFD', name).encode('ascii', 'ignore').decode()\n\n        # Convert to lowercase\n        name = name.lower()\n\n        return name\n\n    path = pathlib.Path(directory)\n    normalized_name_map = {\n        _get_normalized_name(file.name): str(file)\n        for file in path.iterdir()\n    }\n\n    return {\n        name: _get_path_info(pathlib.Path(path_name))\n        for name, path_name in normalized_name_map.items()\n    }", "compilation_passed": true, "time": 0.002733945846557617, "tests_passed": true, "error": null}
{"code": "info = {}\n    for filename in os.listdir(directory):\n        file_path = os.path.join(directory, filename)\n        if os.path.isfile(file_path):\n            with open(file_path, 'rb') as file:\n                file_data = file.read()\n                md5_hash = md5(file_data).hexdigest()\n\n            normalized_name = unicodedata.normalize('NFKC', filename)\n            info[normalized_name] = {\n                'Size': os.path.getsize(file_path),\n                'MD5 Hash': md5_hash\n            }\n    return info", "compilation_passed": true, "time": 0.001127004623413086, "tests_passed": false, "error": "KeyError"}
{"code": "def norm(path):\n        \"\"\"\n        Normalizes the specified file or directory name to ASCII using the Unicode Normalization Form C.\n\n        Parameters:\n        path (str): The file or directory name to be normalized.\n\n        Returns:\n        str: The normalized file or directory name.\n        \"\"\"\n        return unicodedata.normalize('NFD', path).encode('ascii', 'ignore').decode('utf-8')\n\n    info = {}\n    for file in os.listdir(directory):\n        path = os.path.join(directory, file)\n        if not os.path.isdir(path):\n            info[norm(file)] = {}\n            info[norm(file)]['Size'] = os.stat(path).st_size\n            info[norm(file)]['MD5 Hash'] = md5(pathlib.Path(path).read_bytes()).hexdigest()\n    return info", "compilation_passed": true, "time": 0.0024213790893554688, "tests_passed": true, "error": null}
{"code": "def _normalize(string):\n        string = unicodedata.normalize('NFD', string)\n        string = string.encode('ascii', 'ignore').decode()\n        string = string.lower().replace(' ', '_')\n        return string\n\n    def _get_hash(file_path):\n        hash_md5 = md5()\n        with open(file_path, 'rb') as file:\n            for chunk in iter(lambda: file.read(64 * 1024), b''):\n                hash_md5.update(chunk)\n        return hash_md5.hexdigest()\n\n    def _get_size(file_path):\n        return os.path.getsize(file_path)\n\n    files_info = {}\n    for root, dirs, files in os.walk(directory):\n        for file in files:\n            file_path = os.path.join(root, file)\n            file_name = file.split('.')[0]\n            normalized_file_name = _normalize(file_name)\n            file", "compilation_passed": true, "time": 0.0011737346649169922, "tests_passed": false, "error": "TypeError"}
{"code": "info = {}\n    for file in os.listdir(directory):\n        path = os.path.join(directory, file)\n\n        # skip non-files\n        if not os.path.isfile(path):\n            continue\n\n        # calculate md5 hash\n        hash = md5()\n        with open(path, \"rb\") as f:\n            for chunk in iter(lambda: f.read(4096), b\"\"):\n                hash.update(chunk)\n\n        # normalize the file name\n        path = pathlib.Path(path)\n        filename = path.name\n        normalized_filename = unicodedata.normalize(\"NFKC\", filename)\n\n        info[normalized_filename] = {\n            \"Size\": os.path.getsize(path),\n            \"MD5 Hash\": hash.hexdigest()\n        }\n\n    return info", "compilation_passed": true, "time": 0.0012638568878173828, "tests_passed": false, "error": "KeyError"}
{"code": "file_info = {}\n    for path in sorted(pathlib.Path(directory).rglob(\"*\")):\n        path_str = str(path)\n        if os.path.isfile(path_str):\n            file_info[_normalize(path.stem)] = {\n                'Size': os.path.getsize(path_str),\n                'MD5 Hash': _calculate_md5_hash(path_str),\n            }\n\n    return file_info", "compilation_passed": true, "time": 0.0010907649993896484, "tests_passed": false, "error": "NameError"}
{"code": "info = {}\n    for root, dirs, files in os.walk(directory):\n        for file_name in files:\n            file_path = os.path.join(root, file_name)\n\n            with open(file_path, 'rb') as file:\n                data = file.read()\n                hash_md5 = md5(data).hexdigest()\n                file_size = os.path.getsize(file_path)\n\n                normalized_name = normalize_ascii(file_name)\n                info[normalized_name] = {\n                    'Size': file_size,\n                    'MD5 Hash': hash_md5\n                }\n    return info", "compilation_passed": true, "time": 0.0011239051818847656, "tests_passed": false, "error": "NameError"}
{"code": "info = {}\n    for file in os.listdir(directory):\n        name = unicodedata.normalize('NFD', file).encode('ascii', 'ignore').decode('utf-8')\n        info[name] = {'Size': os.stat(directory + '/' + file).st_size, 'MD5 Hash': md5(open(directory + '/' + file, 'rb').read()).hexdigest()}\n    return info", "compilation_passed": true, "time": 0.0022499561309814453, "tests_passed": true, "error": null}
{"code": "info = {}\n    for filename in os.listdir(directory):\n        filename = normalize_filename(filename)\n        info[filename] = {\n            'Size': get_file_size(f'{directory}/{filename}'),\n            'MD5 Hash': get_file_md5_hash(f'{directory}/{filename}')\n        }\n    return info", "compilation_passed": true, "time": 0.0010249614715576172, "tests_passed": false, "error": "NameError"}
{"code": "def get_filename_hash(path):\n        return md5(str(path.with_suffix('')).encode()).hexdigest()\n\n    def get_filename_size(path):\n        return os.stat(str(path)).st_size\n\n    def normalize_string(string):\n        normalized = unicodedata.normalize('NFD', string)\n        return normalized.encode('ascii', 'ignore').decode('utf-8')\n\n    def get_file_info(file):\n        if file.suffix not in ['.py', '.ipynb']:\n            return {'Size': get_filename_size(file), 'MD5 Hash': get_filename_hash(file)}\n\n    def process_file(path, file):\n        return normalize_string(file.name), get_file_info(file)\n\n    def process_directory(directory):\n        return {process_file(directory, file)[0]: process_file(directory, file)[1] for file in\n                pathlib.Path(directory).iterdir() if file.is_", "compilation_passed": false, "time": 0.00027179718017578125, "tests_passed": false, "error": "SyntaxError"}
{"code": "info = {}\n    for filename in os.listdir(directory):\n        path = pathlib.Path(directory + '/' + filename)\n        if os.path.isfile(path):\n            normalized = unicodedata.normalize('NFKD', filename).encode('ascii', 'ignore').decode()\n            size = os.path.getsize(path)\n            with open(path, \"rb\") as file:\n                md5_hash = md5(file.read())\n            info[normalized] = {\n                'Size': size,\n                'MD5 Hash': md5_hash\n            }\n    return info", "compilation_passed": true, "time": 0.0010428428649902344, "tests_passed": true, "error": null}
{"code": "# Initialize a dictionary to store the file info\n    file_info = {}\n\n    # Get the absolute path of the directory\n    abs_dir = os.path.abspath(directory)\n\n    # Loop through the files in the directory\n    for filename in os.listdir(abs_dir):\n        # Get the full path of the file\n        file_path = os.path.join(abs_dir, filename)\n\n        # Check if it is a file and not a directory\n        if os.path.isfile(file_path):\n            # Get the file size\n            size = os.path.getsize(file_path)\n\n            # Open the file in read mode and calculate its MD5 hash\n            with open(file_path, 'rb') as f:\n                md5_hash = md5(f.read()).hexdigest()\n\n            # Convert the filename to ASCII\n            ascii_filename = unicodedata.normalize('NFKD', filename).encode(\n                'ascii', 'ignore').decode('ascii')\n\n            # Add the file info to the dictionary\n            ", "compilation_passed": true, "time": 0.0010631084442138672, "tests_passed": false, "error": "TypeError"}
{"code": "info = {}\n    for file in pathlib.Path(directory).rglob('*'):\n        if file.is_dir():\n            continue\n        file_name = str(file)\n        normalized_name = file.name.encode('utf-8').decode(\"ascii\", \"ignore\")\n        hash_value = md5(file_name.encode('utf-8')).hexdigest()\n        size_value = os.stat(file_name).st_size\n        info[normalized_name] = {'Size': size_value, 'MD5 Hash': hash_value}\n    return info", "compilation_passed": true, "time": 0.0010192394256591797, "tests_passed": false, "error": "KeyError"}
{"code": "# List the files in the directory.\n    files = os.listdir(directory)\n\n    # Initialize the info dictionary.\n    info = {}\n\n    # Iterate over the file names.\n    for name in files:\n        # Get the file path and information.\n        path = pathlib.Path(os.path.join(directory, name))\n        file_info = {\n            'Size': path.stat().st_size,\n            'MD5 Hash': md5(path.read_bytes()).hexdigest()\n        }\n\n        # Normalize the file name to ASCII.\n        name = unicodedata.normalize('NFKD', pathlib.Path(name).stem).encode('ascii', 'ignore').decode()\n\n        # Add the file name and information to the dictionary.\n        info[name] = file_info\n\n    return info", "compilation_passed": true, "time": 0.001112222671508789, "tests_passed": false, "error": "KeyError"}
{"code": "# Initialize variables to store the processed files.\n    files_info = {}\n\n    # Check if the given directory exists.\n    if not os.path.exists(directory):\n        raise ValueError(\"Directory does not exist.\")\n\n    # Traverse all files in the given directory and its subdirectories.\n    for current_dir, _, files in os.walk(directory):\n        for filename in files:\n            # Normalize the file name to ASCII.\n            ascii_filename = unicodedata.normalize(\"NFD\", filename).encode(\"ascii\", \"ignore\").decode()\n            ascii_filename = ascii_filename.replace(\" \", \"_\").replace(\".\", \"_\")\n\n            # Get the file path.\n            file_path = os.path.join(current_dir, filename)\n\n            # Calculate the file's size.\n            size = os.path.getsize(file_path)\n\n            # Calculate the file's MD5 hash.\n            with open(file_path, \"rb\") as file:", "compilation_passed": false, "time": 0.0001647472381591797, "tests_passed": false, "error": "IndentationError"}
{"code": "info = {}\n    for filename in os.listdir(directory):\n        file_path = os.path.join(directory, filename)\n        file_name = _get_normalized_filename(file_path)\n        file_size = os.path.getsize(file_path)\n        md5_hash = _get_file_md5_hash(file_path)\n        info[file_name] = {'Size': file_size, 'MD5 Hash': md5_hash}\n    return info", "compilation_passed": true, "time": 0.0009407997131347656, "tests_passed": false, "error": "NameError"}
{"code": "def normalize(file_name):\n        # Remove special characters from file name\n        normalized_name = file_name.lower()\n        normalized_name = normalized_name.encode('ascii', 'ignore').decode('ascii')\n        normalized_name = ''.join(c for c in normalized_name if c.isalnum())\n        normalized_name = normalized_name.replace(' ', '_').strip('_')\n\n        # Ensure file name doesn't start with a number\n        if normalized_name[0].isdigit():\n            normalized_name = f'_{normalized_name}'\n        return normalized_name\n\n    def get_size(file_path):\n        \"\"\"Return size of file in bytes.\"\"\"\n        return os.path.getsize(file_path)\n\n    def get_hash(file_path):\n        \"\"\"Calculate md5 hash of file.\"\"\"\n        with open(file_path, 'rb') as file:\n            content = file.read()\n            return md5(content).hexdigest()\n\n    file_names = os.listdir", "compilation_passed": true, "time": 0.0010809898376464844, "tests_passed": false, "error": "TypeError"}
{"code": "result = {}\n\n    for file in os.listdir(directory):\n        file_path = os.path.join(directory, file)\n        if os.path.isfile(file_path):\n            file_size = os.path.getsize(file_path)\n            md5_hash = md5_file(file_path)\n            normalized_file = normalize_ascii(file)\n\n            result[normalized_file] = {\n                'Size': file_size,\n                'MD5 Hash': md5_hash\n            }\n\n    return result", "compilation_passed": true, "time": 0.0010099411010742188, "tests_passed": false, "error": "NameError"}
{"code": "info = {}\n\n    # Normalize file paths and calculate MD5 hash and file size for each file\n    for filepath in os.listdir(directory):\n        filename = os.path.basename(filepath)\n        normalized_filename = unicodedata.normalize('NFKC', filename)\n        file_path = os.path.join(directory, filename)\n\n        if os.path.isfile(file_path):\n            with open(file_path, 'rb') as f:\n                data = f.read()\n                md5_hash = md5(data).hexdigest()\n                file_size = os.path.getsize(file_path)\n                info[normalized_filename] = {'Size': file_size, 'MD5 Hash': md5_hash}\n\n    return info", "compilation_passed": true, "time": 0.0010921955108642578, "tests_passed": false, "error": "KeyError"}
{"code": "# Normalize filenames to ASCII\n    ascii_filenames = {filename: normalize_ascii(filename) for filename in os.listdir(directory)}\n\n    info = {}\n    for filename, ascii_filename in ascii_filenames.items():\n        file_path = os.path.join(directory, filename)\n        if os.path.isfile(file_path):\n            with open(file_path, 'rb') as file:\n                content = file.read()\n                md5_hash = md5(content).hexdigest()\n            size = os.path.getsize(file_path)\n            info[ascii_filename] = {'Size': size, 'MD5 Hash': md5_hash}\n\n    return info", "compilation_passed": true, "time": 0.0009951591491699219, "tests_passed": false, "error": "NameError"}
{"code": "info = {}\n    for file in os.listdir(directory):\n        filepath = os.path.join(directory, file)\n        with open(filepath, 'rb') as f:\n            data = f.read()\n            md5_hash = md5(data).hexdigest()\n            size = pathlib.Path(filepath).stat().st_size\n            info[ascii_filename(file)] = {'MD5 Hash': md5_hash, 'Size': size}\n    return info", "compilation_passed": true, "time": 0.0010607242584228516, "tests_passed": false, "error": "NameError"}
{"code": "# Create an empty dictionary to hold the file info\n    info = {}\n\n    # Iterate through the directory and its subdirectories\n    for dirpath, dirnames, filenames in os.walk(directory):\n        # Iterate through the files in the current directory\n        for filename in filenames:\n            # Get the full path of the file\n            filepath = os.path.join(dirpath, filename)\n\n            # Normalize the filename to ASCII\n            ascii_filename = unicodedata.normalize('NFD', filepath).encode('ascii', 'ignore').decode('ascii')\n\n            # Calculate the MD5 hash and size of the file\n            md5_hash = calculate_md5_hash(filepath)\n            size = calculate_file_size(filepath)\n\n            # Add the file info to the dictionary\n            info[ascii_filename] = {'MD5 Hash': md5_hash, 'Size': size}\n\n    # Return the dictionary of file info\n    return info", "compilation_passed": true, "time": 0.001001119613647461, "tests_passed": false, "error": "NameError"}
{"code": "info = {}\n    for path in pathlib.Path(directory).iterdir():\n        info[to_ascii(path.name)] = {\n            'Size': os.path.getsize(path),\n            'MD5 Hash': md5(open(path, 'rb').read()).hexdigest()\n        }\n    return info", "compilation_passed": true, "time": 0.0010180473327636719, "tests_passed": false, "error": "NameError"}
{"code": "def get_md5_hash(file_path):\n        with open(file_path, 'rb') as f:\n            file_bytes = f.read()\n            hash_object = md5(file_bytes)\n            return hash_object.hexdigest()\n\n    info = {}\n    for root, _, files in os.walk(directory):\n        for name in files:\n            if name.startswith('.'):\n                continue\n            file_path = os.path.join(root, name)\n            filename = unicodedata.normalize('NFKD', name).encode('ascii', 'ignore').decode('ascii')\n            info[filename] = {\n                'Size': os.path.getsize(file_path),\n                'MD5 Hash': get_md5_hash(file_path)\n            }\n    return info", "compilation_passed": true, "time": 0.0023038387298583984, "tests_passed": true, "error": null}
{"code": "info = {}\n    for file in os.listdir(directory):\n        if os.path.isfile(os.path.join(directory, file)):\n            filename = file.replace(' ', '_')\n            filename = unicodedata.normalize('NFD', filename).encode('ascii', 'ignore').decode('utf-8')\n            filename = filename.lower()\n            info[filename] = {'Size': os.path.getsize(os.path.join(directory, file))}\n            md5_hash = md5()\n            with open(os.path.join(directory, file), 'rb') as f:\n                md5_hash.update(f.read())\n            info[filename]['MD5 Hash'] = md5_hash.hexdigest()\n    return info", "compilation_passed": true, "time": 0.002234935760498047, "tests_passed": true, "error": null}
{"code": "info = {}\n    for file in os.listdir(directory):\n        file_path = os.path.join(directory, file)\n        if os.path.isfile(file_path):\n            normalized_file = unicodedata.normalize('NFKD', file).encode('ascii', 'ignore').decode()\n            md5_hash = md5()\n            with open(file_path, 'rb') as f:\n                for chunk in iter(lambda: f.read(4096), b''):\n                    md5_hash.update(chunk)\n            info[normalized_file] = {\n                'Size': os.path.getsize(file_path),\n                'MD5 Hash': md5_hash.hexdigest()\n            }\n    return info", "compilation_passed": true, "time": 0.0023229122161865234, "tests_passed": true, "error": null}
{"code": "info = {}\n    for filename in os.listdir(directory):\n        path = os.path.join(directory, filename)\n        normalized = unicodedata.normalize('NFD', filename).encode('ascii', 'ignore').decode()\n        info[normalized] = {\n            'Size': pathlib.Path(path).stat().st_size,\n            'MD5 Hash': md5(filename.encode()).hexdigest()\n        }\n    return info", "compilation_passed": true, "time": 0.0010268688201904297, "tests_passed": true, "error": null}
{"code": "directory = pathlib.Path(directory)\n    info = {}\n\n    for file in directory.iterdir():\n        normalized_filename = unicodedata.normalize('NFKD', str(file)).encode('ascii', 'ignore').decode()\n\n        md5_hash = md5(file.read_bytes()).hexdigest()\n        file_size = file.stat().st_size\n        info[normalized_filename] = {\"Size\": file_size, \"MD5 Hash\": md5_hash}\n\n    return info", "compilation_passed": true, "time": 0.0011751651763916016, "tests_passed": false, "error": "KeyError"}
