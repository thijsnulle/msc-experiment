{"code": "# Set the seed for reproducibility\n    if seed is not None:\n        random.seed(seed)\n    # Ensure that n_tasks is non-negative\n    if n_tasks < 0:\n        raise ValueError(\"Number of tasks to be assigned cannot be negative.\")\n\n    # Create an empty dictionary to hold the tasks\n    tasks = {}\n\n    # Sanitize task names by replacing spaces with underscores\n    task_list = [task.replace(\" \", \"_\") for task in task_list]\n\n    # Assign the tasks to employees and create a due date\n    for i in range(n_tasks):\n        task = random.choice(task_list)\n        if task not in tasks:\n            tasks[task] = {\"Assigned To\": random.choice(employees), \"Due Date\": datetime.now().date().strftime(\"%Y-%m-%d\")}\n\n    # Convert the tasks dictionary to a pandas DataFrame\n    df = pd.DataFrame(tasks)\n    df = df.transpose()\n    df = df.reset_index(", "compilation_passed": false, "time": 0.0002510547637939453, "tests_passed": false, "error": "SyntaxError"}
{"code": "# check that n_tasks is non-negative\n    if n_tasks < 0:\n        raise ValueError(\"n_tasks must be non-negative\")\n\n    # Set the seed if provided\n    if seed is not None:\n        random.seed(seed)\n\n    # Initialize an empty dataframe\n    df = pd.DataFrame()\n\n    # Add a column for tasks, sanitize names\n    df[\"Task Name\"] = [task.replace(\" \", \"_\") for task in task_list]\n\n    # Sample the number of tasks specified by n_tasks\n    df = df.sample(n=n_tasks)\n\n    # Add a column for the due date using the current system date\n    df[\"Due Date\"] = datetime.now().date()\n\n    # Add a column for employees\n    df[\"Assigned To\"] = [\n        random.choice(employees) for _ in range(len(df[\"Task Name\"]))\n    ]\n\n    return df", "compilation_passed": true, "time": 0.0019648075103759766, "tests_passed": true, "error": null}
{"code": "if seed is not None:\n        random.seed(seed)\n\n    if n_tasks < 0:\n        raise ValueError(\"n_tasks cannot be negative\")\n\n    if n_tasks > len(task_list):\n        n_tasks = len(task_list)\n\n    tasks_to_assign = random.sample(task_list, n_tasks)\n\n    # Use a list comprehension to create a list of tuples where each tuple contains\n    # the task name, assigned to, and due date (current date)\n    assignments = [\n        (\n            task.replace(\" \", \"_\"),\n            random.choice(employees),\n            datetime.today().strftime(\"%Y-%m-%d\"),\n        )\n        for task in tasks_to_assign\n    ]\n\n    # Convert the list of tuples into a pandas DataFrame\n    task_assignment = pd.DataFrame(assignments, columns=[\"Task Name\", \"Assigned To\", \"Due Date\"])\n\n    return task_assignment", "compilation_passed": true, "time": 0.0019309520721435547, "tests_passed": true, "error": null}
{"code": "# Raise a ValueError if n_tasks is negative\n    if n_tasks < 0:\n        raise ValueError(\"n_tasks must be non-negative.\")\n\n    # Set the random seed if a seed value is provided\n    if seed is not None:\n        random.seed(seed)\n\n    # Select the specified number of tasks from the task_list using random.sample()\n    selected_tasks = random.sample(task_list, k=n_tasks)\n\n    # Create an empty list to hold the task assignments\n    task_assignments = []\n\n    # Loop through each selected task\n    for task in selected_tasks:\n        # Randomly choose an employee to assign the task to\n        employee = random.choice(employees)\n        # Set the due date to the current system date\n        due_date = datetime.now().date().strftime(\"%Y-%m-%d\")\n        # Add the task name, employee, and due date to the list of assignments\n        task_assignments.append([task, employee, due_date])\n\n    # Convert the list of task assignments", "compilation_passed": true, "time": 0.0012822151184082031, "tests_passed": true, "error": null}
{"code": "if seed is not None:\n        random.seed(seed)\n\n    if n_tasks < 0:\n        raise ValueError(\"The number of tasks can't be negative.\")\n    elif n_tasks == 0:\n        return pd.DataFrame(columns=[\"Task Name\", \"Assigned To\", \"Due Date\"])\n\n    # Sanitize task names by replacing spaces with underscores\n    tasks = [task.replace(\" \", \"_\") for task in random.sample(task_list, n_tasks)]\n\n    # Assign tasks to employees randomly\n    employee_tasks = [(task, random.choice(employees)) for task in tasks]\n\n    # Generate due dates\n    due_dates = [\n        datetime.now().strftime(\"%Y-%m-%d\") for _ in range(len(employee_tasks))\n    ]\n\n    # Create DataFrame\n    df = pd.DataFrame(employee_tasks, columns=[\"Task Name\", \"Assigned To\"])\n    df[\"Due Date\"] = due_dates\n\n    return df<", "compilation_passed": false, "time": 0.0002598762512207031, "tests_passed": false, "error": "SyntaxError"}
{"code": "# check n_tasks\n    if n_tasks < 0:\n        raise ValueError(\"n_tasks cannot be negative.\")\n    # set seed if provided\n    if seed is not None:\n        random.seed(seed)\n\n    # create a DataFrame with task name and assigned to\n    tasks_df = pd.DataFrame({\"Task Name\": task_list})\n    tasks_df[\"Assigned To\"] = [random.choice(employees) for _ in range(len(tasks_df))]\n\n    # create a slice of the DataFrame with the first n_tasks rows\n    tasks_df = tasks_df.iloc[:n_tasks]\n\n    # sanitize task names\n    tasks_df[\"Task Name\"] = tasks_df[\"Task Name\"].str.replace(\" \", \"_\")\n\n    # add due date\n    tasks_df[\"Due Date\"] = datetime.now().date().isoformat()\n\n    return tasks_df", "compilation_passed": true, "time": 0.0030210018157958984, "tests_passed": true, "error": null}
{"code": "if n_tasks < 0:\n        raise ValueError(\"n_tasks cannot be negative\")\n\n    if seed is not None:\n        random.seed(seed)\n\n    assigned_tasks = []\n\n    for _ in range(n_tasks):\n        task_name = random.choice(task_list)\n        employee = random.choice(employees)\n        task_name = task_name.replace(\" \", \"_\")\n        assigned_tasks.append((task_name, employee))\n\n    df = pd.DataFrame(assigned_tasks, columns=[\"Task Name\", \"Assigned To\"])\n    df[\"Due Date\"] = datetime.now().strftime(\"%Y-%m-%d\")\n    return df", "compilation_passed": true, "time": 0.002846956253051758, "tests_passed": false, "error": "IndexError"}
{"code": "if n_tasks < 0:\n        raise ValueError(\"The number of tasks must not be negative.\")\n    if seed is not None:\n        random.seed(seed)\n    # Task names are sanitized by replacing spaces with underscores.\n    # Due dates are set to the current system date.\n    data = {\n        \"Task Name\": [task.replace(\" \", \"_\") for task in task_list] * (n_tasks // len(task_list))\n        + task_list[: n_tasks % len(task_list)],\n        \"Assigned To\": random.choices(employees, k=n_tasks),\n        \"Due Date\": [datetime.now().strftime(\"%Y-%m-%d\")] * n_tasks,\n    }\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0020699501037597656, "tests_passed": false, "error": "ZeroDivisionError"}
{"code": "# Check if n_tasks is a negative number\n    if n_tasks < 0:\n        raise ValueError(\"n_tasks should not be negative.\")\n\n    # Initialize random number generator\n    random.seed(seed)\n\n    # Shuffle employees and slice them based on n_tasks\n    random.shuffle(employees)\n    assigned_employees = employees[:n_tasks]\n\n    # Initialize a DataFrame with empty columns\n    result = pd.DataFrame(columns=[\"Task Name\", \"Assigned To\", \"Due Date\"])\n\n    # Fill in the data row by row\n    for i in range(n_tasks):\n        # Task name is obtained by slicing the first letter and sanitizing it\n        # (i.e., removing spaces).\n        # The slice ensures we only get 2 characters for the task name.\n        task_name = task_list[i % len(task_list)][:2].strip()\n        if task_name == \"\":\n            raise ValueError(\"Task name cannot be empty after sanitization.\")\n\n        ", "compilation_passed": true, "time": 0.0014841556549072266, "tests_passed": true, "error": null}
{"code": "if n_tasks < 0:\n        raise ValueError(\"Number of tasks to be assigned must not be negative\")\n    else:\n        if seed is not None:\n            random.seed(seed)\n        # Define the task names to be assigned\n        # If n_tasks is larger than the number of tasks in the task_list,\n        # duplicate tasks from the list randomly to ensure enough tasks are created\n        tasks = random.choices(task_list, k=n_tasks)\n\n        # Sanitize the task names by replacing spaces with underscores\n        tasks = [task.replace(\" \", \"_\") for task in tasks]\n\n        # Assign the tasks to employees\n        assignments = pd.DataFrame({\"Task Name\": tasks, \"Assigned To\": random.sample(employees, len(tasks))})\n\n        # Set the due date to the current system date\n        assignments[\"Due Date\"] = datetime.today().strftime(\"%Y-%m-%d\")\n\n        # Return the DataFrame\n        return assignments", "compilation_passed": true, "time": 0.0019958019256591797, "tests_passed": false, "error": "ValueError"}
{"code": "# Check that n_tasks is non-negative\n    if n_tasks < 0:\n        raise ValueError(\"n_tasks must be non-negative\")\n\n    # Set seed if provided\n    if seed is not None:\n        random.seed(seed)\n\n    # Initialize empty data\n    data = {\n        \"Task Name\": [],\n        \"Assigned To\": [],\n        \"Due Date\": [],\n    }\n\n    # Get the current system date\n    today = datetime.date(datetime.now())\n\n    # Repeat n_tasks times\n    for _ in range(n_tasks):\n        # Get a random task from the list of tasks\n        task = random.choice(task_list)\n        # Add task to data\n        data[\"Task Name\"].append(task.replace(\" \", \"_\"))\n        # Get a random employee from the list of employees\n        employee = random.choice(employees)\n        # Add employee to data\n        data[\"Assigned To\"].append(employee)\n        # Add today's date to data\n        data[", "compilation_passed": false, "time": 0.00023984909057617188, "tests_passed": false, "error": "SyntaxError"}
{"code": "if n_tasks < 0:\n        raise ValueError(\"The number of tasks cannot be negative\")\n    # Set the random seed for reproducibility\n    random.seed(seed)\n\n    # Select random tasks from the list, and if the number of tasks is greater\n    # than the length of the task list, repeat tasks if necessary.\n    selected_tasks = [task_list[i % len(task_list)] for i in range(n_tasks)]\n\n    # Randomly assign tasks to employees\n    assignments = [(task, random.choice(employees)) for task in selected_tasks]\n\n    # Sanitize task names by replacing spaces with underscores\n    assignments = [(task.replace(\" \", \"_\"), employee) for task, employee in assignments]\n\n    # Create a DataFrame with the task assignments\n    df = pd.DataFrame(assignments, columns=[\"Task Name\", \"Assigned To\"])\n\n    # Set the 'Due Date' column to the current system date\n    df[\"Due Date\"] = datetime.now().strftime(\"%Y-%", "compilation_passed": false, "time": 0.00010228157043457031, "tests_passed": false, "error": "SyntaxError"}
{"code": "if n_tasks < 0:\n        raise ValueError(\"n_tasks cannot be negative\")\n\n    if seed is not None:\n        random.seed(seed)\n\n    tasks = [task.replace(\" \", \"_\") for task in task_list]\n    task_assignments = []\n    for i in range(n_tasks):\n        task_name = random.choice(tasks)\n        assigned_to = random.choice(employees)\n        due_date = datetime.now().strftime(\"%Y-%m-%d\")\n        task_assignments.append([task_name, assigned_to, due_date])\n    df = pd.DataFrame(task_assignments, columns=[\"Task Name\", \"Assigned To\", \"Due Date\"])\n    return df", "compilation_passed": true, "time": 0.0026748180389404297, "tests_passed": false, "error": "IndexError"}
{"code": "if n_tasks < 0:\n        raise ValueError(\"n_tasks should not be negative\")\n\n    if seed is not None:\n        random.seed(seed)\n\n    # Sanitize the task_list\n    task_list = [task.replace(\" \", \"_\") for task in task_list]\n\n    # Get the current date\n    today = datetime.now().date().strftime(\"%Y-%m-%d\")\n\n    # Assign tasks randomly to employees\n    assignments = [\n        {\n            \"Task Name\": task,\n            \"Assigned To\": random.choice(employees),\n            \"Due Date\": today,\n        }\n        for task in random.choices(task_list, k=n_tasks)\n    ]\n\n    df = pd.DataFrame(assignments)\n\n    return df", "compilation_passed": true, "time": 0.0023071765899658203, "tests_passed": true, "error": null}
{"code": "# Check if the number of tasks is negative.\n    if n_tasks < 0:\n        raise ValueError(\"Number of tasks must be non-negative.\")\n\n    # If the seed is provided, set the seed for the random number generator for reproducibility.\n    if seed is not None:\n        random.seed(seed)\n\n    # Sanitize task names by replacing spaces with underscores.\n    task_list = [task.replace(\" \", \"_\") for task in task_list]\n\n    # Initialize empty lists to store task assignments.\n    task_name = []\n    assigned_to = []\n    due_date = []\n\n    # Randomly select tasks and assign to employees, ensuring no duplicate assignments.\n    for i in range(n_tasks):\n        task = random.choice(task_list)\n        employee = random.choice(employees)\n        task_name.append(task)\n        assigned_to.append(employee)\n        due_date.append(datetime.now().date().strftime(\"%Y-%m-%d\"))\n\n    ", "compilation_passed": true, "time": 0.00133514404296875, "tests_passed": true, "error": null}
{"code": "if seed is not None:\n        random.seed(seed)\n\n    # Handle negative values for n_tasks\n    if n_tasks < 0:\n        raise ValueError(\"The number of tasks cannot be negative.\")\n\n    # Handle empty employee list\n    if not employees:\n        employees = []\n\n    # Handle empty task_list\n    if not task_list:\n        task_list = []\n\n    # Handle n_tasks exceeding the number of tasks in the task_list\n    if n_tasks > len(task_list):\n        n_tasks = len(task_list)\n\n    # Create the DataFrame to hold the assigned tasks\n    assigned_tasks = pd.DataFrame(\n        columns=[\"Task Name\", \"Assigned To\", \"Due Date\"]\n    )\n\n    # Randomly assign tasks to employees with today's date\n    for i in range(n_tasks):\n        task = random.choice(task_list)\n        employee = random.choice(employees)\n        today = datetime.now().date()\n        assigned_tasks.loc[", "compilation_passed": false, "time": 0.00024127960205078125, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Check if n_tasks is negative\n    if n_tasks < 0:\n        raise ValueError(\"n_tasks cannot be negative\")\n\n    # Initialize the seed for the random number generator\n    random.seed(seed)\n\n    # Create an empty list to store the data\n    data = []\n\n    # Get the current system date\n    today = datetime.today().strftime(\"%Y-%m-%d\")\n\n    # Generate random assignments and due dates\n    for _ in range(n_tasks):\n        # Randomly select a task\n        task = random.choice(task_list)\n\n        # Replace spaces in task name with underscores\n        task = task.replace(\" \", \"_\")\n\n        # Randomly select an employee\n        employee = random.choice(employees)\n\n        # Generate a due date for today\n        due_date = today\n\n        # Append the data as a tuple\n        data.append((task, employee, due_date))\n\n    # Create a DataFrame from the data\n    df = pd.DataFrame(data, columns=[\"Task Name", "compilation_passed": false, "time": 9.322166442871094e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Raise error if n_tasks is negative\n    if n_tasks < 0:\n        raise ValueError(\"n_tasks should not be negative\")\n\n    # Set random seed\n    if seed is not None:\n        random.seed(seed)\n\n    # Initialize empty lists for task names, employees, and due dates\n    task_names = []\n    assigned_to = []\n    due_dates = []\n\n    # Select n_tasks tasks randomly from the task list, repeating if necessary\n    selected_tasks = random.choices(task_list, k=n_tasks)\n\n    # Iterate through the selected tasks\n    for task in selected_tasks:\n        # Sanitize task name by replacing spaces with underscores\n        task_name = task.replace(\" \", \"_\")\n\n        # Assign task to an employee randomly\n        assigned_employee = random.choice(employees)\n\n        # Get current date using datetime module\n        due_date = datetime.now().strftime(\"%Y-%m-%d\")\n\n        # Append the data to their respective lists", "compilation_passed": true, "time": 0.001302957534790039, "tests_passed": true, "error": null}
{"code": "if n_tasks < 0:\n        raise ValueError(\"Number of tasks should not be negative.\")\n\n    if seed is not None:\n        random.seed(seed)\n\n    due_date = datetime.today().strftime(\"%Y-%m-%d\")\n\n    # sanitize task names by replacing spaces with underscores\n    task_list = [task.replace(\" \", \"_\") for task in task_list]\n\n    # shuffle the task list if the number of tasks to be assigned is less than the total number of tasks\n    if n_tasks < len(task_list):\n        random.shuffle(task_list)\n\n    # create a list of assigned tasks and assign each task to a random employee\n    assigned_tasks = []\n    for task in task_list:\n        if n_tasks <= 0:\n            break\n        n_tasks -= 1\n        assigned_tasks.append(\n            (task, random.choice(employees), due_date)\n        )\n\n    # create a DataFrame from the assigned tasks\n    data = pd", "compilation_passed": true, "time": 0.0013098716735839844, "tests_passed": true, "error": null}
{"code": "# Set seed to ensure reproducibility\n    random.seed(seed)\n    # If negative, raise ValueError\n    if n_tasks < 0:\n        raise ValueError(\"The number of tasks to assign cannot be negative\")\n    # Create an empty DataFrame with columns 'Task Name', 'Assigned To', and 'Due Date'\n    df = pd.DataFrame(\n        columns=[\"Task Name\", \"Assigned To\", \"Due Date\"],\n        index=range(n_tasks),\n    )\n    # Loop through each task to be assigned\n    for i in range(n_tasks):\n        # Select a random employee\n        employee = random.choice(employees)\n        # Select a random task and sanitize it by replacing spaces with underscores\n        task_name = random.choice(task_list).replace(\" \", \"_\")\n        # Get the current system date\n        current_date = datetime.now().strftime(\"%Y-%m-%d\")\n        # Insert the task name, assigned employee, and due date into the DataFrame\n        ", "compilation_passed": true, "time": 0.0014541149139404297, "tests_passed": true, "error": null}
{"code": "# Check if n_tasks is negative\n    if n_tasks < 0:\n        raise ValueError(\"n_tasks cannot be negative.\")\n\n    # Set the random seed (if provided)\n    if seed is not None:\n        random.seed(seed)\n\n    # Generate a list of due dates with the current system date\n    due_dates = [datetime.now().date()] * n_tasks\n\n    # Select random tasks from the task list\n    tasks = random.choices(task_list, k=n_tasks)\n\n    # Select random employees to assign the tasks\n    assigned_to = random.choices(employees, k=n_tasks)\n\n    # Create the DataFrame\n    data = pd.DataFrame({'Task Name': tasks, 'Assigned To': assigned_to, 'Due Date': due_dates})\n\n    # Sanitize task names by replacing spaces with underscores\n    data['Task Name'] = data['Task Name'].str.replace(' ', '_')\n\n    return data", "compilation_passed": true, "time": 0.0015969276428222656, "tests_passed": true, "error": null}
{"code": "# Check if n_tasks is a positive integer\n    if n_tasks < 0:\n        raise ValueError(\"n_tasks should not be negative\")\n\n    # Set the seed if it is provided\n    if seed is not None:\n        random.seed(seed)\n\n    # Sanitize task names by replacing spaces with underscores\n    task_list = [t.strip().replace(\" \", \"_\") for t in task_list]\n\n    # Get the system date\n    today = datetime.now().date()\n\n    # Create a DataFrame with 'Task Name', 'Assigned To', and 'Due Date' columns\n    df = pd.DataFrame({\"Task Name\": task_list, \"Assigned To\": employees, \"Due Date\": today})\n\n    # Randomly assign tasks to employees with the specified due date\n    df = df.sample(n_tasks, replace=True)\n\n    # Return the DataFrame with assigned tasks\n    return df", "compilation_passed": true, "time": 0.0016028881072998047, "tests_passed": false, "error": "ValueError"}
{"code": "if n_tasks < 0:\n        raise ValueError(\"The number of tasks cannot be negative.\")\n\n    # Setting the random seed\n    if seed is not None:\n        random.seed(seed)\n\n    # If the number of tasks is larger than the number of tasks in the list,\n    # duplicate tasks randomly\n    if n_tasks > len(task_list):\n        tasks = random.choices(task_list, k=n_tasks)\n    else:\n        tasks = random.sample(task_list, n_tasks)\n\n    # Sanitize task names\n    tasks = [task.replace(\" \", \"_\") for task in tasks]\n\n    # Assign tasks to employees randomly\n    task_assignments = [(task, random.choice(employees)) for task in tasks]\n\n    # Create DataFrame\n    df = pd.DataFrame(task_assignments, columns=[\"Task Name\", \"Assigned To\"])\n\n    # Add due date column with today's date\n    date = datetime.now().date()\n    date_str = date.strftime", "compilation_passed": true, "time": 0.0014028549194335938, "tests_passed": true, "error": null}
{"code": "if n_tasks < 0:\n        raise ValueError(\"The number of tasks to assign cannot be negative\")\n\n    if seed:\n        random.seed(seed)\n\n    random_tasks = [\n        (task_name.replace(\" \", \"_\"), random.choice(employees))\n        for _ in range(n_tasks)\n        for task_name in random.sample(task_list, k=1)\n    ]\n\n    due_date = datetime.now().date().strftime(\"%Y-%m-%d\")\n    tasks_df = pd.DataFrame(\n        random_tasks, columns=[\"Task Name\", \"Assigned To\"]\n    ).assign(Due_Date=due_date)\n\n    return tasks_df", "compilation_passed": true, "time": 0.0014429092407226562, "tests_passed": true, "error": null}
{"code": "if n_tasks < 0:\n        raise ValueError(\"Number of tasks should be non-negative.\")\n    # Ensure that the random number generator is deterministic given a seed\n    random.seed(seed)\n    # Randomly sample n_tasks from the task list\n    tasks = random.sample(task_list, k=n_tasks)\n    # Randomly sample employees from the list of employees\n    assigned_to = random.choices(employees, k=n_tasks)\n    # Get today's system date\n    due_date = str(datetime.now().date())\n    # Create a DataFrame with the assigned tasks\n    df = pd.DataFrame(\n        {\"Task Name\": tasks, \"Assigned To\": assigned_to, \"Due Date\": due_date}\n    )\n    # Replace spaces with underscores in task names\n    df[\"Task Name\"] = df[\"Task Name\"].str.replace(\" \", \"_\")\n\n    return df", "compilation_passed": true, "time": 0.0022220611572265625, "tests_passed": false, "error": "ValueError"}
{"code": "if n_tasks < 0:\n        raise ValueError(\"n_tasks should not be negative\")\n\n    if not isinstance(task_list, list) or not isinstance(task_list[0], str):\n        raise TypeError(\"task_list must be a list of strings\")\n\n    if seed is not None:\n        random.seed(seed)\n\n    # Sanitize task names by replacing spaces with underscores\n    task_list = [task.replace(\" \", \"_\") for task in task_list]\n\n    # Select tasks at random without replacement\n    selected_tasks = random.sample(task_list, k=n_tasks)\n\n    # Assign tasks randomly to employees\n    assigned_tasks = []\n    for task in selected_tasks:\n        assigned_to = random.choice(employees)\n        due_date = datetime.now().date()\n        assigned_tasks.append([task, assigned_to, due_date])\n\n    # Create a DataFrame with the assigned tasks\n    task_df = pd.DataFrame(assigned_tasks, columns", "compilation_passed": false, "time": 0.0002601146697998047, "tests_passed": false, "error": "SyntaxError"}
{"code": "if seed is not None:\n        random.seed(seed)\n\n    if n_tasks < 0:\n        raise ValueError(\"n_tasks must not be negative\")\n\n    if n_tasks > len(task_list):\n        n_tasks = len(task_list)\n\n    df = pd.DataFrame({\"Task Name\": task_list[:n_tasks], \"Assigned To\": random.sample(employees, n_tasks), \"Due Date\": datetime.today().strftime(\"%Y-%m-%d\")})\n    df[\"Task Name\"] = df[\"Task Name\"].str.replace(\" \", \"_\")\n    return df", "compilation_passed": true, "time": 0.0023508071899414062, "tests_passed": true, "error": null}
{"code": "if n_tasks < 0:\n        raise ValueError(\"Number of tasks cannot be negative.\")\n    random.seed(seed)\n    assigned_tasks = random.sample(task_list, n_tasks)\n    assigned_employees = random.choices(employees, k=n_tasks)\n    due_dates = [datetime.today().strftime(\"%Y-%m-%d\")] * n_tasks\n\n    # Sanitize task names by replacing spaces with underscores\n    assigned_tasks = [t.replace(\" \", \"_\") for t in assigned_tasks]\n\n    data = {\n        \"Task Name\": assigned_tasks,\n        \"Assigned To\": assigned_employees,\n        \"Due Date\": due_dates,\n    }\n    return pd.DataFrame(data)", "compilation_passed": true, "time": 0.0018701553344726562, "tests_passed": false, "error": "ValueError"}
{"code": "if n_tasks < 0:\n        raise ValueError(\"n_tasks cannot be negative.\")\n\n    if seed is not None:\n        random.seed(seed)\n\n    task_assignments = []\n    for _ in range(n_tasks):\n        task = random.choice(task_list)\n        assigned_to = random.choice(employees)\n        due_date = datetime.now().strftime(\"%Y-%m-%d\")\n\n        task_assignments.append(\n            {\n                \"Task Name\": task.replace(\" \", \"_\"),\n                \"Assigned To\": assigned_to,\n                \"Due Date\": due_date,\n            }\n        )\n\n    return pd.DataFrame(task_assignments)", "compilation_passed": true, "time": 0.0024840831756591797, "tests_passed": true, "error": null}
{"code": "if n_tasks < 0:\n        raise ValueError(\"Number of tasks cannot be negative.\")\n\n    random.seed(seed)\n\n    # sanitize task names by replacing spaces with underscores\n    task_list = [task.replace(\" \", \"_\") for task in task_list]\n\n    # generate task assignments\n    assignments = []\n    for i in range(n_tasks):\n        task = random.choice(task_list)\n        employee = random.choice(employees)\n        assignments.append([task, employee, datetime.now().strftime(\"%Y-%m-%d\")])\n\n    # create pandas DataFrame\n    df = pd.DataFrame(assignments, columns=[\"Task Name\", \"Assigned To\", \"Due Date\"])\n\n    return df", "compilation_passed": true, "time": 0.002608060836791992, "tests_passed": false, "error": "IndexError"}
