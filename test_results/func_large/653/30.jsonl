{"code": "mask = dataframe.applymap(lambda x: str(x).startswith(target_value))\n    ax = sns.heatmap(mask, cmap=\"Greens\")\n    return mask, ax", "compilation_passed": true, "time": 0.10160422325134277, "tests_passed": true, "error": null}
{"code": "target_value = '332'\n    target_value_mask = df['Column1'].str.contains(target_value)\n    target_value_mask_2 = df['Column2'].str.contains(target_value)\n    target_value_mask_3 = df['Column3'].str.contains(target_value)\n    df['Column1'] = target_value_mask\n    df['Column2'] = target_value_mask_2\n    df['Column3'] = target_value_mask_3\n    mask = df.isin([True])\n    fig, ax = plt.subplots(figsize=(8, 8))\n    ax = sns.heatmap(mask, annot=mask, fmt='', ax=ax)\n    ax.tick_params(axis='both', which='major', labelsize=12)\n\n    return (df, ax)", "compilation_passed": true, "time": 0.00116729736328125, "tests_passed": false, "error": "NameError"}
{"code": "data = dataframe.copy()\n    data = data == target_value\n    plt.figure(figsize=(12, 8))\n    ax = sns.heatmap(data, annot=data, fmt='', cbar=False, cmap=sns.color_palette('coolwarm', as_cmap=True))\n    return data, ax", "compilation_passed": true, "time": 0.0563359260559082, "tests_passed": true, "error": null}
{"code": "# Search for the value in the DataFrame\n    mask = dataframe.applymap(\n        lambda x: x == target_value if type(x) is str else False\n    )\n\n    # Visualize the occurrences using a heatmap\n    ax = sns.heatmap(mask, cmap='RdBu_r', yticklabels=dataframe.columns,\n                     xticklabels=dataframe.index)\n\n    return mask, ax", "compilation_passed": true, "time": 0.11313295364379883, "tests_passed": true, "error": null}
{"code": "mask = dataframe.applymap(lambda x: x == target_value)\n    ax = sns.heatmap(mask, cmap='coolwarm')\n    ax.set_xticklabels(ax.get_xticklabels(), rotation=90)\n    ax.set_yticklabels(ax.get_yticklabels(), rotation=30)\n    return mask, ax", "compilation_passed": true, "time": 0.1852121353149414, "tests_passed": true, "error": null}
{"code": "# Convert all values in the input DataFrame to strings\n    dataframe_str = dataframe.astype(str)\n\n    # Initialize an empty list to store the axes objects\n    axs = []\n\n    # Iterate through each column of the DataFrame\n    for i in range(len(dataframe_str.columns)):\n        # Extract the current column\n        column = dataframe_str.iloc[:, i]\n\n        # Create a Boolean DataFrame indicating the presence of the target value\n        mask = column.str.contains(target_value).fillna(False).astype(bool)\n\n        # Create a new figure and set the current Axes object to the heatmap of the current column\n        _, ax = plt.subplots()\n        sns.heatmap(mask, cbar=False, cmap=sns.color_palette('Reds'), ax=ax)\n\n        # Add the current Axes object to the list\n        axs.append(ax)\n\n    # Return the list of Axes objects\n    return mask, ax", "compilation_passed": true, "time": 0.00498199462890625, "tests_passed": false, "error": "IndexError"}
{"code": "# Search for the target value in the DataFrame\n    mask = dataframe.applymap(lambda x: str(x).startswith(target_value))\n\n    # Visualize the occurrences using a heatmap\n    ax = sns.heatmap(mask, cbar=False, linewidths=0.5)\n\n    return mask, ax", "compilation_passed": true, "time": 0.028229236602783203, "tests_passed": true, "error": null}
{"code": "target_value = str(target_value)\n    target_mask = dataframe.applymap(\n        lambda x: x == target_value if isinstance(x, str) else False\n    )\n    ax = sns.heatmap(target_mask, annot=False)\n    return target_mask, ax", "compilation_passed": true, "time": 0.10620713233947754, "tests_passed": true, "error": null}
{"code": "target_value_mask = (dataframe == target_value).any(axis=1)\n\n    target_df = dataframe[target_value_mask]\n\n    mask = target_df.astype(bool)\n    sns.set_theme(style='white')\n\n    f, ax = plt.subplots(figsize=(11, 7))\n\n    # Generate a mask for the upper triangle\n    mask = np.triu(np.ones_like(target_df, dtype=bool))\n\n    # Set up the plot\n    sns.set_theme(style='white')\n    sns.heatmap(target_df, mask=mask, vmin=0, vmax=1, square=True, cmap='viridis')\n\n    return target_df, ax", "compilation_passed": true, "time": 0.004884004592895508, "tests_passed": false, "error": "NameError"}
{"code": "mask = dataframe.applymap(lambda x: target_value in str(x))\n    ax = sns.heatmap(mask, cmap=\"YlGnBu\")\n    return mask, ax", "compilation_passed": true, "time": 0.10173225402832031, "tests_passed": true, "error": null}
{"code": "dataframe_bool = dataframe.applymap(lambda x: target_value in str(x))\n    ax = sns.heatmap(dataframe_bool, cmap='viridis', annot=dataframe_bool)\n    return dataframe_bool, ax", "compilation_passed": true, "time": 0.18905115127563477, "tests_passed": true, "error": null}
{"code": "# Create a new DataFrame with Boolean values indicating the presence of the target value\n    mask = dataframe.applymap(lambda x: str(x) == target_value)\n\n    # Create the heatmap using Seaborn\n    ax = sns.heatmap(mask, annot=True, fmt='s', linewidths=2, cbar=False, cmap='coolwarm')\n\n    return mask, ax", "compilation_passed": true, "time": 0.0378870964050293, "tests_passed": false, "error": "ValueError"}
{"code": "# Convert the target value to a string\n    target_value = str(target_value)\n\n    # Convert the input DataFrame to a string DataFrame\n    str_df = dataframe.astype(str)\n\n    # Search for the target value in the string DataFrame and create a mask of Boolean values\n    mask = str_df.apply(lambda x: x.str.contains(target_value))\n\n    # Visualize the mask using a heatmap\n    ax = sns.heatmap(mask, cmap='Blues')\n\n    return mask, ax", "compilation_passed": true, "time": 0.26166558265686035, "tests_passed": true, "error": null}
{"code": "mask = dataframe.applymap(\n        lambda x: x == target_value)  # \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043c\u0430\u0441\u043a\u0443 \u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u0433\u0434\u0435 True, \u0435\u0441\u043b\u0438 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0443\u044e\u0442 target_value\n    ax = sns.heatmap(mask, cmap='viridis')  # \u0433\u0435\u043d\u0435\u0440\u0438\u0440\u0443\u0435\u043c \u0442\u0435\u043f\u043b\u043e\u0432\u0443\u044e \u043a\u0430\u0440\u0442\u0443\n    return mask, ax", "compilation_passed": true, "time": 0.32851195335388184, "tests_passed": true, "error": null}
{"code": "# Convert the target value to a string\n    target_value = str(target_value)\n\n    # Find the locations where the target value is present in the DataFrame\n    mask = dataframe.astype(str).apply(lambda x: target_value in x.astype(str)).to_numpy()\n\n    # Plot the locations of the target value using a heatmap\n    ax = sns.heatmap(mask)\n\n    return mask, ax", "compilation_passed": true, "time": 0.0014388561248779297, "tests_passed": false, "error": "IndexError"}
{"code": "mask = (dataframe == target_value).any(axis=1)\n    sns.set_theme()\n    ax = sns.heatmap(dataframe.loc[mask].to_numpy(), square=False)\n\n    return mask, ax", "compilation_passed": true, "time": 0.0014829635620117188, "tests_passed": false, "error": "ValueError"}
{"code": "# Define the target value to search for\n    #target_value = '332'\n\n    # Use the isin method to create a new dataframe with boolean values\n    # indicating where the target value is present\n    bool_df = dataframe.isin([target_value])\n\n    # Use the seaborn heatmap function to visualize the data\n    ax = sns.heatmap(bool_df)\n\n    return bool_df, ax", "compilation_passed": true, "time": 0.39192795753479004, "tests_passed": true, "error": null}
{"code": "mask = dataframe.applymap(\n        lambda x: target_value in str(x)\n    )\n    ax = sns.heatmap(mask, cbar_kws={\"shrink\": 0.75})\n    plt.show()\n    return mask, ax", "compilation_passed": true, "time": 0.9490070343017578, "tests_passed": true, "error": null}
{"code": "mask = dataframe == target_value\n    ax = sns.heatmap(mask.astype(int))\n    return mask, ax", "compilation_passed": true, "time": 0.5290088653564453, "tests_passed": true, "error": null}
{"code": "# Initialize a boolean mask with False values\n    mask = np.zeros_like(dataframe, dtype=bool)\n\n    # Iterate through each row in the dataframe\n    for row, val in dataframe.iterrows():\n        # Convert the current row into a list\n        row_list = list(val)\n        # Check if the target value exists in the row\n        if target_value in row_list:\n            # Set the corresponding position in the mask to True if the target value is found in the row\n            mask[row] = True\n\n    # Create a heatmap using seaborn\n    ax = sns.heatmap(mask, cbar=False)\n\n    return (mask, ax)", "compilation_passed": true, "time": 0.00104522705078125, "tests_passed": false, "error": "NameError"}
{"code": "mask = dataframe == target_value\n    ax = sns.heatmap(mask)\n\n    return mask, ax", "compilation_passed": true, "time": 0.5945219993591309, "tests_passed": true, "error": null}
{"code": "target_value = str(target_value)\n    df_boolean = dataframe.astype(str).apply(lambda col: col.str.contains(target_value))\n    ax = sns.heatmap(df_boolean, cmap=sns.color_palette('Blues'), linewidth=1)\n    return df_boolean, ax", "compilation_passed": true, "time": 0.6699848175048828, "tests_passed": true, "error": null}
{"code": "# Search for occurrences of the target value in the DataFrame\n    mask = dataframe.applymap(lambda x: target_value in str(x))\n\n    # Create heatmap visualization\n    plt.figure(figsize=(16, 4))\n    ax = sns.heatmap(mask, cbar=False)\n\n    return mask, ax", "compilation_passed": true, "time": 0.05155611038208008, "tests_passed": true, "error": null}
{"code": "# Create a mask to identify where the target value exists in the data\n    mask = dataframe.applymap(lambda x: target_value in str(x))\n\n    # Initialize a matplotlib figure\n    fig, ax = plt.subplots()\n\n    # Create a heatmap of the mask\n    sns.heatmap(mask, annot=mask, fmt='', cbar=False, ax=ax)\n\n    # Return the mask and the Axes object\n    return mask, ax", "compilation_passed": true, "time": 0.05607771873474121, "tests_passed": true, "error": null}
{"code": "# \u0421\u043e\u0437\u0434\u0430\u0435\u043c \u043c\u0430\u0441\u043a\u0443\n    mask = (dataframe == target_value).astype(int)\n\n    # \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043c\u0430\u0441\u043a\u0443 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e heatmap\n    ax = sns.heatmap(mask, cmap='Greens', annot=True, fmt='d')\n\n    return mask, ax", "compilation_passed": true, "time": 0.12700486183166504, "tests_passed": true, "error": null}
{"code": "mask = dataframe == target_value\n    ax = sns.heatmap(mask)\n    return mask, ax", "compilation_passed": true, "time": 0.20845580101013184, "tests_passed": true, "error": null}
{"code": "# Search for occurrences of target value\n    target_mask = dataframe.applymap(\n        lambda x: True if str(x).find(target_value) != -1 else False)\n    # Visualize occurrences using heatmap\n    ax = sns.heatmap(target_mask)\n    return target_mask, ax", "compilation_passed": true, "time": 0.26801419258117676, "tests_passed": true, "error": null}
{"code": "# \u041f\u043e\u0438\u0441\u043a \u043f\u043e \u0441\u0442\u043e\u043b\u0431\u0446\u0430\u043c \u0438 \u0441\u0442\u0440\u043e\u043a\u0430\u043c\n    mask = dataframe.isin([target_value])\n    # \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044f \u0442\u0435\u043f\u043b\u043e\u0432\u043e\u0439 \u043a\u0430\u0440\u0442\u044b\n    _, ax = plt.subplots(figsize=(12, 5))\n    sns.heatmap(mask, cmap='Reds', ax=ax)\n    # \u0412\u043e\u0437\u0432\u0440\u0430\u0442 DataFrame \u043c\u0430\u0441\u043a\u0438 (\u0434\u043b\u044f \u043f\u0440\u043e\u0432\u0435\u0440\u043a\u0438) \u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 Axes (\u0434\u043b\u044f \u043e\u0442\u0440\u0438\u0441\u043e\u0432\u043a\u0438)\n    return mask, ax", "compilation_passed": true, "time": 0.09751701354980469, "tests_passed": true, "error": null}
{"code": "mask = dataframe.applymap(lambda x: x == target_value)\n    ax = sns.heatmap(mask, cmap='coolwarm', linewidth=0.5)\n    return mask, ax", "compilation_passed": true, "time": 0.11638188362121582, "tests_passed": true, "error": null}
{"code": "mask = dataframe.applymap(lambda x: x == target_value)\n    ax = sns.heatmap(mask, annot=dataframe, fmt='s', cmap='Greens')\n    return mask, ax", "compilation_passed": true, "time": 0.20460104942321777, "tests_passed": true, "error": null}
