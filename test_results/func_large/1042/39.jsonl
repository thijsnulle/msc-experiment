{"code": "# receive the message from the client socket\n    message = client_socket.recv(BUFFER_SIZE)\n    sender_email = input(\"Enter your email: \")\n    recipient_email = input(\"Enter recipient's email: \")\n    sender_password = getpass.getpass(prompt=\"Enter your password: \")\n\n    # create an SMTP session\n    smtp_session = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)\n    smtp_session.starttls()\n    smtp_session.login(sender_email, sender_password)\n\n    # create an email message\n    msg = EmailMessage()\n    msg.set_content(message.decode())\n    msg[\"Subject\"] = \"Email from Socket Server\"\n    msg[\"From\"] = sender_email\n    msg[\"To\"] = recipient_email\n\n    # send the email message\n    smtp_session.send_message(msg)\n    smtp_session.quit()", "compilation_passed": true, "time": 0.001995086669921875, "tests_passed": false, "error": "RuntimeError"}
{"code": "try:\n        client_message = client_socket.recv(BUFFER_SIZE).decode('utf-8')\n\n        print(f\"Message recieved from client {client_message}\")\n\n        email_sender = input(\"Please enter your email address: \")\n        email_password = getpass.getpass(\"Please enter your email password: \")\n        email_recipient = input(\"Please enter the recipient's email address: \")\n\n        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:\n            server.ehlo()\n            server.starttls()\n            server.ehlo()\n            server.login(email_sender, email_password)\n            email = EmailMessage()\n            email[\"From\"] = email_sender\n            email[\"To\"] = email_recipient\n            email[\"Subject\"] = \"Test Email\"\n            email.set_content(client_message)\n            server.send_message(email)\n            server.quit()\n\n    except Exception as e:\n        print(f\"An error occurred", "compilation_passed": false, "time": 0.0001251697540283203, "tests_passed": false, "error": "SyntaxError"}
{"code": "try:\n        msg = client_socket.recv(BUFFER_SIZE)\n        if not msg:\n            client_socket.close()\n            return\n\n        message = msg.decode()\n        print(f\"Message received from {addr}: {message}\")\n\n        email = EmailMessage()\n        email.set_content(message)\n        email[\"Subject\"] = f\"Message from {addr}\"\n\n        email_sender = input(\"Enter your email: \")\n        email_receiver = input(\"Enter the receiver's email: \")\n        password = getpass.getpass(\"Enter your email's password: \")\n\n        email[\"From\"] = email_sender\n        email[\"To\"] = email_receiver\n\n        server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)\n        server.starttls()\n        server.login(email_sender, password)\n        server.send_message(email)\n        server.quit()\n\n    except Exception as e:\n        print(f\"Error: {str(e)}\"", "compilation_passed": false, "time": 0.0002791881561279297, "tests_passed": false, "error": "SyntaxError"}
{"code": "from_email = input(\"Your Email: \")\n    to_email = input(\"Recipient's Email: \")\n    password = getpass.getpass(\"Password: \")\n    message = client_socket.recv(BUFFER_SIZE).decode()\n\n    email_message = EmailMessage()\n    email_message[\"Subject\"] = \"From your friend!\"\n    email_message[\"From\"] = from_email\n    email_message[\"To\"] = to_email\n    email_message.set_content(message)\n\n    with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:\n        server.starttls()\n        server.login(from_email, password)\n        server.sendmail(from_email, to_email, email_message.as_string())\n\n    print(f\"{message}\\nMessage sent\")", "compilation_passed": true, "time": 0.0019259452819824219, "tests_passed": false, "error": "RuntimeError"}
{"code": "email = EmailMessage()\n    email['Subject'] = 'Your message from server'\n    email['From'] = input('Enter your email: ')\n    email['To'] = input(\"Enter recipient's email: \")\n    email.set_content(client_socket.recv(BUFFER_SIZE).decode())\n\n    smtp = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)\n    smtp.starttls()\n    smtp.login(email['From'], getpass.getpass())\n    smtp.send_message(email)\n\n    print('Sending complete')", "compilation_passed": true, "time": 0.0021779537200927734, "tests_passed": false, "error": "RuntimeError"}
{"code": "from_email = input(\"Enter the email of the sender: \")\n    to_email = input(\"Enter the email of the recipient: \")\n\n    msg = EmailMessage()\n    msg.set_content(client_socket.recv(BUFFER_SIZE).decode('utf-8'))\n\n    email_pass = getpass.getpass(\"Enter the password of the sender: \")\n\n    server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)\n    server.starttls()\n    server.login(from_email, email_pass)\n    server.sendmail(from_email, to_email, msg.as_string())\n    server.quit()", "compilation_passed": true, "time": 0.0017781257629394531, "tests_passed": false, "error": "RuntimeError"}
{"code": "msg_len = client_socket.recv(4)\n    msg_len = int.from_bytes(msg_len, \"big\")\n    msg = client_socket.recv(msg_len).decode()\n\n    user = getpass.getpass(prompt=\"Please enter your email address: \")\n    passw = getpass.getpass(prompt=\"Please enter your email password: \")\n    to = input(\"Please enter the email address of the receiver: \")\n    with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:\n        server.starttls()\n        server.login(user, passw)\n        email = EmailMessage()\n        email[\"Subject\"] = \"Test\"\n        email[\"From\"] = user\n        email[\"To\"] = to\n        email.set_content(msg)\n        server.send_message(email)\n    client_socket.close()", "compilation_passed": true, "time": 0.0028307437896728516, "tests_passed": false, "error": "RuntimeError"}
{"code": "try:\n        from_addr = input(\"Your Email: \")\n        to_addr = input(\"Recipient Email: \")\n        password = getpass.getpass(\"Email Password: \")\n\n        message = EmailMessage()\n        message['Subject'] = 'Message from a TCP server'\n        message['From'] = from_addr\n        message['To'] = to_addr\n        message.set_content('This email was sent from a TCP server running on localhost:8000.')\n\n        smtp_server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)\n        smtp_server.sendmail(from_addr, to_addr, message.as_string())\n        smtp_server.quit()\n    except Exception as e:\n        print(f\"Error: {e}\")\n    finally:\n        client_socket.close()", "compilation_passed": true, "time": 0.002522706985473633, "tests_passed": true, "error": null}
{"code": "with client_socket:\n        data = client_socket.recv(BUFFER_SIZE)\n        if data:\n            msg = data.decode(\"utf-8\")\n            email_message = EmailMessage()\n            email_message[\"From\"] = msg[0]\n            email_message[\"To\"] = msg[1]\n            email_message[\"Subject\"] = msg[2]\n            email_message.set_content(msg[3])\n            print(\"Subject: \" + msg[2] + \"\\nTo: \" + msg[1] + \"\\nFrom: \" + msg[0])\n            smtp_client = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)\n            smtp_client.ehlo()\n            smtp_client.starttls()\n            smtp_client.login(msg[0], msg[4])\n            smtp_client.send_message(email_message)\n            smtp_client.close()", "compilation_passed": true, "time": 0.0027239322662353516, "tests_passed": false, "error": "IndexError"}
{"code": "print(\"Waiting for a new message...\")\n\n    # receive the email message from the client socket\n    message = client_socket.recv(BUFFER_SIZE)\n    message = message.decode(\"utf-8\")\n    print(f\"Received message: {message}\")\n    client_socket.close()\n\n    # send the email via an SMTP server\n    try:\n        sender = input(\"Please enter the email address you want to send from: \")\n        receiver = input(\"Please enter the email address you want to send to: \")\n        password = getpass.getpass()\n\n        msg = EmailMessage()\n        msg.set_content(message)\n\n        server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)\n        server.starttls()\n        server.login(sender, password)\n        server.send_message(msg, sender=sender, to=[receiver])\n        server.quit()\n        print(\"Message sent successfully!\")\n    except Exception as e:\n        print(f\"Error sending message", "compilation_passed": false, "time": 0.00013065338134765625, "tests_passed": false, "error": "SyntaxError"}
{"code": "try:\n        data = client_socket.recv(BUFFER_SIZE).decode('utf-8')\n        from_email = input(\"Enter your email address: \")\n        to_email = input(\"Enter recipient's email address: \")\n        email = EmailMessage()\n        email['From'] = from_email\n        email['To'] = to_email\n        email['Subject'] = \"Email from a client\"\n        email.set_content(data)\n\n        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as smtp:\n            smtp.starttls()\n            smtp.login(from_email, getpass.getpass(\"Enter password: \"))\n            smtp.send_message(email)\n    except Exception as e:\n        print(\"Error: \", e)\n    finally:\n        client_socket.close()", "compilation_passed": true, "time": 0.003907918930053711, "tests_passed": true, "error": null}
{"code": "username = input(\"Your email: \")\n    password = getpass.getpass()\n    to = input(\"Recipient's email: \")\n    message_bytes = client_socket.recv(BUFFER_SIZE)\n    message = message_bytes.decode(\"utf-8\")\n    with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as smtp_client:\n        smtp_client.starttls()\n        smtp_client.login(username, password)\n        email_message = EmailMessage()\n        email_message[\"Subject\"] = message[0]\n        email_message[\"From\"] = username\n        email_message[\"To\"] = to\n        email_message.set_content(message[1])\n        smtp_client.send_message(email_message)", "compilation_passed": true, "time": 0.002079010009765625, "tests_passed": false, "error": "RuntimeError"}
{"code": "# Receive message from the client socket\n    message = client_socket.recv(BUFFER_SIZE)\n\n    # Send the message as an email using SMTP\n    sender_email = input(\"Enter your email: \")\n    receiver_email = input(\"Enter the email to which the message is sent: \")\n    password = getpass.getpass()\n    try:\n        msg = EmailMessage()\n        msg[\"From\"] = sender_email\n        msg[\"To\"] = receiver_email\n        msg[\"Subject\"] = \"test\"\n        msg.set_content(message.decode(\"UTF-8\"))\n        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT, local_hostname=SMTP_SERVER) as smtp:\n            smtp.starttls()\n            smtp.login(sender_email, password)\n            smtp.send_message(msg)\n            print(f\"Message sent to {receiver_email} via {smtp}\")\n    except Exception as e:\n        print(f\"Error sending email:", "compilation_passed": false, "time": 0.00012063980102539062, "tests_passed": false, "error": "SyntaxError"}
{"code": "try:\n        print(\"[*] Listening ...\")\n        message = client_socket.recv(BUFFER_SIZE).decode()\n\n        # Check if a message was received\n        if message:\n            # Create an SMTP object and connect to the SMTP server\n            smtp = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)\n\n            # Start TLS encryption\n            smtp.starttls()\n\n            # Login to the SMTP server using the sender's credentials\n            sender_email = input(\"Enter your email: \")\n            sender_password = getpass.getpass(\"Enter your password: \")\n            smtp.login(sender_email, sender_password)\n\n            # Create an email message object\n            msg = EmailMessage()\n            msg[\"From\"] = sender_email\n            msg[\"To\"] = input(\"Enter recipient's email: \")\n            msg[\"Subject\"] = \"Message from TCP\"\n            msg.set_content(message)\n\n            # Send the message via the SMTP server\n", "compilation_passed": false, "time": 0.00021195411682128906, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Receive the message from the client socket.\n    message = client_socket.recv(BUFFER_SIZE).decode()\n\n    # Get the email and password details for sending the email.\n    # You can replace this with a function that prompts for the email,\n    # password, and recipient's email.\n    sender_email = input(\"Enter your email: \")\n    sender_password = getpass.getpass(\"Enter your password: \")\n    recipient_email = input(\"Enter recipient's email: \")\n\n    # Create the email message.\n    email_message = EmailMessage()\n    email_message[\"From\"] = sender_email\n    email_message[\"To\"] = recipient_email\n    email_message[\"Subject\"] = \"This email was sent by a Python program\"\n    email_message.set_content(message)\n\n    # Create the SMTP server object.\n    smtp_server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)\n    smtp_server.ehlo()\n    smtp_server.start", "compilation_passed": true, "time": 0.0018799304962158203, "tests_passed": false, "error": "RuntimeError"}
{"code": "data = client_socket.recv(BUFFER_SIZE)\n\n    if data.startswith(b\"sendmail \"):\n        data = data.decode()[9:]\n        email = data\n        print(\"Got message:\")\n        print(email)\n        sender_email = input(\"Enter sender's email: \")\n        recipient_email = input(\"Enter recipient's email: \")\n        sender_password = getpass.getpass(\"Enter sender's password: \")\n\n        message = EmailMessage()\n        message[\"Subject\"] = \"Message from server\"\n        message[\"From\"] = sender_email\n        message[\"To\"] = recipient_email\n        message.set_content(email)\n\n        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:\n            server.starttls()\n            server.login(sender_email, sender_password)\n            server.send_message(message)\n            print(\"Email sent successfully.\")\n\n    elif data.startswith(b\"sendmail_", "compilation_passed": false, "time": 0.00011491775512695312, "tests_passed": false, "error": "SyntaxError"}
{"code": "# receive message from client socket\n    message = client_socket.recv(BUFFER_SIZE)\n\n    # send email via an SMTP server\n    sender_email = input(\"Enter your email: \")\n    recipient_email = input(\"Enter recipient's email: \")\n    password = getpass.getpass(\"Enter your email's password: \")\n\n    # send message using the SMTP server\n    try:\n        server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)\n        server.starttls()\n        server.login(sender_email, password)\n        msg = EmailMessage()\n        msg['Subject'] = \"Message from %s\" % client_socket.getpeername()[0]\n        msg['From'] = sender_email\n        msg['To'] = recipient_email\n        msg.set_content(message.decode('utf-8'))\n        server.send_message(msg)\n        server.quit()\n        print('Email sent successfully')\n    except smtplib.SMTPAuthenticationError as e:\n        print(f\"", "compilation_passed": false, "time": 0.000102996826171875, "tests_passed": false, "error": "SyntaxError"}
{"code": "msg = EmailMessage()\n    msg[\"Subject\"] = client_socket.recv(BUFFER_SIZE).decode()\n    sender = client_socket.recv(BUFFER_SIZE).decode()\n    recipient = client_socket.recv(BUFFER_SIZE).decode()\n    msg[\"From\"] = sender\n    msg[\"To\"] = recipient\n    msg.set_content(client_socket.recv(BUFFER_SIZE).decode())\n\n    s = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)\n    s.starttls()\n    email = getpass.getpass()\n    password = getpass.getpass()\n    s.login(email, password)\n\n    s.send_message(msg)\n    s.quit()", "compilation_passed": true, "time": 0.00296783447265625, "tests_passed": true, "error": null}
{"code": "message_length = client_socket.recv(BUFFER_SIZE)\n    message_length = int(message_length.decode())\n    message = client_socket.recv(message_length).decode()\n\n    email_message = EmailMessage()\n    email_message[\"Subject\"] = \"Message from Client\"\n    email_message[\"From\"] = input(\"Please enter your email: \")\n    email_message[\"To\"] = input(\"Please enter recipient's email: \")\n    email_message.set_content(message)\n\n    with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:\n        server.starttls()\n        server.login(email_message[\"From\"], getpass.getpass(prompt=\"Password: \"))\n        server.send_message(email_message)", "compilation_passed": true, "time": 0.0019059181213378906, "tests_passed": false, "error": "ValueError"}
{"code": "msg = client_socket.recv(BUFFER_SIZE).decode()\n\n    # If no message received\n    if not msg:\n        return\n\n    email_from = input('Sender Email: ')\n    email_to = input('Recipient Email: ')\n    email_pass = getpass.getpass()\n    msg = EmailMessage()\n    msg['Subject'] = \"Python Server\"\n    msg.set_content(msg)\n    msg['From'] = email_from\n    msg['To'] = email_to\n\n    smtp_server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)\n    smtp_server.starttls()\n    smtp_server.login(email_from, email_pass)\n    smtp_server.send_message(msg)\n    smtp_server.quit()\n\n    return msg", "compilation_passed": true, "time": 0.0030710697174072266, "tests_passed": false, "error": "RuntimeError"}
{"code": "# Receive the message from the client socket.\n    message = client_socket.recv(BUFFER_SIZE).decode()\n    # Print the received message.\n    print(f\"Message received: {message}\")\n\n    # Get the sender's email, recipient's email, and sender's email password.\n    sender_email = input(\"Sender Email: \")\n    recipient_email = input(\"Recipient Email: \")\n    sender_password = getpass.getpass(prompt=\"Sender Password: \")\n\n    # Create an EmailMessage object with the subject and body of the message.\n    email = EmailMessage()\n    email[\"Subject\"] = \"Python SMTP Test\"\n    email[\"From\"] = sender_email\n    email[\"To\"] = recipient_email\n    email.set_content(message)\n\n    # Create a secure connection to the SMTP server and send the email.\n    with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:\n        server.starttls()\n        server.login(", "compilation_passed": false, "time": 0.00022292137145996094, "tests_passed": false, "error": "SyntaxError"}
{"code": "while True:\n        data = client_socket.recv(BUFFER_SIZE)\n        data = data.decode('utf-8')\n        if data == 'quit':\n            break\n\n    sender_email = input(\"Enter your email address: \")\n    receiver_email = input(\"Enter the receiver's email address: \")\n\n    with smtplib.SMTP_SSL(SMTP_SERVER, SMTP_PORT) as smtp_server:\n        smtp_server.set_debuglevel(1)\n        password = getpass.getpass(prompt=\"Enter your email password: \")\n        smtp_server.login(sender_email, password)\n        message = EmailMessage()\n        message.set_content(data)\n        smtp_server.send_message(message, sender_email, receiver_email)\n\n    client_socket.send(\"Done\".encode('utf-8'))\n    client_socket.close()", "compilation_passed": true, "time": 1.3136346340179443, "tests_passed": false, "error": "TimeoutError"}
{"code": "try:\n        # Receive message from client socket\n        data = client_socket.recv(BUFFER_SIZE).decode()\n\n        # Extract message and client name from received data\n        client_name, msg = data.split(\"::\")\n\n        # Create email message\n        email = EmailMessage()\n        email[\"From\"] = client_name\n        email[\"To\"] = input(\"To: \")\n        email[\"Subject\"] = \"ChatBot message\"\n        email.set_content(msg)\n\n        # Convert message to bytes using the smtplib module\n        msg_bytes = email.as_bytes()\n\n        # Establish connection to SMTP server\n        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:\n            server.starttls()\n            sender = input(\"Email: \")\n            password = getpass.getpass(\"Password: \")\n            server.login(sender, password)\n\n            # Send email using SMTP server\n            server.sendmail(sender, [email[\"To\"]],", "compilation_passed": false, "time": 0.0002789497375488281, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Receive the message from the client socket\n    msg = b\"\"\n    while True:\n        data = client_socket.recv(BUFFER_SIZE)\n        msg += data\n        if len(data) < BUFFER_SIZE:\n            break\n    msg = msg.decode(\"utf-8\")\n\n    # Prompt the user for the sender's email, recipient's email, and sender's email password\n    sender_email = input(\"Enter the sender's email: \")\n    recipient_email = input(\"Enter the recipient's email: \")\n    sender_password = getpass.getpass(\"Enter the sender's email password: \")\n\n    # Create an SMTP server object\n    server = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)\n\n    # Start TLS for security\n    server.starttls()\n\n    # Authenticate\n    server.login(sender_email, sender_password)\n\n    # Create an email message object\n    email = EmailMessage()\n    email[\"From\"] = sender_email\n", "compilation_passed": true, "time": 0.0024802684783935547, "tests_passed": false, "error": "RuntimeError"}
{"code": "try:\n        client_socket.sendall(\"You can send a message in the server and it will be sent as an email.\".encode())\n        client_socket.sendall(\"Please enter your sender email address: \".encode())\n        sender_email = client_socket.recv(BUFFER_SIZE).decode()\n        client_socket.sendall(\"Please enter the recipient email address: \".encode())\n        recipient_email = client_socket.recv(BUFFER_SIZE).decode()\n        client_socket.sendall(\"Please enter your password: \".encode())\n        sender_password = getpass.getpass(prompt=\"\", stream=None)\n        client_socket.sendall(\"Enter your message: \".encode())\n        message = client_socket.recv(BUFFER_SIZE).decode()\n        print(\"Sending email...\")\n        smtp = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)\n        smtp.starttls()\n        smtp.login(sender_email, sender_password)\n        ", "compilation_passed": false, "time": 0.0002410411834716797, "tests_passed": false, "error": "SyntaxError"}
{"code": "try:\n        # Receive and print the message from the client socket\n        data = client_socket.recv(BUFFER_SIZE)\n        print(\"Client message:\", data.decode())\n\n        # If the message is 'quit', close the client socket and return\n        if data.decode() == 'quit':\n            client_socket.close()\n            return\n\n        # Otherwise, send the message as an email using an SMTP server\n        else:\n            # Prompt the user to enter the sender's email, recipient's email, and sender's email password\n            sender_email = input(\"Enter sender email: \")\n            recipient_email = input(\"Enter recipient email: \")\n            password = getpass.getpass(\"Enter password: \")\n\n            # Set up the email message\n            msg = EmailMessage()\n            msg.set_content(data.decode())\n            msg[\"Subject\"] = \"Client Email\"\n            msg[\"From\"] = sender_email\n            msg[\"To\"] = recipient_email\n\n            # Send the email using the SMTP server\n            ", "compilation_passed": false, "time": 0.00019502639770507812, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Receive the message from the client socket\n    message = client_socket.recv(BUFFER_SIZE).decode('utf-8')\n\n    # Send the email using the SMTP server\n    try:\n        email = EmailMessage()\n        email['Subject'] = 'Email from server'\n        email['From'] = input(\"Sender's email: \")\n        email['To'] = input(\"Recipient's email: \")\n        email.set_content(message)\n\n        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as smtp:\n            smtp.starttls()\n            sender_email = email['From']\n            password = getpass.getpass(f\"Password for {sender_email}: \")\n            smtp.login(sender_email, password)\n            smtp.send_message(email)\n            print(\"Email sent successfully.\")\n    except smtplib.SMTPException as e:\n        print(\"Error sending email:\", e)", "compilation_passed": true, "time": 0.0019211769104003906, "tests_passed": false, "error": "RuntimeError"}
{"code": "try:\n        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:\n            server.starttls()\n\n            from_email = input(\"Your Email: \")\n            to_email = input(\"To Email: \")\n            password = getpass.getpass()\n\n            email = EmailMessage()\n\n            email['From'] = from_email\n            email['To'] = to_email\n            email['Subject'] = 'SMTP Test Email'\n\n            email.set_content('This is an email sent from a server to check if the SMTP is working.')\n            server.login(from_email, password)\n\n            message_size = client_socket.recv(BUFFER_SIZE)\n            message_size = int(message_size.decode('utf-8'))\n\n            message_data = b\"\"\n            while message_size > len(message_data):\n                message_data += client_socket.recv(BUFFER_SIZE)\n                message_data = message_data[:message_size]\n\n            email.set_content(message", "compilation_passed": false, "time": 0.00025391578674316406, "tests_passed": false, "error": "SyntaxError"}
{"code": "username = input(\"Enter your email: \")\n    password = getpass.getpass(\"Enter your password: \")\n    receiver_email = input(\"Enter receiver's email: \")\n    msg = client_socket.recv(BUFFER_SIZE).decode(\"utf-8\")\n    send_email(username, receiver_email, password, msg)\n    print(f\"Message sent successfully to {receiver_email}!\")", "compilation_passed": true, "time": 0.0017871856689453125, "tests_passed": false, "error": "RuntimeError"}
{"code": "from_email = input(\"Sender email: \")\n    to_email = input(\"Recipient email: \")\n    password = getpass.getpass(\"Password: \")\n\n    with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:\n        server.starttls()\n        server.login(from_email, password)\n        while True:\n            data = client_socket.recv(BUFFER_SIZE).decode(\"utf-8\")\n            if not data:\n                break\n            message = EmailMessage()\n            message[\"From\"] = from_email\n            message[\"To\"] = to_email\n            message[\"Subject\"] = \"Test\"\n            message.set_content(data)\n            server.send_message(message)\n            print(f\"Email sent: {message}\")\n\n        client_socket.close()", "compilation_passed": true, "time": 0.0018477439880371094, "tests_passed": false, "error": "RuntimeError"}
