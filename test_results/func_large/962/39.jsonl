{"code": "try:\n        # Create the target directory if it doesn't exist\n        Path(target_directory).mkdir(parents=True, exist_ok=True)\n    except Exception as e:\n        print(f\"Error creating target directory: {str(e)}\")\n        return 0\n\n    # List of extensions to consider\n    extensions = [\".txt\", \".docx\", \".xlsx\", \".csv\"]\n\n    # Create a list of file paths in the source directory\n    file_paths = glob.glob(os.path.join(source_directory, '**', '*'), recursive=True)\n\n    files_moved = 0\n    for file_path in file_paths:\n        filename = os.path.basename(file_path)\n        root_name, file_ext = os.path.splitext(filename)\n        # Check if the file is a directory and if it has a valid extension\n        if os.path.isfile(file_path) and file_ext in extensions:\n            # Check if the target file already exists\n            ", "compilation_passed": false, "time": 0.00024080276489257812, "tests_passed": false, "error": "IndentationError"}
{"code": "source_dir = Path(source_directory).resolve()\n    target_dir = Path(target_directory)\n\n    if not source_dir.is_dir():\n        raise FileNotFoundError(f\"Source directory not found: {source_dir}\")\n\n    if not target_dir.exists():\n        target_dir.mkdir(parents=True)\n\n    moved_files = []\n    naming_counter = {}\n\n    for filepath in glob.iglob(str(source_dir / '**/*'), recursive=True):\n        if os.path.isfile(filepath):\n            filename = Path(filepath).name\n\n            if filename.lower().endswith((\".txt\", \".docx\", \".xlsx\", \".csv\")):\n                if filename in naming_counter:\n                    naming_counter[filename] += 1\n                    new_filename = f\"{os.path.splitext(filename)[0]}-{naming_counter[filename]}.{Path(filepath).suffix}\"\n                else:\n", "compilation_passed": false, "time": 0.0002601146697998047, "tests_passed": false, "error": "IndentationError"}
{"code": "# Create a list of file extensions to search for\n    extensions = (\".txt\", \".docx\", \".xlsx\", \".csv\")\n\n    # Construct a glob pattern to match files with the given extensions\n    pattern = \"*\" + \"|*\".join(extensions)\n\n    # Resolve paths to absolute paths\n    source_directory = os.path.abspath(source_directory)\n    target_directory = os.path.abspath(target_directory)\n\n    # Create the target directory if it doesn't exist\n    os.makedirs(target_directory, exist_ok=True)\n\n    # Initialize a counter for the number of files moved\n    files_moved = 0\n\n    # Iterate over each matched file in the source directory\n    for file_path in glob.iglob(os.path.join(source_directory, \"**\", pattern), recursive=True):\n\n        # Extract the filename without extension\n        file_name = os.path.splitext(os.path.basename(file_path))[0]\n", "compilation_passed": true, "time": 0.0019488334655761719, "tests_passed": true, "error": null}
{"code": "# Ensure that source_directory exists\n    if not os.path.exists(source_directory):\n        raise FileNotFoundError(f\"Source directory {source_directory} does not exist.\")\n\n    # Create the target directory if it doesn't exist\n    if not os.path.exists(target_directory):\n        os.makedirs(target_directory)\n\n    # Count of files successfully moved\n    files_moved = 0\n\n    # Define the extensions to filter by\n    extensions = [\".txt\", \".docx\", \".xlsx\", \".csv\"]\n\n    # Use glob to get the file names\n    for ext in extensions:\n        pattern = f\"**/*{ext}\"\n        files = glob.glob(os.path.join(source_directory, pattern), recursive=True)\n\n        # Move the files to the target directory\n        for file_path in files:\n            filename = os.path.basename(file_path)\n\n            # Check if the file already exists in the target directory\n            while os.path.exists(os.path.join", "compilation_passed": false, "time": 0.00022411346435546875, "tests_passed": false, "error": "SyntaxError"}
{"code": "extensions = ('.txt', '.docx', '.xlsx', '.csv')\n    if not Path(source_directory).is_dir():\n        raise FileNotFoundError(f\"The source directory does not exist: {source_directory}\")\n    Path(target_directory).mkdir(parents=True, exist_ok=True)\n    moved_file_count = 0\n    for root, _, filenames in os.walk(source_directory):\n        for filename in filenames:\n            # Check the file extension\n            if os.path.splitext(filename)[1] not in extensions:\n                continue\n\n            # Check if there is a file with the same name in the target directory\n            original_filepath = os.path.join(root, filename)\n            target_filepath = os.path.join(target_directory, filename)\n            i = 0\n            while os.path.exists(target_filepath):\n                i += 1\n                filename_parts = os.path.splitext(filename)\n                filename = filename_parts[0", "compilation_passed": false, "time": 0.0002391338348388672, "tests_passed": false, "error": "SyntaxError"}
{"code": "try:\n        if os.path.exists(target_directory) is False:\n            os.makedirs(target_directory)\n        elif os.path.exists(target_directory) is True and os.listdir(target_directory) != []:\n            target_directory = Path(target_directory) / 'task_folder'\n            os.makedirs(target_directory)\n\n        for file in glob.iglob(f'{source_directory}/**/*.txt', recursive=True):\n            filename = Path(file).name\n            target_file = Path(target_directory) / filename\n            if os.path.exists(target_file):\n                new_filename = increment_filename(target_directory, filename)\n                target_file = Path(target_directory) / new_filename\n\n            shutil.move(file, target_file)\n\n        for file in glob.iglob(f'{source_directory}/**/*.docx', recursive=True):\n            filename = Path(file).name\n            target_file = Path(target_directory) / filename\n            if os", "compilation_passed": false, "time": 0.0002529621124267578, "tests_passed": false, "error": "SyntaxError"}
{"code": "extensions = [\".txt\", \".docx\", \".xlsx\", \".csv\"]\n\n    if not os.path.exists(source_directory):\n        raise FileNotFoundError(\"Source directory does not exist\")\n\n    os.makedirs(target_directory, exist_ok=True)\n\n    files_to_move = [\n        file for file in glob.iglob(os.path.join(source_directory, \"**\", \"*\"), recursive=True)\n        if os.path.isfile(file) and os.path.splitext(file)[1].lower() in extensions\n    ]\n\n    moved_files = 0\n    for file in files_to_move:\n        filename = os.path.basename(file)\n        target_file = os.path.join(target_directory, filename)\n\n        if os.path.exists(target_file):\n            name, ext = os.path.splitext(filename)\n            index = 1\n            while os.path.exists(target_file):\n                target", "compilation_passed": true, "time": 0.001997232437133789, "tests_passed": true, "error": null}
{"code": "# Get the absolute paths for both directories\n    source_path = os.path.abspath(source_directory)\n    target_path = os.path.abspath(target_directory)\n\n    # Check if source directory exists\n    if not os.path.exists(source_path):\n        raise FileNotFoundError(f\"Source directory '{source_path}' does not exist.\")\n\n    # Create the target directory if it doesn't exist\n    Path(target_path).mkdir(parents=True, exist_ok=True)\n\n    # Define file extensions to search for\n    extensions = [\".txt\", \".docx\", \".xlsx\", \".csv\"]\n\n    # Initialize counter for successful file moves\n    moved_files_count = 0\n\n    # Iterate through files with specific extensions in the source directory and its subdirectories\n    for ext in extensions:\n        for file in glob.iglob(os.path.join(source_path, \"**\", f\"*{ext}\"), recursive=True):\n            # Get the filename with its extension", "compilation_passed": false, "time": 0.00020384788513183594, "tests_passed": false, "error": "IndentationError"}
{"code": "if not os.path.exists(source_directory):\n        raise FileNotFoundError(f\"Source directory not found: {source_directory}\")\n\n    os.makedirs(target_directory, exist_ok=True)\n\n    source_path = Path(source_directory)\n    target_path = Path(target_directory)\n    total_moved = 0\n\n    for ext in (\".txt\", \".docx\", \".xlsx\", \".csv\"):\n        for filepath in source_path.rglob(f\"*{ext}\"):\n            filepath = str(filepath)  # Convert Path to string\n\n            if not os.path.isfile(filepath):\n                continue  # Skip if it's not a regular file\n\n            filename = os.path.basename(filepath)\n            target_filepath = os.path.join(target_path, filename)\n\n            while os.path.exists(target_filepath):\n                name, ext = os.path.splitext(filename)\n                match = re.search(r\"-\\d", "compilation_passed": false, "time": 0.00010204315185546875, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Convert user input to absolute paths\n    source_path = Path(source_directory).resolve()\n    target_path = Path(target_directory).resolve()\n\n    # Check if source directory exists\n    if not source_path.exists():\n        raise FileNotFoundError(f\"Source directory '{source_path}' does not exist\")\n\n    # Create target directory if it does not exist\n    target_path.mkdir(parents=True, exist_ok=True)\n\n    # Count moved files\n    moved_count = 0\n\n    # Define file extensions to consider\n    extensions = (\".txt\", \".docx\", \".xlsx\", \".csv\")\n\n    # Scan files in source directory recursively and filter by extensions\n    for file in source_path.glob('**/*'):\n        if file.is_file() and file.suffix in extensions:\n            filename = file.name\n            # Check if a file with the same name already exists in the target directory\n            if (target_path / filename).exists():\n                # If it exists, rename the file", "compilation_passed": false, "time": 0.0001919269561767578, "tests_passed": false, "error": "IndentationError"}
{"code": "# Check if source directory exists\n    if not Path(source_directory).is_dir():\n        raise FileNotFoundError(f\"Source directory does not exist: {source_directory}\")\n\n    # Create target directory if it doesn't exist\n    Path(target_directory).mkdir(parents=True, exist_ok=True)\n\n    # Find files recursively in the source directory\n    files = glob.glob(source_directory + '/**/*', recursive=True)\n\n    # Filter files by extension and group them by their base name\n    file_groups = {}\n    for file in files:\n        if os.path.isfile(file) and any(file.endswith(ext) for ext in ('.txt', '.docx', '.xlsx', '.csv')):\n            base_name, extension = os.path.splitext(os.path.basename(file))\n            if base_name not in file_groups:\n                file_groups[base_name] = []\n            file_groups[base_name].append(file)\n\n    #", "compilation_passed": true, "time": 0.001857757568359375, "tests_passed": true, "error": null}
{"code": "try:\n        # Check if the source directory exists, if not, raise an exception\n        if not os.path.exists(source_directory):\n            raise FileNotFoundError(f\"The source directory '{source_directory}' does not exist.\")\n\n        # Create the target directory if it does not exist\n        os.makedirs(target_directory, exist_ok=True)\n\n        # List the files with specific extensions in the source directory and its subdirectories\n        files = glob.glob(f\"{source_directory}/**/*.{{txt,docx,xlsx,csv}}\", recursive=True)\n\n        # Loop through the files and move them to the target directory\n        moved_files = 0\n        for file in files:\n            file_name = os.path.basename(file)\n            target_file_path = os.path.join(target_directory, file_name)\n\n            # Handle renaming of files due to naming conflicts\n            if os.path.exists(target_file_path):\n                i = 1\n                while os.path.exists(target_file", "compilation_passed": false, "time": 0.00022029876708984375, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Check if source_directory exists\n    if not os.path.isdir(source_directory):\n        raise FileNotFoundError(f\"Source directory '{source_directory}' does not exist.\")\n\n    # Create target_directory if it doesn't exist\n    os.makedirs(target_directory, exist_ok=True)\n\n    # Find all files in source_directory and subdirectories with the specified file extensions\n    file_extensions = ['*.txt', '*.docx', '*.xlsx', '*.csv']\n    file_paths = []\n    for ext in file_extensions:\n        file_paths.extend(glob.glob(os.path.join(source_directory, '**', ext), recursive=True))\n\n    # Move files to target_directory, handling naming conflicts\n    files_moved = 0\n    for file_path in file_paths:\n        file_name = os.path.basename(file_path)\n        target_file_path = os.path.join(target_directory, file_name)\n        if os.", "compilation_passed": false, "time": 0.0002079010009765625, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Create target_directory if it doesn't exist\n    target_directory = Path(target_directory)\n    if not target_directory.exists():\n        target_directory.mkdir(parents=True, exist_ok=True)\n\n    # Define the source directory path\n    source_directory = Path(source_directory)\n    # Check if source directory exists\n    if not source_directory.exists():\n        raise FileNotFoundError(f\"Directory '{source_directory}' does not exist.\")\n\n    # List the files in source directory with specific extensions\n    files_to_move = source_directory.rglob(\"*.txt\")\n    files_to_move += source_directory.rglob(\"*.docx\")\n    files_to_move += source_directory.rglob(\"*.xlsx\")\n    files_to_move += source_directory.rglob(\"*.csv\")\n\n    # Move files to target directory\n    num_moved_files = 0\n    for file in files_to_move:\n        file_name = file.name\n        target", "compilation_passed": true, "time": 0.0017578601837158203, "tests_passed": false, "error": "TypeError"}
{"code": "# Define the desired file extensions to process\n    file_extensions = (\".txt\", \".docx\", \".xlsx\", \".csv\")\n\n    # Create the target directory if it doesn't exist\n    Path(target_directory).mkdir(parents=True, exist_ok=True)\n\n    # Scan the source directory recursively for files\n    files = glob.glob(f\"{source_directory}/**/*\", recursive=True)\n\n    # Counter for successful file moves\n    files_moved = 0\n\n    # Iterate through each file\n    for file_path in files:\n        # Check if the file exists and is a file\n        if os.path.isfile(file_path):\n            file_name = os.path.basename(file_path)\n            file_name_parts = os.path.splitext(file_name)\n            file_extension = file_name_parts[1]\n\n            # Check if the file extension is valid\n            if file_extension in file_extensions:\n                new_file_name = file_name\n", "compilation_passed": true, "time": 0.001783132553100586, "tests_passed": true, "error": null}
{"code": "# Define the extensions to filter the files\n    extensions_to_filter = (\".txt\", \".docx\", \".xlsx\", \".csv\")\n\n    # Get a list of all filepaths in the source directory with the specified extensions\n    all_files = glob.glob(source_directory + \"/**/*\", recursive=True)\n    filtered_files = [\n        file_path\n        for file_path in all_files\n        if Path(file_path).suffix.lower() in extensions_to_filter\n    ]\n\n    # Check if the target_directory exists, create it if not\n    if not os.path.exists(target_directory):\n        os.makedirs(target_directory)\n\n    # Iterate over the filtered files\n    file_count = 0\n    for file_path in filtered_files:\n        file_count += 1\n        file_name = Path(file_path).name\n        target_file_path = Path(target_directory) / file_name\n\n        # If there is already a file with the same name, append a", "compilation_passed": true, "time": 0.001764059066772461, "tests_passed": true, "error": null}
{"code": "try:\n        source_path = Path(source_directory).resolve()\n        if not os.path.isdir(source_path):\n            raise FileNotFoundError(f\"Source directory not found: {source_path}\")\n\n        # create target directory if it doesn't exist\n        target_path = Path(target_directory).resolve()\n        if not os.path.exists(target_path):\n            os.makedirs(target_path)\n\n        # Find files in source directory that have the following extensions: .txt, .docx, .xlsx, .csv\n        file_extensions = (\".txt\", \".docx\", \".xlsx\", \".csv\")\n        files_to_move = [\n            file for file in glob.iglob(os.path.join(source_path, '**', '*'), recursive=True)\n            if os.path.isfile(file) and os.path.splitext(file)[1] in file_extensions\n        ]\n\n        # Move files from source to target directory, handle", "compilation_passed": false, "time": 0.0002181529998779297, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Get absolute paths for the source and target directories\n    source_directory = os.path.abspath(source_directory)\n    target_directory = os.path.abspath(target_directory)\n\n    # Check if the source directory exists\n    if not os.path.exists(source_directory):\n        raise FileNotFoundError(f\"Source directory does not exist: {source_directory}\")\n\n    # Create the target directory if it doesn't exist\n    os.makedirs(target_directory, exist_ok=True)\n\n    # Find files with the specified extensions in the source directory (recursively)\n    # You can adjust the file extensions as needed\n    target_extensions = [\"*.txt\", \"*.docx\", \"*.xlsx\", \"*.csv\"]\n    matching_files = []\n    for ext in target_extensions:\n        matching_files += glob.glob(os.path.join(source_directory, \"**\", ext), recursive=True)\n\n    files_moved = 0\n    for file_path in matching_files:\n        ", "compilation_passed": false, "time": 0.00019669532775878906, "tests_passed": false, "error": "IndentationError"}
{"code": "# Define the extensions of files to include\n    extensions = [\"txt\", \"docx\", \"xlsx\", \"csv\"]\n\n    # Check if the source directory exists\n    if not os.path.exists(source_directory):\n        raise FileNotFoundError(f\"Source directory '{source_directory}' does not exist.\")\n\n    # Create the target directory if it doesn't exist\n    os.makedirs(target_directory, exist_ok=True)\n\n    # Initialize a dictionary to track filenames and their counts\n    filename_counts = {}\n\n    # Loop through all files in the source directory recursively\n    for ext in extensions:\n        files = glob.glob(os.path.join(source_directory, f\"**/*.{ext}\"), recursive=True)\n        for file in files:\n            filename = os.path.basename(file)\n\n            # If the filename is already in the filename_counts dictionary,\n            # it's a duplicate and should be renamed\n            if filename in filename_counts:\n                # Increment the filename count\n                filename_counts", "compilation_passed": true, "time": 0.0019447803497314453, "tests_passed": true, "error": null}
{"code": "extensions = (\".txt\", \".docx\", \".xlsx\", \".csv\")\n\n    # Check if source directory exists\n    source_directory = Path(source_directory)\n    if not source_directory.is_dir():\n        raise FileNotFoundError(f\"Source directory '{source_directory}' does not exist\")\n\n    # Create target directory if it doesn't exist\n    target_directory = Path(target_directory)\n    target_directory.mkdir(parents=True, exist_ok=True)\n\n    # Search for files with matching extensions recursively\n    matching_files = glob.iglob(str(source_directory / \"**\" / \"*\"), recursive=True)\n    matching_files = [Path(file) for file in matching_files if file.endswith(extensions)]\n\n    moved_files_count = 0\n    for source_file in matching_files:\n        target_file_path = target_directory / source_file.name\n\n        # Check for naming conflicts in the target directory\n        if target_file_path.exists():", "compilation_passed": false, "time": 0.0002181529998779297, "tests_passed": false, "error": "IndentationError"}
{"code": "extensions = ('.txt', '.docx', '.xlsx', '.csv')\n    target_directory = Path(target_directory)\n\n    if not target_directory.exists():\n        target_directory.mkdir(parents=True)\n\n    count = 0\n    for file_path in glob.iglob(f'{source_directory}/**/*', recursive=True):\n        if os.path.isfile(file_path):\n            base_name = os.path.basename(file_path)\n            file_name, file_ext = os.path.splitext(base_name)\n\n            if file_ext.lower() in extensions:\n                target_file = target_directory / base_name\n\n                if target_file.exists():\n                    i = 1\n                    while target_file.exists():\n                        new_name = f'{file_name}-{i}{file_ext}'\n                        target_file = target_directory / new_name\n                        i += 1\n\n                shutil.move(file_path, target_file)", "compilation_passed": true, "time": 0.0019049644470214844, "tests_passed": true, "error": null}
{"code": "# Validate source directory\n    source_dir = Path(source_directory)\n    if not source_dir.is_dir():\n        raise FileNotFoundError(f\"Source directory not found: {source_directory}\")\n\n    # Create target directory if it doesn't exist\n    target_dir = Path(target_directory)\n    if not target_dir.is_dir():\n        target_dir.mkdir(parents=True, exist_ok=True)\n\n    # Initialize counters\n    total_files = 0\n    moved_files = 0\n\n    # Set the file extensions to look for\n    file_extensions = {\".txt\", \".docx\", \".xlsx\", \".csv\"}\n\n    # Scan the source directory recursively\n    for file_path in glob.iglob(str(source_dir / \"**\"), recursive=True):\n        # Check if it is a file and if its extension is valid\n        if os.path.isfile(file_path) and os.path.splitext(file_path)[1] in file_extensions:\n            ", "compilation_passed": false, "time": 0.00021123886108398438, "tests_passed": false, "error": "IndentationError"}
{"code": "try:\n        # Create the target directory if it doesn't exist\n        Path(target_directory).mkdir(exist_ok=True)\n\n        # Initialize variables\n        file_extensions = ['.txt', '.docx', '.xlsx', '.csv']\n        files_moved = 0\n\n        # Iterate over all files in the source directory recursively\n        for filepath in glob.iglob(source_directory + '**/*', recursive=True):\n            if os.path.isfile(filepath):\n                filename, extension = os.path.splitext(filepath)\n\n                # Check if the file has one of the specified extensions\n                if extension in file_extensions:\n                    # Create the target filename with the same extension\n                    target_filename = os.path.join(target_directory, os.path.basename(filepath))\n\n                    # Handle duplicate names by adding a suffix\n                    if os.path.exists(target_filename):\n                        suffix = 1\n                        while os.path.exists(target_filename + f", "compilation_passed": false, "time": 0.00021195411682128906, "tests_passed": false, "error": "SyntaxError"}
{"code": "try:\n        os.makedirs(target_directory, exist_ok=True)\n        file_extensions = [\".txt\", \".docx\", \".xlsx\", \".csv\"]\n        moved_count = 0\n        for file in glob.iglob(source_directory + \"/**/*\", recursive=True):\n            if not Path(file).is_file():\n                continue\n            file_extension = Path(file).suffix\n            if file_extension in file_extensions:\n                target_path = Path(target_directory, Path(file).name)\n                if target_path.exists():\n                    counter = 1\n                    while target_path.exists():\n                        new_file_name = f\"{Path(file).stem}-{counter}{file_extension}\"\n                        target_path = Path(target_directory, new_file_name)\n                        counter += 1\n                shutil.copy2(file, target_path)\n                moved_count += 1\n        return moved_count\n    except FileNotFoundError as err", "compilation_passed": false, "time": 0.00024771690368652344, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Initialize count and target directory\n    count = 0\n    Path(target_directory).mkdir(parents=True, exist_ok=True)\n\n    # Define the extensions to process\n    extensions = (\".txt\", \".docx\", \".xlsx\", \".csv\")\n\n    # Get the list of files in the source directory\n    file_list = glob.glob(f\"{source_directory}/**/*\", recursive=True)\n\n    # Check if the source directory contains any files\n    if not any(file_list):\n        print(\"No files found in the source directory.\")\n        return 0\n\n    # Iterate over the files\n    for filename in file_list:\n        # Get the file extension and name\n        extension = os.path.splitext(filename)[1]\n\n        # Check if the file extension is in the specified extensions\n        if extension in extensions:\n            # Get the original file name without extension\n            original_name = os.path.splitext(os.path.basename(filename))[0]\n\n            # Initialize", "compilation_passed": true, "time": 0.0024709701538085938, "tests_passed": true, "error": null}
{"code": "if not Path(source_directory).exists():\n        raise FileNotFoundError(f\"The directory '{source_directory}' does not exist.\")\n\n    extensions = [\".txt\", \".docx\", \".xlsx\", \".csv\"]\n    files = glob.glob(f\"{source_directory}/**/*\", recursive=True)\n\n    moved_count = 0\n    for file in files:\n        base_name, extension = os.path.splitext(file)\n        if extension.lower() in extensions:\n            target_file = os.path.join(target_directory, os.path.basename(file))\n\n            if os.path.exists(target_file):\n                index = 1\n                while os.path.exists(target_file):\n                    basename, ext = os.path.splitext(os.path.basename(file))\n                    target_file = os.path.join(\n                        target_directory, f\"{basename}-{index}{ext}\"\n                    )\n                    index += 1", "compilation_passed": true, "time": 0.0018579959869384766, "tests_passed": true, "error": null}
{"code": "# Check if source_directory exists and raise an error if not\n    if not os.path.exists(source_directory):\n        raise FileNotFoundError(f\"Source directory {source_directory} does not exist.\")\n\n    # Define the target directory and create it if it doesn't exist\n    Path(target_directory).mkdir(parents=True, exist_ok=True)\n\n    # Initialize counters\n    moved_count = 0\n    conflicts_count = 0\n    duplicates_count = 0\n\n    # Define the extensions to consider\n    extensions = [\".txt\", \".docx\", \".xlsx\", \".csv\"]\n\n    # Search for files with the defined extensions recursively in the source directory\n    for extension in extensions:\n        for file_path in glob.glob(os.path.join(source_directory, \"**\", f\"*{extension}\"), recursive=True):\n            # Extract the filename and extension from the file path\n            filename = os.path.basename(file_path)\n            file_extension = os.path", "compilation_passed": true, "time": 0.0019440650939941406, "tests_passed": true, "error": null}
{"code": "extensions = [\".txt\", \".docx\", \".xlsx\", \".csv\"]\n    target_dir = Path(target_directory)\n    target_dir.mkdir(parents=True, exist_ok=True)\n\n    # Get list of files in the source directory\n    all_files = glob.glob(os.path.join(source_directory, \"**\", \"*\"), recursive=True)\n    files_to_move = []\n\n    # Filter the files by extensions\n    for file in all_files:\n        if os.path.splitext(file)[1].lower() in extensions:\n            files_to_move.append(file)\n\n    # Move the files while handling conflicts\n    moved_files_count = 0\n    for file in files_to_move:\n        file_name, extension = os.path.splitext(os.path.basename(file))\n        target_file_path = target_dir / f\"{file_name}{extension}\"\n        i = 1\n\n        # Handle conflicts by renaming dup", "compilation_passed": true, "time": 0.0017938613891601562, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(source_directory):\n        raise FileNotFoundError(f\"Source directory {source_directory} does not exist\")\n\n    target_directory = Path(target_directory).resolve()\n    if not target_directory.exists():\n        target_directory.mkdir(parents=True, exist_ok=True)\n\n    file_extensions = [\".txt\", \".docx\", \".xlsx\", \".csv\"]\n\n    num_moved_files = 0\n    for file_ext in file_extensions:\n        for file_path in glob.glob(os.path.join(source_directory, \"**\", f\"*{file_ext}\"), recursive=True):\n            file_name = os.path.basename(file_path)\n            target_file_path = os.path.join(target_directory, file_name)\n            counter = 1\n            while os.path.exists(target_file_path):\n                file_name_parts = os.path.splitext(file_name)\n                renamed_file", "compilation_passed": true, "time": 0.0019979476928710938, "tests_passed": true, "error": null}
{"code": "source_path = Path(source_directory)\n    target_path = Path(target_directory)\n    extensions = [\".txt\", \".docx\", \".xlsx\", \".csv\"]\n\n    if not source_path.exists():\n        raise FileNotFoundError(f\"Source directory '{source_path.resolve()}' does not exist.\")\n\n    # Create target directory if it does not exist\n    if not target_path.exists():\n        target_path.mkdir(parents=True, exist_ok=True)\n\n    # Find files recursively with specific extensions\n    files = glob.glob(f\"{source_path.resolve().as_posix()}/**/*\", recursive=True)\n    files = [file for file in files if any(file.lower().endswith(ext) for ext in extensions)]\n\n    # Move files to target directory, handling naming conflicts\n    num_moved = 0\n    for file in files:\n        source_file = Path(file)\n        destination_file = target_path / source_file.name\n\n", "compilation_passed": true, "time": 0.0019309520721435547, "tests_passed": true, "error": null}
