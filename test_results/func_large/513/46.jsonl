{"code": "if not data:\n        raise ValueError(\"The data list is empty\")\n    if column not in ['Date', 'Steps', 'Calories Burned', 'Distance Walked']:\n        raise KeyError(\"The specified column is not valid\")\n\n    df = pd.DataFrame(data, columns=['Date', 'Steps', 'Calories Burned', 'Distance Walked'])\n\n    if df[['Steps', 'Calories Burned', 'Distance Walked']].min().any() < 0:\n        raise ValueError(\"The numeric values for steps, calories burned, and distance walked must be non-negative\")\n\n    # Create a new DataFrame with the selected column and rename it\n    df_selected = df[column].rename(column)\n\n    # Calculate the sum, mean, minimum, and maximum of the selected column\n    stats = {\n        'sum': df_selected.sum(),\n        'mean': df_selected.mean(),\n        'min': df_selected.min(),\n        'max': df_selected.max()\n", "compilation_passed": false, "time": 0.00030994415283203125, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not data:\n        raise ValueError('Data cannot be empty')\n\n    # convert data to a dataframe and check for invalid values\n    df = pd.DataFrame(data, columns=['Date', 'Steps', 'Calories Burned', 'Distance Walked'])\n    invalid_data = df[df.loc[:, 'Steps':'Distance Walked'] < 0]\n    if not invalid_data.empty:\n        raise ValueError('Invalid numeric values found in steps, calories burned, and distance walked')\n\n    df['Date'] = df['Date'].apply(lambda x: x.strftime('%Y-%m-%d'))  # convert date to str\n    df.set_index('Date', inplace=True)\n\n    # get the column index\n    col_index = {\n        'Date': 0,\n        'Steps': 1,\n        'Calories Burned': 2,\n        'Distance Walked': 3\n    }[column]\n\n    # calculate stats and plot\n    stats = df[column].agg(['sum', 'mean', 'min'", "compilation_passed": false, "time": 0.0002410411834716797, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not data:\n        raise ValueError(\"Data list is empty\")\n\n    for row in data:\n        for i in range(1, len(row)):  # start at 1 because 0 is date\n            if row[i] < 0:\n                raise ValueError(f\"Invalid numeric value at row {row} for column {i}\")\n\n    # Create a pandas DataFrame with the data\n    df = pd.DataFrame(data, columns=['Date', 'Steps', 'Calories Burned', 'Distance Walked'])\n\n    if column not in df.columns:\n        raise KeyError(f\"Column '{column}' not in data\")\n\n    # Calculate the sum, mean, min, and max of the specified column\n    sum_val = df[column].sum()\n    mean_val = df[column].mean()\n    min_val = df[column].min()\n    max_val = df[column].max()\n\n    # Create a dictionary with the sum, mean, min, max of the specified column\n    stats = {'sum': sum_val", "compilation_passed": false, "time": 0.00024390220642089844, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Check if the data list is empty\n    if len(data) == 0:\n        raise ValueError(\"Data list is empty\")\n\n    # Check if the column is valid\n    valid_columns = {\n        'Date': 0,\n        'Steps': 1,\n        'Calories Burned': 2,\n        'Distance Walked': 3\n    }\n\n    try:\n        column_index = valid_columns[column]\n    except KeyError as e:\n        raise KeyError(f\"{e} is not a valid column name\") from e\n\n    # Check if all numeric values are non-negative\n    for row in data:\n        if any(value < 0 for value in row[1:]):\n            raise ValueError(\"Numeric values must be non-negative\")\n\n    # Convert data to a pandas DataFrame\n    df = pd.DataFrame(data, columns=['Date', 'Steps', 'Calories Burned', 'Distance Walked'])\n\n    # Select the specified column\n    column_values = df[column]\n\n    # Compute sum", "compilation_passed": true, "time": 0.0022411346435546875, "tests_passed": false, "error": "TypeError"}
{"code": "# Validate the inputs\n    if len(data) == 0:\n        raise ValueError(\"The input list must not be empty.\")\n\n    if column not in ['Date', 'Steps', 'Calories Burned', 'Distance Walked']:\n        raise KeyError(\"Invalid column. Allowed columns are: Date, Steps, Calories Burned, Distance Walked.\")\n\n    column_index = ['Date', 'Steps', 'Calories Burned', 'Distance Walked'].index(column)\n\n    for row in data:\n        if column_index < len(row) and column_index > 0:\n            if row[column_index] < 0:\n                raise ValueError(\"Numeric values must be non-negative.\")\n\n    # Create a dataframe and compute the sum, mean, min, and max of the column\n    df = pd.DataFrame(data=data)\n    df.columns = ['Date', 'Steps', 'Calories Burned', 'Distance Walked']\n\n    stats = {}\n    stats['sum']", "compilation_passed": true, "time": 0.0017390251159667969, "tests_passed": false, "error": "KeyError"}
{"code": "if not data:\n        raise ValueError(\"The data list is empty\")\n\n    cols = ['Date', 'Steps', 'Calories Burned', 'Distance Walked']\n    if column not in cols:\n        raise KeyError(\"The specified column is not valid\")\n\n    dates = [item[0] for item in data]\n\n    values = [item[cols.index(column)] for item in data]\n    if any(x < 0 for x in values):\n        raise ValueError(\"The data is negative\")\n\n    df = pd.DataFrame({'Date': dates, column: values})\n    df = df.set_index('Date')\n    df_stats = df[column].describe().to_dict()\n    df_stats.pop('count', None)  # Remove the count, since it is not required.\n\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    df[column].plot(ax=ax)\n    plt.title('Line Chart of ' + column)\n    plt.", "compilation_passed": false, "time": 0.00028586387634277344, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Check if the column is valid\n    if column not in ['Date', 'Steps', 'Calories Burned', 'Distance Walked']:\n        raise KeyError(\"Invalid column specified.\")\n    # Check if the data list is empty\n    if len(data) == 0:\n        raise ValueError(\"Data list cannot be empty.\")\n    # Check if any of the numeric values are negative\n    for d in data:\n        if any(v < 0 for v in d[1:]):\n            raise ValueError(\"Numeric values must not be negative.\")\n\n    # Convert the data to a pandas DataFrame\n    df = pd.DataFrame(data, columns=['Date', 'Steps', 'Calories Burned', 'Distance Walked'])\n\n    # Extract the specified column\n    col_data = df[column]\n\n    # Calculate the sum, mean, min, and max of the column\n    stats = {'sum': col_data.sum(),\n             'mean': col_data.mean(),\n             'min': col_data.min(),\n", "compilation_passed": false, "time": 0.00022220611572265625, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not data:\n        raise ValueError(\"No data is passed to the function.\")\n\n    valid_columns = [\"Date\", \"Steps\", \"Calories Burned\", \"Distance Walked\"]\n    if column not in valid_columns:\n        raise KeyError(f\"{column} is not a valid column\")\n\n    # Convert datetime object in the first column to string in the same column\n    data = [[row[0].strftime(\"%Y-%m-%d\")] + row[1:] for row in data]\n\n    # Convert the list to a DataFrame for easy manipulation\n    df = pd.DataFrame(data, columns=valid_columns)\n\n    # Convert Date column to string for plotting\n    df[\"Date\"] = df[\"Date\"].astype(str)\n\n    # Validate numeric values are non-negative\n    if df[[\"Steps\", \"Calories Burned\", \"Distance Walked\"]].any(axis=None, skipna=True) <= 0:\n        raise ValueError(\"Numeric values cannot be negative.\"", "compilation_passed": false, "time": 0.00022602081298828125, "tests_passed": false, "error": "SyntaxError"}
{"code": "# --------------------------------------------------------------------------\n    # Write code here to extract the values from the given column\n    # and create a list of the corresponding numeric values\n    # Raise ValueError if any of the extracted numeric values are negative\n    # --------------------------------------------------------------------------\n    # --------------------------------------------------------------------------\n    # Write code here to calculate the sum, mean, min, and max of the extracted\n    # values and add them to the dictionary as specified in the requirements\n    # --------------------------------------------------------------------------\n    # --------------------------------------------------------------------------\n    # Write code here to draw a line chart where:\n    # - Date is on the x-axis\n    # - The column value is on the y-", "compilation_passed": true, "time": 0.0020868778228759766, "tests_passed": false, "error": "TypeError"}
{"code": "# Check if the data list is empty\n    if not data:\n        raise ValueError(\"Empty data list\")\n\n    # Check if the specified column is valid\n    if column not in [\"Date\", \"Steps\", \"Calories Burned\", \"Distance Walked\"]:\n        raise KeyError(f\"Invalid column: {column}\")\n\n    # Create a dictionary of column indices\n    column_indices = {\n        \"Date\": 0,\n        \"Steps\": 1,\n        \"Calories Burned\": 2,\n        \"Distance Walked\": 3,\n    }\n\n    # Extract the column data into a list\n    column_data = [row[column_indices[column]] for row in data]\n\n    # Check if any of the numeric values are negative\n    if any(x < 0 for x in column_data[1:]):\n        raise ValueError(\"Negative numeric values in the data list\")\n\n    # Create a pandas Series for the column data\n    column_series = pd.Series(column_data[1:])\n\n    # Create a dictionary", "compilation_passed": true, "time": 0.0016193389892578125, "tests_passed": false, "error": "TypeError"}
{"code": "# Validate that data is not empty.\n    if len(data) == 0:\n        raise ValueError('The data list is empty.')\n\n    # Validate that all numeric values are non-negative.\n    if any(not isinstance(value, int) or value < 0 for inner_list in data for value in inner_list[1:]):\n        raise ValueError('The data list contains non-numeric or negative values.')\n\n    # Validate the input column.\n    columns = ['Date', 'Steps', 'Calories Burned', 'Distance Walked']\n    if column not in columns:\n        raise KeyError(f\"The specified column '{column}' is not valid. The valid columns are: {columns}\")\n\n    # Create a pandas dataframe.\n    df = pd.DataFrame(data, columns=columns)\n\n    # Calculate the sum, mean, min, and max.\n    stats = {'sum': df[column].sum(),\n             'mean': df[column].mean(),\n             'min': df[column].min(),\n             'max': df", "compilation_passed": false, "time": 0.00025177001953125, "tests_passed": false, "error": "SyntaxError"}
{"code": "if len(data) == 0:\n        raise ValueError(\"The data list is empty.\")\n\n    # Convert data to a pandas DataFrame\n    df = pd.DataFrame(data, columns=[\"Date\", \"Steps\", \"Calories Burned\", \"Distance Walked\"])\n\n    # Convert the 'Date' column to a datetime object\n    df[\"Date\"] = pd.to_datetime(df[\"Date\"])\n\n    # Check if the specified column exists in the DataFrame\n    if column not in df.columns:\n        raise KeyError(f\"Invalid column: {column}\")\n\n    # Check if all numeric values are non-negative\n    if df[[\"Steps\", \"Calories Burned\", \"Distance Walked\"]].applymap(lambda x: x >= 0).all(axis=None):\n        # Calculate the statistics for the specified column\n        stats = {}\n        stats[\"sum\"] = df[column].sum()\n        stats[\"mean\"] = df[column].mean()\n        stats[\"min\"] = df[", "compilation_passed": false, "time": 0.00023603439331054688, "tests_passed": false, "error": "SyntaxError"}
{"code": "columns = [\"Date\", \"Steps\", \"Calories Burned\", \"Distance Walked\"]\n    if column not in columns:\n        raise KeyError(\"The specified column is not valid\")\n    if len(data) == 0:\n        raise ValueError(\"The data list is empty\")\n    # Validate if the data is valid\n    for date, steps, calories_burned, distance_walked in data:\n        if steps < 0 or calories_burned < 0 or distance_walked < 0:\n            raise ValueError(\n                \"The numeric values for steps, calories burned, and distance walked must be non-negative\"\n            )\n    # Convert the data to pandas DataFrame\n    df = pd.DataFrame(data, columns=columns)\n    # Create a line chart for the column\n    ax = df.plot(x=\"Date\", y=column)\n    ax.set_title(f\"Line Chart of {column}\")\n    # Calculate the sum, mean, min, and max of the column\n    stats = {\n        \"sum\": df[column].", "compilation_passed": false, "time": 0.00022077560424804688, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not data:\n        raise ValueError(\"The data list is empty\")\n\n    # Ensure that the column is one of the allowed values\n    column_names = ['Date', 'Steps', 'Calories Burned', 'Distance Walked']\n    if column not in column_names:\n        raise KeyError(f\"Invalid column name: {column}\")\n\n    # Convert the data to a pandas DataFrame\n    df = pd.DataFrame(data, columns=column_names)\n    column_index = column_names.index(column)\n\n    # Check that all numeric values are non-negative\n    for i, row in df.iterrows():\n        if row[column_index] < 0:\n            raise ValueError(f\"The value {row[column_index]} at index {i} in column {column} is negative\")\n\n    # Calculate the sum, mean, min, and max of the specified column\n    stats = {}\n    stats['sum'] = df[column].sum()\n    stats['mean'] = df[column].mean()\n    stats['min'] = df[", "compilation_passed": false, "time": 0.00023698806762695312, "tests_passed": false, "error": "SyntaxError"}
{"code": "columns = ['Date', 'Steps', 'Calories Burned', 'Distance Walked']\n    # Check if column is valid\n    if column not in columns:\n        raise KeyError(f\"Invalid column: {column}\")\n    # Check if data is empty\n    if not data:\n        raise ValueError(\"Data list cannot be empty\")\n    # Check if all numeric values are non-negative\n    for row in data:\n        for i in range(1, 4):\n            if row[i] < 0:\n                raise ValueError(f\"Numeric value {row[i]} must be non-negative\")\n    # Create dataframe\n    df = pd.DataFrame(data, columns=columns)\n    # Calculate sum, mean, min, max\n    sum_ = df[column].sum()\n    mean_ = df[column].mean()\n    min_ = df[column].min()\n    max_ = df[column].max()\n    # Create line chart\n    ax = df[column].plot(x='Date', marker='o', linestyle='", "compilation_passed": false, "time": 0.00010609626770019531, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Check if the data list is empty\n    if not data:\n        raise ValueError(\"The data list cannot be empty.\")\n\n    # Check if all the numeric values for steps, calories burned, and distance walked are non-negative\n    for row in data:\n        if any(val < 0 for val in row[1:]):\n            raise ValueError(\"All numeric values must be non-negative.\")\n\n    # Check if the specified column is valid\n    allowed_columns = {'Date', 'Steps', 'Calories Burned', 'Distance Walked'}\n    if column not in allowed_columns:\n        raise KeyError(\"Invalid column specified. Allowed columns are: Date, Steps, Calories Burned, Distance Walked\")\n\n    # Get the index of the column based on the column name\n    column_index = {'Date': 0, 'Steps': 1, 'Calories Burned': 2, 'Distance Walked': 3}[column]\n\n    # Create a pandas dataframe from the data list\n    df = pd.DataFrame(data, columns=['Date', 'Ste", "compilation_passed": false, "time": 8.320808410644531e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "df = pd.DataFrame({column: [row[i] for row in data] for i in range(len(data[0]))})\n    # Raise a KeyError if the specified column is not in the data frame\n    df[column]\n    df_numeric = df[column].dropna().apply(float)\n    # Raise a ValueError if the data list is empty or if any of the numeric values are negative\n    if len(df_numeric) == 0 or any(df_numeric < 0):\n        raise ValueError(\"The data list is empty or if any of the numeric values are negative\")\n    df_numeric_stats = df_numeric.describe()\n    return {\n        \"sum\": df_numeric_stats[2],\n        \"mean\": df_numeric_stats[3],\n        \"min\": df_numeric_stats[0],\n        \"max\": df_numeric_stats[1]\n    }, plt.plot(df.Date, df[column], label=column)", "compilation_passed": true, "time": 0.0025942325592041016, "tests_passed": false, "error": "AttributeError"}
{"code": "# validate column\n    cols = ['Date', 'Steps', 'Calories Burned', 'Distance Walked']\n    if column not in cols:\n        raise KeyError(f'Column {column} is not valid')\n\n    # validate data\n    if len(data) == 0:\n        raise ValueError('Data list cannot be empty')\n\n    for row in data:\n        steps, calories, distance = row[1:]\n        if steps < 0 or calories < 0 or distance < 0:\n            raise ValueError('Steps, calories, and distance must be non-negative')\n\n    # create a pandas DataFrame from the data\n    df = pd.DataFrame(data, columns=cols)\n\n    # calculate the sum, mean, min, and max for the column\n    stats = {\n        'sum': df[column].sum(),\n        'mean': df[column].mean(),\n        'min': df[column].min(),\n        'max': df[column].max(),\n    }\n\n    # create a line chart for the column\n    ax", "compilation_passed": true, "time": 0.0019299983978271484, "tests_passed": false, "error": "NameError"}
{"code": "# Raises KeyError if the specified column is not in the list of valid columns.\n    valid_columns = ['Date', 'Steps', 'Calories Burned', 'Distance Walked']\n    if column not in valid_columns:\n        raise KeyError(f\"Invalid column: {column}\")\n\n    # Raises ValueError if the data list is empty\n    if not data:\n        raise ValueError(\"No data provided.\")\n\n    # Raises ValueError if any of the numeric values for steps, calories burned,\n    # and distance walked are negative.\n    for row in data:\n        steps, calories_burned, distance_walked = row[1:]\n        if any(val < 0 for val in (steps, calories_burned, distance_walked)):\n            raise ValueError(\"Negative values found in the data.\")\n\n    # Converts the date values in the data list to the format \"Month Day\".\n    data_formatted = [row[:1] + [val for val in row[1:]] for row in data]\n    df = pd.DataFrame", "compilation_passed": true, "time": 0.0016140937805175781, "tests_passed": false, "error": "TypeError"}
{"code": "if not data:\n        raise ValueError(\"Data list cannot be empty.\")\n\n    col_index = None\n    for i, col in enumerate([\"Date\", \"Steps\", \"Calories Burned\", \"Distance Walked\"]):\n        if col == column:\n            col_index = i\n            break\n    if col_index is None:\n        raise KeyError(\"Invalid column.\")\n\n    for row in data:\n        # Check for negative values in steps, calories burned, and distance walked\n        for i in range(1, 4):\n            if row[i] < 0:\n                raise ValueError(\n                    f\"Numeric value for {['Steps', 'Calories Burned', 'Distance Walked'][i-1]} cannot be negative.\"\n                )\n\n    df = pd.DataFrame(data, columns=[\"Date\", \"Steps\", \"Calories Burned\", \"Distance Walked\"])\n    # Convert the date column to datetime type\n    df[\"Date\"] = pd.to_datetime(df[\"Date\"])\n", "compilation_passed": true, "time": 0.0018665790557861328, "tests_passed": false, "error": "TypeError"}
{"code": "# Check if the data list is empty\n    if not data:\n        raise ValueError(\"The data list cannot be empty.\")\n\n    # Check if the specified column is valid\n    if column not in {'Date', 'Steps', 'Calories Burned', 'Distance Walked'}:\n        raise KeyError(\"Invalid column name. Valid options are: 'Date', 'Steps', 'Calories Burned', 'Distance Walked'\")\n\n    # Create a dictionary mapping the column names to their indices in the inner lists\n    columns = {'Date': 0, 'Steps': 1, 'Calories Burned': 2, 'Distance Walked': 3}\n    column_index = columns[column]\n\n    # Check if there are negative numeric values for steps, calories burned, and distance walked\n    if any(row[i] < 0 for i in range(1, 4) for row in data):\n        raise ValueError(\"All steps, calories burned, and distance walked values must be non-negative.\")\n\n    # Calculate the sum, mean, min, max of the", "compilation_passed": true, "time": 0.0015900135040283203, "tests_passed": false, "error": "TypeError"}
{"code": "allowed_columns = ['Date', 'Steps', 'Calories Burned', 'Distance Walked']\n\n    if column not in allowed_columns:\n        raise KeyError(\"Invalid column name\")\n\n    if not data:\n        raise ValueError(\"Empty data\")\n\n    for row in data:\n        if len(row) != 4:\n            raise ValueError(\"Each row must have a length of 4\")\n\n        if not isinstance(row[0], datetime):\n            raise ValueError(\"The date must be a datetime object\")\n\n        for value in row[1:]:\n            if not isinstance(value, (int, float)) or value < 0:\n                raise ValueError(\"All numeric values must be non-negative\")\n\n    df = pd.DataFrame(data, columns=allowed_columns)\n\n    stats = {'sum': df[column].sum(), 'mean': df[column].mean(),\n             'min': df[column].min(), 'max': df[column].max()}\n\n    fig, ax =", "compilation_passed": false, "time": 0.0002830028533935547, "tests_passed": false, "error": "SyntaxError"}
{"code": "try:\n        idx = ['Date', 'Steps', 'Calories Burned', 'Distance Walked'].index(column)\n        if idx == 0:\n            return {'sum': 'sum', 'mean': 'mean', 'min': 'min', 'max': 'max'}, None\n    except ValueError:\n        raise KeyError('The specified column is not valid.')\n\n    df = pd.DataFrame(data, columns=['Date', 'Steps', 'Calories Burned', 'Distance Walked'])\n    df['Date'] = pd.to_datetime(df['Date'])\n\n    # check for non-negative values\n    if (df['Steps'] < 0).any() or (df['Calories Burned'] < 0).any() or (df['Distance Walked'] < 0).any():\n        raise ValueError('Each of the numeric values for steps, calories burned, and distance walked are negative.')\n\n    df['Steps'] = df['Steps'].astype(int)\n    df['Calories Burned'] = df['Cal", "compilation_passed": false, "time": 0.00011181831359863281, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Validate the data list\n    if not data:\n        raise ValueError(\"Data list is empty.\")\n\n    # Create a Pandas dataframe with the data list\n    df = pd.DataFrame(data, columns=['Date', 'Steps', 'Calories Burned', 'Distance Walked'])\n\n    # Validate the numeric values\n    for col in ['Steps', 'Calories Burned', 'Distance Walked']:\n        if (df[col] < 0).any():\n            raise ValueError(f\"Negative value found in column {col}.\")\n\n    # Analyze the column\n    stats = df[column].describe().to_dict()\n    stats.pop('count')\n    stats.pop('std')\n\n    # Plot the line chart\n    ax = df[column].plot()\n    ax.set_title(f'Line Chart of {column}')\n\n    # Return the stats and Axes object\n    return stats, ax", "compilation_passed": true, "time": 0.019197940826416016, "tests_passed": true, "error": null}
{"code": "if len(data) == 0:\n        raise ValueError(\"The data list must not be empty.\")\n    valid_columns = {\"Date\", \"Steps\", \"Calories Burned\", \"Distance Walked\"}\n    if column not in valid_columns:\n        raise KeyError(\"The specified column is not valid.\")\n\n    df = pd.DataFrame(data, columns=['Date', 'Steps', 'Calories Burned', 'Distance Walked'])\n    df['Date'] = pd.to_datetime(df['Date'])\n    if column == \"Steps\" or column == \"Calories Burned\" or column == \"Distance Walked\":\n        if df[column].lt(0).any():\n            raise ValueError(\"Steps, Calories Burned, and Distance Walked must be non-negative.\")\n\n    stats = df[column].agg(['sum', 'mean', 'min', 'max'])\n    ax = df.plot.line(x=\"Date\", y=column, title=f\"Line Chart of {column}\")\n", "compilation_passed": true, "time": 0.018678903579711914, "tests_passed": false, "error": "TypeError"}
{"code": "allowed_columns = ['Date', 'Steps', 'Calories Burned', 'Distance Walked']\n\n    if column not in allowed_columns:\n        raise KeyError(\"The column must be one of: Date, Steps, Calories Burned, Distance Walked\")\n\n    if len(data) == 0:\n        raise ValueError(\"The list of data must not be empty.\")\n\n    col_idx = allowed_columns.index(column)\n    column_data = [row[col_idx] for row in data]\n\n    # Validate steps, calories burned, and distance walked are non-negative\n    for data_type, value in zip(allowed_columns[1:], column_data):\n        if any(val < 0 for val in value):\n            raise ValueError(f\"Negative values for {data_type} are not allowed.\")\n\n    # Create a Pandas DataFrame for the column data\n    df = pd.DataFrame(column_data, columns=[column])\n\n    # Calculate statistics\n    stats = {\n        'sum': df[column].sum", "compilation_passed": false, "time": 0.00030517578125, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not data:\n        raise ValueError(\"data list cannot be empty\")\n\n    if column not in ['Date', 'Steps', 'Calories Burned', 'Distance Walked']:\n        raise KeyError(\"Invalid column specified\")\n\n    df = pd.DataFrame(data, columns=['Date', 'Steps', 'Calories Burned', 'Distance Walked'])\n\n    if (df[['Steps', 'Calories Burned', 'Distance Walked']] < 0).any().any():\n        raise ValueError(\"Numeric values for steps, calories burned, and distance walked must be non-negative\")\n\n    column_idx = ['Date', 'Steps', 'Calories Burned', 'Distance Walked'].index(column)\n    stats = {\n        'sum': df.iloc[:, column_idx].sum(),\n        'mean': df.iloc[:, column_idx].mean(),\n        'min': df.iloc[:, column_idx].min(),\n        'max': df.il", "compilation_passed": false, "time": 0.0002510547637939453, "tests_passed": false, "error": "SyntaxError"}
{"code": "if len(data) == 0:\n        raise ValueError('The data list cannot be empty.')\n\n    if column not in {'Date', 'Steps', 'Calories Burned', 'Distance Walked'}:\n        raise KeyError(f'The specified column \"{column}\" is not valid.')\n\n    # Check for negative values in the data.\n    if np.any(np.array([value for value in chain(*data) if isinstance(value, float) or isinstance(value, int)]) < 0):\n        raise ValueError(\"All values must be non-negative.\")\n\n    # Create a pandas DataFrame from the input data.\n    df = pd.DataFrame(data, columns=['Date', 'Steps', 'Calories Burned', 'Distance Walked'])\n    df['Date'] = df['Date'].astype('datetime64[ns]')\n\n    # Calculate the sum, mean, min, max values of the specified column.\n    col_values = df[column].values\n    sum_ = np.sum(col_values)\n    mean = np", "compilation_passed": true, "time": 0.0018780231475830078, "tests_passed": false, "error": "NameError"}
{"code": "# 1) Validate that data is not empty.\n    # 2) Validate that all the numeric values are non-negative.\n    # 3) Create a pandas dataframe from data.\n    # 4) Use the index 0 to access the date.\n    # 5) Use the index 1 to access the steps.\n    # 6) Use the index 2 to access the calories burned.\n    # 7) Use the index 3 to access the distance walked.\n    # 8) Use the dictionary to create a pandas series from the data.\n    # 9) Use the describe() function to calculate the sum, mean, min, max.\n    # 10) Create a line chart and use the Axes object to set the title to Line Chart of (column).\n    # 11) Create a tuple containing the dictionary and the Axes object.\n\n    return dict, ax", "compilation_passed": true, "time": 0.0015230178833007812, "tests_passed": false, "error": "NameError"}
{"code": "# Validate column and data\n    if not isinstance(column, str):\n        raise TypeError(\"column must be a string\")\n    if column not in ['Date', 'Steps', 'Calories Burned', 'Distance Walked']:\n        raise KeyError(\"column must be one of the following: 'Date', 'Steps', 'Calories Burned', 'Distance Walked'\")\n    if not data or not isinstance(data, list) or not all(isinstance(d, list) for d in data):\n        raise ValueError(\"data must be a non-empty list of lists\")\n    for d in data:\n        if not all(isinstance(v, (int, float)) for v in d[1:]):\n            raise ValueError(\"numeric values for steps, calories burned, and distance walked must be non-negative\")\n        if any(v < 0 for v in d[1:]):\n            raise ValueError(\"numeric values for steps, calories burned, and distance walked must be non-negative\")\n\n    # Convert data to a pandas DataFrame\n    df", "compilation_passed": true, "time": 0.0017161369323730469, "tests_passed": false, "error": "NameError"}
