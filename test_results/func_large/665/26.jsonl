{"code": "if not os.path.exists(dst_dir):\n        os.mkdir(dst_dir)\n    for file in os.listdir(src_dir):\n        if fnmatch.fnmatch(file, \"*.txt\") or fnmatch.fnmatch(file, \"*.docx\"):\n            shutil.copy(os.path.join(src_dir, file), os.path.join(dst_dir, file))\n    return dst_dir", "compilation_passed": true, "time": 0.0009047985076904297, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Create the destination directory if it doesn't exist\n    if not os.path.exists(dst_dir):\n        os.makedirs(dst_dir)\n\n    # Get all files in the source directory\n    all_files = os.listdir(src_dir)\n\n    # Filter the files to match the specified patterns\n    txt_files = fnmatch.filter(all_files, '*.txt')\n    docx_files = fnmatch.filter(all_files, '*.docx')\n\n    # Get all matching files\n    matching_files = itertools.chain(txt_files, docx_files)\n\n    # Copy the matching files to the destination directory\n    for file in matching_files:\n        src_file = os.path.join(src_dir, file)\n        dst_file = os.path.join(dst_dir, file)\n        shutil.copy(src_file, dst_file)\n\n    return dst_dir", "compilation_passed": true, "time": 0.000926971435546875, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Check if the source directory exists and is readable\n    if not os.path.exists(src_dir) or not os.path.isdir(src_dir):\n        raise Exception(\"The source directory does not exist or is not a directory.\")\n\n    # Check if the destination directory exists and is writable\n    if os.path.exists(dst_dir) and not os.path.isdir(dst_dir):\n        raise Exception(\"The destination directory exists and is not a directory.\")\n\n    # If the destination directory doesn't exist, create it\n    if not os.path.exists(dst_dir):\n        os.mkdir(dst_dir)\n\n    # Copy all files that match any pattern in ['*.txt', '*.docx'] from the source directory to the destination directory\n    for path, dirs, files in os.walk(src_dir):\n        relpath = os.path.relpath(path, src_dir)\n        for filename in files:\n            for pattern in ['*.txt', '*.docx']:\n                if fnmatch.f", "compilation_passed": false, "time": 0.0001647472381591797, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Create the destination directory if it doesn't exist\n    os.makedirs(dst_dir, exist_ok=True)\n    # Iterate through all files in the source directory\n    for filename in os.listdir(src_dir):\n        # Check if the file matches any of the given patterns\n        if any(fnmatch.fnmatch(filename, pattern) for pattern in ['*.txt', '*.docx']):\n            # Copy the file from the source directory to the destination directory\n            shutil.copy(os.path.join(src_dir, filename), os.path.join(dst_dir, filename))\n    # Return the destination directory\n    return dst_dir", "compilation_passed": true, "time": 0.0008981227874755859, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "for root, dirs, files in os.walk(src_dir):\n        for pattern in ['*.txt', '*.docx']:\n            for filename in fnmatch.filter(files, pattern):\n                # \u0441\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u043c \u0430\u0431\u0441\u043e\u043b\u044e\u0442\u043d\u044b\u0439 \u043f\u0443\u0442\u044c \u043a \u0438\u0441\u0445\u043e\u0434\u043d\u043e\u043c\u0443 \u0444\u0430\u0439\u043b\u0443 \u0438 \u043a\u043e\u043d\u0435\u0447\u043d\u043e\u043c\u0443 \u0444\u0430\u0439\u043b\u0443\n                src_path = os.path.join(root, filename)\n                dst_path = os.path.join(dst_dir, filename)\n\n                # \u043a\u043e\u043f\u0438\u0440\u0443\u0435\u043c \u0444\u0430\u0439\u043b \u0441 \u043f\u0435\u0440\u0435\u0437\u0430\u043f\u0438\u0441\u044c\u044e\n                shutil.copy(src_path, dst_path, follow_symlinks=True)\n\n    return dst_dir", "compilation_passed": true, "time": 0.0008893013000488281, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "file_patterns = ['*.txt', '*.docx']  # Define file patterns to include\n\n    if not os.path.exists(dst_dir):\n        os.makedirs(dst_dir)\n\n    files = [file for file in os.listdir(src_dir) if any(fnmatch.fnmatch(file, pattern) for pattern in file_patterns)]\n\n    for file in files:\n        src_path = os.path.join(src_dir, file)\n        dst_path = os.path.join(dst_dir, file)\n        shutil.copy2(src_path, dst_path)\n\n    return dst_dir", "compilation_passed": true, "time": 0.0009260177612304688, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "for pattern in ['*.txt', '*.docx']:\n        for file_path in fnmatch.filter(os.listdir(src_dir), pattern):\n            shutil.copy(os.path.join(src_dir, file_path), dst_dir)\n    return dst_dir", "compilation_passed": true, "time": 0.0008380413055419922, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "for pattern in ['*.txt', '*.docx']:\n        for file in fnmatch.filter(os.listdir(src_dir), pattern):\n            shutil.copy(os.path.join(src_dir, file), os.path.join(dst_dir, file))\n    return dst_dir", "compilation_passed": true, "time": 0.000843048095703125, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Get the list of patterns\n    patterns = ['*.txt', '*.docx']\n    # Get all the files in the source directory\n    files = os.listdir(src_dir)\n    # Filter the files by the patterns\n    matching_files = list(itertools.chain.from_iterable(fnmatch.filter(files, pattern) for pattern in patterns))\n    # Copy the matching files to the destination directory\n    for file in matching_files:\n        shutil.copy(os.path.join(src_dir, file), os.path.join(dst_dir, file))\n    # Return the destination directory\n    return dst_dir", "compilation_passed": true, "time": 0.0008807182312011719, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "shutil.rmtree(dst_dir, ignore_errors=True)\n    os.mkdir(dst_dir)\n\n    for root, dirs, files in os.walk(src_dir):\n        for file in files:\n            if any(fnmatch.fnmatch(file, pattern) for pattern in ['*.txt', '*.docx']):\n                shutil.copy2(os.path.join(root, file), os.path.join(dst_dir, file))\n    return dst_dir", "compilation_passed": true, "time": 0.0008869171142578125, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "patterns = ['*.txt', '*.docx']\n    matching_files = [os.path.join(dirpath, f)\n                      for dirpath, dirnames, filenames in os.walk(src_dir)\n                      for f in fnmatch.filter(filenames, '|'.join(patterns))]\n\n    for file in matching_files:\n        shutil.copy(file, dst_dir)\n\n    return dst_dir", "compilation_passed": true, "time": 0.0008819103240966797, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "for filename in os.listdir(src_dir):\n        for pattern in ['*.txt', '*.docx']:\n            if fnmatch.fnmatch(filename, pattern):\n                shutil.copy(os.path.join(src_dir, filename), os.path.join(dst_dir, filename))\n                break\n    return dst_dir", "compilation_passed": true, "time": 0.0008671283721923828, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "patterns = ['*.txt', '*.docx']\n    for filename in os.listdir(src_dir):\n        for pattern in patterns:\n            if fnmatch.fnmatch(filename, pattern):\n                shutil.copy(os.path.join(src_dir, filename), os.path.join(dst_dir, filename))\n    return dst_dir", "compilation_passed": true, "time": 0.0009789466857910156, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "matching_files = list(itertools.chain.from_iterable(\n        [fnmatch.filter(os.listdir(src_dir), pattern) for pattern in ['*.txt', '*.docx']]\n    ))\n    for file in matching_files:\n        shutil.copy(os.path.join(src_dir, file), os.path.join(dst_dir, file))\n    return dst_dir", "compilation_passed": true, "time": 0.0008611679077148438, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "for filename in os.listdir(src_dir):\n        for pattern in ['*.txt', '*.docx']:\n            if fnmatch.fnmatch(filename, pattern):\n                shutil.copy(os.path.join(src_dir, filename), os.path.join(dst_dir, filename))\n\n    return dst_dir", "compilation_passed": true, "time": 0.0008420944213867188, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "file_patterns = ['*.txt', '*.docx']\n\n    # Use fnmatch to match file patterns\n    matched_files = [file_name for file_name in os.listdir(src_dir) if any(fnmatch.fnmatch(file_name, pattern) for pattern in file_patterns)]\n\n    # Use itertools.chain to get all the matched file names as a single list\n    matched_files = list(itertools.chain(*matched_files))\n\n    # Use shutil to copy the files\n    for matched_file in matched_files:\n        shutil.copy(os.path.join(src_dir, matched_file), os.path.join(dst_dir, matched_file))\n\n    return dst_dir", "compilation_passed": true, "time": 0.0009069442749023438, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Create a list of patterns to match\n    patterns = ['*.txt', '*.docx']\n\n    # Use fnmatch to find files that match any of the patterns in the list\n    matching_files = [\n        file for file in os.listdir(src_dir) for pattern in patterns if fnmatch.fnmatch(file, pattern)\n    ]\n\n    # Use itertools to group matching files by their filename without extensions\n    grouped_files = itertools.groupby(matching_files, key=lambda x: os.path.splitext(x)[0])\n\n    # Loop through the grouped files and copy each one to the destination directory\n    for key, group in grouped_files:\n        for file in group:\n            src_path = os.path.join(src_dir, file)\n            dst_path = os.path.join(dst_dir, file)\n            shutil.copy(src_path, dst_path)\n\n    # Return the destination directory\n    return dst_dir", "compilation_passed": true, "time": 0.0009353160858154297, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Check if the destination directory exists\n    if not os.path.exists(dst_dir):\n        os.makedirs(dst_dir)\n\n    # Get the list of files in the source directory\n    files = os.listdir(src_dir)\n\n    # Use fnmatch to filter files by pattern and itertools.chain.from_iterable to flatten the result\n    matching_files = itertools.chain.from_iterable(fnmatch.filter(files, pattern) for pattern in ['*.txt', '*.docx'])\n\n    # Copy matching files to the destination directory using shutil\n    for file in matching_files:\n        shutil.copy(os.path.join(src_dir, file), os.path.join(dst_dir, file))\n\n    # Return the destination directory\n    return dst_dir", "compilation_passed": true, "time": 0.0008900165557861328, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# The 'copyfileobj' function from the 'shutil' module copies the contents of a source file to a destination file.\n    # The 'open' function opens the file at the specified path with the given mode.\n    # The 'fnmatch.filter' function returns a list of filenames from the 'names' sequence that match the 'pattern' string.\n    # The 'itertools.chain.from_iterable' function flattens an iterable of iterables into a single iterable.\n    # The 'os.walk' function generates the file names in a directory tree by walking the tree either top-down or bottom-up. For each directory in the tree rooted at directory top (including top itself), it yields a 3-tuple (dirpath, dirnames, filenames).\n    # The 'os.path.join' function joins one or more path components intelligently.\n    for dirpath, dirnames, filenames in os.walk(src_dir):\n        for file in itertools.chain.from_iterable(fnmatch.filter(filenames, pattern) for pattern in ['*.txt', '*", "compilation_passed": false, "time": 4.124641418457031e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "for root, dirs, files in os.walk(src_dir):\n        for pattern in ['*.txt', '*.docx']:\n            for filename in fnmatch.filter(files, pattern):\n                src_path = os.path.join(root, filename)\n                dst_path = os.path.join(dst_dir, filename)\n                shutil.copy2(src_path, dst_path)\n    return dst_dir", "compilation_passed": true, "time": 0.000865936279296875, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "file_patterns = ['*.txt', '*.docx']\n    files_to_copy = [file for file in os.listdir(src_dir) if any(fnmatch.fnmatch(file, pattern) for pattern in file_patterns)]\n    for file in files_to_copy:\n        shutil.copy(os.path.join(src_dir, file), os.path.join(dst_dir, file))\n    return dst_dir", "compilation_passed": true, "time": 0.0008749961853027344, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "file_patterns = ['*.txt', '*.docx']\n\n    # Get all files in the source directory\n    files = os.listdir(src_dir)\n\n    # Filter files based on file patterns\n    filtered_files = []\n    for pattern in file_patterns:\n        filtered_files.extend(fnmatch.filter(files, pattern))\n\n    # Copy filtered files to the destination directory\n    for file in filtered_files:\n        shutil.copy(os.path.join(src_dir, file), os.path.join(dst_dir, file))\n\n    return dst_dir", "compilation_passed": true, "time": 0.0008678436279296875, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "patterns = ['*.txt', '*.docx']\n    for src_file in os.listdir(src_dir):\n        for pattern in patterns:\n            if fnmatch.fnmatch(src_file, pattern):\n                shutil.copy(os.path.join(src_dir, src_file), dst_dir)\n    return dst_dir", "compilation_passed": true, "time": 0.0008418560028076172, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "pattern_list = ['*.txt', '*.docx']\n\n    # Find all files in src_dir that match the patterns\n    matches = []\n    for pattern in pattern_list:\n        matches += fnmatch.filter(os.listdir(src_dir), pattern)\n\n    # Create destination directory if it doesn't exist\n    os.makedirs(dst_dir, exist_ok=True)\n\n    # Copy files to destination directory\n    for file in matches:\n        shutil.copy(os.path.join(src_dir, file), dst_dir)\n\n    return dst_dir", "compilation_passed": true, "time": 0.0008540153503417969, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "for pattern in ['*.txt', '*.docx']:\n        for filename in fnmatch.filter(os.listdir(src_dir), pattern):\n            file_path = os.path.join(src_dir, filename)\n            shutil.copy(file_path, dst_dir)\n    return dst_dir", "compilation_passed": true, "time": 0.0008349418640136719, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "for pattern in ['*.txt', '*.docx']:\n        for src_path in glob.glob(os.path.join(src_dir, pattern)):\n            dst_path = os.path.join(dst_dir, os.path.basename(src_path))\n            shutil.copy2(src_path, dst_path)\n    return dst_dir", "compilation_passed": true, "time": 0.0009121894836425781, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "file_patterns = ['*.txt', '*.docx']\n    file_names = [file for file in os.listdir(src_dir) if any(fnmatch.fnmatch(file, pattern) for pattern in file_patterns)]\n    for file_name in file_names:\n        src = os.path.join(src_dir, file_name)\n        dst = os.path.join(dst_dir, file_name)\n        shutil.copy(src, dst)\n    return dst_dir", "compilation_passed": true, "time": 0.0008890628814697266, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "pattern_list = ['*.txt', '*.docx']\n    src_files = os.listdir(src_dir)\n    filtered_files = [filename for filename in src_files if any(fnmatch.fnmatch(filename, pattern) for pattern in pattern_list)]\n    for file in filtered_files:\n        shutil.copy2(os.path.join(src_dir, file), dst_dir)\n\n    return dst_dir", "compilation_passed": true, "time": 0.0008718967437744141, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Create the destination directory if it doesn't exist\n    os.makedirs(dst_dir, exist_ok=True)\n\n    # Get a list of files in the source directory\n    files = os.listdir(src_dir)\n\n    # Use a list comprehension to get the file patterns we want to match\n    file_patterns = ['*.txt', '*.docx']\n    matching_files = [f for f in files if any(fnmatch.fnmatch(f, p) for p in file_patterns)]\n\n    # Copy each matching file to the destination directory\n    for f in matching_files:\n        shutil.copy(os.path.join(src_dir, f), os.path.join(dst_dir, f))\n\n    # Return the destination directory\n    return dst_dir", "compilation_passed": true, "time": 0.0009021759033203125, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# List of patterns to match\n    patterns = ['*.txt', '*.docx']\n\n    # Get all files in source directory\n    files = os.listdir(src_dir)\n\n    # Filter files based on pattern match\n    matching_files = [file for file in files if any(fnmatch.fnmatch(file, pattern) for pattern in patterns)]\n\n    # Copy matching files to destination directory\n    for file in matching_files:\n        src = os.path.join(src_dir, file)\n        dst = os.path.join(dst_dir, file)\n        shutil.copy2(src, dst)\n\n    return dst_dir", "compilation_passed": true, "time": 0.0009033679962158203, "tests_passed": false, "error": "FileNotFoundError"}
