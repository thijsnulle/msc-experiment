{"code": "# Validate directory\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"The specified directory does not exist\")\n\n    # Validate file_pattern and get the list of files\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(\"No files matching the pattern were found\")\n\n    # Extract data from each file\n    data = []\n    for filename in natsort.natsorted(files):\n        with open(filename, 'r') as f:\n            content = f.read()\n            numbers = list(map(int, re.findall(regex, content)))\n            data.append((os.path.basename(filename), numbers))\n\n    # Create Pandas DataFrame\n    return pd.DataFrame(data, columns=['Filename', 'Numeric Data'])", "compilation_passed": true, "time": 0.0015747547149658203, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n\n    # Get list of files matching pattern\n    file_list = glob.glob(os.path.join(directory, file_pattern))\n    if not file_list:\n        raise ValueError(f\"No files matching pattern '{file_pattern}' in directory '{directory}'.\")\n\n    # Create empty dataframe\n    df = pd.DataFrame(columns=['Filename', 'Numeric Data'])\n\n    # Extract numeric data from each file\n    for filename in natsort.natsorted(file_list):\n        numeric_data = []\n        try:\n            with open(filename, 'r') as f:\n                for line in f:\n                    matches = re.findall(regex, line)\n                    numeric_data += [int(m) for m in matches]\n        except FileNotFoundError:\n            numeric_data = []\n        except ValueError:\n            numeric_data = []\n        df = df.append({'", "compilation_passed": false, "time": 0.00012731552124023438, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found\")\n\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(\"No files matching the pattern found\")\n\n    numeric_data = {}\n    for filename in natsort.natsorted(files):\n        numeric_data[os.path.basename(filename)] = []\n\n    pattern = re.compile(regex)\n    for filename in natsort.natsorted(files):\n        with open(filename, 'r') as file:\n            data = file.read()\n            matches = pattern.findall(data)\n            numeric_data[os.path.basename(filename)].extend(matches)\n\n    df = pd.DataFrame(numeric_data, index=numeric_data.keys())\n    df.rename_axis(index='Filename', inplace=True)\n    df.reset_index(inplace=True)\n\n    return df", "compilation_passed": true, "time": 0.0012023448944091797, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory does not exist: {directory}\")\n\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files match pattern: {file_pattern}\")\n\n    sorted_files = natsort.natsorted(files)\n\n    rows = []\n    for filename in sorted_files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        # Extract numeric data using regex pattern\n        numeric_data = re.findall(regex, content)\n        rows.append((filename, numeric_data))\n\n    # Create a DataFrame from the extracted data\n    df = pd.DataFrame(rows, columns=['Filename', 'Numeric Data'])\n\n    return df", "compilation_passed": true, "time": 0.0011279582977294922, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching the pattern '{file_pattern}'.\")\n\n    data = []\n    for filename in natsort.natsorted(files):\n        with open(filename, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex, content)\n            data.append((os.path.basename(filename), matches))\n\n    return pd.DataFrame(data, columns=['Filename', 'Numeric Data'])", "compilation_passed": true, "time": 0.0011420249938964844, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist\")\n\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching pattern '{file_pattern}' in directory '{directory}'\")\n\n    numeric_data = []\n    for file in natsort.natsorted(files):\n        try:\n            with open(file, 'r') as f:\n                data = f.read()\n                matches = re.findall(regex, data)\n                numeric_data.append(list(map(int, matches)))\n        except FileNotFoundError:\n            numeric_data.append([])\n\n    df = pd.DataFrame({'Filename': [os.path.basename(file) for file in files], 'Numeric Data': numeric_data})\n    return df", "compilation_passed": true, "time": 0.0011630058288574219, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Check if the specified directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n\n    # Use glob to get a list of text files matching the pattern\n    txt_files = glob.glob(os.path.join(directory, file_pattern))\n\n    # Check if there are any matching files\n    if not txt_files:\n        raise ValueError(f\"No files matching the pattern found in {directory}\")\n\n    # Sort the files alphabetically or naturally using natsort\n    sorted_files = natsort.natsorted(txt_files)\n\n    # Initialize an empty list to store the extracted numeric data\n    numeric_data_list = []\n\n    # Extract numeric data using regular expression from each file\n    for filename in sorted_files:\n        with open(filename, 'r') as file:\n            content = file.read()\n            # Use the provided regular expression to find all matching patterns in the file content\n            matches = re.findall(regex, content)\n            numeric_data_list.append(matches)", "compilation_passed": true, "time": 0.0010840892791748047, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if not os.path.isdir(directory):\n        raise FileNotFoundError(\"Directory does not exist.\")\n\n    # Find all matching files in the directory\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(\"No matching files found.\")\n\n    # Sort the files by their numeric components in ascending order\n    sorted_files = natsort.natsorted(files, alg=natsort.ns.INT)\n\n    # Extract the numeric data from each file\n    numeric_data = []\n    for file in sorted_files:\n        with open(file, 'r') as f:\n            content = f.read()\n            matches = re.findall(regex, content)\n            numeric_data.append([int(match) for match in matches])\n\n    # Create the DataFrame\n    df = pd.DataFrame({'Filename': sorted_files, 'Numeric Data': numeric_data})\n\n    return df", "compilation_passed": true, "time": 0.0011126995086669922, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n\n    text_files = glob.glob(os.path.join(directory, file_pattern))\n    if not text_files:\n        raise ValueError(f\"No files matching pattern '{file_pattern}' found in directory '{directory}'.\")\n\n    files = natsort.natsorted(text_files, key=lambda f: os.path.basename(f))\n\n    data = {'Filename': [], 'Numeric Data': []}\n\n    for file in files:\n        numeric_data = []\n        with open(file, 'r') as f:\n            for line in f:\n                match = re.findall(regex, line)\n                if match:\n                    numeric_data.extend(match)\n\n        data['Filename'].append(os.path.basename(file))\n        data['Numeric Data'].append(numeric_data)\n\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0011682510375976562, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching the pattern '{file_pattern}' in directory '{directory}'.\")\n\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n            numbers = re.findall(regex, content)\n            data.append([filename, numbers])\n\n    return pd.DataFrame(data, columns=['Filename', 'Numeric Data'])", "compilation_passed": true, "time": 0.001107931137084961, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    pattern = os.path.join(directory, file_pattern)\n    file_names = natsort.natsorted(glob.glob(pattern), alg=natsort.ns.PATH)\n    if not file_names:\n        raise ValueError(f\"No files found matching pattern '{pattern}'.\")\n\n    data = []\n    for file_name in file_names:\n        with open(file_name, 'r') as f:\n            contents = f.read()\n        matches = re.findall(regex, contents)\n        if matches:\n            numeric_data = [int(match) for match in matches]\n        else:\n            numeric_data = []\n        data.append([os.path.basename(file_name), numeric_data])\n\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0011510848999023438, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if not os.path.exists(directory):\n        raise FileNotFoundError(\"The specified directory does not exist.\")\n\n    text_files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n\n    if not text_files:\n        raise ValueError(\"No files matching the pattern found.\")\n\n    filename_pattern = r'^([^\\.]+)\\.txt$'\n    results = []\n    for filepath in text_files:\n        filename = os.path.basename(filepath)\n        match = re.search(filename_pattern, filename)\n        if not match:\n            raise ValueError(\"The filename format is not recognized.\")\n        filename_without_extension = match.group(1)\n\n        with open(filepath, 'r') as file:\n            content = file.read()\n            matches = re.findall(regex, content)\n            numeric_data = [int(match) for match in matches]\n            results.append((filename_without_extension, numeric_data))\n\n    df = pd.DataFrame(", "compilation_passed": false, "time": 0.0002677440643310547, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching pattern '{file_pattern}' found in directory '{directory}'.\")\n\n    files = natsort.natsorted(files)  # Sort files lexicographically\n\n    data = []\n    for file in files:\n        with open(file, 'r') as f:\n            content = f.read()\n            nums = [int(match) for match in re.findall(regex, content)]  # Convert matches to integers\n            data.append({'Filename': os.path.basename(file), 'Numeric Data': nums})\n\n    return pd.DataFrame(data)", "compilation_passed": true, "time": 0.0011348724365234375, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n\n    # Find all files matching the pattern in the directory\n    file_pattern = os.path.join(directory, file_pattern)\n    files = natsort.natsorted(glob.glob(file_pattern))\n\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in directory '{directory}'.\")\n\n    # Extract numeric data from each file\n    filenames = []\n    numeric_data = []\n\n    for file in files:\n        try:\n            with open(file, 'r') as f:\n                content = f.read()\n                matches = re.findall(regex, content)\n                numeric_data.append(matches)\n                filenames.append(os.path.basename(file))\n        except FileNotFoundError:\n            print(f\"File '{file}' not found. Skipping.\")\n        except Exception as e:\n            print(f\"An error", "compilation_passed": false, "time": 0.00010895729064941406, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not os.path.exists(directory):\n        raise FileNotFoundError(\"The specified directory does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for file in files:\n        with open(file, 'r') as f:\n            content = f.read()\n            numeric_data = [int(x) for x in re.findall(regex, content)]\n            data.append((os.path.basename(file), numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.001194000244140625, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Validate that the directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n\n    # Find all matching files\n    file_list = glob.glob(os.path.join(directory, file_pattern))\n    if not file_list:\n        raise ValueError(f\"No files found in '{directory}' that match the pattern '{file_pattern}'.\")\n\n    # Initialize the DataFrame\n    data = {'Filename': [], 'Numeric Data': []}\n    df = pd.DataFrame(data)\n\n    # Iterate over each file and extract numeric data using regular expressions\n    for filename in file_list:\n        with open(filename, 'r') as file:\n            text = file.read()\n            # Use regular expressions to find numeric data\n            matches = re.findall(regex, text)\n            # Convert the matches to integers\n            numeric_data = [int(match) for match in matches]\n            # Add the data to the DataFrame\n            df = df.append({'Filename", "compilation_passed": false, "time": 0.00010204315185546875, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Check if the directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The specified directory '{directory}' does not exist.\")\n\n    # Search for text files matching the pattern\n    files = glob.glob(os.path.join(directory, file_pattern))\n\n    # Check if there are matching files\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in directory '{directory}'.\")\n\n    # Initialize a list to store the extracted numeric data for each file\n    numeric_data = []\n\n    # Iterate over the files\n    for file in natsort.natsorted(files):\n        # Extract the numeric data from the file\n        with open(file, 'r') as f:\n            file_data = f.read()\n            numbers = re.findall(regex, file_data)\n            numeric_data.append(numbers)\n\n    # Create the Pandas DataFrame\n    df = pd.DataFrame({'Filename': natsort.natsorted(files), '", "compilation_passed": false, "time": 9.179115295410156e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n\n    text_files = glob.glob(os.path.join(directory, file_pattern))\n    if not text_files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in directory '{directory}'.\")\n\n    numeric_data = []\n    for file in natsort.natsorted(text_files):\n        with open(file, 'r') as f:\n            content = f.read()\n            numeric_data.append(re.findall(regex, content))\n\n    df = pd.DataFrame({'Filename': os.path.basename(file) for file in text_files},\n                      index=range(1, len(text_files) + 1))\n    df['Numeric Data'] = [row for row in numeric_data]\n\n    return df", "compilation_passed": true, "time": 0.0011639595031738281, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Check if the directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n\n    # Find all text files matching the pattern\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n\n    if not files:\n        raise ValueError(f\"No files found matching the pattern '{file_pattern}' in the directory '{directory}'.\")\n\n    # Create a pandas DataFrame to store the results\n    df = pd.DataFrame(columns=['Filename', 'Numeric Data'])\n\n    for file in files:\n        with open(file, 'r') as f:\n            file_name = os.path.splitext(os.path.basename(file))[0]\n            numeric_data = re.findall(regex, f.read())\n            numeric_data = [int(num) for num in numeric_data]\n            df.loc[len(df.index)] = [file_name, numeric_data]\n\n    return df", "compilation_passed": true, "time": 0.001155853271484375, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n\n    text_files = glob.glob(os.path.join(directory, file_pattern))\n\n    if not text_files:\n        raise ValueError(f\"No files matching the pattern were found: {os.path.join(directory, file_pattern)}\")\n\n    data = []\n\n    for text_file in natsort.natsorted(text_files):\n        with open(text_file, 'r') as f:\n            content = f.read()\n\n            numbers = re.findall(regex, content)\n            numbers = [int(number) for number in numbers]\n\n            data.append((os.path.basename(text_file), numbers))\n\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n\n    return df", "compilation_passed": true, "time": 0.0011408329010009766, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n\n    text_files = glob.glob(os.path.join(directory, file_pattern))\n\n    if not text_files:\n        raise ValueError(f\"No files matching pattern '{file_pattern}' found in directory '{directory}'.\")\n\n    # Sort file names naturally for better readability\n    sorted_text_files = natsort.natsorted(text_files)\n\n    # Extract numeric data from each file\n    filenames = []\n    numeric_data = []\n\n    for file in sorted_text_files:\n        filenames.append(os.path.basename(file))\n        numeric_data.append(re.findall(regex, file))\n\n    # Create a pandas DataFrame with the extracted data\n    df = pd.DataFrame({'Filename': filenames, 'Numeric Data': numeric_data})\n    return df", "compilation_passed": true, "time": 0.0011069774627685547, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Validate the directory\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n\n    # Find text files matching the pattern\n    file_list = glob.glob(os.path.join(directory, file_pattern))\n\n    # Check if there are matching files\n    if not file_list:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in directory '{directory}'.\")\n\n    # Extract data from each file\n    data = []\n    for file in file_list:\n        with open(file, 'r') as f:\n            content = f.read()\n            matches = re.findall(regex, content)\n            data.append((os.path.basename(file), matches))\n\n    # Create a DataFrame\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0011110305786132812, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Check if the directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n\n    # Find the files matching the pattern in the specified directory\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n\n    # Initialize the DataFrame\n    df = pd.DataFrame(columns=['Filename', 'Numeric Data'])\n\n    # Iterate over each file and extract numeric data using regex\n    for filename in natsort.natsorted(files):\n        with open(filename, 'r') as file:\n            content = file.read()\n            numeric_data = re.findall(regex, content)\n            if numeric_data:\n                numeric_data = [int(num) for num in numeric_data]\n            df = df.append({'Filename': os.path.basename(filename), 'Numeric Data': numeric_data}", "compilation_passed": false, "time": 0.0002541542053222656, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n\n    text_files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)), reverse=False)\n\n    if not text_files:\n        raise ValueError(f\"No text files matching the pattern '{file_pattern}' found in directory '{directory}'.\")\n\n    data = []\n    for text_file in text_files:\n        with open(text_file, 'r') as f:\n            content = f.read()\n            numeric_data = re.findall(regex, content)\n            data.append((os.path.basename(text_file), numeric_data))\n\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0011260509490966797, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Ensure that the specified directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n\n    # Find all text files matching the pattern in the directory\n    file_pattern_with_dir = os.path.join(directory, file_pattern)\n    text_files = natsort.natsorted(glob.glob(file_pattern_with_dir))\n\n    # Ensure at least one file is found\n    if not text_files:\n        raise ValueError(f\"No files matching pattern '{file_pattern_with_dir}' found in directory '{directory}'.\")\n\n    # Initialize an empty list to store numeric data for each file\n    data = []\n\n    # Iterate over each text file and extract numeric data\n    for file in text_files:\n        with open(file, \"r\") as f:\n            # Read the file content and match numeric data using regex\n            content = f.read()\n            numeric_data = re.findall(regex, content)\n\n            # Append the file name and numeric", "compilation_passed": true, "time": 0.0010900497436523438, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n\n    text_files = glob.glob(os.path.join(directory, file_pattern))\n    if not text_files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in directory '{directory}'.\")\n\n    sorted_files = natsort.natsorted(text_files)\n\n    data = []\n    for file in sorted_files:\n        with open(file, 'r') as f:\n            content = f.read()\n            matches = re.findall(regex, content)\n            data.append((os.path.basename(file), matches))\n\n    return pd.DataFrame(data, columns=['Filename', 'Numeric Data'])", "compilation_passed": true, "time": 0.0010950565338134766, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found.\")\n\n    file_pattern = os.path.join(directory, file_pattern)\n    matching_files = glob.glob(file_pattern)\n\n    if not matching_files:\n        raise ValueError(\"No matching files found.\")\n\n    matching_files = natsort.natsorted(matching_files)\n    data = {'Filename': [], 'Numeric Data': []}\n\n    for filename in matching_files:\n        with open(filename, 'r') as file:\n            file_data = file.read()\n            numeric_data = re.findall(regex, file_data)\n\n            if numeric_data:\n                numeric_data = [int(num) for num in numeric_data]\n            else:\n                numeric_data = []\n\n            data['Filename'].append(os.path.basename(filename))\n            data['Numeric Data'].append(numeric_data)\n\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0011360645294189453, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)), alg=natsort.PATH)\n\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n\n    data = []\n\n    for file in files:\n        if os.path.isfile(file):\n            with open(file, 'r') as f:\n                content = f.read()\n\n            numbers = re.findall(regex, content)\n            data.append((os.path.basename(file), numbers))\n\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n\n    return df", "compilation_passed": true, "time": 0.001119852066040039, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Check if the directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory {directory} not found.\")\n\n    # Find all the text files matching the pattern in the specified directory\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching pattern {file_pattern} in directory {directory}.\")\n\n    # Create an empty list to store the extracted data\n    data = []\n    # Iterate over each text file and extract the numeric data\n    for file in natsort.natsorted(files):\n        with open(file, 'r') as f:\n            content = f.read()\n            # Extract the numeric data using the regular expression\n            match = re.findall(regex, content)\n            if match:\n                data.extend(match)\n\n    # Create a DataFrame from the extracted data\n    df = pd.DataFrame({'Filename': files, 'Numeric Data': data})\n\n    return df", "compilation_passed": true, "time": 0.0011098384857177734, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Check if the directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(\"Directory '{}' does not exist\".format(directory))\n\n    # Initialize empty list for data\n    data = []\n\n    # Use glob to find all files matching the pattern in the directory\n    files = glob.glob(os.path.join(directory, file_pattern))\n\n    # Sort the files using natsorted\n    sorted_files = natsort.natsorted(files)\n\n    if not sorted_files:\n        raise ValueError(\"No files matching the pattern '{}' found in directory '{}'\".format(file_pattern, directory))\n\n    # Loop through each file\n    for file in sorted_files:\n        filename = os.path.basename(file)\n        # Read the file and extract numeric data using the regular expression\n        with open(file, \"r\") as f:\n            text = f.read()\n            # Find all matches of the regex in the text\n            matches = re.findall(regex, text)\n            # Convert the matches to", "compilation_passed": true, "time": 0.00115203857421875, "tests_passed": false, "error": "FileNotFoundError"}
