{"code": "np.random.seed(seed)\n    mat = np.random.rand(rows, columns)\n    scaled = MinMaxScaler().fit_transform(mat)\n    return scaled", "compilation_passed": true, "time": 0.0012087821960449219, "tests_passed": true, "error": null}
{"code": "rng = np.random.default_rng(seed)\n    matrix = rng.random((rows, columns))\n    scaler = MinMaxScaler()\n    return scaler.fit_transform(matrix)", "compilation_passed": true, "time": 0.0013539791107177734, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    matrix = np.random.rand(rows, columns)\n    min_max_scaler = MinMaxScaler()\n    scaled_matrix = min_max_scaler.fit_transform(matrix)\n    return scaled_matrix", "compilation_passed": true, "time": 0.0012021064758300781, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    data = np.random.random((rows, columns))\n    scaler = MinMaxScaler()\n    scaled = scaler.fit_transform(data)\n\n    return scaled", "compilation_passed": true, "time": 0.0012059211730957031, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    matrix = np.random.rand(rows, columns)\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    return scaler.fit_transform(matrix)", "compilation_passed": true, "time": 0.0016303062438964844, "tests_passed": true, "error": null}
{"code": "# Initialize random seed\n    np.random.seed(seed)\n    # Generate a random matrix of the specified dimensions\n    matrix = np.random.randint(10, size=(rows, columns))\n    # Scale the matrix between 0 and 1\n    scaled_matrix = MinMaxScaler().fit_transform(matrix)\n    # Return the scaled matrix\n    return scaled_matrix", "compilation_passed": true, "time": 0.0013136863708496094, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    random_values = np.random.random((rows, columns))\n    scaler = MinMaxScaler()\n    scaled_values = scaler.fit_transform(random_values)\n\n    return scaled_values", "compilation_passed": true, "time": 0.0011959075927734375, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    x = np.random.randn(rows, columns)\n    scaler = MinMaxScaler()\n    x = scaler.fit_transform(x)\n    return x", "compilation_passed": true, "time": 0.001226663589477539, "tests_passed": true, "error": null}
{"code": "# Generate a random matrix with specified dimensions\n    matrix = np.random.randint(low=0, high=10, size=(rows, columns))\n    # Scale the matrix values between 0 and 1 using MinMaxScaler\n    scaler = MinMaxScaler()\n    scaled_matrix = scaler.fit_transform(matrix)\n    # Return the scaled matrix\n    return scaled_matrix", "compilation_passed": true, "time": 0.0012578964233398438, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    data = np.random.random([rows, columns])\n    scaler = MinMaxScaler()\n    result = scaler.fit_transform(data)\n    return result", "compilation_passed": true, "time": 0.0011591911315917969, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    matrix = np.random.rand(rows, columns)\n\n    scaler = MinMaxScaler()\n    scaled_matrix = scaler.fit_transform(matrix)\n\n    return scaled_matrix", "compilation_passed": true, "time": 0.0012640953063964844, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    return MinMaxScaler().fit_transform(np.random.rand(rows, columns))", "compilation_passed": true, "time": 0.0011837482452392578, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    a = np.random.random((rows, columns))\n    scaled_a = MinMaxScaler(feature_range=(0, 1)).fit_transform(a)\n    return scaled_a", "compilation_passed": true, "time": 0.0011680126190185547, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    random_matrix = np.random.randint(1, 10, size=(rows, columns)).astype(float)\n    scaled_matrix = MinMaxScaler().fit_transform(random_matrix)\n\n    return scaled_matrix", "compilation_passed": true, "time": 0.0012607574462890625, "tests_passed": true, "error": null}
{"code": "# Set the random seed\n    np.random.seed(seed)\n    # Generate a random matrix with specified dimensions\n    matrix = np.random.random((rows, columns))\n    # Create a MinMaxScaler object to scale the values between 0 and 1\n    scaler = MinMaxScaler()\n    # Scale the matrix and return the result\n    return scaler.fit_transform(matrix)", "compilation_passed": true, "time": 0.0011777877807617188, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    array = np.random.rand(rows, columns)\n    scaler = MinMaxScaler()\n    array_scaled = scaler.fit_transform(array)\n    return array_scaled", "compilation_passed": true, "time": 0.0011818408966064453, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    matrix = np.random.randint(100, size=(rows, columns))\n    scaler = MinMaxScaler()\n    return scaler.fit_transform(matrix)", "compilation_passed": true, "time": 0.0013360977172851562, "tests_passed": true, "error": null}
{"code": "rng = np.random.RandomState(seed)\n    random_data = rng.randint(low=0, high=100, size=(rows, columns))\n    return MinMaxScaler().fit_transform(random_data)", "compilation_passed": true, "time": 0.0017547607421875, "tests_passed": true, "error": null}
{"code": "# generate a matrix of random values\n    random_array = np.random.rand(rows, columns)\n\n    # scale the matrix between 0 and 1\n    min_max_scaler = MinMaxScaler()\n    scaled_array = min_max_scaler.fit_transform(random_array)\n\n    return scaled_array", "compilation_passed": true, "time": 0.0009849071502685547, "tests_passed": true, "error": null}
{"code": "# Generate a matrix of random values with specified dimensions\n    data = np.random.rand(rows, columns)\n\n    # Scale the data between 0 and 1 using MinMaxScaler\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n\n    return data", "compilation_passed": true, "time": 0.0012068748474121094, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    array = np.random.rand(rows, columns)\n    scaler = MinMaxScaler()\n    scaled = scaler.fit_transform(array)\n    return scaled", "compilation_passed": true, "time": 0.0011799335479736328, "tests_passed": true, "error": null}
{"code": "# Set the random seed\n    np.random.seed(seed)\n\n    # Generate a random matrix with given dimensions\n    matrix = np.random.randint(0, 100, size=(rows, columns))\n\n    # Scale the matrix between 0 and 1\n    scaler = MinMaxScaler()\n    matrix_scaled = scaler.fit_transform(matrix)\n\n    return matrix_scaled", "compilation_passed": true, "time": 0.0012891292572021484, "tests_passed": true, "error": null}
{"code": "# Create an array of random values with specified dimensions\n    data = np.random.seed(seed)\n    data = np.random.rand(rows, columns)\n    # Initialize the MinMaxScaler\n    scaler = MinMaxScaler()\n    # Scale the matrix values to be between 0 and 1\n    scaled_data = scaler.fit_transform(data)\n    # Return the scaled matrix\n    return scaled_data", "compilation_passed": true, "time": 0.001234292984008789, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    matrix = np.random.randint(0, 11, size=(rows, columns))\n    scaler = MinMaxScaler()\n    matrix = scaler.fit_transform(matrix)\n    return matrix", "compilation_passed": true, "time": 0.0013051033020019531, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    data = np.random.rand(rows, columns)\n    scaler = MinMaxScaler()\n    data = scaler.fit_transform(data)\n    return data", "compilation_passed": true, "time": 0.0011928081512451172, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    x = np.random.randint(0, 101, rows * columns).reshape((rows, columns))\n    scaler = MinMaxScaler()\n    scaled_x = scaler.fit_transform(x)\n    return scaled_x", "compilation_passed": true, "time": 0.0013408660888671875, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    arr = np.random.randint(10000, size=(rows, columns))\n    scaler = MinMaxScaler()\n    return scaler.fit_transform(arr)", "compilation_passed": true, "time": 0.0012619495391845703, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    data = np.random.randint(0, 100, size=(rows, columns)).astype(float)\n    scaler = MinMaxScaler()\n    return scaler.fit_transform(data)", "compilation_passed": true, "time": 0.0012140274047851562, "tests_passed": true, "error": null}
{"code": "# Generate a random matrix\n    matrix = np.random.rand(rows, columns)\n\n    # Scale the matrix between 0 and 1\n    scaled_matrix = MinMaxScaler().fit_transform(matrix)\n\n    return scaled_matrix", "compilation_passed": true, "time": 0.0010161399841308594, "tests_passed": true, "error": null}
