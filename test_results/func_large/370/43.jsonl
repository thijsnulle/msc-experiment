{"code": "if not os.path.exists(directory_path):\n        raise FileNotFoundError(f\"Directory '{directory_path}' does not exist.\")\n\n    processed_json_files = []\n    json_files = glob.glob(os.path.join(directory_path, \"*.json\"))\n\n    for file in json_files:\n        with open(file, \"r\", encoding=\"utf-8\") as f:\n            content = f.read()\n\n        # Use regex to find double quotes and escape them\n        escaped_content = re.sub(r'\"', r'\\\\\"', content)\n\n        with open(file, \"w\", encoding=\"utf-8\") as f:\n            f.write(escaped_content)\n\n        processed_json_files.append(file)\n\n    return processed_json_files", "compilation_passed": true, "time": 0.004862308502197266, "tests_passed": true, "error": null}
{"code": "# Get the absolute path of the directory\n    directory_path = os.path.abspath(directory_path)\n\n    # Check if the directory exists\n    if not os.path.exists(directory_path):\n        raise FileNotFoundError(f\"Directory does not exist: {directory_path}\")\n\n    # Get a list of all JSON files in the directory\n    json_files = glob.glob(os.path.join(directory_path, \"*.json\"))\n\n    processed_json_files = []\n\n    for json_file in json_files:\n        # Open the JSON file and read its contents\n        with open(json_file, \"r\", encoding=\"utf-8\") as file:\n            json_data = json.load(file)\n\n        # Escape the double quotes\n        json_data = re.sub(r'(?<!\\\\)\"', r'\\\\\\\"', json_data)\n\n        # Write the escaped JSON back to the file\n        with open(json_file, \"w\", encoding=\"utf-8\") as file:\n            file.write(", "compilation_passed": false, "time": 0.000225067138671875, "tests_passed": false, "error": "SyntaxError"}
{"code": "processed_files = []\n\n    # Check if directory exists\n    if not os.path.exists(directory_path):\n        raise FileNotFoundError(f\"Directory '{directory_path}' not found.\")\n\n    # Recursively search for JSON files\n    json_files = glob.glob(directory_path + '/**/*.json', recursive=True)\n\n    for json_file in json_files:\n        with open(json_file, 'r') as file:\n            data = json.load(file)\n\n            # Convert to string and escape double quotes\n            data = json.dumps(data, indent=4)\n            data = re.sub(r'\"', r'\\\\\"', data)\n\n        with open(json_file, 'w') as file:\n            file.write(data)\n\n        processed_files.append(json_file)\n\n    return processed_files", "compilation_passed": true, "time": 0.00506591796875, "tests_passed": true, "error": null}
{"code": "files = glob.glob(os.path.join(directory_path, \"*.json\"))\n\n    processed_files = []\n\n    for json_file in files:\n        try:\n            with open(json_file, \"r\", encoding=\"utf-8\") as file:\n                json_data = json.load(file)\n\n            escaped_json = re.sub(r'\"', r\"\\\\\\\\\\\"\", json.dumps(json_data))\n\n            with open(json_file, \"w\", encoding=\"utf-8\") as file:\n                json.dump(json.loads(escaped_json), file)\n\n            processed_files.append(json_file)\n\n        except FileNotFoundError:\n            raise FileNotFoundError(f\"Directory '{directory_path}' does not exist.\")\n\n        except Exception:\n            pass\n\n    return processed_files", "compilation_passed": true, "time": 0.0021200180053710938, "tests_passed": true, "error": null}
{"code": "files = glob.glob(os.path.join(directory_path, \"*.json\"))\n    for file_path in files:\n        with open(file_path, \"r\") as file:\n            content = file.read()\n            escaped_content = re.sub(r'\"', r'\\\\\"', content)\n        with open(file_path, \"w\") as file:\n            file.write(escaped_content)\n    return files", "compilation_passed": true, "time": 0.0032510757446289062, "tests_passed": true, "error": null}
{"code": "if not os.path.isdir(directory_path):\n        raise FileNotFoundError(f\"Directory does not exist: {directory_path}\")\n    files_list = []\n    for json_file in glob.glob(directory_path + \"/**/*.json\", recursive=True):\n        with open(json_file, \"r\", encoding=\"utf8\") as file:\n            content = file.read()\n        content = re.sub(r'\"', r\"\\\\\\\\\\\"\", content)\n        with open(json_file, \"w\", encoding=\"utf8\") as file:\n            file.write(content)\n        files_list.append(json_file)\n    return files_list", "compilation_passed": true, "time": 0.005011081695556641, "tests_passed": true, "error": null}
{"code": "# Check if the directory exists\n    if not os.path.exists(directory_path):\n        raise FileNotFoundError(\"Directory does not exist.\")\n\n    # Define the pattern for double quotes\n    double_quote_pattern = r'(?<!\\\\)\"'\n\n    # Get a list of all JSON files in the directory\n    json_files = glob.glob(os.path.join(directory_path, \"*.json\"))\n\n    # Process each JSON file\n    processed_files = []\n    for file in json_files:\n        with open(file, \"r\", encoding=\"utf-8\") as json_file:\n            json_data = json.load(json_file)\n\n        # Check if the data is a string\n        if isinstance(json_data, str):\n            # Use regular expressions to replace all double quotes with double backslashes\n            json_data = re.sub(double_quote_pattern, r'\\\\\"', json_data)\n\n        # Write back to the file\n        with open(file, \"w\", encoding=\"utf-8\") as json", "compilation_passed": false, "time": 0.00020623207092285156, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not os.path.exists(directory_path):\n        raise FileNotFoundError(f\"Directory '{directory_path}' does not exist.\")\n\n    json_files = glob.glob(f\"{directory_path}/*.json\")\n    processed_files = []\n\n    for json_file in json_files:\n        with open(json_file, \"r\") as file:\n            content = file.read()\n\n        escaped_content = re.sub(r'\"([^\"]+)\"', r'\"\\1\"', content)\n\n        with open(json_file, \"w\") as file:\n            file.write(escaped_content)\n\n        processed_files.append(json_file)\n\n    return processed_files", "compilation_passed": true, "time": 0.0021238327026367188, "tests_passed": true, "error": null}
{"code": "json_files = glob.glob(os.path.join(directory_path, \"*.json\"))\n    processed_files = []\n\n    if not json_files:\n        return []\n\n    for file_path in json_files:\n        with open(file_path, \"r\") as file:\n            content = file.read()\n\n        content = re.sub(r'\"', r'\\\\\"', content)\n        with open(file_path, \"w\") as file:\n            file.write(content)\n        processed_files.append(file_path)\n\n    return processed_files", "compilation_passed": true, "time": 0.0032651424407958984, "tests_passed": true, "error": null}
{"code": "# Check if the directory exists\n    if not os.path.exists(directory_path):\n        raise FileNotFoundError(\"The specified directory does not exist.\")\n\n    # Find all JSON files in the directory\n    json_files = glob.glob(os.path.join(directory_path, \"*.json\"))\n\n    # Process each JSON file\n    for json_file in json_files:\n        with open(json_file, \"r\") as file:\n            content = file.read()\n\n        # Escape double quotes in the content\n        content = re.sub(r'\"', r'\\\\\"', content)\n\n        # Write back the modified content\n        with open(json_file, \"w\") as file:\n            json.dump(json.loads(content), file, indent=4)\n\n    # Return the list of processed JSON files\n    return json_files", "compilation_passed": true, "time": 0.001934051513671875, "tests_passed": false, "error": "json.decoder.JSONDecodeError"}
{"code": "if not os.path.exists(directory_path):\n        raise FileNotFoundError(f\"Directory not found: {directory_path}\")\n\n    processed_files = []\n    for file in glob.glob(directory_path + \"/*.json\"):\n        with open(file, \"r\") as json_file:\n            json_data = json_file.read()\n            json_data = re.sub(r'\"([^\"]*)\"', r'\"\\1\"', json_data)\n\n        with open(file, \"w\") as json_file:\n            json_file.write(json_data)\n\n        processed_files.append(file)\n\n    return processed_files", "compilation_passed": true, "time": 0.002045869827270508, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(directory_path):\n        raise FileNotFoundError(f\"The specified directory '{directory_path}' does not exist\")\n\n    json_files = glob.glob(os.path.join(directory_path, \"*.json\"))\n    modified_files = []\n\n    for file_path in json_files:\n        with open(file_path, \"r\", encoding=\"utf-8\") as file:\n            content = file.read()\n\n        # Prepend double quotes with double backslashes\n        modified_content = re.sub(r'(?<!\\\\\\\\)\"', r'\\\\\"', content)\n\n        with open(file_path, \"w\", encoding=\"utf-8\") as file:\n            file.write(modified_content)\n\n        modified_files.append(file_path)\n\n    return modified_files", "compilation_passed": true, "time": 0.0048122406005859375, "tests_passed": true, "error": null}
{"code": "if not os.path.isdir(directory_path):\n        raise FileNotFoundError(\"Specified directory does not exist.\")\n\n    json_files = glob.glob(os.path.join(directory_path, \"*.json\"))\n\n    for file in json_files:\n        with open(file, \"r\") as f:\n            content = f.read()\n\n        # Define regular expression to find double quotes\n        double_quote_pattern = re.compile(r'\"')\n\n        # Replace all double quotes with escaped double quotes\n        escaped_content = double_quote_pattern.sub(r'\\\\\\\\\"', content)\n\n        with open(file, \"w\") as f:\n            f.write(escaped_content)\n\n    return json_files", "compilation_passed": true, "time": 0.005151271820068359, "tests_passed": true, "error": null}
{"code": "if not os.path.isdir(directory_path):\n        raise FileNotFoundError(f\"Directory not found: {directory_path}\")\n\n    files = glob.glob(os.path.join(directory_path, \"*.json\"))\n    processed_files = []\n    for file in files:\n        with open(file, \"r\") as f:\n            content = f.read()\n            pattern = r\"(?<!\\\\\\\\)((\\\"(?:[^\\\"]|\\\\\\\")*?\\\"))\"\n            replaced = re.sub(pattern, r'\\1\\\\\"', content)\n        with open(file, \"w\") as f:\n            f.write(replaced)\n        processed_files.append(file)\n    return processed_files", "compilation_passed": true, "time": 0.0024509429931640625, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(directory_path):\n        raise FileNotFoundError(f\"Directory not found: {directory_path}\")\n\n    # Initialize an empty list to store the processed JSON files\n    processed_files = []\n\n    # Iterate over each file in the directory\n    for filename in glob.glob(os.path.join(directory_path, \"*.json\")):\n        with open(filename, \"r\", encoding=\"utf-8\") as json_file:\n            json_data = json_file.read()\n\n        # Use regex to replace double quotes with double backslashes\n        modified_json_data = re.sub(r'(?<!\\\\)(?:\\\\\\\\)*\"', r'\\1\\\\\"', json_data)\n\n        # Write back the modified content to the JSON file\n        with open(filename, \"w\", encoding=\"utf-8\") as json_file:\n            json_file.write(modified_json_data)\n\n        # Append the processed file to the list\n        processed_files.append(filename)\n\n    return processed", "compilation_passed": true, "time": 0.0030319690704345703, "tests_passed": false, "error": "re.error"}
{"code": "# Check if directory exists\n    if not os.path.exists(directory_path):\n        raise FileNotFoundError(f\"Directory '{directory_path}' not found.\")\n\n    # Find all JSON files in the directory\n    json_files = glob.glob(os.path.join(directory_path, \"*.json\"))\n\n    processed_files = []\n\n    for json_file in json_files:\n        with open(json_file, \"r\") as file:\n            content = file.read()\n\n        # Replace double quotes with escaped double quotes\n        modified_content = re.sub(r'\"', r\"\\\\\" + '\"', content)\n\n        with open(json_file, \"w\") as file:\n            file.write(modified_content)\n\n        processed_files.append(json_file)\n\n    return processed_files", "compilation_passed": true, "time": 0.0050199031829833984, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(directory_path):\n        raise FileNotFoundError(f\"Directory not found: {directory_path}\")\n    json_files = glob.glob(f\"{directory_path}/*.json\")\n\n    for file in json_files:\n        with open(file, \"r\", encoding='utf-8') as file:\n            content = file.read()\n        modified_content = re.sub(r'\"', r'\\\\\\\\\"', content)\n        with open(file, \"w\", encoding='utf-8') as file:\n            file.write(modified_content)\n\n    return json_files", "compilation_passed": true, "time": 0.0018470287322998047, "tests_passed": false, "error": "TypeError"}
{"code": "if not os.path.exists(directory_path):\n        raise FileNotFoundError(\"Directory not found: {}\".format(directory_path))\n\n    json_files = glob.glob(os.path.join(directory_path, '*.json'))\n    modified_json_files = []\n\n    for json_file in json_files:\n        with open(json_file, 'r') as file:\n            content = file.read()\n\n        # Escape double quotes using regex and replace them with backslashes\n        escaped_content = re.sub(r'(?<!\\\\)\"', r'\\\\\"', content)\n\n        # Write back the escaped content to the file\n        with open(json_file, 'w') as file:\n            file.write(escaped_content)\n\n        modified_json_files.append(json_file)\n\n    return modified_json_files", "compilation_passed": true, "time": 0.004869937896728516, "tests_passed": true, "error": null}
{"code": "import os\n    import re\n    import json\n    import glob\n\n    # Check if the directory exists\n    if not os.path.exists(directory_path):\n        raise FileNotFoundError(f\"Directory '{directory_path}' not found.\")\n\n    json_files = glob.glob(os.path.join(directory_path, \"*.json\"))\n    processed_files = []\n\n    # Process each JSON file in the directory\n    for json_file in json_files:\n        # Read the JSON file\n        with open(json_file, \"r\") as file:\n            data = json.load(file)\n\n        # Check if the data is of the type 'str', process it, otherwise pass it to the 'process_data' function\n        if isinstance(data, str):\n            # Find all double quotes in the string\n            double_quotes = re.findall('\"', data)\n\n            # Count the number of double quotes\n            num_double_quotes = len(double_quotes)\n\n            # Replace double quotes with escaped double quotes\n            data = data.", "compilation_passed": false, "time": 0.0002200603485107422, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not os.path.exists(directory_path):\n        raise FileNotFoundError(f\"Directory '{directory_path}' not found.\")\n\n    pattern = os.path.join(directory_path, \"*.json\")\n\n    file_list = []\n\n    for filename in glob.iglob(pattern, recursive=True):\n        if not os.path.isfile(filename):\n            continue\n\n        with open(filename, \"r\") as file:\n            content = file.read()\n\n        content = re.sub(r'(?<!\\\\)\"', r'\\\"', content)  # Escape double quotes with a backslash\n\n        with open(filename, \"w\") as file:\n            file.write(content)\n\n        file_list.append(filename)\n\n    return file_list", "compilation_passed": true, "time": 0.005012989044189453, "tests_passed": true, "error": null}
{"code": "processed_files = []\n\n    # Check if the specified directory exists\n    if not os.path.exists(directory_path):\n        raise FileNotFoundError(f\"Directory '{directory_path}' does not exist.\")\n\n    # Search for JSON files in the specified directory\n    json_files = glob.glob(os.path.join(directory_path, \"*.json\"))\n\n    # Iterate over JSON files\n    for json_file in json_files:\n        # Open the JSON file for reading\n        with open(json_file, \"r\", encoding=\"utf-8\") as file:\n            content = file.read()\n\n        # Use regular expression to match and replace double quotes\n        content_with_escaped_quotes = re.sub(r'\"', r'\\\\' + '\"', content)\n\n        # Write the escaped quotes back to the original JSON file\n        with open(json_file, \"w\", encoding=\"utf-8\") as file:\n            json.dump(json.loads(content_with_escaped_quotes), file", "compilation_passed": false, "time": 0.00022411346435546875, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not os.path.exists(directory_path):\n        raise FileNotFoundError(\"Directory does not exist.\")\n    files = glob.glob(f\"{directory_path}/*.json\")\n    for file_path in files:\n        with open(file_path, \"r\") as file:\n            content = file.read()\n            content = re.sub(r'(?<!\\\\)\"', r'\\\"', content)\n        with open(file_path, \"w\") as file:\n            file.write(content)\n    return files", "compilation_passed": true, "time": 0.004776954650878906, "tests_passed": true, "error": null}
{"code": "try:\n        processed_files = []\n        json_files = glob.glob(directory_path + '/*.json')\n\n        for file_path in json_files:\n            with open(file_path, 'r', encoding='utf-8') as file:\n                content = file.read()\n                modified_content = re.sub(r'\"', r'\\\\\\\\\"', content)\n\n            with open(file_path, 'w', encoding='utf-8') as file:\n                file.write(modified_content)\n\n            processed_files.append(file_path)\n\n        return processed_files\n\n    except FileNotFoundError:\n        raise FileNotFoundError(\"Directory does not exist.\")", "compilation_passed": true, "time": 0.0033960342407226562, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(directory_path):\n        raise FileNotFoundError(f\"The specified directory '{directory_path}' does not exist.\")\n    files_list = glob.glob(directory_path + \"/*.json\")\n    for file in files_list:\n        with open(file, \"r\") as json_file:\n            content = json_file.read()\n            modified_content = re.sub('\"', '\\\\\"', content)\n        with open(file, \"w\") as json_file:\n            json_file.write(modified_content)\n    return files_list", "compilation_passed": true, "time": 0.004821062088012695, "tests_passed": true, "error": null}
{"code": "processed_files = []\n    for file_path in glob.glob(os.path.join(directory_path, \"*.json\")):\n        with open(file_path, \"r\") as json_file:\n            json_content = json.load(json_file)\n\n        if isinstance(json_content, str):\n            # Use regex to find all double quotes and prepend them with a backslash\n            json_content = re.sub(r'\"', r'\\\\\"', json_content)\n        elif isinstance(json_content, dict):\n            # Recursively process the dictionary values\n            for key, value in json_content.items():\n                json_content[key] = task_func(value) if isinstance(value, dict) else value\n\n        # Write back the modified content to the respective JSON file\n        with open(file_path, \"w\") as json_file:\n            json.dump(json_content, json_file)\n\n        processed_files.append(file_path)\n\n    return processed_files", "compilation_passed": true, "time": 0.0020532608032226562, "tests_passed": true, "error": null}
{"code": "# Check if the specified directory exists\n    if not os.path.exists(directory_path):\n        raise FileNotFoundError(\"Directory does not exist.\")\n\n    # Set the pattern to match all JSON files in the directory\n    pattern = os.path.join(directory_path, \"*.json\")\n\n    # Create a list to store the processed JSON files\n    processed_files = []\n\n    # Iterate through all JSON files in the directory\n    for file_path in glob.glob(pattern):\n        # Read the JSON file\n        with open(file_path, \"r\") as file:\n            content = file.read()\n\n        # Escape double quotes in the content\n        content = re.sub(r\"\\\"\", r\"\\\\\" + '\"', content)\n\n        # Write the modified content back to the JSON file\n        with open(file_path, \"w\") as file:\n            file.write(content)\n\n        # Append the file path to the list of processed files\n        processed_files.append(file_path)\n\n    return processed_files", "compilation_passed": true, "time": 0.004773139953613281, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(directory_path):\n        raise FileNotFoundError(f\"Directory {directory_path} not found.\")\n\n    json_files = glob.glob(f\"{directory_path}/*.json\")\n    processed_files = []\n\n    for file_path in json_files:\n        with open(file_path, \"r\") as file:\n            content = file.read()\n\n        # Escape double quotes using regex\n        escaped_content = re.sub(r'(?<!\\\\\\\\)\"', r'\\\\', content)\n\n        # Write back the modified content\n        with open(file_path, \"w\") as file:\n            file.write(escaped_content)\n\n        processed_files.append(file_path)\n\n    return processed_files", "compilation_passed": true, "time": 0.005400180816650391, "tests_passed": true, "error": null}
{"code": "# Initialize the list of processed files\n    processed_files = []\n\n    # Use the `os.path.isdir` method to check if the given directory exists\n    if not os.path.isdir(directory_path):\n        # If the directory does not exist, raise a FileNotFoundError with an error message\n        raise FileNotFoundError(f\"Directory '{directory_path}' not found.\")\n\n    # Use the `glob.glob` method to get a list of all JSON files in the given directory\n    json_files = glob.glob(os.path.join(directory_path, '*.json'))\n\n    # Iterate over each JSON file in the directory\n    for json_file in json_files:\n        # Use the `os.path.basename` method to get the filename without the full path\n        filename = os.path.basename(json_file)\n\n        # Use the `os.path.join` method to create the full path to the file\n        file_path = os.path.join(directory_path, filename)\n\n        # Open the file in read mode using `with` and", "compilation_passed": true, "time": 0.002062082290649414, "tests_passed": false, "error": "TypeError"}
{"code": "# Check if the directory exists\n    if not os.path.exists(directory_path):\n        raise FileNotFoundError(f\"Directory '{directory_path}' not found\")\n\n    # Get all JSON files in the directory\n    files = glob.glob(os.path.join(directory_path, \"*.json\"))\n\n    # Iterate through each JSON file\n    for file in files:\n        # Read JSON from the file\n        with open(file, \"r\") as f:\n            data = json.load(f)\n\n        # Convert the data to a string to apply regular expressions\n        data_str = json.dumps(data)\n\n        # Regular expression pattern to match double quotes\n        pattern = r'\"'\n\n        # Replace double quotes with backslash-escaped double quotes\n        data_str = re.sub(pattern, r'\\\\\"', data_str)\n\n        # Parse the modified string back to JSON\n        data = json.loads(data_str)\n\n        # Write the modified JSON back to the file\n        with open(file, \"w\") as f:", "compilation_passed": false, "time": 0.00020313262939453125, "tests_passed": false, "error": "IndentationError"}
{"code": "if not os.path.exists(directory_path):\n        raise FileNotFoundError(\"Specified directory does not exist.\")\n\n    json_files = glob.glob(os.path.join(directory_path, \"*.json\"))\n    modified_files = []\n\n    for json_file in json_files:\n        with open(json_file, \"r\", encoding=\"utf-8\") as file:\n            content = file.read()\n            escaped_content = re.sub(r'(?<!\\\\\\\\)\"', r'\\\\\\\\\"', content)  # Escape double quotes using a double backslash\n\n        with open(json_file, \"w\", encoding=\"utf-8\") as file:\n            file.write(escaped_content)\n            modified_files.append(json_file)\n\n    return modified_files", "compilation_passed": true, "time": 0.005276203155517578, "tests_passed": true, "error": null}
