{"code": "assert mu >= -100 and mu <= 100\n    assert sigma > 0\n    assert n_samples > 0\n\n    np.random.seed(random_seed)\n    samples = np.random.normal(mu, sigma, n_samples)\n\n    ax = plt.subplot(1, 1, 1)\n    ax.hist(samples, bins=30, density=True)\n    x = np.linspace(mu - 3 * sigma, mu + 3 * sigma, 100)\n    ax.plot(x, norm.pdf(x, mu, sigma), 'r', linewidth=2)\n    ax.grid()\n\n    return ax, samples", "compilation_passed": true, "time": 0.010168790817260742, "tests_passed": true, "error": null}
{"code": "# Validate the input arguments\n    if not isinstance(n_samples, int) or n_samples <= 0:\n        raise ValueError(\"n_samples must be a positive integer.\")\n    if not isinstance(mu, (int, float)):\n        raise TypeError(\"mu must be a float or an integer.\")\n    if not isinstance(sigma, (int, float)) or sigma <= 0:\n        raise ValueError(\"sigma must be a positive float or integer.\")\n    if not isinstance(random_seed, int):\n        raise TypeError(\"random_seed must be an integer.\")\n\n    # Create a Figure and Axes object\n    fig, ax = plt.subplots()\n\n    # Set the random seed for reproducibility\n    np.random.seed(random_seed)\n\n    # Generate n_samples from a normal distribution defined by mu and sigma\n    samples = np.random.normal(mu, sigma, n_samples)\n\n    # Draw a histogram with density\n    ax.hist(samples, density=True, bins=30)\n\n    # Plot the PDF", "compilation_passed": true, "time": 0.010432004928588867, "tests_passed": false, "error": "TypeError"}
{"code": "if n_samples <= 0:\n        raise ValueError('n_samples must be greater than 0.')\n    if sigma <= 0:\n        raise ValueError('sigma must be greater than 0.')\n\n    # Set the random seed\n    np.random.seed(random_seed)\n\n    # Draw the samples\n    samples = np.random.normal(mu, sigma, n_samples)\n\n    # Plot the histogram\n    fig, ax = plt.subplots()\n    ax.hist(samples, density=True, bins=30)\n\n    # Plot the PDF\n    x = np.linspace(min(samples), max(samples), 100)\n    ax.plot(x, norm.pdf(x, mu, sigma), color='red', linewidth=2)\n\n    return ax, samples", "compilation_passed": true, "time": 0.08749604225158691, "tests_passed": true, "error": null}
{"code": "if not isinstance(n_samples, int):\n        raise ValueError(\"n_samples must be an int\")\n    if not isinstance(mu, (int, float)):\n        raise ValueError(\"mu must be an int or float\")\n    if not isinstance(sigma, (int, float)):\n        raise ValueError(\"sigma must be an int or float\")\n    if not isinstance(random_seed, int):\n        raise ValueError(\"random_seed must be an int\")\n    if n_samples < 1:\n        raise ValueError(\"n_samples must be greater than 0\")\n    if sigma < 0:\n        raise ValueError(\"sigma must be greater than 0\")\n\n    # Set up the random number generator\n    np.random.seed(random_seed)\n\n    # Draw samples from the normal distribution\n    samples = np.random.normal(loc=mu, scale=sigma, size=n_samples)\n\n    # Create the histogram plot\n    fig, ax = plt.subplots()\n    ax.hist(samples, bins=\"auto\", density", "compilation_passed": false, "time": 0.0003190040588378906, "tests_passed": false, "error": "SyntaxError"}
{"code": "if n_samples <= 0:\n        raise ValueError(\"n_samples must be greater than 0.\")\n    if sigma <= 0:\n        raise ValueError(\"sigma must be greater than 0.\")\n\n    np.random.seed(random_seed)\n    samples = np.random.normal(loc=mu, scale=sigma, size=n_samples)\n    plt.rcParams[\"figure.figsize\"] = [8, 6]\n    ax = plt.hist(samples, bins=100, density=True, edgecolor=\"black\")\n    x_range = np.linspace(mu - 3 * sigma, mu + 3 * sigma, 200)\n    pdf = norm.pdf(x_range, mu, sigma)\n    plt.plot(x_range, pdf, color=\"red\", linewidth=2)\n    plt.title(\"Histogram and PDF Plot\")\n    plt.xlabel(\"Value\")\n    plt.ylabel(\"Density\")\n    plt.show()\n\n    return ax, samples\n\n", "compilation_passed": true, "time": 0.060710906982421875, "tests_passed": false, "error": "AttributeError"}
{"code": "if n_samples <= 0:\n        raise ValueError(\"n_samples must be greater than zero.\")\n\n    if sigma <= 0:\n        raise ValueError(\"sigma must be greater than zero.\")\n\n    np.random.seed(random_seed)\n    samples = np.random.normal(loc=mu, scale=sigma, size=n_samples)\n    x = np.linspace(min(samples) - 3*sigma, max(samples) + 3*sigma, 1000)\n    p = norm.pdf(x, mu, sigma)\n\n    ax = plt.gca()\n    ax.set_xlim([min(samples) - 3*sigma, max(samples) + 3*sigma])\n    ax.set_ylim([0, p.max() + 0.05])\n    ax.set_title(\"Histogram with PDF\")\n    ax.set_xlabel(\"x\")\n    ax.set_ylabel(\"Density\")\n\n    ax.hist(samples, density=True, histtype='step", "compilation_passed": false, "time": 0.00016117095947265625, "tests_passed": false, "error": "SyntaxError"}
{"code": "if n_samples <= 0:\n        raise ValueError(\"n_samples must be a positive integer.\")\n\n    if sigma <= 0:\n        raise ValueError(\"sigma must be a positive value.\")\n\n    np.random.seed(random_seed)\n    samples = np.random.normal(loc=mu, scale=sigma, size=n_samples)\n\n    ax = plt.gca()\n    ax.hist(samples, bins=50, density=True, edgecolor=\"black\")\n\n    x = np.linspace(min(samples) - sigma, max(samples) + sigma, 100)\n    ax.plot(x, norm.pdf(x, mu, sigma), color=\"red\", linewidth=2)\n\n    ax.set_xlabel(\"X\")\n    ax.set_ylabel(\"Probability Density\")\n\n    ax.grid(False)\n    ax.spines[\"right\"].set_visible(False)\n    ax.spines[\"top\"].set_visible(False)\n\n    ", "compilation_passed": true, "time": 0.014616966247558594, "tests_passed": false, "error": "TypeError"}
{"code": "np.random.seed(random_seed)\n    samples = np.random.normal(mu, sigma, n_samples)\n\n    ax = plt.gca()\n    x = np.arange(samples.min() - 1, samples.max() + 1, 0.1)\n    ax.plot(x, norm.pdf(x, mu, sigma), 'r', linewidth=2)\n    ax.hist(samples, bins=100, density=True, facecolor='b', alpha=0.75)\n    plt.show()\n    return ax, samples", "compilation_passed": true, "time": 0.08682012557983398, "tests_passed": true, "error": null}
{"code": "if random_seed is not None:\n        np.random.seed(random_seed)\n    # Draw random samples from a normal distribution\n    samples = np.random.normal(mu, sigma, n_samples)\n    # Create a histogram from the samples\n    fig, ax = plt.subplots(dpi=100)\n    ax.hist(samples, density=True, bins=15, color='blue')\n    # Get x values for the PDF\n    x = np.linspace(min(samples), max(samples), 100)\n    # Compute y values for the PDF\n    y = norm.pdf(x, mu, sigma)\n    # Plot the PDF as a red line\n    ax.plot(x, y, linewidth=2, color='red')\n    return ax, samples", "compilation_passed": true, "time": 0.032305002212524414, "tests_passed": true, "error": null}
{"code": "if not isinstance(n_samples, int):\n        raise TypeError(\"n_samples must be of type int\")\n    if n_samples <= 0:\n        raise ValueError(\"n_samples must be greater than 0\")\n\n    if not isinstance(mu, (int, float)):\n        raise TypeError(\"mu must be a real number\")\n\n    if not isinstance(sigma, (int, float)):\n        raise TypeError(\"sigma must be a real number\")\n    if sigma <= 0:\n        raise ValueError(\"sigma must be greater than 0\")\n\n    np.random.seed(random_seed)\n\n    # Draw samples from a normal distribution\n    samples = np.random.normal(mu, sigma, n_samples)\n\n    # Compute bin edges for histogram\n    bins = np.linspace(-5, 5, 25)\n\n    # Create the plot\n    fig, ax = plt.subplots()\n    ax.hist(samples, bins=bins, density=True)\n\n    # Add the probability density function (PDF) plot\n    ", "compilation_passed": true, "time": 0.009332895278930664, "tests_passed": false, "error": "TypeError"}
{"code": "# Set the random seed for reproducibility\n    np.random.seed(random_seed)\n\n    # Generate samples from the normal distribution\n    samples = np.random.normal(loc=mu, scale=sigma, size=n_samples)\n\n    # Compute the bin edges for the histogram\n    bins = np.linspace(min(samples), max(samples), num=200)\n\n    # Create a figure and axis for the plot\n    fig, ax = plt.subplots()\n\n    # Generate the histogram\n    ax.hist(samples, bins=bins, density=True, alpha=0.6, color='blue')\n\n    # Generate the PDF\n    x = np.linspace(min(samples), max(samples), 1000)\n    pdf = norm.pdf(x, loc=mu, scale=sigma)\n\n    # Plot the PDF on the same axis\n    ax.plot(x, pdf, linewidth=2, color='red')\n\n    # Set the plot title and labels\n    ax.set_title(\"Histogram and PDF of a Normal Distribution\")", "compilation_passed": true, "time": 0.04286694526672363, "tests_passed": false, "error": "TypeError"}
{"code": "# Generate random samples from normal distribution using random seed for reproducibility.\n    np.random.seed(random_seed)\n    samples = np.random.normal(mu, sigma, n_samples)\n\n    # Define histogram bins and bin range, normalize the histogram density.\n    num_bins = 50\n    bin_range = (-3, 3)\n    n, bin_edges, _ = plt.hist(samples, bins=num_bins, range=bin_range, density=True, color='blue')\n    bin_width = bin_edges[1] - bin_edges[0]\n\n    # Define x-axis values for the PDF\n    x = np.linspace(min(bin_edges), max(bin_edges), 100)\n    y = norm.pdf(x, mu, sigma)\n\n    # Plot PDF on the histogram's axes using normalized density and red line.\n    ax = plt.gca()\n    ax.plot(x, y, linewidth=2, color='red')\n\n    return ax, samples", "compilation_passed": true, "time": 0.02502608299255371, "tests_passed": true, "error": null}
{"code": "# Generate sample data\n    samples = np.random.normal(mu, sigma, n_samples)\n\n    # Create a figure and axes for plotting\n    fig, ax = plt.subplots()\n\n    # Plot the histogram of the samples\n    ax.hist(samples, bins=30, density=True, alpha=0.6, color='blue')\n\n    # Set the axis labels and title\n    ax.set_xlabel('x')\n    ax.set_ylabel('PDF')\n    ax.set_title(f'Histogram and PDF for N({mu}, {sigma})')\n\n    # Plot the PDF of the normal distribution\n    x = np.linspace(min(samples), max(samples), 1000)\n    y = norm.pdf(x, mu, sigma)\n    ax.plot(x, y, color='red', linewidth=2)\n\n    return ax, samples", "compilation_passed": true, "time": 0.03843402862548828, "tests_passed": true, "error": null}
{"code": "# Validate n_samples\n    if n_samples <= 0:\n        raise ValueError(\"n_samples must be greater than 0.\")\n\n    # Validate mu\n    if not isinstance(mu, (float, int)):\n        raise TypeError(\"mu must be a float or int.\")\n\n    # Validate sigma\n    if sigma <= 0:\n        raise ValueError(\"sigma must be greater than 0.\")\n\n    # Set the random seed for reproducibility\n    np.random.seed(random_seed)\n\n    # Generate the random samples\n    samples = np.random.normal(mu, sigma, n_samples)\n\n    # Create the figure and axes for plotting\n    fig, ax = plt.subplots()\n\n    # Plot the histogram with normalized density and alpha value\n    ax.hist(samples, density=True, alpha=0.5, label=\"Histogram\")\n\n    # Create a range of x values for plotting the PDF\n    x = np.linspace(samples.min() - 0.5, samples.max() + 0", "compilation_passed": false, "time": 0.00029015541076660156, "tests_passed": false, "error": "SyntaxError"}
{"code": "if n_samples <= 0:\n        raise ValueError(\"n_samples must be greater than zero.\")\n    if sigma <= 0:\n        raise ValueError(\"sigma must be greater than zero.\")\n\n    np.random.seed(random_seed)\n\n    x = np.linspace(-5, 5, 1000)\n    samples = np.random.normal(mu, sigma, n_samples)\n    ax = plt.subplot()\n    ax.hist(samples, normed=1, histtype='stepfilled', alpha=0.2)\n    ax.plot(x, norm.pdf(x, mu, sigma), 'r', linewidth=2)\n\n    return ax, samples", "compilation_passed": true, "time": 0.006332874298095703, "tests_passed": false, "error": "AttributeError"}
{"code": "# Set random seed for reproducibility\n    np.random.seed(random_seed)\n\n    # Draw samples from normal distribution\n    samples = np.random.normal(mu, sigma, n_samples)\n\n    # Normalize histogram density\n    n, bins, patches = plt.hist(samples, bins=30, density=True, edgecolor='black')\n\n    # Define range for x-axis values\n    x = np.linspace(min(bins), max(bins), 100)\n\n    # Compute PDF and normalize it\n    pdf = norm.pdf(x, mu, sigma)\n    pdf = pdf / np.sum(pdf)\n\n    # Plot PDF on top of histogram\n    plt.plot(x, pdf, 'r', linewidth=2)\n\n    # Return Axes object and generated samples\n    return plt.gca(), samples", "compilation_passed": true, "time": 0.019190073013305664, "tests_passed": true, "error": null}
{"code": "# Generate data and plot histogram\n    np.random.seed(random_seed)  # Set a random seed for reproducibility\n    samples = np.random.normal(mu, sigma, n_samples)  # Generate samples\n    ax = plt.hist(samples, density=True, bins=20)  # Plot the histogram with normalized density\n    plt.ylabel('Probability')\n    plt.title(f'Histogram of Normal Distribution with mean={mu} and sigma={sigma}')\n\n    # Plot PDF\n    x = np.linspace(-10, 10, 1000)  # Generate x values for plotting\n    pdf = norm.pdf(x, loc=mu, scale=sigma)  # Calculate PDF values\n    plt.plot(x, pdf, color='red', linewidth=2)  # Plot the PDF\n\n    return ax, samples  # Return the axes object and the samples", "compilation_passed": true, "time": 0.015616178512573242, "tests_passed": true, "error": null}
{"code": "np.random.seed(random_seed)\n\n    samples = np.random.normal(mu, sigma, n_samples)\n    x = np.linspace(mu - 3 * sigma, mu + 3 * sigma, n_samples)\n    pdf = norm.pdf(x, mu, sigma)\n\n    ax = plt.subplot()\n    ax.hist(samples, density=True, bins=20)\n    ax.plot(x, pdf, 'r', linewidth=2)\n\n    return ax, samples", "compilation_passed": true, "time": 0.014993906021118164, "tests_passed": true, "error": null}
{"code": "# Check if n_samples is greater than zero\n    if n_samples <= 0:\n        raise ValueError(\"n_samples must be greater than 0\")\n\n    # Check if sigma is greater than zero\n    if sigma <= 0:\n        raise ValueError(\"sigma must be greater than 0\")\n\n    # Set the random seed\n    np.random.seed(random_seed)\n\n    # Generate samples from the normal distribution\n    samples = np.random.normal(loc=mu, scale=sigma, size=n_samples)\n\n    # Generate histogram plot\n    fig, ax = plt.subplots()\n    ax.hist(samples, bins=100, density=True)\n\n    # Generate PDF plot\n    x = np.linspace(-6, 6, 1000)\n    pdf = norm.pdf(x, loc=mu, scale=sigma)\n    ax.plot(x, pdf, color='red', linewidth=2)\n    plt.title(f\"Histogram of Normal Distribution (mu={mu}, sigma={sigma})\")\n\n    ", "compilation_passed": true, "time": 0.0226900577545166, "tests_passed": false, "error": "TypeError"}
{"code": "assert n_samples > 0, 'n_samples must be greater than 0'\n    assert sigma > 0, 'sigma must be greater than 0'\n\n    np.random.seed(random_seed)\n    samples = np.random.normal(mu, sigma, n_samples)\n\n    x = np.linspace(mu - 4 * sigma, mu + 4 * sigma, 100)\n    pdf = norm.pdf(x, mu, sigma)\n\n    fig, ax = plt.subplots()\n\n    ax.hist(samples, bins=50, density=True, edgecolor='black')\n    ax.plot(x, pdf, linewidth=2, color='r')\n\n    return ax, samples", "compilation_passed": true, "time": 0.014429092407226562, "tests_passed": true, "error": null}
{"code": "if n_samples <= 0:\n        raise ValueError(\"n_samples must be greater than 0.\")\n\n    if sigma <= 0:\n        raise ValueError(\"sigma must be greater than 0.\")\n\n    # Set random seed for reproducibility\n    np.random.seed(random_seed)\n\n    # Draw samples from the normal distribution\n    samples = np.random.normal(mu, sigma, n_samples)\n\n    # Plot a histogram of the samples\n    fig, ax = plt.subplots(1, 1)\n    ax.hist(samples, bins=50, density=True, edgecolor='black')\n\n    # Plot the PDF of the normal distribution\n    x = np.linspace(np.min(samples), np.max(samples), 100)\n    ax.plot(x, norm.pdf(x, mu, sigma), color='red', linewidth=2)\n\n    # Set x-axis labels with LaTeX\n    x_labels = [f\"${i}$\" for i in ax.get_xticks()]\n", "compilation_passed": true, "time": 0.015506982803344727, "tests_passed": false, "error": "TypeError"}
{"code": "if n_samples <= 0:\n        raise ValueError(\"n_samples must be greater than zero.\")\n    if sigma <= 0:\n        raise ValueError(\"sigma must be greater than zero.\")\n    if isinstance(random_seed, int):\n        np.random.seed(random_seed)\n    else:\n        raise TypeError(\"random_seed must be an integer.\")\n\n    samples = np.random.normal(mu, sigma, n_samples)\n    _, ax = plt.subplots()\n    ax.hist(samples, bins=50, density=True)\n    x = np.linspace(norm.ppf(0.01, mu, sigma), norm.ppf(0.99, mu, sigma), 100)\n    ax.plot(x, norm.pdf(x, mu, sigma), 'r-', lw=2)\n\n    return ax, samples", "compilation_passed": true, "time": 0.5645239353179932, "tests_passed": true, "error": null}
{"code": "np.random.seed(random_seed)\n\n    # Create a numpy array of random numbers.\n    samples = np.random.normal(loc=mu, scale=sigma, size=n_samples)\n\n    # Plot a histogram of the sample data.\n    _, ax = plt.subplots()\n    ax.hist(samples, bins=10, density=True)\n\n    # Set the title, labels, and limits for the plot.\n    ax.set_title(f\"Histogram of Normal Distribution with {n_samples} samples\")\n    ax.set_xlabel(\"Value\")\n    ax.set_ylabel(\"Probability Density\")\n    ax.set_xlim(-5, 5)\n\n    # Overlay a PDF of the normal distribution with a red line.\n    x = np.linspace(-5, 5, 1000)\n    ax.plot(x, norm.pdf(x, loc=mu, scale=sigma), color=\"red\", linewidth=2)\n\n    # Return the Axes object and the sample data.\n    return ax", "compilation_passed": true, "time": 0.0072209835052490234, "tests_passed": false, "error": "TypeError"}
{"code": "np.random.seed(random_seed)\n\n    # Draw n_samples from the normal distribution\n    samples = np.random.normal(loc=mu, scale=sigma, size=n_samples)\n\n    # Create the figure and axes objects for the histogram and PDF\n    fig, ax = plt.subplots()\n\n    # Plot the histogram for the generated samples\n    ax.hist(samples, bins=30, density=True, edgecolor='black')\n\n    # Normalize the histogram density and plot the PDF over the histogram\n    x_grid = np.linspace(min(samples), max(samples), num=100)\n    ax.plot(x_grid, norm.pdf(x_grid, loc=mu, scale=sigma), color='red', linewidth=2)\n\n    # Set the axis labels and title\n    ax.set_xlabel('Sample Value')\n    ax.set_ylabel('Probability Density')\n    ax.set_title(f'Histogram and PDF of Normal Distribution (n={n_samples}, \u03bc={mu}, \u03c3={sigma})')\n", "compilation_passed": true, "time": 0.011381864547729492, "tests_passed": false, "error": "TypeError"}
{"code": "np.random.seed(random_seed)\n    samples = np.random.normal(mu, sigma, n_samples)\n    fig, ax = plt.subplots(figsize=(10, 6))\n\n    ax.hist(samples, density=True, bins=30, edgecolor='k')\n\n    x = np.linspace(min(samples) - sigma, max(samples) + sigma, 100)\n    ax.plot(x, norm.pdf(x, mu, sigma), color='red', lw=2)\n\n    return ax, samples", "compilation_passed": true, "time": 0.10585188865661621, "tests_passed": true, "error": null}
{"code": "np.random.seed(random_seed)\n\n    samples = np.random.normal(mu, sigma, n_samples)\n    ax = plt.axes()\n    ax.hist(samples, density=True)\n\n    x = np.linspace(-5, 5, 1000)\n    pdf = norm.pdf(x, loc=mu, scale=sigma)\n\n    ax.plot(x, pdf, linewidth=2, color='red')\n\n    ax.set_xlim(-5, 5)\n    return ax, samples", "compilation_passed": true, "time": 0.013120889663696289, "tests_passed": true, "error": null}
{"code": "if n_samples <= 0:\n        raise ValueError(\"n_samples must be greater than 0.\")\n    if sigma <= 0:\n        raise ValueError(\"sigma must be greater than 0.\")\n    np.random.seed(random_seed)\n\n    x = np.linspace(mu - 3*sigma, mu + 3*sigma, 100)\n    samples = np.random.normal(mu, sigma, size=n_samples)\n    ax = plt.subplot()\n    ax.hist(samples, density=True)\n    ax.plot(x, norm.pdf(x, mu, sigma), linewidth=2, color='r')\n    plt.title(\"Gaussian Distribution Histogram and PDF\")\n    plt.xlabel('X')\n    plt.ylabel('PDF')\n    plt.grid(linestyle='--')\n    return ax, samples", "compilation_passed": true, "time": 0.02040410041809082, "tests_passed": true, "error": null}
{"code": "np.random.seed(random_seed)\n    samples = np.random.normal(mu, sigma, size=n_samples)\n\n    ax = plt.gca()\n    ax.hist(samples, bins=30, density=True, edgecolor='black')\n\n    # \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u043c \u043c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0438 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432\u044b\u0431\u043e\u0440\u043a\u0438 \u0434\u043b\u044f \u0433\u0440\u0430\u043d\u0438\u0446 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430\n    min_x, max_x = min(samples), max(samples)\n\n    # \u0412\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u043c \u0448\u043a\u0430\u043b\u0443 \u0434\u043b\u044f \u0433\u0440\u0430\u0444\u0438\u043a\u0430\n    x = np.linspace(min_x - abs(max_x - min_x) * 0.1, max_x + abs(max_x - min_x) * 0.1, num=1000)\n    ax.plot(x, norm.pdf(x, mu, sigma), linewidth=2, color='red')\n\n    ax.set_title(r\"Histogram of samples with a probability density function\")\n    ax.set_xlabel('X')\n    ax.", "compilation_passed": false, "time": 0.00028514862060546875, "tests_passed": false, "error": "SyntaxError"}
{"code": "if n_samples <= 0:\n        raise ValueError(\"n_samples must be greater than 0\")\n    if sigma <= 0:\n        raise ValueError(\"sigma must be greater than 0\")\n    np.random.seed(random_seed)\n    samples = np.random.normal(mu, sigma, n_samples)\n    fig, ax = plt.subplots()\n\n    ax.hist(samples, density=True, bins=40)\n    x = np.linspace(-7, 7, 100)\n    ax.plot(x, norm.pdf(x, mu, sigma), 'r', linewidth=2)\n    ax.set_xlabel(\"Value\")\n    ax.set_ylabel(\"Density\")\n    ax.grid(True)\n    return ax, samples", "compilation_passed": true, "time": 0.04388713836669922, "tests_passed": true, "error": null}
{"code": "np.random.seed(random_seed)\n    samples = np.random.normal(mu, sigma, n_samples)\n    ax = plt.axes()\n    ax.hist(samples, bins=50, density=True)\n    x = np.linspace(samples.min() - 0.5*sigma, samples.max() + 0.5*sigma, 1000)\n    ax.plot(x, norm.pdf(x, mu, sigma), color='red', lw=2)\n    return ax, samples", "compilation_passed": true, "time": 0.061480045318603516, "tests_passed": true, "error": null}
