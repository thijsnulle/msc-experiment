{"code": "# Define the course names and their number of credits\n    courses = {'Physics': 4, 'Chemistry': 2, 'Biology': 3, 'Math': 5, 'English': 2}\n\n    # Generate grades and credits for each student\n    grades_per_student = []\n    for _ in range(num_students):\n        student_grades = [np.random.choice([100, 85, 75, 60, 35], p=[0.05, 0.25, 0.4, 0.2, 0.1]) for _ in range(5)]\n        student_credits = list(courses.values())\n        grades_per_student.append(student_grades)\n\n    # Calculate the total number of credits\n    total_credits = sum(courses.values())\n\n    # Create a DataFrame using the generated data\n    df = pd.DataFrame(grades_per_student, columns=list(courses.keys()))\n\n    # Calculate the course-wise average grade and passing grade", "compilation_passed": true, "time": 0.0012860298156738281, "tests_passed": false, "error": "TypeError"}
{"code": "course_names = [\"Course A\", \"Course B\", \"Course C\"]\n    num_courses = len(course_names)\n    grades = np.random.randint(50, 101, size=(num_students, num_courses))\n\n    # Create a Pandas DataFrame using the grades data\n    df = pd.DataFrame(grades, columns=course_names)\n\n    # Calculate the average grade in each course\n    avg_grades = df.mean()\n\n    # Calculate the number of students with a passing grade (>= 60)\n    passing_grades_counts = df.apply(lambda x: np.count_nonzero(x >= 60), axis=0)\n\n    # Create a bar plot for the average grades and passing grade counts\n    fig, ax = plt.subplots()\n    bar_width = 0.35\n    bar_positions = np.arange(num_courses)\n\n    # Plot the average grades\n    ax.bar(bar_positions, avg_grades.values, bar_width,", "compilation_passed": false, "time": 0.0002200603485107422, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Define the list of courses and their credit values\n    courses = [\"course_1\", \"course_2\", \"course_3\", \"course_4\", \"course_5\"]\n    credits = [2.0, 3.0, 4.0, 2.0, 3.0]\n\n    # Define the list of subjects and their credit values\n    subjects = [\"subject_1\", \"subject_2\", \"subject_3\", \"subject_4\", \"subject_5\"]\n    subjects_credits = [1.0, 1.0, 1.0, 1.0, 1.0]\n\n    # Randomly select half of the students\n    students = sample(range(num_students), int(num_students / 2))\n\n    # Create an empty DataFrame with the students as the index and the subjects as the columns\n    df = pd.DataFrame(index=students, columns=subjects)\n\n    # Generate random grades for each student and subject\n    for student in students:\n        for subject", "compilation_passed": false, "time": 0.00016570091247558594, "tests_passed": false, "error": "SyntaxError"}
{"code": "course_names = [\"Chemistry\", \"Algebra\", \"Biology\", \"English\"]\n    df = pd.DataFrame(columns=course_names)\n\n    # Generate random grades for the specified number of students\n    for i in range(num_students):\n        grades = np.random.randint(0, 101, size=4)\n        df.loc[i] = grades\n\n    # Calculate the average grade in each course\n    average_grades = df.mean().round(1)\n\n    # Count the number of students with passing grades in each course\n    passing_grade_counts = (df >= 60).sum()\n\n    # Plot the data\n    fig, ax = plt.subplots()\n    ax.bar(course_names, average_grades, label=\"Average Grade\")\n    ax.bar(course_names, passing_grade_counts, bottom=average_grades, label=\"Passing Grade Count\")\n    ax.set_title(\"Course-wise Average and Passing Grade Counts\")\n    ax.set", "compilation_passed": true, "time": 0.009252786636352539, "tests_passed": false, "error": "TypeError"}
{"code": "# Generate random data for each course and student\n    num_courses = 5\n    grades = np.random.randint(0, 101, size=(num_students, num_courses))\n\n    # Select 20% of the students to form a sample\n    sample_students = sample(range(num_students), int(0.2 * num_students))\n\n    # Create a Pandas DataFrame with student IDs as indices and course grades as columns\n    df = pd.DataFrame(grades[sample_students], index=sample_students + 1, columns=[f\"Course {i+1}\" for i in range(num_courses)])\n\n    # Calculate the average grade in each course\n    avg_grades = df.mean()\n\n    # Calculate the number of students with a passing grade (>= 60) in each course\n    passing_counts = (df >= 60).sum()\n\n    # Create a bar plot for average grades and passing counts\n    ax = passing_counts.plot.bar(rot=0)\n    avg_", "compilation_passed": true, "time": 0.0008347034454345703, "tests_passed": false, "error": "TypeError"}
{"code": "courses = ['Course 1', 'Course 2', 'Course 3']\n    course_grades = []\n\n    for course in courses:\n        course_grades.append(np.random.randint(50, 101, size=num_students))\n\n    df = pd.DataFrame({\n        'Course': [grade for course in course_grades for grade in course],\n        'Student': [student for student in range(1, num_students+1) for _ in range(len(courses))]\n    })\n    df = df.pivot_table(columns='Student', index='Course', values='Course', aggfunc='first')\n    df['Average'] = df.mean(axis=1)\n    df['Passing'] = (df >= 60).sum(axis=1)\n\n    fig, ax = plt.subplots()\n    df.plot.bar(y=['Average', 'Passing'], rot=0, ax=ax)\n    ax.set_title('Course-wise Average and Passing Grade Count", "compilation_passed": false, "time": 0.00011587142944335938, "tests_passed": false, "error": "SyntaxError"}
{"code": "course_names = [\"C++\", \"Java\", \"Python\", \"Data Structures\", \"Software Engineering\"]\n\n    grades = np.random.randint(30, 101, size=(num_students, len(course_names)))\n    student_names = [f\"Student{i}\" for i in range(1, num_students+1)]\n\n    df = pd.DataFrame(grades, index=student_names, columns=course_names)\n\n    df_course_averages = df.mean()\n    df_passing_grade_counts = df.ge(60).sum()\n\n    data = {\n        \"Course\": df_course_averages.index,\n        \"Average\": df_course_averages.values,\n        \"Passing Grade Count\": df_passing_grade_counts.values\n    }\n\n    df_stats = pd.DataFrame(data)\n\n    fig, ax = plt.subplots()\n    ax.bar(df_stats[\"Course\"], df_stats[\"Average\"], label=\"", "compilation_passed": false, "time": 9.822845458984375e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Define the list of courses\n    courses = ['Math', 'Science', 'History', 'English', 'Physics']\n\n    # Generate random grades for each course and student\n    grades = pd.DataFrame({course: np.random.randint(1, 101, num_students) for course in courses})\n\n    # Calculate the average grade for each course\n    average_grades = grades.mean()\n\n    # Count the number of students with a passing grade (>= 60) in each course\n    passing_grade_counts = grades.apply(lambda course: (course >= 60).sum(), axis=0)\n\n    # Create a bar plot to visualize the average grades and passing grade counts\n    plt.figure(figsize=(10, 6))\n    bar_width = 0.35\n    ind = np.arange(len(courses))\n\n    # Create the first bar plot for the average grades\n    plt.bar(ind, average_grades, bar_width, label='Average Grade', color='#87ceeb')\n\n", "compilation_passed": true, "time": 0.005461931228637695, "tests_passed": false, "error": "TypeError"}
{"code": "# Define the names of the courses\n    course_names = ['Math', 'Science', 'History', 'English', 'Geography', 'Music', 'Art', 'Biology', 'Chemistry', 'Physics']\n\n    # Generate grades for the students in each course\n    grades = np.random.randint(0, 101, size=(num_students, len(course_names)))\n\n    # Generate a DataFrame with student names as indices and grades as values\n    df = pd.DataFrame(grades, index=range(1, num_students + 1), columns=course_names)\n\n    # Calculate the average grade in each course\n    course_averages = df.mean()\n\n    # Calculate the number of students with a passing grade (>= 60) in each course\n    passing_grades = (df >= 60).sum()\n\n    # Visualize the course-wise averages and passing grade counts using a bar plot\n    fig, ax = plt.subplots()\n    bar_width = 0.35\n    bar", "compilation_passed": true, "time": 0.004103183746337891, "tests_passed": false, "error": "NameError"}
{"code": "# Define the number of courses, minimum and maximum grades, and the list of students\n    num_courses = 3\n    min_grade = 1\n    max_grade = 100\n    students = ['Amy', 'Bob', 'Charlie', 'Dylan', 'Elizabeth', 'Freddy', 'Gloria', 'Harry', 'Iris', 'Jessica', 'Kate', 'Luke', 'Margaret', 'Nancy', 'Olivia', 'Pierre', 'Quentin', 'Rita', 'Steve', 'Tom', 'Ursula', 'Victor', 'Wendy', 'Xavier', 'Yvonne', 'Zachary']\n    course_names = ['Math', 'Physics', 'Chemistry', 'Biology', 'Geography', 'History', 'English', 'French', 'German', 'Music']\n\n    # Sample the list of students and randomly assign grades to each course\n    students = sample(students", "compilation_passed": false, "time": 0.000186920166015625, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Define the courses\n    courses = ['English', 'Maths', 'Science', 'History', 'Geography', 'Art', 'Music', 'Physical Education', 'Health Education', 'Computer Science']\n    # Generate a random sample of student names\n    names = sample([f'Student {i}' for i in range(1, 100)], num_students)\n    # Generate grades for each course and each student\n    grades = [[np.random.randint(50, 101) for course in courses] for student in names]\n    # Create a DataFrame with student names as indices and courses as columns\n    df = pd.DataFrame(grades, index=names, columns=courses)\n    # Calculate the average grade in each course\n    average_grades = df.mean()\n    # Calculate the number of students with a passing grade (>= 60) in each course\n    passing_grades = (df >= 60).sum()\n    # Create a bar plot\n    fig, ax = plt.subplots()\n    x = np", "compilation_passed": true, "time": 0.004953145980834961, "tests_passed": false, "error": "TypeError"}
{"code": "courses = [\"History\", \"Math\", \"English\", \"Geography\", \"Science\"]\n    grades = np.random.randint(low=0, high=100, size=(num_students, 5))\n    df = pd.DataFrame(grades, columns=courses)\n    df['Average'] = df.mean(axis=1)\n    df['Passing Grade'] = df.apply(lambda row: sum(grade >= 60 for grade in row), axis=1)\n    df.columns = ['Student ' + str(i+1) if i < num_students else 'Average' if i == num_students else 'Passing Grade' for i in range(num_students + 2)]\n    df.index = ['']\n    df = df.T\n\n    # Calculate average grade in each course\n    course_averages = df.loc['Average', 0:num_students].to_numpy()\n\n    # Calculate number of students with a passing grade in each course\n    course_passing_grade_counts = df.loc", "compilation_passed": true, "time": 0.0016131401062011719, "tests_passed": false, "error": "ValueError"}
{"code": "# Define the names of the courses\n    courses = [\"Physics\", \"Chemistry\", \"Biology\", \"Mathematics\"]\n\n    # Define the grades of the students in each course\n    grades = np.random.randint(0, 101, size=(num_students, len(courses)))\n\n    # Select a random sample of students\n    sample_students = np.random.choice(range(num_students), size=num_students//2, replace=False)\n\n    # Create a DataFrame to store the grades\n    df = pd.DataFrame(grades[sample_students], columns=courses)\n\n    # Calculate the average grade in each course\n    avg_grades = df.mean()\n\n    # Calculate the number of students with a passing grade (>= 60) in each course\n    num_passing = df.apply(lambda x: (x >= 60).sum(), axis=0)\n\n    # Create a bar plot with course names on the x-axis and the average grades and number of passing students on", "compilation_passed": true, "time": 0.0011661052703857422, "tests_passed": false, "error": "TypeError"}
{"code": "# Define the names of the courses\n    courses = [\"Chemistry\", \"Math\", \"Computer Science\", \"English\"]\n\n    # Define the range of grades for each course\n    grade_ranges = [(50, 100), (60, 99), (40, 100), (55, 99)]\n\n    # Generate a random sample of student names\n    student_names = sample(\n        [\"Alice\", \"Bob\", \"Charlie\", \"David\", \"Eve\", \"Frank\", \"Grace\", \"Henry\"],\n        num_students,\n    )\n\n    # Generate grades for each course and each student\n    grades = []\n    for course, grade_range in zip(courses, grade_ranges):\n        lower_bound, upper_bound = grade_range\n        course_grades = [randint(lower_bound, upper_bound) for _ in range(num_students)]\n        grades.append(course_grades)\n\n    # Create the", "compilation_passed": true, "time": 0.00081634521484375, "tests_passed": false, "error": "ValueError"}
{"code": "# Define the courses\n    courses = ['Math', 'English', 'Science', 'History', 'Art']\n\n    # Create a dictionary to store the grades for each course\n    grade_dict = {'Names': []}\n    for course in courses:\n        grade_dict[course] = []\n\n    # Generate random grades for each student\n    for i in range(num_students):\n        name = f'Student {i+1}'\n        grade_dict['Names'].append(name)\n        for course in courses:\n            grade_dict[course].append(np.random.randint(50, 101))\n\n    # Convert the grade dictionary to a DataFrame\n    df = pd.DataFrame(grade_dict)\n\n    # Calculate the average grade in each course\n    averages = df[courses].mean()\n\n    # Calculate the number of students with a passing grade (>= 60)\n    passing_counts = (df[courses] >= 60).sum()\n\n    # Visualize the average grades and passing counts using a bar plot\n    ", "compilation_passed": true, "time": 0.0013887882232666016, "tests_passed": false, "error": "TypeError"}
{"code": "# Generate random student grades\n    grades = np.random.randint(40, 100, size=(num_students, 3))\n\n    # Create a DataFrame with student names as the index and grades as the columns\n    df = pd.DataFrame(grades, index=[f'Student {i+1}' for i in range(num_students)], columns=['Course 1', 'Course 2', 'Course 3'])\n\n    # Calculate the average grade in each course\n    course_averages = df.mean(axis=0)\n\n    # Calculate the number of students with a passing grade (>= 60) in each course\n    passing_counts = (df >= 60).sum(axis=0)\n\n    # Combine the averages and passing counts in a new DataFrame for plotting\n    plot_data = pd.DataFrame({'Average Grade': course_averages, 'Passing Count': passing_counts})\n\n    # Plot the data using a bar plot\n    ax = plot_data.plot.bar(rot=0, title='Course-wise Average and Passing Grade Count", "compilation_passed": false, "time": 9.083747863769531e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Define the courses and their maximum scores\n    courses = {\n        'Mathematics': 100,\n        'Physics': 100,\n        'Chemistry': 100,\n        'Biology': 70,\n        'English': 70,\n        'History': 70\n    }\n\n    # Generate the grades for each student in each course\n    grades = np.random.randint(0, max_score + 1, size=(num_students, len(courses)))\n\n    # Create a DataFrame using the grades\n    df = pd.DataFrame(grades, columns=courses.keys())\n\n    # Calculate the average grade and number of students with passing grades\n    df['Average'] = df.mean(axis=1)\n    df['Passing'] = (df >= 60).sum(axis=1)\n\n    # Calculate the average grade in each course\n    avg_grades = df.iloc[:, :-2].mean() / max_score * 100\n\n    # Count the number of students with a", "compilation_passed": true, "time": 0.000759124755859375, "tests_passed": false, "error": "NameError"}
{"code": "courses = ['English', 'Mathematics', 'Science', 'History', 'Geography']\n    grades = [list(np.random.randint(0, 101, num_students)) for _ in range(len(courses))]\n    df = pd.DataFrame(grades, index=courses, columns=[f\"Student {i+1}\" for i in range(num_students)]).T\n\n    # Calculate the average grade for each course\n    average_grades = df.mean()\n    num_passing_students = (df >= 60).sum(axis=0)\n\n    # Create the bar plot with course names and their corresponding average grade and passing student count\n    fig, ax = plt.subplots(figsize=(10, 6))\n    bar_width = 0.35\n    bar1 = ax.bar(courses, average_grades, bar_width, label='Average Grade')\n    bar2 = ax.bar(courses, num_passing_students, bar_width, bottom=average_grades,", "compilation_passed": false, "time": 0.000247955322265625, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Define the number of courses\n    num_courses = 5\n\n    # Generate random grades for each course and student\n    grades = np.random.randint(0, 101, size=(num_students, num_courses))\n\n    # Generate random course names\n    course_names = [chr(i) for i in range(65, 65 + num_courses)]\n\n    # Generate random student names\n    student_names = [str(i) for i in range(1, num_students + 1)]\n\n    # Create the DataFrame\n    df = pd.DataFrame(grades, index=student_names, columns=course_names)\n\n    # Calculate the average grade in each course\n    course_averages = df.mean()\n\n    # Calculate the number of students with a passing grade (>= 60)\n    passing_grade_counts = (df >= 60).sum()\n\n    # Create a bar plot for average grade and passing grade count for each course\n    ax = course_averages.plot(kind='bar', color='blue", "compilation_passed": false, "time": 9.799003601074219e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Generate random grades for a randomly selected group of students in multiple courses\n    grades = pd.DataFrame({\n        'Student ID': np.arange(1, num_students+1),\n        'Course 1': np.random.randint(1, 101, size=num_students),\n        'Course 2': np.random.randint(1, 101, size=num_students),\n        'Course 3': np.random.randint(1, 101, size=num_students),\n        'Course 4': np.random.randint(1, 101, size=num_students),\n        'Course 5': np.random.randint(1, 101, size=num_students)\n    })\n\n    # Calculate the average grade in each course and the number of students with a passing grade (>= 60)\n    grades['Average'] = grades.iloc[:, 1:6].mean(axis=1)\n    grades['Passing'] = (grades.", "compilation_passed": false, "time": 0.00018715858459472656, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Initialize an empty dictionary for the sample data\n    sample_data = {}\n\n    # List of possible course names\n    courses = [\"Algebra\", \"Calculus\", \"Statistics\", \"Physics\", \"Biology\", \"Chemistry\"]\n\n    # Generate random grades for each student and course\n    for student in range(num_students):\n        sample_data[f\"Student{student}\"] = {}\n        for course in courses:\n            sample_data[f\"Student{student}\"][course] = np.random.randint(40, 101)\n\n    # Convert the sample data into a Pandas DataFrame\n    df = pd.DataFrame(sample_data)\n\n    # Calculate the mean grade for each course\n    mean_grades = df.mean()\n\n    # Calculate the number of students with a passing grade (>= 60) in each course\n    pass_counts = (df >= 60).sum(axis=0)\n\n    # Combine the mean grades and pass counts into a new DataFrame with one index\n    stats_df = pd.concat", "compilation_passed": true, "time": 0.0011649131774902344, "tests_passed": false, "error": "TypeError"}
{"code": "df = pd.DataFrame(np.random.randint(55, 100, size=(num_students, 5)), columns=np.random.choice(['Math', 'History', 'Literature', 'Music', 'Art'], 5))\n\n    # Calculate average grade in each course\n    avgs = df.mean()\n\n    # Count students with passing grades in each course\n    counts = (df >= 60).sum()\n\n    # Concatenate averages and counts in a single DataFrame\n    df_all = pd.concat([avgs, counts], axis=1, keys=['Average', 'Passing Grade Count'])\n\n    # Create a bar plot for averages and passing grade counts\n    ax = df_all.plot(kind='bar')\n\n    # Set plot title\n    ax.set_title('Course-wise Average and Passing Grade Counts')\n\n    # Return the generated DataFrame and the Axes object\n    return df_all, ax", "compilation_passed": true, "time": 0.01789093017578125, "tests_passed": false, "error": "AttributeError"}
{"code": "# Define the names of the courses\n    courses = [\"History\", \"Math\", \"English\", \"Physics\", \"Biology\", \"Chemistry\"]\n\n    # Select a random group of students\n    sample_students = sample(range(1, num_students+1), num_students//2)\n\n    # Generate random grades for each course for each student in the sample\n    grades = pd.DataFrame({\n        \"Student ID\": sample_students,\n        \"History\": np.random.randint(1, 101, num_students),\n        \"Math\": np.random.randint(1, 101, num_students),\n        \"English\": np.random.randint(1, 101, num_students),\n        \"Physics\": np.random.randint(1, 101, num_students),\n        \"Biology\": np.random.randint(1, 101, num_students),\n        \"Chemistry\": np.random.randint(", "compilation_passed": false, "time": 0.0002181529998779297, "tests_passed": false, "error": "SyntaxError"}
{"code": "course_names = [\"Course-1\", \"Course-2\", \"Course-3\", \"Course-4\", \"Course-5\"]\n    courses = sample(course_names, 5)  # Randomly select 5 courses\n    students = np.arange(num_students)\n    grades = np.random.randint(0, 101, (num_students, len(courses)))  # Random grades for each student and course\n\n    df = pd.DataFrame(grades, columns=courses, index=students)\n    averages = df.mean()\n    passing_counts = df.apply(lambda x: (x >= 60).sum(), axis=0)\n\n    # Create a bar plot\n    plt.figure()\n    ax = plt.subplot(111)\n    bar_width = 0.35\n    x_positions = np.arange(len(courses))\n    ax.bar(x_positions, averages, bar_width, label='Average')\n    ax.bar(x_positions + bar", "compilation_passed": false, "time": 0.00023508071899414062, "tests_passed": false, "error": "SyntaxError"}
{"code": "courses = [\"Course A\", \"Course B\", \"Course C\"]\n    sample_students = list(range(1, num_students + 1))  # create a list of student IDs\n    sample_grades = {course: [np.random.randint(1, 101) for _ in range(num_students)] for course in courses}\n    # create a dictionary of grades for each course, where the keys are the course names and the values are lists of grades for all students\n    sample_grades_df = pd.DataFrame(sample_grades, index=sample_students)\n    # create a Pandas DataFrame with the grades of all students in each course, with student IDs as index\n\n    # Calculate the course-wise average grade\n    course_averages = sample_grades_df.mean()\n    # Calculate the number of passing grades in each course\n    passing_grades_count = (sample_grades_df >= 60).sum()\n\n    # Create a bar plot of the course-wise average grade and passing grade count\n    ax = course_aver", "compilation_passed": true, "time": 0.0011777877807617188, "tests_passed": false, "error": "NameError"}
{"code": "# Define course names, weights, and minimum passing grades\n    course_names = ['Math', 'Physics', 'Biology', 'Chemistry', 'History']\n    course_weights = [0.3, 0.2, 0.15, 0.25, 0.1]\n    min_passing_grade = 60\n\n    # Initialize an empty dictionary to store grades\n    grades = {}\n\n    # Generate random grades for each course and student\n    for course_name in course_names:\n        grades[course_name] = []\n        for student in range(num_students):\n            grade = np.random.randint(35, 101)\n            grades[course_name].append(grade)\n\n    # Calculate the average grade in each course\n    average_grades = [np.mean(grades[course]) for course in course_names]\n\n    # Calculate the number of students with passing grades in each course\n    passing_grades_count = []\n    for course in course_names:\n        passing_", "compilation_passed": true, "time": 0.0008237361907958984, "tests_passed": false, "error": "NameError"}
{"code": "# Initialize empty lists to store student grades and average grades\n    student_grades = []\n    avg_grades = []\n\n    # Define the number of courses\n    num_courses = 5\n\n    # Generate random grades for each student and course\n    for student_idx in range(num_students):\n        grades = np.random.randint(0, 101, size=num_courses)\n        student_grades.append(grades)\n\n    # Calculate the average grade for each course\n    for course_idx in range(num_courses):\n        course_grades = [student_grades[student_idx][course_idx] for student_idx in range(num_students)]\n        avg_grades.append(np.mean(course_grades))\n\n    # Convert student grades to a DataFrame\n    df = pd.DataFrame(student_grades, columns=[f\"Course {idx + 1}\" for idx in range(num_courses)])\n\n    # Calculate the number of passing grades in each course\n    passing_grade_counts = df[df", "compilation_passed": false, "time": 0.0002009868621826172, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Initialize a list of course names.\n    courses = [\"Python\", \"C++\", \"Java\", \"Algorithms\", \"Computer Networks\"]\n\n    # Initialize an empty DataFrame with the specified course names as column headers.\n    df = pd.DataFrame(columns=courses)\n\n    # Create a list of student IDs.\n    student_ids = range(1, num_students + 1)\n\n    # Create a random sample of students to be included in the DataFrame.\n    selected_students = sample(student_ids, num_students)\n\n    # Generate random grades for each course and student and add them to the DataFrame.\n    for course in courses:\n        grades = [np.random.randint(1, 101) for _ in range(num_students)]\n        df[course] = grades\n\n    # Calculate the average grade for each course.\n    avg_grades = df.mean(numeric_only=True)\n\n    # Calculate the number of students with a passing grade (>= 60) for each course.\n    passing_", "compilation_passed": true, "time": 0.001961946487426758, "tests_passed": false, "error": "NameError"}
{"code": "# Define the courses and their grades\n    courses = [\"English\", \"Maths\", \"Science\", \"History\", \"Geography\", \"Art\", \"Music\", \"Sports\", \"Computers\", \"Biology\"]\n    grades = np.random.randint(40, 101, size=(num_students, len(courses)))\n\n    # Select a random group of students and compute their average grades in each course\n    selected_students = sample(range(num_students), 10)\n    selected_grades = grades[selected_students]\n    selected_grades_mean = np.mean(selected_grades, axis=0)\n    pass_counts = np.sum(selected_grades >= 60, axis=0)\n\n    # Create a Pandas DataFrame with the grades and compute the average grades\n    df = pd.DataFrame(selected_grades, columns=courses)\n    df[\"Average Grade\"] = selected_grades_mean\n    df[\"Passing Grade Count\"] = pass_counts\n\n", "compilation_passed": true, "time": 0.00092315673828125, "tests_passed": false, "error": "TypeError"}
{"code": "students = sample(range(100000), num_students)\n\n    grades = np.random.randint(50, 101, (len(students), 15))\n\n    course_grades = pd.DataFrame(grades, index=students)\n    course_grades.columns = [f\"Course {i}\" for i in range(1, 16)]\n\n    course_means = course_grades.mean().round(1)\n    passing_counts = (course_grades >= 60).sum()\n\n    bar_data = pd.concat([course_means, passing_counts], axis=1, keys=[\"Average\", \"Passing Count\"])\n\n    ax = bar_data.plot.bar()\n    ax.set_title(\"Course-wise Average and Passing Grade Counts\")\n    ax.set_xlabel(\"Courses\")\n\n    return course_grades, ax", "compilation_passed": true, "time": 0.01751708984375, "tests_passed": false, "error": "AttributeError"}
