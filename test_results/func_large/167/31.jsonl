{"code": "data = pd.DataFrame({name: [randint(*integer_range) for _ in range(num_types)]\n                         for name in [f\"type_{i}\" for i in range(num_types)]})\n\n    data.plot.barh(stacked=True, edgecolor=\"white\")\n    return plt.gcf(), plt.gca()", "compilation_passed": true, "time": 0.06505990028381348, "tests_passed": true, "error": null}
{"code": "if integer_range[0] >= integer_range[1]:\n        raise ValueError(\"The left bound must be less than the right bound.\")\n    if integer_range[0] < 0:\n        raise ValueError(\"The left bound must be greater than or equal to zero.\")\n    if num_types < 1:\n        raise ValueError(\"The number of types must be greater than or equal to 1.\")\n\n    data = {str(i): [randint(integer_range[0], integer_range[1]) for j in range(num_types)] for i in range(num_types)}\n    df = pd.DataFrame(data)\n    total = df.sum().values\n    fig, ax = plt.subplots(figsize=(10, 6))\n    df.plot(kind='barh', stacked=True, ax=ax)\n    ax.set_xlabel('Number of Types')\n    ax.set_ylabel('Categories')\n    ax.set_title('Random Integers by Category and Type')\n    ax.legend(loc='center left',", "compilation_passed": false, "time": 0.0002880096435546875, "tests_passed": false, "error": "SyntaxError"}
{"code": "categories = list('ABCDEFGH')[:num_types]\n    data = pd.DataFrame({\n        'value': [randint(*integer_range) for _ in categories],\n    }, index=pd.Index(categories, name='category'))\n    fig, ax = plt.subplots(1, 1)\n    ax.barh(data.index, data.value, color='orange')\n    ax.set_title('Horizontal Stacked Bar Chart')\n    return (fig, ax)", "compilation_passed": true, "time": 0.0054280757904052734, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame({\"integer\": [randint(*integer_range) for _ in range(num_types)]}, index=[i for i in range(1, num_types + 1)])\n    df.index.name = \"categories\"\n    df.plot.barh(stacked=True, edgecolor=\"black\")\n    fig, ax = plt.gcf(), plt.gca()\n    return fig, ax", "compilation_passed": true, "time": 0.008280038833618164, "tests_passed": true, "error": null}
{"code": "num_data_points = randint(500, 5000)\n    data = {\n        \"category\": [randint(1, num_types) for _ in range(num_data_points)],\n        \"values\": [randint(*integer_range) for _ in range(num_data_points)],\n    }\n    df = pd.DataFrame(data)\n    df = df.groupby(\"category\").sum()\n    df[\"values\"] = df[\"values\"] / max(df[\"values\"]) * 100\n    fig, ax = plt.subplots()\n    df[\"values\"].plot(kind=\"barh\", ax=ax, stacked=True)\n    fig.suptitle(\"Horizontal stacked bar chart\")\n    plt.xlabel(\"Value\")\n    plt.ylabel(\"Category\")\n    return fig, ax", "compilation_passed": true, "time": 0.011632204055786133, "tests_passed": true, "error": null}
{"code": "# Generate random integer data\n    data = pd.DataFrame(columns=[f\"type{i}\" for i in range(num_types)],\n                        index=[f\"category{i}\" for i in range(randint(*integer_range))])\n    for col in data.columns:\n        data[col] = [randint(*integer_range) for _ in range(len(data))]\n\n    # Generate the plot and return Figure and Axes objects\n    fig, ax = plt.subplots()\n    data.plot.barh(ax=ax, stacked=True)\n    ax.set_title(\"Visualize Random Data as a Horizontal Stacked Bar Chart\")\n\n    return fig, ax", "compilation_passed": true, "time": 0.018183231353759766, "tests_passed": true, "error": null}
{"code": "# Generate random integer data for each category\n    df = pd.DataFrame({i: [randint(*integer_range) for _ in range(10)] for i in range(num_types)})\n    # Convert to a horizontal stacked bar plot\n    ax = df.plot(stacked=True, kind='barh')\n    # Display plot\n    return plt.gcf(), ax", "compilation_passed": true, "time": 0.018529891967773438, "tests_passed": true, "error": null}
{"code": "data = {category: [randint(*integer_range) for _ in range(num_types)] for category in range(num_types)}\n    df = pd.DataFrame(data)\n    df = df.transpose()\n    ax = df.plot(\n        kind=\"barh\", stacked=True, legend=False, color=list(sns.hls_palette(num_types, l=0.45, s=0.75)),\n        alpha=0.85, figsize=(14, 8),\n    )\n\n    return plt.gcf(), ax", "compilation_passed": true, "time": 0.0009582042694091797, "tests_passed": false, "error": "NameError"}
{"code": "# Generate random integers for each category and store them in a list of lists\n    data = [\n        [randint(*integer_range) for _ in range(num_types)] for _ in range(num_types)\n    ]\n\n    # Create a DataFrame containing the data and labels\n    df = pd.DataFrame(data, columns=list(range(1, num_types + 1)), dtype=\"int64\")\n\n    # Create a figure and axis object to hold the stacked bar chart\n    fig, ax = plt.subplots()\n\n    # Plot the data as a horizontal stacked bar chart\n    ax.barh(df.index, df.iloc[:, 0], label=df.columns[0])\n    for i, (category, values) in enumerate(df.iloc[:, 1:].iteritems()):\n        ax.barh(\n            df.index,\n            values,\n            left=df.iloc[:, : i + 1].sum(axis=1),\n            label=category,\n        )\n\n    # Label the plot\n    ax.set", "compilation_passed": true, "time": 0.0053331851959228516, "tests_passed": false, "error": "AttributeError"}
{"code": "data = {}\n    for i in range(1, num_types + 1):\n        data[\"type_\" + str(i)] = [randint(integer_range[0], integer_range[1]) for _ in range(10)]\n    df = pd.DataFrame.from_dict(data)\n    ax = df.plot.barh(stacked=True)\n    fig = plt.gcf()\n    return fig, ax", "compilation_passed": true, "time": 0.018735170364379883, "tests_passed": true, "error": null}
{"code": "d = {str(i):[randint(*integer_range) for _ in range(num_types)] for i in range(num_types)}\n    df = pd.DataFrame.from_dict(d, orient=\"index\", columns=[f\"group{i}\" for i in range(num_types)])\n\n    df.plot(kind=\"barh\",\n            stacked=True,\n            figsize=(20, num_types / 2),\n            colormap=\"Set1\",\n            legend=False)\n    return plt.gcf(), plt.gca()", "compilation_passed": true, "time": 0.05919694900512695, "tests_passed": true, "error": null}
{"code": "# Create a list of strings, each with a random capital letter\n    categories = [chr(randint(65, 90)) for i in range(num_types)]\n\n    # Generate a DataFrame containing a number of random integers for each of the categories.\n    df = pd.DataFrame([randint(integer_range[0], integer_range[1])\n                      for i in range(num_types)], columns=categories).T\n    # Create a stacked bar chart for the data\n    ax = df.plot.barh(stacked=True, width=1, fontsize=15, linewidth=0.1)\n    # Hide the spines and ticks\n    ax.spines['top'].set_visible(False)\n    ax.spines['right'].set_visible(False)\n    ax.spines['bottom'].set_visible(False)\n    ax.spines['left'].set_visible(False)\n    ax.set_yticks([])\n    ax.set_xticks([])\n    # Rotate the ticklabels\n    ax.tick_params(axis='", "compilation_passed": false, "time": 0.00013685226440429688, "tests_passed": false, "error": "SyntaxError"}
{"code": "categories = [f\"Category {i + 1}\" for i in range(num_types)]\n    values = [randint(integer_range[0], integer_range[1]) for _ in range(num_types)]\n    data = pd.DataFrame({\"category\": categories, \"value\": values})\n\n    fig, ax = plt.subplots(figsize=(10, 5))\n\n    for i, row in data.iterrows():\n        ax.barh(row[\"category\"], row[\"value\"], left=sum(data.iloc[:i + 1, 1]) - row[\"value\"], color=plt.cm.tab20c(i))\n\n    ax.set_title(\"Horizontal Stacked Bar Chart\")\n    ax.set_xlabel(\"Value\")\n    ax.set_ylabel(\"Category\")\n\n    return fig, ax", "compilation_passed": true, "time": 0.006993293762207031, "tests_passed": true, "error": null}
{"code": "random_integers = pd.DataFrame(\n        {\"values\": [randint(integer_range[0], integer_range[1]) for _ in range(num_types)]}\n    )\n    fig, ax = plt.subplots()\n    random_integers.plot.barh(ax=ax, stacked=True, color=list(plt.tabulate(['green', 'red'])))\n    plt.show()\n    return fig, ax", "compilation_passed": true, "time": 0.004019021987915039, "tests_passed": false, "error": "AttributeError"}
{"code": "# Generate a DataFrame of random integers\n    df = pd.DataFrame({\n        'value': [randint(*integer_range) for _ in range(num_types)],\n        'category': ['category_%d' % i for i in range(num_types)]\n    })\n\n    # Create horizontal stacked bar chart\n    ax = df.plot.barh(x='category', stacked=True, color=['blue' for _ in range(num_types)])\n\n    return plt.gcf(), ax", "compilation_passed": true, "time": 0.00857090950012207, "tests_passed": true, "error": null}
{"code": "types = [f'Type {i+1}' for i in range(num_types)]\n    values = [[randint(integer_range[0], integer_range[1]) for _ in range(num_types)] for _ in range(num_types)]\n\n    df = pd.DataFrame(values, types, types)\n\n    fig, ax = plt.subplots()\n    df.plot.barh(stacked=True, ax=ax)\n\n    plt.show()\n\n    return (fig, ax)", "compilation_passed": true, "time": 0.06531715393066406, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame({\n        f\"Type {i}\": [randint(*integer_range) for _ in range(num_types)]\n        for i in range(num_types)\n    })\n\n    df.plot(\n        kind=\"barh\",\n        stacked=True,\n        colormap=\"tab20\",\n        ax=plt.axes(xlim=(0, integer_range[1])),\n        subplots=True\n    )\n\n    fig, axes = plt.subplots()\n\n    return fig, axes", "compilation_passed": true, "time": 0.4809458255767822, "tests_passed": true, "error": null}
{"code": "# Generate the data\n    data = pd.DataFrame({'category': randint(*integer_range) for category in range(num_types)})\n\n    # Plot the data\n    fig, ax = plt.subplots()\n    ax = data.plot.barh(ax=ax, stacked=True, color=f'C{randint(0, num_types)}')\n\n    return fig, ax", "compilation_passed": true, "time": 0.0011529922485351562, "tests_passed": false, "error": "ValueError"}
{"code": "categories = [chr(97 + i) for i in range(num_types)]\n    data = pd.DataFrame({\n        'values': [randint(integer_range[0], integer_range[1]) for i in range(num_types)],\n    }, index=categories)\n\n    fig, ax = plt.subplots()\n    ax.barh(categories, data['values'], color=['b', 'r', 'y', 'g', 'c'], height=0.8)\n\n    ax.set_title('Visualization of Random Integer Values')\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Category')\n    return (fig, ax)", "compilation_passed": true, "time": 0.005850076675415039, "tests_passed": true, "error": null}
{"code": "# Create a dictionary of lists of random integers\n    data = {}\n    for i in range(num_types):\n        data[i] = [randint(integer_range[0], integer_range[1]) for _ in range(num_types)]\n\n    # Convert dictionary to Pandas DataFrame\n    df = pd.DataFrame(data, index=range(num_types))\n\n    # Create a stacked bar chart and extract the Figure and Axes objects\n    ax = df.plot(kind=\"barh\", stacked=True, figsize=(6, 6))\n    ax.tick_params(labelleft=True)\n    fig = ax.figure\n\n    return fig, ax", "compilation_passed": true, "time": 0.06603097915649414, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame({'Category': ['Category ' + str(i) for i in range(num_types)],\n                       'Values': [randint(integer_range[0], integer_range[1]) for i in range(num_types)]})\n    df.plot.barh(x='Category', y='Values', stacked=True, ax=ax)\n    return (fig, ax)", "compilation_passed": true, "time": 0.0009329319000244141, "tests_passed": false, "error": "NameError"}
{"code": "data_list = []\n    for _ in range(num_types):\n        data_list.append([randint(integer_range[0], integer_range[1]) for _ in range(num_types)])\n    df = pd.DataFrame(data_list, columns=[f\"category {i}\" for i in range(num_types)])\n    ax = df.plot.barh(stacked=True, width=0.9)\n    return ax.figure, ax", "compilation_passed": true, "time": 0.06594109535217285, "tests_passed": true, "error": null}
{"code": "# Generate random integers in the specified range for each type\n    data = {f\"Type {i}\": [randint(*integer_range) for i in range(1, num_types + 1)] for _ in range(num_types)}\n\n    # Create a DataFrame with the generated data\n    df = pd.DataFrame(data, index=pd.Index(range(num_types), name=\"Category\"))\n\n    # Create a horizontal stacked bar chart\n    ax = df.plot(kind=\"barh\", stacked=True)\n\n    return ax.get_figure(), ax", "compilation_passed": true, "time": 0.0008780956268310547, "tests_passed": false, "error": "NameError"}
{"code": "if not isinstance(num_types, int) or num_types <= 0:\n        raise ValueError(f\"num_types must be a positive integer, received {num_types}\")\n    if not isinstance(integer_range, tuple) or len(integer_range) != 2:\n        raise ValueError(f\"integer_range must be a tuple of length 2, received {integer_range}\")\n    if not isinstance(integer_range[0], int) or not isinstance(integer_range[1], int):\n        raise ValueError(f\"integer_range must contain integer values, received {integer_range}\")\n    if integer_range[0] >= integer_range[1]:\n        raise ValueError(\"integer_range must be specified in ascending order\")\n\n    # Generate a random integer for each category\n    values = {i: randint(integer_range[0], integer_range[1]) for i in range(num_types)}\n\n    # Convert values to DataFrame\n    df = pd.DataFrame([values]).T\n    df.rename(columns={0: \"values\"}", "compilation_passed": false, "time": 0.0002529621124267578, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Create DataFrame with random integer values\n    df = pd.DataFrame({'value': [randint(*integer_range) for _ in range(num_types)]})\n    df['category'] = df.index  # Create index as category\n\n    # Create horizontal stacked bar chart\n    fig, ax = plt.subplots(figsize=(10, 5))\n    ax.barh(df['category'], df['value'], color='skyblue')\n\n    ax.set_xlabel('Values')  # Set x-axis label\n    ax.set_yticks(df['category'], labels=df['category'])  # Set y-axis labels\n\n    # Add labels and values to each bar\n    for i, (value, category) in enumerate(zip(df['value'], df['category'])):\n        ax.text(value + 2, i, f'{category}: {value}', va='center')\n\n    # Add legend and title\n    ax.legend()\n    ax.set_title('Horizontal Stacked Bar Chart')\n\n    return fig, ax", "compilation_passed": true, "time": 0.006928920745849609, "tests_passed": true, "error": null}
{"code": "# Initialize an empty dictionary to store the data\n    data = {}\n    # Generate random integer values for each type and add them to the data dictionary\n    for i in range(num_types):\n        data[f'category{i}'] = randint(*integer_range)\n\n    # Convert the data dictionary to a Pandas DataFrame\n    df = pd.DataFrame(data, index=['value'])\n\n    # Use the DataFrame to generate a stacked bar chart using Matplotlib\n    fig, ax = plt.subplots()\n    df.plot.barh(ax=ax, stacked=True)\n\n    # Set the y-axis label to 'Category'\n    ax.set_ylabel('Category')\n\n    return fig, ax", "compilation_passed": true, "time": 0.009979963302612305, "tests_passed": true, "error": null}
{"code": "# Define the names of the categories\n    cats = [f\"Category {i + 1}\" for i in range(num_types)]\n\n    # Initialize a dictionary to store the generated data\n    data = {}\n\n    # Iterate over the categories and generate random integers for each one\n    for i in range(num_types):\n        data[cats[i]] = randint(*integer_range)\n\n    # Convert the data to a DataFrame\n    df = pd.DataFrame(data, index=[0])\n\n    # Plot the data as a stacked bar chart\n    ax = df.plot(kind=\"barh\", stacked=True)\n    return (plt.gcf(), plt.gca())", "compilation_passed": true, "time": 0.009226083755493164, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(\n        {f\"Type {i+1}\": [randint(integer_range[0], integer_range[1]) for _ in range(num_types)] for i in range(num_types)})\n    ax = df.plot.barh(stacked=True, width=0.9, edgecolor=\"black\")\n    return ax.figure, ax", "compilation_passed": true, "time": 0.0661768913269043, "tests_passed": true, "error": null}
{"code": "data = pd.DataFrame(\n        data=[[randint(integer_range[0], integer_range[1]) for i in range(num_types)]\n              for _ in range(num_types)],\n        columns=[str(i) for i in range(num_types)]).sum(axis=0)\n    data.plot(ax=ax, kind=\"barh\", stacked=True,\n              xlim=(0, data.values.max()+1))\n    fig, ax = plt.gcf(), plt.gca()\n    ax.xaxis.grid(linestyle='--', linewidth=0.5)\n    plt.show()\n    return fig, ax", "compilation_passed": true, "time": 0.0015501976013183594, "tests_passed": false, "error": "UnboundLocalError"}
{"code": "random_int_df = (\n        pd.DataFrame(\n            {\n                f\"{letter}\": [randint(*integer_range) for _ in range(num_types)]\n                for letter in [chr(letter_code) for letter_code in range(ord(\"a\"), ord(\"z\") + 1)]\n            }\n        )\n        .T.sort_values(by=0)\n        .sort_index()\n    )\n    fig, ax = plt.subplots()\n    random_int_df.plot.barh(ax=ax, stacked=True)\n    ax.set_title(\"Random Integer Values\")\n    ax.set_xlabel(\"Number\")\n    return (fig, ax)", "compilation_passed": true, "time": 0.03748297691345215, "tests_passed": true, "error": null}
