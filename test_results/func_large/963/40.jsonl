{"code": "valid_extensions = ['.txt', '.docx', '.xlsx', '.csv']\n\n    if not os.path.exists(source_directory):\n        raise OSError(f\"Source directory '{source_directory}' does not exist\")\n\n    if not os.path.exists(target_directory):\n        os.makedirs(target_directory)\n\n    file_paths = glob.glob(f'{source_directory}/*')\n    # file_paths = [\"../test_files/test_files/1.txt\", \"../test_files/test_files/2.csv\", \"../test_files/test_files/3.docx\"]\n\n    with zipfile.ZipFile(f'{target_directory}/{zip_name}.zip', 'w') as zipped_file:\n        for file_path in file_paths:\n            file_extension = Path(file_path).suffix\n            if file_extension in valid_extensions:\n                zipped_file.write(file_path, arcname=", "compilation_passed": false, "time": 0.00026607513427734375, "tests_passed": false, "error": "SyntaxError"}
{"code": "valid_extensions = ['.txt', '.docx', '.xlsx', '.csv']\n    source_directory_path = Path(source_directory)\n    if not source_directory_path.is_dir():\n        raise OSError(f\"Directory {source_directory_path.absolute()} does not exist.\")\n\n    if not os.path.isdir(target_directory):\n        os.makedirs(target_directory)\n\n    target_directory_path = Path(target_directory)\n    zip_path = Path(zip_name + \".zip\")\n    full_zip_path = target_directory_path / zip_path\n\n    files_to_zip = [\n        file_path for file_path in source_directory_path.glob('*')\n        if file_path.suffix in valid_extensions\n    ]\n    with zipfile.ZipFile(str(full_zip_path), 'w') as zip_file:\n        for file_path in files_to_zip:\n            zip_file.write(str(file_path)", "compilation_passed": false, "time": 0.00023174285888671875, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not os.path.exists(source_directory):\n        raise OSError('The directory does not exist')\n\n    if not os.path.exists(target_directory):\n        os.makedirs(target_directory)\n    target = os.path.join(target_directory, zip_name + '.zip')\n    with zipfile.ZipFile(target, 'w', zipfile.ZIP_DEFLATED) as zip:\n        for extension in ['*.txt', '*.docx', '*.xlsx', '*.csv']:\n            file_name = glob.glob(os.path.join(source_directory, extension))\n            for file in file_name:\n                zip.write(file, os.path.basename(file))\n    return target", "compilation_passed": true, "time": 0.02881598472595215, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(source_directory):\n        raise OSError(f\"Directory {source_directory} does not exist.\")\n\n    if not os.path.exists(target_directory):\n        os.makedirs(target_directory)\n\n    zip_path = os.path.join(target_directory, f\"{zip_name}.zip\")\n\n    with zipfile.ZipFile(zip_path, 'w') as zip_file:\n        valid_extensions = ['.txt', '.docx', '.xlsx', '.csv']\n        for file in glob.glob(os.path.join(source_directory, f\"*{tuple(valid_extensions)}\"), recursive=True):\n            zip_file.write(file, os.path.basename(file))\n\n    return zip_path", "compilation_passed": true, "time": 0.016999006271362305, "tests_passed": true, "error": null}
{"code": "# Validate the source_directory path.\n    if not os.path.exists(source_directory):\n        raise OSError(f\"Source directory '{source_directory}' does not exist.\")\n    valid_extensions = ['.txt', '.docx', '.xlsx', '.csv']\n    # Initialize variables\n    full_path = \"\"\n    file_list = []\n\n    # Check if target_directory exists, if not, create it\n    target_dir_path = Path(target_directory)\n    target_dir_path.mkdir(parents=True, exist_ok=True)\n    # Find the files with valid extensions\n    for valid_extension in valid_extensions:\n        file_pattern = source_directory + os.sep + f\"*{valid_extension}\"\n        file_list.extend(glob.glob(file_pattern))\n    # Create the zip file\n    zip_path = os.path.join(target_directory, f\"{zip_name}.zip\")\n    with zipfile.ZipFile(zip_path, \"w\") as zip", "compilation_passed": false, "time": 0.0002579689025878906, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not os.path.exists(source_directory):\n        raise OSError(f\"Source directory {source_directory} does not exist\")\n\n    valid_extensions = ['.txt', '.docx', '.xlsx', '.csv']\n\n    if not os.path.exists(target_directory):\n        os.makedirs(target_directory)\n\n    with zipfile.ZipFile(f'{target_directory}/{zip_name}.zip', 'w') as zipped_file:\n        for file in glob.iglob(f\"{source_directory}/**/*\", recursive=True):\n            if os.path.splitext(file)[1] in valid_extensions:\n                zipped_file.write(file, arcname=os.path.basename(file))\n\n    return f\"{target_directory}/{zip_name}.zip\"", "compilation_passed": true, "time": 0.039337873458862305, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(source_directory):\n        raise OSError(\"Source directory does not exist.\")\n    valid_extensions = ['.txt', '.docx', '.xlsx', '.csv']\n    zip_path = os.path.join(target_directory, zip_name + \".zip\")\n    with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zip_file:\n        for file in glob.glob(os.path.join(source_directory, '*')):\n            ext = os.path.splitext(file)[1]\n            if ext.lower() in valid_extensions:\n                zip_file.write(file, os.path.basename(file))\n    return Path(zip_path).absolute().as_posix()", "compilation_passed": true, "time": 0.028061866760253906, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(source_directory):\n        raise OSError(f\"Source directory '{source_directory}' does not exist.\")\n    valid_extensions = ['.txt', '.docx', '.xlsx', '.csv']\n    source_files = glob.glob(os.path.join(source_directory, '*'))\n    files_to_zip = [file for file in source_files\n                    if os.path.isfile(file) and os.path.splitext(file)[1] in valid_extensions]\n    Path(target_directory).mkdir(parents=True, exist_ok=True)\n    zip_path = os.path.join(target_directory, zip_name + '.zip')\n    with zipfile.ZipFile(zip_path, 'w') as zip_file:\n        for file_path in files_to_zip:\n            zip_file.write(file_path, os.path.basename(file_path))\n    return zip_path", "compilation_passed": true, "time": 0.028623104095458984, "tests_passed": true, "error": null}
{"code": "valid_extensions = ['.txt', '.docx', '.xlsx', '.csv']\n\n    if not os.path.exists(source_directory):\n        raise OSError(f\"The source directory '{source_directory}' does not exist.\")\n    os.makedirs(target_directory, exist_ok=True)\n\n    if not zip_name.endswith('.zip'):\n        zip_name += '.zip'\n\n    zip_path = os.path.join(target_directory, zip_name)\n\n    with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:\n        for ext in valid_extensions:\n            files = glob.glob(os.path.join(source_directory, f'*{ext}'))\n            for file in files:\n                zipf.write(file, arcname=os.path.basename(file))\n\n    return zip_path", "compilation_passed": true, "time": 0.029119014739990234, "tests_passed": true, "error": null}
{"code": "# Check if the source directory exists\n    if not Path(source_directory).exists():\n        raise OSError(f\"Source directory '{source_directory}' does not exist.\")\n\n    # Create the target directory if it does not exist\n    Path(target_directory).mkdir(exist_ok=True)\n\n    # Initialize the zip file\n    zip_path = os.path.join(target_directory, zip_name + '.zip')\n    with zipfile.ZipFile(zip_path, 'w') as zipf:\n        # Iterate over the valid file extensions\n        for ext in ['.txt', '.docx', '.xlsx', '.csv']:\n            files_with_ext = glob.glob(os.path.join(source_directory, f'*{ext}'))\n\n            # Add each file to the zip archive\n            for filename in files_with_ext:\n                zipf.write(filename, arcname=os.path.basename(filename))\n\n    return zip_path", "compilation_passed": true, "time": 0.028537988662719727, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(source_directory):\n        raise OSError(f\"The source directory does not exist: {source_directory}\")\n\n    valid_extensions = ['.txt', '.docx', '.xlsx', '.csv']\n\n    if not target_directory:\n        target_directory = Path().absolute()\n\n    target_directory = Path(target_directory)\n\n    if not target_directory.exists():\n        os.makedirs(target_directory)\n\n    zip_path = target_directory / f\"{zip_name}.zip\"\n\n    with zipfile.ZipFile(zip_path, \"w\", zipfile.ZIP_DEFLATED) as zip:\n        for file in glob.iglob(f\"{source_directory}/*\"):\n            ext = Path(file).suffix\n            if ext in valid_extensions:\n                zip.write(file, arcname=os.path.basename(file))\n\n    return str(zip_path)", "compilation_passed": true, "time": 0.028559207916259766, "tests_passed": true, "error": null}
{"code": "extensions = ['.txt', '.docx', '.xlsx', '.csv']\n    if not os.path.exists(source_directory):\n        raise OSError('Source directory does not exist')\n    else:\n        os.makedirs(target_directory, exist_ok=True)\n        zip_file = Path(target_directory, f'{zip_name}.zip')\n        with zipfile.ZipFile(zip_file, 'w', compression=zipfile.ZIP_DEFLATED) as zipf:\n            for extension in extensions:\n                for file in glob.glob(os.path.join(source_directory, f'*{extension}')):\n                    zipf.write(file, os.path.basename(file))\n        return str(zip_file)", "compilation_passed": true, "time": 0.027769088745117188, "tests_passed": true, "error": null}
{"code": "source_directory = Path(source_directory)\n    if not source_directory.exists():\n        raise OSError(f\"Source directory does not exist: {source_directory}\")\n\n    target_directory = Path(target_directory)\n    if not target_directory.exists():\n        target_directory.mkdir(parents=True, exist_ok=True)\n\n    valid_extensions = ['.txt', '.docx', '.xlsx', '.csv']\n\n    zip_file_path = target_directory / f\"{zip_name}.zip\"\n    with zipfile.ZipFile(zip_file_path, \"w\", zipfile.ZIP_DEFLATED) as zip_file:\n        for file_path in glob.glob(str(source_directory / '*')):\n            if any(file_path.lower().endswith(ext) for ext in valid_extensions):\n                zip_file.write(file_path, os.path.basename(file_path))\n\n    return str(zip_file_path)", "compilation_passed": true, "time": 0.02871394157409668, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(source_directory):\n        raise OSError(f\"source_directory does not exist: {source_directory}\")\n    # Create the target directory if it does not exist\n    Path(target_directory).mkdir(parents=True, exist_ok=True)\n    zip_path = os.path.join(target_directory, f\"{zip_name}.zip\")\n    # Valid extensions\n    extensions = [\".txt\", \".docx\", \".xlsx\", \".csv\"]\n    with zipfile.ZipFile(zip_path, \"w\") as zipped:\n        for file in glob.glob(os.path.join(source_directory, \"*\")):\n            ext = os.path.splitext(file)[1].lower()\n            if ext in extensions:\n                zipped.write(file, os.path.basename(file))\n    return zip_path", "compilation_passed": true, "time": 0.028606176376342773, "tests_passed": true, "error": null}
{"code": "# Define the valid extensions\n    valid_extensions = ['.txt', '.docx', '.xlsx', '.csv']\n\n    # Create target directory if it doesn't exist\n    os.makedirs(target_directory, exist_ok=True)\n\n    # Create a list of file paths to be zipped\n    file_paths = []\n    for ext in valid_extensions:\n        file_paths.extend(glob.glob(f\"{source_directory}/*{ext}\"))\n\n    # Create the zip file\n    with zipfile.ZipFile(Path(target_directory, zip_name).with_suffix(\".zip\"), mode=\"w\") as zip_file:\n        for file_path in file_paths:\n            zip_file.write(file_path, arcname=file_path.split(source_directory)[-1][1:])\n\n    # Return the full path to the created zip file\n    return Path(target_directory, zip_name).with_suffix(\".zip\")", "compilation_passed": true, "time": 0.02917003631591797, "tests_passed": true, "error": null}
{"code": "extensions = ['.txt', '.docx', '.xlsx', '.csv']\n\n    if not os.path.isdir(source_directory):\n        raise OSError('Source directory does not exist')\n    files = [f for ext in extensions for f in glob.glob(f\"{source_directory}/**/*{ext}\", recursive=True)]\n    if not files:\n        raise FileNotFoundError(f\"No files with extensions {extensions} found in {source_directory}\")\n\n    path = Path(target_directory, zip_name)\n    path.parent.mkdir(parents=True, exist_ok=True)\n    path = str(path) + '.zip'\n\n    with zipfile.ZipFile(path, 'w', compression=zipfile.ZIP_DEFLATED) as zip_file:\n        for file in files:\n            zip_file.write(file, os.path.basename(file))\n\n    return path", "compilation_passed": true, "time": 0.006365776062011719, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Check if the source directory exists\n    if not os.path.exists(source_directory):\n        raise OSError(\"The directory does not exist\")\n\n    # Valid extensions\n    valid_extensions = ['.txt', '.docx', '.xlsx', '.csv']\n\n    # Create destination directory if it does not exist\n    if not os.path.exists(target_directory):\n        os.makedirs(target_directory)\n\n    # Create the path to the zip file\n    zip_path = Path(target_directory, Path(zip_name).with_suffix('.zip'))\n\n    # Create a new zip archive\n    with zipfile.ZipFile(zip_path, 'w') as zip_file:\n        # Iterate over the valid extensions\n        for ext in valid_extensions:\n            # Find files with the specific extension in the source directory and its subdirectories\n            for file_path in glob.iglob(os.path.join(source_directory, '**', f'*{ext}')):\n                # Add the file to the zip archive", "compilation_passed": false, "time": 0.00020813941955566406, "tests_passed": false, "error": "IndentationError"}
{"code": "valid_extensions = ['.txt', '.docx', '.xlsx', '.csv']\n    zip_file_path = Path(target_directory) / f\"{zip_name}.zip\"\n\n    if not os.path.exists(source_directory):\n        raise OSError(\"Source directory does not exist\")\n\n    files_to_zip = [file for ext in valid_extensions\n                     for file in glob.glob(os.path.join(source_directory, f'*.{ext}'))]\n\n    with zipfile.ZipFile(zip_file_path, 'w') as zip_file:\n        for file in files_to_zip:\n            file_name = os.path.basename(file)\n            zip_file.write(file, file_name, zipfile.ZIP_DEFLATED)\n\n    return str(zip_file_path)", "compilation_passed": true, "time": 0.017379283905029297, "tests_passed": true, "error": null}
{"code": "source_directory = Path(source_directory)\n    if not source_directory.exists():\n        raise OSError(f'The directory {source_directory} does not exist.')\n\n    target_directory = Path(target_directory)\n    if not target_directory.exists():\n        target_directory.mkdir()\n\n    extensions = ['.txt', '.docx', '.xlsx', '.csv']\n    file_paths = [f for ext in extensions for f in source_directory.glob(f'*{ext}')]\n    file_paths = sorted([f.resolve() for f in file_paths])\n\n    with zipfile.ZipFile(f'{target_directory}/{zip_name}.zip', 'w') as zipf:\n        for file_path in file_paths:\n            zipf.write(file_path, arcname=file_path.relative_to(source_directory))\n\n    return f'{target_directory}/{zip_name}.zip'", "compilation_passed": true, "time": 0.017540931701660156, "tests_passed": false, "error": "ValueError"}
{"code": "valid_extensions = ['.txt', '.docx', '.xlsx', '.csv']\n\n    source_directory = os.path.abspath(source_directory)\n\n    if not os.path.isdir(source_directory):\n        raise OSError(f\"Source directory {source_directory} does not exist\")\n\n    if not os.path.isdir(target_directory):\n        os.makedirs(target_directory)\n\n    zip_path = Path(target_directory) / f\"{zip_name}.zip\"\n    with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zip_file:\n        for ext in valid_extensions:\n            for filename in glob.glob(os.path.join(source_directory, '*' + ext)):\n                zip_file.write(filename, os.path.basename(filename))\n    return str(zip_path)", "compilation_passed": true, "time": 0.029626131057739258, "tests_passed": true, "error": null}
{"code": "# Create the target directory if it doesn't exist\n    if not os.path.exists(target_directory):\n        os.makedirs(target_directory)\n\n    # Check if the source directory exists\n    if not os.path.exists(source_directory):\n        raise OSError(\"Source directory does not exist\")\n\n    # Create the zip file\n    zip_path = os.path.join(target_directory, f\"{zip_name}.zip\")\n\n    # Valid extensions for the files to be zipped\n    valid_extensions = ['.txt', '.docx', '.xlsx', '.csv']\n\n    # Search for files with the valid extensions\n    files_to_zip = [file for ext in valid_extensions for file in glob.glob(os.path.join(source_directory, f\"*{ext}\"))]\n\n    with zipfile.ZipFile(zip_path, 'w') as zip_file:\n        for file in files_to_zip:\n            file_name = os.path.basename(file)\n            zip_", "compilation_passed": true, "time": 0.008119821548461914, "tests_passed": false, "error": "AttributeError"}
{"code": "extensions = [\".txt\", \".docx\", \".xlsx\", \".csv\"]\n    files_to_zip = []\n    # Check if the source directory exists\n    if not os.path.isdir(source_directory):\n        raise OSError(f\"The source directory {source_directory} does not exist.\")\n    # Get the full paths of all files with valid extensions in the source directory\n    for extension in extensions:\n        # The glob pattern is used to match all files with the extension\n        files = glob.glob(os.path.join(source_directory, f\"*{extension}\"))\n        files_to_zip.extend(files)\n    # Create the target directory if it does not exist\n    Path(target_directory).mkdir(parents=True, exist_ok=True)\n    # Create the zip file\n    # The with statement makes sure that the zip file is closed correctly\n    with zipfile.ZipFile(\n        os.path.join(target_directory, f\"{zip_name}.zip\"), \"w\", zipfile.ZIP", "compilation_passed": false, "time": 0.0002422332763671875, "tests_passed": false, "error": "SyntaxError"}
{"code": "valid_extensions = [\".txt\", \".docx\", \".xlsx\", \".csv\"]\n    zip_name_with_ext = zip_name + \".zip\"\n    target_path = os.path.join(target_directory, zip_name_with_ext)\n    if os.path.exists(source_directory) is False:\n        raise OSError(\"The directory does not exist.\")\n    # The following code creates the directory if it doesn't exist yet\n    path = Path(target_directory)\n    path.mkdir(parents=True, exist_ok=True)\n    with zipfile.ZipFile(target_path, \"w\", zipfile.ZIP_DEFLATED) as zip_f:\n        for file in glob.glob(source_directory + \"/*\"):\n            if os.path.splitext(file)[-1] in valid_extensions:\n                zip_f.write(file, arcname=os.path.basename(file))\n\n    return os.path.join(target_directory, zip_name_", "compilation_passed": false, "time": 0.0002281665802001953, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not os.path.exists(source_directory):\n        raise OSError(\"source directory does not exist\")\n\n    if not os.path.exists(target_directory):\n        os.makedirs(target_directory)\n\n    target_directory = os.path.realpath(target_directory)\n\n    files_to_zip = []\n    for ext in ['*.txt', '*.docx', '*.xlsx', '*.csv']:\n        files_to_zip.extend(glob.glob(os.path.join(source_directory, ext)))\n\n    with zipfile.ZipFile(os.path.join(target_directory, zip_name + '.zip'), 'w', zipfile.ZIP_DEFLATED) as zip_ref:\n        for file in files_to_zip:\n            zip_ref.write(file, os.path.basename(file))\n\n    return os.path.join(target_directory, zip_name + '.zip')", "compilation_passed": true, "time": 0.029471158981323242, "tests_passed": true, "error": null}
{"code": "valid_extensions = ['.txt', '.docx', '.xlsx', '.csv']\n    Path(target_directory).mkdir(parents=True, exist_ok=True)\n    with zipfile.ZipFile(f'{target_directory}/{zip_name}.zip', 'w') as zip_file:\n        for ext in valid_extensions:\n            for file in glob.glob(f'{source_directory}/**/*{ext}', recursive=True):\n                zip_file.write(file, os.path.basename(file))\n    return f'{target_directory}/{zip_name}.zip'", "compilation_passed": true, "time": 0.0413970947265625, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(source_directory):\n        raise OSError(f\"Source directory {source_directory} does not exist.\")\n\n    # If the target directory does not exist, create it\n    target_directory = Path(target_directory)\n    if not target_directory.exists():\n        target_directory.mkdir(parents=True)\n\n    # Create the full path to the zip file\n    zip_path = str(target_directory / f\"{zip_name}.zip\")\n\n    # Valid extensions\n    valid_extensions = ['.txt', '.docx', '.xlsx', '.csv']\n\n    # List of valid files to add to the zip file\n    valid_files = [\n        os.path.abspath(f)\n        for f in glob.glob(os.path.join(source_directory, \"*\"))\n        if (any(f.endswith(ext) for ext in valid_extensions) and os.path.isfile(f))\n    ]\n\n    # Create the zip file and add the valid files to", "compilation_passed": true, "time": 0.006384134292602539, "tests_passed": false, "error": "AttributeError"}
{"code": "if not os.path.exists(source_directory):\n        raise OSError(f\"Directory '{source_directory}' does not exist!\")\n    valid_exts = ['.txt', '.docx', '.xlsx', '.csv']\n    zip_name = os.path.join(target_directory, zip_name + '.zip')\n    path = Path(target_directory)\n    if not path.exists():\n        path.mkdir(parents=True, exist_ok=True)\n    with zipfile.ZipFile(zip_name, 'w') as zipped_file:\n        for extension in valid_exts:\n            files = glob.glob(f'{source_directory}/*{extension}')\n            for file in files:\n                zipped_file.write(file, os.path.basename(file))\n    return zip_name", "compilation_passed": true, "time": 0.02908802032470703, "tests_passed": true, "error": null}
{"code": "valid_extensions = [\n        '.txt', '.docx', '.xlsx', '.csv']\n    if not os.path.exists(source_directory):\n        raise OSError(\"Directory does not exist\")\n    os.makedirs(target_directory, exist_ok=True)\n    zip_path = os.path.join(\n        target_directory,\n        zip_name + '.zip',\n    )\n    with zipfile.ZipFile(zip_path, 'w') as zip_file:\n        for file_path in glob.glob(os.path.join(source_directory, '*')):\n            _, file_extension = os.path.splitext(file_path)\n            if file_extension in valid_extensions:\n                zip_file.write(file_path, os.path.basename(file_path))\n\n    return zip_path", "compilation_passed": true, "time": 0.02742600440979004, "tests_passed": true, "error": null}
{"code": "# Check if source_directory exists\n    if not os.path.exists(source_directory):\n        raise OSError(\"Directory '{}' does not exist.\".format(source_directory))\n\n    # Create the target_directory if it does not exist\n    Path(target_directory).mkdir(parents=True, exist_ok=True)\n\n    # Create the zip file with the provided zip_name\n    zip_path = os.path.join(target_directory, zip_name + '.zip')\n\n    # Create the zipfile and write files to it\n    with zipfile.ZipFile(zip_path, 'w') as zip_file:\n        # Iterate through the files with the valid extensions\n        for extension in ['*.txt', '*.docx', '*.xlsx', '*.csv']:\n            files = glob.glob(os.path.join(source_directory, extension))\n            for file in files:\n                # Add the file to the zip file\n                zip_file.write(file, os.path.basename(file))\n\n", "compilation_passed": true, "time": 0.006585121154785156, "tests_passed": false, "error": "AttributeError"}
{"code": "try:\n        os.chdir(source_directory)\n    except OSError:\n        raise OSError(f\"Source directory does not exist: {source_directory}\")\n\n    # create destination directory if it does not exist\n    Path(target_directory).mkdir(parents=True, exist_ok=True)\n\n    # create zip file in the specified directory\n    zip_file = zipfile.ZipFile(f'{target_directory}/{zip_name}.zip', 'w')\n\n    # define valid extensions for files to be zipped\n    valid_extensions = ['.txt', '.docx', '.xlsx', '.csv']\n\n    # add all valid files from the source directory to the zip file\n    for extension in valid_extensions:\n        files = glob.glob(f'*{extension}')\n        for file in files:\n            zip_file.write(file)\n\n    zip_file.close()\n\n    return f'{target_directory}/{zip_name}.zip'", "compilation_passed": true, "time": 0.03106689453125, "tests_passed": true, "error": null}
