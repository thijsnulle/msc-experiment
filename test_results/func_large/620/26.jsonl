{"code": "# Calculate the number of rows and columns for each sublist in L\n    shapes = [(L[i][j]*L[i][k], L[i][j]*L[i][k]) for i in range(len(L)) for j in range(len(L[i])) for k in range(j+1,len(L[i]))]\n    # Create empty lists to hold the data\n    data = []\n    columns = []\n    index = []\n\n    # Loop through the shapes and generate a random matrix for each shape\n    for shape in shapes:\n        matrix = np.random.randint(RANGE[0], RANGE[1], size=shape)\n        # Append the data, columns, and index to the lists\n        data.append(matrix)\n        columns.append([f'col_{i}' for i in range(shape[1])])\n        index.append([f'index_{i}' for i in range(shape[0])])\n\n    # Create the DataFrame and return it\n    df = pd.DataFrame(data, columns=columns, index=index)\n    ", "compilation_passed": true, "time": 0.0012900829315185547, "tests_passed": false, "error": "ValueError"}
{"code": "# Create an empty list to store the dimensions\n    dimensions = []\n    # Loop through each nested list in L\n    for i in L:\n        # Calculate the product of the two integers\n        dimension = i[0]*i[1]\n        # Add the product to the list of dimensions\n        dimensions.append(dimension)\n    # Create an empty list to store the data\n    data = []\n    # Loop through each dimension in dimensions\n    for dimension in dimensions:\n        # Create a new row of random integers\n        row = np.random.randint(RANGE[0], RANGE[1], dimension)\n        # Add the row to the data\n        data.append(row)\n    # Create a pandas DataFrame from the data\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.002069711685180664, "tests_passed": true, "error": null}
{"code": "# Define a list to store all dimensions of the DataFrames\n    all_dims = []\n\n    # Iterate over the sublists of L\n    for subl in L:\n        # Multiply the integers in the sublist and append to the list\n        all_dims.append(subl[0]*subl[1])\n\n    # Generate a numpy array of random integers based on the dimensions in all_dims\n    np_arr = np.random.randint(low=RANGE[0], high=RANGE[1], size=all_dims)\n\n    # Reshape the numpy array to the desired dimensions\n    np_arr = np_arr.reshape(*all_dims)\n\n    # Convert the numpy array to a pandas DataFrame\n    df = pd.DataFrame(np_arr)\n\n    return df", "compilation_passed": true, "time": 0.0009310245513916016, "tests_passed": true, "error": null}
{"code": "# Generate a DataFrame with random integers based on the dimensions of each sublist in L\n    df = pd.DataFrame(np.random.randint(RANGE[0], RANGE[1], size=(len(L) * L[0][0] * L[0][1])).reshape((len(L), L[0][0] * L[0][1])))\n\n    # Return the DataFrame\n    return df", "compilation_passed": true, "time": 0.0008337497711181641, "tests_passed": true, "error": null}
{"code": "# Initialize an empty DataFrame.\n    df = pd.DataFrame()\n\n    # Loop through the sublists in L.\n    for row in L:\n\n        # Multiply the elements in the sublist to determine the size of the numpy array.\n        size = np.prod(row)\n\n        # Create a 1-dimensional array of random integers.\n        random_arr = np.random.randint(low=RANGE[0], high=RANGE[1], size=size)\n\n        # Reshape the array to the desired shape given by the sublist.\n        random_arr = np.reshape(random_arr, row)\n\n        # Convert the array to a pandas DataFrame and add it to the existing DataFrame.\n        df = pd.concat([df, pd.DataFrame(random_arr)], axis=1)\n\n    # Reset the index of the DataFrame.\n    df.reset_index(inplace=True)\n\n    # Return the final DataFrame.\n    return df", "compilation_passed": true, "time": 0.0014271736145019531, "tests_passed": true, "error": null}
{"code": "np.random.seed(42)\n    data = np.random.randint(RANGE[0], RANGE[1], size=L)\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0008099079132080078, "tests_passed": false, "error": "TypeError"}
{"code": "# Flatten the input list of lists\n    pairs = sum(L, [])\n    # Create a list of integer pairs\n    pair_list = list(zip(pairs[0::2], pairs[1::2]))\n    # Create empty lists to store dimensions of nested DataFrames\n    dimensions_list = []\n    # Loop over integer pairs\n    for pair in pair_list:\n        # Multiply integers to determine dimensions\n        dimension = pair[0] * pair[1]\n        # Append dimensions to the dimensions_list\n        dimensions_list.append(dimension)\n    # Create a list of random integers using the dimensions\n    df = pd.DataFrame(np.random.randint(*RANGE, size=dimensions_list))\n    return df", "compilation_passed": true, "time": 0.0009260177612304688, "tests_passed": true, "error": null}
{"code": "return pd.DataFrame(np.random.randint(RANGE[0], RANGE[1], size=(np.prod([np.prod(li, dtype=int) for li in L]))).reshape(*np.concatenate(L, axis=None)))", "compilation_passed": true, "time": 0.000988006591796875, "tests_passed": false, "error": "ValueError"}
{"code": "# Use list comprehension to generate lists of tuples from nested lists\n    # Use np.random.randint to generate random integers\n    # Use pd.DataFrame to generate DataFrame\n    return pd.DataFrame([np.random.randint(RANGE[0], RANGE[1], size=(i[0], i[1])) for i in L])", "compilation_passed": true, "time": 0.001001119613647461, "tests_passed": false, "error": "ValueError"}
{"code": "# Initialize a new DataFrame\n    df = pd.DataFrame()\n    # Loop through the input list of lists\n    for i in L:\n        # Multiply the two integers in the sublist\n        n = i[0] * i[1]\n        # Generate a random array of integers\n        arr = np.random.randint(*RANGE, size=n)\n        # Convert the array to a Series\n        s = pd.Series(arr)\n        # Add the Series to the DataFrame\n        df[i] = s\n    # Return the DataFrame\n    return df", "compilation_passed": true, "time": 0.001020193099975586, "tests_passed": false, "error": "ValueError"}
{"code": "# Create an empty DataFrame to store the random integer data\n    df = pd.DataFrame()\n\n    # Iterate over each list in the input list\n    for i in L:\n        # Use the integers in the list to determine the dimensions of the random integer array\n        df = pd.concat([df, pd.DataFrame(np.random.randint(RANGE[0], RANGE[1], size=(i[0], i[1])))])\n\n    return df", "compilation_passed": true, "time": 0.0012180805206298828, "tests_passed": true, "error": null}
{"code": "# Initialize the empty DataFrame\n    df = pd.DataFrame()\n\n    # Iterate through the pairs of integers in the input list of lists\n    for row, col in L:\n        # Generate a random array of integers and reshape it into a matrix\n        values = np.random.randint(low=RANGE[0], high=RANGE[1], size=(row, col))\n        # Append the matrix to the DataFrame\n        df = pd.concat([df, pd.DataFrame(values)], axis=1)\n\n    return df", "compilation_passed": true, "time": 0.001132965087890625, "tests_passed": true, "error": null}
{"code": "data = []\n\n    for row_col in L:\n        row, col = row_col\n        random_list = np.random.randint(RANGE[0], RANGE[1], size=(row, col)).tolist()\n        data.append(random_list)\n\n    df = pd.DataFrame(data)\n\n    return df", "compilation_passed": true, "time": 0.0008990764617919922, "tests_passed": true, "error": null}
{"code": "assert all(len(l) == 2 for l in L)\n    assert all(isinstance(l[0], int) and isinstance(l[1], int) for l in L)\n    assert all(RANGE[0] <= l[0] and l[1] <= RANGE[1] for l in L)\n\n    # Generate random integers and reshape them into a 2D array\n    data = np.random.randint(RANGE[0], RANGE[1], size=tuple(np.product(l) for l in L))\n    # Convert the 2D array to a pandas DataFrame\n    df = pd.DataFrame(data)\n\n    return df", "compilation_passed": true, "time": 0.0011260509490966797, "tests_passed": true, "error": null}
{"code": "data = [\n        [\n            np.random.randint(RANGE[0], RANGE[1], (num1, num2))\n            for num1, num2 in L\n        ]\n    ]\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0008590221405029297, "tests_passed": true, "error": null}
{"code": "result = {}\n    for sublist in L:\n        row = sublist[0] * sublist[1]\n        col = sublist[0] * sublist[1]\n        if isinstance(sublist[0], int) and isinstance(sublist[1], int):\n            result[sublist[0]] = [np.random.randint(RANGE[0], RANGE[1]+1) for _ in range(row * col)]\n    return pd.DataFrame(result)", "compilation_passed": true, "time": 0.0022246837615966797, "tests_passed": false, "error": "ValueError"}
{"code": "# Create an empty list to store the DataFrames\n    data = []\n\n    # Iterate over each sublist in 'L'\n    for sublist in L:\n        # Generate random integers\n        rand_ints = np.random.randint(RANGE[0], RANGE[1] + 1, size=(sublist[0], sublist[1]))\n        # Create a DataFrame using the random integers\n        df = pd.DataFrame(rand_ints)\n        # Add the DataFrame to the list of DataFrames\n        data.append(df)\n\n    # Return the list of DataFrames\n    return data", "compilation_passed": true, "time": 0.0008070468902587891, "tests_passed": false, "error": "AttributeError"}
{"code": "# Create a generator to calculate the dimensions of each matrix\n    dim_gen = (x[0] * x[1] for x in L)\n\n    # Initialize a list to hold the matrix dimensions\n    matrix_sizes = []\n\n    # Use a while loop to generate the dimensions of the matrices\n    while True:\n        # Use the next() function to get the next value from the generator\n        try:\n            num = next(dim_gen)\n        # Stop the loop when the generator is exhausted\n        except StopIteration:\n            break\n        # Add the number to the list of matrix dimensions\n        matrix_sizes.append(num)\n\n    # Create a list comprehension to generate random numbers\n    list_comprehension = [random.randint(*RANGE) for _ in range(matrix_sizes[0])]\n\n    # Create a list of lists using a list comprehension\n    list_of_lists = [list_comprehension[i:i + L[0][1]] for i in range(0, len(list_comprehension), L[0][1])]\n\n    # Create a pandas", "compilation_passed": true, "time": 0.0008840560913085938, "tests_passed": false, "error": "NameError"}
{"code": "# Create empty dictionary to store data\n    data = {}\n    # Iterate over each sublist in the input list\n    for l in L:\n        # Create random array of integers using given dimensions\n        values = np.random.randint(*RANGE, size=l)\n        # Create column name as string\n        col = f'{l[0]}x{l[1]}'\n        # Store column values in dictionary\n        data[col] = values\n    # Create DataFrame from dictionary\n    return pd.DataFrame(data)", "compilation_passed": true, "time": 0.0010013580322265625, "tests_passed": false, "error": "ValueError"}
{"code": "assert all(isinstance(lst, list) and len(lst) == 2 for lst in L)\n    assert all(all(isinstance(elem, int) for elem in lst) for lst in L)\n\n    df = pd.DataFrame(np.random.randint(low=RANGE[0], high=RANGE[1], size=(\n        sum(np.prod(lst) for lst in L),)))\n    return df", "compilation_passed": true, "time": 0.0008749961853027344, "tests_passed": true, "error": null}
{"code": "# Flatten the list of lists into a list of integers\n    sizes = [item for sublist in L for item in sublist]\n    # Generate a random NumPy array with the specified shape and fill it with random integers\n    data = np.random.randint(RANGE[0], RANGE[1] + 1, size=sizes)\n    # Convert the NumPy array to a DataFrame with the specified number of rows and columns\n    df = pd.DataFrame(data=data)\n    return df", "compilation_passed": true, "time": 0.0009348392486572266, "tests_passed": false, "error": "ValueError"}
{"code": "# Initialization\n    df = pd.DataFrame()\n    # Generate random numbers\n    for i in L:\n        df_temp = pd.DataFrame(np.random.randint(*RANGE, size=i[0]*i[1]))\n        # Set column names\n        df_temp.columns = [str(i[0]), str(i[1])]\n        # Set the index\n        df_temp.index = range(1, i[0]*i[1]+1)\n        # Add to main DataFrame\n        df[df_temp.columns] = df_temp\n\n    return df", "compilation_passed": true, "time": 0.0010640621185302734, "tests_passed": false, "error": "ValueError"}
{"code": "pass", "compilation_passed": true, "time": 0.0006482601165771484, "tests_passed": false, "error": "AttributeError"}
{"code": "# Create empty DataFrame\n    df = pd.DataFrame()\n\n    # Iterate through lists in L\n    for i in range(len(L)):\n        # Generate random integers as the values for the current sublist\n        vals = list(np.random.randint(RANGE[0], RANGE[1], L[i][0] * L[i][1]))\n\n        # Add values as a column to DataFrame\n        df = df.append(pd.Series(vals), ignore_index=True)\n\n    return df", "compilation_passed": true, "time": 0.0008990764617919922, "tests_passed": false, "error": "AttributeError"}
{"code": "# Generate random integers for each sublist in L\n    data = []\n    for l in L:\n        rng = np.random.default_rng()\n        data.append(rng.integers(RANGE[0], RANGE[1], size=l, endpoint=True))\n\n    # Generate pandas DataFrame from random integers\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.0011048316955566406, "tests_passed": false, "error": "ValueError"}
{"code": "data = [[np.random.randint(RANGE[0], RANGE[1], size=(len(L[0]))) for _ in range(len(L))]]\n    data = [[col for col in zip(*row)] for row in data]\n    cols = [''.join(['col', str(num)]) for row in data for num in range(1, len(row) + 1)]\n    df = pd.DataFrame(data, columns = cols)\n\n    return df", "compilation_passed": true, "time": 0.0009539127349853516, "tests_passed": true, "error": null}
{"code": "# Initialize empty list\n    data_lists = []\n\n    # Iterate over the elements in the list 'L'\n    for sub_list in L:\n        # Extract the first integer from each sublist\n        n = sub_list[0]\n        # Create an array of random integers\n        data = np.random.randint(RANGE[0], RANGE[1], size=n)\n        # Append the array to the data_lists\n        data_lists.append(data)\n\n    # Create DataFrame with the nested lists and return it\n    return pd.DataFrame(data_lists)", "compilation_passed": true, "time": 0.0009553432464599609, "tests_passed": true, "error": null}
{"code": "assert isinstance(L, list), f'Error: Input must be a list of lists, but received {type(L)}'\n\n    for sublist in L:\n        if not isinstance(sublist, list) or len(sublist) != 2:\n            raise AssertionError(f\"Error: Each sublist must contain exactly 2 integers, but received {sublist}\")\n        for num in sublist:\n            if not isinstance(num, int) or num != int(num) or num < 1:\n                raise AssertionError(f\"Error: Each sublist must contain exactly 2 positive integers, but received {num}\")\n\n    # Generating random integers within the given range\n    num_rows = sum(sublist[0] for sublist in L)\n    num_cols = sum(sublist[1] for sublist in L)\n    data = np.random.randint(RANGE[0], RANGE[1]+1, size=(num_rows, num_cols))\n\n    # Creating a DataFrame\n    df = pd.DataFrame(", "compilation_passed": false, "time": 0.0002238750457763672, "tests_passed": false, "error": "SyntaxError"}
{"code": "return pd.DataFrame(np.random.randint(*RANGE, size=tuple(pair)) for pair in L)", "compilation_passed": true, "time": 0.0010030269622802734, "tests_passed": false, "error": "ValueError"}
{"code": "df = pd.DataFrame({str((x, y)): np.random.randint(*RANGE, size=(x * y)) for x, y in L})\n    return df", "compilation_passed": true, "time": 0.0009868144989013672, "tests_passed": false, "error": "ValueError"}
