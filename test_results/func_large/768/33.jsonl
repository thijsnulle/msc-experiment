{"code": "# check if the directory exists\n    if not os.path.exists(dir_path):\n        raise ValueError(f\"Directory does not exist: {dir_path}\")\n\n    # find all text files in the directory\n    text_files = glob.glob(f\"{dir_path}/**/*.txt\", recursive=True)\n\n    # create dictionary to store results\n    results = {}\n    # iterate over each text file\n    for file_path in text_files:\n        # read content of the file\n        with open(file_path, 'r') as f:\n            content = f.read()\n        # find occurrences of \"error\" in the content\n        pattern = re.compile(r'\\berror\\b', re.IGNORECASE)\n        matches = pattern.findall(content)\n        # store the relative file path and the count of matches in the dictionary\n        results[os.path.relpath(file_path, dir_path)] = len(matches)\n    return results", "compilation_passed": true, "time": 0.004838228225708008, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(dir_path):\n        raise ValueError(f\"Directory in {dir_path} does not exist\")\n\n    text_files = glob.glob(dir_path + \"/**/*.txt\", recursive=True)\n    result_dict = {}\n    pattern = re.compile(r\"\\berror\\b\", re.IGNORECASE)\n    for file in text_files:\n        relative_file = os.path.relpath(file, dir_path)\n        with open(file, \"r\") as f:\n            count = len(pattern.findall(f.read()))\n            if count > 0:\n                result_dict[relative_file] = count\n    return result_dict", "compilation_passed": true, "time": 0.003679990768432617, "tests_passed": true, "error": null}
{"code": "# Validate the input directory path\n    if not os.path.exists(dir_path):\n        raise ValueError(\"Directory does not exist.\")\n\n    # Find all text files in the directory\n    text_file_paths = glob.glob(os.path.join(dir_path, \"**\", \"*.txt\"),\n                               recursive=True)\n\n    # Create a dictionary to store the count of occurrences of the word\n    # \"error\"\n    result_dict = {}\n\n    # Define the regex pattern to match the word \"error\"\n    pattern = re.compile(r\"\\berror\\b\", re.IGNORECASE)\n\n    # Iterate over the text files\n    for file_path in text_file_paths:\n        with open(file_path, \"r\") as file:\n            content = file.read()\n\n            # Search for the regex pattern in the content\n            matches = pattern.findall(content)\n\n            # Get the relative file path for the result\n            relative_file_path = os.path.relpath(file_path,", "compilation_passed": false, "time": 0.00018668174743652344, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not os.path.isdir(dir_path):\n        raise ValueError(\"Directory in dir_path does not exist.\")\n\n    pattern = r'\\berror\\b'\n    # \\b enforces that \"error\" only matches whole words, no partial match.\n\n    files = glob.glob(os.path.join(dir_path, '**/*.txt'), recursive=True)\n\n    file_counts = {}\n    for file in files:\n        # Find relative file path\n        relative_path = os.path.relpath(file, dir_path)\n\n        # Read text file\n        with open(file, 'r', encoding='utf-8') as f:\n            content = f.read()\n\n        # Count occurrences of the word \"error\"\n        file_counts[relative_path] = len(re.findall(pattern, content, re.IGNORECASE))\n\n    return file_counts", "compilation_passed": true, "time": 0.004739046096801758, "tests_passed": true, "error": null}
{"code": "# Check if directory exists\n    if not os.path.isdir(dir_path):\n        raise ValueError(\"Directory not found: {}\".format(dir_path))\n\n    # Create a dictionary to store results\n    result_dict = {}\n\n    # Set up regex pattern\n    pattern = re.compile(r'\\berror\\b', re.IGNORECASE)\n\n    # Iterate over each file in the directory and subdirectories\n    for root, _, files in os.walk(dir_path):\n        for file_name in files:\n            if file_name.endswith('.txt'):  # Check if it is a .txt file\n                file_path = os.path.join(root, file_name)\n                relative_path = os.path.relpath(file_path, dir_path)\n                with open(file_path, 'r') as file:\n                    content = file.read()\n                    # Count the number of occurrences of the pattern\n                    count = len(pattern.findall(content))\n                    # Store the result in the dictionary\n", "compilation_passed": true, "time": 0.0019240379333496094, "tests_passed": true, "error": null}
{"code": "# check that the directory exists\n    if not os.path.isdir(dir_path):\n        raise ValueError(f\"Directory '{dir_path}' does not exist.\")\n    # find all text file paths in the specified directory and its subdirectories\n    file_paths = glob.glob(os.path.join(dir_path, \"**\", \"*.txt\"), recursive=True)\n    # create a dictionary to store the results\n    results = {}\n    # loop through each file path and count occurrences of the word \"error\"\n    for file_path in file_paths:\n        with open(file_path, \"r\") as file:\n            # read the entire file contents as a single string\n            text = file.read()\n            # use regex to find all occurrences of the word \"error\"\n            occurrences = re.findall(r\"\\berror\\b\", text, re.IGNORECASE)\n            # get the relative file path by stripping the dir_path\n            rel_file_path = os.path.relpath(file_path, dir_path)\n            ", "compilation_passed": true, "time": 0.0017547607421875, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(dir_path):\n        raise ValueError(\"The specified directory does not exist.\")\n    file_counts = {}\n    for file_path in glob.glob(os.path.join(dir_path, '**', '*.txt'), recursive=True):\n        # Convert the absolute file path to a relative path using the .relpath() function from the os module.\n        relative_file_path = os.path.relpath(file_path, start=dir_path)\n\n        with open(file_path, \"r\") as file:\n            content = file.read()\n            error_count = len(re.findall(r'\\berror\\b', content, re.IGNORECASE))\n            file_counts[relative_file_path] = error_count\n    return file_counts", "compilation_passed": true, "time": 0.004637956619262695, "tests_passed": true, "error": null}
{"code": "try:\n        os.chdir(dir_path)\n        result = {}\n        for file_path in glob.glob('**/*.txt', recursive=True):\n            count = 0\n            with open(file_path, \"r\", encoding=\"utf-8\") as f:\n                for line in f:\n                    count += len(re.findall(r'\\berror\\b', line, flags=re.IGNORECASE))\n            result[os.path.relpath(file_path)] = count\n    except FileNotFoundError:\n        raise ValueError(\"directory does not exist.\")\n    return result", "compilation_passed": true, "time": 0.005171060562133789, "tests_passed": true, "error": null}
{"code": "if not os.path.isdir(dir_path):\n        raise ValueError('Directory in dir_path does not exist!')\n    file_list = glob.glob(f'{dir_path}/**/*.txt', recursive=True)\n    result_dict = {}\n    for file in file_list:\n        with open(file, 'r') as f:\n            content = f.read()\n            pattern = re.compile(r'\\b(error)\\b', flags=re.IGNORECASE)\n            matches = re.findall(pattern, content)\n            result_dict[os.path.relpath(file, dir_path)] = len(matches)\n    return result_dict", "compilation_passed": true, "time": 0.00503993034362793, "tests_passed": true, "error": null}
{"code": "try:\n        if os.path.isdir(dir_path):\n            pass\n        else:\n            raise ValueError('Directory in dir_path does not exist')\n    except ValueError:\n        print('ValueError: Directory in dir_path does not exist')\n    else:\n        regex_pattern = r\"\\berror\\b\"\n        file_counts = {}\n        text_files = glob.glob(f\"{dir_path}/**/*.txt\", recursive=True)\n        for file in text_files:\n            with open(file, \"r\") as f:\n                count = 0\n                for line in f:\n                    count += len(re.findall(regex_pattern, line, flags=re.IGNORECASE))\n                if count > 0:\n                    relative_path = os.path.relpath(file, dir_path)\n                    file_counts[relative_path] = count\n        return file_counts", "compilation_passed": true, "time": 0.004015922546386719, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(dir_path):\n        raise ValueError(\"Directory in dir_path does not exist.\")\n\n    # Search for all \".txt\" files in the directory and its subdirectories\n    files_glob = glob.glob(f\"{dir_path}/**/*.txt\", recursive=True)\n\n    # Initialize a dictionary to store the relative file paths and counts of\n    # occurrences of the word \"error\"\n    count_dict = {}\n\n    # Iterate over each file\n    for file in files_glob:\n        # Read the file and split the lines into a list\n        with open(file, \"r\") as f:\n            lines = f.read().splitlines()\n\n        # Iterate over each line in the file\n        for line in lines:\n            # Count the number of occurrences of the word \"error\" (case\n            # insensitive) in the line and add to the count_dict\n            count_dict[os.path.relpath(file, dir_path)] = len(\n                re.findall(r\"\\berror\\b\", line", "compilation_passed": false, "time": 0.00018596649169921875, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not os.path.exists(dir_path):\n        raise ValueError(\"Directory does not exist.\")\n\n    # Set the directory path for searching text files\n    os.chdir(dir_path)\n\n    # Fetch all text file paths in the directory and its subdirectories\n    file_paths = glob.glob('**/*.txt', recursive=True)\n\n    # Dictionary to store the count of the word \"error\" in each file\n    count_dict = {}\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            # Read the file content\n            content = f.read()\n\n            # Count the occurrences of the word \"error\" in the file content\n            count = re.subn(r'\\berror\\b', 'error', content, flags=re.IGNORECASE)[1]\n\n            # Store the count in the dictionary\n            count_dict[os.path.relpath(file_path, dir_path)] = count\n\n    # Return the dictionary with the count of the word \"error\" in each file", "compilation_passed": true, "time": 0.0018680095672607422, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(dir_path):\n        raise ValueError(\"The specified directory does not exist.\")\n\n    # Find all text files in the directory and subdirectories\n    file_paths = glob.glob(dir_path + \"/**/*.txt\", recursive=True)\n\n    result_dict = {}\n    for file in file_paths:\n        with open(file, \"r\", encoding=\"utf-8\") as f:\n            # Read the file as one string\n            file_content = f.read()\n            # Use regex to find the word \"error\" and count its occurrences\n            count = len(re.findall(r\"\\berror\\b\", file_content, flags=re.IGNORECASE))\n            if count > 0:\n                result_dict[os.path.relpath(file, dir_path)] = count\n\n    return result_dict", "compilation_passed": true, "time": 0.004033088684082031, "tests_passed": true, "error": null}
{"code": "if not os.path.isdir(dir_path):\n        raise ValueError(\"Directory in dir_path does not exist.\")\n\n    # Create a dictionary to store the word counts for each file\n    file_counts = {}\n\n    # Get a list of all text files in the directory and its subdirectories\n    text_files = glob.glob(os.path.join(dir_path, \"**\", \"*.txt\"), recursive=True)\n\n    for file in text_files:\n        # Get the relative file path\n        relative_path = os.path.relpath(file, dir_path)\n        # Count the occurrences of the word \"error\" in each file\n        # This pattern will also match \"ERROr\" as \"error\" is case insensitive.\n        count = len(re.findall(r'\\berror\\b', open(file).read().lower()))\n        file_counts[relative_path] = count\n    return file_counts", "compilation_passed": true, "time": 0.005006074905395508, "tests_passed": true, "error": null}
{"code": "# Check if directory in dir_path exists\n    if not os.path.exists(dir_path):\n        raise ValueError(\"Directory does not exist.\")\n\n    # Initialize an empty dictionary\n    result_dict = dict()\n\n    # Iterate over all text file paths in the directory and its subdirectories\n    for filepath in glob.glob(dir_path + '/**/*.txt', recursive=True):\n        # Open the text file in reading mode\n        with open(filepath, 'r') as file:\n            # Read all lines from the file\n            file_content = file.readlines()\n\n            # Get the relative file path without the directory path\n            relative_filepath = os.path.relpath(filepath, dir_path)\n\n            # Iterate over each line in the file\n            for line in file_content:\n                # Search for occurrences of the word \"error\" in the line using regex\n                error_list = re.findall('\\berror\\b', line, re.IGNORECASE)\n                if error_list:  # Check if any matches were found\n", "compilation_passed": false, "time": 0.00017905235290527344, "tests_passed": false, "error": "IndentationError"}
{"code": "if not os.path.exists(dir_path):\n        raise ValueError(\"The directory does not exist.\")\n\n    pattern = r'\\berror\\b'\n    text_files = glob.glob(os.path.join(dir_path, '**/*.txt'), recursive=True)\n    occurrences = {}\n\n    for text_file in text_files:\n        with open(text_file, 'r') as file:\n            content = file.read()\n            relative_path = os.path.relpath(text_file, dir_path)\n            match = re.findall(pattern, content, re.IGNORECASE)\n            if match:\n                occurrences[relative_path] = len(match)\n\n    return occurrences", "compilation_passed": true, "time": 0.005026102066040039, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(dir_path):\n        raise ValueError(\"Directory does not exist\")\n\n    # use glob to find all text files in the directory and its subdirectories\n    text_files = glob.glob(os.path.join(dir_path, \"**\", \"*.txt\"), recursive=True)\n\n    # compile the regular expression to be used for matching\n    pattern = re.compile(r\"\\berror\\b\", re.IGNORECASE)\n\n    # iterate over the text files and count the occurrences of \"error\"\n    error_counts = {}\n    for file_path in text_files:\n        with open(file_path, \"r\") as f:\n            contents = f.read()\n            count = len(pattern.findall(contents))\n            if count > 0:\n                error_counts[os.path.relpath(file_path, dir_path)] = count\n\n    return error_counts", "compilation_passed": true, "time": 0.004274129867553711, "tests_passed": true, "error": null}
{"code": "# .: Matches any character\n    # *: Matches zero or more repetitions of the preceding RE.\n    # ?: Matches zero or one of the preceding RE\n    if not os.path.exists(dir_path):\n        raise ValueError(\"Directory does not exist\")\n\n    txt_files = glob.glob(f\"{dir_path}/**/*.txt\", recursive=True)\n    pattern = re.compile(r'error', re.IGNORECASE)\n\n    results = {}\n    for file_path in txt_files:\n        with open(file_path, \"r\") as f:\n            content = f.read()\n            match = re.findall(pattern, content)\n            results[os.path.relpath(file_path, dir_path)] = len(match)\n\n    return results", "compilation_passed": true, "time": 0.004014015197753906, "tests_passed": true, "error": null}
{"code": "# Check if directory in dir_path exists\n    if not os.path.isdir(dir_path):\n        raise ValueError(\"Directory does not exist\")\n    # Define the regex pattern\n    pattern = re.compile(r'\\berror\\b', re.IGNORECASE)\n    # Initialize a dictionary to store the counts\n    counts = {}\n    # Retrieve the file paths\n    text_file_paths = glob.glob(dir_path + \"/**/*.txt\", recursive=True)\n    for text_file in text_file_paths:\n        # Get the relative file path\n        relative_file_path = os.path.relpath(text_file, dir_path)\n        with open(text_file, 'r') as f:\n            # Read the text and find the pattern\n            text = f.read()\n            found = pattern.findall(text)\n            # Update the counts dictionary\n            counts[relative_file_path] = len(found)\n    return counts", "compilation_passed": true, "time": 0.0054929256439208984, "tests_passed": true, "error": null}
{"code": "if not os.path.isdir(dir_path):\n        raise ValueError(\"Invalid directory in dir_path\")\n\n    # Find all text files in the directory and its subdirectories\n    file_paths = glob.glob(os.path.join(dir_path, '**/*.txt'), recursive=True)\n\n    results = {}\n\n    # Regex pattern to match the word \"error\" (case-insensitive)\n    pattern = re.compile(r'\\berror\\b', re.IGNORECASE)\n\n    for file_path in file_paths:\n        # Get the relative path by removing the initial directory path\n        relative_path = os.path.relpath(file_path, dir_path)\n\n        with open(file_path, 'r') as file:\n            content = file.read()\n            # Use the pattern to search for occurrences of the word \"error\"\n            occurrences = re.findall(pattern, content)\n\n        # Count the number of occurrences\n        count = len(occurrences)\n\n        # Store the count in the dictionary with relative", "compilation_passed": true, "time": 0.0025641918182373047, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(dir_path):\n        raise ValueError(\"Directory does not exist.\")\n\n    count_dict = {}\n    pattern = r'\\berror\\b'\n    for txt_file in glob.glob(f\"{dir_path}/**/*.txt\", recursive=True):\n        with open(txt_file, \"r\") as f:\n            content = f.read()\n            count_dict[os.path.relpath(txt_file, dir_path)] = len(re.findall(\n                pattern, content, re.IGNORECASE))\n    return count_dict", "compilation_passed": true, "time": 0.004746913909912109, "tests_passed": true, "error": null}
{"code": "# Check if the directory exists\n    if not os.path.exists(dir_path):\n        raise ValueError(\"Directory does not exist\")\n\n    # Get all text files in the directory and its subdirectories\n    file_paths = glob.glob(f'{dir_path}/**/*.txt', recursive=True)\n\n    # Regex pattern to match the word \"error\"\n    pattern = re.compile(r\"\\berror\\b\", re.IGNORECASE)\n\n    # Initialize dictionary to store counts of \"error\" occurrences\n    error_counts = {}\n\n    # Loop through each file and count occurrences of \"error\"\n    for file_path in file_paths:\n        # Get relative file path by removing the directory path from file_path\n        rel_file_path = os.path.relpath(file_path, dir_path)\n\n        # Check if the file is a file (not a directory)\n        if os.path.isfile(file_path):\n            with open(file_path, 'r') as f:\n                # Read file content and count occurrences of the pattern", "compilation_passed": false, "time": 0.0001628398895263672, "tests_passed": false, "error": "IndentationError"}
{"code": "# Check if the directory exists\n    if not os.path.isdir(dir_path):\n        raise ValueError(\"Directory does not exist.\")\n\n    # Initialize a dictionary to store the counts\n    counts_per_file = {}\n\n    # Set the pattern to search for\n    pattern = r\"\\berror\\b\"\n\n    # Fetch all text file paths in the directory\n    txt_files = glob.glob(os.path.join(dir_path, '**/*.txt'), recursive=True)\n\n    # Iterate over each text file\n    for file_path in txt_files:\n        # Open the file and count the occurrences of the pattern\n        with open(file_path, \"r\") as file:\n            contents = file.read()\n            count = len(re.findall(pattern, contents, re.IGNORECASE))\n\n        # Store the count in the dictionary\n        counts_per_file[os.path.relpath(file_path, start=dir_path)] = count\n\n    return counts_per_file", "compilation_passed": true, "time": 0.005092144012451172, "tests_passed": true, "error": null}
{"code": "# Check if directory exists\n    if not os.path.exists(dir_path):\n        raise ValueError(\"Directory does not exist.\")\n\n    # Get all .txt files in directory and subdirectories\n    # Note: os.path.join() will convert slashes in path correctly\n    all_txt_files = glob.glob(os.path.join(dir_path, \"**\", \"*.txt\"),\n                              recursive=True)\n\n    # Regex pattern to search for the word \"error\"\n    pattern = re.compile(r'\\berror\\b', re.IGNORECASE)\n\n    # Loop over all file paths and count number of occurrences\n    # of \"error\" per file\n    file_counts = {}\n    for file_path in all_txt_files:\n        with open(file_path, 'r') as file:\n            file_data = file.read()\n            count = len(pattern.findall(file_data))\n            # Note: os.path.relpath() will give correct result also for \n            # paths that start with \"", "compilation_passed": true, "time": 0.002232789993286133, "tests_passed": true, "error": null}
{"code": "# Check if directory exists\n    if not os.path.isdir(dir_path):\n        raise ValueError(\"Directory does not exist\")\n\n    # Initialize empty dictionary\n    count_dict = {}\n\n    # Get all files with the .txt extension in the directory and its subdirs\n    text_files = glob.glob(f\"{dir_path}/**/*.txt\", recursive=True)\n\n    # Create pattern object using re library for \"error\"\n    pattern = re.compile(r\"error\", re.IGNORECASE)\n\n    for file_path in text_files:\n        # Get relative file path with os library\n        relative_file_path = os.path.relpath(file_path, dir_path)\n        with open(file_path, \"r\") as file:\n            # Read file content and find all occurrences of pattern\n            content = file.read()\n            matches = pattern.findall(content)\n            # Update dictionary with count of occurrences as value\n            count_dict[relative_file_path] = len(matches)\n\n    return count_dict", "compilation_passed": true, "time": 0.003793954849243164, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(dir_path):\n        raise ValueError(f\"Directory {dir_path} does not exist\")\n    matches = {}\n    for filename in glob.glob(dir_path + \"**/*.txt\", recursive=True):\n        with open(filename, \"r\") as file:\n            contents = file.read()\n            count = len(re.findall(r\"\\berror\\b\", contents, re.IGNORECASE))\n            matches[os.path.relpath(filename, dir_path)] = count\n    return matches", "compilation_passed": true, "time": 0.004869222640991211, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(dir_path):\n        raise ValueError(f\"Directory '{dir_path}' not found.\")\n\n    file_paths = glob.glob(os.path.join(dir_path, \"**\", \"*.txt\"), recursive=True)\n    result = {}\n    pattern = re.compile(r'\\berror\\b', re.IGNORECASE)\n\n    for path in file_paths:\n        with open(path, 'r') as file:\n            count = len(pattern.findall(file.read()))\n            result[os.path.relpath(path, dir_path)] = count\n\n    return result", "compilation_passed": true, "time": 0.005084037780761719, "tests_passed": true, "error": null}
{"code": "# Check if the specified directory exists\n    if not os.path.exists(dir_path):\n        raise ValueError(f\"Directory {dir_path} not found!\")\n\n    # Get all text file paths\n    file_paths = glob.glob(os.path.join(dir_path, \"**\", \"*.txt\"), recursive=True)\n\n    # Dictionary to store file paths and the count of the word \"error\"\n    result_dict = {}\n\n    for file_path in file_paths:\n        # Open file in read mode\n        with open(file_path, \"r\") as file:\n            # Read the file content\n            content = file.read()\n\n            # Extract the relative file path by removing the base directory\n            rel_file_path = os.path.relpath(file_path, dir_path)\n\n            # Count the occurrences of the word \"error\" (case-insensitive)\n            result_dict[rel_file_path] = len(re.findall(r\"\\berror\\b\", content, re.IGNORECASE))\n", "compilation_passed": true, "time": 0.0018880367279052734, "tests_passed": true, "error": null}
{"code": "try:\n        os.chdir(dir_path)\n        path_to_file_txt_list = glob.glob('**/*.txt', recursive=True)\n        dictionary = dict()\n        for path_to_file in path_to_file_txt_list:\n            with open(path_to_file, 'r') as f:\n                content = f.read()\n                count = len(re.findall(r'error', content, flags=re.IGNORECASE))\n                if count > 0:\n                    dictionary[path_to_file] = count\n        return dictionary\n    except FileNotFoundError:\n        raise ValueError(\"The directory does not exist.\")", "compilation_passed": true, "time": 0.00379180908203125, "tests_passed": true, "error": null}
{"code": "if not os.path.isdir(dir_path):\n        raise ValueError(\"Directory in dir_path does not exist.\")\n    # Find all text files (with extension \".txt\") in the specified directory \n    # and its subdirectories\n    txt_files = glob.glob(os.path.join(dir_path, \"**\", \"*.txt\"), \n                          recursive=True)\n    results = {}\n    for txt_file in txt_files:\n        with open(txt_file, 'r') as f:\n            # Read the file and convert it to lowercase for case-insensitive\n            # search\n            content = f.read().lower()\n            # Use regex to find the number of occurrences of \"error\"\n            match = re.findall('error', content)\n            count = len(match)\n            # Store the count in the results dictionary, with the relative \n            # file path as the key\n            results[os.path.relpath(txt_file, dir_path)] = count\n    return results", "compilation_passed": true, "time": 0.0040891170501708984, "tests_passed": true, "error": null}
