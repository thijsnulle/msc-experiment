{"code": "df = pd.DataFrame(data)\n    normalized_df = df.copy()\n    normalized_df[columns] = MinMaxScaler().fit_transform(normalized_df[columns])\n    return normalized_df", "compilation_passed": true, "time": 0.006289958953857422, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame.from_dict(data)\n    scaler = MinMaxScaler()\n    for column in columns:\n        df[column] = scaler.fit_transform(df[[column]])\n    return df", "compilation_passed": true, "time": 0.0066070556640625, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(data)\n    selected = df[columns]\n    scaler = MinMaxScaler()\n    normalized = scaler.fit_transform(selected.values)\n    df[columns] = normalized\n    return df", "compilation_passed": true, "time": 0.0032749176025390625, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(data)\n    scaler = MinMaxScaler()\n    df[columns] = scaler.fit_transform(df[columns])\n    return df", "compilation_passed": true, "time": 0.005686044692993164, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(data)\n    normalized_df = df.copy()\n    scaler = MinMaxScaler()\n    normalized_df[columns] = scaler.fit_transform(df[columns])\n    return normalized_df", "compilation_passed": true, "time": 0.005637168884277344, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(data)\n    selected_df = df[columns]\n    scaled_df = MinMaxScaler().fit_transform(selected_df.to_numpy())\n    normalized_df = df.copy()\n    for i, column in enumerate(columns):\n        normalized_df[column] = scaled_df[:, i]\n    return normalized_df", "compilation_passed": true, "time": 0.003323078155517578, "tests_passed": true, "error": null}
{"code": "# Convert the input data into a pandas DataFrame\n    df = pd.DataFrame(data)\n\n    # Initialize a MinMaxScaler and fit it to the specified columns\n    scaler = MinMaxScaler()\n    df[columns] = scaler.fit_transform(df[columns])\n\n    # Return the new DataFrame with the normalized columns\n    return df", "compilation_passed": true, "time": 0.005445718765258789, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(data)\n    scaler = MinMaxScaler()\n    for column in columns:\n        df[column] = scaler.fit_transform(df[column].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0026717185974121094, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame.from_dict(data)\n    min_max_scaler = MinMaxScaler()\n    df[columns] = min_max_scaler.fit_transform(df[columns])\n    return df", "compilation_passed": true, "time": 0.005387067794799805, "tests_passed": true, "error": null}
{"code": "# Convert the input dictionary into a Pandas DataFrame\n    df = pd.DataFrame(data)\n\n    # Select the specified columns from the DataFrame\n    selected_df = df[columns]\n\n    # Perform normalization using MinMaxScaler from sklearn.preprocessing\n    scaler = MinMaxScaler()\n    scaled_df = scaler.fit_transform(selected_df)\n\n    # Convert the scaled matrix back to a DataFrame\n    normalized_df = pd.DataFrame(scaled_df, columns=columns, index=df.index)\n\n    # Return the normalized DataFrame\n    return normalized_df", "compilation_passed": true, "time": 0.004419088363647461, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame.from_dict(data)\n    for col in columns:\n        df[col] = MinMaxScaler().fit_transform(df[col].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0026869773864746094, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(data)\n    for col in columns:\n        if col in df.columns:\n            df[col] = MinMaxScaler().fit_transform(df[col].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.002702951431274414, "tests_passed": true, "error": null}
{"code": "# Convert the dictionary to a DataFrame\n    df = pd.DataFrame(data)\n\n    # Normalize the specified columns using min-max scaling\n    scaler = MinMaxScaler()\n    normalized = scaler.fit_transform(df[columns])\n    normalized_df = pd.DataFrame(normalized, columns=columns)\n\n    return normalized_df", "compilation_passed": true, "time": 0.003676891326904297, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame.from_dict(data)\n    columns = set(columns)\n    scaler = MinMaxScaler()\n    for column in columns:\n        df[column] = scaler.fit_transform(df[column].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.002705097198486328, "tests_passed": true, "error": null}
{"code": "# Convert the dictionary to a DataFrame\n    df = pd.DataFrame(data)\n\n    # Select the specified columns to be normalized\n    cols_to_normalize = df[columns]\n\n    # Initialize a MinMaxScaler and fit to the data\n    scaler = MinMaxScaler()\n    scaler.fit(cols_to_normalize)\n\n    # Scale the columns to be normalized\n    normalized = scaler.transform(cols_to_normalize)\n\n    # Update the original DataFrame with the normalized columns\n    for i, column in enumerate(columns):\n        df[column] = normalized[:, i]\n\n    return df", "compilation_passed": true, "time": 0.005568027496337891, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame.from_dict(data)\n    scaler = MinMaxScaler()\n    normalized = scaler.fit_transform(df[columns])\n    normalized_df = pd.DataFrame(normalized, columns=columns, index=df.index)\n    return normalized_df", "compilation_passed": true, "time": 0.003693819046020508, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(data)\n    df[columns] = MinMaxScaler().fit_transform(df[columns])\n    return df", "compilation_passed": true, "time": 0.00536799430847168, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(data)\n    for col in columns:\n        col_values = df[col].values.reshape(-1, 1)\n        scaled_col_values = MinMaxScaler().fit_transform(col_values)\n        df[col] = scaled_col_values\n    return df", "compilation_passed": true, "time": 0.002702951431274414, "tests_passed": true, "error": null}
{"code": "# Convert the data dictionary into a pandas DataFrame\n    df = pd.DataFrame.from_dict(data)\n\n    # Select the specified columns to be normalized\n    selected_df = df[columns]\n\n    # Create a MinMaxScaler object\n    scaler = MinMaxScaler()\n\n    # Normalize the selected columns between 0 and 1\n    normalized_array = scaler.fit_transform(selected_df)\n\n    # Convert the normalized array back to a DataFrame\n    normalized_df = pd.DataFrame(normalized_array, columns=columns)\n\n    # Replace the original columns in the DataFrame with the normalized values\n    df.loc[:, columns] = normalized_df\n\n    return df", "compilation_passed": true, "time": 0.007170915603637695, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame.from_dict(data)\n    selected_columns = df[columns]\n    normalized_columns = selected_columns.apply(MinMaxScaler().fit_transform)\n    normalized_df = df.copy()\n    normalized_df[columns] = normalized_columns\n    return normalized_df", "compilation_passed": true, "time": 0.0036618709564208984, "tests_passed": false, "error": "ValueError"}
{"code": "df = pd.DataFrame(data)\n\n    # Find the columns to keep and their respective indices\n    indices = [list(df.columns).index(col) for col in columns]\n\n    # Normalize the columns using MinMaxScaler and insert them into the original dataframe\n    for i, col in zip(indices, columns):\n        df.iloc[:, i] = MinMaxScaler().fit_transform(df[col].values.reshape(-1, 1))\n\n    return df", "compilation_passed": true, "time": 0.0031309127807617188, "tests_passed": true, "error": null}
{"code": "# Convert data dictionary to DataFrame\n    df = pd.DataFrame.from_dict(data)\n\n    # Extract specified columns from DataFrame\n    df_subset = df[columns]\n\n    # Normalize columns using MinMaxScaler\n    scaler = MinMaxScaler()\n    normalized_data = scaler.fit_transform(df_subset)\n\n    # Create a new DataFrame with normalized columns\n    normalized_df = pd.DataFrame(normalized_data, columns=columns, index=df.index)\n\n    # Insert normalized columns into original DataFrame\n    for col in columns:\n        df[col] = normalized_df[col]\n\n    return df", "compilation_passed": true, "time": 0.005800008773803711, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(data)\n    selected = df[columns]\n    scaler = MinMaxScaler()\n    selected[columns] = scaler.fit_transform(selected[columns])\n\n    return selected", "compilation_passed": true, "time": 0.004054069519042969, "tests_passed": true, "error": null}
{"code": "# Convert the dictionary to a pandas DataFrame\n    df = pd.DataFrame(data)\n\n    # Select the specified columns for normalization\n    columns_to_norm = df[columns]\n\n    # Perform min-max scaling\n    scaler = MinMaxScaler()\n    scaled_data = scaler.fit_transform(columns_to_norm)\n\n    # Create a new DataFrame with the normalized columns\n    normalized_df = pd.DataFrame(scaled_data, columns=columns_to_norm.columns)\n\n    # Join the normalized DataFrame with the original DataFrame\n    result = df.join(normalized_df)\n\n    # Return the resulting DataFrame\n    return result", "compilation_passed": true, "time": 0.0028121471405029297, "tests_passed": false, "error": "ValueError"}
{"code": "# Create a DataFrame from the input data\n    df = pd.DataFrame(data)\n\n    # Select the specified columns and transform them using MinMaxScaler\n    scaler = MinMaxScaler()\n    df[columns] = scaler.fit_transform(df[columns])\n\n    # Return the normalized DataFrame\n    return df", "compilation_passed": true, "time": 0.005809307098388672, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(data)\n    selected_df = df[columns]\n    scaler = MinMaxScaler()\n    normalized = scaler.fit_transform(selected_df)\n    normalized_df = pd.DataFrame(normalized, columns=columns)\n    return normalized_df", "compilation_passed": true, "time": 0.0038640499114990234, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame.from_dict(data)\n\n    scaler = MinMaxScaler()\n    df[columns] = scaler.fit_transform(df[columns].values)\n\n    return df", "compilation_passed": true, "time": 0.00310516357421875, "tests_passed": true, "error": null}
{"code": "# Convert dictionary to DataFrame\n    df = pd.DataFrame(data)\n\n    # Scale columns with MinMaxScaler\n    scaler = MinMaxScaler()\n    df[columns] = scaler.fit_transform(df[columns])\n\n    return df", "compilation_passed": true, "time": 0.005463123321533203, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(data)\n    df[columns] = MinMaxScaler().fit_transform(df[columns])\n    return df[columns]", "compilation_passed": true, "time": 0.004027843475341797, "tests_passed": true, "error": null}
{"code": "# Create a DataFrame from the data dictionary\n    df = pd.DataFrame(data)\n\n    # Select the specified columns for scaling\n    to_scale = df[columns]\n\n    # Normalize the columns using MinMaxScaler\n    scaler = MinMaxScaler()\n    normalized = pd.DataFrame(scaler.fit_transform(to_scale), index=to_scale.index, columns=to_scale.columns)\n\n    # Update the original DataFrame with the normalized columns\n    df[columns] = normalized\n\n    return df", "compilation_passed": true, "time": 0.005791902542114258, "tests_passed": true, "error": null}
