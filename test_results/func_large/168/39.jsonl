{"code": "if labels is None:\n        labels = [f\"Group{i+1}\" for i in range(num_groups)]\n\n    data = np.random.rand(data_size, num_groups)\n\n    df = pd.DataFrame(data, columns=labels)\n\n    fig, ax = plt.subplots()\n    df.plot(ax=ax, stacked=True, kind='bar')\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n\n    return fig, df, plot_filename", "compilation_passed": true, "time": 0.03188824653625488, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if labels is None:\n        labels = [f\"Group{i+1}\" for i in range(num_groups)]\n\n    data = np.random.rand(data_size, num_groups)\n    df = pd.DataFrame(data, columns=labels)\n    # Create a stacked bar chart\n    fig, ax = plt.subplots(figsize=(10, 8))\n    for i in range(num_groups):\n        ax.bar(labels, df[labels[i]], bottom=df[labels[:i]].sum(), label=labels[i])\n\n    ax.set_xlabel(\"Groups\")\n    ax.set_ylabel(\"Random Data\")\n    ax.set_title(\"Stacked Bar Chart\")\n    ax.legend()\n    fig.tight_layout()\n\n    # Save the chart to a file\n    plot_filename = \"test_plot.png\"\n    fig.savefig(plot_filename)\n\n    return fig, df, plot_filename", "compilation_passed": true, "time": 0.005488157272338867, "tests_passed": false, "error": "ValueError"}
{"code": "data = pd.DataFrame(np.random.random((data_size, num_groups)))\n    data.columns = labels or [f'Group{i + 1}' for i in range(num_groups)]\n    data.plot.barh(stacked=True)\n    fig = plt.gcf()\n    plt.savefig('test_plot.png')\n    plt.clf()\n    plot_filename = 'test_plot.png'\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.031658172607421875, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "np.random.seed(0)\n\n    # If no labels are provided, create them\n    if labels is None:\n        labels = [f\"Group{i+1}\" for i in range(num_groups)]\n\n    # Create a pandas DataFrame with random data\n    df = pd.DataFrame(np.random.rand(data_size, num_groups))\n    df.columns = labels  # Use the provided or generated labels as column names\n\n    # Create the stacked bar chart\n    fig, ax = plt.subplots()\n    df.plot(kind='barh', stacked=True, ax=ax)\n\n    # Save the plot as an image and return\n    plt.savefig('test_plot.png')\n    return fig, df, 'test_plot.png'", "compilation_passed": true, "time": 0.03112483024597168, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Validate input: Check that num_groups and data_size are positive integers.\n    if not isinstance(num_groups, int) or num_groups <= 0:\n        raise ValueError(\"num_groups should be a positive integer.\")\n    if not isinstance(data_size, int) or data_size <= 0:\n        raise ValueError(\"data_size should be a positive integer.\")\n\n    # Validate input: Ensure that the number of labels matches the number of groups.\n    if labels is not None and len(labels) != num_groups:\n        raise ValueError(\n            \"The length of labels should match the number of groups.\"\n        )\n\n    # Generate random data as a DataFrame.\n    data = pd.DataFrame(\n        np.random.randn(data_size, num_groups),\n        columns=[\n            \"Group\" + str(i + 1) if labels is None else labels[i]\n            for i in range(num_groups)\n        ],\n    )\n\n    # Normalize each row to sum to 1.\n    data", "compilation_passed": true, "time": 0.0012412071228027344, "tests_passed": false, "error": "TypeError"}
{"code": "data = np.random.rand(data_size, num_groups)\n    data_frame = pd.DataFrame(data)\n    if labels is None:\n        labels = [f'Group{i+1}' for i in range(num_groups)]\n    data_frame.columns = labels\n    data_frame.plot(kind='bar', stacked=True, title='Stacked Bar Chart')\n    plt.xlabel('Index')\n    plt.ylabel('Values')\n    plt.savefig('test_plot.png')\n\n    return plt.gcf(), data_frame, 'test_plot.png'", "compilation_passed": true, "time": 0.03763580322265625, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if labels is None:\n        labels = ['Group' + str(i + 1) for i in range(num_groups)]\n    elif len(labels) != num_groups:\n        raise ValueError(\"Number of labels must match num_groups.\")\n\n    data = np.random.rand(num_groups, data_size)\n    df = pd.DataFrame(data.T, columns=labels)\n\n    plt.figure()\n    ax = df.plot.barh(stacked=True, colormap='Dark2')\n    ax.xaxis.set_major_formatter(\n        mpl.ticker.FuncFormatter(lambda x, _: f\"{x:.0%}\"))\n    ax.set_title('Random data')\n\n    plot_filename = 'test_plot.png'\n    plt.savefig(plot_filename)\n\n    return plt.gcf(), df, plot_filename", "compilation_passed": true, "time": 0.011795997619628906, "tests_passed": false, "error": "NameError"}
{"code": "if labels is None:\n        labels = [f'Group{i+1}' for i in range(num_groups)]\n\n    # Generate random data\n    data = pd.DataFrame({label: np.random.random(data_size) for label in labels})\n\n    # Save the data to a file\n    file_name = \"data_file.txt\"\n    data.to_csv(file_name, index=False)\n    print(f\"Saved data to file {file_name}\")\n\n    # Visualize data with a stacked bar chart\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.gca()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    ax.set_xlabel('Data Index')\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n\n    # Save the plot to a file\n    plot_filename = 'test_plot.png'\n    plt.savefig(plot_filename, dpi=300)\n    print(f\"Saved plot to", "compilation_passed": false, "time": 0.00014591217041015625, "tests_passed": false, "error": "SyntaxError"}
{"code": "if labels is None:\n        labels = ['Group{}'.format(i) for i in range(1, num_groups+1)]\n\n    np.random.seed(0)\n    data = pd.DataFrame(np.random.random((data_size, num_groups)), columns=labels)\n    data.plot.bar(stacked=True)\n    filename = 'test_plot.png'\n    plt.savefig(filename)\n    fig = plt.gcf()\n    plt.close()\n    return fig, data, filename", "compilation_passed": true, "time": 0.029292821884155273, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "filename = 'test_plot.png'\n    np.random.seed(0)  # Set a seed for reproducibility\n    if labels is None:\n        labels = ['Group{}'.format(i) for i in range(1, num_groups+1)]\n    df = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    df.plot.barh(stacked=True, alpha=0.5)  # Plot the bar chart\n    plt.savefig(filename)  # Save the plot to a file\n    plt.close()  # Close the figure\n\n    return plt.figure(), df, filename", "compilation_passed": true, "time": 0.031188011169433594, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if labels is None:\n        labels = ['Group'+str(i) for i in range(1, num_groups+1)]\n\n    df = pd.DataFrame(np.random.randn(data_size, num_groups),\n                      columns=labels)\n\n    # Set the filename and path for saving the plot\n    plot_filename = 'test_plot.png'\n\n    # Create the plot and save it\n    fig, ax = plt.subplots()\n    df.plot(ax=ax, kind='bar', stacked=True, colormap='jet')\n    fig.savefig(plot_filename)\n\n    return fig, df, plot_filename", "compilation_passed": true, "time": 0.02979302406311035, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    data = pd.DataFrame([np.random.rand(data_size) for _ in range(num_groups)]).T\n    fig, ax = plt.subplots(1, 1)\n    ax.set_xlabel(\"Groups\", fontsize=14, fontweight=\"bold\")\n    ax.set_ylabel(\"Random Data\", fontsize=14, fontweight=\"bold\")\n    ax.set_yticks(np.arange(0, 1, 0.1))\n    ax.set_yticklabels(\n        [\n            \"0\",\n            \"0.1\",\n            \"0.2\",\n            \"0.3\",\n            \"0.4\",\n            \"0.5\",\n            \"0.6\",\n            \"0.7\",\n            \"0.8\",\n            \"0.9\",\n            \"1.0\",\n        ],\n        fontsize", "compilation_passed": false, "time": 0.0002727508544921875, "tests_passed": false, "error": "SyntaxError"}
{"code": "if labels is None:\n        labels = [f\"Group{i+1}\" for i in range(num_groups)]\n    # Create random data\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    # Set the plot size\n    plt.figure(figsize=(10, 6))\n    # Create the stacked bar chart\n    plt.bar(data.index, data.iloc[:, 0], label=labels[0])\n    for i in range(1, num_groups):\n        plt.bar(data.index, data.iloc[:, i], bottom=data.iloc[:, :i].sum(axis=1), label=labels[i])\n    plt.legend()\n    plt.xlabel('Index')\n    plt.ylabel('Value')\n    plt.title('Stacked Bar Chart')\n    plt.xticks(data.index)\n    # Save the plot as an image\n    plot_filename = 'test_plot.png'\n    plt.savefig(plot_filename)\n    plt.close()", "compilation_passed": true, "time": 0.03347587585449219, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "np.random.seed(0)\n    if labels is None:\n        labels = [f\"Group{i + 1}\" for i in range(num_groups)]\n    data = pd.DataFrame(np.random.randn(data_size, num_groups), columns=labels)\n    data = data.apply(lambda x: x.abs() * 100)  # multiply by 100 to make the data more interesting\n    colors = ['r', 'g', 'b', 'm', 'y', 'c', 'o']\n    fig, ax = plt.subplots(figsize=(num_groups + 3, 4))\n    for i, label in enumerate(labels):\n        ax.bar(data.index, data[label], bottom=data.cumsum(axis=1)[i - 1] if i > 0 else 0, label=label, color=colors[i])\n    ax.set_ylabel('Distribution')\n    ax.set_xlabel('Data')\n    ax.set_title('Data distribution')\n    ax.legend(title='", "compilation_passed": false, "time": 0.0001537799835205078, "tests_passed": false, "error": "SyntaxError"}
{"code": "if labels is None:\n        labels = [f'Group{i+1}' for i in range(num_groups)]\n    assert len(labels) == num_groups, \"Number of labels must match the number of groups.\"\n\n    data = np.random.rand(data_size, num_groups)\n\n    data = pd.DataFrame(data, columns=labels)\n\n    fig, ax = plt.subplots()\n    data.plot(kind='bar', stacked=True, ax=ax)\n    plt.xlabel('Groups')\n    plt.ylabel('Values')\n    plt.title(\"Stacked Bar Chart: Grouping\")\n    plt.legend()\n    plt.xticks(rotation=0)\n    plot_filename = 'test_plot.png'\n    plt.savefig(plot_filename, bbox_inches='tight')\n\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.05585885047912598, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if labels:\n        assert len(labels) == num_groups, \"The number of labels should match the number of groups\"\n    else:\n        labels = [f\"Group{i}\" for i in range(1, num_groups + 1)]\n\n    data = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n    data = data / data.sum(axis=1)  # normalize to sum to 1\n\n    fig, ax = plt.subplots(figsize=(10, 6))\n    ax.stackplot(np.arange(data_size), data.T, alpha=0.9, labels=labels)\n    ax.legend(loc='center left', bbox_to_anchor=(0, -0.2))\n    ax.xaxis.set_major_locator(ticker.MaxNLocator(integer=True))\n    plt.title(\"Stacked Bar Chart\")\n    plt.xticks(rotation=45)\n\n    plt.savefig('test_plot.png')\n    plt.close(fig", "compilation_passed": false, "time": 0.00032830238342285156, "tests_passed": false, "error": "SyntaxError"}
{"code": "if labels is None:\n        labels = ['Group{}'.format(i) for i in range(1, num_groups + 1)]\n    data = np.random.rand(num_groups, data_size)  # Generate random data\n    data = np.cumsum(data, axis=0)  # Cumulative sum along the rows\n    df = pd.DataFrame(data=data, columns=[f\"{labels[i]}\" for i in range(len(labels))])\n    fig, ax = plt.subplots(figsize=(12, 8))\n    df.plot(kind='bar', stacked=True, ax=ax)  # Plot the stacked bar chart\n    fig.savefig('test_plot.png')  # Save the plot to a file\n    return fig, df, 'test_plot.png'", "compilation_passed": true, "time": 0.0015082359313964844, "tests_passed": false, "error": "ValueError"}
{"code": "if not labels:\n        labels = ['Group{}'.format(i+1) for i in range(num_groups)]\n    elif len(labels) != num_groups:\n        raise ValueError('Number of labels must match number of groups')\n\n    # Generate random data\n    df = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n\n    # Set the figure size\n    plt.figure(figsize=(10, 6))\n\n    # Create the stacked bar chart\n    df.plot.barh(stacked=True, legend=False)\n    plt.legend(loc='right')\n    plt.xlabel('Data Size')\n\n    # Set the title based on the number of groups\n    if num_groups == 5:\n        plt.title('Five Different Groups')\n    elif num_groups == 10:\n        plt.title('Ten Different Groups')\n    else:\n        plt.title('{} Different Groups'.format(num_groups))\n\n    # Save the plot to a file\n    plt.savefig('test_plot.", "compilation_passed": false, "time": 0.00010800361633300781, "tests_passed": false, "error": "SyntaxError"}
{"code": "if labels is None:\n        labels = ['Group'+str(i) for i in range(1, num_groups+1)]\n    df = pd.DataFrame(np.random.rand(data_size, num_groups), columns=labels)\n\n    # Define plot labels\n    x_label = 'Groups'  # X-axis label\n    y_label = 'Data Distribution'  # Y-axis label\n    title = 'Stacked Bar Chart'  # Plot title\n\n    # Create the stacked bar chart\n    ax = df.plot(kind='bar', stacked=True)\n    ax.set_xlabel(x_label)\n    ax.set_ylabel(y_label)\n    ax.set_title(title)\n    plt.savefig('test_plot.png', format='png')\n\n    return ax.figure, df, 'test_plot.png'", "compilation_passed": true, "time": 0.03430604934692383, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if labels is None:\n        labels = [\"Group\" + str(i) for i in range(1, num_groups + 1)]\n\n    data = np.random.random((data_size, num_groups))\n\n    data = pd.DataFrame(data, columns=labels)\n\n    fig, ax = plt.subplots(figsize=(10, 6))\n    colors = plt.cm.viridis(np.linspace(0, 1, num_groups))\n    for i in range(num_groups):\n        ax.bar(labels, data.iloc[:, i], label=labels[i], bottom=data.iloc[:, :i].sum(axis=1), color=colors[i])\n\n    ax.set_xlabel(\"Groups\")\n    ax.set_ylabel(\"Data\")\n    ax.legend()\n\n    plt.savefig(\"test_plot.png\")\n\n    return fig, data, \"test_plot.png\"", "compilation_passed": true, "time": 0.005916118621826172, "tests_passed": false, "error": "ValueError"}
{"code": "# Generate random data\n    data = np.random.rand(data_size, num_groups)\n\n    # Generate default group labels if none are provided\n    if labels is None:\n        labels = [f\"Group{i}\" for i in range(1, num_groups + 1)]\n\n    # Create a DataFrame from the data and labels\n    df = pd.DataFrame(data, columns=labels)\n\n    # Create a stacked bar chart\n    fig, ax = plt.subplots()\n    ax.stackplot(np.arange(data_size), df.T.values, labels=df.columns)\n    ax.legend()\n    ax.set_title(\"Stacked Bar Chart\")\n    fig.tight_layout()\n\n    # Save the chart as a file\n    plot_filename = \"test_plot.png\"\n    fig.savefig(plot_filename)\n\n    # Return the figure, dataframe, and plot filename\n    return fig, df, plot_filename", "compilation_passed": true, "time": 0.05938005447387695, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Generate random data\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    data = pd.DataFrame(np.random.random((data_size, num_groups)), columns=labels)\n\n    # Visualize the data with a stacked bar chart\n    fig, ax = plt.subplots(figsize=(10, 6))\n    data.plot.barh(stacked=True, ax=ax)\n    ax.set_title('Stacked Bar Chart')\n    ax.set_ylabel('Index')\n    ax.set_xlabel('Value')\n    ax.set_yticklabels(range(data_size))\n\n    # Save the plot to a file\n    plot_filename = 'test_plot.png'\n    plt.savefig(plot_filename)\n\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.0372159481048584, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if labels is None:\n        labels = [f'Group{i}' for i in range(1, num_groups + 1)]\n\n    data_array = np.random.rand(data_size, num_groups)\n    data = pd.DataFrame(data_array, columns=labels)\n\n    # Create the plot\n    fig, ax = plt.subplots()\n    for i in range(data_size):\n        ax.bar(labels, data.iloc[i].values, bottom=np.sum(data.iloc[:i].values, axis=0), align='center')\n\n    ax.set_ylabel('Y-axis')\n    ax.set_title('Stacked Bar Chart')\n\n    plot_filename = 'test_plot.png'\n    plt.savefig(plot_filename)\n    plt.show()\n\n    return fig, data, plot_filename", "compilation_passed": true, "time": 0.026530027389526367, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Generate random data for the given number of groups and data size\n    df = pd.DataFrame(np.random.rand(data_size, num_groups),\n                      columns=labels if labels else [f'Group{i+1}' for i in range(num_groups)])\n\n    # Create a stacked bar chart and save it to a file\n    fig, ax = plt.subplots(figsize=(16, 8))\n    df.plot(kind='barh', stacked=True, ax=ax)\n    plt.savefig('test_plot.png')\n\n    return fig, df, 'test_plot.png'", "compilation_passed": true, "time": 0.03419303894042969, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    data_points = np.random.rand(num_groups, data_size)\n    data = pd.DataFrame(data=data_points, columns=labels)\n    fig, ax = plt.subplots()\n    ax.bar(labels, data[labels[0]], label=labels[0])\n    for i in range(1, len(labels)):\n        ax.bar(labels, data[labels[i]], bottom=data[labels[:i]].sum(axis=1), label=labels[i])\n    ax.set_xlabel('Groups')\n    ax.set_ylabel('Data')\n    ax.set_title('Stacked Bar Plot')\n    ax.legend()\n    fig.savefig('test_plot.png')\n    return fig, data, 'test_plot.png'", "compilation_passed": true, "time": 0.0020771026611328125, "tests_passed": false, "error": "ValueError"}
{"code": "if labels is None:\n        labels = ['Group{}'.format(i+1) for i in range(num_groups)]\n    data = np.random.randn(data_size, num_groups)\n    data_frame = pd.DataFrame(data=data, columns=labels)\n    fig, ax = plt.subplots()\n    ax.stackplot(data_frame.index, data_frame.T.values, labels=labels)\n    ax.legend(loc='upper left')\n    ax.set_title('Stacked Bar Chart')\n    ax.set_xlabel('Data Index')\n    ax.set_ylabel('Data Values')\n    fig.tight_layout()\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename, format='png', dpi=300)\n    plt.close(fig)\n    return fig, data_frame, plot_filename", "compilation_passed": true, "time": 0.06508898735046387, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if labels is None:\n        labels = [f\"Group{i+1}\" for i in range(num_groups)]\n    elif len(labels) != num_groups:\n        raise ValueError(\"Number of labels should match the number of groups.\")\n\n    df = pd.DataFrame(\n        {label: np.random.rand(data_size) for label in labels}\n    )\n    filename = \"test_plot.png\"\n    df.plot(kind=\"bar\", stacked=True)\n    plt.savefig(filename)\n    plt.close()\n    return plt.figure(), df, filename", "compilation_passed": true, "time": 0.03186798095703125, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "filename = 'test_plot.png'\n    np.random.seed(0)\n\n    if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    elif len(labels) != num_groups:\n        raise ValueError('Length of `labels` must match the number of groups.')\n\n    data = pd.DataFrame([np.random.random(num_groups) for _ in range(data_size)], columns=labels)\n    data = data / data.sum(axis=1).values[:, np.newaxis]  # normalize to 1\n    data.plot.barh(stacked=True, legend=False)\n\n    plt.axis('tight')\n    plt.axis('scaled')\n    plt.savefig(filename)\n\n    return plt.gcf(), data, filename", "compilation_passed": true, "time": 0.025276899337768555, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if labels is None:\n        labels = [f'Group{i + 1}' for i in range(num_groups)]\n    elif len(labels) != num_groups:\n        raise ValueError(\"Length of 'labels' must match 'num_groups'\")\n\n    data = np.random.rand(data_size, num_groups)\n    data_df = pd.DataFrame(data, columns=labels)\n\n    fig, ax = plt.subplots()\n    data_df.plot(\n        kind='bar',\n        stacked=True,\n        ax=ax,\n        colormap='Dark2'\n    )\n    ax.set_xlabel('')\n    ax.set_ylabel('Probabilities')\n    plot_filename = 'test_plot.png'\n    plt.savefig(plot_filename)\n    plt.close(fig)\n    return fig, data_df, plot_filename", "compilation_passed": true, "time": 0.029494762420654297, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if labels is None:\n        labels = [f\"Group{i+1}\" for i in range(num_groups)]\n\n    # Generate data for each group\n    data = []\n    for i in range(num_groups):\n        data.append(np.random.random(data_size))\n\n    # Create DataFrame from the data\n    df = pd.DataFrame(np.row_stack(data), columns=labels)\n\n    # Visualize the data with a stacked bar chart\n    fig, ax = plt.subplots()\n    df.plot(kind='bar', stacked=True, ax=ax)\n    ax.set_xlabel('Data')\n    ax.set_ylabel('Value')\n    ax.set_title('Stacked Bar Chart')\n\n    # Save the plot to a file\n    plot_filename = 'test_plot.png'\n    fig.savefig(plot_filename)\n\n    return fig, df, plot_filename", "compilation_passed": true, "time": 0.0014629364013671875, "tests_passed": false, "error": "ValueError"}
