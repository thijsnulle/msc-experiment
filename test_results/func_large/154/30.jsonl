{"code": "matches = []\n    for root, dirnames, filenames in os.walk(directory):\n        for filename in fnmatch.filter(filenames, file_pattern):\n            if filename.endswith(suffix):\n                matches.append(os.path.join(root, filename))\n\n    result = {}\n    for file in matches:\n        file_type = mimetypes.guess_type(file)\n        result[os.path.basename(file)] = file_type[0]\n\n    return result", "compilation_passed": true, "time": 0.0012023448944091797, "tests_passed": true, "error": null}
{"code": "result = {}\n    for file in glob.glob(os.path.join(directory, file_pattern)):\n        if file.endswith(suffix):\n            mime_type = mimetypes.guess_type(file)[0]\n            if mime_type:\n                result[os.path.basename(file)] = mime_type\n    return result", "compilation_passed": true, "time": 0.0011258125305175781, "tests_passed": true, "error": null}
{"code": "regex = re.compile(file_pattern)\n    files = glob.glob(os.path.join(directory, file_pattern))\n    matching_files = [file for file in files if regex.match(os.path.basename(file)) and file.endswith(suffix)]\n    file_types = {}\n    for file in matching_files:\n        mime_type = mimetypes.guess_type(file)[0]\n        if mime_type:\n            file_types[os.path.basename(file)] = mime_type\n    return file_types", "compilation_passed": true, "time": 0.0014541149139404297, "tests_passed": false, "error": "re.error"}
{"code": "matching_files = glob.glob(os.path.join(directory, file_pattern))\n    matching_files = [file for file in matching_files if file.endswith(suffix)]\n    matching_files = [os.path.basename(file) for file in matching_files]\n\n    file_types = {}\n    for file in matching_files:\n        file_types[file] = mimetypes.guess_type(file)[0]\n\n    return file_types", "compilation_passed": true, "time": 0.0011410713195800781, "tests_passed": true, "error": null}
{"code": "file_pattern = re.compile(file_pattern)\n    files = [f for f in glob.glob(os.path.join(directory, file_pattern.pattern)) if os.path.isfile(f) and f.endswith(suffix)]\n    file_types = {os.path.basename(f): mimetypes.guess_type(f)[0] for f in files}\n    return file_types", "compilation_passed": true, "time": 0.0013837814331054688, "tests_passed": false, "error": "re.error"}
{"code": "mime_dict = {}\n    for file in glob.glob(os.path.join(directory, file_pattern)):\n        if suffix in file and os.path.exists(file) and os.path.isfile(file):\n            mime_type = mimetypes.guess_type(file)[0]\n            mime_dict[os.path.basename(file)] = mime_type\n    return mime_dict", "compilation_passed": true, "time": 0.0011358261108398438, "tests_passed": true, "error": null}
{"code": "mime_types = {}\n\n    # Generate all files matching the pattern in the directory\n    file_list = glob.glob(os.path.join(directory, file_pattern))\n\n    # Iterate through each file and check if it matches the suffix\n    for file_path in file_list:\n        if file_path.endswith(suffix):\n            file_name = os.path.basename(file_path)\n            mime_type = mimetypes.guess_type(file_path)[0]\n            mime_types[file_name] = mime_type\n\n    return mime_types", "compilation_passed": true, "time": 0.0010890960693359375, "tests_passed": true, "error": null}
{"code": "mime_types = {}\n    for file_name in glob.glob(os.path.join(directory, file_pattern)):\n        if file_name.endswith(suffix):\n            file_type = mimetypes.guess_type(file_name)[0]\n            mime_types[file_name] = file_type\n    return mime_types", "compilation_passed": true, "time": 0.0010700225830078125, "tests_passed": true, "error": null}
{"code": "result_dict = {}\n    for file in glob.glob(os.path.join(directory, file_pattern)):\n        if file.endswith(suffix):\n            mimetype, encoding = mimetypes.guess_type(file)\n            if mimetype:\n                result_dict[os.path.basename(file)] = mimetype\n    return result_dict", "compilation_passed": true, "time": 0.0012421607971191406, "tests_passed": true, "error": null}
{"code": "# Initialize empty dictionary for storing MIME types\n    mime_types = {}\n\n    # Construct the glob pattern for the file pattern\n    glob_pattern = os.path.join(directory, file_pattern)\n\n    # Use glob to find all matching files\n    matching_files = glob.glob(glob_pattern)\n\n    # Iterate through each matching file\n    for file_path in matching_files:\n        # Extract the file name from the full path\n        file_name = os.path.basename(file_path)\n\n        # Check if the file name ends with the suffix\n        if file_name.endswith(suffix):\n            # Determine the MIME type of the file\n            mime_type, encoding = mimetypes.guess_type(file_path)\n\n            # Add the file name and MIME type to the dictionary\n            mime_types[file_name] = mime_type\n\n    # Return the dictionary containing the MIME types\n    return mime_types", "compilation_passed": true, "time": 0.0011210441589355469, "tests_passed": true, "error": null}
{"code": "# Initialize empty dictionary for storing file names and their MIME types\n    file_dict = {}\n\n    # Use glob to search for files matching the pattern in the specified directory\n    file_names = glob.glob(os.path.join(directory, file_pattern))\n\n    # Iterate over each file and check if it matches the suffix and exists\n    for file in file_names:\n        if re.search(suffix, file) is not None and os.path.exists(file):\n            # Determine the file type using the mimetypes module\n            mime_type = mimetypes.guess_type(file)[0]\n\n            # Store the file name and its corresponding MIME type in the dictionary\n            file_dict[file] = mime_type\n\n    # Return the dictionary of file names and their MIME types\n    return file_dict", "compilation_passed": true, "time": 0.0011138916015625, "tests_passed": true, "error": null}
{"code": "# Set the maximum number of recursive directory levels\n    max_depth = 1000\n\n    # Create an empty dictionary to store file types\n    file_types = {}\n\n    # Create a regular expression pattern using the given pattern and suffix\n    pattern = re.compile(f\"{file_pattern}$\")\n\n    # Recursively find files that match the pattern and suffix in the directory\n    for current_dir, directories, files in os.walk(directory):\n        for file in files:\n            if pattern.match(file) and file.endswith(suffix):\n                file_path = os.path.join(current_dir, file)\n                mime_type = mimetypes.guess_type(file_path)[0]\n                file_types[file] = mime_type\n\n        max_depth -= 1\n        if max_depth == 0:\n            break\n\n    return file_types", "compilation_passed": true, "time": 0.0014190673828125, "tests_passed": false, "error": "re.error"}
{"code": "matching_files = glob.glob(os.path.join(directory, file_pattern))\n\n    file_mimes = {}\n\n    for file_path in matching_files:\n        if file_path.endswith(suffix):\n            filename = os.path.basename(file_path)\n            mime_type, _ = mimetypes.guess_type(file_path)\n            file_mimes[filename] = mime_type\n\n    return file_mimes", "compilation_passed": true, "time": 0.0010991096496582031, "tests_passed": true, "error": null}
{"code": "regex = re.compile(file_pattern)\n    files = glob.glob(os.path.join(directory, file_pattern))\n    mime_types = {}\n\n    for file in files:\n        if regex.match(file) and file.endswith(suffix):\n            file_name = os.path.basename(file)\n            file_type = mimetypes.guess_type(file)[0]\n            mime_types[file_name] = file_type\n\n    return mime_types", "compilation_passed": true, "time": 0.0013661384582519531, "tests_passed": false, "error": "re.error"}
{"code": "file_list = glob.glob(os.path.join(directory, file_pattern))\n    results = {}\n    for file_path in file_list:\n        filename = os.path.basename(file_path)\n        if filename.endswith(suffix):\n            mime_type = mimetypes.guess_type(file_path)[0]\n            if mime_type:\n                results[filename] = mime_type\n    return results", "compilation_passed": true, "time": 0.001100778579711914, "tests_passed": true, "error": null}
{"code": "pattern = re.compile(file_pattern)  # Compile the regex pattern\n    mime_types = {}\n\n    for file in os.listdir(directory):  # Iterate over all files in the directory\n        if pattern.match(file) and file.endswith(suffix):  # Check if the file matches the pattern and has the specified suffix\n            mime = mimetypes.guess_type(file)[0]  # Determine the file's MIME type\n            if mime is not None:\n                mime_types[file] = mime\n\n    return mime_types", "compilation_passed": true, "time": 0.001363992691040039, "tests_passed": false, "error": "re.error"}
{"code": "mime_dict = {}\n    if directory:\n        os.chdir(directory)\n    if suffix:\n        file_pattern += f'{suffix}.*'\n    for file in glob.glob(file_pattern):\n        mime_dict[file] = mimetypes.guess_type(file)[0]\n    return mime_dict", "compilation_passed": true, "time": 0.0012149810791015625, "tests_passed": true, "error": null}
{"code": "file_list = []\n    mime_dict = {}\n    for root, dirs, files in os.walk(directory):\n        for file in files:\n            if re.match(file_pattern, file) and file.endswith(suffix):\n                file_list.append(os.path.join(root, file))\n    for file in file_list:\n        mime_type = mimetypes.guess_type(file)[0]\n        mime_dict[os.path.basename(file)] = mime_type\n    return mime_dict", "compilation_passed": true, "time": 0.001132965087890625, "tests_passed": true, "error": null}
{"code": "file_names = glob.glob(os.path.join(directory, file_pattern))\n    file_mimes = {}\n    for file_name in file_names:\n        if file_name.endswith(suffix):\n            mime_type, encoding = mimetypes.guess_type(file_name)\n            if mime_type is not None:\n                file_mimes[os.path.basename(file_name)] = mime_type\n    return file_mimes", "compilation_passed": true, "time": 0.0010590553283691406, "tests_passed": true, "error": null}
{"code": "files = glob.glob(os.path.join(directory, file_pattern))\n    return {os.path.basename(file_path): mimetypes.guess_type(file_path)[0] for file_path in files if os.path.splitext(file_path)[1] == suffix}", "compilation_passed": true, "time": 0.001068115234375, "tests_passed": true, "error": null}
{"code": "# Create a list of all files in the directory that match the pattern\n    files = [file for file in glob.glob(os.path.join(directory, file_pattern))]\n\n    # Create a dictionary to store the file names and their MIME types\n    file_types = {}\n\n    # Loop through each file and determine its MIME type\n    for file in files:\n        # Check if the file matches the suffix\n        if re.search(suffix + '$', file):\n            # Get the file's MIME type\n            mime_type = mimetypes.guess_type(file)[0]\n            # Add the file and its MIME type to the dictionary\n            file_types[file] = mime_type\n\n    # Return the dictionary with file names and their MIME types\n    return file_types", "compilation_passed": true, "time": 0.0012080669403076172, "tests_passed": true, "error": null}
{"code": "matching_files = glob.glob(os.path.join(directory, file_pattern))\n    file_types = {}\n    for file in matching_files:\n        if file.endswith(suffix):\n            mime_type = mimetypes.guess_type(file)[0]\n            if mime_type is not None:\n                file_types[os.path.basename(file)] = mime_type\n    return file_types", "compilation_passed": true, "time": 0.001085042953491211, "tests_passed": true, "error": null}
{"code": "files = [f for f in glob.glob(os.path.join(directory, file_pattern)) if f.endswith(suffix)]\n    mime_types = {}\n    for f in files:\n        mime_type, _ = mimetypes.guess_type(f, strict=False)\n        if mime_type:\n            mime_types[os.path.basename(f)] = mime_type\n    return mime_types", "compilation_passed": true, "time": 0.001096963882446289, "tests_passed": true, "error": null}
{"code": "# Get list of all files in the specified directory\n    files = glob.glob(os.path.join(directory, file_pattern))\n\n    # Create an empty dictionary to store the results\n    mime_types = {}\n\n    # Iterate through the list of files and get their MIME type\n    for file in files:\n        if file.endswith(suffix):\n            mime_types[os.path.basename(file)] = mimetypes.guess_type(file)[0]\n\n    # Return the dictionary of file names and MIME types\n    return mime_types", "compilation_passed": true, "time": 0.0010638236999511719, "tests_passed": true, "error": null}
{"code": "mimetypes.init()\n\n    files = glob.glob(f\"{directory}/{file_pattern}\")\n    mimes = {}\n\n    for file in files:\n        if not os.path.isfile(file):\n            continue\n\n        if not suffix:\n            mime_type, _ = mimetypes.guess_type(file)\n        elif file.endswith(suffix):\n            mime_type, _ = mimetypes.guess_type(file)\n        else:\n            continue\n\n        mimes[os.path.basename(file)] = mime_type\n\n    return mimes", "compilation_passed": true, "time": 0.002351999282836914, "tests_passed": true, "error": null}
{"code": "files = glob.glob(os.path.join(directory, file_pattern))\n    file_types = {}\n    for file in files:\n        if os.path.isfile(file) and re.search(f'{suffix}$', file):\n            file_types[os.path.basename(file)] = mimetypes.guess_type(file)[0]\n    return file_types", "compilation_passed": true, "time": 0.0011239051818847656, "tests_passed": true, "error": null}
{"code": "file_list = glob.glob(os.path.join(directory, file_pattern))\n\n    mime_types = {}\n    for filename in file_list:\n        if filename.endswith(suffix):\n            mime_types[os.path.basename(filename)] = mimetypes.guess_type(filename)[0]\n\n    return mime_types", "compilation_passed": true, "time": 0.0010881423950195312, "tests_passed": true, "error": null}
{"code": "result_dict = {}\n    for file in glob.glob(os.path.join(directory, file_pattern)):\n        filename = os.path.basename(file)\n        if filename.endswith(suffix):\n            result_dict[filename] = mimetypes.guess_type(file)[0]\n    return result_dict", "compilation_passed": true, "time": 0.0010807514190673828, "tests_passed": true, "error": null}
{"code": "file_pattern = re.compile(file_pattern)\n    files = glob.glob(os.path.join(directory, file_pattern.pattern))\n    file_mimetypes = {}\n    for file in files:\n        if os.path.splitext(file)[1] == suffix:\n            mimetype = mimetypes.guess_type(file)[0]\n            file_mimetypes[os.path.basename(file)] = mimetype\n    return file_mimetypes", "compilation_passed": true, "time": 0.0013692378997802734, "tests_passed": false, "error": "re.error"}
{"code": "files = glob.glob(os.path.join(directory, file_pattern))\n    mime_types = {}\n    for f in files:\n        if f.endswith(suffix):\n            mime_type = mimetypes.guess_type(f)[0]\n            if mime_type is not None:\n                mime_types[os.path.basename(f)] = mime_type\n    return mime_types", "compilation_passed": true, "time": 0.0011057853698730469, "tests_passed": true, "error": null}
