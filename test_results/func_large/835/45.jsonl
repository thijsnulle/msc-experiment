{"code": "np.random.seed(random_seed)\n    df = pd.DataFrame(np.random.randint(low=0, high=101, size=(n_rows, len(columns))), columns=columns)\n    df.drop(df.columns[remove_cols], axis=1, inplace=True)\n    return df", "compilation_passed": true, "time": 0.002077817916870117, "tests_passed": true, "error": null}
{"code": "if random_seed:\n        np.random.seed(random_seed)\n\n    data = pd.DataFrame(np.random.randint(0, 100, size=(n_rows, len(columns))), columns=columns)\n    data.drop(data.columns[remove_cols], axis=1, inplace=True)\n\n    return data", "compilation_passed": true, "time": 0.002398967742919922, "tests_passed": true, "error": null}
{"code": "np.random.seed(random_seed)\n    df = pd.DataFrame(np.random.randint(0, 100, size=(n_rows, len(columns))), columns=columns)\n    df = df.drop(df.columns[remove_cols], axis=1)\n\n    return df", "compilation_passed": true, "time": 0.0024042129516601562, "tests_passed": true, "error": null}
{"code": "# Setting random seed if provided\n    if random_seed:\n        np.random.seed(random_seed)\n    # Creating initial DataFrame\n    df = pd.DataFrame(np.random.randint(0, 100, (n_rows, len(columns))), columns=columns)\n    # Removing columns based on indices\n    return df.drop(columns[i] for i in remove_cols)", "compilation_passed": true, "time": 0.001216888427734375, "tests_passed": false, "error": "KeyError"}
{"code": "# Set random seed\n    if random_seed is not None:\n        np.random.seed(random_seed)\n\n    # Create a dictionary with keys as column names and values as random integers\n    data = {col: np.random.randint(0, 101, size=n_rows) for col in columns}\n\n    # Create a DataFrame using the dictionary\n    df = pd.DataFrame(data)\n\n    # Drop the specified columns based on indices\n    for i in sorted(remove_cols, reverse=True):\n        df.drop(df.columns[i], axis=1, inplace=True)\n\n    return df", "compilation_passed": true, "time": 0.0018911361694335938, "tests_passed": true, "error": null}
{"code": "np.random.seed(random_seed)\n    df = pd.DataFrame(np.random.randint(low=0, high=100, size=(n_rows, len(columns))),\n                      columns=columns)\n    df = df.drop(columns=df.columns[remove_cols])\n    return df", "compilation_passed": true, "time": 0.002410888671875, "tests_passed": true, "error": null}
{"code": "np.random.seed(random_seed)\n    df = pd.DataFrame(np.random.randint(0, 100, size=(n_rows, len(columns))), columns=columns)\n    return df.drop(columns=df.columns[remove_cols])", "compilation_passed": true, "time": 0.002344846725463867, "tests_passed": true, "error": null}
{"code": "rng = np.random.default_rng(random_seed)\n    df = pd.DataFrame(rng.integers(0, 100, size=(n_rows, len(columns))), columns=columns)\n    remove_cols = [columns[i] for i in remove_cols]\n    df.drop(columns=remove_cols, inplace=True)\n    return df", "compilation_passed": true, "time": 0.0016980171203613281, "tests_passed": true, "error": null}
{"code": "np.random.seed(random_seed)\n\n    df = pd.DataFrame({col: np.random.randint(0, 101, n_rows) for col in columns})\n\n    for i in remove_cols:\n        df = df.drop(df.columns[remove_cols], axis=1)\n    return df", "compilation_passed": true, "time": 0.0011019706726074219, "tests_passed": false, "error": "IndexError"}
{"code": "if random_seed is not None:\n        np.random.seed(random_seed)\n\n    df = pd.DataFrame(np.random.randint(0, 100, size=(n_rows, len(columns))), columns=columns)\n\n    remove_cols = [c for c in columns if columns.index(c) in remove_cols]\n    df.drop(remove_cols, axis=1, inplace=True)\n\n    return df", "compilation_passed": true, "time": 0.0025148391723632812, "tests_passed": true, "error": null}
{"code": "rng = np.random.default_rng(random_seed)\n\n    df = pd.DataFrame(rng.integers(0, 100, size=(n_rows, len(columns))), columns=columns)\n\n    df = df.drop(columns=[columns[i] for i in remove_cols])\n\n    return df", "compilation_passed": true, "time": 0.0016329288482666016, "tests_passed": true, "error": null}
{"code": "np.random.seed(random_seed)\n    df = pd.DataFrame(np.random.randint(0, 100, size=(n_rows, len(columns))), columns=columns)\n    df = df.drop(columns=[columns[i] for i in remove_cols])\n    return df", "compilation_passed": true, "time": 0.002452850341796875, "tests_passed": true, "error": null}
{"code": "np.random.seed(random_seed)\n    df = pd.DataFrame(np.random.randint(0, 100, size=(n_rows, len(columns))), columns=columns)\n    df.drop(df.columns[remove_cols], axis=1, inplace=True)\n    return df", "compilation_passed": true, "time": 0.0023910999298095703, "tests_passed": true, "error": null}
{"code": "if random_seed is not None:\n        np.random.seed(random_seed)\n    df = pd.DataFrame(np.random.randint(0, 100, size=(n_rows, len(columns))), columns=columns)\n    if remove_cols:\n        return df.drop(df.columns[remove_cols], axis=1)\n    else:\n        return df", "compilation_passed": true, "time": 0.002118825912475586, "tests_passed": true, "error": null}
{"code": "np.random.seed(random_seed)\n    df = pd.DataFrame(np.random.randint(0, 100, size=(n_rows, len(columns))), columns=columns)\n    for i in remove_cols:\n        df = df.drop(columns=columns[i])\n    return df", "compilation_passed": true, "time": 0.0025780200958251953, "tests_passed": true, "error": null}
{"code": "if random_seed:\n        np.random.seed(random_seed)\n\n    df = pd.DataFrame(np.random.randint(0, 101, (n_rows, len(columns))), columns=columns)\n    df = df.drop(columns=[columns[i] for i in remove_cols])\n    return df", "compilation_passed": true, "time": 0.0019779205322265625, "tests_passed": true, "error": null}
{"code": "if random_seed is not None:\n        np.random.seed(random_seed)\n    df = pd.DataFrame(np.random.randint(0, 100, (n_rows, len(columns))), columns=columns)\n    remove_cols = [remove_col if remove_col < len(columns) else None for remove_col in remove_cols]\n    return df.drop(columns=df.columns[remove_cols])", "compilation_passed": true, "time": 0.0024557113647460938, "tests_passed": true, "error": null}
{"code": "np.random.seed(random_seed)\n    df = pd.DataFrame(np.random.randint(100, size=(n_rows, len(columns))), columns=columns)\n    df = df.drop(df.columns[remove_cols], axis=1)\n    return df", "compilation_passed": true, "time": 0.002328157424926758, "tests_passed": true, "error": null}
{"code": "# Set seed to allow for repeatability\n    if random_seed is not None:\n        np.random.seed(random_seed)\n\n    df = pd.DataFrame(np.random.randint(low=0, high=100, size=(n_rows, len(columns))), columns=columns)\n    if remove_cols:\n        df = df.drop(df.columns[remove_cols], axis=1)\n    return df", "compilation_passed": true, "time": 0.0020880699157714844, "tests_passed": true, "error": null}
{"code": "# generate a DataFrame with n_rows and columns\n    df = pd.DataFrame({column: np.random.randint(0, 100, size=n_rows, dtype=int) for column in columns})\n    # remove specified columns\n    df.drop(columns=remove_cols, axis=1, inplace=True)\n    return df", "compilation_passed": true, "time": 0.0011391639709472656, "tests_passed": false, "error": "KeyError"}
{"code": "# seed for reproducibility\n    if random_seed is not None:\n        np.random.seed(random_seed)\n\n    data = dict()\n    # fill DataFrame with random integers\n    for col in columns:\n        data[col] = np.random.randint(low=0, high=100, size=n_rows)\n\n    # create DataFrame with given number of rows and columns\n    df = pd.DataFrame(data=data)\n\n    # remove the columns\n    df.drop(remove_cols, axis=1, inplace=True)\n\n    return df", "compilation_passed": true, "time": 0.0011341571807861328, "tests_passed": false, "error": "KeyError"}
{"code": "random_seed = int(time.time()) if random_seed is None else int(random_seed)\n\n    np.random.seed(random_seed)\n    df = pd.DataFrame(np.random.randint(0, 100, size=(n_rows, len(columns))), columns=columns)\n    df.drop(df.columns[remove_cols], axis=1, inplace=True)\n    return df", "compilation_passed": true, "time": 0.002410888671875, "tests_passed": true, "error": null}
{"code": "if not isinstance(n_rows, int):\n        raise TypeError(\"n_rows must be an integer.\")\n    if not isinstance(remove_cols, list) or not all(isinstance(x, int) for x in remove_cols):\n        raise TypeError(\"remove_cols must be a list of integers.\")\n    if not isinstance(columns, list) or not all(isinstance(x, str) for x in columns):\n        raise TypeError(\"columns must be a list of strings.\")\n    if random_seed is not None and not isinstance(random_seed, int):\n        raise TypeError(\"random_seed must be an integer.\")\n    if any(idx >= len(columns) for idx in remove_cols):\n        raise ValueError(\"remove_cols contains index larger or equal to length of provided columns.\")\n    if len(set(remove_cols)) != len(remove_cols):\n        raise ValueError(\"remove_cols contains duplicates.\")\n\n    np.random.seed(random_seed)\n\n    df = pd.DataFrame({col:", "compilation_passed": false, "time": 0.0002601146697998047, "tests_passed": false, "error": "SyntaxError"}
{"code": "rng = np.random.default_rng(random_seed)\n    df = pd.DataFrame({col: rng.integers(0, 100, n_rows) for col in columns})\n    return df.drop(df.columns[remove_cols], axis=1)", "compilation_passed": true, "time": 0.0017192363739013672, "tests_passed": true, "error": null}
{"code": "np.random.seed(random_seed)\n    df = pd.DataFrame(np.random.randint(0, 100, size=(n_rows, len(columns))), columns=columns)\n    return df.iloc[:,[i for i in range(len(columns)) if i not in remove_cols]]", "compilation_passed": true, "time": 0.0023941993713378906, "tests_passed": true, "error": null}
{"code": "# Check if random_seed is an integer or None\n    if not isinstance(random_seed, int) and random_seed is not None:\n        raise TypeError(\"random_seed must be an integer or None\")\n\n    # Check if remove_cols is a list\n    if not isinstance(remove_cols, list):\n        raise TypeError(\"remove_cols must be a list\")\n\n    # Check if columns is a list\n    if not isinstance(columns, list):\n        raise TypeError(\"columns must be a list\")\n\n    # Set random_seed if provided\n    if random_seed is not None:\n        np.random.seed(random_seed)\n\n    # Generate random integers as values\n    df = pd.DataFrame(np.random.randint(0, 100, size=(n_rows, len(columns))), columns=columns)\n\n    # Remove columns based on provided indices\n    df.drop(df.columns[remove_cols], axis=1, inplace=True)\n\n    return df", "compilation_passed": true, "time": 0.0024590492248535156, "tests_passed": true, "error": null}
{"code": "np.random.seed(random_seed)\n    data = {column: np.random.randint(0, 100, n_rows) for column in columns}\n    df = pd.DataFrame(data, columns=columns)\n    df.drop(df.columns[remove_cols], axis=1, inplace=True)\n    return df", "compilation_passed": true, "time": 0.001833200454711914, "tests_passed": true, "error": null}
{"code": "# Generate the DataFrame with random values\n    df = pd.DataFrame(np.random.randint(0, 100, size=(n_rows, len(columns))), columns=columns)\n\n    # Remove the columns based on their indices\n    for index in remove_cols:\n        try:\n            df.drop(columns=df.columns[index], inplace=True)\n        except IndexError:\n            # If the index is out of range, skip it\n            pass\n\n    return df", "compilation_passed": true, "time": 0.0015239715576171875, "tests_passed": true, "error": null}
{"code": "if not isinstance(n_rows, int):\n        raise TypeError(\"n_rows should be an integer\")\n    if not isinstance(remove_cols, list):\n        raise TypeError(\"remove_cols should be a list\")\n    if not all(isinstance(i, int) for i in remove_cols):\n        raise TypeError(\"All elements in remove_cols should be integers\")\n    if not all(0 <= i < len(columns) for i in remove_cols):\n        raise ValueError(\"All elements in remove_cols should be non-negative integers smaller than len(columns)\")\n    if not isinstance(columns, list):\n        raise TypeError(\"columns should be a list\")\n    if not all(isinstance(s, str) for s in columns):\n        raise TypeError(\"All elements in columns should be strings\")\n    if random_seed is not None and not isinstance(random_seed, int):\n        raise TypeError(\"random_seed should be an integer or None\")\n\n    if random_seed is not None:\n        np.random.seed(random_seed", "compilation_passed": false, "time": 0.0002460479736328125, "tests_passed": false, "error": "SyntaxError"}
{"code": "if random_seed is not None:\n        np.random.seed(random_seed)\n    data = {col: np.random.randint(low=0, high=100, size=n_rows) for col in columns}\n    df = pd.DataFrame(data, columns=columns)\n    df.drop(df.columns[remove_cols], axis=1, inplace=True)\n    return df", "compilation_passed": true, "time": 0.00185394287109375, "tests_passed": true, "error": null}
