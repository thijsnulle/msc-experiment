{"code": "summary = {}\n\n    invalid_dir_path = os.path.join(directory_path, \"Invalid\")\n    os.makedirs(invalid_dir_path, exist_ok=True)\n\n    for filename in os.listdir(directory_path):\n        if filename.startswith('.'):\n            continue\n\n        file_path = os.path.join(directory_path, filename)\n        if not os.path.isfile(file_path):\n            continue\n\n        ending = os.path.splitext(filename)[1]\n        if not any(char in INVALID_CHARACTERS for char in filename):\n            if ending in summary:\n                summary[ending] += 1\n            else:\n                summary[ending] = 1\n        else:\n            shutil.move(file_path, invalid_dir_path)\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n\n    return summary", "compilation_passed": true, "time": 0.007581949234008789, "tests_passed": true, "error": null}
{"code": "# Initialize empty summary dictionary\n    summary = {}\n\n    # Create \"Invalid\" directory if it doesn't exist\n    if not os.path.exists('Invalid'):\n        os.mkdir('Invalid')\n\n    # Initialize counts for valid and invalid files\n    valid_count = 0\n    invalid_count = 0\n\n    # Loop through all files in the directory\n    for file in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, file)):\n            # Check if filename contains invalid characters\n            if all(c not in INVALID_CHARACTERS for c in file):\n                # If filename is valid, move the file to the appropriate directory\n                ending = file.split('.')[-1]\n                if not os.path.exists(ending):\n                    os.mkdir(ending)\n                shutil.move(file, f'{ending}/{file}')\n                valid_count += 1\n                summary[ending] = summary.get(ending, 0) + 1\n            else:\n                # If filename contains invalid characters,", "compilation_passed": false, "time": 0.00021195411682128906, "tests_passed": false, "error": "IndentationError"}
{"code": "summary = {}\n    invalid_directory = directory_path + '/Invalid'\n    os.makedirs(invalid_directory, exist_ok=True)\n\n    for filename in os.listdir(directory_path):\n        file_path = directory_path + '/' + filename\n        if os.path.isfile(file_path):\n            if any(char in INVALID_CHARACTERS for char in filename):\n                shutil.move(file_path, invalid_directory)\n                summary.setdefault('Invalid', 0)\n                summary['Invalid'] += 1\n            else:\n                ending = filename.split('.')[-1]\n                if ending in summary:\n                    summary[ending] += 1\n                else:\n                    new_directory = directory_path + '/' + ending\n                    os.makedirs(new_directory, exist_ok=True)\n                    summary[ending] = 1\n                shutil.move(file_path, directory_path + '/' + ending)\n\n    return summary", "compilation_passed": true, "time": 0.0074961185455322266, "tests_passed": true, "error": null}
{"code": "# Initialize a summary dictionary\n    summary = {}\n\n    # List all files in the directory\n    all_files = os.listdir(directory_path)\n\n    # Create the \"Invalid\" directory if it doesn't exist\n    invalid_path = os.path.join(directory_path, 'Invalid')\n    if not os.path.exists(invalid_path):\n        os.makedirs(invalid_path)\n\n    # Iterate over all files and move them based on their endings\n    for file in all_files:\n        # Get the file extension and its name without the extension\n        file_extension = os.path.splitext(file)[1]\n        file_without_extension = os.path.splitext(file)[0]\n\n        # Check if the file name has invalid characters\n        if any(char in INVALID_CHARACTERS for char in file_without_extension):\n            # Move to \"Invalid\" directory if it has invalid characters\n            shutil.move(os.path.join(directory_path, file), os.path.join(invalid_path, file))\n            summary", "compilation_passed": true, "time": 0.002635955810546875, "tests_passed": true, "error": null}
{"code": "summary = {}\n    invalid_files = []\n\n    # Recursively iterate over files in directory and its subdirectories\n    for dirpath, dirnames, filenames in os.walk(directory_path):\n        for filename in filenames:\n            # Check if filename contains any invalid characters\n            if any(char in INVALID_CHARACTERS for char in filename):\n                invalid_files.append(os.path.join(dirpath, filename))\n                continue\n\n            # Split filename into name and extension\n            name, extension = os.path.splitext(filename)\n            extension = extension[1:] # remove the dot in extension\n\n            # Create new directory for file if necessary and move file there\n            if extension not in summary:\n                os.mkdir(os.path.join(dirpath, extension))\n                summary[extension] = 0\n            shutil.move(os.path.join(dirpath, filename), os.path.join(dirpath, extension))\n            summary[extension] += 1\n\n    # Create a new directory for invalid files if any are found\n    if invalid_", "compilation_passed": false, "time": 0.00023698806762695312, "tests_passed": false, "error": "SyntaxError"}
{"code": "summary = {}  # A dictionary to store the count of files moved to each directory\n\n    for filename in os.listdir(directory_path):\n        # Ignore directories\n        if not os.path.isfile(os.path.join(directory_path, filename)):\n            continue\n\n        # Check if the filename contains invalid characters\n        for char in filename:\n            if char in INVALID_CHARACTERS:\n                # Move the file to the \"Invalid\" directory\n                invalid_directory = os.path.join(directory_path, 'Invalid')\n                if not os.path.exists(invalid_directory):\n                    os.mkdir(invalid_directory)\n                shutil.move(\n                    os.path.join(directory_path, filename),\n                    invalid_directory\n                )\n                summary['Invalid'] = summary.get('Invalid', 0) + 1\n                break\n        else:\n            # Organize the file by its extension\n            extension = os.path.splitext(filename)[1][1:]  # Extract the extension without the dot\n            organized_directory = os.", "compilation_passed": false, "time": 0.00019884109497070312, "tests_passed": false, "error": "SyntaxError"}
{"code": "summary = {}\n    invalid_directory = directory_path + '/Invalid'\n    for filename in os.listdir(directory_path):\n        file_path = os.path.join(directory_path, filename)\n        # Skip directories\n        if os.path.isdir(file_path):\n            continue\n\n        # Check if file name contains invalid characters\n        if any(char in INVALID_CHARACTERS for char in filename):\n            if not os.path.isdir(invalid_directory):\n                os.makedirs(invalid_directory)\n            shutil.move(file_path, os.path.join(invalid_directory, filename))\n            if 'Invalid' not in summary:\n                summary['Invalid'] = 0\n            summary['Invalid'] += 1\n            continue\n\n        # Get file extension without the dot\n        file_extension = os.path.splitext(filename)[1][1:]\n        # Create directory for file extension if it doesn't exist\n        extension_directory = directory_path + '/' + file_extension\n        if not os.path.isdir(extension_directory):\n", "compilation_passed": false, "time": 0.0001983642578125, "tests_passed": false, "error": "IndentationError"}
{"code": "summary = {}\n    invalid_files = 0\n\n    for dirpath, dirnames, filenames in os.walk(directory_path):\n        for file in filenames:\n            # Check if file contains invalid characters\n            if any(char in INVALID_CHARACTERS for char in file):\n                invalid_files += 1\n                invalid_dir = os.path.join(directory_path, \"Invalid\")\n\n                if not os.path.exists(invalid_dir):\n                    os.mkdir(invalid_dir)\n\n                shutil.move(os.path.join(dirpath, file), invalid_dir)\n\n            # Move files to respective directories\n            else:\n                file_extension = os.path.splitext(file)[1]\n                dir_path = os.path.join(dirpath, file_extension[1:])\n\n                if not os.path.exists(dir_path):\n                    os.mkdir(dir_path)\n\n                shutil.move(os.path.join(dirpath, file), dir_path)\n\n                #", "compilation_passed": true, "time": 0.002588033676147461, "tests_passed": true, "error": null}
{"code": "# Initialize counters\n    summary = {}\n\n    # Get a list of all files in the directory\n    files = os.listdir(directory_path)\n\n    # Iterate through each file\n    for file_name in files:\n        # Check if the file name has any invalid characters\n        if any(char in INVALID_CHARACTERS for char in file_name):\n            # Create the \"Invalid\" directory if it doesn't exist\n            if \"Invalid\" not in summary:\n                summary[\"Invalid\"] = 0\n                invalid_dir = os.path.join(directory_path, \"Invalid\")\n                os.makedirs(invalid_dir, exist_ok=True)\n            # Move the file to the \"Invalid\" directory\n            shutil.move(os.path.join(directory_path, file_name), invalid_dir)\n            # Increment the Invalid count\n            summary[\"Invalid\"] += 1\n        else:\n            # Extract the file extension (without the period)\n            file_extension = os.path.splitext(file_name)[1][1:]\n            ", "compilation_passed": true, "time": 0.0024127960205078125, "tests_passed": true, "error": null}
{"code": "# Create a summary dictionary to store the count of files moved to each directory\n    summary = {}\n\n    # Loop through each file in the directory\n    for filename in os.listdir(directory_path):\n        # Remove invalid characters from the filename\n        new_filename = ''.join(c for c in filename if c not in INVALID_CHARACTERS)\n\n        # Get the file extension and create a directory for it if it doesn't exist\n        ext = os.path.splitext(new_filename)[1].lower()\n        if not ext:\n            ext = 'none'\n        if ext not in summary:\n            summary[ext] = 0\n        if ext not in os.listdir(directory_path):\n            os.mkdir(os.path.join(directory_path, ext))\n\n        # Move the file to the appropriate directory\n        src_path = os.path.join(directory_path, filename)\n        dst_path = os.path.join(directory_path, ext, new_filename)\n        if os.path.exists(dst_path):\n            # If the destination file", "compilation_passed": false, "time": 0.00019788742065429688, "tests_passed": false, "error": "IndentationError"}
{"code": "# Check if the directory exists\n    if not os.path.exists(directory_path):\n        print(\"Directory not found.\")\n        return\n\n    # Create a summary dictionary\n    summary = {}\n\n    # Create the Invalid directory\n    invalid_dir = os.path.join(directory_path, \"Invalid\")\n    os.makedirs(invalid_dir, exist_ok=True)\n\n    # Iterate through the files in the directory\n    for filename in os.listdir(directory_path):\n        # Skip directories\n        if os.path.isdir(os.path.join(directory_path, filename)):\n            continue\n\n        # Check if the filename contains invalid characters\n        if any(char in INVALID_CHARACTERS for char in filename):\n            # Move the file to the Invalid directory\n            shutil.move(\n                os.path.join(directory_path, filename),\n                os.path.join(invalid_dir, filename),\n            )\n            summary.setdefault(\"Invalid\", 0)\n            summary[\"Invalid\"] += 1\n        ", "compilation_passed": true, "time": 0.0024220943450927734, "tests_passed": true, "error": null}
{"code": "# Create a summary dictionary to track the count of files moved to each directory\n    summary = {}\n\n    # Create the \"Invalid\" directory if it doesn't exist\n    if not os.path.exists('Invalid'):\n        os.mkdir('Invalid')\n\n    # Loop through all files in the directory\n    for filename in os.listdir(directory_path):\n        # Get the file extension\n        file_ext = os.path.splitext(filename)[1]\n\n        # Check if the file has an extension\n        if file_ext != '':\n            # Create a directory for the file extension if it doesn't exist\n            if not os.path.exists(file_ext[1:]):\n                os.mkdir(file_ext[1:])\n\n            # Check if the file name contains invalid characters\n            if set(filename) & set(INVALID_CHARACTERS):\n                # Move the file to the \"Invalid\" directory\n                shutil.move(os.path.join(directory_path, filename), 'Invalid')\n                # Update the summary dictionary\n                summary['Invalid'] = summary.", "compilation_passed": false, "time": 0.00021195411682128906, "tests_passed": false, "error": "SyntaxError"}
{"code": "summary = {}\n    invalid_directory_path = directory_path + '/Invalid'\n\n    # Check if directory_path exists. If it doesn't, raise FileNotFoundError.\n    if not os.path.exists(directory_path):\n        raise FileNotFoundError(f'Directory {directory_path} not found.')\n\n    # Create the Invalid directory if it doesn't exist\n    if not os.path.exists(invalid_directory_path):\n        os.makedirs(invalid_directory_path)\n\n    # Iterate over the files in the directory_path directory\n    for filename in os.listdir(directory_path):\n        file_path = os.path.join(directory_path, filename)\n        extension = os.path.splitext(filename)[1].lower()\n\n        # Check if the file_path is a file. If it's not, skip it.\n        if not os.path.isfile(file_path):\n            continue\n\n        # Check if the file has invalid characters in its name. If it does, move it to the Invalid directory.\n        if any(char", "compilation_passed": false, "time": 0.00018095970153808594, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Create a new directory for invalid files\n    invalid_dir = os.path.join(directory_path, \"Invalid\")\n    if not os.path.exists(invalid_dir):\n        os.mkdir(invalid_dir)\n\n    # Initialize a summary dictionary\n    summary = {}\n\n    # Loop through all files in the directory\n    for filename in os.listdir(directory_path):\n        # Skip directories\n        if os.path.isdir(os.path.join(directory_path, filename)):\n            continue\n\n        # Check if the filename has any invalid characters\n        if any(c in INVALID_CHARACTERS for c in filename):\n            # Move the file to the Invalid directory\n            shutil.move(os.path.join(directory_path, filename), invalid_dir)\n            summary.setdefault(\"Invalid\", 0)\n        else:\n            # Get the file extension\n            _, extension = os.path.splitext(filename)\n\n            # Create a new directory if it doesn't exist\n            new_dir = os.path.join(directory_path", "compilation_passed": false, "time": 0.0001900196075439453, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Initialize variables\n    summary = {}\n    invalid_dir = directory_path / 'Invalid'\n\n    # Create the \"Invalid\" directory if it doesn't exist\n    if not invalid_dir.exists():\n        invalid_dir.mkdir()\n\n    # Walk the directory tree and move files to the appropriate directory\n    for dirpath, dirnames, filenames in os.walk(directory_path):\n        for filename in filenames:\n            # Get the file extension and directory name\n            ext = os.path.splitext(filename)[1]\n            directory_name = ext[1:] if ext else 'NoExtension'\n\n            # Check if the file extension is valid\n            if any(char in INVALID_CHARACTERS for char in directory_name):\n                shutil.move(os.path.join(dirpath, filename), invalid_dir)\n\n                # Update summary to count files in \"Invalid\" directory\n                if 'Invalid' in summary:\n                    summary['Invalid'] += 1\n                else:\n                    summary['Invalid'] = 1\n            else:\n                # Create the directory if", "compilation_passed": false, "time": 0.00019216537475585938, "tests_passed": false, "error": "IndentationError"}
{"code": "# Initialize summary dictionary and invalid directory\n    summary = {}\n    invalid_dir = os.path.join(directory_path, \"Invalid\")\n    os.makedirs(invalid_dir, exist_ok=True)\n\n    # Iterate over each file in the directory\n    for file in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, file)):\n            # Check if any invalid characters are in the filename\n            has_invalid = any(c in INVALID_CHARACTERS for c in file)\n            if has_invalid:\n                # Move file to Invalid directory if it has invalid characters\n                shutil.move(\n                    os.path.join(directory_path, file),\n                    os.path.join(invalid_dir, file),\n                )\n                summary.setdefault(\"Invalid\", 0)\n            else:\n                # Extract file extension and add it to summary if it exists\n                ext = os.path.splitext(file)[1]\n                if ext:\n                    summary.setdefault(", "compilation_passed": false, "time": 0.00019788742065429688, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Check if the directory path exists\n    if not os.path.isdir(directory_path):\n        print(\"Invalid directory path.\")\n        return\n\n    # Create a summary dictionary\n    summary = {}\n\n    # Get all the files in the directory\n    for file in os.listdir(directory_path):\n        # Check if the file path is valid\n        if os.path.isfile(os.path.join(directory_path, file)):\n            # Check if the file contains invalid characters\n            if any(c in INVALID_CHARACTERS for c in file):\n                invalid_directory = os.path.join(directory_path, \"Invalid\")\n                # Create the invalid directory if it doesn't exist\n                if not os.path.isdir(invalid_directory):\n                    os.mkdir(invalid_directory)\n                # Move the file to the invalid directory\n                shutil.move(\n                    os.path.join(directory_path, file), invalid_directory\n                )\n                if \"Invalid\" not in summary:\n                    summary[\"Invalid\"] = 0", "compilation_passed": true, "time": 0.002443075180053711, "tests_passed": true, "error": null}
{"code": "# Check if the directory exists and is accessible\n    if not os.path.isdir(directory_path):\n        raise ValueError(f\"Directory not found or not accessible: {directory_path}\")\n\n    # Create the \"Invalid\" directory if it doesn't exist\n    invalid_dir = os.path.join(directory_path, \"Invalid\")\n    if not os.path.isdir(invalid_dir):\n        os.makedirs(invalid_dir)\n\n    # Initialize counts for each ending\n    summary = {ending: 0 for ending in set(os.path.splitext(filename)[1][1:] for filename in os.listdir(directory_path)) if ending}\n\n    # Iterate over the files in the directory\n    for filename in os.listdir(directory_path):\n        filepath = os.path.join(directory_path, filename)\n\n        # Skip directories\n        if not os.path.isfile(filepath):\n            continue\n\n        # Get the base name of the file (without the extension)\n        basename = os.path.splitext(filename", "compilation_passed": false, "time": 0.00019478797912597656, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Create a dictionary to count files moved to each directory\n    summary = {}\n\n    # Loop through all files in the directory\n    for filename in os.listdir(directory_path):\n        # Check if the filename contains invalid characters\n        if any(c in INVALID_CHARACTERS for c in filename):\n            # Move the file to the \"Invalid\" directory and update the summary\n            if 'Invalid' not in summary:\n                summary['Invalid'] = 0\n            summary['Invalid'] += 1\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, 'Invalid'))\n        else:\n            # Get the ending of the filename\n            ending = os.path.splitext(filename)[-1][1:]\n\n            # Move the file to the corresponding directory and update the summary\n            if ending not in summary:\n                summary[ending] = 0\n            summary[ending] += 1\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, ending))\n\n    return summary", "compilation_passed": true, "time": 0.00436711311340332, "tests_passed": false, "error": "NotADirectoryError"}
{"code": "summary = {}\n    invalid_directory = directory_path + \"/Invalid\"\n    if not os.path.exists(invalid_directory):\n        os.makedirs(invalid_directory)\n\n    for root, dirs, files in os.walk(directory_path):\n        for file in files:\n            filename, extension = os.path.splitext(file)\n            extension = extension.lstrip(\".\")\n\n            if any(char in INVALID_CHARACTERS for char in filename):\n                shutil.move(os.path.join(root, file), os.path.join(invalid_directory, file))\n                if \"Invalid\" not in summary:\n                    summary[\"Invalid\"] = 1\n                else:\n                    summary[\"Invalid\"] += 1\n            elif extension not in summary:\n                summary[extension] = 1\n            else:\n                summary[extension] += 1\n\n    return summary", "compilation_passed": true, "time": 0.0025959014892578125, "tests_passed": true, "error": null}
{"code": "summary = {}\n\n    for root, dirs, files in os.walk(directory_path):\n        for file in files:\n            # Check if the file name contains invalid characters\n            if any(char in INVALID_CHARACTERS for char in file):\n                # Move the file to the \"Invalid\" directory\n                move_file(root, file, 'Invalid')\n                summary['Invalid'] = summary.get('Invalid', 0) + 1\n            else:\n                # Get the file extension\n                ext = os.path.splitext(file)[1].lstrip('.')\n\n                # Move the file to the appropriate directory\n                if ext:\n                    move_file(root, file, ext)\n                    summary[ext] = summary.get(ext, 0) + 1\n\n    return summary", "compilation_passed": true, "time": 0.002147197723388672, "tests_passed": false, "error": "NameError"}
{"code": "summary = {}\n\n    for root, dirs, files in os.walk(directory_path):\n        for file in files:\n            if any(char in INVALID_CHARACTERS for char in file):\n                move_file(root, file, 'Invalid')\n                summary.setdefault('Invalid', 0)\n                summary['Invalid'] += 1\n            else:\n                ext = os.path.splitext(file)[1][1:]  # Extract extension without dot\n                move_file(root, file, ext)\n                summary.setdefault(ext, 0)\n                summary[ext] += 1\n\n    return summary", "compilation_passed": true, "time": 0.0020940303802490234, "tests_passed": false, "error": "NameError"}
{"code": "summary = {}\n\n    # Step 1: Scan the directory and collect files\n    files = [file for file in os.listdir(directory_path) if os.path.isfile(os.path.join(directory_path, file))]\n\n    # Step 2: Check if the directory already exists and create if necessary\n    invalid_directory = os.path.join(directory_path, 'Invalid')\n    if not os.path.exists(invalid_directory):\n        os.makedirs(invalid_directory)\n\n    # Step 3: Iterate over the files and categorize them\n    for file in files:\n        file_extension = os.path.splitext(file)[1].lower()\n\n        # Check if the file name contains invalid characters\n        if any(char in INVALID_CHARACTERS for char in file):\n            # Move files with invalid characters to the Invalid directory\n            shutil.move(os.path.join(directory_path, file), os.path.join(invalid_directory, file))\n            summary['Invalid'] = summary.get('Invalid', 0) +", "compilation_passed": false, "time": 0.00019979476928710938, "tests_passed": false, "error": "SyntaxError"}
{"code": "summary = {}\n    invalid_files_directory = os.path.join(directory_path, 'Invalid')\n\n    for filename in os.listdir(directory_path):\n        # Skip the \"Invalid\" directory\n        if filename == 'Invalid':\n            continue\n\n        # Move files with invalid characters to \"Invalid\" directory\n        if any(char in INVALID_CHARACTERS for char in filename):\n            shutil.move(os.path.join(directory_path, filename), invalid_files_directory)\n            summary.setdefault('Invalid', 0)\n            summary['Invalid'] += 1\n        else:\n            extension = os.path.splitext(filename)[1][1:]\n            shutil.move(os.path.join(directory_path, filename), os.path.join(directory_path, extension, filename))\n            summary.setdefault(extension, 0)\n            summary[extension] += 1\n\n    return summary", "compilation_passed": true, "time": 0.004583835601806641, "tests_passed": false, "error": "NotADirectoryError"}
{"code": "# Initialize the summary dictionary\n    summary = {}\n\n    # Initialize the invalid directory\n    invalid_dir = os.path.join(directory_path, 'Invalid')\n    os.makedirs(invalid_dir, exist_ok=True)\n\n    # Iterate through the files in the directory\n    for file_name in os.listdir(directory_path):\n        if os.path.isfile(os.path.join(directory_path, file_name)):\n            # Check if the file name contains invalid characters\n            if any(c in INVALID_CHARACTERS for c in file_name):\n                # Move the file to the invalid directory\n                shutil.move(os.path.join(directory_path, file_name), invalid_dir)\n\n                # Update the summary\n                summary.setdefault('Invalid', 0)\n                summary['Invalid'] += 1\n\n            else:\n                # Extract the file extension\n                file_ext = os.path.splitext(file_name)[1].replace('.', '')\n\n                # Create the destination directory if it doesn", "compilation_passed": true, "time": 0.002413034439086914, "tests_passed": true, "error": null}
{"code": "# Create the summary dictionary\n    summary = {}\n\n    # Check if the directory exists\n    if not os.path.exists(directory_path):\n        print(f\"Error: Directory '{directory_path}' does not exist.\")\n        return summary\n\n    # Scan the directory for files\n    file_list = os.listdir(directory_path)\n\n    # Move the files to the appropriate directories\n    for filename in file_list:\n        # Get the extension of the file\n        extension = os.path.splitext(filename)[1].lstrip('.')\n\n        # Check if the filename contains invalid characters\n        if any(char in INVALID_CHARACTERS for char in filename):\n            # Move the file to the Invalid directory\n            invalid_dir = os.path.join(directory_path, \"Invalid\")\n            if not os.path.exists(invalid_dir):\n                os.makedirs(invalid_dir)\n            shutil.move(os.path.join(directory_path, filename), os.path.join(invalid_dir, filename))\n\n            # Update the", "compilation_passed": true, "time": 0.0023741722106933594, "tests_passed": true, "error": null}
{"code": "# Create a summary dictionary to count the files moved\n    summary = {}\n\n    # Create a list to store invalid file names\n    invalid_files = []\n\n    # Loop over all files in the directory\n    for file in os.listdir(directory_path):\n        # Get the file extension (without the period)\n        ext = os.path.splitext(file)[1][1:]\n\n        # Check if the file name contains invalid characters\n        if any(char in INVALID_CHARACTERS for char in file):\n            # Add the file to the invalid list\n            invalid_files.append(file)\n        else:\n            # Increment the count for this file type\n            summary[ext] = summary.get(ext, 0) + 1\n\n    # Create a new directory for invalid files\n    invalid_directory = os.path.join(directory_path, 'Invalid')\n    os.mkdir(invalid_directory)\n\n    # Move the invalid files to the new directory\n    for file in invalid_files:\n        # Move the file\n        shutil.move(os.path.join(directory_", "compilation_passed": false, "time": 0.00019097328186035156, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Create a new directory for invalid files\n    invalid_dir = os.path.join(directory_path, 'Invalid')\n    if not os.path.exists(invalid_dir):\n        os.makedirs(invalid_dir)\n\n    # Initialize summary dictionary\n    summary = {}\n\n    # Loop through all files in the directory\n    for filename in os.listdir(directory_path):\n        # Skip directories and hidden files\n        if os.path.isfile(os.path.join(directory_path, filename)) and not filename.startswith('.'):\n            # Check if file name contains invalid characters\n            if any(c in INVALID_CHARACTERS for c in filename):\n                # Move file to Invalid directory\n                shutil.move(os.path.join(directory_path, filename), invalid_dir)\n                summary['Invalid'] = summary.get('Invalid', 0) + 1\n            else:\n                # Get file extension\n                extension = os.path.splitext(filename)[1]\n                # Create directory if it doesn't exist\n                if extension not in summary:", "compilation_passed": false, "time": 0.00020694732666015625, "tests_passed": false, "error": "IndentationError"}
{"code": "# Initialize summary dictionary\n    summary = {}\n\n    # Loop through all files in the directory\n    for file in os.listdir(directory_path):\n        # Get the extension of the file\n        extension = os.path.splitext(file)[1][1:]\n\n        # Check if the extension is empty or has invalid characters\n        if not extension or any(char in INVALID_CHARACTERS for char in file):\n            # Create a new directory for invalid files if it doesn't exist\n            invalid_dir = os.path.join(directory_path, 'Invalid')\n            if not os.path.exists(invalid_dir):\n                os.makedirs(invalid_dir)\n\n            # Move the file to the invalid directory\n            shutil.move(os.path.join(directory_path, file), invalid_dir)\n\n            # Update the summary dictionary\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n\n        # If the extension is valid and not empty, create a directory for it and move the file there\n        else:\n            # Create a directory for the extension", "compilation_passed": false, "time": 0.00017786026000976562, "tests_passed": false, "error": "IndentationError"}
{"code": "# Create the invalid directory if it doesn't exist\n    invalid_directory = os.path.join(directory_path, \"Invalid\")\n    if not os.path.exists(invalid_directory):\n        os.mkdir(invalid_directory)\n\n    # Create a dictionary to store the count of files for each ending\n    file_counts = {}\n\n    # Loop through all files in the directory\n    for filename in os.listdir(directory_path):\n        file_path = os.path.join(directory_path, filename)\n\n        # Skip directories\n        if os.path.isdir(file_path):\n            continue\n\n        # Check for invalid characters in the filename\n        if any(char in INVALID_CHARACTERS for char in filename):\n            shutil.move(file_path, os.path.join(invalid_directory, filename))\n            file_counts[\"Invalid\"] = file_counts.get(\"Invalid\", 0) + 1\n            continue\n\n        # Get the ending of the file and increment the count in the dictionary\n        ending = os.path.splitext(", "compilation_passed": false, "time": 0.00018787384033203125, "tests_passed": false, "error": "SyntaxError"}
