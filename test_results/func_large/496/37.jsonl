{"code": "if days_in_past <= 0:\n        raise ValueError(f\"days_in_past must be a positive integer, but {days_in_past} was passed.\")\n    np.random.seed(random_seed)\n    start_date = datetime.now() - timedelta(days=days_in_past)\n    dates = [start_date + timedelta(days=x) for x in range(days_in_past+1)]\n    temp = np.random.randint(15, 35, size=days_in_past+1)\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    plt.plot(dates, temp, 'r-')\n    plt.xlabel('Date')\n    plt.ylabel('Temperature (\u00b0C)')\n    plt.title('Temperature Trend')\n    return ax", "compilation_passed": true, "time": 0.027130126953125, "tests_passed": true, "error": null}
{"code": "if days_in_past < 1:\n        raise ValueError(\"'days_in_past' should be at least 1.\")\n    np.random.seed(random_seed)\n    temp_c = np.random.randint(low=15, high=35, size=days_in_past)\n    start_date = datetime.now().date() - timedelta(days=days_in_past-1)\n    dates = [start_date + timedelta(days=x) for x in range(days_in_past)]\n\n    fig, ax = plt.subplots()\n    ax.plot(dates, temp_c, marker='o', linestyle='-', markersize=3)\n    ax.set_title('Temperature Trend')\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Temperature (\u00b0C)')\n    plt.show()\n    return ax", "compilation_passed": true, "time": 0.11981987953186035, "tests_passed": true, "error": null}
{"code": "# Checking if days_in_past is less than 1\n    if days_in_past < 1:\n        raise ValueError(\"days_in_past must be greater than or equal to 1\")\n\n    # Setting random seed\n    np.random.seed(random_seed)\n\n    # Generate the number of days based on days_in_past\n    ndays = days_in_past - 1\n\n    # Initializing 'today' and 'dt' as datetime\n    today = datetime.now()\n    dt = today - timedelta(ndays)\n\n    # Initializing temperature as an array of random integers between 15 and 35 of shape (ndays, 1)\n    temperature = np.random.randint(low=15, high=35, size=(ndays, 1))\n\n    # Initializing date as an array of dates\n    dates = [(dt + timedelta(days=x)).date() for x in range(ndays)]\n\n    # Plotting the dates (x-axis) and temperature (y-axis)\n    ax = plt.plot(", "compilation_passed": false, "time": 0.0002319812774658203, "tests_passed": false, "error": "SyntaxError"}
{"code": "if days_in_past < 1:\n        raise ValueError(\"days_in_past cannot be less than 1\")\n\n    np.random.seed(random_seed)\n    date_range = [datetime.now() - timedelta(days=x) for x in range(days_in_past)]\n    temperatures = np.random.randint(low=15, high=35, size=days_in_past)\n\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    ax.set_xlabel(\"Date\")\n    ax.set_ylabel(\"Temperature (\u00b0C)\")\n    ax.set_title(\"Temperature Trend\")\n    ax.plot(date_range, temperatures, marker=\"o\", linestyle=\"-\")\n\n    return ax", "compilation_passed": true, "time": 0.11487293243408203, "tests_passed": true, "error": null}
{"code": "if days_in_past < 1:\n        raise ValueError(\"days_in_past must be greater than or equal to 1.\")\n\n    # Set the random seed to reproduce the same results.\n    np.random.seed(random_seed)\n\n    # Generate random temperatures in Celsius (low = 15, high = 35).\n    temperatures = np.random.randint(15, 35, size=days_in_past)\n\n    # Generate a datetime array for each day in the past.\n    dt_array = np.array(\n        [datetime.today() - timedelta(days=i) for i in range(days_in_past)][::-1]\n    )\n\n    # Create a new plot.\n    ax = plt.figure().gca()\n\n    # Plot the graph using the array of days (on the x-axis) and temperature (on the y-axis)\n    ax.plot(dt_array, temperatures, color=\"green\")\n\n    # Add x-axis label.\n    ax.set_xlabel(\"", "compilation_passed": false, "time": 0.0001289844512939453, "tests_passed": false, "error": "SyntaxError"}
{"code": "if days_in_past < 1:\n        raise ValueError(\"days_in_past cannot be less than 1\")\n\n    np.random.seed(random_seed)\n    dates = [datetime.today() - timedelta(days=x) for x in range(days_in_past)]\n    temps = np.random.randint(low=15, high=35, size=days_in_past)\n\n    ax = plt.subplot()\n    plt.plot(dates, temps)\n    ax.set_xlabel(\"Date\")\n    ax.set_ylabel(\"Temperature ($^\\\\circ$C)\")\n    ax.set_title(\"Temperature Trend\")\n    ax.grid()\n\n    return ax", "compilation_passed": true, "time": 0.013251066207885742, "tests_passed": true, "error": null}
{"code": "# Check if days_in_past is valid\n    if days_in_past < 1:\n        raise ValueError(\"days_in_past must be greater than 0\")\n\n    # Set random seed for reproducibility\n    np.random.seed(random_seed)\n\n    # Generate random temperatures in Celcius between 15 and 35 degrees\n    temperatures = np.random.randint(low=15, high=36, size=days_in_past)\n\n    # Create an array of dates with start date being 2024-03-28 and end date being the same day as current date\n    start_date = datetime.date(datetime.now() - timedelta(days=days_in_past))\n    end_date = datetime.date(datetime.now())\n    date_arr = np.array([start_date + timedelta(days=x) for x in range(0, days_in_past)])\n\n    # Generate a graph of temperature trends over the past week using randomly generated data\n    fig, ax = plt.subplots()\n    ax", "compilation_passed": true, "time": 0.01407003402709961, "tests_passed": true, "error": null}
{"code": "# Raise error if days_in_past is less than 1\n    if days_in_past < 1:\n        raise ValueError(\"days_in_past must be greater than 0.\")\n\n    np.random.seed(random_seed)\n    current_date = datetime.now()\n\n    # Generate a sequence of dates\n    x = np.array([current_date + timedelta(days=i) for i in range(-days_in_past + 1, 1)])\n\n    # Generate random temperatures\n    y = np.random.randint(low=15, high=35, size=len(x))\n\n    # Create a figure and a set of subplots\n    fig, ax = plt.subplots()\n\n    # Plot temperature as a function of date\n    ax.plot(x, y)\n\n    # Label the x-axis and y-axis and set the title\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Temperature (\u00b0C)')\n    ax.set_title('Temperature Trend')\n\n    # Format the", "compilation_passed": true, "time": 0.016665935516357422, "tests_passed": true, "error": null}
{"code": "# Raise ValueError if days_in_past is less than 1.\n    if days_in_past < 1:\n        raise ValueError(\"days_in_past must be a positive integer greater than or equal to 1.\")\n\n    # Set the seed for the random number generator.\n    np.random.seed(random_seed)\n\n    # Initialize the date variable and the date_list variable.\n    date = datetime(2024, 3, 28)\n    date_list = []\n\n    # Generate dates for each day in the past specified by the user.\n    for _ in range(days_in_past):\n        date_list.append(date)\n        date += timedelta(days=1)\n\n    # Generate random temperatures and store them in the temps variable.\n    temps = np.random.randint(low=15, high=36, size=len(date_list))\n\n    # Set the figure size and generate the plot with the temperature trends.\n    fig, ax = plt.subplots()\n    fig.set_size_inches(", "compilation_passed": false, "time": 0.00022602081298828125, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Validate input parameters\n    if days_in_past < 1:\n        raise ValueError(\"Number of days in past must be at least 1\")\n\n    # Generate random seed\n    if isinstance(random_seed, int) or random_seed == 0:\n        np.random.seed(random_seed)\n    else:\n        raise ValueError(\"random_seed is not an int or 0\")\n\n    # Generate random temperature data for past 7 days\n    start_date = datetime.today() - timedelta(days=days_in_past)\n    x = [start_date + timedelta(days=x) for x in range(days_in_past)]\n    y = np.random.randint(low=15, high=35, size=days_in_past)\n\n    # Plot temperature trend\n    ax = plt.plot(x, y)\n    plt.ylabel('Temperature (\u00b0C)')\n    plt.xlabel('Date')\n    plt.xticks(rotation = 45)\n    plt.title('Temperature Trend')\n    plt.", "compilation_passed": false, "time": 0.0002200603485107422, "tests_passed": false, "error": "SyntaxError"}
{"code": "if days_in_past < 1:\n        raise ValueError(\"days_in_past cannot be less than 1\")\n\n    if random_seed is not None:\n        np.random.seed(random_seed)\n\n    # generate random integer temperatures in Celcius between 15 and 35\n    temperatures = np.random.randint(low=15, high=35, size=days_in_past)\n\n    # get current date and time\n    current_time = datetime.now()\n    timestamps = [current_time + timedelta(days=x) for x in range(days_in_past)]\n\n    # create a figure and axis\n    fig, ax = plt.subplots()\n\n    # plot the data\n    ax.plot(timestamps, temperatures, marker='o')\n\n    # set the x-axis ticks\n    ax.xaxis.set_major_locator(mdates.DayLocator())\n    ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))\n\n    #", "compilation_passed": true, "time": 0.01606011390686035, "tests_passed": false, "error": "NameError"}
{"code": "np.random.seed(random_seed)\n\n    if days_in_past < 1:\n        raise ValueError(\"days_in_past must be greater than 0.\")\n\n    # create random temperatures in celsius between 15 and 35\n    temps = np.random.randint(15, 36, days_in_past)\n\n    # create x-axis date ticks\n    x_axis_ticks = [datetime.today() - timedelta(days=n) for n in range(days_in_past)]\n\n    # plot\n    fig, ax = plt.subplots()\n    ax.set(xlabel='Date',\n           ylabel='Temperature (\u00b0C)',\n           title='Temperature Trend')\n    ax.grid()\n\n    plt.plot(x_axis_ticks, temps)\n    plt.xticks(rotation=90)\n    plt.gcf().autofmt_xdate()\n\n    # return ax", "compilation_passed": true, "time": 0.01753091812133789, "tests_passed": true, "error": null}
{"code": "if days_in_past < 1:\n        raise ValueError(f\"days_in_past must be >= 1, not {days_in_past}\")\n\n    # Create a random number generator with the given seed\n    rng = np.random.RandomState(seed=random_seed)\n\n    # Generate a random integer temperature between 15 and 35 for each day in the past week\n    temperatures = rng.randint(15, 35, days_in_past)\n\n    # Generate a list of dates corresponding to the temperature measurements\n    days = [\n        (datetime.today() - timedelta(days=i)).strftime(\"%Y-%m-%d\")\n        for i in range(days_in_past)\n    ]\n\n    # Plot the temperature vs. day on a graph\n    plt.plot(days, temperatures)\n    plt.xlabel(\"Date\")\n    plt.ylabel(\"Temperature (\u00b0C)\")\n    plt.title(\"Temperature Trend\")\n    plt.xticks(rotation=45)\n    ax = plt", "compilation_passed": true, "time": 0.01764392852783203, "tests_passed": true, "error": null}
{"code": "if days_in_past < 1:\n        raise ValueError('days_in_past must be a positive integer')\n\n    random.seed(random_seed)\n\n    date_range = datetime(2024, 3, 28) - timedelta(days=days_in_past)\n    date = date_range\n    x_list = []\n    y_list = []\n    while date <= datetime(2024, 3, 28):\n        x_list.append(date)\n        y_list.append(random.randint(15, 35))\n        date += timedelta(days=1)\n    ax = plt.axes()\n    plt.title('Temperature Trend')\n    plt.xlabel('Date')\n    plt.ylabel('Temperature (\u00b0C)')\n    ax.plot(x_list, y_list, '-')\n    ax.grid()\n    ax.get_xaxis().set_major_format('%Y-%m-%d')\n    #ax.xaxis_date()\n    return ax", "compilation_passed": true, "time": 0.0010602474212646484, "tests_passed": false, "error": "NameError"}
{"code": "if days_in_past < 1:\n        raise ValueError('days_in_past must be a positive integer')\n\n    start_date = datetime.now() - timedelta(days=days_in_past)\n    date_list = [start_date + timedelta(days=x) for x in range(days_in_past)]\n    date_list_formatted = [dt.strftime('%Y-%m-%d') for dt in date_list]\n\n    # Set random seed for reproducible results\n    np.random.seed(random_seed)\n    # Generate random integers in range 15 to 35\n    temp_list = np.random.randint(15, 35, size=days_in_past)\n\n    # Set figure size\n    plt.figure(figsize=(12, 5))\n    # Plot temperature data\n    plt.plot(date_list_formatted, temp_list, marker='o', markersize=4)\n    # Set labels and title\n    plt.xlabel('Date')\n    plt.ylabel('Temperature (\u00b0C)", "compilation_passed": false, "time": 0.00010991096496582031, "tests_passed": false, "error": "SyntaxError"}
{"code": "if days_in_past < 1:\n        raise ValueError(\"Number of days cannot be less than one.\")\n\n    np.random.seed(random_seed)\n\n    # Set the start date to the current date minus the number of days in the past\n    start_date = datetime.now() - timedelta(days=days_in_past)\n\n    # Create an array of date objects for each day in the past\n    dates = [start_date + timedelta(days=i) for i in range(days_in_past)]\n\n    # Create an array of random integer temperatures for each date in the past\n    temperatures = np.random.randint(15, 35, days_in_past)\n\n    # Create a figure and axes for the plot\n    fig, ax = plt.subplots()\n\n    # Plot the temperatures as a function of the dates\n    ax.plot(dates, temperatures, marker='o')\n\n    # Set the axis labels and title\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Temperature (\u00b0C)')\n    ax", "compilation_passed": true, "time": 0.01430201530456543, "tests_passed": true, "error": null}
{"code": "# Validate input\n    if days_in_past < 1:\n        raise ValueError('days_in_past must be at least 1 day')\n    # Set random seed\n    np.random.seed(random_seed)\n    # Generate random temperatures and dates\n    temps = np.random.randint(low=15, high=35, size=days_in_past)\n    dates = [datetime.today() + timedelta(days=-x) for x in range(days_in_past)]\n    # Plot temperatures over time\n    fig, ax = plt.subplots()\n    ax.plot(dates, temps)\n    # Add labels and title\n    ax.set_title('Temperature Trend')\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Temperature (\u00b0C)')\n    # Set date ticks to show every second day\n    ax.set_xticks(dates[::2])\n    # Rotate date ticks for readability\n    ax.set_xticklabels(dates[::2], rotation=30)\n    return ax", "compilation_passed": true, "time": 0.15473008155822754, "tests_passed": true, "error": null}
{"code": "# Check if the days_in_past is less than 1, raise ValueError if true\n    if days_in_past < 1:\n        raise ValueError(\"Number of days in the past must be greater than or equal to 1.\")\n\n    # Set the random seed for reproducibility\n    np.random.seed(random_seed)\n\n    # Define the start and end dates\n    start_date = datetime(2024, 3, 28)\n    end_date = start_date + timedelta(days=days_in_past-1)\n\n    # Generate the x-axis values as dates\n    x_axis = [start_date + timedelta(days=i) for i in range(days_in_past)]\n\n    # Generate random integer temperatures between 15 and 35 for each date\n    y_axis = np.random.randint(15, 35, size=days_in_past)\n\n    # Plot the data\n    plt.plot(x_axis, y_axis)\n\n    # Add labels and title\n    plt.xlabel", "compilation_passed": true, "time": 0.016895294189453125, "tests_passed": true, "error": null}
{"code": "# Raise a value error if days_in_past is less than 1\n    if days_in_past < 1:\n        raise ValueError('days_in_past must be greater than 0')\n\n    # Set the random seed for reproducibility\n    np.random.seed(random_seed)\n\n    # Generate a date range in the past\n    # x-axis of the plot will be the date\n    dates = [datetime.today() - timedelta(days=x) for x in range(days_in_past)]\n\n    # Generate random temperature data in celcius\n    # y-axis of the plot will be the temperature\n    temperatures = np.random.randint(low=15, high=35, size=days_in_past)\n\n    # Plot the graph with date on the x-axis and temperature on the y-axis\n    fig, ax = plt.subplots()\n    ax.plot(dates, temperatures)\n\n    # Set the axis labels\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Temperature (\u00b0C)')\n\n    ", "compilation_passed": true, "time": 0.014893770217895508, "tests_passed": true, "error": null}
{"code": "if days_in_past < 1:\n        raise ValueError('days_in_past cannot be less than 1')\n\n    np.random.seed(random_seed)\n    dates = []\n    temperatures = []\n\n    # Generate dates and temperatures for each day in the past\n    today = datetime(2024, 3, 28)  # Use a fixed today date for testing\n    for day in range(days_in_past):\n        dates.append(today - timedelta(days=day))\n        temperatures.append(np.random.randint(15, 35))\n\n    # Reverse the order of the data to match the original sample plot\n    dates = dates[::-1]\n    temperatures = temperatures[::-1]\n\n    # Create the plot\n    fig = plt.figure()\n    ax = fig.add_subplot()\n    ax.set_title(\"Temperature Trend\")\n    ax.set_xlabel(\"Date\")\n    ax.set_ylabel(\"Temperature (\u00b0C)\")\n    ax.plot(dates,", "compilation_passed": false, "time": 0.0002620220184326172, "tests_passed": false, "error": "SyntaxError"}
{"code": "if days_in_past < 1:\n        raise ValueError(\"days_in_past must be at least 1.\")\n    if days_in_past != int(days_in_past):\n        raise ValueError(\"days_in_past must be an integer.\")\n\n    # Initialize the random number generator with the given seed\n    rng = np.random.default_rng(random_seed)\n\n    # Generate random temperatures in Celcius with a low of 15 and high of 35.\n    temperatures = rng.integers(low=15, high=35, size=days_in_past)\n\n    # Create a datetime object for today\n    today = datetime.now()\n\n    # Create an array of datetime objects representing each day of the past week\n    dates = [today - timedelta(days=i) for i in range(days_in_past - 1, -1, -1)]\n\n    # Generate a figure and a set of subplots with a single axis\n    fig, ax = plt.subplots(1, 1,", "compilation_passed": false, "time": 0.00018405914306640625, "tests_passed": false, "error": "SyntaxError"}
{"code": "if days_in_past < 1:\n        raise ValueError(\"days_in_past cannot be less than 1.\")\n\n    np.random.seed(random_seed)\n    todays_date = datetime.now()\n    dates = [todays_date + timedelta(days=-i) for i in range(days_in_past)]\n    temperatures = np.random.randint(15, 35, size=len(dates))\n    plt.plot(dates, temperatures, linewidth=3)\n    plt.xlabel(\"Date\")\n    plt.ylabel(\"Temperature (\u00b0C)\")\n    plt.xticks(rotation=45)\n    plt.title(\"Temperature Trend\")\n    ax = plt.gca()\n    plt.show()\n\n    return ax", "compilation_passed": true, "time": 0.037858009338378906, "tests_passed": true, "error": null}
{"code": "# Set seed for reproducibility\n    np.random.seed(random_seed)\n\n    if days_in_past < 1:\n        raise ValueError(\"days_in_past must be greater than 0\")\n\n    # Generate random temperature data\n    temp = np.random.randint(15, 35, size=days_in_past)\n\n    # Create x-axis data (dates)\n    date_start = datetime.today() - timedelta(days=days_in_past)\n    date_end = datetime.today()\n\n    num_of_days = (date_end - date_start).days + 1\n    x = np.arange(num_of_days)\n    x = [date_start + timedelta(i) for i in x]\n\n    # Plot the temperature trend\n    plt.figure()\n    plt.plot(x, temp, linewidth=2.0)\n    plt.xlabel('Date')\n    plt.ylabel('Temperature (\u00b0C)')\n    plt.title('Temperature Trend')\n    plt.grid()\n    ", "compilation_passed": true, "time": 0.0011398792266845703, "tests_passed": false, "error": "TypeError"}
{"code": "if days_in_past < 1:\n        raise ValueError(\"Number of days in past should be greater than 0.\")\n    np.random.seed(random_seed)\n    # Generate the data\n    today = datetime.today()\n    past_dates = [(today - timedelta(days=i)).strftime(\"%Y-%m-%d\") for i in range(days_in_past)]\n    temperatures = np.random.randint(15, 35, size=days_in_past)\n    # Set up the plot\n    fig, ax = plt.subplots(figsize=(10, 5))\n    # Plot the data\n    ax.plot(past_dates, temperatures, marker='o')\n    # Add labels\n    ax.set_title(\"Temperature Trend\")\n    ax.set_xlabel(\"Date\")\n    ax.set_ylabel(\"Temperature (\u00b0C)\")\n    # Show the plot\n    plt.show()\n    return ax", "compilation_passed": true, "time": 0.12691903114318848, "tests_passed": true, "error": null}
{"code": "# Validate days_in_past\n    if days_in_past < 1:\n        raise ValueError(\"days_in_past must be greater than 0.\")\n\n    # Set the random seed\n    np.random.seed(random_seed)\n\n    # Get the current date\n    today = datetime.now()\n\n    # Generate a random integer temperature in Celcius between 15 and 35\n    temperature = np.random.randint(15, 35, size=days_in_past)\n\n    # Generate dates for the past week\n    dates = [(today - timedelta(days=i)).date() for i in range(days_in_past)]\n\n    # Plot the graph\n    plt.plot(dates, temperature, marker='o')\n    plt.title('Temperature Trend')\n    plt.xlabel('Date')\n    plt.ylabel('Temperature (\u00b0C)')\n    plt.xticks(rotation=45)\n    plt.grid()\n    plt.tight_layout()\n\n    # Return the generated plot\n    return plt.gca()", "compilation_passed": true, "time": 0.08739995956420898, "tests_passed": true, "error": null}
{"code": "if days_in_past < 1:\n        raise ValueError(\"days_in_past cannot be less than 1.\")\n\n    # Set random seed for reproducibility\n    np.random.seed(random_seed)\n\n    # Generate random temperatures in Celcius\n    temperatures = np.random.randint(low=15, high=35, size=days_in_past)\n\n    # Generate date\n    today = datetime.today()\n    dates = [(today - timedelta(days=i)).strftime(\"%Y-%m-%d\") for i in range(days_in_past)]\n\n    # Generate plot\n    fig, ax = plt.subplots()\n    ax.plot(dates, temperatures, marker='o', linestyle='-', color='blue')\n    ax.set_title('Temperature Trend')\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Temperature (\u00b0C)')\n    plt.show()\n\n    # Return the plot object\n    return ax", "compilation_passed": true, "time": 0.13109588623046875, "tests_passed": true, "error": null}
{"code": "# Validate input\n    if days_in_past < 1:\n        raise ValueError(\"days_in_past must be greater than or equal to 1.\")\n\n    # Set random seed\n    np.random.seed(random_seed)\n\n    # Generate random temperatures in Celcius with a low of 15 and high of 35.\n    temperatures = np.random.randint(low=15, high=35, size=days_in_past)\n\n    # Get start_date in format: 2024-03-27 00:00:00\n    today_str = datetime.today().strftime('%Y-%m-%d')\n    today_date = datetime(year=int(today_str[:4]), month=int(today_str[5:7]), day=int(today_str[8:10]))\n    start_date = today_date - timedelta(days=days_in_past - 1)\n\n    # Convert the date to an integer representing the number of days since January 1st,", "compilation_passed": true, "time": 0.0011930465698242188, "tests_passed": true, "error": null}
{"code": "if days_in_past < 1:\n        raise ValueError(\"'days_in_past' must be at least 1\")\n\n    np.random.seed(random_seed)\n\n    start_date = datetime.now()\n    end_date = start_date - timedelta(days=days_in_past)\n    dates = np.arange(start=end_date, stop=start_date, dtype='datetime64[D]')\n    temperature = np.random.randint(low=15, high=35, size=days_in_past)\n\n    ax = plt.subplot()\n    plt.plot(dates, temperature)\n    ax.set_title('Temperature Trend', fontweight='bold')\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Temperature (\u00b0C)')\n    ax.grid(True, linestyle='-', axis='y')\n\n    return ax", "compilation_passed": true, "time": 0.028267860412597656, "tests_passed": true, "error": null}
{"code": "# Raise error if days_in_past is less than 1\n    if days_in_past < 1:\n        raise ValueError('days_in_past must be 1 or higher')\n\n    # Set the seed of the random number generator\n    np.random.seed(random_seed)\n\n    # Generate random integer temperatures in Celcius with a low of 15 and high of 35\n    random_temperatures = np.random.randint(15, 35, days_in_past)\n\n    # Generate date range in the past for days_in_past days\n    date_range = [datetime.today() - timedelta(days=x) for x in range(days_in_past)]\n\n    # Set the figure size\n    plt.figure(figsize=(12, 8))\n\n    # Plot date on the x-axis and temperature on the y-axis\n    ax = plt.plot(date_range, random_temperatures, 'ro--')\n\n    # Set the labels for x-axis and y-axis\n    plt.xlabel('Date', fontsize", "compilation_passed": false, "time": 0.0002300739288330078, "tests_passed": false, "error": "SyntaxError"}
{"code": "if days_in_past < 1:\n        raise ValueError('days_in_past must be greater than zero')\n    np.random.seed(random_seed)\n    start_date = datetime.now() - timedelta(days=days_in_past)\n    date_range = [start_date + timedelta(days=x) for x in range(days_in_past + 1)]\n    temperature_range = np.random.randint(15, 35, size=days_in_past + 1)\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    ax.set_title('Temperature Trend')\n    ax.set_xlabel('Date')\n    ax.set_ylabel('Temperature (\u00b0C)')\n    ax.set_xticks(range(len(date_range)))\n    ax.set_xticklabels(date_range)\n    ax.plot(range(len(date_range)), temperature_range, '-o', color='red')\n    fig.set_size_inches", "compilation_passed": true, "time": 0.015753984451293945, "tests_passed": true, "error": null}
