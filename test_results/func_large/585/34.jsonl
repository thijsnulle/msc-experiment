{"code": "# Generate public and private keys using RSA\n    pub_key, priv_key = rsa.newkeys(2048)\n\n    # Create the encrypted files in a zip file\n    with zipfile.ZipFile('encrypted_files.zip', 'w') as zipf:\n        for filename in os.listdir(directory):\n            # Encrypt file with RSA\n            with open(os.path.join(directory, filename), 'rb') as file:\n                encrypted_data = rsa.encrypt(file.read(), pub_key)\n\n            # Add encrypted data to zip file\n            zipf.writestr(filename, b64encode(encrypted_data))\n\n    return pub_key, 'encrypted_files.zip'", "compilation_passed": true, "time": 1.0050909519195557, "tests_passed": false, "error": "TimeoutError"}
{"code": "key = rsa.generate_public_key()\n    zipname = 'encrypted.zip'\n    if os.path.exists(zipname):\n        os.remove(zipname)\n    zf = zipfile.ZipFile(zipname, 'w')\n\n    for root, dirs, files in os.walk(directory):\n        for filename in files:\n            path = os.path.join(root, filename)\n\n            # Ignore the zip file itself to avoid an infinite loop.\n            if filename == zipname:\n                continue\n\n            with open(path, 'rb') as f:\n                plaintext = f.read()\n                ciphertext = rsa.encrypt(plaintext, key)\n                zf.writestr(filename, b64encode(ciphertext))\n\n    return key, zipname", "compilation_passed": true, "time": 0.0015249252319335938, "tests_passed": false, "error": "AttributeError"}
{"code": "pub_key, priv_key = rsa.newkeys(512)\n    file_list = os.listdir(directory)\n    zip_file = zipfile.ZipFile('encrypted.zip', 'w')\n    for file_name in file_list:\n        if os.path.isfile(os.path.join(directory, file_name)):\n            with open(os.path.join(directory, file_name), 'rb') as file:\n                data = file.read()\n                cipher = rsa.encrypt(data, pub_key)\n                zip_file.writestr(file_name, b64encode(cipher))\n    zip_file.close()\n    return pub_key, 'encrypted.zip'", "compilation_passed": true, "time": 0.11772322654724121, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "pub_key, priv_key = rsa.newkeys(2048)\n\n    file_paths = []\n    for root, _, files in os.walk(directory):\n        for file in files:\n            file_paths.append(os.path.join(root, file))\n\n    zip_name = os.path.join(directory, 'encrypted.zip')\n    with zipfile.ZipFile(zip_name, 'w') as zip_file:\n        for file_path in file_paths:\n            file_name = os.path.basename(file_path)\n            with open(file_path, 'rb') as file:\n                encrypted_data = rsa.encrypt(file.read(), pub_key)\n                zip_file.writestr(file_name, b64encode(encrypted_data))\n\n    return pub_key, zip_name", "compilation_passed": true, "time": 1.0022649765014648, "tests_passed": false, "error": "TimeoutError"}
{"code": "directory = os.path.abspath(directory)\n    pub_key, priv_key = rsa.newkeys(2048)\n    zip_file_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zip_file_name, 'w') as z:\n        for root, dirs, files in os.walk(directory):\n            for file in files:\n                with open(os.path.join(root, file), 'rb') as f:\n                    content = f.read()\n                encrypted_content = rsa.encrypt(content, pub_key)\n                zip_file_name = os.path.join(root, file + '.enc')\n                z.writestr(os.path.relpath(zip_file_name), b64encode(encrypted_content).decode('utf-8'))\n    return pub_key, zip_file_name", "compilation_passed": true, "time": 1.0032429695129395, "tests_passed": false, "error": "TimeoutError"}
{"code": "pub_key, priv_key = rsa.newkeys(1024)\n    zipfile_name = os.path.join(directory, 'encrypted.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zf:\n        for root, _, filenames in os.walk(directory):\n            for filename in filenames:\n                file_path = os.path.join(root, filename)\n                with open(file_path, 'rb') as f:\n                    encrypted_data = rsa.encrypt(f.read(), pub_key)\n                    zf.writestr(filename + '.enc', b64encode(encrypted_data))\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.26064205169677734, "tests_passed": true, "error": null}
{"code": "key_length = 2048\n\n    # Generate public and private keys\n    pub_key, priv_key = rsa.newkeys(key_length)\n\n    # Create a zip file and encrypt all files in the directory\n    zip_name = \"encrypted_files.zip\"\n    zipf = zipfile.ZipFile(zip_name, 'w')\n\n    # Recursively walk the directory tree and compress the files\n    for root, dirs, files in os.walk(directory):\n        for file in files:\n            file_path = os.path.join(root, file)\n            with open(file_path, 'rb') as f:\n                # Encrypt the file content and add it to the zip file\n                encrypted_data = rsa.encrypt(f.read(), pub_key)\n                zipf.writestr(file, b64encode(encrypted_data))\n\n    # Close the zip file\n    zipf.close()\n\n    return pub_key, zip_name", "compilation_passed": true, "time": 1.0029609203338623, "tests_passed": false, "error": "TimeoutError"}
{"code": "# Generate a new RSA key pair\n    private_key = rsa.generate_private_key(public_exponent=65537, key_size=2048)\n    public_key = private_key.public_key()\n\n    # Create the zip file to store the encrypted files\n    zipfile_name = 'encrypted_files.zip'\n    zip_file = zipfile.ZipFile(zipfile_name, 'w')\n\n    # Iterate over all the files in the directory and encrypt them\n    for root, _, files in os.walk(directory):\n        for file in files:\n            file_path = os.path.join(root, file)\n            file_name = os.path.basename(file_path)\n\n            # Read the file content\n            with open(file_path, 'rb') as f:\n                file_content = f.read()\n\n            # Encrypt the file content using RSA\n            encrypted_content = rsa.encrypt(file_content, public_key)\n\n            # Store the encrypted content in the zip file\n", "compilation_passed": true, "time": 0.0019397735595703125, "tests_passed": false, "error": "AttributeError"}
{"code": "# Generate an RSA public/private key pair\n    key = rsa.generate_private_key(public_exponent=65537, key_size=2048)\n    public_key = key.public_key()\n\n    # Encrypt each file in the directory with the public key\n    with zipfile.ZipFile('files.zip', 'w', zipfile.ZIP_DEFLATED) as zip_file:\n        for file in os.listdir(directory):\n            if os.path.isfile(os.path.join(directory, file)):\n                # Encrypt the file data with the public key\n                with open(os.path.join(directory, file), 'rb') as infile:\n                    encrypted_data = rsa.encrypt(infile.read(), public_key)\n                    # Store the encrypted data as a Base64-encoded string in the zip file\n                    zip_file.writestr(file, b64encode(encrypted_data))\n\n    return key.public_key(), 'files.zip'", "compilation_passed": true, "time": 0.0011038780212402344, "tests_passed": false, "error": "AttributeError"}
{"code": "(pub_key, priv_key) = rsa.newkeys(1024)\n    files = os.listdir(directory)\n    zip_file = zipfile.ZipFile('encrypted_files.zip', 'w')\n    for file in files:\n        file_path = os.path.join(directory, file)\n        if os.path.isfile(file_path):\n            with open(file_path, 'rb') as f:\n                data = f.read()\n            encrypted_data = b64encode(rsa.encrypt(data, pub_key))\n            zip_file.writestr(file, encrypted_data)\n    zip_file.close()\n    return pub_key, 'encrypted_files.zip'", "compilation_passed": true, "time": 0.1503591537475586, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "pass", "compilation_passed": true, "time": 0.0011658668518066406, "tests_passed": false, "error": "TypeError"}
{"code": "# Generate RSA public and private keys\n    private_key = rsa.generate_private_key(\n        public_exponent=65537,\n        key_size=2048,\n    )\n    public_key = private_key.public_key()\n\n    # Encrypt files\n    zip_name = \"encrypted_files.zip\"\n    with zipfile.ZipFile(zip_name, \"w\") as zipf:\n        for root, dirs, files in os.walk(directory):\n            for file in files:\n                file_path = os.path.join(root, file)\n                with open(file_path, \"rb\") as file:\n                    content = file.read()\n                    encrypted_data = b64encode(rsa.encrypt(content, public_key))\n                    zipf.writestr(file, encrypted_data)\n    return public_key, zip_name", "compilation_passed": true, "time": 0.0010538101196289062, "tests_passed": false, "error": "AttributeError"}
{"code": "# Generate RSA public and private keys\n    pub_key, priv_key = rsa.newkeys(2048)\n\n    # Create a zip file with the same name as the input directory\n    zipfile_name = f'{directory}.zip'\n    with zipfile.ZipFile(zipfile_name, mode='w') as zip_file:\n        # Iterate over all files in directory\n        for root, dirs, files in os.walk(directory):\n            for file in files:\n                file_path = os.path.join(root, file)\n\n                # Encrypt the file data with RSA\n                with open(file_path, 'rb') as f:\n                    file_data = f.read()\n                    encrypted_data = b64encode(rsa.encrypt(file_data, pub_key))\n\n                # Write the encrypted file to the zip file\n                zip_file.writestr(file, encrypted_data)\n\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 1.0023229122161865, "tests_passed": false, "error": "TimeoutError"}
{"code": "pub_key, priv_key = rsa.newkeys(512)\n    with zipfile.ZipFile(\"output.zip\", \"w\") as zip_file:\n        for root, _, files in os.walk(directory):\n            for file_name in files:\n                file_path = os.path.join(root, file_name)\n                with open(file_path, \"rb\") as file:\n                    plain_text = file.read()\n                    encrypted_data = rsa.encrypt(plain_text, pub_key)\n                    encrypted_text = b64encode(encrypted_data)\n                    zip_file.writestr(file_name, encrypted_text)\n    return pub_key, \"output.zip\"", "compilation_passed": true, "time": 0.05217409133911133, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "directory = os.path.abspath(directory)\n    assert os.path.isdir(directory)\n    pub_key, priv_key = rsa.newkeys(1024)\n    zipfile_name = os.path.join(directory, 'encrypted_files.zip')\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for root, dirs, files in os.walk(directory):\n            for file in files:\n                filename = os.path.join(root, file)\n                with open(filename, 'rb') as f:\n                    file_data = f.read()\n                encrypted_data = rsa.encrypt(file_data, pub_key)\n                encrypted_data_base64 = b64encode(encrypted_data)\n                zipf.writestr(file, encrypted_data_base64)\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.6434621810913086, "tests_passed": true, "error": null}
{"code": "public_key, private_key = rsa.newkeys(2048)\n\n    # Create a zip file and encrypt each file\n    zip_filename = os.path.join(directory, \"encrypted_files.zip\")\n    with zipfile.ZipFile(zip_filename, \"w\") as zip_file:\n        for root, dirs, files in os.walk(directory):\n            for filename in files:\n                filepath = os.path.join(root, filename)\n                # Encrypt the file contents\n                with open(filepath, \"rb\") as file:\n                    file_contents = file.read()\n                    encrypted_contents = rsa.encrypt(file_contents, public_key)\n                    # Store the encrypted file in the zip file\n                    zip_file.writestr(filename, b64encode(encrypted_contents))\n\n    return public_key, zip_filename", "compilation_passed": true, "time": 1.0030453205108643, "tests_passed": false, "error": "TimeoutError"}
{"code": "# Generate RSA key pair\n    (public_key, private_key) = rsa.newkeys(2048)\n\n    # Encrypt each file with the public key\n    files = [os.path.join(directory, file_name)\n             for file_name in os.listdir(directory)]\n\n    zip_file = zipfile.ZipFile(\"encrypted_files.zip\", \"w\")\n\n    for file_path in files:\n        with open(file_path, \"rb\") as f:\n            file_data = f.read()\n            encrypted_data = rsa.encrypt(file_data, public_key)\n            zip_file.writestr(file_path, b64encode(encrypted_data))\n\n    zip_file.close()\n\n    return public_key, \"encrypted_files.zip\"", "compilation_passed": true, "time": 1.002774953842163, "tests_passed": false, "error": "TimeoutError"}
{"code": "# Generate a 2048 bit RSA key pair\n    private_key = rsa.generate_private_key(public_exponent=65537, key_size=2048)\n    public_key = private_key.public_key()\n\n    # Get a list of all the files in the directory and its subdirectories\n    files = [os.path.join(root, file) for root, _, files in os.walk(directory) for file in files]\n\n    # Create a new zip file and add each encrypted file to it\n    zip_name = f\"encrypted_{directory}.zip\"\n    with zipfile.ZipFile(zip_name, \"w\") as zip_file:\n        for file in files:\n            # Encrypt the file contents and write them to the zip file\n            with open(file, \"rb\") as f:\n                data = f.read()\n                encrypted_data = rsa.encrypt(data, public_key)\n                zip_file.writestr(os.path.basename(file), b64", "compilation_passed": false, "time": 0.0003001689910888672, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Generate RSA public and private keys\n    pub_key, priv_key = rsa.newkeys(1024)\n\n    # Create a zip file to store the encrypted files\n    zipfile_name = f'{directory}_encrypted.zip'\n    zipf = zipfile.ZipFile(zipfile_name, 'w')\n\n    # Walk through the directory to find all files and encrypt them using RSA\n    for root, dirs, files in os.walk(directory):\n        for file_name in files:\n            file_path = os.path.join(root, file_name)\n            with open(file_path, 'rb') as file:\n                file_data = file.read()\n                # Encrypt each byte of data using RSA\n                encrypted_data = [rsa.encrypt(byte, pub_key) for byte in file_data]\n                # Write the encrypted data to the zip file\n                zipf.writestr(file_path, b64encode(encrypted_data))\n\n    zipf.close()\n\n    return pub_key, zipfile", "compilation_passed": true, "time": 0.2497572898864746, "tests_passed": false, "error": "AttributeError"}
{"code": "pubkey, privkey = rsa.newkeys(1024)\n\n    zipfile_name = f'./task_func{zipfile._get_archive_name()}.zip'\n\n    with zipfile.ZipFile(zipfile_name, mode='w') as zip_file:\n        for file in os.listdir(directory):\n            path = os.path.join(directory, file)\n            with open(path, 'rb') as file_to_encrypt:\n                file_bytes = file_to_encrypt.read()\n                encrypted_bytes = rsa.encrypt(file_bytes, pubkey)\n                zip_file.writestr(file, b64encode(encrypted_bytes))\n\n    return pubkey, zipfile_name", "compilation_passed": true, "time": 0.3104372024536133, "tests_passed": false, "error": "AttributeError"}
{"code": "pub_key, priv_key = rsa.newkeys(1024)\n    zip_file_name = \"encrypted_files.zip\"\n    files = os.listdir(directory)\n    files_to_encrypt = [file for file in files if os.path.isfile(os.path.join(directory, file))]\n    if not files_to_encrypt:\n        return None\n    with zipfile.ZipFile(zip_file_name, \"w\") as zip_file:\n        for file in files_to_encrypt:\n            file_path = os.path.join(directory, file)\n            with open(file_path, \"rb\") as f:\n                plaintext = f.read()\n                encrypted = rsa.encrypt(plaintext, pub_key)\n                encrypted_base64 = b64encode(encrypted).decode()\n                zip_file.writestr(file, encrypted_base64)\n    return pub_key, zip_file_name", "compilation_passed": true, "time": 0.29327893257141113, "tests_passed": false, "error": "TypeError"}
{"code": "# Create RSA key pair\n    pub_key, priv_key = rsa.newkeys(512)\n\n    # Create zip file to store encrypted files\n    zip_filename = f\"{directory}.zip\"\n    with zipfile.ZipFile(zip_filename, \"w\") as zip_file:\n        # Recursively walk the directory and encrypt each file\n        for root, dirs, files in os.walk(directory):\n            for filename in files:\n                file_path = os.path.join(root, filename)\n                with open(file_path, \"rb\") as file:\n                    file_data = file.read()\n                    encrypted_data = rsa.encrypt(file_data, pub_key)\n                    zip_file.writestr(filename, b64encode(encrypted_data))\n\n    return pub_key, zip_filename", "compilation_passed": true, "time": 0.18910694122314453, "tests_passed": true, "error": null}
{"code": "# Create RSA keys\n    public_key, private_key = rsa.newkeys(2048)\n\n    # Encrypt files\n    zip_name = \"encrypted.zip\"\n    with zipfile.ZipFile(zip_name, \"w\") as zip_file:\n        for root, dirs, files in os.walk(directory):\n            for file in files:\n                file_path = os.path.join(root, file)\n                file_bytes = b64encode(rsa.encrypt(file_path.encode(), public_key))\n                zip_file.writestr(file, file_bytes)\n\n    return public_key, zip_name", "compilation_passed": true, "time": 1.0022838115692139, "tests_passed": false, "error": "TimeoutError"}
{"code": "# Generate RSA key pair\n    private_key = rsa.generate_private_key(\n        public_exponent=65537,\n        key_size=2048,\n    )\n    public_key = private_key.public_key()\n\n    # Encrypt files with RSA and save to zip file\n    zip_file_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zip_file_name, 'w') as zip_file:\n        for root, dirs, files in os.walk(directory):\n            for file in files:\n                file_path = os.path.join(root, file)\n                file_data = open(file_path, 'rb').read()\n                encrypted_data = rsa.encrypt(file_data, public_key)\n                zip_file.writestr(file, b64encode(encrypted_data).decode())\n\n    return public_key, zip_file_name", "compilation_passed": true, "time": 0.0018439292907714844, "tests_passed": false, "error": "AttributeError"}
{"code": "if not os.path.exists(directory):\n        raise ValueError('The specified directory does not exist.')\n\n    pub_key, priv_key = rsa.newkeys(2048)\n\n    file_paths = [os.path.join(root, name)\n                  for root, _, names in os.walk(directory) for name in names]\n\n    with zipfile.ZipFile('encrypted_files.zip', 'w') as zip_file:\n        for file_path in file_paths:\n            if os.path.isfile(file_path):\n                with open(file_path, 'rb') as file:\n                    file_data = file.read()\n                    encrypted_data = rsa.encrypt(file_data, pub_key)\n                    zip_file.writestr(file_path, b64encode(encrypted_data))\n\n    return pub_key, 'encrypted_files.zip'", "compilation_passed": true, "time": 1.0023558139801025, "tests_passed": false, "error": "TimeoutError"}
{"code": "# Generate RSA public and private keys\n    private_key = rsa.generate_private_key(public_exponent=65537, key_size=2048)\n    public_key = private_key.public_key()\n\n    # Encrypt each file in directory using RSA\n    zipfile_name = f'{directory}.zip'\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        for file in os.listdir(directory):\n            # Skip if file does not exist or is directory\n            if not os.path.isfile(file):\n                continue\n\n            with open(file, 'rb') as f:\n                encrypted_file_data = rsa.encrypt(f.read(), public_key)\n                zipf.writestr(file, b64encode(encrypted_file_data))\n\n    # Return public key and zip file name\n    return public_key, zipfile_name", "compilation_passed": true, "time": 0.0014209747314453125, "tests_passed": false, "error": "AttributeError"}
{"code": "pub_key, priv_key = rsa.newkeys(1024)\n    file_names = os.listdir(directory)\n    with zipfile.ZipFile(\"encrypted.zip\", \"w\") as zipf:\n        for file_name in file_names:\n            with open(os.path.join(directory, file_name), \"rb\") as f:\n                data = f.read()\n                encrypted_data = rsa.encrypt(data, pub_key)\n                zipf.writestr(file_name, b64encode(encrypted_data))\n    return pub_key, \"encrypted.zip\"", "compilation_passed": true, "time": 0.06819701194763184, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "(pubkey, privkey) = rsa.newkeys(1024)\n\n    with zipfile.ZipFile(f'encrypted.zip', 'w') as myzip:\n        for fname in os.listdir(directory):\n            if fname.endswith('.txt'):\n                with open(f'{directory}/{fname}', 'r') as file:\n                    data = file.read().encode('utf-8')\n                    cipherdata = rsa.encrypt(data, pubkey)\n                    myzip.writestr(fname, b64encode(cipherdata))\n    return pubkey, myzip.filename", "compilation_passed": true, "time": 0.43738484382629395, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "key = rsa.newkeys(1024)\n    public_key = key[0]\n    private_key = key[1]\n    with zipfile.ZipFile(\"files.zip\", \"w\", zipfile.ZIP_DEFLATED) as zip_file:\n        for root, dirs, files in os.walk(directory):\n            for file_name in files:\n                file_path = os.path.join(root, file_name)\n                with open(file_path, \"rb\") as file:\n                    encrypted_content = rsa.encrypt(file.read(), public_key)\n                    zip_file.writestr(file_name, b64encode(encrypted_content))\n\n    return public_key, \"files.zip\"", "compilation_passed": true, "time": 0.5457899570465088, "tests_passed": false, "error": "FileNotFoundError"}
