{"code": "with open('private.pem', 'rb') as f:\n        private_key = rsa.PrivateKey.load_pkcs1(f.read())\n\n    with open(file_path, 'rb') as f:\n        file_hash = hashlib.sha256(f.read()).digest()\n\n    signature = rsa.sign(file_hash, private_key, 'SHA-256')\n    signature_base64 = base64.b64encode(signature).decode()\n    return signature_base64", "compilation_passed": true, "time": 0.0010459423065185547, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "hash_obj = hashlib.sha256()\n    with open(file_path, 'rb') as file:\n        for line in file:\n            hash_obj.update(line)\n    hashed_str = hash_obj.digest()\n    with open('private.pem', 'rb') as key_file:\n        private_key = rsa.PrivateKey.load_pkcs1(key_file.read())\n        signed_hash = rsa.sign(hashed_str, private_key, 'SHA-256')\n    return base64.b64encode(signed_hash).decode('utf-8')", "compilation_passed": true, "time": 0.0009260177612304688, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "with open(file_path, 'rb') as file:\n        contents = file.read()\n        hash_object = hashlib.sha256(contents)\n        hash_value = hash_object.digest()\n        key = rsa.key.PrivateKey.load_pkcs1(open('private.pem').read())\n        signature = rsa.sign(hash_value, key, 'SHA-256')\n        signed_hash = base64.b64encode(signature).decode()\n    return signed_hash", "compilation_passed": true, "time": 0.000885009765625, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "with open(file_path, 'rb') as f:\n        data = f.read()\n    hashed = hashlib.sha256(data).digest()\n    with open('private.pem', 'rb') as f:\n        private_key = rsa.PrivateKey.load_pkcs1(f.read())\n    signature = rsa.sign(hashed, private_key, 'SHA-256')\n    base64_signature = base64.b64encode(signature)\n    return base64_signature", "compilation_passed": true, "time": 0.0008871555328369141, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "hash = hashlib.sha256()\n    with open(file_path, \"rb\") as file:\n        while chunk := file.read(4096):\n            hash.update(chunk)\n    file.close()\n    file_hash = hash.digest()\n    with open(\"private.pem\", \"rb\") as private_key_file:\n        private_key = rsa.PrivateKey.load_pkcs1(private_key_file.read())\n        private_key_file.close()\n        sig = rsa.sign(file_hash, private_key, \"SHA-256\")\n        sig = base64.b64encode(sig)\n        return sig", "compilation_passed": true, "time": 0.0009169578552246094, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "with open(file_path, 'rb') as f:\n        file_contents = f.read()\n        hash_object = hashlib.sha256(file_contents)\n        hash_string = hash_object.digest()\n\n    with open('private.pem', 'rb') as f:\n        private_key = rsa.PrivateKey.load_pkcs1(f.read())\n        encrypted_data = rsa.encrypt(hash_string, private_key)\n    return base64.b64encode(encrypted_data).decode('utf-8')", "compilation_passed": true, "time": 0.0008749961853027344, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "with open('private.pem', 'rb') as private_file:\n        private_key = rsa.PrivateKey.load_pkcs1(private_file.read())\n\n    with open(file_path, 'r') as file:\n        file_contents = file.read()\n\n    file_hash = hashlib.sha256(file_contents.encode()).digest()\n    signature = rsa.sign(file_hash, private_key, 'SHA-256')\n    signature_base64 = base64.b64encode(signature).decode('utf-8')\n\n    return signature_base64", "compilation_passed": true, "time": 0.0008749961853027344, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "with open(file_path, 'r') as f:\n        contents = f.read().encode('utf-8')\n        hash_obj = hashlib.sha256(contents)\n        file_hash = hash_obj.digest()\n        with open('private.pem', 'rb') as private_key_file:\n            private_key = rsa.PrivateKey.load_pkcs1(private_key_file.read())\n            signed_hash = rsa.sign(file_hash, private_key, 'SHA-256')\n            return base64.b64encode(signed_hash).decode('utf-8')", "compilation_passed": true, "time": 0.0008728504180908203, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "with open(file_path, \"rb\") as f:\n        file_contents = f.read()\n    hash_obj = hashlib.sha256(file_contents)\n    hashed_contents = hash_obj.digest()\n    with open('private.pem', 'r') as f:\n        private_key_pem = f.read()\n    private_key = rsa.PrivateKey.load_pkcs1(private_key_pem)\n    signed_hash = rsa.sign(hashed_contents, private_key, 'SHA-256')\n    base64_signed_hash = base64.b64encode(signed_hash).decode('utf-8')\n    return base64_signed_hash", "compilation_passed": true, "time": 0.0008802413940429688, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "hash_obj = hashlib.sha256()\n    with open(file_path, 'rb') as f:\n        hash_obj.update(f.read())\n    message = hash_obj.digest()\n    key = rsa.PrivateKey.load_pkcs1(open('private.pem').read())\n    signature = rsa.sign(message, key, 'SHA-256')\n    signature = base64.b64encode(signature)\n    return signature", "compilation_passed": true, "time": 0.0010030269622802734, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "with open(file_path, 'rb') as file:\n        contents = file.read()\n    hash = hashlib.sha256(contents).digest()\n    private_key = rsa.PrivateKey.load_pkcs1('{}'.format(open(\"private.pem\").read()))\n    signature = rsa.sign(hash, private_key, \"SHA-256\")\n    return base64.b64encode(signature).decode()", "compilation_passed": true, "time": 0.0008592605590820312, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Load the private key from a PEM file\n    with open('private.pem', 'rb') as f:\n        privkey = rsa.PrivateKey.load_pkcs1(f.read())\n\n    # Read the file contents into memory\n    with open(file_path, 'rb') as f:\n        file_contents = f.read()\n\n    # Hash the file contents\n    file_hash = hashlib.sha256(file_contents).digest()\n\n    # Sign the hash using the private key\n    signature = rsa.sign(file_hash, privkey, 'SHA-256')\n\n    # Encode the signed hash in base64 for transmission\n    encoded_signature = base64.urlsafe_b64encode(signature).decode('ascii')\n\n    # Return the base64 encoded signed hash of the file\n    return encoded_signature", "compilation_passed": true, "time": 0.0008618831634521484, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "with open(file_path, 'rb') as f:\n        file_contents = f.read()\n\n    hash_object = hashlib.sha256(file_contents)\n    file_hash = hash_object.digest()\n\n    with open('private.pem', 'rb') as f:\n        private_key = rsa.PrivateKey.load_pkcs1(f.read(), format='PEM')\n\n    signed_hash = rsa.sign(file_hash, private_key, 'SHA-256')\n    signed_hash_base64 = base64.b64encode(signed_hash).decode()\n\n    return signed_hash_base64", "compilation_passed": true, "time": 0.0008738040924072266, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Generate hash\n    with open(file_path, \"rb\") as f:\n        hash_object = hashlib.sha256(f.read())\n    hash = hash_object.digest()\n\n    # Load private key and sign hash\n    private_key = rsa.key.PrivateKey.load_pkcs1(open('private.pem').read())\n    signature = base64.b64encode(rsa.sign(hash, private_key, 'SHA-256'))\n    return signature", "compilation_passed": true, "time": 0.0008451938629150391, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Load the private key\n    with open('private.pem', 'rb') as f:\n        private_key = rsa.PrivateKey.load_pkcs1(f.read())\n\n    # Calculate the hash of the file contents\n    with open(file_path, 'rb') as f:\n        data = f.read()\n        file_hash = hashlib.sha256(data).digest()\n\n    # Sign the hash using the private key\n    signature = rsa.sign(file_hash, private_key, 'SHA-256')\n\n    # Encode the signature in base64 for transport and storage\n    base64_signature = base64.b64encode(signature)\n\n    # Return the base64 signature\n    return base64_signature.decode('utf-8')", "compilation_passed": true, "time": 0.000865936279296875, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "with open(file_path, \"r\", encoding='utf-8') as file:\n        content = file.read()\n\n    hash_content = hashlib.sha256(content.encode(\"utf-8\")).digest()\n\n    with open('private.pem', \"rb\") as file:\n        private_key = rsa.PrivateKey.load_pkcs1(file.read())\n\n    signed_hash = rsa.sign(hash_content, private_key, \"SHA-256\")\n\n    return base64.b64encode(signed_hash).decode('utf-8')", "compilation_passed": true, "time": 0.0008718967437744141, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "with open(file_path, 'rb') as file:\n        data = file.read()\n    hashed_data = hashlib.sha256(data).digest()\n    with open('private.pem', 'rb') as file:\n        private_key = rsa.PrivateKey.load_pkcs1(file.read())\n    signed_hash = rsa.sign(hashed_data, private_key, 'SHA-256')\n    return base64.b64encode(signed_hash).decode()", "compilation_passed": true, "time": 0.0008602142333984375, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Load the private RSA key\n    private_key = rsa.PrivateKey.load_pkcs1(open('private.pem', 'r').read())\n\n    # Open the file and read its contents\n    with open(file_path, 'r') as f:\n        contents = f.read()\n\n    # Generate a hash of the file contents using SHA-256\n    hash_object = hashlib.sha256(contents.encode())\n    hex_digest = hash_object.hexdigest()\n\n    # Sign the hash with the private RSA key\n    signature = rsa.sign(hex_digest.encode(), private_key, 'SHA-256')\n\n    # Encode the signature in base64\n    signature_base64 = base64.b64encode(signature).decode('utf-8')\n    return signature_base64", "compilation_passed": true, "time": 0.0008759498596191406, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "hash_object = hashlib.sha256()\n    with open(file_path, \"rb\") as f:\n        hash_object.update(f.read())\n\n    hashed_contents = hash_object.digest()\n    private_key = rsa.PrivateKey.load_pkcs1(open(\"private.pem\", \"rb\").read())\n    signed_hash = rsa.sign(hashed_contents, private_key, \"SHA-256\")\n\n    return base64.b64encode(signed_hash).decode()", "compilation_passed": true, "time": 0.0008490085601806641, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "with open('private.pem', 'rb') as f:\n        private_key = rsa.PrivateKey.load_pkcs1(f.read())\n    with open(file_path, 'rb') as f:\n        data = f.read()\n    hash = hashlib.sha256(data).digest()\n    sig = rsa.sign(hash, private_key, 'SHA-256')\n    return base64.b64encode(sig).decode()", "compilation_passed": true, "time": 0.0008630752563476562, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "with open(file_path, 'rb') as f:\n        file_contents = f.read()\n\n    file_hash = hashlib.sha256(file_contents).digest()\n\n    with open('private.pem', 'rb') as f:\n        private_key = rsa.PrivateKey.load_pkcs1(f.read())\n\n    signed_hash = rsa.sign(file_hash, private_key, 'SHA-256')\n\n    return base64.b64encode(signed_hash).decode('utf-8')", "compilation_passed": true, "time": 0.0008482933044433594, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Read the file's contents\n    with open(file_path, 'rb') as f:\n        data = f.read()\n\n    # Hash the contents with SHA-256\n    h = hashlib.sha256(data)\n    hash_data = h.digest()\n\n    # Load the private key\n    with open('private.pem', 'rb') as f:\n        private_key = rsa.PrivateKey.load_pkcs1(f.read())\n\n    # Sign the hash with the private key\n    signature = rsa.sign(hash_data, private_key, 'SHA-256')\n\n    # Encode the signature in base64\n    signed_hash = base64.b64encode(signature).decode('utf-8')\n\n    return signed_hash", "compilation_passed": true, "time": 0.0009441375732421875, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "with open(file_path, \"rb\") as file:\n        file_data = file.read()\n        hash = hashlib.sha256(file_data).digest()\n\n        with open(\"private.pem\", \"rb\") as private_key_file:\n            private_key = rsa.PrivateKey.load_pkcs1(private_key_file.read())\n\n        signed_hash = rsa.sign(hash, private_key, \"SHA-256\")\n        return base64.b64encode(signed_hash).decode(\"utf-8\")", "compilation_passed": true, "time": 0.0008618831634521484, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "try:\n        with open(file_path, 'rb') as f:\n            file_hash = hashlib.sha256(f.read()).digest()\n            private_key = rsa.PrivateKey.load_pkcs1(open('private.pem', 'rb').read())\n            signature = rsa.sign(file_hash, private_key, 'SHA-256')\n            return base64.b64encode(signature).decode('utf-8')\n    except Exception as e:\n        print(f\"Error signing hash: {str(e)}\")\n        return ''", "compilation_passed": true, "time": 0.0008950233459472656, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "with open(file_path, \"r\") as f:\n        contents = f.read()\n    hash = hashlib.sha256(contents.encode()).digest()\n    with open(\"private.pem\", \"rb\") as f:\n        key = rsa.PrivateKey.load_pkcs1(f.read())\n    signature = rsa.sign(hash, key, \"SHA-256\")\n    return base64.b64encode(signature).decode()", "compilation_passed": true, "time": 0.0008580684661865234, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "try:\n        with open(file_path, 'rb') as f:\n            data = f.read()\n    except IOError as e:\n        raise ValueError('Error reading file: {}'.format(e))\n    else:\n        hash_obj = hashlib.sha256(data)\n        hash_value = hash_obj.digest()\n        with open('private.pem', 'rb') as f:\n            private_key = rsa.PrivateKey.load_pkcs1(f.read())\n        signature = rsa.sign(hash_value, private_key, 'SHA-256')\n        encoded_signature = base64.b64encode(signature)\n        return encoded_signature.decode('utf-8')", "compilation_passed": true, "time": 0.0008907318115234375, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "with open(file_path, 'rb') as f:\n        data = f.read()\n    hashed_data = hashlib.sha256(data).digest()\n    with open('private.pem', 'rb') as f:\n        private_key_pem = f.read()\n        private_key = rsa.PrivateKey.load_pkcs1(private_key_pem)\n    signed_hash = rsa.sign(hashed_data, private_key, 'SHA-256')\n    signed_hash_base64 = base64.b64encode(signed_hash)\n    return signed_hash_base64", "compilation_passed": true, "time": 0.0008592605590820312, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Open the file in binary mode\n    with open(file_path, \"rb\") as f:\n        # Read the contents of the file\n        contents = f.read()\n\n    # Generate a hash of the file contents using SHA-256\n    hashed_contents = hashlib.sha256(contents).digest()\n\n    # Load the private key from 'private.pem' and generate a signature of the hash\n    private_key = rsa.PrivateKey.load_pkcs1(open(\"private.pem\", \"rb\").read())\n    signature = rsa.sign(hashed_contents, private_key, 'SHA-256')\n\n    # Encode the signature in base64 and return it as a string\n    return base64.b64encode(signature).decode(\"utf-8\")", "compilation_passed": true, "time": 0.0008440017700195312, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Read the file contents\n    with open(file_path, 'rb') as f:\n        contents = f.read()\n\n    # Hash the contents using SHA-256\n    hash_object = hashlib.sha256(contents)\n    hex_digest = hash_object.hexdigest()\n\n    # Encode the hash as bytes\n    hash_bytes = hex_digest.encode()\n\n    # Generate a private RSA key from the 'private.pem' file\n    with open('private.pem', 'rb') as f:\n        private_key_data = f.read()\n    private_key = rsa.PrivateKey.load_pkcs1(private_key_data)\n\n    # Sign the hash with the private key\n    signature = rsa.sign(hash_bytes, private_key, 'SHA-256')\n\n    # Encode the signature in base64\n    signature_base64 = base64.b64encode(signature)\n    return signature_base64.decode('utf-8')", "compilation_passed": true, "time": 0.0008749961853027344, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "with open(file_path, \"rb\") as f:\n        file_contents = f.read()\n    file_hash = hashlib.sha256(file_contents).digest()\n    private_key = rsa.PrivateKey.load_pkcs1(open(\"private.pem\").read())\n    signature = rsa.sign(file_hash, private_key, \"SHA-256\")\n    return base64.b64encode(signature).decode()", "compilation_passed": true, "time": 0.0008478164672851562, "tests_passed": false, "error": "FileNotFoundError"}
