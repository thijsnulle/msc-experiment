{"code": "with open(input_file, \"r\") as file:\n        data = json.load(file)\n    result = defaultdict(dict)\n    plots = []\n    for key in data[0].keys():\n        values = np.array([d[key] for d in data])\n        mean = np.mean(values)\n        median = np.median(values)\n        result[key] = {\"mean\": mean, \"median\": median}\n        fig, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [mean, median])\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.058480024337768555, "tests_passed": false, "error": "KeyError"}
{"code": "with open(input_file, 'r') as f:\n        data = json.load(f)\n\n    result = {}\n    for d in data:\n        for k in d:\n            if k not in result:\n                result[k] = defaultdict(list)\n            result[k]['mean'].append(d[k])\n            result[k]['median'].append(d[k])\n\n    for k in result:\n        result[k]['mean'] = np.mean(result[k]['mean'])\n        result[k]['median'] = np.median(result[k]['median'])\n\n    plots = []\n    for key, values in result.items():\n        ax = plt.figure().gca()\n        ax.bar(['Mean', 'Median'], [values['mean'], values['median']])\n        ax.set_title(key)\n        plots.append(ax)\n\n    return result, plots", "compilation_passed": true, "time": 0.2932460308074951, "tests_passed": false, "error": "TypeError"}
{"code": "with open(input_file, \"r\") as file:\n        data = json.load(file)\n    result = defaultdict(dict)\n    for record in data:\n        for key, value in record.items():\n            result[key][\"mean\"] = np.mean(value)\n            result[key][\"median\"] = np.median(value)\n\n    plots = []\n    for key, values in result.items():\n        labels = [\"mean\", \"median\"]\n        values = [values[label] for label in labels]\n        bar_colors = [\"tab:orange\", \"tab:blue\"]\n        ax = plt.bar(labels, values, color=bar_colors)\n        ax.set_xlabel('Statistics')\n        ax.set_ylabel('Value')\n        ax.set_title(key)\n        plots.append(ax)\n\n    return result, plots", "compilation_passed": true, "time": 0.017768144607543945, "tests_passed": false, "error": "AttributeError"}
{"code": "# Read input JSON file into a list of dictionaries\n    with open(input_file, 'r') as file:\n        data = json.load(file)\n\n    # Get the keys from the dictionaries\n    keys = set().union(*data)\n\n    # Create a defaultdict to store the values for each key\n    values_dict = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            values_dict[key].append(value)\n\n    # Calculate the mean and median for each key using numpy\n    result = {}\n    for key in keys:\n        result[key] = {}\n        if key in values_dict:\n            values = np.array(values_dict[key])\n            result[key]['mean'] = np.mean(values)\n            result[key]['median'] = np.median(values)\n\n    # Create a list of bar charts using matplotlib\n    plots = []\n    for key, value in result.items():\n        means, medians = value['mean'], value['median']\n        plot = plt.bar", "compilation_passed": true, "time": 0.002428293228149414, "tests_passed": false, "error": "TypeError"}
{"code": "data = json.load(open(input_file, 'r'))\n    result = {}\n    for d in data:\n        for k, v in d.items():\n            result[k] = v\n\n    result = defaultdict(list, result)\n\n    for k, v in result.items():\n        result[k] = {'mean': np.mean(v), 'median': np.median(v)}\n\n    fig, axs = plt.subplots(len(result.keys()), 1, figsize=(5, 5), sharex=True)\n    if not isinstance(axs, list):\n        axs = [axs]\n    for i, (key, value) in enumerate(result.items()):\n        axs[i].bar(x=[0, 1], height=list(value.values()))\n        axs[i].set_xticks([0, 1])\n        axs[i].set_xticklabels(['Mean', 'Median'])\n        axs[i].set_title(key)\n\n    return", "compilation_passed": true, "time": 0.017850875854492188, "tests_passed": false, "error": "AttributeError"}
{"code": "with open(input_file, 'r', encoding='utf-8') as f:\n        data = json.load(f)\n\n    # create a defaultdict to store the values for each key\n    key_values = defaultdict(list)\n\n    for item in data:\n        for key, value in item.items():\n            key_values[key].append(value)\n\n    # calculate mean and median using numpy\n    result = {}\n    for key, values in key_values.items():\n        mean = np.mean(values)\n        median = np.median(values)\n        result[key] = {'mean': mean, 'median': median}\n\n    # create bar charts for mean and median\n    plots = []\n    for key, values in result.items():\n        ax = plt.gca()\n        ax.bar(['mean', 'median'], [values['mean'], values['median']])\n        ax.set_title(key)\n        ax.set_xlabel('Mean vs Median')\n        ax.set_ylabel('Values')\n        plots.append", "compilation_passed": true, "time": 0.015157938003540039, "tests_passed": false, "error": "TypeError"}
{"code": "data = json.load(open(input_file))\n    result = defaultdict(dict)\n    for i in data:\n        for key in i:\n            if key not in result:\n                result[key] = []\n            result[key].append(i[key])\n\n    for key in result:\n        arr = np.array(result[key])\n        mean = np.mean(arr)\n        median = np.median(arr)\n        result[key] = {\"mean\": mean, \"median\": median}\n\n    plots = []\n    for key in result:\n        ax = plt.subplot()\n        ax.bar(['Mean', 'Median'], [result[key][\"mean\"], result[key][\"median\"]],\n                color=[\"red\", \"blue\"])\n        ax.set_xlabel(key)\n        ax.set_title(key)\n        plots.append(ax)\n\n    return result, plots", "compilation_passed": true, "time": 0.03171992301940918, "tests_passed": false, "error": "TypeError"}
{"code": "# Read JSON file\n    with open(input_file, 'r') as f:\n        input_data = json.load(f)\n\n    # Create defaultdict to store values for each key\n    values_dict = defaultdict(list)\n\n    # Loop through input data and extract values for each key\n    for item in input_data:\n        for key, value in item.items():\n            values_dict[key].append(value)\n\n    # Calculate mean and median using numpy\n    result = {}\n    for key, values in values_dict.items():\n        result[key] = {'mean': np.mean(values), 'median': np.median(values)}\n\n    # Visualize the results using bar charts\n    plots = []\n    for key, values in result.items():\n        plot = plt.bar(list(values.keys()), list(values.values()), label=key)\n        plots.append(plot)\n        plt.legend(loc='upper right')\n\n    return result, plots", "compilation_passed": true, "time": 0.015900135040283203, "tests_passed": true, "error": null}
{"code": "with open(input_file, 'r') as f:\n        data = json.load(f)\n\n    # Create a dictionary to store the values for each key\n    values_dict = defaultdict(list)\n\n    # Extract the values for each key from the dictionaries\n    for dictionary in data:\n        for key in dictionary:\n            values_dict[key].append(dictionary[key])\n\n    # Calculate the mean and median for each key\n    result = {}\n    for key, values in values_dict.items():\n        result[key] = {\n            'mean': np.mean(values),\n            'median': np.median(values),\n        }\n\n    # Plotting\n    plots = []\n    for key, values in values_dict.items():\n        ax = plt.subplot()\n        ax.bar([\"Mean\", \"Median\"], [result[key]['mean'], result[key]['median']])\n        ax.set_title(key)\n        plots.append(ax)\n\n    return result, plots", "compilation_passed": true, "time": 0.03377103805541992, "tests_passed": false, "error": "TypeError"}
{"code": "# Read JSON file and store dictionaries in data\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n\n    # Initialize an empty dictionary to store mean and median values for each key\n    result = defaultdict(dict)\n\n    # Iterate over the keys in the dictionaries\n    for key in data[0].keys():\n        # Extract the values corresponding to the key\n        vals = [entry[key] for entry in data]\n        # Calculate the mean and median using numpy\n        mean = np.mean(vals)\n        median = np.median(vals)\n\n        # Store the mean and median values for the current key in the result dictionary\n        result[key]['mean'] = mean\n        result[key]['median'] = median\n\n    # Create a list to store the bar chart plots\n    plots = []\n\n    # Iterate over the keys and their values in the result dictionary\n    for key, values in result.items():\n        # Extract the mean and median values for the current key\n        mean = values['mean']\n        median = values", "compilation_passed": true, "time": 0.0025110244750976562, "tests_passed": false, "error": "TypeError"}
{"code": "result = defaultdict(dict)\n    plots = []\n    with open(input_file, 'r') as json_file:\n        data = json.load(json_file)\n        keys = set()\n        for dictionary in data:\n            keys.update(dictionary.keys())\n        for key in keys:\n            values = [dictionary[key] for dictionary in data if key in dictionary]\n            mean = np.mean(values)\n            median = np.median(values)\n            result[key] = {'mean': mean, 'median': median}\n            # Visualize the mean and median for each key using a bar chart\n            plot = plt.bar([\"mean\", \"median\"], [mean, median], color=[\"g\", \"b\"], width=0.5, tick_label=[f\"{key}\", f\"{key}\"])\n            plots.append(plot)\n    return result, plots", "compilation_passed": true, "time": 0.016774892807006836, "tests_passed": true, "error": null}
{"code": "with open(input_file, \"r\") as f:\n        data = json.load(f)\n\n    result = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for k, v in d.items():\n            result[k][\"sum\"] += v\n            result[k][\"count\"] += 1\n\n    for k, v in result.items():\n        result[k][\"mean\"] = v[\"sum\"] / v[\"count\"]\n        values = [d[k] for d in data]\n        result[k][\"median\"] = np.median(values)\n\n    plots = []\n    for k, v in result.items():\n        ax = plt.bar([\"Mean\", \"Median\"], [v[\"mean\"], v[\"median\"]])\n        ax.set_xlabel(k)\n        plots.append(ax)\n\n    return result, plots", "compilation_passed": true, "time": 0.01592874526977539, "tests_passed": false, "error": "AttributeError"}
{"code": "# Read json file\n    with open(input_file, \"r\") as json_file:\n        data = json.load(json_file)\n\n    result = defaultdict(dict)\n\n    # Calculating mean and median using numpy\n    for i in data:\n        for key in i.keys():\n            result[key] = {'mean':np.mean(i[key]),'median':np.median(i[key])}\n\n    # Create bar chart\n    plots = []\n\n    # Loop for each key and create a separate bar chart for each\n    for key in result:\n        plt.style.use('seaborn-white')\n        fig, ax = plt.subplots()\n\n        labels = [f'Mean: {result[key][\"mean\"]:.2f}',\n                f'Median: {result[key][\"median\"]:.2f}']\n        values = [result[key][\"mean\"], result[key][\"median\"]]\n        colors = ['C2', 'C1']\n\n        ax.bar(labels, values", "compilation_passed": false, "time": 0.00031876564025878906, "tests_passed": false, "error": "SyntaxError"}
{"code": "result = {}\n    plots = []\n    with open(input_file, 'r') as file:\n        data = json.load(file)\n    for d in data:\n        for k, v in d.items():\n            if k not in result:\n                result[k] = {'mean': 0, 'median': 0}\n            result[k]['mean'] += v\n            result[k]['median'] += v\n    for k in result.keys():\n        result[k]['mean'] = np.mean(np.array(result[k]['mean']))\n        result[k]['median'] = np.median(np.array(result[k]['median']))\n        fig, ax = plt.subplots()\n        ax.bar(['mean', 'median'], [result[k]['mean'], result[k]['median']])\n        ax.set_ylabel('value')\n        ax.set_title(f'{k}')\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.05865287780761719, "tests_passed": true, "error": null}
{"code": "with open(input_file, 'r') as f:\n        data = json.load(f)\n\n    # Get all unique keys from the dictionaries\n    keys = set()\n    for d in data:\n        keys.update(d.keys())\n\n    # Create a defaultdict to store values for each key\n    key_values = defaultdict(list)\n    for d in data:\n        for key in keys:\n            if key in d:\n                key_values[key].append(d[key])\n            else:\n                key_values[key].append(0)\n\n    # Calculate mean and median for each key\n    result = {}\n    for key, values in key_values.items():\n        result[key] = {'mean': np.mean(values), 'median': np.median(values)}\n\n    # Visualize the mean and median using bar charts\n    plots = []\n    for key, values in key_values.items():\n        fig, ax = plt.subplots()\n        ax.bar(['mean', 'median'], [result[key]['mean']", "compilation_passed": false, "time": 0.0003070831298828125, "tests_passed": false, "error": "SyntaxError"}
{"code": "with open(input_file, \"r\") as f:\n        input_list = json.load(f)\n\n    # Initialize a dictionary to store the statistics for each key\n    stats = defaultdict(list)\n\n    # Collect statistics for each key in the input dictionaries\n    for dictionary in input_list:\n        for key, value in dictionary.items():\n            stats[key].append(value)\n\n    # Compute mean and median for each key using numpy\n    result = {}\n    for key, values in stats.items():\n        result[key] = {'mean': np.mean(values), 'median': np.median(values)}\n\n    # Create bar charts for mean and median values\n    plots = []\n    for key, values in stats.items():\n        # Get mean and median values for the current key\n        mean_value = result[key]['mean']\n        median_value = result[key]['median']\n\n        # Create a bar chart for the current key\n        fig, ax = plt.subplots()\n        ax.bar(['mean', 'median'], [mean", "compilation_passed": false, "time": 0.00021886825561523438, "tests_passed": false, "error": "SyntaxError"}
{"code": "with open(input_file, \"r\") as f:\n        data = json.load(f)\n\n    results = defaultdict(lambda: {'mean': None, 'median': None})\n\n    # Calculate the mean and median for each key\n    for key in data[0].keys():\n        values = np.array([item[key] for item in data])\n        mean = np.mean(values)\n        median = np.median(values)\n        results[key] = {'mean': mean, 'median': median}\n\n    # Initialize a figure with a grid of subplots\n    fig, axes = plt.subplots(len(data[0]), 2, figsize=(10, 4 * len(data[0])))\n    fig.tight_layout(pad=3.0)\n\n    # Loop through each key in the input dictionaries\n    for i, key in enumerate(data[0].keys()):\n        values = np.array([item[key] for item in data])\n\n        # Create a bar chart with mean and median for each key\n        axes[", "compilation_passed": false, "time": 0.00024390220642089844, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Load the JSON data from the file\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n\n    # Initialize an empty dictionary to store the calculated statistics for each key\n    result = defaultdict(dict)\n\n    # Iterate through the keys in the first dictionary\n    for key in data[0]:\n        # Initialize an empty list to store the values for the current key\n        key_values = []\n\n        # Iterate through each dictionary and extract the value corresponding to the current key\n        for item in data:\n            value = item.get(key, None)\n            if value is not None:\n                key_values.append(value)\n\n        # Calculate the mean and median using numpy\n        mean = np.mean(key_values)\n        median = np.median(key_values)\n\n        # Store the calculated statistics in the result dictionary\n        result[key][\"mean\"] = mean\n        result[key][\"median\"] = median\n\n    # Visualize the calculated statistics using bar charts\n    plots = []\n    for key in result:", "compilation_passed": false, "time": 0.00020575523376464844, "tests_passed": false, "error": "IndentationError"}
{"code": "with open(input_file, 'r') as f:\n        data = json.load(f)\n\n    # Create a dictionary to store the values for each key\n    key_values = defaultdict(list)\n\n    # Iterate over the dictionaries in the input data\n    for item in data:\n        # Iterate over the key-value pairs in each dictionary\n        for key, value in item.items():\n            # Add the value to the list for the corresponding key\n            key_values[key].append(value)\n\n    # Initialize the result dictionary\n    result = {}\n\n    # Iterate over the key-value pairs in the key_values dictionary\n    for key, values in key_values.items():\n        # Calculate the mean and median using numpy\n        mean = np.mean(values)\n        median = np.median(values)\n\n        # Add the calculated statistics to the result dictionary\n        result[key] = {'mean': mean, 'median': median}\n\n    # Initialize a list to store the plots\n    plots = []\n\n    # Iterate over the key-value pairs in the", "compilation_passed": true, "time": 0.002135038375854492, "tests_passed": false, "error": "TypeError"}
{"code": "data = []\n    with open(input_file) as f:\n        for line in f:\n            data.append(json.loads(line))\n    keys = [key for dict_ in data for key in dict_.keys()]\n    keys = list(set(keys))\n\n    result = defaultdict(dict)\n    for key in keys:\n        values = [d[key] for d in data if key in d]\n        result[key][\"mean\"] = np.mean(values)\n        result[key][\"median\"] = np.median(values)\n\n    plots = []\n    for key in result.keys():\n        ax = plt.subplot()\n        ax.bar([\"mean\", \"median\"], [result[key][\"mean\"], result[key][\"median\"]])\n        ax.set_title(key)\n        plots.append(ax)\n\n    return result, plots", "compilation_passed": true, "time": 0.00197601318359375, "tests_passed": false, "error": "AttributeError"}
{"code": "# Open and load the JSON file\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n\n    # Create a defaultdict with a default value of empty list\n    default_dict = defaultdict(list)\n\n    # Populate the defaultdict with values from the data\n    for item in data:\n        for key, value in item.items():\n            default_dict[key].append(value)\n\n    # Create a dictionary to store the results\n    result = {}\n    plots = []\n\n    # Iterate over the keys and calculate the mean and median using numpy\n    for key in default_dict:\n        result[key] = {\n            \"mean\": np.mean(default_dict[key]),\n            \"median\": np.median(default_dict[key]),\n        }\n        fig, ax = plt.subplots()\n        ax.bar(\n            [\"Mean\", \"Median\"],\n            [result[key][\"mean\"], result[key][\"median\"]],\n        )\n        ax.set", "compilation_passed": true, "time": 0.027880191802978516, "tests_passed": false, "error": "TypeError"}
{"code": "with open(input_file) as f:\n        data = json.load(f)\n        result = defaultdict(dict)\n        for d in data:\n            for key, value in d.items():\n                if key in result:\n                    result[key][\"values\"].append(value)\n                else:\n                    result[key] = {\"values\": [value]}\n\n        for key in result:\n            values = np.array(result[key][\"values\"])\n            result[key][\"mean\"] = np.mean(values)\n            result[key][\"median\"] = np.median(values)\n        plots = []\n        for key in result:\n            fig, ax = plt.subplots()\n            ax.bar([\"mean\", \"median\"], [result[key][\"mean\"], result[key][\"median\"]])\n            ax.set_title(key)\n            ax.set_ylim(min(result[key][\"mean\"], result[key][\"median\"]) - 1, max(result[key", "compilation_passed": false, "time": 0.0003483295440673828, "tests_passed": false, "error": "SyntaxError"}
{"code": "with open(input_file, 'r') as f:\n        data = json.load(f)\n\n    # calculate mean and median for each key\n    result = defaultdict(lambda: defaultdict(float))\n    for d in data:\n        for key, value in d.items():\n            result[key]['mean'] += value\n            result[key]['median'] += value\n    for key in result.keys():\n        result[key]['mean'] /= len(data)\n        result[key]['median'] = np.median([d[key] for d in data])\n\n    # visualize mean and median using bar charts\n    plots = []\n    for key in result.keys():\n        ax = plt.subplot(1, len(result), result[key]['index'])\n        ax.bar(['Mean', 'Median'],\n               [result[key]['mean'], result[key]['median']],\n               color=['green', 'orange'],\n               edgecolor='black',\n               tick_label=list(result[key].keys()),\n               label=key)\n", "compilation_passed": true, "time": 0.012476921081542969, "tests_passed": false, "error": "ValueError"}
{"code": "with open(input_file, 'r') as file:\n        data = json.load(file)\n\n    result = {}\n    plots = []\n\n    for dict in data:\n        for key in dict:\n            result[key] = defaultdict(list)\n            result[key]['mean'].append(np.mean(dict[key]))\n            result[key]['median'].append(np.median(dict[key]))\n\n    for key in result:\n        fig, ax = plt.subplots()\n\n        ax.bar(list(result[key].keys()), list(result[key].values()))\n        ax.set_title(key)\n        ax.set_ylim(0, 10)\n\n        plots.append(ax)\n\n    return result, plots", "compilation_passed": true, "time": 0.01876997947692871, "tests_passed": false, "error": "TypeError"}
{"code": "with open(input_file) as file:\n        input_data = json.load(file)\n    input_dict = defaultdict(list)\n    for d in input_data:\n        for key, value in d.items():\n            input_dict[key].append(value)\n    result = defaultdict(dict)\n    plots = []\n    for key, values in input_dict.items():\n        mean_value = np.mean(values)\n        median_value = np.median(values)\n        result[key]['mean'] = mean_value\n        result[key]['median'] = median_value\n        fig = plt.figure()\n        ax = fig.add_axes([0,0,1,1])\n        ax.bar(['Mean', 'Median'], [mean_value, median_value])\n        ax.set_title(key)\n        plots.append(ax)\n    return result, plots", "compilation_passed": true, "time": 0.09601283073425293, "tests_passed": true, "error": null}
{"code": "with open(input_file, 'r') as f:\n        data = json.load(f)\n\n    result = defaultdict(lambda: {'mean': None, 'median': None})\n    plots = []\n\n    for d in data:\n        for k in d:\n            result[k]['mean'] = np.mean(d[k])\n            result[k]['median'] = np.median(d[k])\n\n            # create a bar chart\n            plt.bar(np.array([0]), result[k]['mean'], color='g', label='mean')\n            plt.bar(np.array([0]), result[k]['median'], color='b', label='median')\n            plt.title(f\"{k}\")\n            plots.append(plt.gca())\n\n    return result, plots", "compilation_passed": true, "time": 0.017560958862304688, "tests_passed": true, "error": null}
{"code": "# Load the JSON file\n    with open(input_file, 'r') as f:\n        data = json.load(f)\n\n    # Create a defaultdict to hold the values for each key\n    values_dict = defaultdict(list)\n    for item in data:\n        for key, value in item.items():\n            values_dict[key].append(value)\n\n    # Calculate the mean and median for each key\n    result = {}\n    for key, values in values_dict.items():\n        mean = np.mean(values)\n        median = np.median(values)\n        result[key] = {'mean': mean, 'median': median}\n\n    # Create the plots\n    plots = []\n    for key, values in values_dict.items():\n        fig, ax = plt.subplots()\n        ax.bar(['Mean', 'Median'], [result[key]['mean'], result[key]['median']])\n        ax.set_title(f\"{key}\")\n        plots.append(ax)\n\n    return result, plots", "compilation_passed": true, "time": 0.10347175598144531, "tests_passed": true, "error": null}
{"code": "with open(input_file, 'r') as f:\n        data = json.load(f)\n\n    # Create a list of keys to represent the x-axis labels\n    keys = list(data[0].keys())\n\n    # Initialize dictionaries to store the mean and median of each key\n    means = defaultdict(int)\n    medians = defaultdict(int)\n\n    for d in data:\n        for k in keys:\n            means[k] += d[k]\n            medians[k] += np.median(d.values())\n\n    # Calculate the mean and median for each key\n    for k in keys:\n        means[k] /= len(data)\n        medians[k] /= len(data)\n\n    # Create a result dictionary with keys 'mean' and 'median'\n    result = {k: {'mean': means[k], 'median': medians[k]} for k in keys}\n\n    plots = []\n    for i, k in enumerate(keys):\n        # Create a bar chart for each key, visualizing the mean and median\n", "compilation_passed": false, "time": 0.00026416778564453125, "tests_passed": false, "error": "IndentationError"}
{"code": "# Read the JSON file and convert to a list of dictionaries\n    with open(input_file, \"r\") as f:\n        data = json.load(f)\n\n    # Create a defaultdict to hold the list of values for each key\n    value_dict = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            value_dict[key].append(value)\n\n    # Calculate the mean and median for each key\n    result = {}\n    for key, values in value_dict.items():\n        values = np.array(values)\n        result[key] = {\n            'mean': np.mean(values),\n            'median': np.median(values)\n        }\n\n    # Create bar chart for each key\n    plots = []\n    for key, values in value_dict.items():\n        values = np.array(values)\n        mean = np.mean(values)\n        median = np.median(values)\n        plot = plt.bar([key + '_mean', key + '_median'], [", "compilation_passed": false, "time": 0.00023412704467773438, "tests_passed": false, "error": "SyntaxError"}
{"code": "with open(input_file, \"r\") as f:\n        data = json.load(f)\n\n    # Create a defaultdict for each key across all dictionaries\n    stats = defaultdict(list)\n    for d in data:\n        for key, value in d.items():\n            stats[key].append(value)\n\n    result = {}\n    plots = []\n\n    # Calculate mean and median for each key\n    for key, values in stats.items():\n        # Create a new figure and axis\n        fig, ax = plt.subplots()\n        ax.bar([\"mean\", \"median\"], [np.mean(values), np.median(values)], color=[\"r\", \"b\"])\n        ax.set_title(key)\n        # Save the plot\n        fig.savefig(f\"plot_{key}.png\")\n        plt.close(fig)\n\n        result[key] = {\"mean\": np.mean(values), \"median\": np.median(values)}\n        plots.append(ax)\n\n    return result", "compilation_passed": true, "time": 0.08314108848571777, "tests_passed": true, "error": null}
