{"code": "sales = {animal: 0 for animal in animals}  # create a dictionary with animal types and initial count 0\n    num_customers = stats.poisson.rvs(mean, size=1)[0]  # generate a Poisson-distributed random number of customers\n\n    for i in range(num_customers):\n        # choose a random animal type for sale\n        animal = random.choice(animals)\n        # increment the sale count for that animal type\n        sales[animal] += 1\n\n    # print the sales summary\n    total_sales = sum(sales.values())\n    if total_sales > 0:\n        print(\"Sales Summary:\")\n        for animal, count in sales.items():\n            if count > 0:\n                print(f\"{animal}: {count}\")\n    else:\n        print(\"No sales today.\")\n\n    return sales  # return the sales dictionary", "compilation_passed": true, "time": 0.0022611618041992188, "tests_passed": false, "error": "IndexError"}
{"code": "sales = {animal: 0 for animal in animals}\n    for _ in range(stats.poisson(mean).rvs()):\n        sales[random.choice(animals)] += 1\n    for animal, num_sales in sales.items():\n        print(f\"{animal}: {num_sales} sold\")\n    return sales", "compilation_passed": true, "time": 0.0020647048950195312, "tests_passed": false, "error": "IndexError"}
{"code": "pass", "compilation_passed": true, "time": 0.0018687248229980469, "tests_passed": false, "error": "TypeError"}
{"code": "sales = dict()\n    for animal in animals:\n        sales[animal] = 0\n    for _ in range(stats.poisson(mean).rvs()):\n        sales[random.choice(animals)] += 1\n    print(\"Summary of sales:\")\n    for animal, sale in sales.items():\n        print(f\"- {animal}: {sale} sales\")\n    return sales", "compilation_passed": true, "time": 0.0020110607147216797, "tests_passed": false, "error": "IndexError"}
{"code": "# Simulate sales in a pet shop based on a randomly determined number of customers.\n    customers = stats.poisson.rvs(mu=mean, size=1)\n    sales = {animal: 0 for animal in animals}\n    for i in range(customers[0]):\n        # Each customer randomly buys one type of animal from the specified list of animals.\n        animal = random.choice(animals)\n        # The function displays and returns a summary of the sales, where the number of customers \n        # follows a Poisson distribution with the specified mean (mu).\n        sales[animal] += 1\n\n    # Print a summary of the sales\n    print(\"Sales Summary:\")\n    for animal, sales in sorted(sales.items()):\n        print(f\"{animal}: {sales} sales\")\n\n    return sales", "compilation_passed": true, "time": 0.0020761489868164062, "tests_passed": false, "error": "TypeError"}
{"code": "num_customers = np.random.poisson(mean)  # Generate a random number of customers following Poisson distribution\n    sales = {}\n    for _ in range(num_customers):\n        random_animal = np.random.choice(animals)  # Choose a random animal type\n        if random_animal not in sales:\n            sales[random_animal] = 0\n        sales[random_animal] += 1  # Increase the number of sales\n\n    return sales", "compilation_passed": true, "time": 0.0015430450439453125, "tests_passed": false, "error": "NameError"}
{"code": "num_customers = stats.poisson.rvs(mu=mean, size=1)\n    sales = {animal: 0 for animal in animals}\n    for _ in range(num_customers[0]):\n        animal = random.choice(animals)\n        sales[animal] += 1\n    print(sales)\n    return sales", "compilation_passed": true, "time": 0.0020570755004882812, "tests_passed": false, "error": "IndexError"}
{"code": "# Initialize the dictionary\n    sales = {animal: 0 for animal in animals}\n    # Determine the number of customers\n    num_customers = stats.distributions.poisson.rvs(mean, size=1)\n    # Simulate the sales\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n\n    # Display and return the sales summary\n    print(\"Sales Summary:\")\n    for animal, count in sales.items():\n        print(f\"{animal}: {count}\")\n    return sales", "compilation_passed": true, "time": 0.001947164535522461, "tests_passed": false, "error": "TypeError"}
{"code": "assert all(isinstance(animal, str) for animal in animals), 'All elements of animals must be strings'\n    assert isinstance(mean, (int, float)) and mean > 0, 'Mean must be a positive number'\n    n_customers = stats.poisson.rvs(mean)\n    sales = {animal: 0 for animal in animals}\n    for _ in range(n_customers):\n        sales[random.choice(animals)] += 1\n    print(f'{\"Animal\":<10}{\"Sales\":>10}')\n    for animal in sales:\n        print(f'{animal:<10}{sales[animal]:>10}')\n    print(f'{\"Total\":<10}{sum(sales.values()):>10}')\n    return sales", "compilation_passed": true, "time": 0.002002239227294922, "tests_passed": false, "error": "IndexError"}
{"code": "if not animals or not isinstance(animals, list) or not all(isinstance(animal, str) for animal in animals):\n        raise ValueError(\"Animals list should be a non-empty list of strings.\")\n\n    if not isinstance(mean, int) or mean <= 0:\n        raise ValueError(\"The number of customers should be a positive integer.\")\n\n    # Generate a random number of customers following a Poisson distribution\n    customers = stats.poisson.rvs(mu=mean, size=1)\n\n    # Create an empty dictionary to store the sales\n    sales = {animal: 0 for animal in animals}\n\n    # Iterate over each customer and randomly choose an animal type\n    for _ in range(customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n\n    # Print the sales summary\n    print(\"Sales Summary:\")\n    for animal, quantity in sales.items():\n        print(f\"{animal}: {quantity}\")\n\n    return sales", "compilation_passed": true, "time": 0.0018939971923828125, "tests_passed": false, "error": "ValueError"}
{"code": "n_customers = stats.poisson.rvs(mean, size=1)\n    sales = {}\n    for i in range(n_customers[0]):\n        animal = random.choice(animals)\n        sales[animal] = sales.get(animal, 0) + 1\n    return sales", "compilation_passed": true, "time": 0.0019469261169433594, "tests_passed": true, "error": null}
{"code": "num_customers = stats.poisson.rvs(mean, size=1)[0]\n    sales = {}\n    for animal in animals:\n        sales[animal] = 0\n\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n\n    print(sales)\n    return sales", "compilation_passed": true, "time": 0.0020711421966552734, "tests_passed": false, "error": "IndexError"}
{"code": "n_customers = stats.distributions.poisson.rvs(mean, size=1)\n    sales = dict.fromkeys(animals, 0)\n    for _ in range(n_customers[0]):\n        sales[random.choice(animals)] += 1\n    print(sales)\n    return sales", "compilation_passed": true, "time": 0.002095937728881836, "tests_passed": false, "error": "StopIteration"}
{"code": "# Create a dictionary to store the animal types and number of sales\n    sales = {}\n    # Create a Poisson distribution with mu (mean)\n    poisson = stats.poisson(mean)\n    # Generate a random number of customers based on Poisson distribution\n    num_customers = poisson.rvs()\n    # Iterate through each customer\n    for i in range(num_customers):\n        # Generate a random animal type for the customer to buy\n        animal = random.choice(animals)\n        # If the animal type already exists in the dictionary, increment its sale count\n        if animal in sales:\n            sales[animal] += 1\n        # Otherwise, add the animal type to the dictionary with a sale count of 1\n        else:\n            sales[animal] = 1\n    # Print the summary of the sales\n    print(sales)\n    return sales", "compilation_passed": true, "time": 0.0019259452819824219, "tests_passed": false, "error": "IndexError"}
{"code": "mu = mean\n    total_sales = 0\n    sales = {animal: 0 for animal in animals}\n\n    for _ in range(100):\n        customers = stats.poisson.rvs(mu)\n        for _ in range(customers):\n            animal = random.choice(animals)\n            total_sales += 1\n            sales[animal] += 1\n\n    print(f\"Number of sales: {total_sales}\")\n    for animal, count in sales.items():\n        print(f\"{animal}: {count}\")\n\n    return sales", "compilation_passed": true, "time": 0.0021250247955322266, "tests_passed": false, "error": "StopIteration"}
{"code": "# check if animals is a list\n    if not isinstance(animals, list):\n        raise TypeError(\"animals must be a list\")\n\n    # check if animals contains only strings\n    if not all(isinstance(animal, str) for animal in animals):\n        raise TypeError(\"animals must contain only strings\")\n\n    # check if mean is a positive number\n    if not isinstance(mean, (int, float)) or mean < 0:\n        raise ValueError(\"mean must be a positive number\")\n\n    # check if mean is a float, cast to int if it is\n    if isinstance(mean, float):\n        mean = int(mean)\n\n    # create a dictionary to hold the number of sales for each animal\n    sales = dict.fromkeys(animals, 0)\n\n    # simulate sales\n    n = stats.poisson.rvs(mu=mean)  # number of customers\n    for _ in range(n):\n        animal = random.choice(animals)  # random animal choice\n        sales[animal] += 1  # update sales\n\n", "compilation_passed": true, "time": 0.0019311904907226562, "tests_passed": false, "error": "TypeError"}
{"code": "# Calculate number of customers using Poisson distribution\n    num_customers = stats.poisson.rvs(mean)\n\n    # Initialize sales dictionary\n    sales = {animal: 0 for animal in animals}\n\n    # Simulate sales based on Poisson distribution and randomly selected animals\n    for i in range(num_customers):\n        # Randomly select animal and increment its sales count\n        animal = random.choice(animals)\n        sales[animal] += 1\n\n    # Print summary of sales\n    print(\"\\nPet Shop Sales Summary:\")\n    for animal, sales_count in sales.items():\n        print(f\"{animal}: {sales_count} sold\")\n\n    return sales", "compilation_passed": true, "time": 0.001956939697265625, "tests_passed": false, "error": "IndexError"}
{"code": "# create a dictionary with animal types as keys and number of sales as values\n    sales = {animal: 0 for animal in animals}\n\n    # randomly determine number of customers using Poisson distribution\n    num_customers = random.poisson(mean)\n\n    # loop through each customer and update the sales count\n    for _ in range(num_customers):\n        # randomly choose an animal type and increment the sales count\n        sales[random.choice(animals)] += 1\n\n    # print a summary of the sales\n    total_sales = sum(sales.values())\n    for animal in animals:\n        print(f\"{animal}: {sales[animal] / total_sales * 100:.2f}%\")\n\n    return sales", "compilation_passed": true, "time": 0.0015380382537841797, "tests_passed": false, "error": "AttributeError"}
{"code": "assert isinstance(animals, list)\n    assert len(animals) >= 1\n    assert isinstance(mean, int)\n    assert mean >= 0\n    sales = {}\n    for animal in animals:\n        sales[animal] = 0\n    for i in range(stats.poisson.rvs(mean)):\n        sales[random.choice(animals)] += 1\n    return sales", "compilation_passed": true, "time": 0.002229928970336914, "tests_passed": true, "error": null}
{"code": "num_customers = stats.distributions.poisson_gen.rvs(mean)  # Generate a random number of customers following Poisson distribution\n    sales = {}  # Initialize an empty dictionary to hold the sales summary\n\n    # Loop over the number of customers and randomly select an animal to sell\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] = sales.get(animal, 0) + 1  # Increment the sales count for the selected animal\n\n    # Display a summary of the sales\n    for animal, count in sales.items():\n        print(f\"{count} {animal}\")\n    return sales  # Return the sales summary", "compilation_passed": true, "time": 0.0025568008422851562, "tests_passed": false, "error": "TypeError"}
{"code": "sales = {}\n    num_customers = stats.poisson.rvs(mean, size=1)[0]\n    for animal in animals:\n        sales[animal] = 0\n    for i in range(num_customers):\n        animal = animals[random.randint(0, len(animals) - 1)]\n        sales[animal] += 1\n    return sales", "compilation_passed": true, "time": 0.00225830078125, "tests_passed": false, "error": "ValueError"}
{"code": "# Generate random number of customers according to the Poisson distribution\n    customers = stats.poisson.rvs(mu=mean, size=1)\n\n    # Create empty dictionary to store sales count\n    sales_count = dict.fromkeys(animals, 0)\n\n    # Randomly select animal for each customer\n    for _ in range(customers):\n        sales_count[random.choice(animals)] += 1\n\n    # Display sales summary\n    print(\"\\t\\tSales Summary\")\n    print(\"-\"*35)\n    for animal, count in sales_count.items():\n        print(f\"{animal}:\\t{count}\")\n    print(f\"\\nTotal Sales: {sum(sales_count.values())}\")\n    print(\"-\"*35)\n\n    return sales_count", "compilation_passed": true, "time": 0.0019578933715820312, "tests_passed": false, "error": "TypeError"}
{"code": "num_customers = stats.poisson.rvs(mean)\n\n    sales = {animal: 0 for animal in animals}\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n\n    # Display and return a summary of the sales\n    for animal, num_sales in sales.items():\n        print(f\"{animal}: {num_sales}\")\n    return sales", "compilation_passed": true, "time": 0.0019042491912841797, "tests_passed": false, "error": "IndexError"}
{"code": "num_customers = stats.poisson.rvs(mean)  # Generate number of customers\n    sales = {animal: 0 for animal in animals}  # Initialize sales dictionary\n    for _ in range(num_customers):  # For each customer\n        animal = random.choice(animals)  # Choose an animal randomly\n        sales[animal] += 1  # Increment the sale count of chosen animal\n    print(f\"Sales summary:\")\n    for animal, count in sales.items():  # Print the summary of sales\n        print(f\"{animal}: {count} sale(s)\")\n    return sales", "compilation_passed": true, "time": 0.0023648738861083984, "tests_passed": false, "error": "IndexError"}
{"code": "sales = {animal: 0 for animal in animals}\n    n_customers = random.poisson(mean)\n    for _ in range(n_customers):\n        sales[random.choice(animals)] += 1\n\n    print(sales)\n    return sales", "compilation_passed": true, "time": 0.0014810562133789062, "tests_passed": false, "error": "AttributeError"}
{"code": "# set the seed to the specified mean value\n    random.seed(mean)\n\n    # use a Poisson distribution to generate a random number of customers\n    n_customers = stats.poisson.rvs(mean)\n\n    # initialize a dictionary to store the sales count for each animal\n    sales = {animal: 0 for animal in animals}\n\n    # simulate the sales of animals for each customer\n    for _ in range(n_customers):\n        # randomly choose an animal type from the available options\n        animal = random.choice(animals)\n        sales[animal] += 1\n\n    # display the summary of sales\n    for animal, count in sales.items():\n        print(f\"{animal}: {count}\")\n\n    return sales", "compilation_passed": true, "time": 0.0019316673278808594, "tests_passed": false, "error": "IndexError"}
{"code": "num_customers = stats.poisson.rvs(mu=mean)\n\n    sales = {}\n    for _ in range(num_customers):\n        purchase = random.choice(animals)\n        if purchase in sales:\n            sales[purchase] += 1\n        else:\n            sales[purchase] = 1\n\n    for animal, quantity in sorted(sales.items()):\n        print(f\"{animal}: {quantity}\")\n\n    return sales", "compilation_passed": true, "time": 0.001840829849243164, "tests_passed": true, "error": null}
{"code": "sales = dict(zip(animals, [0] * len(animals)))\n    num_customers = int(stats.poisson.rvs(mean, 0, 1))\n    for _ in range(num_customers):\n        sale_animal = random.choice(animals)\n        sales[sale_animal] += 1\n    return sales", "compilation_passed": true, "time": 0.0018448829650878906, "tests_passed": false, "error": "IndexError"}
{"code": "# Determine number of customers using a Poisson distribution\n    num_customers = stats.poisson.rvs(mean)\n\n    # Simulate sales for each customer\n    sales = {animal: 0 for animal in animals}\n    for _ in range(num_customers):\n        animal = random.choice(animals)\n        sales[animal] += 1\n\n    # Print summary of sales\n    print(\"Pet Shop Sales Summary:\")\n    for animal, sales in sales.items():\n        print(f\"{animal}: {sales}\")\n\n    # Return the sales dictionary\n    return sales", "compilation_passed": true, "time": 0.0018832683563232422, "tests_passed": false, "error": "TypeError"}
