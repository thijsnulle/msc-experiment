{"code": "if seed is not None:\n        random.seed(seed)\n\n    def scramble_word(match):\n        word = match.group(0)\n        if len(word) <= 3:\n            return word\n        else:\n            chars = list(word[1:-1])\n            random.shuffle(chars)\n            return word[0] + ''.join(chars) + word[-1]\n\n    pattern = r'\\b\\w+\\b'  # Match words using regex word boundaries\n    scrambled_text = re.sub(pattern, scramble_word, text)\n    return scrambled_text", "compilation_passed": true, "time": 0.001157999038696289, "tests_passed": true, "error": null}
{"code": "if seed is not None:\n        random.seed(seed)\n    pattern = re.compile(r'\\b\\w[^\\b\\s\\W]*\\w\\b')\n    return pattern.sub(lambda x: x.group(0)[0] + ''.join(random.sample(x.group(0)[1:-1], len(x.group(0)[1:-1]))) + x.group(0)[-1]\n                       if len(x.group(0)) > 3 else x.group(0), text)", "compilation_passed": true, "time": 0.001249074935913086, "tests_passed": true, "error": null}
{"code": "if seed:\n        random.seed(seed)\n    shuffle_word = lambda match: f\"{match.group(1)}{''.join(random.sample(list(match.group(2)), len(match.group(2))))}{match.group(3)}\"\n    return re.sub(r\"(\\w)(\\w{2,})(\\w)\", shuffle_word, text)", "compilation_passed": true, "time": 0.0011861324310302734, "tests_passed": true, "error": null}
{"code": "words = re.findall(r'\\w+', text)\n    scrambled_words = []\n    for word in words:\n        if len(word) > 3:\n            first = word[0]\n            last = word[-1]\n            middle = list(word[1:-1])\n            if seed is not None:\n                random.seed(seed)\n            random.shuffle(middle)\n            scrambled_word = first + ''.join(middle) + last\n            scrambled_words.append(scrambled_word)\n        else:\n            scrambled_words.append(word)\n    return ' '.join(scrambled_words)", "compilation_passed": true, "time": 0.0012121200561523438, "tests_passed": true, "error": null}
{"code": "# Set the seed for reproducibility\n    if seed is not None:\n        random.seed(seed)\n\n    def scramble_word(word):\n        # If word is shorter or equal to 3 characters, return it as is\n        if len(word) <= 3:\n            return word\n\n        # Extract the first and last characters\n        first_char = word[0]\n        last_char = word[-1]\n\n        # Scramble the characters in between first and last\n        middle_chars = list(word[1:-1])\n        random.shuffle(middle_chars)\n        scrambled_chars = first_char + ''.join(middle_chars) + last_char\n\n        return scrambled_chars\n\n    # Scramble the words in the text\n    result = re.sub(r'\\b\\w+\\b', scramble_word, text)\n\n    return result", "compilation_passed": true, "time": 0.0010488033294677734, "tests_passed": false, "error": "TypeError"}
{"code": "r = re.compile(r'\\b\\w+')\n\n    def repl_func(match):\n        word = match.group()\n        if len(word) > 3:\n            rnd_chars = list(word[1:-1])\n            if seed:\n                random.seed(seed)\n            random.shuffle(rnd_chars)\n            return word[0] + ''.join(rnd_chars) + word[-1]\n        else:\n            return word\n\n    return r.sub(repl_func, text)", "compilation_passed": true, "time": 0.0012290477752685547, "tests_passed": true, "error": null}
{"code": "if seed is not None:\n        random.seed(seed)\n\n    def scramble_word(match):\n        word = match.group(0)\n        if len(word) <= 3:\n            return word\n\n        # Scramble the letters in the word except for the first and last letters\n        middle_letters = list(word[1:-1])\n        random.shuffle(middle_letters)\n\n        scrambled_word = word[0] + ''.join(middle_letters) + word[-1]\n        return scrambled_word\n\n    result = re.sub(r'\\b\\w{4,}\\b', scramble_word, text)\n    return result", "compilation_passed": true, "time": 0.0011730194091796875, "tests_passed": true, "error": null}
{"code": "random.seed(seed)\n    pattern = r'\\b\\w\\w+\\w\\b'\n    matches = re.findall(pattern, text)\n\n    scrambled_text = ''\n    for match in matches:\n        middle = list(match[1:-1])\n        random.shuffle(middle)\n        scrambled_text += match[0] + ''.join(middle) + match[-1] + ' '\n    scrambled_text = scrambled_text.rstrip()\n\n    return scrambled_text", "compilation_passed": true, "time": 0.0010938644409179688, "tests_passed": true, "error": null}
{"code": "random.seed(seed)\n    result = re.sub(r'\\b(\\w)(\\w+)(\\w)\\b', lambda m: m.group(1) + ''.join(random.sample(m.group(2), len(m.group(2)))) + m.group(3), text)\n    return result", "compilation_passed": true, "time": 0.0011649131774902344, "tests_passed": true, "error": null}
{"code": "random.seed(seed)\n    words = re.findall(r'\\b\\w+\\b', text)\n    scrambled_text = ''\n    for word in words:\n        if len(word) > 3:\n            middle_chars = list(word[1:-1])\n            random.shuffle(middle_chars)\n            scrambled_text += word[0] + ''.join(middle_chars) + word[-1] + ' '\n        else:\n            scrambled_text += word + ' '\n    scrambled_text = scrambled_text.strip()\n    return scrambled_text", "compilation_passed": true, "time": 0.0010602474212646484, "tests_passed": true, "error": null}
{"code": "if seed is not None:\n        random.seed(seed)\n    pattern = r'\\b[a-zA-Z]{3,}\\b'  # Only match words of length 3 or more\n    return re.sub(pattern, lambda match: shuffle_word(match.group()), text)", "compilation_passed": true, "time": 0.0009889602661132812, "tests_passed": false, "error": "NameError"}
{"code": "# Set the seed for the random number generator (optional)\n    if seed is not None:\n        random.seed(seed)\n\n    # Define the pattern to match words using regex\n    pattern = r'\\b\\w+\\b'\n\n    # Define the function to process each word\n    def scramble_word(match):\n        word = match.group()\n\n        # Check if the word is longer than three characters\n        if len(word) <= 3:\n            return word\n\n        # Scramble the letters of the word except the first and last ones\n        middle = list(word[1:-1])\n        random.shuffle(middle)\n        scrambled_word = word[0] + ''.join(middle) + word[-1]\n\n        return scrambled_word\n\n    # Use regex to find and replace all words in the text using the defined function\n    scrambled_text = re.sub(pattern, scramble_word, text)\n\n    return scrambled_text", "compilation_passed": true, "time": 0.0011372566223144531, "tests_passed": true, "error": null}
{"code": "if seed is not None:\n        random.seed(seed)\n\n    def scramble_word(matchobj):\n        word = matchobj.group(0)\n        if len(word) > 3:\n            first = word[0]\n            last = word[-1]\n            middle = list(word[1:-1])\n            random.shuffle(middle)\n            scrambled = first + ''.join(middle) + last\n            return scrambled\n        else:\n            return word\n\n    result = re.sub(r'\\b\\w{2,}\\b', scramble_word, text)\n    return result", "compilation_passed": true, "time": 0.001194000244140625, "tests_passed": true, "error": null}
{"code": "random.seed(seed)\n    words = re.findall(r'\\b(\\w+)\\b', text)\n    for word in words:\n        if len(word) > 3:\n            mid = list(word[1:-1])\n            random.shuffle(mid)\n            scrambled = word[0] + ''.join(mid) + word[-1]\n            text = text.replace(word, scrambled)\n    return text", "compilation_passed": true, "time": 0.0011577606201171875, "tests_passed": true, "error": null}
{"code": "if seed is not None:\n        random.seed(seed)\n    return re.sub(r'\\b(\\w)(\\w+)(\\w)\\b', lambda m: f'{m.group(1)}{random.sample(m.group(2), len(m.group(2)))}{m.group(3)}', text)", "compilation_passed": true, "time": 0.000965118408203125, "tests_passed": true, "error": null}
{"code": "if seed is not None:\n        random.seed(seed)\n\n    def scramble(match):\n        word = match.group(1)\n        if len(word) > 3:\n            first, last = word[0], word[-1]\n            middle = list(word[1:-1])\n            random.shuffle(middle)\n            scrambled = first + \"\".join(middle) + last\n            return scrambled\n        else:\n            return word\n\n    pattern = r\"\\b([a-zA-Z]{2,})\\b\"\n    return re.sub(pattern, scramble, text)", "compilation_passed": true, "time": 0.0012500286102294922, "tests_passed": true, "error": null}
{"code": "if seed is not None:\n        random.seed(seed)\n    else:\n        random.seed()\n\n    def scramble_word(match):\n        word = match.group(0)\n        if len(word) > 3:\n            middle_letters = list(word[1:-1])\n            random.shuffle(middle_letters)\n            scrambled_word = word[0] + ''.join(middle_letters) + word[-1]\n            return scrambled_word\n        return word\n\n    result = re.sub(r'\\b\\w{3,}\\b', scramble_word, text)\n    return result", "compilation_passed": true, "time": 0.0011720657348632812, "tests_passed": true, "error": null}
{"code": "def scramble_word(match):\n        word = match.group(0)\n        if len(word) > 3:\n            middle = list(word[1:-1])\n            random.Random(seed).shuffle(middle)\n            return word[0] + ''.join(middle) + word[-1]\n        else:\n            return word\n\n    pattern = re.compile(r'\\b\\w{2,}\\b')\n    scrambled_text = re.sub(pattern, scramble_word, text)\n    return scrambled_text", "compilation_passed": true, "time": 0.0012209415435791016, "tests_passed": true, "error": null}
{"code": "def scramble_word(word):\n        if len(word) <= 3:\n            return word\n\n        middle_letters = list(word[1:-1])\n        random.shuffle(middle_letters)\n        return word[0] + ''.join(middle_letters) + word[-1]\n\n    words = re.findall(r'\\b\\w+\\b', text)\n    scrambled_words = [scramble_word(word) for word in words]\n\n    return ' '.join(scrambled_words)", "compilation_passed": true, "time": 0.0010828971862792969, "tests_passed": true, "error": null}
{"code": "if seed is not None:\n        random.seed(seed)\n\n    def scramble_word(match):\n        word = match.group(0)\n        if len(word) > 3:\n            first_char = word[0]\n            last_char = word[-1]\n            middle_chars = list(word[1:-1])\n            random.shuffle(middle_chars)\n            scrambled_word = first_char + ''.join(middle_chars) + last_char\n            return scrambled_word\n        return word\n\n    return re.sub(r'\\b\\w{3,}\\b', scramble_word, text)", "compilation_passed": true, "time": 0.0011479854583740234, "tests_passed": true, "error": null}
{"code": "if seed is not None:\n        random.seed(seed)\n\n    def scramble_word(word):\n        \"\"\"\n        Scramble the letters in a word, keeping the first and last letters intact.\n\n        Parameters:\n        word (str): The word to be scrambled.\n\n        Returns:\n        str: The scrambled word.\n\n        Examples:\n        >>> scramble_word('world')\n        'wlrod'\n        >>> scramble_word('Python')\n        'Pytnon'\n        >>> scramble_word('hi')\n        'hi'\n        \"\"\"\n        # Check if the word is longer than three characters\n        if len(word) <= 3:\n            return word\n\n        # Scramble the letters by keeping the first and last letters intact\n        scrambled = word[0] + ''.join(random.sample(word[1:-1], len(word) - 2)) + word[-1]\n        return scrambled\n\n    # Find all words in the text using regex word boundaries\n    words = re.findall(r'\\b\\w+\\", "compilation_passed": false, "time": 7.486343383789062e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "random.seed(seed)\n\n    def scramble_word(word):\n        \"\"\"\n        Scramble the letters of a given word by swapping them randomly, keeping the first and last letters intact.\n\n        Parameters:\n        word (str): The word to be scrambled.\n\n        Returns:\n        str: The scrambled word.\n\n        Requirements:\n        - random\n\n        Notes:\n        - The scrambling only affects words longer than three characters.\n        \"\"\"\n        if len(word) <= 3:\n            return word\n\n        middle = list(word[1:-1])  # Convert to a list of letters for easier shuffling\n        random.shuffle(middle)\n        return word[0] + ''.join(middle) + word[-1]\n\n    return re.sub(r'\\b(\\w)(\\w+)(\\w)\\b', lambda match: match.group(1) + scramble_word(match.group(2)) + match.group(3), text)", "compilation_passed": true, "time": 0.0011599063873291016, "tests_passed": true, "error": null}
{"code": "random.seed(seed)\n    result = re.sub(r'\\b(\\w)(\\w+)(\\w)\\b', lambda match: f'{match.group(1)}{random.sample(list(match.group(2)), len(match.group(2)))}{match.group(3)}', text)\n    return result", "compilation_passed": true, "time": 0.0009720325469970703, "tests_passed": true, "error": null}
{"code": "# Initialize random number generator with a seed\n    random.seed(seed)\n\n    # Define a regular expression to match words in the text\n    regex = r'\\b\\w{3,}\\b'\n\n    # Find all words in the text that match the regular expression\n    matches = re.findall(regex, text)\n\n    # Iterate over each matched word and shuffle its characters\n    for word in matches:\n        # Extract the first and last characters of the word\n        first_char = word[0]\n        last_char = word[-1]\n\n        # Extract the middle characters of the word\n        middle_chars = word[1:-1]\n\n        # Convert middle characters to a list and shuffle them\n        shuffled_chars = list(middle_chars)\n        random.shuffle(shuffled_chars)\n\n        # Reconstruct the scrambled word by combining the shuffled middle characters with the first and last characters\n        scrambled_word = first_char + ''.join(shuffled_chars) + last_char\n\n        # Replace the original word with the scrambled word in the text", "compilation_passed": true, "time": 0.0009708404541015625, "tests_passed": false, "error": "AttributeError"}
{"code": "def scramble_word(word):\n        if len(word) > 3:\n            middle = list(word[1:-1])\n            random.seed(seed)\n            random.shuffle(middle)\n            return word[0] + ''.join(middle) + word[-1]\n        else:\n            return word\n\n    return ' '.join(map(scramble_word, re.findall(r'\\b\\w+\\b', text)))", "compilation_passed": true, "time": 0.00109100341796875, "tests_passed": true, "error": null}
{"code": "words = re.findall(r'\\b(\\w)\\w+(\\w)\\b', text)\n    if seed:\n        random.seed(seed)\n    for start, end in words:\n        middle = re.sub(r'\\B(?=\\B)|\\B(?=\\B\\b)',\n                        lambda _: random.sample(r'\\B(?=\\B)|\\B(?=\\B\\b)', 1)[0],\n                        text[text.index(start) + 1:text.index(end)])\n        text = text.replace(start + text[text.index(start) + 1:text.index(end)] + end,\n                            start + middle + end)\n    return text", "compilation_passed": true, "time": 0.0011861324310302734, "tests_passed": true, "error": null}
{"code": "if seed is not None:\n        random.seed(seed)\n\n    def scramble_word(word):\n        if len(word) > 3:\n            return word[0] + \"\".join(random.sample(word[1:-1], len(word) - 2)) + word[-1]\n        else:\n            return word\n\n    return \"\".join(scramble_word(w) if re.match(r\"\\b\\w+\\b\", w) else w for w in re.split(r\"(\\b\\w+\\b)\", text))", "compilation_passed": true, "time": 0.0012269020080566406, "tests_passed": true, "error": null}
{"code": "words = re.findall(r'\\b\\w+\\b', text)\n    scrambled_words = []\n    random.seed(seed)\n    for word in words:\n        if len(word) > 3:\n            middle_letters = list(word[1:-1])\n            random.shuffle(middle_letters)\n            scrambled_word = word[0] + ''.join(middle_letters) + word[-1]\n            scrambled_words.append(scrambled_word)\n        else:\n            scrambled_words.append(word)\n    return re.sub(r'\\b\\w+\\b', lambda x: scrambled_words.pop(0), text)", "compilation_passed": true, "time": 0.0011820793151855469, "tests_passed": true, "error": null}
{"code": "if seed is not None:\n        random.seed(seed)\n\n    def scramble_word(match):\n        word = match.group(0)\n        if len(word) <= 3:\n            return word\n        first_letter = word[0]\n        last_letter = word[-1]\n        middle_letters = list(word[1:-1])\n        random.shuffle(middle_letters)\n        scrambled_word = first_letter + ''.join(middle_letters) + last_letter\n        return scrambled_word\n\n    scrambled_text = re.sub(r'\\b\\w+\\b', scramble_word, text)\n    return scrambled_text", "compilation_passed": true, "time": 0.0012180805206298828, "tests_passed": true, "error": null}
{"code": "random.seed(seed)\n\n    def scramble_word(word):\n        if len(word) <= 3:\n            return word\n        middle = list(word[1:-1])\n        random.shuffle(middle)\n        return word[0] + \"\".join(middle) + word[-1]\n\n    return \"\".join(scramble_word(m) if m.isalpha() else m\n                   for m in re.findall(r\"\\b\\w+\\b\", text, flags=re.U))", "compilation_passed": true, "time": 0.0010499954223632812, "tests_passed": true, "error": null}
