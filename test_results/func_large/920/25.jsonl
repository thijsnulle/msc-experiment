{"code": "ax = sns.heatmap(data.corr(), annot=True, fmt=\".2f\", cmap=\"RdYlGn\")\n    ax.set_title(\"Correlation Matrix\")\n    return ax", "compilation_passed": true, "time": 0.0009958744049072266, "tests_passed": false, "error": "AttributeError"}
{"code": "# Create correlation matrix\n    corr_matrix = data.corr().astype(float)\n\n    # Set plot style and font size\n    sns.set(style=\"white\")\n    sns.set(font_scale=2)\n\n    # Draw the heatmap\n    ax = sns.heatmap(corr_matrix, annot=True, cmap=\"coolwarm\")\n    ax.set_title(\"Correlation Matrix\")\n\n    return ax", "compilation_passed": true, "time": 0.0008080005645751953, "tests_passed": false, "error": "AttributeError"}
{"code": "df = pd.DataFrame(data)\n    sns.set(font_scale=2)\n    ax = sns.heatmap(df.corr(), annot=True, cmap='coolwarm', fmt='.2f', linewidths=3)\n    ax.set_title('Correlation Matrix', fontsize=24)\n    ax.tick_params(axis='both', which='major', labelsize=20)\n\n    return ax", "compilation_passed": true, "time": 0.21108794212341309, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(data)\n    # calculate the correlation matrix\n    corr = df.corr()\n    # create a heatmap using seaborn\n    sns.set(font_scale=0.75)\n    sns.set_style(\"white\")\n    ax = sns.heatmap(corr, annot=True, cmap=\"Blues\")\n    ax.set_title(\"Correlation Matrix\")\n    return ax", "compilation_passed": true, "time": 0.2762460708618164, "tests_passed": true, "error": null}
{"code": "corr = data.corr()\n    ax = sns.heatmap(corr, annot=True, cmap=\"coolwarm\")\n    ax.set_title('Correlation Matrix')\n    return ax", "compilation_passed": true, "time": 0.0009419918060302734, "tests_passed": false, "error": "AttributeError"}
{"code": "data = pd.DataFrame(data)\n    ax = sns.heatmap(data.corr(), annot=True)\n    plt.title('Correlation Matrix')\n    plt.show()\n    return ax", "compilation_passed": true, "time": 0.3462221622467041, "tests_passed": true, "error": null}
{"code": "# Generate correlation matrix\n    corr = data.corr()\n    # Generate a mask for the upper triangle\n    mask = np.zeros_like(corr, dtype=np.bool)\n    mask[np.triu_indices_from(mask)] = True\n    # Set up the matplotlib figure\n    f, ax = plt.subplots(figsize=(11, 9))\n    # Generate a custom diverging colormap as green/red\n    cmap = sns.diverging_palette(220, 10, as_cmap=True)\n    # Draw the heatmap with the mask and correct aspect ratio\n    sns.heatmap(corr, mask=mask, cmap=cmap, vmax=1, vmin=-1, center=0,\n                square=True, linewidths=.5, cbar_kws={\"shrink\": .5})\n    # Set title of heatmap\n    plt.title('Correlation Matrix')\n    # Show heatmap\n    plt.show()\n    return ax", "compilation_passed": true, "time": 0.0010631084442138672, "tests_passed": false, "error": "AttributeError"}
{"code": "ax = sns.heatmap(data.corr(), annot=True, cmap='coolwarm', vmin=-1, vmax=1)\n    ax.set_title('Correlation Matrix')\n    return ax", "compilation_passed": true, "time": 0.0006949901580810547, "tests_passed": false, "error": "AttributeError"}
{"code": "df = pd.DataFrame(data)\n    corr = df.corr()\n    ax = sns.heatmap(corr, annot=True, cmap=\"coolwarm\")\n    ax.set_title('Correlation Matrix')\n    return ax", "compilation_passed": true, "time": 0.419403076171875, "tests_passed": true, "error": null}
{"code": "corr = data.corr()\n    sns.set_theme(style='white')\n    mask = ~np.trilu(np.ones(corr.shape), k=0).astype(np.bool)\n    f, ax = plt.subplots(figsize=(11, 9))\n    cmap = sns.light_palette(\"red\", as_cmap=True)\n    sns.set_theme()\n    title = 'Correlation Matrix'\n    sns.heatmap(corr, mask=mask, cmap=cmap, vmax=1.0, square=True,\n                annot=True, fmt='.2f', annot_kws={\"size\": 10},\n                xticklabels=corr.columns.values,\n                yticklabels=corr.columns.values)\n    plt.title(title)\n\n    return ax", "compilation_passed": true, "time": 0.0010569095611572266, "tests_passed": false, "error": "AttributeError"}
{"code": "# Set style\n    sns.set_theme(style=\"white\")\n\n    # Compute the correlation matrix\n    corr = data.corr()\n\n    # Generate a mask for the upper triangle\n    mask = np.zeros_like(corr, dtype=bool)\n    mask[np.triu_indices_from(mask)] = True\n\n    # Set up the matplotlib figure\n    f, ax = plt.subplots(figsize=(11, 9))\n    sns.set_style(style = 'whitegrid')\n\n    # Draw the heatmap. We add labels\n    sns.heatmap(corr, mask=mask, vmax=1.0, square=True, annot=True, cbar = False, annot_kws={\"size\": 16},xticklabels=data.columns,\n                yticklabels=data.columns)\n    plt.title('Correlation Matrix')\n    plt.show()\n    return ax", "compilation_passed": true, "time": 0.0010030269622802734, "tests_passed": false, "error": "AttributeError"}
{"code": "# Create a correlation matrix\n    corr = data.corr()\n\n    # Generate a custom diverging colormap\n    cmap = sns.diverging_palette(220, 10, as_cmap=True)\n\n    # Draw the heatmap using seaborn\n    sns.set()\n    ax = sns.heatmap(corr, cmap=cmap, annot=True, fmt=\".2f\")\n\n    # Add a title to the heatmap\n    ax.set_title(\"Correlation Matrix\")\n\n    return ax", "compilation_passed": true, "time": 0.0007929801940917969, "tests_passed": false, "error": "AttributeError"}
{"code": "# Your solution here\n    df=pd.DataFrame(data)\n    cor=df.corr()\n    ax=sns.heatmap(cor,annot=True,cmap=sns.color_palette('Blues'))\n    ax.set_title('Correlation Matrix')\n    return ax", "compilation_passed": true, "time": 0.4988100528717041, "tests_passed": true, "error": null}
{"code": "sns.set(font_scale=1.1)\n    ax = sns.heatmap(data, annot=True)\n    plt.title('Correlation Matrix')\n    plt.tight_layout()\n\n    return ax", "compilation_passed": true, "time": 0.0013439655303955078, "tests_passed": false, "error": "ValueError"}
{"code": "# calculate the correlation matrix\n    corr_matrix = data.corr()\n    # create a mask for the upper triangle\n    mask = np.triu(np.ones_like(corr_matrix, dtype=bool))\n    # create the heatmap\n    ax = sns.heatmap(corr_matrix, mask=mask, annot=True, cmap='coolwarm')\n    # set the title\n    ax.set_title('Correlation Matrix')\n    # return the Axes object\n    return ax", "compilation_passed": true, "time": 0.0007832050323486328, "tests_passed": false, "error": "AttributeError"}
{"code": "df = pd.DataFrame(data)\n    sns.heatmap(df.corr(), annot=True, cmap='coolwarm')\n    plt.title('Correlation Matrix')\n    ax = plt.gca()\n    return ax", "compilation_passed": true, "time": 0.5749819278717041, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(data)\n    # Get the correlation matrix\n    corr = df.corr()\n\n    # Create the heatmap\n    ax = sns.heatmap(corr, annot=True, cmap='coolwarm', fmt='.2f')\n\n    # Add title\n    ax.set_title('Correlation Matrix')\n\n    # Display the heatmap\n    return ax", "compilation_passed": true, "time": 0.6491408348083496, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(data)\n\n    # Calculate correlation matrix\n    corr = df.corr()\n\n    # Set plot size\n    sns.set(rc={'figure.figsize': (8, 8)})\n\n    # Generate a mask for the upper triangle\n    mask = np.zeros_like(corr, dtype=bool)\n    mask[np.triu_indices_from(mask)] = True\n\n    # Set up the matplotlib figure\n    f, ax = plt.subplots(figsize=(11, 9))\n\n    # Generate a custom diverging colormap as green-white-red\n    cmap = sns.diverging_palette(220, 10, as_cmap=True)\n\n    # Draw the heatmap with the mask and correct aspect ratio\n    sns.heatmap(corr, mask=mask, cmap=cmap, vmax=1.0, vmin=-1.0, center=0,\n                square=True, linewidths=0.5, cbar_kws={'shrink': .5})\n\n    #", "compilation_passed": true, "time": 0.0016477108001708984, "tests_passed": false, "error": "NameError"}
{"code": "corrmat = data.corr()\n    top = corrmat.index\n    plt.figure(figsize=(10, 7))\n    # Draw the heatmap using seaborn\n    sns.heatmap(corrmat, annot=True)\n    plt.xticks(rotation=90)\n    plt.yticks(rotation=0)\n    plt.title('Correlation Matrix')\n    plt.show()\n\n    return plt.gca()", "compilation_passed": true, "time": 0.0007989406585693359, "tests_passed": false, "error": "AttributeError"}
{"code": "# Create a correlation matrix\n    corr = data.corr()\n\n    # Generate a heatmap\n    ax = sns.heatmap(corr, annot=True, cmap='coolwarm')\n\n    # Add title\n    ax.set_title('Correlation Matrix')\n\n    return ax", "compilation_passed": true, "time": 0.0007119178771972656, "tests_passed": false, "error": "AttributeError"}
{"code": "df = pd.DataFrame(data)\n    corr = df.corr()\n    ax = sns.heatmap(corr)\n    ax.set_title('Correlation Matrix')\n    return ax", "compilation_passed": true, "time": 0.7131562232971191, "tests_passed": true, "error": null}
{"code": "# 1. Convert the dictionary into a DataFrame using pd.DataFrame\n    df = pd.DataFrame(data)\n\n    # 2. Use the `corr()` method to calculate the correlation matrix\n    correlation = df.corr()\n\n    # 3. Create a seaborn heatmap\n    ax = sns.heatmap(correlation, annot=True)\n\n    # 4. Set the title to 'Correlation Matrix'\n    ax.set_title('Correlation Matrix')\n\n    # 5. Return the Axes object\n    return ax", "compilation_passed": true, "time": 0.7852969169616699, "tests_passed": true, "error": null}
{"code": "# Check that data is a dictionary and contains numerical columns\n    assert isinstance(data, dict), \"Input data must be a dictionary\"\n    assert all([pd.api.types.is_numeric_dtype(v) for v in data.values()]), \"All input data values must be numerical\"\n\n    # Create a correlation matrix\n    corr = pd.DataFrame(data).corr()\n\n    # Set the style of the heatmap\n    sns.set(font_scale=1.5)\n\n    # Draw the correlation matrix heatmap\n    ax = sns.heatmap(corr, annot=True, fmt=\".2f\", linewidths=1, linecolor=\"lightgrey\", square=True)\n\n    # Set the title of the heatmap\n    ax.set_title('Correlation Matrix', fontdict={'fontsize': 20})\n\n    return ax", "compilation_passed": true, "time": 0.002043008804321289, "tests_passed": true, "error": null}
{"code": "sns.set()\n    sns.set_context(\"paper\")\n    ax = sns.heatmap(data)\n    ax.set_title('Correlation Matrix')\n    return ax", "compilation_passed": true, "time": 0.0012080669403076172, "tests_passed": false, "error": "ValueError"}
{"code": "# 1. Create a correlation matrix from the data\n    corr = data.corr()\n\n    # 2. Create the heatmap using seaborn\n    sns.set(font_scale=1.4)\n    sns.set_theme(style=\"white\")\n    ax = sns.heatmap(\n        corr,\n        xticklabels=corr.columns.values,\n        yticklabels=corr.columns.values,\n        annot=True,\n        cmap=sns.color_palette(\"Reds\", as_cmap=True),\n    )\n    ax.tick_params(axis=\"both\", labelsize=14)\n    ax.set_title(\"Correlation Matrix\", fontdict={\"fontsize\": 16})\n    return ax", "compilation_passed": true, "time": 0.0008411407470703125, "tests_passed": false, "error": "AttributeError"}
{"code": "corr = data.corr()\n    ax = sns.heatmap(corr, annot=True, cmap='viridis')\n    ax.set_title('Correlation Matrix')\n    return ax", "compilation_passed": true, "time": 0.0006959438323974609, "tests_passed": false, "error": "AttributeError"}
{"code": "df = pd.DataFrame(data)\n    # Calculate the correlation matrix\n    corr = df.corr()\n    # Generate a custom diverging colormap\n    cmap = sns.diverging_palette(220, 20, as_cmap=True)\n    # Draw the heatmap using seaborn\n    ax = sns.heatmap(corr, cmap=cmap, annot=True, fmt='.2f', linewidths=.5)\n    # Set the title of the heatmap\n    ax.set_title(\"Correlation Matrix\")\n    # Show the plot\n    plt.show()\n    # Return the Axes object\n    return ax", "compilation_passed": true, "time": 0.8793010711669922, "tests_passed": true, "error": null}
{"code": "ax = sns.heatmap(data.corr(), annot=True, fmt='.2f')\n    ax.set_title('Correlation Matrix')\n    return ax", "compilation_passed": true, "time": 0.0013921260833740234, "tests_passed": false, "error": "AttributeError"}
{"code": "corr = data.corr()\n    ax = sns.heatmap(corr, annot=True, cmap=\"coolwarm\", center=0)\n    ax.set_title(\"Correlation Matrix\")\n    return ax", "compilation_passed": true, "time": 0.0006899833679199219, "tests_passed": false, "error": "AttributeError"}
{"code": "# Create correlation matrix\n    corr = data.corr()\n\n    # Create heatmap\n    ax = sns.heatmap(corr, annot=True, cmap=\"Blues\")\n\n    # Set title\n    ax.set_title(\"Correlation Matrix\")\n\n    return ax", "compilation_passed": true, "time": 0.0007297992706298828, "tests_passed": false, "error": "AttributeError"}
