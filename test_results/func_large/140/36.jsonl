{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"'df' must be a DataFrame\")\n\n    if not isinstance(cols, list):\n        raise ValueError(\"'cols' must be a list\")\n\n    for col in cols:\n        if col not in df.columns:\n            raise ValueError(f\"Column '{col}' doesn't exist\")\n\n    scaler = StandardScaler()\n    df[cols] = scaler.fit_transform(df[cols])\n    return df", "compilation_passed": true, "time": 0.006722211837768555, "tests_passed": true, "error": null}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError('df should be a DataFrame')\n    if not isinstance(cols, list):\n        raise ValueError('cols should be a list')\n    if not all(col in df.columns for col in cols):\n        raise ValueError('one or more columns in cols do not exist in df')\n\n    for col in cols:\n        scaler = StandardScaler()\n        df[col] = scaler.fit_transform(df[col].to_frame()).squeeze()\n\n    return df", "compilation_passed": true, "time": 0.007235050201416016, "tests_passed": true, "error": null}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"'df' must be a DataFrame\")\n    if not isinstance(cols, list):\n        raise ValueError(\"'cols' must be a list\")\n    cols = [c for c in cols if c in df.columns]\n    if not cols:\n        raise ValueError(\"No columns in 'cols' found in 'df'\")\n\n    # standardize numeric columns\n    df[cols] = StandardScaler().fit_transform(df[cols].to_numpy())\n    return df", "compilation_passed": true, "time": 0.001783132553100586, "tests_passed": true, "error": null}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"df should be a DataFrame\")\n    if not isinstance(cols, list):\n        raise ValueError(\"cols should be a list\")\n    if not set(cols).issubset(df.columns):\n        raise ValueError(\"columns in cols should exist in df\")\n\n    scaler = StandardScaler()\n    scaler.fit(df[cols])\n    df[cols] = scaler.transform(df[cols])\n    return df", "compilation_passed": true, "time": 0.006596088409423828, "tests_passed": true, "error": null}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError('Input argument \"df\" must be a DataFrame')\n    if not isinstance(cols, list):\n        raise ValueError('Input argument \"cols\" must be a list of column names')\n    if not all(col in df.columns for col in cols):\n        raise ValueError('Input argument \"cols\" contains column names not found in \"df\"')\n\n    scaler = StandardScaler()\n    df[cols] = scaler.fit_transform(df[cols])\n    return df", "compilation_passed": true, "time": 0.006583213806152344, "tests_passed": true, "error": null}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError('df must be a DataFrame')\n    if not isinstance(cols, list):\n        raise ValueError('cols must be a list of column names')\n    for col in cols:\n        if col not in df.columns:\n            raise ValueError(f'column {col} does not exist in df')\n    scaler = StandardScaler()\n    df[cols] = scaler.fit_transform(df[cols])\n    return df", "compilation_passed": true, "time": 0.006564140319824219, "tests_passed": true, "error": null}
{"code": "# Validate input dataframe\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"'df' must be a DataFrame.\")\n\n    # Validate input columns\n    if not isinstance(cols, list):\n        raise ValueError(\"'cols' must be a list.\")\n    if any(col not in df for col in cols):\n        raise ValueError(\"Columns in 'cols' must exist in the dataframe.\")\n\n    # Standardize the specified columns\n    scaler = StandardScaler()\n    df[cols] = scaler.fit_transform(df[cols])\n\n    # Return the updated dataframe\n    return df", "compilation_passed": true, "time": 0.0065670013427734375, "tests_passed": true, "error": null}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"'df' must be a DataFrame\")\n    if not isinstance(cols, list):\n        raise ValueError(\"'cols' must be a list\")\n    for col in cols:\n        if col not in df.columns:\n            raise ValueError(f\"Column '{col}' not found in DataFrame\")\n\n    scaler = StandardScaler()\n    df[cols] = scaler.fit_transform(df[cols].values)\n\n    return df", "compilation_passed": true, "time": 0.006079196929931641, "tests_passed": true, "error": null}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"'df' must be a DataFrame.\")\n\n    if not isinstance(cols, list):\n        raise ValueError(\"'cols' must be a list.\")\n\n    if not set(cols).issubset(df.columns):\n        raise ValueError(\"Columns in 'cols' must exist in 'df'.\")\n\n    if len(cols) == 0:\n        return df\n\n    # Convert 'cols' to a set for efficient lookup\n    col_set = set(cols)\n\n    # Initialize StandardScaler for numeric columns\n    scaler = StandardScaler()\n\n    # Apply StandardScaler to numeric columns\n    for col in cols:\n        if df[col].dtype in ('float64', 'int64', 'int32'):\n            # Convert to 2D array for StandardScaler\n            df.loc[:, col] = scaler.fit_transform(df.loc[:, col].values.reshape(-1, 1))\n\n    return df", "compilation_passed": true, "time": 0.006170988082885742, "tests_passed": true, "error": null}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"'df' must be a DataFrame\")\n    if not isinstance(cols, list):\n        raise ValueError(\"'cols' must be a list\")\n    for col in cols:\n        if col not in df:\n            raise ValueError(f\"Column {col} not found in dataframe\")\n    sc = StandardScaler()\n    df[cols] = sc.fit_transform(df[cols])\n    return df", "compilation_passed": true, "time": 0.006513118743896484, "tests_passed": true, "error": null}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"'df' is not a DataFrame\")\n    if not isinstance(cols, list):\n        raise ValueError(\"'cols' is not a list\")\n    if not set(cols).issubset(df.columns):\n        raise ValueError(\"Columns in 'cols' don't exist in 'df'\")\n    scaler = StandardScaler()\n    for col in cols:\n        df[col] = scaler.fit_transform(df[col].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0060956478118896484, "tests_passed": true, "error": null}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"'df' should be a DataFrame\")\n    if not isinstance(cols, list):\n        raise ValueError(\"'cols' should be a list of columns to standardize\")\n    if not all(col in df for col in cols):\n        raise ValueError(\"Columns in 'cols' should exist in 'df'\")\n    scaler = StandardScaler()\n    df[cols] = scaler.fit_transform(df[cols])\n    return df", "compilation_passed": true, "time": 0.006473064422607422, "tests_passed": true, "error": null}
{"code": "# Check the input arguments\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(f\"Expected 'df' to be a DataFrame, but received type {type(df).__name__}\")\n    if not isinstance(cols, list):\n        raise ValueError(f\"Expected 'cols' to be a list of column names, but received type {type(cols).__name__}\")\n\n    # Check if all columns exist in the dataframe\n    if not all(col in df.columns for col in cols):\n        raise ValueError(\"One or more columns in 'cols' do not exist in the DataFrame\")\n\n    # Standardize the numeric columns\n    scaler = StandardScaler()\n    df[cols] = scaler.fit_transform(df[cols])\n\n    # Return the updated dataframe\n    return df", "compilation_passed": true, "time": 0.0065190792083740234, "tests_passed": true, "error": null}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(f\"'df' should be a DataFrame, got {type(df)}\")\n    if not isinstance(cols, list):\n        raise ValueError(f\"'cols' should be a list, got {type(cols)}\")\n    if not all(col in df.columns for col in cols):\n        raise ValueError(f\"Columns in 'cols' should exist in the dataframe\")\n\n    scaler = StandardScaler()\n    df[cols] = scaler.fit_transform(df[cols])\n\n    return df", "compilation_passed": true, "time": 0.006623029708862305, "tests_passed": true, "error": null}
{"code": "# Check that input is valid.\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"'df' must be a pandas DataFrame.\")\n    if not isinstance(cols, list):\n        raise ValueError(\"'cols' must be a list of columns to standardize.\")\n    for c in cols:\n        if c not in df.columns:\n            raise ValueError(f\"Column '{c}' not found in the dataframe.\")\n\n    # Create a copy of the input dataframe.\n    df_copy = df.copy()\n\n    # Create a StandardScaler object and fit it to the specified numeric columns in the copy of the dataframe.\n    scaler = StandardScaler().fit(df_copy[cols])\n\n    # Transform the specified numeric columns in the copy of the dataframe using the StandardScaler object.\n    df_copy[cols] = scaler.transform(df_copy[cols])\n\n    # Return the transformed dataframe.\n    return df_copy", "compilation_passed": true, "time": 0.006757020950317383, "tests_passed": true, "error": null}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"'df' must be a DataFrame\")\n    if not isinstance(cols, list):\n        raise ValueError(\"'cols' must be a list\")\n    for col in cols:\n        if col not in df.columns:\n            raise ValueError(f\"Column '{col}' does not exist in the dataframe\")\n    scaler = StandardScaler()\n    df[cols] = scaler.fit_transform(df[cols])\n    return df", "compilation_passed": true, "time": 0.006496906280517578, "tests_passed": true, "error": null}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"'df' must be a DataFrame\")\n\n    if not isinstance(cols, list):\n        raise ValueError(\"'cols' must be a list\")\n\n    if not df[cols].select_dtypes(include=np.number).columns.tolist() == cols:\n        raise ValueError(\"'df' must only contain numeric values\")\n\n    if not all([col in df.columns for col in cols]):\n        raise ValueError(\"columns in 'cols' must exist in 'df'\")\n\n    scaler = StandardScaler()\n    for col in cols:\n        df[col] = scaler.fit_transform(df[col].values.reshape(-1, 1))\n\n    return df", "compilation_passed": true, "time": 0.0015201568603515625, "tests_passed": false, "error": "KeyError"}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"'df' must be a DataFrame\")\n    if not isinstance(cols, list):\n        raise ValueError(\"'cols' must be a list\")\n    if not set(cols).issubset(set(df.columns)):\n        raise ValueError(\"Columns in 'cols' must exist in the DataFrame\")\n    scaler = StandardScaler()\n    df[cols] = scaler.fit_transform(df[cols])\n    return df", "compilation_passed": true, "time": 0.0064241886138916016, "tests_passed": true, "error": null}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"'df' must be a pandas DataFrame.\")\n\n    if not isinstance(cols, list):\n        raise ValueError(\"'cols' must be a list of column names.\")\n\n    if not all(c in df.columns for c in cols):\n        raise ValueError(\"All specified columns must exist in the DataFrame.\")\n\n    scaler = StandardScaler()\n    scaled_cols = {}\n    for col in cols:\n        scaled_cols[col] = scaler.fit_transform(df[col].to_numpy().reshape(-1, 1))\n    df[cols] = scaled_cols\n\n    return df", "compilation_passed": true, "time": 0.0019311904907226562, "tests_passed": false, "error": "IndexError"}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError('df must be a DataFrame')\n    if not isinstance(cols, list):\n        raise ValueError('cols must be a list')\n    for col in cols:\n        if col not in df.columns:\n            raise ValueError('Columns in cols must exist in df')\n    for col in cols:\n        scaler = StandardScaler()\n        df[col] = scaler.fit_transform(df[[col]])\n    return df", "compilation_passed": true, "time": 0.0073888301849365234, "tests_passed": true, "error": null}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"'df' must be a DataFrame\")\n\n    if not isinstance(cols, list):\n        raise ValueError(\"'cols' must be a list of column names\")\n\n    if not set(cols).issubset(set(df.columns)):\n        raise ValueError(\"'cols' contains columns that are not in 'df'\")\n\n    scaler = StandardScaler()\n    df[cols] = scaler.fit_transform(df[cols])\n\n    return df", "compilation_passed": true, "time": 0.006582975387573242, "tests_passed": true, "error": null}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"'df' must be a DataFrame\")\n    if not isinstance(cols, list):\n        raise ValueError(\"'cols' must be a list\")\n    for col in cols:\n        if col not in df.columns:\n            raise ValueError(\"columns in 'cols' must exist in 'df'\")\n\n    # convert column to numeric if they are not\n    for col in cols:\n        if not pd.api.types.is_numeric_dtype(df[col]):\n            try:\n                df[col] = pd.to_numeric(df[col])\n            except Exception:\n                raise ValueError(\"'cols' must be numeric columns\")\n\n    scaler = StandardScaler()\n    df[cols] = scaler.fit_transform(df[cols])\n\n    return df", "compilation_passed": true, "time": 0.006598234176635742, "tests_passed": true, "error": null}
{"code": "# Check inputs\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input 'df' must be a DataFrame\")\n    if not isinstance(cols, list):\n        raise ValueError(\"Input 'cols' must be a list\")\n    if not set(cols).issubset(df.columns):\n        raise ValueError(\"Columns in 'cols' must exist in 'df'\")\n\n    # Standardize columns\n    scaler = StandardScaler()\n    df[cols] = scaler.fit_transform(df[cols])\n    return df", "compilation_passed": true, "time": 0.006403923034667969, "tests_passed": true, "error": null}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError('df must be a DataFrame')\n    if not isinstance(cols, list):\n        raise ValueError('cols must be a list')\n    if not cols <= set(df.columns):\n        raise ValueError('columns in cols must exist in df')\n\n    scaler = StandardScaler()\n    for col in cols:\n        df[col] = scaler.fit_transform(df[col].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0010509490966796875, "tests_passed": false, "error": "TypeError"}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError('df must be a DataFrame')\n\n    if not isinstance(cols, list):\n        raise ValueError('cols must be a list')\n\n    for col in cols:\n        if col not in df.columns:\n            raise ValueError(f'Column {col} not in DataFrame')\n\n    scaler = StandardScaler()\n    df[cols] = scaler.fit_transform(df[cols])\n    return df", "compilation_passed": true, "time": 0.00655674934387207, "tests_passed": true, "error": null}
{"code": "# Check if df is a DataFrame\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"df must be a DataFrame\")\n\n    # Check if cols is a list\n    if not isinstance(cols, list):\n        raise ValueError(\"cols must be a list\")\n\n    # Check if all columns in cols exist in df\n    if not set(cols).issubset(set(df.columns)):\n        raise ValueError(\"Columns in cols do not exist in df\")\n\n    # Select only the specified numeric columns\n    cols_to_scale = df[cols].select_dtypes(include=[np.number])\n\n    # Standardize the columns using sklearn.preprocessing.StandardScaler\n    scaler = StandardScaler()\n    scaled = scaler.fit_transform(cols_to_scale)\n\n    # Create a new dataframe with the standardized columns\n    result = pd.DataFrame(scaled, index=df.index, columns=cols_to_scale.columns)\n\n    # Replace the original columns with the standardized columns\n    df[", "compilation_passed": false, "time": 0.0002009868621826172, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"'df' must be a DataFrame\")\n    if not isinstance(cols, list):\n        raise ValueError(\"'cols' must be a list\")\n    for c in cols:\n        if c not in df:\n            raise ValueError(\"Column '{}' does not exist in the dataframe\".format(c))\n    scaler = StandardScaler()\n    df[cols] = scaler.fit_transform(df[cols])\n    return df", "compilation_passed": true, "time": 0.006661891937255859, "tests_passed": true, "error": null}
{"code": "# Check if 'df' is a DataFrame\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"'df' must be a DataFrame\")\n\n    # Check if 'cols' is a list\n    if not isinstance(cols, list):\n        raise ValueError(\"'cols' must be a list\")\n\n    # Check if all columns in 'cols' exist in 'df'\n    if not set(cols).issubset(df.columns):\n        raise ValueError(\"Columns in 'cols' must exist in 'df'\")\n\n    # Create a copy of 'df'\n    df_copy = df.copy()\n\n    # Get numeric columns\n    df_numeric = df_copy.select_dtypes(include='number')\n\n    # Select the specified columns\n    df_subset = df_numeric[cols]\n\n    # Standardize the numeric columns\n    scaler = StandardScaler()\n    df_subset_scaled = scaler.fit_transform(df_subset)\n\n    # Assign the standardized columns back to the original dataframe\n    for col in", "compilation_passed": false, "time": 0.00017595291137695312, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Check if 'df' is a DataFrame, 'cols' is a list, and all columns in 'cols' exist in 'df'\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"'df' must be a DataFrame\")\n    if not isinstance(cols, list):\n        raise ValueError(\"'cols' must be a list\")\n    if not set(cols).issubset(df.columns):\n        raise ValueError(\"columns in 'cols' must exist in 'df'\")\n\n    # Standardize numeric columns using StandardScaler\n    scaler = StandardScaler()\n    df[cols] = scaler.fit_transform(df[cols])\n\n    # Return modified dataframe\n    return df", "compilation_passed": true, "time": 0.006536960601806641, "tests_passed": true, "error": null}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"'df' must be a pandas DataFrame\")\n\n    if not isinstance(cols, list):\n        raise ValueError(\"'cols' must be a list\")\n\n    for col in cols:\n        if col not in df.columns:\n            raise ValueError(f\"Column '{col}' does not exist in 'df'\")\n\n    scaler = StandardScaler()\n\n    for col in cols:\n        df[col] = scaler.fit_transform(df[[col]])\n\n    return df", "compilation_passed": true, "time": 0.007269144058227539, "tests_passed": true, "error": null}
