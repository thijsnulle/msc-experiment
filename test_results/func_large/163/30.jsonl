{"code": "# Generate DataFrame\n    df = pd.DataFrame(np.random.rand(rows, cols),\n                      columns=[\"A\", \"B\", \"C\", \"D\", \"E\"][:cols])\n\n    # Visualize data with stacked bar chart\n    ax = df.plot.barh(stacked=True,\n                      title=\"Stacked bar chart for the random numerical data of a DataFrame\",\n                      xlabel=\"Value\",\n                      ylabel=\"Row\",\n                      legend=False)\n    ax.legend(loc='best',\n              bbox_to_anchor=(1.01, 1),\n              borderaxespad=0)\n\n    return ax", "compilation_passed": true, "time": 0.04392719268798828, "tests_passed": true, "error": null}
{"code": "if cols > 5:\n        raise ValueError(\"The number of columns can't exceed 5\")\n\n    # Creating DataFrame\n    df = pd.DataFrame(np.random.rand(rows, cols), columns=[\"A\", \"B\", \"C\", \"D\", \"E\"][:cols])\n    df = df * 100\n\n    # Stacked bar plot\n    ax = df.plot.barh(stacked=True)\n    return ax", "compilation_passed": true, "time": 0.04438018798828125, "tests_passed": true, "error": null}
{"code": "if cols > 5:\n        raise ValueError(\"The maximum number of columns is 5 (corresponding to the five categories).\")\n\n    df = pd.DataFrame(np.random.rand(rows, cols), columns=[f\"{chr(ord('A') + i)}\" for i in range(cols)])\n    ax = df.plot.barh(stacked=True, width=0.9, figsize=(4 + int(cols / 3), 3 + int(rows / 3)), legend=None)\n    ax.set_xlabel(\"Random numerical data\")\n    return ax", "compilation_passed": true, "time": 0.042906999588012695, "tests_passed": true, "error": null}
{"code": "# Initialize the DataFrame with random numerical data\n    df = pd.DataFrame(np.random.randint(0, 10, size=(rows, cols)))\n\n    # Define the names of the categories\n    categories = {0: \"A\", 1: \"B\", 2: \"C\", 3: \"D\", 4: \"E\"}\n\n    # Plot the stacked bar chart using the pandas.DataFrame.plot() method\n    ax = df.plot(stacked=True, kind='bar')\n    ax.set_ylabel(\"Categories\")\n\n    # Assign names to each bar\n    for patch, name in zip(ax.patches, categories.values()):\n        bbox = patch.get_bbox()\n        x = bbox.xmax\n        y = bbox.ymax + (bbox.ymax - bbox.ymin) / 2\n        ax.annotate(name, (x, y), xytext=(5, 0), textcoords='offset points', ha='left', va='center')\n\n    # Remove the y-axis", "compilation_passed": true, "time": 0.013671159744262695, "tests_passed": false, "error": "AttributeError"}
{"code": "# Check if the number of columns exceeds the number of available categories\n    if cols > 5:\n        raise ValueError(\"Number of columns cannot exceed 5\")\n\n    # Define a list of categories (labels) for the DataFrame columns\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n\n    # Generate random numerical data for the DataFrame\n    data = pd.DataFrame(np.random.randint(0, 100, size=(rows, cols)), columns=categories[:cols])\n\n    # Set up the stacked bar chart\n    ax = data.plot(kind=\"bar\", stacked=True, title=\"Stacked Bar Chart\")\n    ax.set_xlabel(\"Category\")\n    ax.set_ylabel(\"Value\")\n\n    # Return the Axes object to display the chart\n    return ax", "compilation_passed": true, "time": 1.0876150131225586, "tests_passed": false, "error": "TimeoutError"}
{"code": "if cols > 5:\n        raise ValueError(\"The number of columns can not exceed 5, as the maximum number of available categories is 5.\")\n\n    # Generate random numerical data\n    df = pd.DataFrame(np.random.randint(10, 20, size=(rows, cols)), columns=list('ABCDE')[:cols])\n    # Visualize the data in a stacked bar chart for specified categories\n    ax = df.plot.barh(stacked=True)\n    return ax", "compilation_passed": true, "time": 0.0455169677734375, "tests_passed": true, "error": null}
{"code": "if cols > 5:\n        raise ValueError(\"Number of categories should not exceed 5\")\n\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n\n    np.random.seed(1234)  # For reproducibility\n    df = pd.DataFrame(np.random.randint(low=0, high=100, size=(rows, cols)), columns=categories[:cols])\n\n    ax = df.plot.bar(stacked=True, rot=0)\n    return ax", "compilation_passed": true, "time": 0.043179988861083984, "tests_passed": true, "error": null}
{"code": "import matplotlib.pyplot as plt\n\n    # Generate random DataFrame with specified rows and columns (limited to 5 columns to avoid plotting issues)\n    df = pd.DataFrame(np.random.randint(0, 50, size=(rows, min(cols, 5))), columns=list('ABCDE')[:cols])\n\n    # Convert the DataFrame into stacked bar chart\n    ax = df.plot.barh(stacked=True, width=0.5)\n\n    return ax", "compilation_passed": true, "time": 0.049421072006225586, "tests_passed": true, "error": null}
{"code": "if cols > 5:\n        raise ValueError(\"Too many columns\")\n    df = pd.DataFrame(np.random.random((rows, cols)))\n    df.columns = [\"A\", \"B\", \"C\", \"D\", \"E\"][:cols]\n    df = df.stack().groupby(level=0, axis=0).sum().reset_index()\n    ax = df.plot.barh(\n        x=\"index\",\n        stacked=True,\n        color=[\"tab:blue\", \"tab:orange\", \"tab:green\", \"tab:red\", \"tab:purple\"][\n            :cols\n        ],\n        edgecolor=\"black\",\n    )\n    return ax", "compilation_passed": true, "time": 0.009259939193725586, "tests_passed": true, "error": null}
{"code": "if cols > 5:\n        raise ValueError(\"Number of cols cannot exceed 5\")\n\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"][:cols]\n    data = np.random.rand(rows, cols)\n    df = pd.DataFrame(data, columns=categories)\n\n    ax = df.plot(\n        kind=\"bar\", stacked=True, title=\"Data visualization in stacked bar chart\", ylabel=\"Amount\"\n    )\n\n    return ax", "compilation_passed": true, "time": 0.0440671443939209, "tests_passed": true, "error": null}
{"code": "if cols > 5:\n        raise ValueError('Too many columns. Max is 5')\n\n    df = pd.DataFrame(\n        np.round(np.random.normal(size=(rows, cols)), 2),\n        columns=list('ABCDE')[:cols],\n    )\n    ax = df.plot.barh(stacked=True)\n    return ax", "compilation_passed": true, "time": 0.04392814636230469, "tests_passed": true, "error": null}
{"code": "import seaborn as sns\n\n    np.random.seed(0)\n    if cols <= 5:\n        mat = np.random.rand(rows, cols)\n        df = pd.DataFrame(mat, columns=list(map(lambda x: f'Cat-{x}', range(cols))))\n        df = df.apply(lambda x: (x*100).round())\n        return sns.barplot(data=df, kind='stacked')\n    else:\n        raise ValueError('The number of columns should not exceed the number of available categories (5).')", "compilation_passed": true, "time": 0.010513067245483398, "tests_passed": false, "error": "AttributeError"}
{"code": "if cols > 5:\n        raise ValueError(\"The number of columns must not exceed 5\")\n    dictionary = {}\n    for i in range(cols):\n        dictionary[chr(65+i)] = np.random.randint(1, 10, size=(rows, 1))\n    df = pd.DataFrame(data=dictionary)\n    df.plot(kind='bar', stacked=True)\n    return plt.gca()", "compilation_passed": true, "time": 0.0010371208190917969, "tests_passed": false, "error": "ValueError"}
{"code": "import matplotlib.pyplot as plt\n\n    if cols > 5:\n        raise ValueError(\"The number of columns cannot exceed 5\")\n    df = pd.DataFrame(np.random.rand(rows, cols), columns=[f\"{chr(i+65)}\" for i in range(cols)])\n    # 1. Create a DataFrame with random numerical data\n    df.plot(kind='bar', stacked=True, figsize=(10, 5))  # Visualize the data in a stacked bar chart\n    plt.legend(bbox_to_anchor=(1, 1), loc='upper left')  # Adjust legend position for 3 or more categories\n    ax = plt.gca()  # Get the current Axes object\n    return ax  # Return the Axes object", "compilation_passed": true, "time": 0.04598712921142578, "tests_passed": true, "error": null}
{"code": "if cols > 5:\n        raise ValueError(\"Number of categories cannot exceed 5.\")\n    matplotlib.style.use('dark_background')\n    categories = {i: chr(65 + i) for i in range(cols)}\n    data = np.random.rand(rows, cols)\n    df = pd.DataFrame(data, columns=categories.values())\n    return df.plot(kind='bar', stacked=True)", "compilation_passed": true, "time": 0.04414105415344238, "tests_passed": true, "error": null}
{"code": "import matplotlib\n\n    if cols > 5:\n        raise ValueError(\n            \"Number of columns/categories should be less than or equal to 5.\"\n        )\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"][:cols]\n    df = pd.DataFrame(np.random.rand(rows, cols), columns=categories)\n    df.plot(\n        kind=\"bar\",\n        stacked=True,\n        color=plt.cm.get_cmap(\"tab20c\").colors[:cols],\n        title=\"Stacked Bar Chart\",\n        figsize=(10, 6),\n    )\n    plt.xlabel(\"Rows\")\n    plt.ylabel(\"Value\")\n    plt.legend(categories)\n    return plt.gca()", "compilation_passed": true, "time": 0.04713010787963867, "tests_passed": true, "error": null}
{"code": "if cols > 5:\n        raise ValueError(\"Max cols should be <= 5\")\n    df = pd.DataFrame(np.random.rand(rows, cols))\n\n    fig, ax = plt.subplots(figsize=(10, 5))\n    ax.bar(df.index, df.iloc[:, 0], label=\"A\")\n    for i in range(1, cols):\n        ax.bar(df.index, df.iloc[:, i], bottom=df.iloc[:, :i].sum(axis=1), label=chr(ord(\"A\") + i))\n    ax.set_title(f\"{rows} x {cols}\")\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Value\")\n    ax.legend()\n    return ax", "compilation_passed": true, "time": 0.03120899200439453, "tests_passed": true, "error": null}
{"code": "import matplotlib.pyplot as plt\n    import numpy as np\n    import pandas as pd\n\n    np.random.seed(1)\n    # If the number of columns exceeds the number of available categories, raise an error\n    if cols > 5:\n        raise ValueError(\"Maximum of 5 categories can be visualized at once.\")\n    # Define the column names and generate random numerical data\n    columns = [\"A\", \"B\", \"C\", \"D\", \"E\"][:cols]\n    df = pd.DataFrame(np.random.randint(low=0, high=101, size=(rows, cols)), columns=columns)\n    # Define colors for each category\n    colors = [\"#ffa600\", \"#00a2e8\", \"#ff5a52\", \"#807eff\", \"#6bd42a\"][:cols]\n    # Plot the stacked bar chart\n    df.plot(kind=\"barh\", stacked=True, color=colors)\n    ax = plt.gca()\n    ", "compilation_passed": true, "time": 0.013689041137695312, "tests_passed": false, "error": "AttributeError"}
{"code": "categories = [\"A\", \"B\", \"C\", \"D\", \"E\"][:cols]\n    if cols > len(categories):\n        raise ValueError(\n            f\"The number of columns is greater than the number of available categories.\"\n            f\"Available categories: {categories}\")\n    df = pd.DataFrame(np.random.rand(rows, cols), columns=categories)\n    ax = df.plot.barh(stacked=True, colormap=\"Dark2\")\n    ax.xaxis.grid(True, which=\"major\")\n    ax.yaxis.grid(False)\n    return ax", "compilation_passed": true, "time": 0.04548215866088867, "tests_passed": true, "error": null}
{"code": "categories = ['A', 'B', 'C', 'D', 'E']  # Define the categories for the stacked bars\n    if cols > len(categories):\n        raise ValueError(\"Number of columns exceeds the number of available categories\")\n    df = pd.DataFrame(np.random.randint(low=1, high=100, size=(rows, cols)), columns=categories[:cols])\n    df = df.T\n\n    return df.plot(kind='bar', stacked=True)", "compilation_passed": true, "time": 0.04645514488220215, "tests_passed": true, "error": null}
{"code": "if cols > 5:\n        raise ValueError(\"Number of columns cannot exceed 5.\")\n    categories = {i: category for i, category in enumerate(\"ABCDE\"[:cols])}\n    data = pd.DataFrame(\n        np.random.randint(1, 100, size=(rows, cols)), columns=list(categories.values())\n    )\n\n    ax = data.plot.barh(stacked=True, figsize=(10, 7))\n    ax.legend(list(categories.values()))\n    return ax", "compilation_passed": true, "time": 0.045923709869384766, "tests_passed": true, "error": null}
{"code": "if cols > 5:\n        raise ValueError(\"Number of columns exceeds the number of available categories\")\n    df = pd.DataFrame(np.random.randint(1, 100, size=(rows, cols)), columns=list(\"ABCDE\")[:cols])\n    df = df / df.sum(axis=1).values[:, np.newaxis]\n    ax = df.plot.barh(stacked=True)\n    return ax", "compilation_passed": true, "time": 0.045068979263305664, "tests_passed": true, "error": null}
{"code": "if cols > 5:\n        raise ValueError(\"Cannot have more than 5 columns for a stacked bar chart\")\n    data = np.random.rand(rows, cols)\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    df = pd.DataFrame(data, columns=categories[:cols])\n    return df.plot(kind='bar', stacked=True, title=\"Stacked Bar Chart\")", "compilation_passed": true, "time": 0.04417729377746582, "tests_passed": true, "error": null}
{"code": "if cols > 5:\n        raise ValueError(\"The number of columns cannot exceed the number of available categories (5).\")\n\n    df = pd.DataFrame(np.random.rand(rows, cols), columns=[f'Category {chr(ord(\"A\") + i)}' for i in range(cols)])\n\n    return df.plot.barh(stacked=True, figsize=(15, 8))", "compilation_passed": true, "time": 0.04405403137207031, "tests_passed": true, "error": null}
{"code": "if cols > 5:\n        raise ValueError(\"Too many columns. Maximum is 5.\")\n\n    # Generate random numerical data\n    df = pd.DataFrame(np.random.randint(1, 100, (rows, cols)))\n\n    # Visualize the data in a stacked bar chart\n    ax = df.plot.bar(stacked=True)\n\n    return ax", "compilation_passed": true, "time": 0.04421401023864746, "tests_passed": true, "error": null}
{"code": "# Validate the number of columns (categories)\n    max_categories = 5\n    if cols > max_categories:\n        raise ValueError(f\"The number of columns must not exceed {max_categories}.\")\n\n    # Create a list of categories based on the number of columns\n    categories = [chr(65 + i) for i in range(cols)]  # chr(65) is \"A\", chr(66) is \"B\", etc.\n\n    # Generate random numerical data for each category\n    data = np.random.rand(rows, cols)\n\n    # Create the DataFrame using the generated data and categories\n    df = pd.DataFrame(data, columns=categories)\n\n    # Create a stacked bar chart visualization\n    ax = df.plot.bar(stacked=True, edgecolor=\"black\")\n\n    # Set the chart title and labels\n    ax.set_title(\"Stacked Bar Chart\")\n    ax.set_xlabel(\"Sample\")\n    ax.set_ylabel(\"Value\")\n\n    return ax", "compilation_passed": true, "time": 0.04496192932128906, "tests_passed": true, "error": null}
{"code": "if cols > 5:\n        raise ValueError(\"Only up to 5 categories can be plotted.\")\n\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    categories = categories[:cols]\n\n    data = np.random.randint(0, 10, size=(rows, cols))\n    df = pd.DataFrame(data, columns=categories)\n\n    ax = df.plot.barh(stacked=True, figsize=(5, 4))\n\n    return ax", "compilation_passed": true, "time": 0.04408884048461914, "tests_passed": true, "error": null}
{"code": "if cols > 5:\n        raise ValueError(\"Invalid number of columns. Maximum is 5.\")\n    np.random.seed(50)\n    data_dict = {f\"{i}\": np.random.rand(rows) * 100 for i in range(1, cols + 1)}\n    df = pd.DataFrame(data_dict)\n    ax = df.plot.barh(stacked=True, figsize=(8, 6))\n    return ax", "compilation_passed": true, "time": 0.04343080520629883, "tests_passed": true, "error": null}
{"code": "categories = ['A', 'B', 'C', 'D', 'E']\n\n    if cols > len(categories):\n        raise ValueError(f\"Too many columns specified. Max number of columns is {len(categories)}.\")\n\n    df = pd.DataFrame(data=np.random.randint(-1000, 1000, (rows, cols)), columns=categories[:cols])\n    ax = df.plot.barh(stacked=True, width=0.9)\n\n    return ax", "compilation_passed": true, "time": 0.2800619602203369, "tests_passed": true, "error": null}
{"code": "if cols > 5:\n        raise ValueError('Only 5 categories available')\n\n    # Generate random numerical data for DataFrame\n    mat = np.random.randint(100, size=(rows, cols))\n    # Set column names as categories\n    cols = ['A', 'B', 'C', 'D', 'E'][:cols]\n    df = pd.DataFrame(mat, columns=cols)\n    # Plot the stacked bar chart\n    return df.plot.bar(stacked=True, figsize=(5, 4), title='Stacked Bar Chart')", "compilation_passed": true, "time": 0.044206857681274414, "tests_passed": true, "error": null}
