{"code": "rand_list = []\n    heap_list = []\n    for i in range(list_length):\n        rand_list.append(random.randint(min_value, max_value))\n    heapq.heapify(rand_list)\n    for i in range(k):\n        heap_list.append(heapq.heappop(rand_list))\n    return rand_list, heap_list", "compilation_passed": true, "time": 0.002003908157348633, "tests_passed": true, "error": null}
{"code": "rand_list = random.sample(range(min_value, max_value), list_length)\n    least_k = heapq.nsmallest(k, rand_list)\n\n    return rand_list, least_k", "compilation_passed": true, "time": 0.001706838607788086, "tests_passed": false, "error": "ValueError"}
{"code": "# Generate a random list of integers\n    random_list = [random.randint(min_value, max_value) for i in range(list_length)]\n\n    # Use heapq to find the k smallest numbers\n    least_k = heapq.nsmallest(k, random_list)\n\n    return random_list, least_k", "compilation_passed": true, "time": 0.001483917236328125, "tests_passed": true, "error": null}
{"code": "rand_list = [random.randint(min_value, max_value) for _ in range(list_length)]\n    least_k = heapq.nsmallest(k, rand_list)\n    return rand_list, least_k", "compilation_passed": true, "time": 0.0015790462493896484, "tests_passed": true, "error": null}
{"code": "rand_list = random.sample(range(min_value, max_value), list_length)\n    least_k = heapq.nsmallest(k, rand_list)\n    return rand_list, least_k", "compilation_passed": true, "time": 0.0014300346374511719, "tests_passed": false, "error": "ValueError"}
{"code": "rand_list = [random.randint(min_value, max_value) for i in range(list_length)]\n    least_k = heapq.nsmallest(k, rand_list)\n    return rand_list, least_k", "compilation_passed": true, "time": 0.0013279914855957031, "tests_passed": true, "error": null}
{"code": "if not (isinstance(list_length,int) and isinstance(min_value,int) and isinstance(max_value,int) and isinstance(k,int)):\n        raise TypeError\n    if k > list_length or k < 0 or list_length < 0:\n        raise ValueError\n    rand_list = random.sample(range(min_value, max_value), list_length)\n    least_k = heapq.nsmallest(k, rand_list)\n    return rand_list, least_k", "compilation_passed": true, "time": 0.0013408660888671875, "tests_passed": false, "error": "ValueError"}
{"code": "random.seed()\n    rand_list = [random.randint(min_value, max_value) for _ in range(list_length)]\n    least_k = heapq.nsmallest(k, rand_list)\n\n    return rand_list, least_k", "compilation_passed": true, "time": 0.0014111995697021484, "tests_passed": true, "error": null}
{"code": "rand_list = [random.randint(min_value, max_value) for i in range(list_length)]\n\n    least_k = heapq.nsmallest(k, rand_list)\n\n    return rand_list, least_k", "compilation_passed": true, "time": 0.001332998275756836, "tests_passed": true, "error": null}
{"code": "rand_list = []\n    for i in range(list_length):\n        rand_list.append(random.randint(min_value, max_value))\n    least_k = heapq.nsmallest(k, rand_list)\n    return (rand_list, least_k)", "compilation_passed": true, "time": 0.0012199878692626953, "tests_passed": true, "error": null}
{"code": "rand_list = [random.randint(min_value,max_value) for _ in range(list_length)]\n    least_k = heapq.nsmallest(k, rand_list)\n    return rand_list, least_k", "compilation_passed": true, "time": 0.0012080669403076172, "tests_passed": true, "error": null}
{"code": "rand_list = [random.randint(min_value, max_value) for i in range(list_length)]\n    least_k = heapq.nsmallest(k, rand_list)\n\n    return rand_list, least_k", "compilation_passed": true, "time": 0.0010759830474853516, "tests_passed": true, "error": null}
{"code": "rand_list = [random.randint(min_value, max_value) for i in range(list_length)]\n    least_k = heapq.nsmallest(k, rand_list)\n    return (rand_list, least_k)", "compilation_passed": true, "time": 0.0011301040649414062, "tests_passed": true, "error": null}
{"code": "# Generate a random list of integers\n    rand_list = [random.randint(min_value, max_value) for i in range(list_length)]\n\n    # Use heapq to find the k smallest numbers\n    least_k = heapq.nsmallest(k, rand_list)\n\n    return rand_list, least_k", "compilation_passed": true, "time": 0.0010900497436523438, "tests_passed": true, "error": null}
{"code": "rand_list = [random.randint(min_value, max_value) for i in range(list_length)]\n    least_k = heapq.nsmallest(k, rand_list)\n    return (rand_list,least_k)", "compilation_passed": true, "time": 0.001119852066040039, "tests_passed": true, "error": null}
{"code": "if k > max_value - min_value:\n        raise ValueError('k should be less than max_value - min_value')\n\n    rand_list = random.sample(range(min_value, max_value), list_length)\n    least_k = heapq.nsmallest(k, rand_list)\n    return rand_list, least_k", "compilation_passed": true, "time": 0.0009968280792236328, "tests_passed": false, "error": "ValueError"}
{"code": "rand_list = [random.randint(min_value, max_value) for _ in range(list_length)]\n    least_k = heapq.nsmallest(k, rand_list)\n    return (rand_list, least_k)", "compilation_passed": true, "time": 0.0011332035064697266, "tests_passed": true, "error": null}
{"code": "# Randomly generate a list of integers with specified length and values within the given range.\n    rand_list = [random.randint(min_value, max_value) for _ in range(list_length)]\n\n    # Use heapq to find the k smallest numbers in the list.\n    least_k = heapq.nsmallest(k, rand_list)\n\n    return rand_list, least_k", "compilation_passed": true, "time": 0.0009741783142089844, "tests_passed": true, "error": null}
