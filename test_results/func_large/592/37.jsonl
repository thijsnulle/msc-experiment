{"code": "file_path = os.path.join(output_dir, 'sensor_data.csv')\n    start_time = datetime.now()\n    end_time = start_time + datetime.timedelta(hours=hours)\n    sensor_data = []\n    while datetime.now() <= end_time:\n        time = datetime.now()\n        temperature = randint(20, 25)\n        humidity = randint(70, 75)\n        pressure = randint(1000, 1010)\n        sensor_data.append((time, temperature, humidity, pressure))\n\n    with open(file_path, 'w', newline='') as csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerow(['Time', *SENSORS])\n        writer.writerows(sensor_data)\n\n    return file_path", "compilation_passed": true, "time": 0.0007960796356201172, "tests_passed": false, "error": "AttributeError"}
{"code": "now = datetime.now()\n    start_time = now.replace(minute=0, second=0, microsecond=0)\n    end_time = now + hours * 3600  # Convert hours to seconds\n\n    # Generate sensor data\n    data = []\n    time = start_time\n    while time <= end_time:\n        temp = randint(-100, 100)\n        humidity = randint(0, 100)\n        pressure = randint(600, 1200)\n        data.append([time, temp, humidity, pressure])\n        time += datetime.timedelta(hours=1)\n\n    # Save data to CSV file\n    file_path = os.path.join(output_dir, f'sensor_data_{now.strftime(\"%Y%m%d%H%M%S\")}.csv')\n    with open(file_path, 'w', newline='') as f:\n        writer = csv.writer(f)\n        writer.writerow(['Time', 'Temperature', '", "compilation_passed": false, "time": 0.00011420249938964844, "tests_passed": false, "error": "SyntaxError"}
{"code": "if hours < 0:\n        raise ValueError(\"Number of hours must be positive\")\n\n    file_path = f\"{output_dir}/sensor_data.csv\"\n    start_date = datetime.now().replace(microsecond=0)\n    end_date = start_date + datetime.timedelta(hours=hours)\n\n    with open(file_path, 'w', newline='') as csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerow(['Time', 'Temperature', 'Humidity', 'Pressure'])\n\n        current_time = start_date\n        while current_time < end_date:\n            writer.writerow([\n                current_time.strftime('%Y-%m-%d %H:%M:%S'),\n                randint(10, 50) / 10,\n                randint(20, 80) / 10,\n                randint(29000, 32000) / 100\n            ])\n            current_time +=", "compilation_passed": false, "time": 0.0002269744873046875, "tests_passed": false, "error": "SyntaxError"}
{"code": "start = datetime.now()\n    with open('sensor_data.csv', 'w') as file:\n        writer = csv.writer(file, dialect='excel')\n        writer.writerow(['Time', *SENSORS])\n        for _ in range(hours*60*60):\n            # Generate a random timestamp within the specified hours\n            timestamp = start + datetime.timedelta(seconds=randint(0, hours*60*60))\n\n            # Generate random sensor values\n            temperature = randint(0, 50)\n            humidity = randint(0, 100)\n            pressure = randint(700, 1000)\n\n            # Write the data to the CSV file\n            writer.writerow([timestamp, temperature, humidity, pressure])\n\n    # Return the file path\n    return os.path.join(output_dir, 'sensor_data.csv')", "compilation_passed": true, "time": 0.0007929801940917969, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Validate input parameters\n    if not isinstance(hours, int):\n        raise ValueError('hours must be an integer')\n    if not hours > 0:\n        raise ValueError('hours must be positive')\n    if not isinstance(output_dir, str):\n        raise ValueError('output_dir must be a string')\n    if not os.path.exists(output_dir):\n        raise ValueError('output_dir must exist')\n\n    # Generate sensor data\n    data = []\n    start_date = datetime.now()\n    for i in range(hours * 3600):\n        current_date = start_date + datetime.timedelta(seconds=i)\n        data.append([current_date, randint(-5, 40), randint(50, 90), randint(980, 1030)])\n\n    # Create the CSV file\n    output_path = os.path.join(output_dir, 'sensor_data.csv')\n    with open(output_path, 'w') as csv_file:\n        csv_writer", "compilation_passed": true, "time": 0.0008130073547363281, "tests_passed": false, "error": "ValueError"}
{"code": "if hours <= 0:\n        raise ValueError(\"The 'hours' argument should be greater than zero.\")\n\n    # Get the current time\n    current_time = datetime.now()\n\n    # Create the output directory if it doesn't exist\n    os.makedirs(output_dir, exist_ok=True)\n\n    # Create the CSV file path\n    csv_file_path = os.path.join(output_dir, 'sensor_data.csv')\n\n    # Open the CSV file for writing\n    with open(csv_file_path, mode='w', newline='') as csv_file:\n        # Initialize the CSV writer\n        writer = csv.writer(csv_file)\n\n        # Write the header row\n        writer.writerow(['Time', 'Temperature', 'Humidity', 'Pressure'])\n\n        # Generate and write the data rows\n        for _ in range(hours):\n            # Generate random sensor data\n            temperature = randint(-10, 35)\n            humidity = randint(0, 100", "compilation_passed": false, "time": 0.00020194053649902344, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Initialize variables\n    start_time = datetime.now().replace(microsecond=0)\n    end_time = start_time + datetime.timedelta(hours=hours)\n    data = []\n\n    # Generate sensor data\n    for time_step in range(hours * 60):\n        data_row = []\n        current_time = start_time + datetime.timedelta(minutes=time_step)\n        current_hour = current_time.hour\n        current_minute = current_time.minute\n        current_second = current_time.second\n        time_string = f\"{current_hour:02d}:{current_minute:02d}:{current_second:02d}\"\n        data_row.append(time_string)\n        for sensor in SENSORS:\n            data_row.append(randint(1, 100))\n        data.append(data_row)\n\n    # Save data to CSV file\n    file_name = f\"sensor_data_{hours}h.csv\"\n    file_path = os.path.join(output_", "compilation_passed": false, "time": 0.0002307891845703125, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Validate input\n    if not isinstance(hours, int):\n        raise ValueError(\"Input must be an integer\")\n    if not hours >= 1:\n        raise ValueError(\"Input must be positive integer\")\n\n    # Generate sensor data for specified number of hours\n    time_list = [\n        datetime.now() +\n        datetime.timedelta(hours=i) for i in range(hours)\n    ]\n\n    temp_list = [\n        randint(0, 100) / 100 + 20 for _ in range(hours)\n    ]\n\n    humidity_list = [\n        randint(0, 100) / 100 + 10 for _ in range(hours)\n    ]\n\n    pressure_list = [\n        randint(0, 100) / 100 + 1000 for _ in range(hours)\n    ]\n\n    # Combine data into a list of lists\n    data = [time_list, temp_list, humidity_list, pressure_list]\n    transposed =", "compilation_passed": false, "time": 0.00021004676818847656, "tests_passed": false, "error": "SyntaxError"}
{"code": "start_time = datetime.now()\n    file_path = os.path.join(output_dir, 'sensor_data.csv')\n    with open(file_path, 'w', newline='') as f:\n        writer = csv.writer(f)\n        writer.writerow(['Time', 'Temperature', 'Humidity', 'Pressure'])\n        for i in range(hours * 3600):\n            time = start_time + datetime.timedelta(seconds=i)\n            temperature = randint(-20, 30)\n            humidity = randint(50, 80)\n            pressure = randint(980, 1020)\n            writer.writerow([time, temperature, humidity, pressure])\n    return file_path", "compilation_passed": true, "time": 0.0007951259613037109, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "start_time = datetime.now()\n    output_file = os.path.join(output_dir, 'sensor_data.csv')\n\n    with open(output_file, 'w') as file:\n        csv_writer = csv.writer(file)\n        csv_writer.writerow(['Time', *SENSORS])\n        for hour in range(hours):\n            for minute in range(0, 60, 15):\n                for second in range(0, 60, 15):\n                    data_time = start_time + datetime.timedelta(hours=hour, minutes=minute, seconds=second)\n                    temperature = randint(0, 100)\n                    humidity = randint(0, 100)\n                    pressure = randint(0, 100)\n                    csv_writer.writerow([data_time.strftime('%Y-%m-%d %H:%M:%S'), temperature, humidity, pressure])\n\n    return output_file", "compilation_passed": true, "time": 0.0008161067962646484, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "current_hour = datetime.now().hour\n    data = []\n    for hour in range(current_hour, current_hour + hours):\n        for minute in range(0, 60, 2):\n            if minute % 2 == 0:\n                time = datetime.now().replace(hour=hour, minute=minute)\n                temperature = randint(0, 40)\n                humidity = randint(0, 100)\n                pressure = randint(0, 2000)\n                data.append([time, temperature, humidity, pressure])\n\n    file_path = os.path.join(output_dir, 'sensor_data.csv')\n    with open(file_path, mode='w', newline='') as csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerow(['Time', 'Temperature', 'Humidity', 'Pressure'])\n        for row in data:\n            writer.writerow(row)\n\n    return file_path", "compilation_passed": true, "time": 0.0009009838104248047, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Generate sensor data\n    rows = []\n    start_date = datetime.now()\n    for hour in range(hours):\n        hour_date = start_date + datetime.timedelta(hours=hour)\n        row = [hour_date.strftime('%Y-%m-%d %H:%M:%S')]  # Format date as string for CSV\n        row.extend(randint(0, 100) for _ in range(3))  # Add temperature, humidity, pressure values\n        rows.append(row)\n\n    # Save sensor data to CSV file\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n    file_path = os.path.join(output_dir, 'sensor_data.csv')\n    with open(file_path, 'w', newline='') as csv_file:\n        writer = csv.writer(csv_file)\n        writer.writerow(SENSORS)  # Write header row\n        writer.writerows(rows)\n\n    return file_path", "compilation_passed": true, "time": 0.000804901123046875, "tests_passed": false, "error": "AttributeError"}
{"code": "if hours <= 0:\n        raise ValueError(\"hours must be a positive integer\")\n    current_time = datetime.now()\n    end_time = current_time + datetime.timedelta(hours=hours)\n    while current_time <= end_time:\n        with open(os.path.join(output_dir, 'sensor_data.csv'), 'a') as file:\n            writer = csv.writer(file)\n            writer.writerow([current_time.strftime('%Y-%m-%d %H:%M:%S'), randint(20, 30), randint(50, 70), randint(980, 1020)])\n            current_time += datetime.timedelta(minutes=1)\n    return os.path.join(output_dir, 'sensor_data.csv')", "compilation_passed": true, "time": 0.0007770061492919922, "tests_passed": false, "error": "AttributeError"}
{"code": "# Check if the output directory exists and create it if not\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n\n    # Define the filename for the output CSV file\n    filename = os.path.join(output_dir, 'sensor_data.csv')\n\n    # Generate data for each hour and write it to the CSV file\n    with open(filename, 'w') as csvfile:\n        writer = csv.writer(csvfile, delimiter=',')\n        writer.writerow(['Time', 'Temperature', 'Humidity', 'Pressure'])\n        for hour in range(hours):\n            for minute in range(60):\n                # Generate data for each hour and write it to the CSV file\n                current_time = datetime.now().replace(hour=hour, minute=minute, second=0, microsecond=0)\n                temperature = randint(20, 30)\n                humidity = randint(50, 60)\n                pressure = randint(1000, 10", "compilation_passed": false, "time": 0.0002200603485107422, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Set current time to use as starting point for the data\n    current_time = datetime.now().replace(minute=0, second=0, microsecond=0)\n\n    # Create a list to hold the sensor data\n    sensor_data = []\n\n    # Loop for each hour and generate data\n    for hour in range(hours):\n\n        # Generate random temperature value\n        temperature = randint(18, 35) + randint(0, 99) / 100\n\n        # Generate random humidity value\n        humidity = randint(0, 100)\n\n        # Generate random pressure value\n        pressure = randint(99000, 101000) / 100\n\n        # Create a dictionary of sensor data for this hour\n        data = {\n            'Time': current_time.strftime('%Y-%m-%d %H:%M:%S'),  # Format datetime as string\n            'Temperature': temperature,\n            'Humidity': humidity,\n            'Pressure': pressure\n        }\n\n        # Add the data to", "compilation_passed": true, "time": 0.0007112026214599609, "tests_passed": true, "error": null}
{"code": "# Create the output directory if it does not exist\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n\n    # Generate data for the specified number of hours\n    time = datetime.now()\n    filename = os.path.join(output_dir, 'sensor_data.csv')\n    with open(filename, 'w') as csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerow(['Time', 'Temperature', 'Humidity', 'Pressure'])\n        for _ in range(hours):\n            writer.writerow([\n                time,\n                randint(0, 40),\n                randint(0, 100),\n                randint(800, 1000),\n            ])\n            time = time + datetime.timedelta(hours=1)\n\n    # Return the path of the file that was saved\n    return filename", "compilation_passed": true, "time": 0.0008971691131591797, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "now = datetime.now()\n    end = datetime.now() + datetime.timedelta(hours=hours)\n\n    data = []\n    while now < end:\n        temperature = randint(-10, 35)\n        humidity = randint(50, 100)\n        pressure = randint(1000, 1100)\n        data.append([now, temperature, humidity, pressure])\n        now += datetime.timedelta(minutes=1)\n\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n\n    output_file = os.path.join(output_dir, \"sensor_data.csv\")\n    with open(output_file, mode=\"w\", encoding=\"utf-8\", newline='') as file:\n        writer = csv.writer(file)\n        writer.writerow(['Time', *SENSORS])\n        writer.writerows(data)\n\n    return output_file", "compilation_passed": true, "time": 0.0008339881896972656, "tests_passed": false, "error": "AttributeError"}
{"code": "# Get the current time and subtract the specified number of hours\n    current_time = datetime.now()\n    start_time = current_time - datetime.timedelta(hours=hours)\n\n    # Create the output directory if it doesn't exist\n    os.makedirs(output_dir, exist_ok=True)\n\n    # Generate a random sensor ID\n    sensor_id = randint(1, 100)\n\n    # Define the output file path and name\n    file_path = os.path.join(output_dir, f\"sensor_data_{sensor_id}.csv\")\n\n    # Create a list to hold the data rows\n    rows = []\n\n    # Generate random data for each hour\n    for hour in range(hours):\n        # Get the current hour and format it as a string\n        hour_time = start_time + datetime.timedelta(hours=hour)\n        hour_str = hour_time.strftime(\"%Y-%m-%d %H:00:00\")\n\n        # Generate random data for each sensor\n        temperature = randint(-", "compilation_passed": false, "time": 0.00018215179443359375, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Get current time\n    now = datetime.now()\n\n    # Open a file for writing\n    with open(os.path.join(output_dir, 'sensor_data.csv'), 'w', newline='') as file:\n        # Create a CSV writer\n        writer = csv.writer(file)\n\n        # Write the header\n        writer.writerow(['Time'] + SENSORS)\n\n        # Generate sensor data for the specified number of hours\n        for _ in range(hours * 60):\n            # Get random sensor values\n            temperature = randint(0, 100)\n            humidity = randint(0, 100)\n            pressure = randint(0, 100)\n\n            # Write the data row\n            writer.writerow([now.isoformat()] + [temperature, humidity, pressure])\n\n            # Move one minute into the future\n            now += datetime.timedelta(minutes=1)\n\n    # Return the path of the file\n    return os.path.join(output_dir, 'sensor_data.csv')\n\n", "compilation_passed": true, "time": 0.0007731914520263672, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Generate sensor data\n    data = []\n    for i in range(hours * 60):\n        time_str = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n        temperature = randint(0, 40)\n        humidity = randint(0, 100)\n        pressure = randint(800, 1000)\n        data.append([time_str, temperature, humidity, pressure])\n\n    # Save data in CSV file\n    filename = os.path.join(output_dir, 'sensor_data.csv')\n    with open(filename, mode='w', newline='', encoding='utf-8') as csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerow(SENSORS)\n        for row in data:\n            writer.writerow(row)\n\n    # Return the path of the file\n    return filename", "compilation_passed": true, "time": 0.0009417533874511719, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Validate the input parameter\n    if not isinstance(hours, int) or hours <= 0:\n        raise ValueError(\"The hours parameter must be a positive integer\")\n    elif not isinstance(output_dir, str) or not os.path.exists(output_dir):\n        raise ValueError(\"The output_dir parameter must be a valid directory path\")\n\n    # Generate sensor data for the specified number of hours\n    file_path = os.path.join(output_dir, 'sensor_data.csv')\n    with open(file_path, 'w', newline='') as csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerow(['Time', *SENSORS])\n        for hour in range(hours):\n            timestamp = datetime.now().replace(hour=hour, minute=0, second=0, microsecond=0)\n            data = [timestamp]\n            for _ in SENSORS:\n                data.append(randint(0, 100))\n            writer.writerow(data)\n\n    # Return the path of the output", "compilation_passed": true, "time": 0.000843048095703125, "tests_passed": false, "error": "ValueError"}
{"code": "if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n\n    current_hour = datetime.now().strftime(\"%Y-%m-%d_%H\")\n    file_path = f\"{output_dir}/sensor_data_{current_hour}.csv\"\n\n    with open(file_path, mode='w', newline='') as csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerow(['Time', 'Temperature', 'Humidity', 'Pressure'])\n\n        for _ in range(hours * 6):\n            time = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n            temperature = randint(0, 50)\n            humidity = randint(0, 100)\n            pressure = randint(950, 1050)\n            writer.writerow([time, temperature, humidity, pressure])\n\n    return file_path", "compilation_passed": true, "time": 0.00080108642578125, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if hours <= 0:\n        raise ValueError(\"hours must be a positive integer\")\n\n    file_path = os.path.join(output_dir, 'sensor_data.csv')\n    start_time = datetime.now()\n\n    with open(file_path, mode='w', newline='') as file:\n        writer = csv.writer(file)\n        writer.writerow(['Time', 'Temperature', 'Humidity', 'Pressure'])\n\n        for hour in range(hours):\n            time_diff = datetime.now() - start_time\n            hours_diff = time_diff.days * 24 + time_diff.seconds // 3600\n\n            if hours_diff > hour:\n                continue\n\n            hour_start = start_time + datetime.timedelta(hours=hour)\n\n            for minute in range(60):\n                minute_start = hour_start + datetime.timedelta(minutes=minute)\n                data = [\n                    minute_start.strftime('%Y-%m-%d %H:%M:%S", "compilation_passed": false, "time": 0.00010704994201660156, "tests_passed": false, "error": "SyntaxError"}
{"code": "start_time = datetime.now().replace(microsecond=0)\n    time = start_time\n\n    # Generate sensor data for each hour\n    for i in range(hours):\n        data = []\n\n        for _ in range(3600):  # 1 hour = 3600 seconds\n            time += datetime.timedelta(seconds=1)\n            temperature = randint(20, 25)\n            humidity = randint(40, 70)\n            pressure = randint(1000, 1030)\n            data.append([time, temperature, humidity, pressure])\n\n        # Write data to CSV file\n        with open(os.path.join(output_dir, 'sensor_data.csv'), 'w', newline='') as file:\n            writer = csv.writer(file)\n            writer.writerow(['Time', *SENSORS])\n            writer.writerows(data)\n\n        time += datetime.timedelta(hours=1)\n\n    return os.path.join(output_dir, '", "compilation_passed": false, "time": 0.00010204315185546875, "tests_passed": false, "error": "SyntaxError"}
{"code": "# create the output directory if it doesn't exist\n    os.makedirs(output_dir, exist_ok=True)\n\n    # generate sensor data for the specified number of hours\n    # 1. Create a generator expression using a generator function\n    # 2. Convert the generator expression to a list\n    # 3. Yield the output file path\n    output_filename = 'sensor_data.csv'\n    output_path = os.path.join(output_dir, output_filename)\n    sensor_data = list(generate_sensor_data(hours))\n\n    # save the sensor data to a CSV file\n    with open(output_path, 'w', newline='') as csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerow(['Time'] + SENSORS)\n        writer.writerows(sensor_data)\n\n    # return the output file path\n    yield output_path", "compilation_passed": true, "time": 0.0006852149963378906, "tests_passed": true, "error": null}
{"code": "now = datetime.now()\n    start_time = now - datetime.timedelta(hours=hours)\n    data = []\n\n    for i in range(hours * 60 * 60):\n        time = start_time + datetime.timedelta(seconds=i)\n        temp = randint(10, 30)\n        humidity = randint(1, 100)\n        pressure = randint(700, 1000)\n        row = {'Time': time, 'Temperature': temp, 'Humidity': humidity, 'Pressure': pressure}\n        data.append(row)\n\n    with open(os.path.join(output_dir, 'sensor_data.csv'), mode='w') as f:\n        writer = csv.DictWriter(f, fieldnames=list(data[0].keys()))\n        writer.writeheader()\n        writer.writerows(data)\n\n    return os.path.join(output_dir, 'sensor_data.csv')", "compilation_passed": true, "time": 0.0008330345153808594, "tests_passed": false, "error": "AttributeError"}
{"code": "# Generate random data\n    start_time = datetime.now()\n    rows = []\n    for hour in range(hours):\n        for minute in range(60):\n            for second in range(60):\n                rows.append((start_time + hour, randint(0, 100), randint(0, 100), randint(0, 100)))\n\n    # Write the generated data to a CSV file\n    csv_filename = 'sensor_data.csv'\n    csv_file_path = os.path.join(output_dir, csv_filename)\n    with open(csv_file_path, 'w', newline='') as csvfile:\n        writer = csv.writer(csvfile)\n        writer.writerow(['Time', 'Temperature', 'Humidity', 'Pressure'])\n        for row in rows:\n            writer.writerow(row)\n\n    # Return the CSV file path\n    return csv_file_path", "compilation_passed": true, "time": 0.0007729530334472656, "tests_passed": false, "error": "TypeError"}
{"code": "# Check if the output directory exists, if not, create it\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n\n    # Open a CSV file in the output directory for writing\n    output_file = os.path.join(output_dir, 'sensor_data.csv')\n    with open(output_file, 'w', newline='') as f:\n        writer = csv.writer(f)\n        # Write the header row to the CSV file\n        writer.writerow(['Time'] + SENSORS)\n\n        # Generate sensor data for each hour\n        for _ in range(hours):\n            # Create a timestamp for the current hour\n            timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n\n            # Generate random values for each sensor\n            sensor_data = [randint(0, 100) for _ in range(len(SENSORS))]\n\n            # Write the data to the CSV file\n            writer.writerow([timestamp] + sensor_data)\n", "compilation_passed": true, "time": 0.0007741451263427734, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Create a list of hours to generate data for\n    hours = [i for i in range(hours)]\n    # Iterate over each hour and create a list of sensor data dictionaries\n    sensor_data_list = []\n    for hour in hours:\n        # Create a list of sensor data dictionaries for this hour\n        hour_data = [{'Time': str(datetime.now()),\n                      'Temperature': randint(18, 22),\n                      'Humidity': randint(30, 50),\n                      'Pressure': randint(1000, 1050)}\n                     for _ in range(randint(60, 80))]\n        # Add the hour's data to the sensor_data_list\n        sensor_data_list.extend(hour_data)\n\n    # Determine the file path for the output file\n    file_path = os.path.join(output_dir, 'sensor_data.csv')\n\n    # Write the sensor data to a CSV file with column names\n    with open(file_path, mode='", "compilation_passed": false, "time": 8.916854858398438e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "now = datetime.now()\n    time = now.replace(minute=0, second=0, microsecond=0)\n\n    output_file_name = 'sensor_data.csv'\n    file_path = os.path.join(output_dir, output_file_name)\n\n    with open(file_path, 'w', newline='') as f:\n        writer = csv.writer(f)\n        writer.writerow(['Time', 'Temperature', 'Humidity', 'Pressure'])\n        for i in range(hours*60):\n            data = [time.isoformat()]\n            data += [randint(5, 25) for _ in SENSORS]\n            writer.writerow(data)\n            time += datetime.timedelta(minutes=1)\n\n    return file_path", "compilation_passed": true, "time": 0.0007810592651367188, "tests_passed": false, "error": "FileNotFoundError"}
