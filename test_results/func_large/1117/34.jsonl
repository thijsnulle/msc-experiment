{"code": "random.seed(0)\n    department_levels = []\n    for prefix, num_employees in department_data.items():\n        department_levels += [prefix + level for level in random.choices(LEVELS, k=num_employees)]\n    random.shuffle(department_levels)\n    level_data = {prefix: [] for prefix in PREFICES}\n    for department_level in department_levels:\n        prefix, level = department_level.rsplit('$$', 1)\n        level_data[prefix].append(level)\n    return json.dumps(level_data)", "compilation_passed": true, "time": 0.0010480880737304688, "tests_passed": false, "error": "KeyError"}
{"code": "level_data = {}\n    for department_code in PREFICES:\n        num_employees = department_data.get(department_code, 0)\n        level_data[department_code] = [random.choice(LEVELS) for _ in range(num_employees)]\n    return json.dumps(level_data)", "compilation_passed": true, "time": 0.0010230541229248047, "tests_passed": true, "error": null}
{"code": "employee_levels = {}\n    for department_code, employee_count in department_data.items():\n        # Generate levels for each department based on the employee count\n        employee_levels[department_code] = [random.choice(LEVELS) for _ in range(employee_count)]\n    # Convert the resulting dictionary to JSON format\n    level_data_json = json.dumps(employee_levels)\n    return level_data_json", "compilation_passed": true, "time": 0.001088857650756836, "tests_passed": true, "error": null}
{"code": "data = {}\n    for code, count in department_data.items():\n        data[code] = random.choices(LEVELS, k=count)\n    return json.dumps(data)", "compilation_passed": true, "time": 0.0010008811950683594, "tests_passed": true, "error": null}
{"code": "level_data = {}\n\n    # For each department in the given department_data\n    for department, num_employees in department_data.items():\n        # Generate the list of employee levels for the current department\n        level_data[department] = [random.choice(LEVELS) for _ in range(num_employees)]\n\n    # Convert the level_data dictionary to a JSON string and return it\n    return json.dumps(level_data)", "compilation_passed": true, "time": 0.0009911060333251953, "tests_passed": true, "error": null}
{"code": "department_employees = {}\n    for department in PREFICES:\n        # get number of employees for each department\n        employees = department_data.get(department, 0)\n        # create a list for each department with the same size as the number of employees\n        department_employees[department] = [random.choice(LEVELS) for _ in range(employees)]\n    # convert to JSON\n    level_data_json = json.dumps(department_employees)\n    return level_data_json", "compilation_passed": true, "time": 0.0009992122650146484, "tests_passed": true, "error": null}
{"code": "level_data = {}\n    for dept_code, no_of_emps in department_data.items():\n        level_data[dept_code] = [random.choice(LEVELS) for _ in range(no_of_emps)]\n\n    return json.dumps(level_data)", "compilation_passed": true, "time": 0.0009760856628417969, "tests_passed": true, "error": null}
{"code": "level_data = {}\n    for department_code, count in department_data.items():\n        department_levels = []\n        for _ in range(count):\n            random.shuffle(LEVELS)\n            department_levels.append(LEVELS[0])\n        level_data[department_code] = department_levels\n\n    level_data_json = json.dumps(level_data)\n    return level_data_json", "compilation_passed": true, "time": 0.0011298656463623047, "tests_passed": true, "error": null}
{"code": "# Initialize an empty dictionary for the result\n    employee_levels = {}\n\n    # For each department and its corresponding number of employees\n    for department in department_data:\n        # Initialize an empty list for this department\n        employee_levels[department] = []\n\n        # Add random number of employee levels (from the list: ['Junior', 'Mid', 'Senior']) to the department list\n        for _ in range(department_data[department]):\n            level = random.choice(LEVELS)\n            employee_levels[department].append(level)\n\n    # Convert the dictionary to a JSON object and return it as a string\n    return json.dumps(employee_levels)", "compilation_passed": true, "time": 0.001024007797241211, "tests_passed": true, "error": null}
{"code": "data_dict = {}\n\n    # Iterate through each department and their employee counts\n    for department, employee_count in department_data.items():\n        data_dict[department] = []\n\n        # Iterate through each level and assign employees to levels\n        for employee_level in LEVELS:\n            level_count = random.randint(1, employee_count)  # Random number of employees for each level\n            data_dict[department].extend([employee_level] * level_count)\n            employee_count -= level_count\n\n    # Convert the data dictionary to JSON\n    level_data_json = json.dumps(data_dict)\n    return level_data_json", "compilation_passed": true, "time": 0.001051187515258789, "tests_passed": false, "error": "StopIteration"}
{"code": "employees_info = collections.defaultdict(list)\n    for prefix, number in department_data.items():\n        employees_info[prefix] = [random.choice(LEVELS) for _ in range(number)]\n    return json.dumps(employees_info)", "compilation_passed": true, "time": 0.0010900497436523438, "tests_passed": true, "error": null}
{"code": "level_data = {}\n    for department_code, emp_count in department_data.items():\n        level_data[department_code] = [random.choice(LEVELS) for _ in range(emp_count)]\n    return json.dumps(level_data)", "compilation_passed": true, "time": 0.0009870529174804688, "tests_passed": true, "error": null}
{"code": "employee_counts = department_data\n    employee_levels_list = []\n    for department in PREFICES:\n        employee_count = employee_counts.get(department, 0)\n        employee_levels = random.choices(LEVELS, k=employee_count)\n        employee_levels_list.append(employee_levels)\n        department_data[department] = employee_levels\n    return json.dumps(department_data, indent=4)", "compilation_passed": true, "time": 0.0009698867797851562, "tests_passed": true, "error": null}
{"code": "random.seed(0)\n    # Initialize a counter dictionary to keep track of each department's employee count\n    counter = collections.Counter(department_data)\n    # Initialize an empty dictionary to hold the result\n    result = {}\n\n    for department_code in department_data:\n        # Initialize an empty list for this department\n        result[department_code] = []\n\n        # Repeat until the count of this department reaches zero\n        while counter[department_code] > 0:\n            # Generate a random index for selecting an employee level\n            index = random.randint(0, len(LEVELS)-1)\n            # Append the level to the list of this department\n            result[department_code].append(LEVELS[index])\n            # Decrement the count of this department\n            counter[department_code] -= 1\n\n    return json.dumps(result, indent=4)", "compilation_passed": true, "time": 0.0010807514190673828, "tests_passed": false, "error": "StopIteration"}
{"code": "data = collections.defaultdict(list)\n    for prefix in PREFICES:\n        data[prefix] += [LEVELS[random.randint(0, len(LEVELS) - 1)] for _ in range(department_data[prefix])]\n    return json.dumps(data)", "compilation_passed": true, "time": 0.0010099411010742188, "tests_passed": false, "error": "StopIteration"}
{"code": "level_data = {}\n    for department_code, num_employees in department_data.items():\n        employees = []\n        for _ in range(num_employees):\n            employee_level = random.choice(LEVELS)\n            employees.append(employee_level)\n        level_data[department_code] = employees\n    return json.dumps(level_data, sort_keys=True)", "compilation_passed": true, "time": 0.0010120868682861328, "tests_passed": true, "error": null}
{"code": "levels_list = random.choices(LEVELS, k=sum(department_data.values()))\n    level_data = collections.defaultdict(list)\n\n    for prefix, count in department_data.items():\n        level_data[prefix] = levels_list[:count]\n        levels_list = levels_list[count:]\n\n    return json.dumps(dict(level_data))", "compilation_passed": true, "time": 0.001010894775390625, "tests_passed": true, "error": null}
{"code": "random.seed(0)\n    department_codes = department_data.keys()\n    employees = {}\n\n    for department_code in department_codes:\n        employees[department_code] = []\n        for _ in range(department_data[department_code]):\n            level = random.choice(LEVELS)\n            employees[department_code].append(level)\n\n    return json.dumps(employees)", "compilation_passed": true, "time": 0.0010309219360351562, "tests_passed": true, "error": null}
{"code": "# Initialize a defaultdict to store the employee levels for each department\n    level_data = collections.defaultdict(list)\n\n    # Iterate over each department in the given data\n    for department, employee_count in department_data.items():\n        # Generate a list of random employee levels for the department\n        employee_levels = [random.choice(LEVELS) for _ in range(employee_count)]\n        level_data[department] = employee_levels\n\n    # Convert the level_data dictionary to JSON object\n    level_data_json = json.dumps(level_data)\n\n    return level_data_json", "compilation_passed": true, "time": 0.0009951591491699219, "tests_passed": true, "error": null}
{"code": "random.seed(0)\n    result = {}\n    for department, number_of_employees in department_data.items():\n        level_data = []\n        for _ in range(number_of_employees):\n            level_data.append(random.choice(LEVELS))\n        result[department] = level_data\n    return json.dumps(result)", "compilation_passed": true, "time": 0.0010650157928466797, "tests_passed": true, "error": null}
{"code": "# Check if department_data is not empty\n    if not department_data:\n        raise ValueError(\"department_data cannot be empty.\")\n\n    # Generate employee levels for each department\n    result = {}\n    for prefix in PREFICES:\n        if prefix not in department_data:\n            raise ValueError(f\"{prefix} is not a valid department code.\")\n\n        result[prefix] = []\n        for _ in range(department_data[prefix]):\n            level = random.choice(LEVELS)\n            result[prefix].append(level)\n\n    return json.dumps(result)", "compilation_passed": true, "time": 0.0010170936584472656, "tests_passed": false, "error": "ValueError"}
{"code": "random.seed(0)\n\n    # Create a defaultdict to store employee levels for each department\n    employee_data = collections.defaultdict(list)\n\n    # Iterate through the departments and their employee counts\n    for department, employee_count in department_data.items():\n        # Generate random employee levels for each employee in the department\n        for _ in range(employee_count):\n            employee_data[department].append(random.choice(LEVELS))\n\n    # Convert the dictionary to a JSON object\n    json_object = json.dumps(employee_data)\n\n    return json_object", "compilation_passed": true, "time": 0.0010492801666259766, "tests_passed": true, "error": null}
{"code": "level_data = {}\n    for department in department_data:\n        level_data[department] = [random.choice(LEVELS) for _ in range(department_data[department])]\n    return json.dumps(level_data)", "compilation_passed": true, "time": 0.0010378360748291016, "tests_passed": true, "error": null}
{"code": "# Use `Counter` from `collections` to count the occurrences of each department code\n    department_counts = collections.Counter(department_data)\n\n    # Initialize an empty dictionary\n    employee_levels = {}\n\n    # Loop through each department code and its count\n    for code, count in department_counts.items():\n        # Create an empty list for the current department code\n        employee_levels[code] = []\n\n        # Loop through the number of employees in the current department\n        for _ in range(count):\n            # Generate a random level for each employee and append it to the list\n            level = random.choice(LEVELS)\n            employee_levels[code].append(level)\n\n    # Convert the `employee_levels` dictionary to a JSON object\n    level_data_json = json.dumps(employee_levels)\n\n    return level_data_json", "compilation_passed": true, "time": 0.0010051727294921875, "tests_passed": true, "error": null}
{"code": "level_data = {}\n\n    # Generate level data for each department\n    for department in department_data:\n        department_levels = []\n        for _ in range(department_data[department]):\n            # Assign random level to the employee\n            employee_level = random.choice(LEVELS)\n            department_levels.append(employee_level)\n        level_data[department] = department_levels\n\n    # Convert level data to JSON object\n    level_data_json = json.dumps(level_data)\n\n    return level_data_json", "compilation_passed": true, "time": 0.000993967056274414, "tests_passed": true, "error": null}
{"code": "level_data = {}\n    for department_code, employee_count in department_data.items():\n        level_data[department_code] = [random.choice(LEVELS) for _ in range(employee_count)]\n    level_data_json = json.dumps(level_data, indent=4)\n    return level_data_json", "compilation_passed": true, "time": 0.0010039806365966797, "tests_passed": true, "error": null}
{"code": "# Initialize the dictionary of employee levels\n    employee_levels = {}\n\n    # Generate the employee levels for each department\n    for department in PREFICES:\n        num_employees = department_data[department]\n        employee_levels[department] = []\n        for _ in range(num_employees):\n            employee_levels[department].append(random.choice(LEVELS))\n\n    # Convert the dictionary of employee levels into a JSON object\n    json_obj = json.dumps(employee_levels)\n\n    return json_obj", "compilation_passed": true, "time": 0.0009870529174804688, "tests_passed": false, "error": "KeyError"}
{"code": "level_data = {}\n    for department_code, count in department_data.items():\n        if department_code in PREFICES:\n            level_data[department_code] = [random.choice(LEVELS) for _ in range(count)]\n        else:\n            level_data[department_code] = f'Unknown department code: {department_code}'\n    level_data_json = json.dumps(level_data)\n    return level_data_json", "compilation_passed": true, "time": 0.0010068416595458984, "tests_passed": true, "error": null}
{"code": "random.seed(0)\n    level_data = {}\n    for department, num_employees in department_data.items():\n        department_levels = []\n        for i in range(num_employees):\n            level = random.choice(LEVELS)\n            department_levels.append(level)\n        level_data[department] = department_levels\n    level_data_json = json.dumps(level_data)\n    return level_data_json", "compilation_passed": true, "time": 0.001027822494506836, "tests_passed": true, "error": null}
{"code": "# Initialize an empty dictionary to store the department data\n    department_data_dict = {}\n\n    # Iterate over the given department_data\n    for department, employees in department_data.items():\n        # Generate a list of random employee levels\n        # - employees: The number of employees in the department\n        # - levels: The list of employee levels ('Junior', 'Mid', 'Senior')\n        # - k: The size of the sample\n        level_list = random.choices(LEVELS, k=employees)\n\n        # Add the list of levels to the department_data_dict with the department code as the key\n        department_data_dict[department] = level_list\n\n    # Convert the department_data_dict to a JSON object\n    level_data_json = json.dumps(department_data_dict)\n\n    return level_data_json", "compilation_passed": true, "time": 0.00096893310546875, "tests_passed": true, "error": null}
