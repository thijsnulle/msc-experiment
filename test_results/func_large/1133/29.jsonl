{"code": "# Define the API endpoint URL\n    url = f\"{API_URL}{endpoint}\"\n\n    # Retrieve the JSON data from the API\n    response = requests.get(url)\n\n    # Check for errors\n    if response.status_code != 200:\n        raise RuntimeError(f\"Error fetching data from {url}: {response.status_code}\")\n\n    # Extract the JSON data from the response\n    data = response.json()\n\n    # Define the filename for the JSON file\n    filename = f\"{PREFIX}{endpoint}.json\"\n\n    # Write the data to the file\n    with open(filename, \"w\") as f:\n        f.write(json.dumps(data, indent=2))\n\n    # Return the filename\n    return filename", "compilation_passed": true, "time": 0.0014140605926513672, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "try:\n        url = f\"{API_URL}{endpoint}\"\n        response = requests.get(url)\n\n        response.raise_for_status()  # Raise an exception for non-200 status codes\n\n        # Extract the data from the JSON response\n        data = response.json()\n\n        # Write the data to a JSON file\n        filename = f\"{PREFIX}{endpoint}.json\"\n        with open(filename, \"w\") as file:\n            json.dump(data, file)\n\n        return filename\n    except Exception as e:\n        raise RuntimeError(f\"Error fetching data for {endpoint}: {e}\")", "compilation_passed": true, "time": 0.001483917236328125, "tests_passed": false, "error": "RuntimeError"}
{"code": "response = requests.get(f\"{API_URL}{endpoint}\")\n    if response.status_code == 200:\n        json_data = response.json()\n        filename = PREFIX + endpoint + \".json\"\n        with open(filename, \"w\") as f:\n            json.dump(json_data, f, indent=2)\n        return filename\n    else:\n        raise RuntimeError(f\"Error fetching data from API endpoint {endpoint}\")", "compilation_passed": true, "time": 0.0013387203216552734, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "try:\n        # Construct the full API URL by joining the base URL and the specified endpoint\n        url = API_URL + endpoint\n\n        # Make a GET request to the API to retrieve the data\n        response = requests.get(url)\n\n        # Raise an error if the request was not successful\n        response.raise_for_status()\n\n        # Convert the response content (which is in JSON format) to a Python dictionary\n        data = response.json()\n\n        # Construct the filename by concatenating the prefix, endpoint, and '.json' extension\n        filename = f\"{PREFIX}{endpoint}.json\"\n\n        # Write the data to the file, ensuring that it is properly formatted with indentation\n        with open(filename, \"w\") as f:\n            f.write(json.dumps(data, indent=4))\n\n        # Return the filename into which the data was written\n        return filename\n\n    except requests.RequestException as e:\n        # Log the error and raise a RuntimeError with a custom error message\n        print(f\"Error fetching data from {url}: {e}\")\n        raise Runtime", "compilation_passed": true, "time": 0.0014510154724121094, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Fetch JSON data from the specified API endpoint\n    response = requests.get(API_URL + endpoint)\n    if response.status_code != 200:\n        raise RuntimeError(f\"Error fetching JSON data from {API_URL + endpoint}\")\n    json_data = response.json()\n\n    # Write JSON data to a file\n    filename = PREFIX + endpoint + '.json'\n    try:\n        with open(filename, 'w') as f:\n            json.dump(json_data, f)\n    except Exception as e:\n        raise RuntimeError(f\"Error writing JSON data to {filename}: {e}\")\n\n    # Print confirmation message\n    print(f\"JSON data written to {filename}\")\n    return filename", "compilation_passed": true, "time": 0.0014002323150634766, "tests_passed": false, "error": "RuntimeError"}
{"code": "filename = PREFIX + endpoint + '.json'\n\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        json_data = json.loads(response.content)\n    except (requests.RequestException, ValueError) as err:\n        raise RuntimeError(f\"Error fetching data from the API: {err}\")\n\n    try:\n        with open(filename, 'w', encoding='utf-8') as file:\n            json.dump(json_data, file, indent=4, ensure_ascii=False)\n    except (OSError, json.JSONDecodeError) as err:\n        raise RuntimeError(f\"Error writing JSON data to file: {err}\")\n\n    return filename", "compilation_passed": true, "time": 0.001508951187133789, "tests_passed": false, "error": "TypeError"}
{"code": "filename = f\"{PREFIX}{endpoint}.json\"\n    url = f\"{API_URL}{endpoint}\"\n\n    response = requests.get(url)\n    if response.status_code != 200:\n        raise RuntimeError(f\"Error fetching data from {url}: {response.status_code}\")\n\n    try:\n        with open(filename, \"w\") as f:\n            json.dump(response.json(), f, indent=4)\n        print(f\"Data saved to {filename}\")\n    except Exception as e:\n        raise RuntimeError(f\"Error writing data to {filename}: {e}\")\n\n    return filename", "compilation_passed": true, "time": 0.0014219284057617188, "tests_passed": false, "error": "RuntimeError"}
{"code": "# Concatenate the API URL and endpoint to get the full API endpoint URL\n    full_url = f\"{API_URL}{endpoint}\"\n\n    # Fetch data from the API endpoint\n    response = requests.get(full_url)\n    if not response.ok:\n        raise RuntimeError(f\"API error: {response.status_code}\")\n\n    # Create a filename by combining the prefix and endpoint\n    filename = f\"{PREFIX}{endpoint}.json\"\n\n    # Write the JSON data to a file\n    try:\n        with open(filename, \"w\") as f:\n            json.dump(response.json(), f)\n    except Exception as e:\n        raise RuntimeError(\"Error writing to file\") from e\n\n    return filename", "compilation_passed": true, "time": 0.0014469623565673828, "tests_passed": false, "error": "RuntimeError"}
{"code": "try:\n        # Construct the API endpoint URL\n        url = f\"{API_URL}{endpoint}\"\n\n        # Fetch the JSON data from the API endpoint\n        response = requests.get(url)\n        data = response.json()\n\n        # Construct the filename for the output JSON file\n        filename = f\"{PREFIX}{endpoint}.json\"\n\n        # Write the JSON data to the file\n        with open(filename, 'w') as file:\n            json.dump(data, file)\n\n        return filename\n    except Exception as e:\n        # Log the error if something goes wrong\n        logging.error(f\"Error while executing task_func: {e}\")\n        raise RuntimeError(f\"Error while executing task_func: {e}\")", "compilation_passed": true, "time": 0.0014050006866455078, "tests_passed": false, "error": "NameError"}
{"code": "response = requests.get(API_URL+endpoint)\n    if response.status_code == 200:\n        filename = PREFIX + endpoint + \".json\"\n        try:\n            with open(filename, \"w\") as f:\n                json.dump(response.json(), f, indent=4)\n        except Exception as e:\n            raise RuntimeError(f\"Error writing to file {filename}: {str(e)}\")\n        return filename\n    else:\n        raise RuntimeError(f\"Error fetching data from endpoint {endpoint}\")", "compilation_passed": true, "time": 0.0013377666473388672, "tests_passed": false, "error": "RuntimeError"}
{"code": "try:\n        # Construct the full API URL by concatenating the base URL and endpoint.\n        url = API_URL + endpoint\n\n        # Make a GET request to the API endpoint.\n        response = requests.get(url)\n\n        # Check if the request was successful.\n        response.raise_for_status()\n\n        # Retrieve the JSON data from the response.\n        data = response.json()\n\n        # Concatenate the prefix with the endpoint name and add \".json\" to create the filename.\n        filename = f\"{PREFIX}{endpoint}.json\"\n\n        # Open the file for writing and ensure it is closed properly.\n        with open(filename, \"w\") as f:\n            # Write the JSON data to the file using the json.dumps() method.\n            f.write(json.dumps(data))\n\n        # Return the filename into which the JSON data was written.\n        return filename\n\n    except requests.exceptions.RequestException as e:\n        # Raise a RuntimeError with an error message if there is an error fetching data from the API.\n        raise RuntimeError", "compilation_passed": true, "time": 0.0013892650604248047, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Concatenate the API URL and the endpoint to form the full API URL\n    url = API_URL + endpoint\n\n    # Fetch the data from the API using requests\n    response = requests.get(url)\n\n    # Check if the request was successful\n    if response.status_code == 200:\n        # Write the fetched data to a file\n        with open(f'{PREFIX}{endpoint}.json', 'w') as f:\n            # Parse the JSON response and dump it into the file\n            json.dump(response.json(), f)\n\n        # Return the filename\n        return f'{PREFIX}{endpoint}.json'\n    else:\n        # If the request failed, raise an error with the status code\n        raise RuntimeError(f\"Failed to fetch data from API: Status {response.status_code}\")", "compilation_passed": true, "time": 0.0013718605041503906, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "response = requests.get(f\"{API_URL}{endpoint}\")\n    data = response.json()\n\n    filename = f\"{PREFIX}{endpoint}.json\"\n\n    try:\n        with open(filename, \"w\", encoding=\"utf-8\") as f:\n            json.dump(data, f)\n    except Exception as e:\n        raise RuntimeError(f\"Error writing to {filename}: {e}\")\n\n    return filename", "compilation_passed": true, "time": 0.0013349056243896484, "tests_passed": false, "error": "RuntimeError"}
{"code": "# Generate filename by concatenating PREFIX, endpoint name, and '.json'\n    filename = PREFIX + endpoint + '.json'\n\n    # Fetch JSON data from API endpoint\n    response = requests.get(API_URL + endpoint)\n    if not response.ok:\n        raise RuntimeError(f\"Error fetching data from {API_URL}{endpoint}\")\n\n    # Write JSON data to file\n    try:\n        with open(filename, 'w') as f:\n            json.dump(response.json(), f)\n    except IOError as e:\n        raise RuntimeError(f\"Error writing data to {filename}: {e}\")\n\n    return filename", "compilation_passed": true, "time": 0.001363992691040039, "tests_passed": false, "error": "RuntimeError"}
{"code": "response = requests.get(API_URL+endpoint)\n    if response.status_code == 200:\n        data = response.json()\n        file = f\"{PREFIX}{endpoint}.json\"\n        try:\n            with open(file, \"w\") as f:\n                json.dump(data, f)\n            return file\n        except Exception as e:\n            raise RuntimeError(f\"Error writing to file {file}: {str(e)}\")\n    else:\n        raise RuntimeError(f\"Error fetching data from API for endpoint {endpoint}\")", "compilation_passed": true, "time": 0.0013496875762939453, "tests_passed": false, "error": "RuntimeError"}
{"code": "# Concatenate the base URL with the endpoint\n    url = API_URL + endpoint\n\n    # Make an HTTP request to the URL\n    response = requests.get(url)\n\n    # Check if the request was successful\n    if response.status_code == 200:\n        # Convert the response to a dictionary\n        data = response.json()\n\n        # Generate the file name for the JSON file\n        filename = f\"{PREFIX}{endpoint}.json\"\n\n        # Open the file in write mode and write the JSON data to it\n        with open(filename, \"w\") as f:\n            json.dump(data, f)\n\n        # Return the file name\n        return filename\n    else:\n        # Raise an exception if the request failed\n        raise RuntimeError(f\"Failed to fetch data from {url}: {response.status_code}\")", "compilation_passed": true, "time": 0.0012848377227783203, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "try:\n        # Fetch data from API endpoint\n        response = requests.get(f'{API_URL}{endpoint}')\n        data = response.json()\n\n        # Write data to JSON file\n        filename = f'{PREFIX}{endpoint}.json'\n        with open(filename, 'w') as f:\n            json.dump(data, f)\n\n        return filename\n\n    except Exception as e:\n        raise RuntimeError(f\"Error retrieving data from API and saving to file: {str(e)}\")", "compilation_passed": true, "time": 0.0013148784637451172, "tests_passed": false, "error": "RuntimeError"}
{"code": "response = requests.get(f\"{API_URL}{endpoint}\")\n    if response.status_code == 200:\n        json_data = response.json()\n        output_filename = f\"{PREFIX}{endpoint}.json\"\n        with open(output_filename, \"w\") as f:\n            json.dump(json_data, f)\n        print(f\"Data saved to '{output_filename}'\")\n        return output_filename\n    else:\n        raise RuntimeError(f\"Error fetching data from API endpoint: {endpoint}\")", "compilation_passed": true, "time": 0.0012900829315185547, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "url = f\"{API_URL}{endpoint}\"\n\n    response = requests.get(url)\n\n    if response.status_code == 200:\n        data = response.json()\n        filename = f\"{PREFIX}{endpoint}.json\"\n        with open(filename, 'w') as file:\n            file.write(json.dumps(data))\n        print(f\"JSON data written to {filename}\")\n    else:\n        raise RuntimeError(f\"Error fetching data from {url}: {response.status_code} {response.reason}\")\n\n    return filename", "compilation_passed": true, "time": 0.0013301372528076172, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Generate the URL for the API endpoint\n    url = f\"{API_URL}{endpoint}\"\n\n    # Send a GET request to the API and retrieve the JSON data\n    response = requests.get(url)\n\n    # Check that the request was successful\n    if response.status_code != 200:\n        raise RuntimeError(f\"Error fetching data from {url}\")\n    json_data = response.json()\n\n    # Create a filename based on the endpoint name and the provided prefix\n    filename = f\"{PREFIX}{endpoint}.json\"\n\n    # Write the JSON data to the file\n    with open(filename, \"w\") as f:\n        f.write(json.dumps(json_data, indent=4))\n\n    return filename", "compilation_passed": true, "time": 0.0013110637664794922, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "url = f'{API_URL}{endpoint}'\n    response = requests.get(url)\n\n    if response.status_code == 200:\n        data = response.json()\n        filename = f'{PREFIX}{endpoint}.json'\n        with open(filename, 'w', encoding='utf-8') as file:\n            json.dump(data, file, ensure_ascii=False, indent=4)\n        print(f\"Data written to {filename}\")\n        return filename\n    else:\n        raise RuntimeError(\"Error fetching data from API\")", "compilation_passed": true, "time": 0.0012819766998291016, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "try:\n        # Use the requests library to make an API request to the specified URL and endpoint\n        response = requests.get(f'{API_URL}{endpoint}')\n\n        # Check if the request was successful\n        if response.status_code == 200:\n            # Retrieve the JSON data from the response\n            json_data = response.json()\n\n            # Generate a filename based on the provided prefix and the endpoint\n            filename = f'{PREFIX}{endpoint}.json'\n\n            # Write the JSON data to the file\n            with open(filename, 'w') as f:\n                json.dump(json_data, f)\n\n            # Return the filename for further processing\n            return filename\n        else:\n            # If the request failed, print an error message\n            print(f\"Failed to fetch data from the API. Status code: {response.status_code}\")\n    except Exception as e:\n        # If there was an unexpected error, print an error message\n        print(f\"An error occurred: {e}\")\n\n    # If there was an error, return None\n    return None", "compilation_passed": true, "time": 0.001291036605834961, "tests_passed": true, "error": null}
{"code": "response = requests.get(f'{API_URL}{endpoint}')\n\n    if response.ok:\n        filename = f\"{PREFIX}{endpoint}.json\"\n        with open(filename, 'w') as f:\n            json.dump(response.json(), f)\n        return filename\n\n    else:\n        raise RuntimeError(f\"Error fetching data from {endpoint} endpoint\")", "compilation_passed": true, "time": 0.0013170242309570312, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Concatenate the API URL and endpoint to form the full URL\n    url = API_URL + endpoint\n\n    # Make the request to the API and retrieve the response data\n    response = requests.get(url)\n    data = response.json()\n\n    # Concatenate the prefix, endpoint, and file extension to form the filename\n    filename = f\"{PREFIX}{endpoint}.json\"\n\n    # Write the response data to a file in JSON format\n    try:\n        with open(filename, \"w\") as f:\n            f.write(json.dumps(data))\n    except Exception as e:\n        raise RuntimeError(\"Error writing JSON to file\")\n\n    return filename", "compilation_passed": true, "time": 0.0013840198516845703, "tests_passed": false, "error": "RuntimeError"}
{"code": "url = API_URL + endpoint\n    try:\n        response = requests.get(url)\n        response.raise_for_status()  # Check for any HTTP errors\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Failed to fetch data from {url}: {e}\")\n\n    filename = f\"{PREFIX}{endpoint}.json\"\n    try:\n        with open(filename, \"w\", encoding=\"utf-8\") as file:\n            json.dump(response.json(), file, indent=4)\n    except (OSError, json.JSONDecodeError) as e:\n        raise RuntimeError(f\"Failed to write to file: {filename}, error: {e}\")\n\n    return filename", "compilation_passed": true, "time": 0.0014638900756835938, "tests_passed": false, "error": "RuntimeError"}
{"code": "url = f\"{API_URL}{endpoint}\"\n    response = requests.get(url)\n    try:\n        response.raise_for_status()\n        json_data = response.json()\n        filename = f\"{PREFIX}{endpoint}.json\"\n        with open(filename, \"w\") as file:\n            json.dump(json_data, file)\n        return filename\n    except Exception as e:\n        raise RuntimeError(f\"An error occurred while processing the task: {e}\")", "compilation_passed": true, "time": 0.001425027847290039, "tests_passed": false, "error": "RuntimeError"}
{"code": "# Set the URL for the specified endpoint\n    url = f\"{API_URL}{endpoint}\"\n\n    # Make a GET request to the API endpoint\n    response = requests.get(url)\n\n    # Check if the request was successful\n    if response.status_code != 200:\n        raise RuntimeError(f\"Error fetching data from {url}. Status code: {response.status_code}\")\n\n    # Write the JSON data to a file\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, \"w\") as f:\n        json.dump(response.json(), f)\n\n    return filename", "compilation_passed": true, "time": 0.0012969970703125, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Concatenate the base URL and endpoint to create the full URL.\n    url = f'{API_URL}{endpoint}'\n\n    # Make an API call using the requests library to get the data from the URL.\n    response = requests.get(url)\n\n    # If the API call was successful (status code 200), proceed with saving the data to a JSON file.\n    if response.status_code == 200:\n        # Concatenate the prefix, the endpoint, and '.json' to create the file name.\n        filename = f'{PREFIX}{endpoint}.json'\n\n        # Save the data to the file using the json library.\n        try:\n            with open(filename, 'w', encoding='utf-8') as f:\n                json.dump(response.json(), f, ensure_ascii=False, indent=2)\n        except Exception as e:\n            # If there is an error writing to the file, raise a RuntimeError with the error message.\n            raise RuntimeError(f\"Error saving data to {filename}: {str(e)}\")\n    # If the", "compilation_passed": true, "time": 0.0013599395751953125, "tests_passed": false, "error": "RuntimeError"}
{"code": "try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        data = response.json()\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from {endpoint}\") from e\n    except json.JSONDecodeError as e:\n        raise RuntimeError(f\"Error decoding JSON from {endpoint}\") from e\n\n    filename = f\"{PREFIX}{endpoint}.json\"\n    try:\n        with open(filename, \"w\") as f:\n            json.dump(data, f, indent=4)\n    except Exception as e:\n        raise RuntimeError(f\"Error writing data to {filename}\") from e\n\n    return filename", "compilation_passed": true, "time": 0.001461029052734375, "tests_passed": false, "error": "RuntimeError"}
{"code": "url = API_URL + endpoint\n\n    response = requests.get(url)\n\n    if response.status_code == 200:\n        data = response.json()\n        filename = f\"{PREFIX}{endpoint}.json\"\n        with open(filename, \"w\") as f:\n            json.dump(data, f)\n        return filename\n    else:\n        raise RuntimeError(\"Error fetching data from API\")", "compilation_passed": true, "time": 0.0013110637664794922, "tests_passed": false, "error": "FileNotFoundError"}
