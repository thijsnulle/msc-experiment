{"code": "if not os.path.exists(src_folder):\n        raise ValueError(\"Source folder does not exist.\")\n\n    src_folder_name = os.path.basename(os.path.normpath(src_folder))\n    dst_path = os.path.join(backup_dir, src_folder_name)\n\n    shutil.move(src_folder, dst_path)\n\n    try:\n        shutil.rmtree(src_folder)\n    except Exception as e:\n        print(f\"Error deleting source folder: {e}\")\n        return False\n    return True", "compilation_passed": true, "time": 0.001558065414428711, "tests_passed": true, "error": null}
{"code": "# Check if source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(\"Source folder does not exist.\")\n\n    # Check if backup directory exists, if not create it\n    if not os.path.exists(backup_dir):\n        os.makedirs(backup_dir)\n\n    # Backup the source folder\n    shutil.copytree(src_folder, os.path.join(backup_dir, os.path.basename(src_folder)))\n\n    # Delete the source folder\n    try:\n        shutil.rmtree(src_folder)\n    except Exception as e:\n        raise Exception(f\"Error deleting source folder: {str(e)}\")\n\n    return True", "compilation_passed": true, "time": 0.005125761032104492, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(src_folder):\n        raise ValueError(\"Source folder does not exist.\")\n\n    try:\n        shutil.copytree(src_folder, backup_dir)\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        raise Exception(f\"Error deleting source folder: {str(e)}\") from e", "compilation_passed": true, "time": 0.0020029544830322266, "tests_passed": false, "error": "Exception"}
{"code": "if not os.path.exists(src_folder):\n        raise ValueError(\"Source folder does not exist.\")\n\n    try:\n        shutil.copytree(src_folder, backup_dir)\n        shutil.rmtree(src_folder)\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return False\n\n    return True", "compilation_passed": true, "time": 0.0014579296112060547, "tests_passed": true, "error": null}
{"code": "# Check if the source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    # Get the name of the source folder without the path\n    src_folder_name = os.path.basename(os.path.normpath(src_folder))\n    # Create the full path for the destination folder\n    dst_folder = os.path.join(backup_dir, src_folder_name)\n    # Copy the source folder to the destination folder\n    try:\n        shutil.copytree(src_folder, dst_folder)\n    except Exception as e:\n        raise Exception(f\"Error copying '{src_folder}' to '{dst_folder}': {str(e)}\")\n    # Delete the source folder\n    try:\n        shutil.rmtree(src_folder)\n    except Exception as e:\n        raise Exception(f\"Error deleting '{src_folder}': {str(e)}\")\n    return True", "compilation_passed": true, "time": 0.005435943603515625, "tests_passed": false, "error": "Exception"}
{"code": "if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n\n    if os.path.isfile(src_folder):\n        shutil.copy2(src_folder, backup_dir)\n    else:\n        shutil.copytree(src_folder, backup_dir)\n\n    try:\n        os.remove(src_folder)\n    except OSError as e:\n        print(f\"Error deleting folder '{src_folder}': {str(e)}\")\n        return False\n\n    return True", "compilation_passed": true, "time": 0.00146484375, "tests_passed": false, "error": "FileExistsError"}
{"code": "if not os.path.exists(src_folder):\n        raise ValueError(\"Source folder does not exist.\")\n    shutil.move(src_folder, backup_dir)\n    if os.path.exists(src_folder):\n        print(\"Error: Source folder still exists.\")\n        return False\n    return True", "compilation_passed": true, "time": 0.0026001930236816406, "tests_passed": true, "error": null}
{"code": "try:\n        # Check if the source folder exists\n        if not os.path.exists(src_folder):\n            raise ValueError(f\"The specified folder '{src_folder}' does not exist.\")\n\n        # Backup the folder\n        shutil.copytree(src_folder, os.path.join(backup_dir, src_folder))\n\n        # Delete the source folder\n        shutil.rmtree(src_folder)\n\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0013871192932128906, "tests_passed": true, "error": null}
{"code": "# Check if the source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f'The source folder {src_folder} does not exist.')\n\n    # Backup the source folder\n    shutil.make_archive(os.path.join(backup_dir, os.path.basename(src_folder)), 'zip', src_folder)\n\n    # Delete the source folder\n    try:\n        shutil.rmtree(src_folder)\n    except Exception as e:\n        print(f'An error occurred while deleting the source folder: {e}')\n        return False\n\n    # Return True if the operation is successful\n    return True", "compilation_passed": true, "time": 0.0018239021301269531, "tests_passed": true, "error": null}
{"code": "# Check if the source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Error: The source folder {src_folder} does not exist.\")\n    else:\n        # Backup the source folder to the backup directory\n        try:\n            shutil.copytree(src_folder, backup_dir, dirs_exist_ok=True)\n        except Exception as e:\n            raise Exception(f\"Error: An error occurred while backing up the source folder: {e}\")\n\n        # Delete the source folder\n        try:\n            shutil.rmtree(src_folder)\n        except Exception as e:\n            raise Exception(f\"Error: An error occurred while deleting the source folder: {e}\")\n\n    return True", "compilation_passed": true, "time": 0.0017921924591064453, "tests_passed": true, "error": null}
{"code": "# Check if the source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n\n    # Copy the source folder to the backup directory\n    shutil.copytree(src_folder, backup_dir)\n\n    # Delete the source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0014450550079345703, "tests_passed": false, "error": "FileExistsError"}
{"code": "if not os.path.exists(src_folder):\n        raise ValueError('Source folder does not exist: %s' % src_folder)\n\n    # Backup the source folder\n    try:\n        shutil.copytree(src_folder, backup_dir)\n    except Exception as e:\n        print('Error backing up source folder: %s' % str(e))\n        return False\n\n    # Delete the source folder\n    try:\n        shutil.rmtree(src_folder)\n    except Exception as e:\n        print('Error deleting source folder: %s' % str(e))\n        return False\n\n    return True", "compilation_passed": true, "time": 0.0013420581817626953, "tests_passed": true, "error": null}
{"code": "try:\n        if not os.path.exists(src_folder):\n            raise ValueError(\"The given source folder does not exist.\")\n\n        # Backup the source folder\n        shutil.copytree(src_folder, os.path.join(backup_dir, os.path.basename(src_folder)))\n\n        # Delete the source folder\n        shutil.rmtree(src_folder)\n\n        return True\n\n    except Exception as e:\n        print(f\"An error occurred during backup: {e}\")\n        return False", "compilation_passed": true, "time": 0.0023059844970703125, "tests_passed": true, "error": null}
{"code": "try:\n        # Check if source folder exists\n        if not os.path.exists(src_folder):\n            raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n        # Check if backup directory exists\n        if not os.path.exists(backup_dir):\n            # If it does not exist, create it\n            os.makedirs(backup_dir)\n        # Rename source folder\n        backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n        if os.path.exists(backup_folder):\n            # If the backup folder already exists, increment the name until we get a unique one\n            i = 1\n            while os.path.exists(backup_folder):\n                backup_folder = os.path.join(backup_dir, f\"{os.path.basename(src_folder)}_{i}\")\n                i += 1\n        # Backup source folder\n        shutil.copytree(src_folder, backup_folder)\n        # Delete source folder\n        shutil.rmtree(src_folder)\n", "compilation_passed": false, "time": 0.0002040863037109375, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Check if the source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder {src_folder} does not exist.\")\n\n    # Create the backup directory if it doesn't exist\n    if not os.path.exists(backup_dir):\n        os.makedirs(backup_dir)\n\n    # Backup the source folder\n    shutil.copytree(src_folder, backup_dir)\n\n    # Delete the source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting source folder {src_folder}: {e}\")\n        return False", "compilation_passed": true, "time": 0.0014772415161132812, "tests_passed": false, "error": "FileExistsError"}
{"code": "if not os.path.exists(src_folder):\n        raise ValueError(\"Source folder does not exist.\")\n    try:\n        shutil.copytree(src_folder, os.path.join(backup_dir, os.path.basename(src_folder)))\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error backing up source folder: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.005300998687744141, "tests_passed": true, "error": null}
{"code": "# Check if the source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"The source folder '{src_folder}' does not exist.\")\n\n    # Backup the source folder\n    shutil.copytree(src_folder, os.path.join(backup_dir, src_folder))\n\n    # Delete the source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.0014348030090332031, "tests_passed": false, "error": "FileExistsError"}
{"code": "# Check if the source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(\"The specified source folder does not exist.\")\n\n    # Make the backup of the source folder in the given directory\n    try:\n        shutil.copytree(src_folder, os.path.join(backup_dir, os.path.basename(src_folder)))\n    except Exception as e:\n        print(f\"Error backing up the source folder: {e}\")\n        return False\n\n    # Delete the source folder\n    try:\n        shutil.rmtree(src_folder)\n    except Exception as e:\n        print(f\"Error deleting the source folder: {e}\")\n        return False\n\n    return True", "compilation_passed": true, "time": 0.00554203987121582, "tests_passed": true, "error": null}
{"code": "# Check if the source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f'Source folder \"{src_folder}\" does not exist.')\n\n    # Get the name of the source folder\n    src_folder_name = os.path.basename(src_folder)\n\n    # Create the backup folder path\n    backup_folder = os.path.join(backup_dir, src_folder_name)\n\n    # Backup the source folder\n    try:\n        shutil.copytree(src_folder, backup_folder)\n    except Exception as e:\n        raise Exception(f'An error occurred while backing up the folder: {str(e)}') from e\n\n    # Delete the source folder\n    try:\n        shutil.rmtree(src_folder)\n    except Exception as e:\n        raise Exception(f'An error occurred while deleting the folder: {str(e)}') from e\n\n    return True", "compilation_passed": true, "time": 0.010304927825927734, "tests_passed": false, "error": "Exception"}
{"code": "# Check if source folder exists\n    if not os.path.isdir(src_folder):\n        raise ValueError(f\"Source folder {src_folder} does not exist\")\n\n    try:\n        # Back up source folder\n        shutil.copytree(src_folder, os.path.join(backup_dir, src_folder))\n        # Delete source folder\n        shutil.rmtree(src_folder)\n    except Exception as e:\n        raise Exception(f\"Error while deleting source folder {src_folder}: {str(e)}\")\n    else:\n        return True", "compilation_passed": true, "time": 0.0016140937805175781, "tests_passed": false, "error": "Exception"}
{"code": "if not os.path.exists(src_folder):\n        raise ValueError(\"Source folder does not exist.\")\n\n    try:\n        shutil.copytree(src_folder, backup_dir)\n        shutil.rmtree(src_folder)\n    except Exception as e:\n        raise Exception(f\"Error while deleting source folder: {e}\")\n\n    return True", "compilation_passed": true, "time": 0.0014421939849853516, "tests_passed": false, "error": "Exception"}
{"code": "if os.path.exists(src_folder):\n        shutil.make_archive(os.path.join(backup_dir, os.path.basename(src_folder)), 'zip', src_folder)\n        shutil.rmtree(src_folder)\n        return True\n    else:\n        raise ValueError('The source folder does not exist.')\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"An error occurred while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.0017189979553222656, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(src_folder):\n        raise ValueError(\"Source folder does not exist.\")\n\n    try:\n        shutil.copytree(src_folder, os.path.join(backup_dir, os.path.basename(src_folder)))\n        shutil.rmtree(src_folder)\n    except Exception as e:\n        print(f\"Error while deleting source folder: {e}\")\n        return False\n\n    return True", "compilation_passed": true, "time": 0.005115032196044922, "tests_passed": true, "error": null}
{"code": "# Check if the source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(\"Source folder does not exist\")\n\n    # Check if the backup directory exists\n    if not os.path.exists(backup_dir):\n        os.makedirs(backup_dir)\n\n    # Copy the source folder to the backup directory\n    backup_folder = os.path.join(backup_dir, os.path.basename(src_folder))\n    shutil.copytree(src_folder, backup_folder)\n\n    # Delete the source folder\n    try:\n        shutil.rmtree(src_folder)\n    except Exception as e:\n        raise Exception(\"Error deleting source folder\") from e\n\n    # Return True to indicate successful completion\n    return True", "compilation_passed": true, "time": 0.0060579776763916016, "tests_passed": true, "error": null}
{"code": "# Check if the source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n\n    # Create the backup folder if it doesn't exist\n    if not os.path.exists(backup_dir):\n        os.makedirs(backup_dir)\n\n    # Get the current timestamp\n    timestamp = datetime.now().strftime(\"%Y-%m-%d_%H-%M-%S\")\n\n    # Backup the source folder to the backup directory\n    try:\n        shutil.copytree(src_folder, os.path.join(backup_dir, f\"{src_folder}_{timestamp}\"))\n    except Exception as e:\n        print(f\"Error backing up the source folder: {str(e)}\")\n        return False\n\n    # Delete the source folder\n    try:\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        print(f\"Error deleting the source folder: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.0015559196472167969, "tests_passed": false, "error": "NameError"}
{"code": "if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder {src_folder} does not exist.\")\n\n    src_folder_name = os.path.basename(src_folder)\n    shutil.make_archive(os.path.join(backup_dir, src_folder_name), 'zip', src_folder)\n\n    try:\n        shutil.rmtree(src_folder)\n    except Exception as e:\n        raise Exception(f\"Error while deleting source folder {src_folder}: {e}\")\n    return True", "compilation_passed": true, "time": 0.0017039775848388672, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(src_folder):\n        raise ValueError(\"The source folder does not exist.\")\n    shutil.make_archive(os.path.join(backup_dir, 'backup'), 'zip', src_folder)\n    try:\n        shutil.rmtree(src_folder)\n    except Exception as e:\n        print(f\"Error deleting source folder: {str(e)}\")\n        return False\n    return True", "compilation_passed": true, "time": 0.001627206802368164, "tests_passed": true, "error": null}
{"code": "# Check that the source folder exists\n    if not os.path.exists(src_folder):\n        raise ValueError(\"Source folder does not exist\")\n    try:\n        # Create a backup of the source folder\n        shutil.copytree(src_folder, os.path.join(backup_dir, os.path.basename(src_folder)))\n        # Delete the source folder\n        shutil.rmtree(src_folder)\n    except Exception as e:\n        raise Exception(f\"An error occurred while deleting the source folder: {e}\")\n    return True", "compilation_passed": true, "time": 0.005232810974121094, "tests_passed": false, "error": "Exception"}
{"code": "if not os.path.exists(src_folder):\n        raise ValueError(\"The specified source folder does not exist.\")\n\n    # Back up the source folder\n    src_folder_name = os.path.basename(os.path.normpath(src_folder))\n    dst_folder = os.path.join(backup_dir, src_folder_name)\n    try:\n        shutil.copytree(src_folder, dst_folder)\n        print(f\"Folder '{src_folder}' backed up successfully.\")\n    except Exception as e:\n        print(f\"Error while backing up the folder: {e}\")\n\n    # Delete the source folder\n    try:\n        shutil.rmtree(src_folder)\n        print(f\"Source folder '{src_folder}' deleted successfully.\")\n        return True\n    except Exception as e:\n        print(f\"Error while deleting the source folder: {e}\")\n        return False", "compilation_passed": true, "time": 0.00533604621887207, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(src_folder):\n        raise ValueError(f\"Source folder '{src_folder}' does not exist.\")\n    try:\n        # Backup source folder to backup directory\n        shutil.copytree(src_folder, os.path.join(backup_dir, 'backup'))\n        # Delete source folder\n        shutil.rmtree(src_folder)\n        return True\n    except Exception as e:\n        raise Exception(f\"Error: {e}\")", "compilation_passed": true, "time": 0.0019080638885498047, "tests_passed": true, "error": null}
