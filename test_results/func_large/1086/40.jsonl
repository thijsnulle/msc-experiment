{"code": "# Initialize an empty list to store the generated data\n    data = []\n\n    # Generate NUM_SAMPLES random rows\n    for i in range(NUM_SAMPLES):\n        # Generate a random string of 10 ASCII letters using a combination of uppercase, lowercase, and digits\n        random_str = ''.join(random.choices(string.ascii_uppercase + string.ascii_lowercase + string.digits, k=10))\n\n        # Generate a random float between 0 and 10000\n        random_float = random.uniform(0, 10000)\n\n        # Format the float to have two decimal places and a comma as the thousands separator\n        formatted_float = \"{:,.2f}\".format(random_float)\n\n        # Append the generated string and float to the data list\n        data.append([random_str, formatted_float])\n\n    # Create a DataFrame from the generated data\n    df = pd.DataFrame(data, columns=['String Field', 'Float Field'])\n\n    return df", "compilation_passed": true, "time": 0.00974273681640625, "tests_passed": true, "error": null}
{"code": "data = {\n        'String Field': [''.join(random.choice(string.ascii_letters) for _ in range(10)) for _ in range(NUM_SAMPLES)],\n        'Float Field': [f'{np.random.uniform(low=0, high=10000):,.2f}' for _ in range(NUM_SAMPLES)]\n    }\n    df = pd.DataFrame(data)\n    return df", "compilation_passed": true, "time": 0.019114971160888672, "tests_passed": true, "error": null}
{"code": "data = {\n        'String Field': [''.join(random.choices(string.ascii_letters, k=10)) for _ in range(NUM_SAMPLES)],\n        'Float Field': ['{:,.2f}'.format(np.random.rand() * 10000) for _ in range(NUM_SAMPLES)]\n    }\n    dataset = pd.DataFrame(data)\n    return dataset", "compilation_passed": true, "time": 0.009271860122680664, "tests_passed": true, "error": null}
{"code": "random.seed(0)\n    np.random.seed(0)\n    string_field = [''.join(random.choices(string.ascii_letters, k=10))\n                    for _ in range(NUM_SAMPLES)]\n    float_field = [np.round(random.uniform(0, 10000), 2)\n                   for _ in range(NUM_SAMPLES)]\n    float_field_formatted = ['{:,.2f}'.format(num) for num in float_field]\n    df = pd.DataFrame({'String Field': string_field,\n                       'Float Field': float_field_formatted})\n    return df", "compilation_passed": true, "time": 0.023350954055786133, "tests_passed": true, "error": null}
{"code": "string_field = [\n        \"\".join(random.choices(string.ascii_letters, k=10)) for _ in range(NUM_SAMPLES)\n    ]\n    float_field = [\n        np.random.uniform(0, 10000) for _ in range(NUM_SAMPLES)\n    ]\n    return pd.DataFrame({\n        \"String Field\": string_field,\n        \"Float Field\": [\n            f\"{num:,.2f}\" for num in float_field\n        ],\n    })", "compilation_passed": true, "time": 0.012937068939208984, "tests_passed": true, "error": null}
{"code": "# Generate random ASCII letters of length 10\n    ascii_strings = [''.join(random.choice(string.ascii_letters) for i in range(10)) for _ in range(NUM_SAMPLES)]\n\n    # Generate random floats between 0 and 10000 with two decimal places and comma as thousands separator\n    float_strings = ['{:,.2f}'.format(random.uniform(0, 10000)) for _ in range(NUM_SAMPLES)]\n\n    # Create the DataFrame\n    data = {\n        'String Field': ascii_strings,\n        'Float Field': float_strings\n    }\n    df = pd.DataFrame(data)\n\n    return df", "compilation_passed": true, "time": 0.014864921569824219, "tests_passed": true, "error": null}
{"code": "# Generate random strings\n    string_field = [''.join(random.choices(string.ascii_letters, k=10)) for _ in range(NUM_SAMPLES)]\n\n    # Generate random float field\n    float_field = [\"{:,.2f}\".format(random.uniform(0, 10000)) for _ in range(NUM_SAMPLES)]\n\n    # Create DataFrame\n    return pd.DataFrame({'String Field': string_field, 'Float Field': float_field})", "compilation_passed": true, "time": 0.00869894027709961, "tests_passed": true, "error": null}
{"code": "ascii_letters = string.ascii_letters\n    float_numbers = np.random.rand(NUM_SAMPLES) * 10000\n    float_numbers = np.round(float_numbers, decimals=2).tolist()\n\n    def generate_random_string():\n        return \"\".join(random.choices(ascii_letters, k=10))\n\n    def generate_formatted_float():\n        return f\"{number:,.2f}\" for number in float_numbers\n\n    data = {\n        'String Field': [generate_random_string() for _ in range(NUM_SAMPLES)],\n        'Float Field': [generate_formatted_float() for _ in range(NUM_SAMPLES)]\n    }\n    return pd.DataFrame(data)", "compilation_passed": false, "time": 0.00013899803161621094, "tests_passed": false, "error": "SyntaxError"}
{"code": "string_field = [''.join(random.choices(string.ascii_letters, k=10)) for _ in range(NUM_SAMPLES)]\n    float_field = np.round(np.random.uniform(0, 10000, size=NUM_SAMPLES), 2).tolist()\n    return pd.DataFrame({'String Field': string_field, 'Float Field': float_field})", "compilation_passed": true, "time": 0.004352092742919922, "tests_passed": false, "error": "AttributeError"}
{"code": "random.seed(0)\n    np.random.seed(0)\n    string_list = [''.join(random.choices(string.ascii_letters, k=10)) for _ in range(NUM_SAMPLES)]\n    float_list = [np.random.randint(10001) for _ in range(NUM_SAMPLES)]\n    data = {'String Field': string_list, 'Float Field': float_list}\n    return pd.DataFrame(data)", "compilation_passed": true, "time": 0.008101224899291992, "tests_passed": false, "error": "AttributeError"}
{"code": "# Generate random strings\n    strings = [\n        \"\".join([random.choice(string.ascii_letters) for _ in range(10)])\n        for _ in range(NUM_SAMPLES)\n    ]\n\n    # Generate random floats\n    floats = [np.random.rand() * 10000 for _ in range(NUM_SAMPLES)]\n    formatted_floats = [f\"{f:,.2f}\" for f in floats]\n\n    # Create DataFrame\n    dataset = pd.DataFrame({\"String Field\": strings, \"Float Field\": formatted_floats})\n\n    return dataset", "compilation_passed": true, "time": 0.014274835586547852, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(\n        {\n            'String Field': [''.join(random.choices(string.ascii_letters, k=10))\n                             for _ in range(NUM_SAMPLES)],\n            'Float Field': [\n                '{:,.2f}'.format(random.uniform(0, 10000))\n                for _ in range(NUM_SAMPLES)\n            ],\n        }\n    )\n    return df", "compilation_passed": true, "time": 0.008728981018066406, "tests_passed": true, "error": null}
{"code": "ascii_letters = string.ascii_letters\n    str_field = [''.join(random.choices(ascii_letters, k=10)) for _ in range(NUM_SAMPLES)]\n    float_field = [np.random.randint(0, 1000000) / 100 for _ in range(NUM_SAMPLES)]\n    return pd.DataFrame({'String Field': str_field, 'Float Field': float_field})", "compilation_passed": true, "time": 0.007963895797729492, "tests_passed": false, "error": "AttributeError"}
{"code": "# Define the number of rows (samples)\n    num_samples = NUM_SAMPLES\n\n    # Generate random strings using the string module\n    string_field = [''.join(random.choice(string.ascii_letters) for _ in range(10))\n                    for _ in range(num_samples)]\n\n    # Generate random floats between 0 and 10000\n    float_field = [random.uniform(0, 10000) for _ in range(num_samples)]\n\n    # Format the float_field with two decimal places and a comma as the thousands separator\n    formatted_float_field = ['{:,.2f}'.format(num) for num in float_field]\n\n    # Create a DataFrame from the generated fields\n    dataset = pd.DataFrame({'String Field': string_field, 'Float Field': formatted_float_field})\n\n    return dataset", "compilation_passed": true, "time": 0.01479196548461914, "tests_passed": true, "error": null}
{"code": "ascii_letters = list(string.ascii_letters)\n    random.shuffle(ascii_letters)\n    ascii_letters_str = ''.join(ascii_letters)\n\n    str_list = [''.join(random.choices(ascii_letters_str, k=10)) for _ in range(NUM_SAMPLES)]\n\n    float_list = [f\"{random.randint(0, 10000) + random.random():,.2f}\" for _ in range(NUM_SAMPLES)]\n\n    data = {\n        'String Field': str_list,\n        'Float Field': float_list,\n    }\n\n    dataset = pd.DataFrame(data)\n\n    return dataset", "compilation_passed": true, "time": 0.009990930557250977, "tests_passed": true, "error": null}
{"code": "# Generate random strings and floats for each column\n    string_field = [''.join(random.choices(string.ascii_letters, k=10)) for _ in range(NUM_SAMPLES)]\n    float_field = [np.random.randint(0, 10001) + np.random.rand(1)[0] for _ in range(NUM_SAMPLES)]\n    # Format the floats as strings with two decimal places and a comma as the thousands separator\n    float_field = [f\"{value:,.2f}\" for value in float_field]\n\n    # Create a dictionary of columns\n    columns = {'String Field': string_field, 'Float Field': float_field}\n\n    # Create a DataFrame from the dictionary\n    df = pd.DataFrame(columns)\n    return df", "compilation_passed": true, "time": 0.017383098602294922, "tests_passed": true, "error": null}
{"code": "strings = [''.join(random.choice(string.ascii_letters) for _ in range(10)) for _ in range(NUM_SAMPLES)]\n    floats = np.random.uniform(low=0, high=10000, size=NUM_SAMPLES).astype('float64').round(2)\n    formatted_floats = np.format_float_positional(floats, precision=2,\n                                                  unique=False, fractional=False,\n                                                  trim='k', nan_string=None,\n                                                  inf_string=None,\n                                                  replace_nan=False,\n                                                  replace_inf=False,\n                                                  sign=False)\n    df = pd.DataFrame({'String Field': strings, 'Float Field': formatted_floats})\n    return df", "compilation_passed": true, "time": 0.0030388832092285156, "tests_passed": false, "error": "TypeError"}
{"code": "# Initialize an empty DataFrame\n    df = pd.DataFrame()\n\n    # Generate random strings and floats and add them to the DataFrame\n    for _ in range(NUM_SAMPLES):\n        random_string = ''.join(random.choice(string.ascii_letters) for _ in range(10))\n        random_float = np.random.randint(0, 10000) + np.random.rand()\n        df = pd.concat([df, pd.DataFrame({'String Field': random_string, 'Float Field': f'{random_float:,.2f}'}, index=[0])], ignore_index=True)\n\n    return df", "compilation_passed": true, "time": 0.501629114151001, "tests_passed": true, "error": null}
{"code": "np.random.seed(0)  # Set a seed for reproducibility\n\n    # Generate random ASCII letters\n    str_list = [\n        ''.join(random.choices(string.ascii_letters, k=10))\n        for i in range(NUM_SAMPLES)\n    ]\n\n    # Generate random numbers between 0 and 10000\n    float_list = np.random.uniform(0, 10000, NUM_SAMPLES)\n\n    # Format float_list with two decimal places and comma as thousands separator\n    float_list = [\"{:,.2f}\".format(num) for num in float_list]\n\n    # Create the DataFrame\n    df = pd.DataFrame({'String Field': str_list, 'Float Field': float_list})\n\n    return df", "compilation_passed": true, "time": 0.009059906005859375, "tests_passed": true, "error": null}
{"code": "# Generate the DataFrame\n    data = {\n        \"String Field\": [''.join(random.choices(string.ascii_letters, k=10)) for _ in range(NUM_SAMPLES)],\n        \"Float Field\": [f\"{np.random.uniform(0, 10000):,.2f}\" for _ in range(NUM_SAMPLES)]\n    }\n\n    return pd.DataFrame(data)", "compilation_passed": true, "time": 0.013280868530273438, "tests_passed": true, "error": null}
{"code": "letters = string.ascii_letters\n    floats = np.random.uniform(0, 10000, size=NUM_SAMPLES).astype('int64')\n    string_fields = [''.join(random.choice(letters) for _ in range(10))\n                     for _ in range(NUM_SAMPLES)]\n    float_fields = [f'{float_val:,.2f}' for float_val in floats]\n\n    data = {'String Field': string_fields, 'Float Field': float_fields}\n\n    dataset = pd.DataFrame(data)\n\n    return dataset", "compilation_passed": true, "time": 0.014953374862670898, "tests_passed": true, "error": null}
{"code": "# Initialize an empty list to store the tuples\n    data = []\n\n    # Generate random data and append tuples to the list\n    for i in range(NUM_SAMPLES):\n        random_str = ''.join(random.choices(string.ascii_letters, k=10))\n        random_float = np.random.randint(0, 10001) / 100  # Random number between 0 and 10000\n        formatted_float = f'{random_float:,.2f}'  # Format float with commas and 2 decimal places\n        data.append((random_str, formatted_float))\n\n    # Create DataFrame using the generated tuples\n    df = pd.DataFrame(data, columns=['String Field', 'Float Field'])\n    return df", "compilation_passed": true, "time": 0.015011072158813477, "tests_passed": true, "error": null}
{"code": "# Initialize lists\n    string_list = []\n    float_list = []\n\n    # Generate random strings and formatted floats\n    for i in range(NUM_SAMPLES):\n        rand_str = ''.join(random.choices(string.ascii_letters, k=10))\n        rand_float = round(np.random.uniform(0, 10000), 2)\n        rand_float_formatted = f'{rand_float:,.2f}'\n\n        string_list.append(rand_str)\n        float_list.append(rand_float_formatted)\n\n    # Create the DataFrame\n    df = pd.DataFrame({'String Field': string_list, 'Float Field': float_list})\n\n    return df", "compilation_passed": true, "time": 0.015204191207885742, "tests_passed": true, "error": null}
{"code": "random.seed(0)\n    np.random.seed(0)\n\n    # Define the column names\n    columns = ['String Field', 'Float Field']\n\n    # Create the DataFrame\n    data = {'String Field': [''.join(random.choices(string.ascii_letters, k=10)) for _ in range(NUM_SAMPLES)],\n            'Float Field': [f\"{np.random.uniform(0, 10000):,.2f}\" for _ in range(NUM_SAMPLES)]}\n    return pd.DataFrame(data, columns=columns)", "compilation_passed": true, "time": 0.014122962951660156, "tests_passed": true, "error": null}
{"code": "letters = string.ascii_letters\n    data = {\n        'String Field': [''.join(random.choices(letters, k=10)) for _ in range(NUM_SAMPLES)],\n        'Float Field': [f'{np.random.randint(0, 1000000) / 100:,.2f}' for _ in range(NUM_SAMPLES)]\n    }\n    return pd.DataFrame(data)", "compilation_passed": true, "time": 0.014479875564575195, "tests_passed": true, "error": null}
{"code": "str_data = [''.join(random.choices(string.ascii_letters, k=10)) for _ in range(NUM_SAMPLES)]\n    float_data = [np.random.uniform(low=0, high=10000).__format__('.2f').replace(\".\", \",\") for _ in range(NUM_SAMPLES)]\n\n    dataset = pd.DataFrame({\"String Field\": str_data, \"Float Field\": float_data})\n\n    return dataset", "compilation_passed": true, "time": 0.012888908386230469, "tests_passed": true, "error": null}
{"code": "# Create a NumPy array of random ASCII strings of length 10\n    random_strings = np.array([''.join(random.choice(string.ascii_letters) for _ in range(10))\n                              for _ in range(NUM_SAMPLES)], dtype=np.str)\n\n    # Create a NumPy array of random floats between 0 and 10000\n    random_floats = np.random.rand(NUM_SAMPLES) * 10000\n\n    # Format the floats as strings with two decimal places and commas as thousands separators\n    formatted_floats = np.array([f\"{num:,.2f}\" for num in random_floats], dtype=np.str)\n\n    # Create the DataFrame with the columns 'String Field' and 'Float Field'\n    dataset = pd.DataFrame({'String Field': random_strings, 'Float Field': formatted_floats})\n\n    return dataset", "compilation_passed": true, "time": 0.0030791759490966797, "tests_passed": false, "error": "    https"}
{"code": "ascii_letters = string.ascii_letters\n\n    df = pd.DataFrame({\n        'String Field': [\n            ''.join(random.choice(ascii_letters) for _ in range(10))\n            for _ in range(NUM_SAMPLES)\n        ],\n        'Float Field': [\n            \"{:,.2f}\".format(np.random.uniform(0, 10000))\n            for _ in range(NUM_SAMPLES)\n        ]\n    })\n\n    return df", "compilation_passed": true, "time": 0.019421100616455078, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame({\n        'String Field': [''.join(random.choices(string.ascii_letters, k=10)) for _ in range(NUM_SAMPLES)],\n        'Float Field': [f'{np.random.randint(10000):,.2f}' for _ in range(NUM_SAMPLES)]\n    })\n\n    return df", "compilation_passed": true, "time": 0.014436721801757812, "tests_passed": true, "error": null}
{"code": "# Generate random strings\n    strings = [''.join(random.choices(string.ascii_letters, k=10)) for _ in range(NUM_SAMPLES)]\n\n    # Generate random floats\n    floats = [np.format_float_positional(random.random() * 10000, precision=2, trim='-')\n              .replace('.', ',') for _ in range(NUM_SAMPLES)]\n\n    # Create the DataFrame\n    dataset = pd.DataFrame({'String Field': strings, 'Float Field': floats})\n\n    return dataset", "compilation_passed": true, "time": 0.009576082229614258, "tests_passed": true, "error": null}
