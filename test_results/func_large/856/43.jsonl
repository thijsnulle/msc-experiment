{"code": "if high <= low:\n        raise ValueError(\"The upper bound of the random number range must be greater than the lower bound\")\n\n    np.random.seed(seed)\n    matrix = np.random.randint(low, high, shape)\n\n    all_nums = matrix.flatten()\n    num_pairs = list(combinations(all_nums, 2))\n    products = map(lambda pair: pair[0] * pair[1], num_pairs)\n    total_sum = reduce(lambda x, y: x + y, products)\n    return total_sum, matrix", "compilation_passed": true, "time": 0.0013890266418457031, "tests_passed": true, "error": null}
{"code": "if high <= low:\n        raise ValueError(\"Upper bound must be greater than lower bound\")\n    np.random.seed(seed)\n    matrix = np.random.randint(low, high, size=shape)\n    pairs = combinations(matrix.flatten(), 2)\n    sum_of_products = reduce(lambda x, y: x + y[0] * y[1], pairs, 0)\n    return sum_of_products, matrix", "compilation_passed": true, "time": 0.001317739486694336, "tests_passed": true, "error": null}
{"code": "if high <= low:\n        raise ValueError('high must be greater than low')\n\n    np.random.seed(seed)\n    matrix = np.random.randint(low, high, size=shape)\n\n    number_pairs = list(combinations(matrix.flatten(), 2))\n    sum_of_products = reduce(lambda x, y: x + y[0] * y[1], number_pairs, 0)\n\n    return sum_of_products, matrix", "compilation_passed": true, "time": 0.0012927055358886719, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n\n    if high <= low:\n        raise ValueError(\"Upper bound must be higher than lower bound\")\n\n    matrix = np.random.randint(low, high, size=shape)\n    combinations_list = list(combinations(matrix.flat, 2))\n\n    sum_of_products = reduce(lambda acc, tup: acc + tup[0] * tup[1], combinations_list, 0)\n\n    return sum_of_products, matrix", "compilation_passed": true, "time": 0.0014281272888183594, "tests_passed": true, "error": null}
{"code": "if high <= low:\n        raise ValueError(\"high must be strictly greater than low\")\n\n    random.seed(seed)\n    mat = np.random.randint(low=low, high=high, size=shape)\n    pairs = list(combinations(mat.reshape(-1), 2))\n    sum_products = reduce(lambda x, y: x + y[0] * y[1], pairs, 0)\n\n    return sum_products, mat", "compilation_passed": true, "time": 0.0007939338684082031, "tests_passed": false, "error": "NameError"}
{"code": "np.random.seed(seed)\n    matrix = np.random.randint(low, high, size=shape)\n    all_pairs = combinations(matrix.flatten(), 2)\n    sum_of_products = reduce(lambda x, y: x + y[0] * y[1], all_pairs, 0)\n    return sum_of_products, matrix", "compilation_passed": true, "time": 0.0016508102416992188, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    if high <= low:\n        raise ValueError('high should be greater than low')\n    matrix = np.random.randint(low, high, size=shape)\n    pairs = list(combinations(matrix.flatten(), 2))\n    product = lambda x, y: x * y\n    return reduce(product, map(sum, map(lambda x: x[0] * x[1], pairs))), matrix", "compilation_passed": true, "time": 0.0008478164672851562, "tests_passed": false, "error": "TypeError"}
{"code": "# Validate input\n    if not high > low:\n        raise ValueError(\"Upper bound must be greater than lower bound\")\n\n    if not seed is None:\n        np.random.seed(seed)\n\n    # Generate matrix\n    matrix = np.random.randint(low, high, size=shape)\n\n    # Generate all possible pairs\n    pairs = combinations(matrix.flatten(), 2)\n\n    # Calculate the sum of the products of all pairs\n    return reduce(lambda x, y: x + y[0] * y[1], pairs, 0), matrix", "compilation_passed": true, "time": 0.0013167858123779297, "tests_passed": true, "error": null}
{"code": "# Raise an error if high <= low\n    if high <= low:\n        raise ValueError('high must be greater than low')\n\n    # Initialize the random number generator\n    rng = np.random.default_rng(seed)\n\n    # Generate a matrix of random numbers\n    matrix = rng.integers(low, high, size=shape)\n\n    # Find all possible combinations of two numbers\n    num_pairs = combinations(matrix.flatten(), 2)\n\n    # Calculate the sum of the products of all pairs\n    sum_products = reduce(lambda x, y: x + y[0] * y[1], num_pairs, 0)\n\n    # Return the sum of products and the matrix\n    return sum_products, matrix", "compilation_passed": true, "time": 0.001386880874633789, "tests_passed": true, "error": null}
{"code": "if high <= low:\n        raise ValueError(\"High value should be greater than low value\")\n    # Initialize the random number generator with the provided seed or without a seed\n    random_generator = np.random.default_rng(seed)\n    # Generate a matrix of specified shape and random numbers within the specified range\n    matrix = random_generator.integers(low, high, shape)\n\n    # Generate a list of all possible number pairs in the matrix\n    possible_pairs = list(combinations(np.unique(matrix), 2))\n    # Calculate the sum of the products of all pairs using reduce\n    sum_of_products = reduce(lambda a, b: a + b[0]*b[1], possible_pairs, 0)\n\n    return sum_of_products, matrix", "compilation_passed": true, "time": 0.0009253025054931641, "tests_passed": true, "error": null}
{"code": "if high <= low:\n        raise ValueError(\"'high' must be greater than 'low'\")\n\n    rng = np.random.default_rng(seed)\n    matrix = rng.integers(low=low, high=high, size=shape)\n\n    pairs = combinations(matrix.flatten(), 2)\n    product_sum = reduce(lambda x, y: x + y[0] * y[1], pairs, 0)\n\n    return product_sum, matrix", "compilation_passed": true, "time": 0.0013990402221679688, "tests_passed": true, "error": null}
{"code": "if high <= low:\n        raise ValueError(\"The upper bound of the random number range must be greater than the lower bound.\")\n\n    # Setting seed for reproducible results\n    np.random.seed(seed)\n\n    # Generating matrix with specified shape and random numbers within the specified range\n    matrix = np.random.randint(low, high, size=shape)\n\n    # Generating list of all possible number pairs\n    pairs = combinations(matrix.reshape(-1), 2)\n\n    # Calculating the sum of the products of all possible number pairs\n    return reduce(lambda acc, val: acc + val[0] * val[1], pairs, 0), matrix", "compilation_passed": true, "time": 0.0012640953063964844, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n\n    if high <= low:\n        raise ValueError(\"Upper bound of random number generation should be higher than lower bound\")\n\n    matrix = np.random.randint(low, high, size=shape)\n    # all possible pairs in matrix\n    possible_pairs = combinations(matrix.reshape(1, -1)[0], 2)\n\n    return reduce(lambda acc, elem: acc + np.prod(elem), possible_pairs, 0), matrix", "compilation_passed": true, "time": 0.001985788345336914, "tests_passed": true, "error": null}
{"code": "if high <= low:\n        raise ValueError(\"high must be greater than low\")\n\n    np.random.seed(seed)\n    matrix = np.random.randint(low, high, size=shape)\n    all_pairs = list(combinations(matrix.reshape(-1), 2))\n    total_sum = reduce(lambda acc, item: acc + item[0]*item[1], all_pairs, 0)\n\n    return total_sum, matrix", "compilation_passed": true, "time": 0.00127410888671875, "tests_passed": true, "error": null}
{"code": "if high <= low:\n        raise ValueError(\"Upper bound must be strictly greater than lower bound\")\n\n    # Generate matrix of random numbers\n    if seed is not None:\n        np.random.seed(seed)\n    matrix = np.random.randint(low, high, shape)\n\n    # Find all possible number pairs in the matrix\n    pairs = combinations(np.ndarray.flatten(matrix), 2)\n\n    # Calculate sum of the products of all pairs using reduce\n    sum_of_products = reduce(lambda acc, val: acc + np.product(val), pairs, 0)\n\n    return sum_of_products, matrix", "compilation_passed": true, "time": 0.002180814743041992, "tests_passed": true, "error": null}
{"code": "if high <= low:\n        raise ValueError(\"'high' must be greater than 'low'\")\n\n    np.random.seed(seed)\n    a = np.random.randint(low, high, shape)\n\n    pairs = combinations(a.reshape(-1), 2)\n    products = map(lambda pair: pair[0] * pair[1], pairs)\n    result = reduce(lambda acc, x: acc + x, products)\n\n    return result, a", "compilation_passed": true, "time": 0.0013239383697509766, "tests_passed": true, "error": null}
{"code": "if high <= low:\n        raise ValueError('high must be greater than low')\n\n    np.random.seed(seed)\n    matrix = np.random.randint(low=low, high=high, size=shape)\n\n    pairs = combinations(matrix.flatten(), 2)\n    sum_of_products = reduce(lambda x, y: x + y[0]*y[1], pairs, 0)\n\n    return sum_of_products, matrix", "compilation_passed": true, "time": 0.0012481212615966797, "tests_passed": true, "error": null}
{"code": "if high <= low:\n        raise ValueError(\"Upper bound must be greater than lower bound\")\n    rng = np.random.default_rng(seed)\n    matrix = rng.integers(low, high, size=shape, endpoint=True)\n    all_pairs = combinations(matrix.flatten(), 2)\n    total_sum = reduce(lambda x, y: x + y[0] * y[1], all_pairs, 0)\n    return total_sum, matrix", "compilation_passed": true, "time": 0.0013811588287353516, "tests_passed": true, "error": null}
{"code": "if not low < high:\n        raise ValueError('low should be < high')\n\n    # generate matrix\n    np.random.seed(seed)\n    matrix = np.random.randint(low, high, size=shape)\n\n    # create list of all possible number pairs\n    lst_of_nums = matrix.reshape(shape[0] * shape[1]).tolist()\n    lst_of_pairs = list(combinations(lst_of_nums, 2))\n\n    # calculate sum of the products of all pairs\n    sum_of_pairs = reduce(lambda x, y: x + y[0] * y[1], lst_of_pairs, 0)\n\n    return sum_of_pairs, matrix", "compilation_passed": true, "time": 0.0013189315795898438, "tests_passed": true, "error": null}
{"code": "if high <= low:\n        raise ValueError(\"'high' should be greater than 'low'\")\n\n    np.random.seed(seed)\n    matrix = np.random.randint(low, high, size=shape)\n    pairs = list(combinations(matrix.ravel(), 2))\n    sum_of_products = reduce(lambda x, y: x + y[0] * y[1], pairs, 0)\n    return sum_of_products, matrix", "compilation_passed": true, "time": 0.0013070106506347656, "tests_passed": true, "error": null}
{"code": "# Validate the input parameters\n    if high <= low:\n        raise ValueError(\"The upper bound should be strictly greater than the lower bound\")\n\n    # Set the random seed\n    if seed is not None:\n        np.random.seed(seed)\n\n    # Generate a matrix of random numbers within the specified range\n    matrix = np.random.randint(low, high, size=shape)\n\n    # Create a list of all possible number pairs\n    pairs = combinations(matrix.flatten(), 2)\n\n    # Calculate the sum of the products of all pairs using reduce\n    result = reduce(lambda x, y: x + y[0] * y[1], pairs, 0)\n\n    return result, matrix", "compilation_passed": true, "time": 0.0012979507446289062, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    if low > high:\n        raise ValueError(\"low should be less or equal to high\")\n    matrix = np.random.randint(low, high, shape)\n    pairs = combinations(np.ndarray.flatten(matrix), 2)\n    return reduce(lambda x, y: x + (y[0] * y[1]), pairs, 0), matrix", "compilation_passed": true, "time": 0.0014278888702392578, "tests_passed": true, "error": null}
{"code": "if high <= low:\n        raise ValueError(\"Upper bound must be greater than lower bound.\")\n\n    np.random.seed(seed)  # Initialize the random number generator\n\n    # Create a matrix of random integers in the specified range\n    matrix = np.random.randint(low, high, size=shape)\n\n    # Get all possible combinations of pairs in the matrix\n    pairs = list(combinations(np.concatenate(matrix), 2))\n\n    # Calculate the sum of the products of all pairs\n    sum_of_products = reduce(lambda x, y: x + y[0] * y[1], pairs, 0)\n\n    return sum_of_products, matrix", "compilation_passed": true, "time": 0.0013079643249511719, "tests_passed": true, "error": null}
{"code": "if high <= low:\n        raise ValueError('high must be > low')\n\n    if seed:\n        np.random.seed(seed)\n\n    array = np.random.randint(low, high, shape)\n\n    list_of_all_possible_number_pairs = list(combinations(array.reshape(-1), 2))\n\n    sum_of_products_of_all_pairs = reduce(\n        lambda x, y: x + y[0] * y[1],\n        list_of_all_possible_number_pairs,\n        0)\n\n    return sum_of_products_of_all_pairs, array", "compilation_passed": true, "time": 0.001325845718383789, "tests_passed": true, "error": null}
{"code": "if high <= low:\n        raise ValueError(\"high must be greater than low\")\n\n    np.random.seed(seed)\n    matrix = np.random.randint(low, high, size=shape)\n    number_pairs = list(combinations(np.ravel(matrix), 2))\n    sum_of_products = reduce(lambda x, y: x + y[0] * y[1], number_pairs, 0)\n    return sum_of_products, matrix", "compilation_passed": true, "time": 0.0012960433959960938, "tests_passed": true, "error": null}
{"code": "if high <= low:\n        raise ValueError(\"High must be > low\")\n\n    np.random.seed(seed)\n    matrix = np.random.randint(low, high, shape)\n\n    pairs = combinations(matrix.flatten(), 2)\n    sum_of_products = reduce(lambda x, y: x + y[0] * y[1], pairs, 0)\n    return (sum_of_products, matrix)", "compilation_passed": true, "time": 0.0013036727905273438, "tests_passed": true, "error": null}
{"code": "if high <= low:\n        raise ValueError('high <= low')\n\n    if seed is not None:\n        np.random.seed(seed)\n\n    matrix = np.random.randint(low=low, high=high, size=shape)\n    matrix_array = np.array(matrix)\n\n    result = sum(np.product(list(i)) for i in combinations(list(matrix_array.flat), 2))\n\n    return (result, matrix_array)", "compilation_passed": true, "time": 0.0022411346435546875, "tests_passed": true, "error": null}
{"code": "if high <= low:\n        raise ValueError(\"high must be greater than low\")\n\n    np.random.seed(seed)\n    matrix = np.random.randint(low, high, shape)\n\n    possible_pairs = combinations(matrix.flatten(), 2)\n    sum_products = reduce(lambda x, y: x + y[0] * y[1], possible_pairs, 0)\n\n    return sum_products, matrix", "compilation_passed": true, "time": 0.0013070106506347656, "tests_passed": true, "error": null}
{"code": "if high <= low:\n        raise ValueError('high must be greater than low')\n    np.random.seed(seed)\n    matrix = np.random.randint(low, high, size=shape)\n    number_pairs = combinations(matrix.ravel(), 2)\n    sum_of_products = reduce(lambda x, y: x + y[0] * y[1], number_pairs, 0)\n    return sum_of_products, matrix", "compilation_passed": true, "time": 0.0012807846069335938, "tests_passed": true, "error": null}
{"code": "if high <= low:\n        raise ValueError(\"high must be greater than low\")\n\n    if seed is not None:\n        np.random.seed(seed)\n\n    matrix = np.random.randint(low, high, size=shape)\n    num_pairs = list(combinations(np.ravel(matrix), 2))\n\n    def reducer(acc, cur):\n        return acc + cur[0] * cur[1]\n\n    sum_products = reduce(reducer, num_pairs, 0)\n\n    return sum_products, matrix", "compilation_passed": true, "time": 0.0013842582702636719, "tests_passed": true, "error": null}
