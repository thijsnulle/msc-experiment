{"code": "path_obj = pathlib.Path(source_path)\n\n    if not path_obj.is_dir():\n        raise ValueError(f'Path \"{source_path}\" is not a directory or does not exist.')\n\n    source_name = path_obj.name\n\n    # Copy files to destination\n    destination_path = pathlib.Path(destination_path)\n    if not destination_path.exists():\n        destination_path.mkdir()\n\n    copied_files = []\n    for filename in os.listdir(source_path):\n        file_path = os.path.join(source_path, filename)\n        if os.path.isfile(file_path):\n            shutil.copy2(file_path, destination_path)\n            copied_files.append(filename)\n\n    return source_name, copied_files", "compilation_passed": true, "time": 0.0019321441650390625, "tests_passed": false, "error": "NameError"}
{"code": "try:\n        if not pathlib.Path(source_path).is_dir():\n            raise ValueError(f'\"{source_path}\" does not exist or is not a directory.')\n    except Exception as e:\n        raise\n    else:\n        source_dir_path = pathlib.Path(source_path)\n        source_dir_name = source_dir_path.stem\n        dest_dir_path = pathlib.Path(destination_path).expanduser().absolute()\n\n        try:\n            # Create the destination directory if it does not exist.\n            dest_dir_path.mkdir(exist_ok=True)\n        except Exception as e:\n            raise\n\n        files = [file.name for file in source_dir_path.iterdir() if file.is_file()]\n\n        for file in files:\n            try:\n                shutil.copy(source_dir_path / file, dest_dir_path / file)\n            except Exception as e:\n                raise\n\n        return source_dir_name, files", "compilation_passed": true, "time": 0.009469270706176758, "tests_passed": true, "error": null}
{"code": "source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if source_path.is_dir() == False:\n        raise ValueError(f'Source path is not a valid directory, \"{source_path}\"')\n\n    file_list = [i.name for i in pathlib.Path(source_path).iterdir() if i.is_file()]\n    destination_path.mkdir(exist_ok=True)\n    for file in file_list:\n        shutil.copy2(source_path/file, destination_path/file)\n\n    return source_path.name, file_list", "compilation_passed": true, "time": 0.009391069412231445, "tests_passed": true, "error": null}
{"code": "if not pathlib.Path(source_path).is_dir():\n        raise ValueError(f\"The source directory '{source_path}' does not exist or is not a directory.\")\n\n    if not pathlib.Path(destination_path).is_dir():\n        pathlib.Path(destination_path).mkdir(parents=True, exist_ok=True)\n\n    # List files in the source directory without descending into subdirectories\n    files = [file.name for file in pathlib.Path(source_path).iterdir() if file.is_file()]\n\n    # Copy the files to the destination directory\n    for file in files:\n        shutil.copy2(pathlib.Path(source_path) / file, destination_path)\n\n    # Return the name of the source directory and a list of filenames that were copied\n    return (pathlib.Path(source_path).name, files)", "compilation_passed": true, "time": 0.00957798957824707, "tests_passed": true, "error": null}
{"code": "if not pathlib.Path(source_path).is_dir():\n        raise ValueError(f'Source directory not found or invalid: {source_path}')\n\n    file_copies = []\n    for filename in pathlib.Path(source_path).iterdir():\n        if filename.is_file():\n            shutil.copy(filename, destination_path)\n            file_copies.append(filename.name)\n\n    return pathlib.Path(source_path).name, file_copies", "compilation_passed": true, "time": 0.0066606998443603516, "tests_passed": true, "error": null}
{"code": "# Raise ValueError if source_path does not exist or is not a directory.\n    if not pathlib.Path(source_path).is_dir():\n        raise ValueError(\n            f\"Source path '{source_path}' does not exist or is not a directory.\")\n\n    source_dir = pathlib.Path(source_path)\n    destination_dir = pathlib.Path(destination_path)\n\n    if not destination_dir.is_dir():\n        destination_dir.mkdir(parents=True, exist_ok=True)\n\n    file_names_copied = []\n\n    for file_path in source_dir.iterdir():\n        if file_path.is_file():\n            destination_file_path = destination_dir / file_path.name\n            shutil.copy2(file_path, destination_file_path)\n            file_names_copied.append(file_path.name)\n\n    return source_dir.name, file_names_copied", "compilation_passed": true, "time": 0.011197090148925781, "tests_passed": true, "error": null}
{"code": "# Check that the source path is an existing directory\n    source_path = pathlib.Path(source_path)\n    if not source_path.exists():\n        raise ValueError(f\"Source path '{source_path}' does not exist\")\n    if not source_path.is_dir():\n        raise ValueError(f\"Source path '{source_path}' is not a directory\")\n\n    # Create the destination directory if it doesn't exist\n    destination_path = pathlib.Path(destination_path)\n    if not destination_path.exists():\n        destination_path.mkdir(parents=True)\n\n    # Loop through files in source directory\n    filenames_copied = []\n    for file in source_path.iterdir():\n        if file.is_file():\n            shutil.copy(file, destination_path)\n            filenames_copied.append(file.name)\n\n    # Return the name of the source directory and a list of filenames that were copied\n    return source_path.name, filenames_copied", "compilation_passed": true, "time": 0.008942127227783203, "tests_passed": true, "error": null}
{"code": "source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.is_dir():\n        raise ValueError('Source path is not a directory')\n    if not destination_path.exists():\n        destination_path.mkdir(parents=True)\n\n    # Get a list of filenames in the source directory, excluding subdirectories\n    filenames = [f.name for f in source_path.iterdir() if f.is_file()]\n    for filename in filenames:\n        source = source_path / filename\n        destination = destination_path / filename\n        shutil.copy(source, destination)\n\n    return source_path.name, filenames", "compilation_passed": true, "time": 0.008993148803710938, "tests_passed": true, "error": null}
{"code": "src_path = pathlib.Path(source_path)\n    if not src_path.is_dir():\n        raise ValueError(\"Source path must be an existing, accessible directory.\")\n    src_dir_name = src_path.name\n\n    dest_path = pathlib.Path(destination_path)\n    if not dest_path.is_dir():\n        dest_path.mkdir()\n\n    copied_files = []\n    for file_path in src_path.glob('*.*'):\n        if file_path.is_file():\n            shutil.copy(file_path, dest_path)\n            copied_files.append(file_path.name)\n\n    return src_dir_name, copied_files", "compilation_passed": true, "time": 0.009199857711791992, "tests_passed": true, "error": null}
{"code": "source_path_obj = pathlib.Path(source_path)\n    if not source_path_obj.exists():\n        raise ValueError(f\"The specified source path '{source_path}' does not exist.\")\n\n    if not source_path_obj.is_dir():\n        raise ValueError(f\"The specified source path '{source_path}' is not a directory.\")\n\n    destination_path_obj = pathlib.Path(destination_path)\n    if not destination_path_obj.exists():\n        destination_path_obj.mkdir(parents=True, exist_ok=True)\n\n    file_names = []\n\n    for item in source_path_obj.iterdir():\n        if item.is_file():\n            shutil.copy2(str(item), str(destination_path))\n            file_names.append(item.name)\n\n    return source_path_obj.name, file_names", "compilation_passed": true, "time": 0.009519815444946289, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(source_path):\n        raise ValueError(f\"{source_path} does not exist\")\n    if os.path.isfile(source_path):\n        raise ValueError(f\"{source_path} is not a directory\")\n\n    if not os.path.exists(destination_path):\n        os.makedirs(destination_path)\n\n    source_path_obj = pathlib.Path(source_path)\n    destination_path_obj = pathlib.Path(destination_path)\n\n    file_paths = []\n    for entry in os.listdir(source_path_obj):\n        if os.path.isfile(source_path_obj / entry):\n            file_paths.append(entry)\n\n    for file_path in file_paths:\n        shutil.copy(source_path_obj / file_path, destination_path_obj)\n\n    return source_path_obj.name, file_paths", "compilation_passed": true, "time": 0.0019140243530273438, "tests_passed": false, "error": "NameError"}
{"code": "if not pathlib.Path(source_path).is_dir():\n        raise ValueError(f\"Source directory {source_path} does not exist or is not a directory.\")\n\n    copied_files = []\n\n    # List files in the source directory without descending into subdirectories\n    file_list = pathlib.Path(source_path).glob('*')\n\n    # Copy files to the destination directory\n    for file in file_list:\n        if file.is_file():\n            shutil.copy2(file, destination_path)\n            copied_files.append(file.name)\n\n    return source_path.split(\"/\")[-1], copied_files", "compilation_passed": true, "time": 0.00769805908203125, "tests_passed": true, "error": null}
{"code": "src = pathlib.Path(source_path)\n\n    if not src.exists():\n        raise ValueError(\"Specified source path does not exist.\")\n    if not src.is_dir():\n        raise ValueError(\"Specified source path is not a directory.\")\n\n    dst = pathlib.Path(destination_path)\n    if not dst.exists():\n        dst.mkdir()\n\n    copied_files = []\n    for file in src.iterdir():\n        if file.is_file():\n            shutil.copy(file, dst)\n            copied_files.append(file.name)\n\n    return src.name, copied_files", "compilation_passed": true, "time": 0.009454965591430664, "tests_passed": true, "error": null}
{"code": "src_dir = pathlib.Path(source_path)\n    dest_dir = pathlib.Path(destination_path)\n    if not src_dir.is_dir():\n        raise ValueError(f\"source_path '{source_path}' does not exist or is not a directory.\")\n    if not dest_dir.exists():\n        dest_dir.mkdir(parents=True)\n    files_to_copy = [file.name for file in src_dir.iterdir() if file.is_file()]\n    copied_files = []\n    for file in files_to_copy:\n        source = src_dir / file\n        destination = dest_dir / file\n        shutil.copy(source, destination)\n        copied_files.append(file)\n    return src_dir.name, copied_files", "compilation_passed": true, "time": 0.009102106094360352, "tests_passed": true, "error": null}
{"code": "# Check if source_path exists and is a directory\n    if not pathlib.Path(source_path).is_dir():\n        raise ValueError(f\"The specified source_path does not exist or is not a directory: {source_path}\")\n\n    # Check if destination_path exists and is a directory. Create it if it doesn't exist.\n    if not pathlib.Path(destination_path).is_dir():\n        pathlib.Path(destination_path).mkdir(parents=True, exist_ok=True)\n\n    # Get the source directory name\n    source_dir_name = pathlib.Path(source_path).name\n\n    # List all files in the source directory without descending into subdirectories\n    file_list = []\n    for file in pathlib.Path(source_path).iterdir():\n        if file.is_file():\n            file_list.append(file.name)\n\n    # Copy files to the destination directory\n    for filename in file_list:\n        shutil.copy2(pathlib.Path(source_path, filename), pathlib", "compilation_passed": false, "time": 0.0002269744873046875, "tests_passed": false, "error": "SyntaxError"}
{"code": "src_path_obj = pathlib.Path(source_path)\n    if not src_path_obj.exists() or not src_path_obj.is_dir():\n        raise ValueError(\"Source path must exist and be a directory\")\n\n    dst_path_obj = pathlib.Path(destination_path)\n    if not dst_path_obj.exists():\n        dst_path_obj.mkdir()\n    if not dst_path_obj.is_dir():\n        raise ValueError(\"Destination path must be a directory\")\n\n    file_list = [file.name for file in src_path_obj.iterdir() if file.is_file()]\n\n    for file in file_list:\n        src_file_path = src_path_obj / file\n        dst_file_path = dst_path_obj / file\n        shutil.copy(src_file_path, dst_file_path)\n\n    return src_path_obj.name, file_list", "compilation_passed": true, "time": 0.00939178466796875, "tests_passed": true, "error": null}
{"code": "source_path = pathlib.Path(source_path)\n    if not source_path.exists():\n        raise ValueError(f\"Directory '{source_path}' does not exist.\")\n    if not source_path.is_dir():\n        raise ValueError(f\"Directory '{source_path}' is not a directory.\")\n    destination_path = pathlib.Path(destination_path)\n    if not destination_path.is_dir():\n        destination_path.mkdir(parents=True, exist_ok=True)\n    file_names = []\n    for file_path in source_path.iterdir():\n        if file_path.is_file():\n            shutil.copy2(file_path, destination_path / file_path.name)\n            file_names.append(file_path.name)\n    return source_path.name, file_names", "compilation_passed": true, "time": 0.009486198425292969, "tests_passed": true, "error": null}
{"code": "src_path = pathlib.Path(source_path)\n\n    if not src_path.exists():\n        raise ValueError(\"Source path does not exist.\")\n    if not src_path.is_dir():\n        raise ValueError(\"Source path is not a directory.\")\n\n    dst_path = pathlib.Path(destination_path)\n    if not dst_path.exists():\n        dst_path.mkdir(parents=True, exist_ok=True)\n    if not dst_path.is_dir():\n        raise ValueError(\"Destination path is not a directory.\")\n\n    copied_files = []\n    for item in src_path.iterdir():\n        if item.is_file():\n            shutil.copy2(item, dst_path)\n            copied_files.append(item.name)\n\n    return (src_path.name, copied_files)", "compilation_passed": true, "time": 0.008765935897827148, "tests_passed": true, "error": null}
{"code": "# Validate input parameters\n    src_path = pathlib.Path(source_path)\n    dst_path = pathlib.Path(destination_path)\n    if not src_path.is_dir():\n        raise ValueError(f\"{source_path} is not a valid directory\")\n    dst_path.mkdir(parents=True, exist_ok=True)\n\n    # Retrieve a list of filenames (not full paths) in the specified source directory\n    files_list = [filename.name for filename in src_path.iterdir() if filename.is_file()]\n\n    # Copy files to the destination directory\n    for file in files_list:\n        shutil.copy(src_path / file, dst_path)\n\n    return src_path.name, files_list", "compilation_passed": true, "time": 0.009634733200073242, "tests_passed": true, "error": null}
{"code": "source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n\n    # Validate that source_path exists and is a directory\n    if not source_path.is_dir():\n        raise ValueError(f\"Source directory does not exist or is not a directory: {source_path}\")\n\n    # Create the destination directory if it doesn't exist\n    if not destination_path.exists():\n        destination_path.mkdir(parents=True, exist_ok=True)\n\n    # List all files in the source directory without descending into subdirectories\n    files = [f.name for f in source_path.iterdir() if f.is_file()]\n\n    # Copy each file to the destination directory\n    copied_files = []\n    for file in files:\n        shutil.copy2(source_path / file, destination_path / file)\n        copied_files.append(file)\n\n    return source_path.name, copied_files", "compilation_passed": true, "time": 0.008124113082885742, "tests_passed": true, "error": null}
{"code": "source_path = pathlib.Path(source_path)\n\n    if source_path.exists():\n        if source_path.is_dir():\n            pass\n        else:\n            raise ValueError(\"The specified path exists but is not a directory.\")\n    else:\n        raise ValueError(\"The specified path does not exist.\")\n\n    destination_path = pathlib.Path(destination_path)\n    if destination_path.exists():\n        if destination_path.is_dir():\n            pass\n        else:\n            raise ValueError(\"The specified path exists but is not a directory.\")\n    else:\n        destination_path.mkdir()\n\n    copied_files = []\n    for file in source_path.iterdir():\n        if file.is_file():\n            shutil.copy(file.absolute(), destination_path.absolute())\n            copied_files.append(file.name)\n\n    return source_path.name, copied_files", "compilation_passed": true, "time": 0.007601737976074219, "tests_passed": true, "error": null}
{"code": "# Validate arguments:\n    # source_path must be a directory path that exists\n    if not (pathlib.Path(source_path).is_dir() and source_path):\n        raise ValueError(\"source_path must be an existing, accessible directory.\")\n\n    # Convert source_path to a path object so that we can use its properties and methods\n    source_path_path_obj = pathlib.Path(source_path)\n    # Extract the name of the directory\n    source_dir_name = source_path_path_obj.name\n\n    # Create the destination directory if it doesn't exist\n    destination_path_path_obj = pathlib.Path(destination_path)\n    if not destination_path_path_obj.exists():\n        destination_path_path_obj.mkdir(parents=True, exist_ok=True)\n\n    # Initialize an empty list to store the filenames\n    file_names_list = []\n\n    # Iterate over each file in the source directory, excluding subdirectories\n    for file_path in source_path_path_obj.iter", "compilation_passed": false, "time": 0.000179290771484375, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not os.path.isdir(source_path):\n        raise ValueError(\"The directory path does not exist or is not a directory\")\n\n    if not os.access(source_path, os.R_OK):\n        raise PermissionError(\"You do not have permission to read from the specified directory\")\n\n    src_dir_name = os.path.basename(os.path.normpath(source_path))\n\n    if not os.path.exists(destination_path):\n        os.makedirs(destination_path)\n\n    copied_files = []\n    for file in os.listdir(source_path):\n        if os.path.isfile(os.path.join(source_path, file)):\n            shutil.copy2(os.path.join(source_path, file), destination_path)\n            copied_files.append(file)\n\n    return (src_dir_name, copied_files)", "compilation_passed": true, "time": 0.0018429756164550781, "tests_passed": false, "error": "NameError"}
{"code": "src_path = pathlib.Path(source_path)\n    dest_path = pathlib.Path(destination_path)\n    if not src_path.exists() or not src_path.is_dir():\n        raise ValueError(\"source_path must point to an existing directory\")\n    if not dest_path.exists():\n        dest_path.mkdir(parents=True)\n    if not dest_path.is_dir():\n        raise ValueError(\"destination_path must point to a directory\")\n\n    copied_files = []\n    for file in src_path.glob(\"*\"):\n        if file.is_file():\n            copied_files.append(file.name)\n            shutil.copy(file, dest_path)\n    return src_path.name, copied_files", "compilation_passed": true, "time": 0.007750272750854492, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(source_path):\n        raise ValueError(f\"{source_path} does not exist or is not a directory\")\n    # pathlib is used to obtain the name of the folder from the provided source directory\n    dir_name = pathlib.Path(source_path).stem\n    # We list the files in the folder and filter the file names without descending to sub-directories.\n    file_names = list(file.name for file in os.scandir(source_path) if file.is_file())\n    # If destination path does not exist, we create it\n    if not os.path.exists(destination_path):\n        os.mkdir(destination_path)\n    # Finally, we copy the files from source path to destination path\n    for file in file_names:\n        shutil.copy(os.path.join(source_path, file), os.path.join(destination_path, file))\n    return dir_name, file_names", "compilation_passed": true, "time": 0.0017621517181396484, "tests_passed": false, "error": "NameError"}
{"code": "# Check if the source path is an existing directory\n    if not os.path.isdir(source_path):\n        raise ValueError(f\"'{source_path}' must be an existing directory.\")\n\n    # Get the directory name from the source path\n    directory_name = os.path.basename(os.path.normpath(source_path))\n\n    # Create a list to store filenames that are copied\n    copied_files = []\n\n    # Iterate through files in the source directory\n    for filename in os.listdir(source_path):\n        # Construct the full file path in the source directory\n        file_path = os.path.join(source_path, filename)\n\n        # Check if the item is a file (not a directory)\n        if os.path.isfile(file_path):\n            # Copy the file to the destination directory\n            shutil.copy(file_path, os.path.join(destination_path, filename))\n\n            # Append the filename to the list\n            copied_files.append(filename)\n\n    return directory_name, copied_", "compilation_passed": true, "time": 0.001753091812133789, "tests_passed": false, "error": "NameError"}
{"code": "# Check that the source_path is an existing directory.\n    if not os.path.isdir(source_path):\n        raise ValueError(\"source_path must be an existing directory.\")\n\n    # Get the name of the directory.\n    dir_name = os.path.basename(source_path)\n\n    # Initialize a list to store the filenames.\n    filenames = []\n\n    # Iterate over the files in the source directory without descending into subdirectories.\n    for file_name in os.listdir(source_path):\n        # Get the full path of the file.\n        file_path = os.path.join(source_path, file_name)\n\n        # If the file is a regular file, append its name to the filenames list.\n        if os.path.isfile(file_path):\n            filenames.append(file_name)\n\n            # Copy the file to the destination directory.\n            shutil.copy(file_path, os.path.join(destination_path, file_name))\n\n    return (dir_name, fil", "compilation_passed": false, "time": 0.0002028942108154297, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not pathlib.Path(source_path).is_dir():\n        raise ValueError(\"The specified source path does not exist or is not a directory.\")\n\n    shutil.copytree(source_path, destination_path, dirs_exist_ok=True)\n    return pathlib.Path(source_path).name, list(pathlib.Path(source_path).glob('*'))", "compilation_passed": true, "time": 0.0027189254760742188, "tests_passed": true, "error": null}
{"code": "if not os.path.isdir(source_path):\n        raise ValueError(f'The specified source_path is not a directory: {source_path}')\n\n    destination_path = pathlib.Path(destination_path)\n    if not destination_path.exists():\n        destination_path.mkdir(parents=True, exist_ok=True)\n\n    source_dir_name = os.path.basename(source_path)\n    copied_files = []\n\n    for file_path in os.listdir(source_path):\n        if os.path.isfile(os.path.join(source_path, file_path)):\n            shutil.copy2(os.path.join(source_path, file_path), destination_path)\n            copied_files.append(file_path)\n\n    return source_dir_name, copied_files", "compilation_passed": true, "time": 0.0018041133880615234, "tests_passed": false, "error": "NameError"}
{"code": "if not os.path.exists(source_path) or not os.path.isdir(source_path):\n        raise ValueError('Source directory does not exist or is not a directory')\n\n    source_dir_path = pathlib.Path(source_path)\n    source_dir_name = source_dir_path.name\n    copied_files = []\n    for file in source_dir_path.iterdir():\n        if file.is_file():\n            shutil.copy(file, destination_path)\n            copied_files.append(file.name)\n    return source_dir_name, copied_files", "compilation_passed": true, "time": 0.001741170883178711, "tests_passed": false, "error": "NameError"}
