{"code": "# Combine the extensions into a regular expression using a pipe character\n    ext_regex = \"|\".join(extensions)\n    # Construct the regular expression pattern\n    regex_pattern = f\"({pattern}).*({ext_regex})\"\n    # Find all files in the directory that match the pattern\n    matches = [\n        str(path.resolve())\n        for path in Path(directory).rglob(\"*\")\n        if re.search(regex_pattern, str(path), re.IGNORECASE) is not None\n    ]\n    # Return the list of file paths that contain the pattern\n    return matches", "compilation_passed": true, "time": 0.004152059555053711, "tests_passed": false, "error": "re.error"}
{"code": "abs_paths = []\n\n    for ext in extensions:\n        files = glob.glob(os.path.join(directory, ext))\n\n        for file in files:\n            with open(file, 'r') as f:\n                contents = f.read()\n                if re.search(pattern, contents, re.IGNORECASE):\n                    abs_paths.append(str(Path(file).resolve()))\n\n    return sorted(abs_paths)", "compilation_passed": true, "time": 0.008273839950561523, "tests_passed": true, "error": null}
{"code": "file_paths = []\n\n    for ext in extensions:\n        for file_path in Path(directory).rglob(ext):\n            if file_path.is_file():\n                with open(file_path, 'r') as f:\n                    content = f.read()\n                    if re.search(pattern, content, flags=re.IGNORECASE):\n                        file_paths.append(os.path.abspath(file_path))\n\n    return file_paths", "compilation_passed": true, "time": 0.007939815521240234, "tests_passed": true, "error": null}
{"code": "matches = []\n    for extension in extensions:\n        for file_name in glob.glob(os.path.join(directory, extension)):\n            with open(file_name, 'r') as f:\n                contents = f.read()\n            if re.search(pattern, contents, re.IGNORECASE):\n                matches.append(Path(file_name).absolute())\n    return matches", "compilation_passed": true, "time": 0.008547067642211914, "tests_passed": true, "error": null}
{"code": "results = []\n\n    for extension in extensions:\n        for filename in glob.glob(os.path.join(directory, extension)):\n            with open(filename, \"r\") as f:\n                if re.search(pattern, f.read(), flags=re.IGNORECASE):\n                    results.append(Path(filename).absolute())\n    return results", "compilation_passed": true, "time": 0.0076601505279541016, "tests_passed": true, "error": null}
{"code": "files = []\n    for ext in extensions:\n        files.extend(glob.glob(os.path.join(directory, ext)))\n    return [str(p) for p in files if re.search(pattern, Path(p).read_text(), re.IGNORECASE)]", "compilation_passed": true, "time": 0.008374929428100586, "tests_passed": true, "error": null}
{"code": "pattern = pattern.lower()\n    results = []\n    for extension in extensions:\n        files = glob.glob(os.path.join(directory, extension))\n        for file in files:\n            with open(file, 'r') as f:\n                if pattern in f.read().lower():\n                    results.append(os.path.abspath(file))\n    return results", "compilation_passed": true, "time": 0.002410888671875, "tests_passed": true, "error": null}
{"code": "# Generate absolute path of directory\n    path = Path(directory).absolute()\n    # Create a string of file extensions to be used in the glob.glob call\n    file_extensions = '{' + ','.join(extensions) + '}'\n    # Use glob.glob to find all files that match the file extensions in the path\n    file_list = glob.glob(str(path / '**/*.' + file_extensions), recursive=True)\n    # Use a list comprehension and re.search to find files that contain the pattern\n    matching_files = [file for file in file_list if re.search(pattern, open(file, 'r').read(), re.IGNORECASE)]\n    # Return a list of absolute file paths for files that contain the pattern\n    return matching_files", "compilation_passed": true, "time": 0.002460002899169922, "tests_passed": false, "error": "TypeError"}
{"code": "# Create a list of file patterns with the specified extensions.\n    file_patterns = [os.path.join(directory, ext) for ext in extensions]\n\n    # Find all files in the directory that match the file patterns.\n    files = glob.glob(file_patterns[0], recursive=True) + glob.glob(file_patterns[1], recursive=True)\n\n    # Initialize an empty list to store the matching files.\n    matching_files = []\n\n    # Search each file for the pattern.\n    for file in files:\n        with open(file, 'r') as f:\n            # Read the contents of the file.\n            contents = f.read()\n\n            # Use the re.search function to check if the pattern is found in the contents.\n            match = re.search(pattern, contents, re.IGNORECASE)\n\n            # If a match is found, append the file's absolute path to the list of matching files.\n            if match:\n                matching_files.append(os.path.abspath(file))\n\n    # Return the list of matching files.\n    return", "compilation_passed": true, "time": 0.002772092819213867, "tests_passed": false, "error": "TypeError"}
{"code": "matches = []\n    for extension in extensions:\n        for filename in glob.iglob(os.path.join(directory, extension)):\n            with open(filename, 'r') as f:\n                if re.search(pattern, f.read(), re.IGNORECASE):\n                    matches.append(os.path.abspath(filename))\n    return matches", "compilation_passed": true, "time": 0.008053064346313477, "tests_passed": true, "error": null}
{"code": "abs_files = []\n    for extension in extensions:\n        abs_files.extend(glob.glob(os.path.join(directory, extension)))\n    result = []\n    for abs_file in abs_files:\n        with open(abs_file, 'r') as f:\n            contents = f.read()\n            if re.search(pattern, contents, re.IGNORECASE):\n                result.append(Path(abs_file).absolute())\n    return sorted(result)", "compilation_passed": true, "time": 0.007458925247192383, "tests_passed": true, "error": null}
{"code": "result = []\n    for ext in extensions:\n        files = glob.glob(os.path.join(directory, ext))\n        for file in files:\n            with open(file) as f:\n                if re.search(pattern, f.read(), re.IGNORECASE):\n                    result.append(os.path.abspath(file))\n    return result", "compilation_passed": true, "time": 0.007334232330322266, "tests_passed": true, "error": null}
{"code": "# Create an absolute file path for each file in the directory that matches the extensions\n    files = [os.path.join(directory, f) for ext in extensions for f in glob.glob(f\"{directory}/*.{ext}\") if os.path.isfile(os.path.join(directory, f))]\n\n    # Initialize an empty list to store the file paths that contain the pattern\n    matches = []\n\n    # Iterate over each file\n    for file in files:\n        # Open the file in read mode\n        with open(file, \"r\", encoding=\"utf-8\") as f:\n            # Read the contents of the file\n            contents = f.read()\n            # Check if the pattern is found in the contents (case-insensitive)\n            if re.search(pattern, contents, re.IGNORECASE):\n                # If so, add the absolute file path to the matches list\n                matches.append(Path(file).resolve())\n\n    return matches", "compilation_passed": true, "time": 0.0023779869079589844, "tests_passed": true, "error": null}
{"code": "absolute_paths = []\n    pattern = re.compile(pattern, flags=re.IGNORECASE)\n    for extension in extensions:\n        for file in glob.glob(os.path.join(directory, extension)):\n            if re.search(pattern, Path(file).read_text()):\n                absolute_paths.append(os.path.abspath(file))\n    return absolute_paths", "compilation_passed": true, "time": 0.00770878791809082, "tests_passed": true, "error": null}
{"code": "# Create a list of all the file paths in the given directory\n    file_paths = [os.path.join(directory, filename) for filename in os.listdir(directory)]\n\n    # Create an empty list to store the file paths that contain the pattern\n    matches = []\n\n    # Loop through all the file paths and read their contents\n    for file_path in file_paths:\n        # Check if the file matches one of the extensions and is not a directory\n        if any(fnmatch.fnmatch(file_path, ext) for ext in extensions) and not os.path.isdir(file_path):\n            with open(file_path, 'r') as f:\n                contents = f.read()\n\n            # Search for the pattern in the file contents in a case-insensitive manner\n            if re.search(pattern, contents, re.IGNORECASE) is not None:\n                # Append the file path to the list of matches\n                matches.append(Path(file_path).absolute())\n\n    # Return the list of matches\n    return matches", "compilation_passed": true, "time": 0.0021681785583496094, "tests_passed": false, "error": "NameError"}
{"code": "# Define a regex pattern that matches the given pattern in a case insensitive manner\n    regex = re.compile(pattern, re.IGNORECASE)\n\n    # Use glob.iglob to find all files in the specified directory with the given extensions\n    files = glob.iglob(os.path.join(directory, \"**\", \"*.*\"), recursive=True)\n\n    # Filter the files to only keep those whose contents match the regex pattern\n    matching_files = [\n        str(Path(file)) for file in files if regex.search(Path(file).read_text())\n    ]\n\n    return matching_files", "compilation_passed": true, "time": 0.007372140884399414, "tests_passed": true, "error": null}
{"code": "# Initialize an empty list to store the matched file paths.\n    matches = []\n    # Iterate over the file extensions provided.\n    for extension in extensions:\n        # Use glob to find all files that match the extension in the specified directory.\n        for filename in glob.glob(os.path.join(directory, extension)):\n            # Open each file in read mode.\n            with open(filename, \"r\") as f:\n                # Read the contents of the file and convert it to lowercase for case insensitive search.\n                text = f.read().lower()\n                # If the pattern is found in the file contents, add its absolute path to the list of matches.\n                if re.search(pattern, text, re.IGNORECASE):\n                    matches.append(Path(filename).resolve())\n    # Return the list of file paths that contain the pattern.\n    return matches", "compilation_passed": true, "time": 0.006742954254150391, "tests_passed": true, "error": null}
{"code": "abs_dir = os.path.abspath(directory)\n    abs_matches = []\n    for extension in extensions:\n        for file in glob.glob(os.path.join(abs_dir, extension)):\n            with open(file, 'r') as f:\n                if re.search(pattern, f.read(), re.IGNORECASE):\n                    abs_matches.append(Path(os.path.abspath(file)))\n    return abs_matches", "compilation_passed": true, "time": 0.008137941360473633, "tests_passed": true, "error": null}
{"code": "result = []\n    for ext in extensions:\n        for file in glob.iglob(os.path.join(directory, ext), recursive=True):\n            if os.path.isfile(file):\n                with open(file, 'r') as f:\n                    contents = f.read()\n                    if re.search(pattern, contents, re.IGNORECASE):\n                        result.append(Path(file).resolve())\n    return result", "compilation_passed": true, "time": 0.006634950637817383, "tests_passed": true, "error": null}
{"code": "matches = []\n    for extension in extensions:\n        matches += [x for x in glob.glob(os.path.join(directory, extension))\n                    if re.search(pattern, Path(x).read_text(errors='ignore'), re.IGNORECASE)]\n    return matches", "compilation_passed": true, "time": 0.006564140319824219, "tests_passed": true, "error": null}
{"code": "pattern_compiled = re.compile(pattern, flags=re.IGNORECASE)\n    matches = []\n    for extension in extensions:\n        for file in glob.glob(os.path.join(directory, extension)):\n            with open(file, 'r') as f:\n                if pattern_compiled.search(f.read()):\n                    matches.append(Path(file).absolute())\n    return matches", "compilation_passed": true, "time": 0.00609588623046875, "tests_passed": true, "error": null}
{"code": "matches = []\n    for ext in extensions:\n        matches += [\n            str(p) for p in Path(directory).rglob(ext) if re.search(pattern, p.read_text(encoding='utf-8'), re.IGNORECASE)\n        ]\n    return matches", "compilation_passed": true, "time": 0.00659489631652832, "tests_passed": true, "error": null}
{"code": "matches = []\n    for extension in extensions:\n        for path in glob.glob(os.path.join(directory, extension)):\n            with open(path, 'r') as f:\n                contents = f.read()\n                if re.search(pattern, contents, re.IGNORECASE):\n                    matches.append(Path(path).absolute())\n    return matches", "compilation_passed": true, "time": 0.006220102310180664, "tests_passed": true, "error": null}
{"code": "pattern = re.compile(pattern, flags=re.IGNORECASE)\n    matches = []\n    for extension in extensions:\n        matches += [str(file) for file in Path(directory).rglob(extension) if pattern.search(file.read_text())]\n    return matches", "compilation_passed": true, "time": 0.0072460174560546875, "tests_passed": true, "error": null}
{"code": "# Loop over all files in the directory and its subdirectories\n    files = [\n        file\n        for ext in extensions\n        for file in glob.glob(\n            os.path.join(directory, \"**\", ext), recursive=True\n        )\n    ]\n    matches = []\n\n    # For each file, read its contents and search for the pattern\n    for file in files:\n        with open(file, \"r\") as f:\n            contents = f.read()\n        if re.search(pattern, contents, re.IGNORECASE):\n            # If the pattern is found, append the file path to the list of matches\n            matches.append(Path(file).absolute())\n    return matches", "compilation_passed": true, "time": 0.0077550411224365234, "tests_passed": true, "error": null}
{"code": "matches = []\n    for extension in extensions:\n        for filename in glob.glob(os.path.join(directory, extension)):\n            with open(filename, 'r') as f:\n                content = f.read()\n                if re.search(pattern, content, re.IGNORECASE):\n                    matches.append(Path(filename).absolute())\n    return matches", "compilation_passed": true, "time": 0.0061261653900146484, "tests_passed": true, "error": null}
{"code": "file_paths = []\n    for ext in extensions:\n        file_paths += glob.glob(os.path.join(directory, ext))\n    matches = [\n        str(file_path) for file_path in map(Path, file_paths) if re.search(pattern, file_path.read_text(errors='ignore'), re.IGNORECASE)]\n    return matches", "compilation_passed": true, "time": 0.006106138229370117, "tests_passed": true, "error": null}
{"code": "matches = []\n    for extension in extensions:\n        for file in glob.glob(os.path.join(directory, extension)):\n            with open(file, \"r\") as f:\n                contents = f.read()\n                if re.search(pattern, contents, re.IGNORECASE):\n                    matches.append(Path(file).absolute())\n    return matches", "compilation_passed": true, "time": 0.006259918212890625, "tests_passed": true, "error": null}
{"code": "result = []\n    for ext in extensions:\n        for filename in glob.glob(os.path.join(directory, ext)):\n            with open(filename, \"r\") as f:\n                if re.search(pattern, f.read(), flags=re.IGNORECASE):\n                    result.append(Path(filename).absolute())\n    return result", "compilation_passed": true, "time": 0.006416797637939453, "tests_passed": true, "error": null}
{"code": "# Initialize a list to store the matches\n    matches = []\n\n    # Loop through each file extension\n    for extension in extensions:\n\n        # Generate a glob pattern to match files with the specified extension\n        glob_pattern = os.path.join(directory, extension)\n\n        # Use glob to get a list of all files that match the pattern\n        files = glob.glob(glob_pattern)\n\n        # Loop through each file that matches the glob pattern\n        for file_path in files:\n            # Open the file in read mode\n            with open(file_path, 'r') as f:\n                # Read the contents of the file\n                contents = f.read()\n\n            # Use a regular expression to check if the pattern is present in the contents\n            if re.search(pattern, contents, re.IGNORECASE):\n                # Add the absolute file path to the list of matches\n                matches.append(Path(file_path).resolve())\n\n    # Return the list of matches\n    return matches", "compilation_passed": true, "time": 0.006801128387451172, "tests_passed": true, "error": null}
