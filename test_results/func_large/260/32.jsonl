{"code": "json_files = glob.glob(os.path.join(directory, \"*.json\"))\n    files_updated = 0\n    for file_path in json_files:\n        with open(file_path, \"r+\") as f:\n            json_data = json.load(f)\n            if KEY not in json_data:\n                json_data[KEY] = VALUE\n                f.seek(0)\n                json.dump(json_data, f)\n                f.truncate()\n                files_updated += 1\n    return files_updated", "compilation_passed": true, "time": 0.004280805587768555, "tests_passed": true, "error": null}
{"code": "# Find all JSON files within the directory\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n\n    # Initialize a counter to track the number of JSON files updated\n    files_updated = 0\n\n    for json_file in json_files:\n        with open(json_file, 'r') as file:\n            data = json.load(file)\n\n        # Check if the key already exists in the JSON file\n        if KEY not in data:\n            data[KEY] = VALUE\n            files_updated += 1\n\n            with open(json_file, 'w') as file:\n                json.dump(data, file)\n\n    return files_updated", "compilation_passed": true, "time": 0.003420114517211914, "tests_passed": true, "error": null}
{"code": "json_files = glob.glob(os.path.join(directory, \"*.json\"))\n    count = 0\n\n    for file_path in json_files:\n        with open(file_path, \"r\") as f:\n            data = json.load(f)\n\n        if KEY not in data:\n            data[KEY] = VALUE\n            with open(file_path, \"w\") as f:\n                json.dump(data, f)\n            count += 1\n\n    return count", "compilation_passed": true, "time": 0.003139019012451172, "tests_passed": true, "error": null}
{"code": "# Initialize counter for updated JSON files\n    updated_json_files = 0\n\n    # Find JSON files in the provided directory\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n\n    # Iterate over JSON files\n    for json_file in json_files:\n        # Read JSON file content\n        with open(json_file, 'r') as file:\n            data = json.load(file)\n\n        # Check if key already exists\n        if KEY in data:\n            print(f\"{KEY} already exists in {json_file}. Skipping...\")\n        else:\n            # Add new key-value pair\n            data[KEY] = VALUE\n            updated_json_files += 1\n            print(f\"{json_file} updated successfully.\")\n\n            # Write updated JSON data back to the file\n            with open(json_file, 'w') as file:\n                json.dump(data, file, indent=4)\n\n    # Return the number of updated JSON files\n    return updated_json_files", "compilation_passed": true, "time": 0.003332853317260742, "tests_passed": true, "error": null}
{"code": "# Find all JSON files in the directory\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    count = 0\n\n    # Process each JSON file\n    for file in json_files:\n        with open(file, 'r', encoding='utf-8') as f:\n            # Load the JSON data\n            data = json.load(f)\n\n            # Check if the key exists and add it if it doesn't\n            if KEY not in data:\n                data[KEY] = VALUE\n                count += 1\n\n        # Write the updated JSON data back to the file\n        with open(file, 'w', encoding='utf-8') as f:\n            json.dump(data, f, ensure_ascii=False, indent=4)\n\n    return count", "compilation_passed": true, "time": 0.003370046615600586, "tests_passed": true, "error": null}
{"code": "count = 0\n    for filename in glob.glob(os.path.join(directory, \"*.json\")):\n        with open(filename, \"r+\") as file:\n            data = json.load(file)\n            if KEY not in data:\n                data[KEY] = VALUE\n                count += 1\n                file.seek(0)\n                file.truncate()\n                json.dump(data, file, indent=4)\n    return count", "compilation_passed": true, "time": 0.003340005874633789, "tests_passed": true, "error": null}
{"code": "# Get all JSON files in the directory\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n\n    # Update each JSON file\n    num_updated = 0\n    for json_file in json_files:\n        with open(json_file, 'r') as f:\n            data = json.load(f)\n        if KEY not in data:\n            data[KEY] = VALUE\n            num_updated += 1\n        with open(json_file, 'w') as f:\n            json.dump(data, f)\n\n    return num_updated", "compilation_passed": true, "time": 0.003325939178466797, "tests_passed": true, "error": null}
{"code": "# Initialize a variable to count the number of JSON files updated\n    num_json_files_updated = 0\n\n    # Find all the JSON files in the directory\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n\n    # Iterate over each JSON file\n    for json_file in json_files:\n        # Load the JSON file content into a Python dictionary\n        with open(json_file, 'r') as file:\n            content = json.load(file)\n\n        # Check if the key already exists in the JSON content\n        if KEY not in content:\n            # Add the new key-value pair\n            content[KEY] = VALUE\n\n            # Write the updated content back to the JSON file\n            with open(json_file, 'w') as file:\n                json.dump(content, file, indent=4)\n\n            # Increment the counter\n            num_json_files_updated += 1\n\n    return num_json_files_updated", "compilation_passed": true, "time": 0.0032498836517333984, "tests_passed": true, "error": null}
{"code": "# Set the directory\n    os.chdir(directory)\n\n    # Find all json files in the directory\n    json_files = glob.glob(\"*.json\")\n\n    # Initialize a counter\n    num_updated = 0\n\n    # Loop over all json files\n    for json_file in json_files:\n\n        # Read the json file\n        with open(json_file, 'r') as f:\n            data = json.load(f)\n\n        # Add the new key-value pair\n        if KEY not in data:\n            data[KEY] = VALUE\n\n            # Write the updated json file\n            with open(json_file, 'w') as f:\n                json.dump(data, f)\n\n            # Increment the counter\n            num_updated += 1\n\n    # Return the number of json files updated\n    return num_updated", "compilation_passed": true, "time": 0.0034148693084716797, "tests_passed": true, "error": null}
{"code": "num_updated = 0\n\n    # Step 1: List all the JSON files in the directory\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n\n    # Step 2: Iterate over all the JSON files and modify them\n    for file_path in json_files:\n        with open(file_path, 'r') as file:\n            data = json.load(file)\n\n        if KEY not in data:\n            # Step 3: Add the new key-value pair if the key doesn't already exist\n            data[KEY] = VALUE\n\n            # Step 4: Save the modified JSON file\n            with open(file_path, 'w') as file:\n                json.dump(data, file, indent=4)\n\n            num_updated += 1\n\n    return num_updated", "compilation_passed": true, "time": 0.003496885299682617, "tests_passed": true, "error": null}
{"code": "# Get a list of all JSON files in the specified directory\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n    num_updated = 0\n\n    # Iterate over each JSON file\n    for file_path in json_files:\n        with open(file_path, 'r') as file:\n            data = json.load(file)\n\n        # Check if the key already exists in the JSON data\n        if KEY in data:\n            continue  # Skip if the key already exists\n\n        # Add the new key-value pair\n        data[KEY] = VALUE\n\n        # Update the JSON file\n        with open(file_path, 'w') as file:\n            json.dump(data, file, indent=4)\n\n        # Increment the count of updated JSON files\n        num_updated += 1\n\n    return num_updated", "compilation_passed": true, "time": 0.003553152084350586, "tests_passed": true, "error": null}
{"code": "json_files = glob.glob(os.path.join(directory, '*.json'))\n    updated_json_files_count = 0\n\n    for json_file in json_files:\n        with open(json_file, 'r+') as file:\n            data = json.load(file)\n            if KEY not in data:\n                data[KEY] = VALUE\n                updated_json_files_count += 1\n                file.seek(0)\n                json.dump(data, file, indent=4)\n                file.truncate()\n\n    return updated_json_files_count", "compilation_passed": true, "time": 0.0033469200134277344, "tests_passed": true, "error": null}
{"code": "json_files = glob.glob(os.path.join(directory, \"*.json\"))\n    if not json_files:\n        print(f\"No JSON files found in {directory}\")\n        return 0\n\n    files_updated = 0\n    for file_path in json_files:\n        with open(file_path, \"r\", encoding=\"utf-8\") as file:\n            data = json.load(file)\n\n        if not data.get(KEY, None):\n            data[KEY] = VALUE\n            with open(file_path, \"w\", encoding=\"utf-8\") as file:\n                json.dump(data, file, indent=4)\n            files_updated += 1\n    return files_updated", "compilation_passed": true, "time": 0.0035851001739501953, "tests_passed": true, "error": null}
{"code": "# Find all JSON files in the provided directory\n    json_files = glob.glob(os.path.join(directory, \"*.json\"))\n\n    # Loop through each JSON file and add the new key-value pair if it doesn't exist\n    count = 0  # Counter to keep track of the number of JSON files updated\n    for file in json_files:\n        with open(file, \"r\", encoding='utf-8') as json_file:\n            data = json.load(json_file)\n\n        # Check if the key exists in the JSON file\n        if KEY not in data:\n            data[KEY] = VALUE  # Add the new key-value pair\n            with open(file, \"w\", encoding='utf-8') as json_file:\n                json.dump(data, json_file)\n            count += 1\n\n    return count", "compilation_passed": true, "time": 0.003400087356567383, "tests_passed": true, "error": null}
{"code": "num_files_updated = 0\n    file_paths = glob.glob(f\"{directory}/**/*.json\", recursive=True)\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            data = json.load(file)\n        if 'mynewkey' not in data:\n            data[KEY] = VALUE\n            with open(file_path, 'w') as file:\n                json.dump(data, file)\n            num_files_updated += 1\n    return num_files_updated", "compilation_passed": true, "time": 0.0036177635192871094, "tests_passed": true, "error": null}
{"code": "# Get all JSON files in the directory\n    json_files = glob.glob(f\"{directory}/*.json\")\n    files_updated = 0\n\n    # Check if any JSON files were found\n    if not json_files:\n        print(f\"No JSON files found in {directory}\")\n        return 0\n\n    # Iterate through each JSON file and modify the content\n    for file in json_files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n\n        # Check if the key already exists in the JSON file\n        if KEY in data:\n            print(f\"Key '{KEY}' already exists in file: {file}\")\n            continue\n\n        # Add new key-value pair to the JSON file\n        data[KEY] = VALUE\n\n        # Write the updated content back to the JSON file\n        with open(file, 'w') as f:\n            json.dump(data, f, indent=4)\n\n        # Increment the count of files updated\n        files_updated += 1\n\n    return files_updated\n\n", "compilation_passed": true, "time": 0.0034482479095458984, "tests_passed": true, "error": null}
{"code": "# Initialize a counter to keep track of the number of JSON files updated\n    counter = 0\n\n    # Iterate over all JSON files in the directory\n    for file_path in glob.glob(os.path.join(directory, '*.json')):\n        # Read the contents of the JSON file\n        with open(file_path, 'r') as json_file:\n            data = json.load(json_file)\n\n        # Check if the 'mynewkey' key already exists in the JSON data\n        if KEY not in data:\n            # Add the new key-value pair if the key doesn't exist\n            data[KEY] = VALUE\n            # Write the updated JSON data back to the file\n            with open(file_path, 'w') as json_file:\n                json.dump(data, json_file)\n            counter += 1\n\n    return counter", "compilation_passed": true, "time": 0.003370046615600586, "tests_passed": true, "error": null}
{"code": "count = 0\n\n    for json_file in glob.glob(f\"{directory}/*.json\"):\n        with open(json_file, \"r+\") as f:\n            json_data = json.load(f)\n\n            if not KEY in json_data:\n                json_data[KEY] = VALUE\n\n                f.seek(0)\n                json.dump(json_data, f)\n                f.truncate()\n\n                count += 1\n\n    return count", "compilation_passed": true, "time": 0.0034360885620117188, "tests_passed": true, "error": null}
{"code": "num_updated_files = 0\n    files = glob.glob(f'{directory}/*.json')\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n        if KEY not in data:\n            data[KEY] = VALUE\n            with open(file, 'w') as f:\n                json.dump(data, f, indent=4)\n            num_updated_files += 1\n    return num_updated_files", "compilation_passed": true, "time": 0.003564119338989258, "tests_passed": true, "error": null}
{"code": "num_json_files_updated = 0\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n\n    for json_file in json_files:\n        with open(json_file, 'r') as f:\n            data = json.load(f)\n        if KEY not in data:\n            data[KEY] = VALUE\n            with open(json_file, 'w') as f:\n                json.dump(data, f, indent=4)\n            num_json_files_updated += 1\n\n    return num_json_files_updated", "compilation_passed": true, "time": 0.0038957595825195312, "tests_passed": true, "error": null}
{"code": "json_files = glob.glob(os.path.join(directory, '*.json'))\n    files_updated = 0\n    for file in json_files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                files_updated += 1\n        with open(file, 'w') as f:\n            json.dump(data, f)\n    return files_updated", "compilation_passed": true, "time": 0.004209280014038086, "tests_passed": true, "error": null}
{"code": "json_files = glob.glob(os.path.join(directory, '*.json'))\n    count = 0\n    for file in json_files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n\n        if KEY in data:\n            continue\n\n        data[KEY] = VALUE\n        count += 1\n\n        with open(file, 'w') as f:\n            json.dump(data, f)\n    return count", "compilation_passed": true, "time": 0.004166126251220703, "tests_passed": true, "error": null}
{"code": "# Get the directory containing the JSON files\n    # json_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), directory)\n\n    # Get all JSON files in the directory\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n\n    # Keep track of the number of files updated\n    files_updated = 0\n\n    # Iterate over the JSON files\n    for json_file in json_files:\n        # Read the existing JSON content\n        with open(json_file, 'r') as f:\n            data = json.load(f)\n\n        # Add the new key-value pair if it doesn't already exist\n        if KEY not in data:\n            data[KEY] = VALUE\n            files_updated += 1\n\n        # Write the updated JSON content back to the file\n        with open(json_file, 'w') as f:\n            json.dump(data, f)\n\n    return files_updated", "compilation_passed": true, "time": 0.003392934799194336, "tests_passed": true, "error": null}
{"code": "# Initialize counter for updated files\n    counter = 0\n\n    # Get list of all JSON files in the directory\n    files = glob.glob(os.path.join(directory, '*.json'))\n\n    # Loop over each file\n    for file in files:\n        # Open and read the file as a dictionary\n        with open(file, 'r') as json_file:\n            data = json.load(json_file)\n\n        # Check if the key already exists in the data\n        if KEY in data:\n            print(f\"Key '{KEY}' already exists in file {file}\")\n        else:\n            # Add the new key-value pair\n            data[KEY] = VALUE\n            counter += 1\n            print(f\"Added new key-value pair in file {file}\")\n\n            # Write the updated data back to the file\n            with open(file, 'w') as json_file:\n                json.dump(data, json_file, indent=4)\n\n    return counter", "compilation_passed": true, "time": 0.003465414047241211, "tests_passed": true, "error": null}
{"code": "num_updated_files = 0\n\n    # Loop through all JSON files in the directory\n    for json_file in glob.glob(os.path.join(directory, '*.json')):\n        # Read JSON data from the file\n        with open(json_file, 'r') as f:\n            json_data = json.load(f)\n\n        # Check if the key doesn't exist in the JSON data\n        if KEY not in json_data:\n            # Add the new key-value pair\n            json_data[KEY] = VALUE\n\n            # Write the updated JSON data back to the file\n            with open(json_file, 'w') as f:\n                json.dump(json_data, f, indent=4)\n\n            num_updated_files += 1\n\n    return num_updated_files", "compilation_passed": true, "time": 0.0034618377685546875, "tests_passed": true, "error": null}
{"code": "# Find all JSON files in the given directory\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n\n    # Count the number of JSON files updated\n    files_updated = 0\n\n    # Iterate over the JSON files\n    for json_file in json_files:\n        with open(json_file, 'r') as file:\n            data = json.load(file)\n\n        # Add the new key-value pair if the key doesn't exist\n        if KEY not in data:\n            data[KEY] = VALUE\n            files_updated += 1\n\n        with open(json_file, 'w') as file:\n            json.dump(data, file, indent=4)\n\n    return files_updated", "compilation_passed": true, "time": 0.0032930374145507812, "tests_passed": true, "error": null}
{"code": "count = 0\n    for json_file in glob.glob(os.path.join(directory, '*.json')):\n        with open(json_file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                count += 1\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n    return count", "compilation_passed": true, "time": 0.0035619735717773438, "tests_passed": true, "error": null}
{"code": "# Use glob to find all JSON files in the directory\n    json_files = glob.glob(f'{directory}/*.json')\n\n    # Keep track of the number of JSON files updated\n    num_updated_files = 0\n\n    # Iterate over all found JSON files\n    for json_file in json_files:\n        # Read the JSON file as a string\n        with open(json_file, 'r') as file:\n            json_data = file.read()\n\n        # Convert the string to a JSON object\n        data_dict = json.loads(json_data)\n\n        # Check if the key doesn't exist in the JSON object\n        if KEY not in data_dict:\n            # Add the new key-value pair to the JSON object\n            data_dict[KEY] = VALUE\n\n            # Convert the updated JSON object back to a string\n            json_string = json.dumps(data_dict, indent=2)\n\n            # Overwrite the existing JSON file with the updated string\n            with open(json_file, 'w') as file:\n                file.write(json_string)", "compilation_passed": true, "time": 0.0018398761749267578, "tests_passed": true, "error": null}
{"code": "# Get a list of all JSON files in the directory\n    json_files = glob.glob(f\"{directory}/*.json\")\n    num_updated = 0\n\n    # Iterate over the JSON files and update each file\n    for json_file in json_files:\n        with open(json_file, 'r') as file:\n            data = json.load(file)\n\n        # Check if the key already exists in the file\n        if KEY not in data:\n            # Add the new key-value pair if the key doesn't exist\n            data[KEY] = VALUE\n            num_updated += 1\n\n        with open(json_file, 'w') as file:\n            json.dump(data, file)\n\n    return num_updated", "compilation_passed": true, "time": 0.003326892852783203, "tests_passed": true, "error": null}
{"code": "files = glob.glob(f'{directory}/*.json')\n\n    updated_count = 0\n    for file in files:\n        with open(file, 'r') as f:\n            json_data = json.load(f)\n        if KEY not in json_data:\n            json_data[KEY] = VALUE\n            updated_count += 1\n\n        with open(file, 'w') as f:\n            json.dump(json_data, f)\n\n    return updated_count", "compilation_passed": true, "time": 0.003412961959838867, "tests_passed": true, "error": null}
