{"code": "# Check if the log directory exists\n    if not os.path.exists(log_dir):\n        os.makedirs(log_dir)\n\n    # Construct the log file path\n    log_file = os.path.join(log_dir, filename)\n\n    # Write the metrics to the log file\n    try:\n        with open(log_file, 'a') as f:\n            timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n            for metric, value in metrics.items():\n                f.write(f'[{timestamp}] {metric}: {value}\\n')\n        print(f'Metrics logged to {log_file}')\n        return True\n    except Exception as e:\n        print(f'An error occurred: {e}')\n        return False", "compilation_passed": true, "time": 0.0018038749694824219, "tests_passed": true, "error": null}
{"code": "try:\n        # Check if the log directory exists\n        if not os.path.isdir(log_dir):\n            # Create the log directory if it doesn't exist\n            os.makedirs(log_dir)\n        # Open the file in append mode to append new metrics\n        with open(os.path.join(log_dir, filename), 'a') as f:\n            # Get the current timestamp\n            timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n            # Write the timestamp and each metric to the file\n            f.write(f\"{timestamp} - {str(metrics)}\\n\")\n        # Return True if the metrics were written successfully\n        return True\n    except Exception as e:\n        # Handle exceptions by printing the error message and returning False\n        print(f\"An error occurred: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.0018961429595947266, "tests_passed": true, "error": null}
{"code": "try:\n        # Create log file if it doesn't exist\n        os.makedirs(log_dir, exist_ok=True)\n        log_file = os.path.join(log_dir, filename)\n        with open(log_file, 'a') as f:\n            for metric_name, metric_value in metrics.items():\n                timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n                entry = f\"{timestamp}: {metric_name}={metric_value}\\n\"\n                f.write(entry)\n        return True\n    except Exception as e:\n        print(f'An error occurred: {e}')\n        return False", "compilation_passed": true, "time": 0.0018482208251953125, "tests_passed": true, "error": null}
{"code": "log_path = os.path.join(log_dir, filename)\n\n    # Ensure that the log file can be accessed for reading and writing\n    try:\n        with open(log_path, 'a') as log_file:\n            current_time = datetime.now()\n            for metric_name, metric_value in metrics.items():\n                log_file.write(f\"{current_time}, {metric_name}, {metric_value}\\n\")\n        return True\n\n    except Exception as e:\n        # Log the error message to the console and return False\n        print(f\"An error occurred: {e}\")\n        return False", "compilation_passed": true, "time": 0.002565145492553711, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(log_dir):\n        os.makedirs(log_dir)\n    try:\n        with open(f'{log_dir}/{filename}', 'w') as file:\n            for metric, value in metrics.items():\n                file.write(f'{metric}: {value} | {datetime.now()}\\n')\n    except Exception as e:\n        print(f'An error occurred: {e}')\n        return False\n    else:\n        return True", "compilation_passed": true, "time": 0.0017998218536376953, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(log_dir):\n        os.makedirs(log_dir)\n\n    # Get the absolute path of the log file\n    abs_file_path = os.path.join(os.getcwd(), log_dir, filename)\n\n    try:\n        with open(abs_file_path, 'w') as file:\n            for metric, value in metrics.items():\n                timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n                file.write(f\"{metric}: {value} @ {timestamp}\\n\")\n        return True\n    except Exception as e:\n        print(f\"An error occurred: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.0018389225006103516, "tests_passed": true, "error": null}
{"code": "try:\n        os.makedirs(log_dir, exist_ok=True)\n        log_path = os.path.join(log_dir, filename)\n        with open(log_path, 'a') as f:\n            timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n            f.write(f\"[{timestamp}] \")\n            for metric_name, metric_value in metrics.items():\n                f.write(f\"{metric_name}={metric_value};\")\n            f.write(\"\\n\")\n        return True\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return False", "compilation_passed": true, "time": 0.0019588470458984375, "tests_passed": true, "error": null}
{"code": "# Create the log directory if it doesn't exist\n    if not os.path.exists(log_dir):\n        os.makedirs(log_dir)\n\n    # Construct the file path\n    file_path = os.path.join(log_dir, filename)\n\n    # Append a timestamp before each entry\n    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n    try:\n        with open(file_path, 'a') as f:\n            for key, value in metrics.items():\n                f.write(f'{timestamp} {key}: {value}\\n')\n    except OSError as e:\n        print(f\"An error occurred: {e}\")\n        return False\n    else:\n        return True", "compilation_passed": true, "time": 0.0018138885498046875, "tests_passed": true, "error": null}
{"code": "log_file_path = os.path.join(log_dir, filename)\n    try:\n        with open(log_file_path, 'a') as log_file:\n            for metric, value in metrics.items():\n                log_file.write(f'[{datetime.now()}] {metric}: {value}\\n')\n        return True\n    except Exception as e:\n        print(f'An error occurred: {e}')\n        return False", "compilation_passed": true, "time": 0.001867055892944336, "tests_passed": true, "error": null}
{"code": "try:\n        os.makedirs(log_dir, exist_ok=True)\n        with open(os.path.join(log_dir, filename), 'a') as f:\n            timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n            f.write(f'{timestamp}: {metrics}\\n')\n        return True\n    except Exception as e:\n        print(f'An error occurred: {e}')\n        return False", "compilation_passed": true, "time": 0.0025877952575683594, "tests_passed": true, "error": null}
{"code": "try:\n        os.makedirs(log_dir, exist_ok=True)\n        with open(os.path.join(log_dir, filename), 'a') as f:\n            timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n            for key, value in metrics.items():\n                f.write(f'[{timestamp}] {key}: {value}\\n')\n        return True\n    except Exception as e:\n        print(f'An error occurred: {str(e)}')\n        return False", "compilation_passed": true, "time": 0.0018689632415771484, "tests_passed": true, "error": null}
{"code": "log_path = os.path.join(log_dir, filename)\n\n    try:\n        with open(log_path, 'a') as file:\n            timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n            for metric, value in metrics.items():\n                file.write(f\"{metric}: {value} ({timestamp})\\n\")\n\n        return True\n\n    except Exception as error:\n        print(f\"An error occurred: {error}\")\n        return False", "compilation_passed": true, "time": 0.0017669200897216797, "tests_passed": true, "error": null}
{"code": "# Initialize the log file path\n    log_path = os.path.join(log_dir, filename)\n\n    # Open the log file in append mode\n    try:\n        with open(log_path, 'a') as f:\n            # Write a timestamp for the current time\n            f.write(f\"\\nTime: {datetime.now()}\\n\")\n\n            # Write each metric and its value to the log file, with a timestamp\n            for metric, value in metrics.items():\n                f.write(f\"{metric}: {value} | Timestamp: {datetime.now()}\\n\")\n        print(f\"Metrics written to {log_path}\")\n        return True\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return False", "compilation_passed": true, "time": 0.0019578933715820312, "tests_passed": true, "error": null}
{"code": "try:\n        # Ensure that the log directory exists\n        if not os.path.exists(log_dir):\n            os.makedirs(log_dir)\n\n        # Construct the log file path\n        log_file_path = os.path.join(log_dir, filename)\n\n        # Open the log file in append mode\n        with open(log_file_path, 'a') as log_file:\n            # Get the current date and time\n            current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n\n            # Write each metric to the log file with its timestamp\n            for metric, value in metrics.items():\n                log_file.write(f\"[{current_time}] {metric}: {value}\\n\")\n\n            return True\n\n    except Exception as e:\n        # Log the error message\n        print(f\"An error occurred: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.0018129348754882812, "tests_passed": true, "error": null}
{"code": "# Check if the directory exists and create it if it doesn't\n    if not os.path.exists(log_dir):\n        try:\n            os.makedirs(log_dir)\n        except OSError as e:\n            print('An error occurred: %s' % e)\n            return False\n\n    # Construct the path to the log file\n    log_file = os.path.join(log_dir, filename)\n\n    # Try to write the metrics to the file\n    try:\n        with open(log_file, 'a') as f:\n            timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n            for key, value in metrics.items():\n                f.write('{} | {} : {}\\n'.format(timestamp, key, value))\n        return True\n    except Exception as e:\n        print('An error occurred: %s' % e)\n        return False", "compilation_passed": true, "time": 0.0018610954284667969, "tests_passed": true, "error": null}
{"code": "try:\n        os.makedirs(log_dir, exist_ok=True)\n        filepath = os.path.join(log_dir, filename)\n        with open(filepath, 'a') as f:\n            timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n            for metric, value in metrics.items():\n                f.write(f\"[{timestamp}] {metric}: {value}\\n\")\n        return True\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return False", "compilation_passed": true, "time": 0.002496004104614258, "tests_passed": true, "error": null}
{"code": "# Check if the log directory exists\n    if not os.path.exists(log_dir):\n        print(f\"Directory '{log_dir}' does not exist. Creating it now...\")\n        try:\n            os.makedirs(log_dir)\n        except OSError as e:\n            print(f\"Failed to create directory '{log_dir}': {e}\")\n            return False\n    # Check if the log file already exists\n    log_file_path = os.path.join(log_dir, filename)\n    if not os.path.exists(log_file_path):\n        try:\n            open(log_file_path, 'a').close()\n        except OSError as e:\n            print(f\"An error occurred while creating the log file {log_file_path}: {e}\")\n            return False\n    # Write the metrics to the log file\n    current_time = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    with open(log_file_path, 'a') as f:", "compilation_passed": false, "time": 0.00023984909057617188, "tests_passed": false, "error": "IndentationError"}
{"code": "# Create the log directory if it doesn't exist\n    os.makedirs(log_dir, exist_ok=True)\n\n    # Construct the log file path\n    log_file_path = os.path.join(log_dir, filename)\n\n    # Open the log file in append mode and write the metrics with a timestamp\n    try:\n        with open(log_file_path, 'a') as log_file:\n            timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n            for metric, value in metrics.items():\n                log_file.write(f'{timestamp} - {metric}: {value}\\n')\n        return True\n    except Exception as e:\n        # Log an error message if an exception occurs\n        error_message = f'An error occurred: {str(e)}'\n        print(error_message)\n        return False", "compilation_passed": true, "time": 0.0018203258514404297, "tests_passed": true, "error": null}
{"code": "log_filepath = os.path.join(log_dir, filename)\n    try:\n        with open(log_filepath, 'a') as file:\n            for metric, value in metrics.items():\n                timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n                file.write(f\"{timestamp} {metric}: {value}\\n\")\n        return True\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n    return False", "compilation_passed": true, "time": 0.0017230510711669922, "tests_passed": true, "error": null}
{"code": "log_path = os.path.join(log_dir, filename)\n    try:\n        with open(log_path, 'a') as f:\n            timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n            for metric, value in metrics.items():\n                f.write(f'[{timestamp}] {metric}: {value}\\n')\n        return True\n    except Exception as e:\n        print(f'An error occurred: {e}')\n        return False", "compilation_passed": true, "time": 0.0017499923706054688, "tests_passed": true, "error": null}
{"code": "filepath = os.path.join(log_dir, filename)\n    try:\n        with open(filepath, 'a') as file:\n            timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n            for metric, value in metrics.items():\n                file.write(f\"{metric}: {value} ({timestamp})\\n\")\n        return True\n    except Exception as e:\n        print(f\"An error occurred: {e}\")\n        return False", "compilation_passed": true, "time": 0.0017330646514892578, "tests_passed": true, "error": null}
{"code": "try:\n        filepath = os.path.join(log_dir, filename)\n        with open(filepath, 'a') as f:\n            timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n            for metric, value in metrics.items():\n                f.write(f'{timestamp} | {metric}: {value}\\n')\n        return True\n    except Exception as e:\n        print(f'An error occurred: {e}')\n        return False", "compilation_passed": true, "time": 0.0017590522766113281, "tests_passed": true, "error": null}
{"code": "# Initialize the flag\n    success = False\n    try:\n        # Create a log file path with the timestamp\n        log_file_path = os.path.join(log_dir, f'{filename}_{datetime.now().strftime(\"%Y_%m_%d_%H_%M_%S\")}.log')\n\n        # Write the metrics to the log file with a timestamp\n        with open(log_file_path, 'a') as log_file:\n            for metric_name, metric_value in metrics.items():\n                log_file.write(f'{datetime.now()} - {metric_name}: {metric_value}\\n')\n\n        # Set the success flag to True\n        success = True\n    except Exception as e:\n        # Print an error message if an exception occurs\n        print(f'An error occurred: {e}')\n\n    return success", "compilation_passed": true, "time": 0.002429962158203125, "tests_passed": true, "error": null}
{"code": "log_file = os.path.join(log_dir, filename)\n    try:\n        with open(log_file, 'a', encoding='utf-8') as f:\n            for metric, value in metrics.items():\n                timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n                entry = f\"{timestamp} - {metric}: {value}\\n\"\n                f.write(entry)\n        return True\n    except OSError as e:\n        print(f\"An error occurred: {e}\")\n    except Exception as e:\n        print(f\"An unexpected error occurred: {e}\")\n    return False", "compilation_passed": true, "time": 0.0017757415771484375, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(log_dir):\n        os.makedirs(log_dir)\n    full_file_path = os.path.join(log_dir, filename)\n    try:\n        with open(full_file_path, 'a') as file:\n            for name, value in metrics.items():\n                file.write(f'{name}: {value} - {datetime.now()}\\n')\n        return True\n    except IOError as e:\n        print(f'An error occurred: {e}')\n        return False", "compilation_passed": true, "time": 0.0017211437225341797, "tests_passed": true, "error": null}
{"code": "try:\n        os.makedirs(log_dir, exist_ok=True)\n        full_path = os.path.join(log_dir, filename)\n        with open(full_path, 'a') as f:\n            for metric, value in metrics.items():\n                entry = f'{metric}: {value}'\n                timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n                f.write(f'{entry} ({timestamp})\\n')\n        return True\n    except Exception as e:\n        print(f'An error occurred: {e}')\n        return False", "compilation_passed": true, "time": 0.0017600059509277344, "tests_passed": true, "error": null}
{"code": "timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n\n    # Ensure the log directory exists\n    if not os.path.exists(log_dir):\n        os.makedirs(log_dir)\n\n    # Construct the file path\n    file_path = os.path.join(log_dir, filename)\n\n    # Attempt to write the metrics to the file\n    try:\n        with open(file_path, 'a') as file:\n            file.write(f'[{timestamp}] ')\n            for name, value in metrics.items():\n                file.write(f'{name}: {value}, ')\n            file.write('\\n')\n    except Exception as e:\n        print(f\"An error occurred: {str(e)}\")\n        return False\n\n    return True", "compilation_passed": true, "time": 0.0018639564514160156, "tests_passed": true, "error": null}
{"code": "# Create the log directory if it does not exist\n    if not os.path.exists(log_dir):\n        os.makedirs(log_dir)\n\n    # Append timestamp to each metric entry\n    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n    metrics_with_timestamp = {f'{metric} ({timestamp})': value for metric, value in metrics.items()}\n\n    # Write metrics to the file\n    try:\n        with open(os.path.join(log_dir, filename), 'a') as file:\n            for metric, value in metrics_with_timestamp.items():\n                file.write(f'{metric}: {value}\\n')\n        return True\n    except IOError:\n        print(f'An error occurred: {e}')\n    return False", "compilation_passed": true, "time": 0.0018048286437988281, "tests_passed": true, "error": null}
{"code": "timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n    try:\n        if not os.path.exists(log_dir):\n            os.makedirs(log_dir)\n        with open(os.path.join(log_dir, filename), 'a') as file:\n            for metric, value in metrics.items():\n                file.write(f\"[{timestamp}] {metric}: {value}\\n\")\n    except Exception as e:\n        print(f\"An error occurred: {str(e)}\")\n        return False\n    return True", "compilation_passed": true, "time": 0.002415180206298828, "tests_passed": true, "error": null}
{"code": "timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n    log_file = os.path.join(log_dir, filename)\n\n    try:\n        with open(log_file, 'a') as f:\n            for metric, value in metrics.items():\n                f.write(f'{timestamp}: {metric}={value}\\n')\n        return True\n    except Exception as e:\n        print(f'An error occurred: {e}')\n        return False", "compilation_passed": true, "time": 0.0017001628875732422, "tests_passed": true, "error": null}
