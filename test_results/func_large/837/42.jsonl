{"code": "# Setting the random seed\n    if random_seed:\n        np.random.seed(random_seed)\n\n    # Generating the DataFrame\n    df = pd.DataFrame(np.random.randint(5, 85, size=(n_rows, len(columns))), columns=columns)\n\n    # Scaling the selected columns\n    if scale_cols:\n        scaled_cols = columns[scale_cols[0]]\n        for i in scale_cols[1:]:\n            scaled_cols += ', ' + columns[i]\n        df[scaled_cols] = StandardScaler().fit_transform(df[scaled_cols].values)\n\n    return df", "compilation_passed": true, "time": 0.0021140575408935547, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}
{"code": "rng = np.random.default_rng(random_seed)\n    df = pd.DataFrame(columns=columns)\n    for column in df.columns:\n        df[column] = rng.integers(low=1, high=100, size=(n_rows))\n    if scale_cols:\n        scaler = StandardScaler()\n        col_names = list(df.columns)\n        scaler.fit(df.iloc[:, scale_cols])\n        scaled = scaler.transform(df.iloc[:, scale_cols])\n        df.iloc[:, scale_cols] = scaled\n        df.columns = col_names\n    return df", "compilation_passed": true, "time": 0.003777742385864258, "tests_passed": true, "error": null}
{"code": "rng = np.random.default_rng(seed=random_seed)\n    df = pd.DataFrame()\n    for col in columns:\n        df[col] = rng.integers(0, 100, n_rows)\n\n    if not scale_cols:\n        return df\n\n    to_scale = df.iloc[:, scale_cols]\n    scaler = StandardScaler()\n    df.iloc[:, scale_cols] = scaler.fit_transform(to_scale)\n\n    return df", "compilation_passed": true, "time": 0.0035436153411865234, "tests_passed": true, "error": null}
{"code": "np.random.seed(random_seed)\n    data = pd.DataFrame(np.random.randint(0, 100, size=(n_rows, len(columns))), columns=columns)\n    if scale_cols:\n        data[scale_cols] = StandardScaler().fit_transform(data[scale_cols])\n    return data", "compilation_passed": true, "time": 0.0017778873443603516, "tests_passed": false, "error": "KeyError"}
{"code": "rng = np.random.RandomState(random_seed)\n    df = pd.DataFrame(rng.randn(n_rows, len(columns)), columns=columns)\n    for col in scale_cols:\n        df.iloc[:, col] = StandardScaler().fit_transform(df.iloc[:, col].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.002624988555908203, "tests_passed": true, "error": null}
{"code": "rng = np.random.default_rng(seed=random_seed)\n    data = rng.integers(0, 100, size=(n_rows, len(columns)))\n    df = pd.DataFrame(data, columns=columns)\n    if scale_cols:\n        scaler = StandardScaler()\n        df.iloc[:, scale_cols] = scaler.fit_transform(df.iloc[:, scale_cols])\n    return df", "compilation_passed": true, "time": 0.0031969547271728516, "tests_passed": true, "error": null}
{"code": "if random_seed:\n        np.random.seed(random_seed)\n    df = pd.DataFrame(np.random.randint(low=1, high=100, size=(n_rows, len(columns))), columns=columns)\n    for col in scale_cols:\n        df.iloc[:, col] = StandardScaler().fit_transform(df.iloc[:, col].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0024950504302978516, "tests_passed": true, "error": null}
{"code": "rng = np.random.default_rng(random_seed)\n    data = rng.integers(10, 82, size=(n_rows, len(columns)))\n    df = pd.DataFrame(data, columns=columns)\n\n    if scale_cols:\n        scaler = StandardScaler()\n        scaler.fit(df.iloc[:, scale_cols].values)\n        transformed = scaler.transform(df.iloc[:, scale_cols].values)\n        df.iloc[:, scale_cols] = transformed\n\n    return df", "compilation_passed": true, "time": 0.0026161670684814453, "tests_passed": true, "error": null}
{"code": "rng = np.random.default_rng(random_seed)\n    df = pd.DataFrame(rng.integers(low=0, high=100, size=(n_rows, len(columns)), dtype=int))\n    df.columns = columns\n    if scale_cols:\n        cols_to_scale = df.columns[scale_cols]\n        df[cols_to_scale] = StandardScaler().fit_transform(df[cols_to_scale])\n    return df", "compilation_passed": true, "time": 0.0030629634857177734, "tests_passed": true, "error": null}
{"code": "rng = np.random.default_rng(seed=random_seed)\n    data = rng.integers(1, 100, (n_rows, len(columns)), dtype='int32')\n    df = pd.DataFrame(data, columns=columns)\n\n    for col_index in scale_cols:\n        # apply only to selected column\n        scaler = StandardScaler()\n        col_array = df[df.columns[col_index]].to_numpy().reshape(-1, 1)\n        col_scaled = scaler.fit_transform(col_array)\n        df[df.columns[col_index]] = col_scaled\n\n    return df", "compilation_passed": true, "time": 0.0025560855865478516, "tests_passed": true, "error": null}
{"code": "rng = np.random.RandomState(random_seed)\n    df = pd.DataFrame(np.round(rng.uniform(1, 100, (n_rows, len(columns))), 0), columns=columns)\n    if scale_cols != []:\n        scaler = StandardScaler()\n        scaler.fit(df.iloc[:, scale_cols])\n        scaled = scaler.transform(df.iloc[:, scale_cols])\n        for i in range(len(scaled)):\n            df.iloc[i, scale_cols] = scaled[i]\n    return df", "compilation_passed": true, "time": 0.0033478736877441406, "tests_passed": true, "error": null}
{"code": "rng = np.random.default_rng(seed=random_seed)\n    data = rng.integers(5, 100, (n_rows, len(columns)))\n\n    df = pd.DataFrame(data, columns=columns)\n\n    scaler = StandardScaler()\n\n    for i in scale_cols:\n        df[columns[i]] = scaler.fit_transform(df[columns[i]].values.reshape(-1, 1))\n\n    return df", "compilation_passed": true, "time": 0.002561807632446289, "tests_passed": true, "error": null}
{"code": "# check for integer number of rows\n    if not isinstance(n_rows, int):\n        raise ValueError(\"The value of n_rows has to be an integer.\")\n\n    # check for correct index values of scale columns\n    if not all(isinstance(idx, int) for idx in scale_cols):\n        raise ValueError(\"All indices of scale_cols have to be int values.\")\n    if not all(0 <= idx < len(columns) for idx in scale_cols):\n        raise ValueError(\n            f\"All indices of scale_cols have to be in the range [0, {len(columns)}).\")\n\n    # create random array of shape (n_rows, len(columns))\n    rng = np.random.default_rng(random_seed)\n    data = rng.integers(low=1, high=200, size=(n_rows, len(columns)))\n    df = pd.DataFrame(data, columns=columns)\n\n    # scale the columns at scale_cols with sklearn StandardScaler\n    scaled_cols = df.iloc[:,", "compilation_passed": false, "time": 0.0002560615539550781, "tests_passed": false, "error": "SyntaxError"}
{"code": "if len(scale_cols) > 0:\n        # init rng\n        rng = np.random.RandomState(random_seed)\n        # generate random dataframe\n        df = pd.DataFrame(rng.randn(n_rows, len(columns)), columns=columns)\n        # scale dataframe at the provided column index\n        scaler = StandardScaler()\n        scaler.fit(df[columns[scale_cols[0]]])\n        for i in range(len(scale_cols)):\n            df[columns[scale_cols[i]]] = scaler.transform(df[columns[scale_cols[i]]])\n\n    else:\n        # init rng\n        rng = np.random.RandomState(random_seed)\n        # generate random dataframe\n        df = pd.DataFrame(rng.randn(n_rows, len(columns)), columns=columns)\n\n    return df", "compilation_passed": true, "time": 0.0019342899322509766, "tests_passed": false, "error": "ValueError"}
{"code": "if len(columns) < n_rows:\n        raise ValueError(f\"Length of the list 'columns' cannot be less then the number of rows: {len(columns)} < {n_rows}\")\n    elif len(columns) == n_rows:\n        pass\n    else:\n        columns = columns[:n_rows]\n\n    if random_seed == None:\n        rng = np.random\n    elif not isinstance(random_seed, int):\n        raise TypeError(f\"Random seed should be an int, but recieved {random_seed}\")\n    else:\n        rng = np.random.RandomState(random_seed)\n\n    data = rng.randint(0, 100, (n_rows, n_rows))\n    df = pd.DataFrame(data, columns=columns)\n\n    if not len(scale_cols):\n        return df\n\n    columns_to_scale = [columns[i] for i in scale_cols]\n    scaler = StandardScaler()\n    df[columns_to_scale] = scaler.fit_transform(df[columns", "compilation_passed": false, "time": 0.0002918243408203125, "tests_passed": false, "error": "SyntaxError"}
{"code": "rng = np.random.default_rng(random_seed)\n    df = pd.DataFrame(columns=columns)\n\n    for column in df.columns:\n        df[column] = rng.random(n_rows) * 100\n\n    if scale_cols:\n        scaler = StandardScaler()\n        scaler.fit(df.iloc[:, scale_cols])\n        df.iloc[:, scale_cols] = scaler.transform(df.iloc[:, scale_cols])\n\n    return df", "compilation_passed": true, "time": 0.003487110137939453, "tests_passed": true, "error": null}
{"code": "# Define a rng. Set the seed if provided\n    rng = np.random.default_rng(random_seed)\n\n    # Generate random data and add a row with all the maximum values\n    df = pd.DataFrame(rng.integers(low=0, high=100, size=(n_rows, len(columns))), columns=columns)\n    df.loc[len(df)] = df.max()\n\n    # If no columns are provided, scale no column\n    if not scale_cols:\n        return df\n\n    # Otherwise, scale the selected columns with StandardScaler\n    scaler = StandardScaler()\n    df.iloc[:, scale_cols] = scaler.fit_transform(df.iloc[:, scale_cols])\n    return df", "compilation_passed": true, "time": 0.002696990966796875, "tests_passed": true, "error": null}
{"code": "# initialize RNG\n    rng = np.random.default_rng(seed=random_seed)\n\n    # generate the values in the desired columns\n    values = rng.integers(low=0, high=100, size=(len(columns), n_rows))\n\n    # convert to DataFrame\n    df = pd.DataFrame(data=values.T, columns=columns)\n\n    # scale the selected columns\n    if len(scale_cols) > 0:\n        cols_to_scale = columns[min(scale_cols):max(scale_cols)+1]\n        scaler = StandardScaler()\n        scaler.fit(df[cols_to_scale])\n        df[cols_to_scale] = scaler.transform(df[cols_to_scale])\n\n    return df", "compilation_passed": true, "time": 0.0032722949981689453, "tests_passed": true, "error": null}
{"code": "rng = np.random.default_rng(random_seed)\n    # generate a random DataFrame with the given number of rows and columns\n    df = pd.DataFrame(rng.integers(low=0, high=100, size=(n_rows, len(columns))), columns=columns)\n    if scale_cols:\n        # define the scaling algorithm\n        scaler = StandardScaler()\n        # create a DataFrame that contains the scaling columns\n        scale_columns_df = df.iloc[:, scale_cols]\n        # fit and apply the scaler to the scaling columns DataFrame\n        scaled_columns = scaler.fit_transform(scale_columns_df.values)\n        # convert the scaled array to a DataFrame\n        scaled_columns_df = pd.DataFrame(scaled_columns, columns=scale_columns_df.columns)\n        # replace the scaling columns with their scaled values in the original DataFrame\n        df.iloc[:, scale_cols] = scaled_columns_df.values\n    return df", "compilation_passed": true, "time": 0.0026819705963134766, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(np.random.RandomState(random_seed).randint(low=1, high=100, size=(n_rows, len(columns))), columns=columns)\n    if scale_cols:\n        df.iloc[:, scale_cols] = StandardScaler().fit_transform(df.iloc[:, scale_cols])\n    return df", "compilation_passed": true, "time": 0.003113269805908203, "tests_passed": true, "error": null}
{"code": "np.random.seed(random_seed)\n    data = {}\n\n    for col in columns:\n        if col not in [columns[idx] for idx in scale_cols]:\n            data[col] = np.random.randint(0, 100, n_rows)\n    for i in range(len(scale_cols)):\n        col_name = columns[scale_cols[i]]\n        values = np.random.randint(0, 100, n_rows).astype(float)\n        data[col_name] = StandardScaler().fit_transform(values.reshape(-1, 1))\n\n    return pd.DataFrame(data)", "compilation_passed": true, "time": 0.001875162124633789, "tests_passed": false, "error": "ValueError"}
{"code": "# if no seed is given use random one\n    if not random_seed:\n        random_seed = int.from_bytes(os.urandom(4), byteorder=\"big\")\n\n    rng = np.random.default_rng(random_seed)\n    df = pd.DataFrame({col: rng.integers(0, 100, size=n_rows) for col in columns})\n\n    if scale_cols:\n        for i in scale_cols:\n            std_scaler = StandardScaler()\n            scaled = std_scaler.fit_transform(df[[columns[i]]]).flatten()\n            df[columns[i]] = scaled\n\n    return df", "compilation_passed": true, "time": 0.0031669139862060547, "tests_passed": true, "error": null}
{"code": "if random_seed is not None:\n        np.random.seed(random_seed)\n    df = pd.DataFrame(np.random.randint(low=0, high=100, size=(n_rows, len(columns))), columns=columns)\n    if scale_cols:\n        scaled_values = StandardScaler().fit_transform(df.iloc[:,scale_cols].values)\n        df.iloc[:,scale_cols] = scaled_values\n    return df", "compilation_passed": true, "time": 0.005606889724731445, "tests_passed": true, "error": null}
{"code": "np.random.seed(random_seed)\n    df = pd.DataFrame(np.random.randint(0, 100, size=(n_rows, len(columns))), columns=columns)\n\n    for col_idx in scale_cols:\n        scaler = StandardScaler()\n        df.iloc[:, col_idx] = scaler.fit_transform(df.iloc[:, col_idx].values.reshape(-1, 1)).flatten()\n\n    return df", "compilation_passed": true, "time": 0.006611824035644531, "tests_passed": true, "error": null}
{"code": "rng = np.random.default_rng(random_seed)\n    df = pd.DataFrame(data=rng.integers(low=0, high=100, size=(n_rows, len(columns))), columns=columns)\n    scaler = StandardScaler()\n\n    if scale_cols:\n        df.iloc[:, scale_cols] = scaler.fit_transform(df.iloc[:, scale_cols])\n\n    return df", "compilation_passed": true, "time": 0.0030150413513183594, "tests_passed": true, "error": null}
{"code": "rng = np.random.default_rng(random_seed)\n    df = pd.DataFrame(rng.integers(20, 80, (n_rows, len(columns))), columns=columns)\n    for i in scale_cols:\n        df[i] = StandardScaler().fit_transform(df[i].to_numpy().reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0016219615936279297, "tests_passed": false, "error": "KeyError"}
{"code": "assert isinstance(n_rows, int), \"n_rows must be an integer\"\n    assert n_rows >= 1, \"n_rows must be a positive integer\"\n\n    assert isinstance(scale_cols, list), \"scale_cols must be a list\"\n\n    assert isinstance(columns, list), \"columns must be a list\"\n    assert all(isinstance(col, str) for col in columns), \"All elements in columns must be strings\"\n    assert len(columns) >= 1, \"columns must contain at least one element\"\n\n    assert isinstance(random_seed, int) or random_seed is None, \"random_seed must be an integer or None\"\n\n    np.random.seed(random_seed)\n    rng = np.random.default_rng(random_seed)\n\n    df = pd.DataFrame(rng.integers(100, size=(n_rows, len(columns))), columns=columns)\n\n    if scale_cols:\n        scaler = StandardScaler()\n        df.iloc[:, scale_cols] = scaler.fit_", "compilation_passed": true, "time": 0.00152587890625, "tests_passed": false, "error": "AttributeError"}
{"code": "if random_seed is None:\n        random_seed = np.random.randint(1,100)\n    rng = np.random.default_rng(random_seed)\n    df = pd.DataFrame({col: rng.integers(1, 100, n_rows) for col in columns})\n    if scale_cols:\n        scale_columns = [columns[i] for i in scale_cols]\n        scaler = StandardScaler()\n        scaler.fit(df[scale_columns])\n        df[scale_columns] = scaler.transform(df[scale_columns])\n    return df", "compilation_passed": true, "time": 0.003398895263671875, "tests_passed": true, "error": null}
{"code": "rng = np.random.default_rng(seed=random_seed)\n\n    # Generate data for all columns with normal distribution.\n    data = rng.normal(0, 1, (n_rows, len(columns)))\n\n    # Instantiate the StandardScaler.\n    scaler = StandardScaler()\n    # Scale selected columns.\n    data[:, scale_cols] = scaler.fit_transform(data[:, scale_cols])\n\n    return pd.DataFrame(data, columns=columns)", "compilation_passed": true, "time": 0.002457141876220703, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(np.random.RandomState(random_seed).rand(n_rows, len(columns)))\n    df.columns = columns\n    if scale_cols:\n        scaler = StandardScaler()\n        df.iloc[:, scale_cols] = scaler.fit_transform(df.iloc[:, scale_cols])\n    return df", "compilation_passed": true, "time": 0.0030059814453125, "tests_passed": true, "error": null}
