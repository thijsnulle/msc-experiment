{"code": "try:\n        # Get a list of files in the source directory that match the regular expression pattern\n        files = [f for f in os.listdir(source_dir) if re.match(file_pattern, f) is not None]\n        # Create the target directory if it does not exist\n        if not os.path.exists(target_dir):\n            os.makedirs(target_dir)\n        # Move the matching files from the source directory to the target directory\n        for file in files:\n            shutil.move(os.path.join(source_dir, file), os.path.join(target_dir, file))\n        # Return the number of files moved\n        return len(files)\n    except Exception as e:\n        # Catch any exceptions that may occur during file processing and return -1\n        print(f\"Error: {e}\")\n        return -1", "compilation_passed": true, "time": 0.0103759765625, "tests_passed": true, "error": null}
{"code": "file_pattern = re.compile(file_pattern)\n    config_file_path = os.path.join(target_dir, 'config.cfg')\n    num_moved_files = 0\n    for filename in os.listdir(source_dir):\n        if file_pattern.match(filename):\n            src = os.path.join(source_dir, filename)\n            dst = os.path.join(target_dir, filename)\n            shutil.copy(src, dst)\n            num_moved_files += 1\n\n    # Save the file path of the configuration file\n    with open(config_file_path, 'w') as config_file:\n        config_file.write(f\"Created the config file:\\n{config_file_path}\")\n\n    return num_moved_files", "compilation_passed": true, "time": 0.003895998001098633, "tests_passed": true, "error": null}
{"code": "files_in_source_dir = os.listdir(source_dir)\n    files_in_target_dir = os.listdir(target_dir)\n\n    # Find files in source dir that do not exist in target dir\n    # and match the file_pattern regular expression\n    files_to_move = []\n    for filename in files_in_source_dir:\n        if re.search(file_pattern, filename) and filename not in files_in_target_dir:\n            files_to_move.append(filename)\n\n    # Move the files that meet the criteria to the target directory\n    moved_count = 0\n    for filename in files_to_move:\n        source_file = os.path.join(source_dir, filename)\n        target_file = os.path.join(target_dir, filename)\n        shutil.move(source_file, target_file)\n        moved_count += 1\n\n    return moved_count", "compilation_passed": true, "time": 0.008217096328735352, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "source_dir = r'C:\\SomeDir\\\\'\n    target_dir = r'C:\\SomeDir2\\\\'\n    file_pattern = r'\\b[A-Za-z0-9]+\\.(txt|doc|docx)\\b'\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n\n    files = [f for f in os.listdir(source_dir) if re.match(file_pattern, f)]\n    for file in files:\n        src = os.path.join(source_dir, file)\n        dst = os.path.join(target_dir, file)\n        shutil.move(src, dst)\n\n    print(f'Moved {len(files)} files to {target_dir}')\n    return target_dir", "compilation_passed": true, "time": 0.002905130386352539, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "file_count = 0\n    if not os.path.exists(source_dir):\n        raise Exception(f\"The directory {source_dir} does not exist.\")\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    pattern = re.compile(file_pattern)\n    for root, dirs, files in os.walk(source_dir):\n        for file in files:\n            if pattern.search(file):\n                src_path = os.path.join(root, file)\n                shutil.move(src_path, target_dir)\n                file_count += 1\n\n    return file_count", "compilation_passed": true, "time": 0.01093912124633789, "tests_passed": true, "error": null}
{"code": "# \u4f7f\u7528re\u6a21\u5757\u8fdb\u884c\u6587\u4ef6\u540d\u5339\u914d\n    pattern = file_pattern\n    file_list = [file for file in os.listdir(source_dir) if re.search(pattern, file)]\n\n    # \u79fb\u52a8\u5339\u914d\u7684\u6587\u4ef6\u5230\u76ee\u6807\u76ee\u5f55\n    for filename in file_list:\n        src = os.path.join(source_dir, filename)\n        dst = os.path.join(target_dir, filename)\n        shutil.move(src, dst)\n\n    # \u8fd4\u56de\u8def\u5f84\u5230\u914d\u7f6e\u6587\u4ef6\n    config_file = os.path.join(target_dir, \"config.txt\")\n    with open(config_file, \"w\") as f:\n        for filename in file_list:\n            f.write(\"{}\\n\".format(os.path.join(target_dir, filename)))\n\n    # \u8fd4\u56de\u5904\u7406\u540e\u7684\u6587\u4ef6\u5217\u8868\n    return config_file", "compilation_passed": true, "time": 0.00477290153503418, "tests_passed": true, "error": null}
{"code": "# initialize a list to store the matched files\n    files_to_move = []\n\n    # walk through the directory tree and look for files that match the pattern\n    for root, dirs, files in os.walk(source_dir):\n        for file in files:\n            if re.match(file_pattern, file):\n                files_to_move.append(os.path.join(root, file))\n\n    # move the files to the target directory\n    for file in files_to_move:\n        shutil.move(file, target_dir)\n\n    # return the number of moved files\n    return len(files_to_move)", "compilation_passed": true, "time": 0.008610010147094727, "tests_passed": false, "error": "NotADirectoryError"}
{"code": "# create directory if not exists\n    if not os.path.exists(target_dir):\n        os.mkdir(target_dir)\n\n    # count files that was moved\n    cnt = 0\n\n    # iterate directory\n    for filename in os.listdir(source_dir):\n        file_path = os.path.join(source_dir, filename)\n\n        # if filepath is a file and match the pattern\n        if os.path.isfile(file_path) and re.match(file_pattern, filename):\n            shutil.copy(file_path, target_dir)\n            cnt += 1\n\n    return cnt", "compilation_passed": true, "time": 0.003983736038208008, "tests_passed": true, "error": null}
{"code": "files_to_move = []\n    for root, _, filenames in os.walk(source_dir):\n        for filename in filenames:\n            if re.match(file_pattern, filename):\n                files_to_move.append(os.path.join(root, filename))\n\n    # Move files to the target directory\n    for file in files_to_move:\n        shutil.copy2(file, target_dir)\n\n    config_file = os.path.join(target_dir, 'config.ini')\n    with open(config_file, 'w') as f:\n        f.write('Moved Files:\\n')\n        for file in files_to_move:\n            f.write(file + '\\n')\n\n    return config_file", "compilation_passed": true, "time": 0.0038809776306152344, "tests_passed": true, "error": null}
{"code": "# Define a regular expression pattern for file names that should be moved.\n    pattern = re.compile(file_pattern)\n\n    # Create the target directory if it doesn't exist.\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n\n    # Find all files in the source directory that match the pattern and move them to the target directory.\n    moved_count = 0  # Initialize a counter to keep track of the number of files moved.\n    for filename in os.listdir(source_dir):\n        if pattern.match(filename):\n            shutil.move(os.path.join(source_dir, filename), target_dir)\n            moved_count += 1  # Increment the counter after each file move.\n\n    # Return the number of files moved.\n    return moved_count", "compilation_passed": true, "time": 0.012566804885864258, "tests_passed": true, "error": null}
{"code": "file_pattern = re.compile(file_pattern)\n    files = [file for file in os.listdir(source_dir) if file_pattern.search(file)]\n    for file in files:\n        try:\n            shutil.copy2(os.path.join(source_dir, file), target_dir)\n            print(f'{file} was successfully copied to {target_dir}')\n        except Exception as e:\n            print(f'Error: {e}')\n    return len(files)", "compilation_passed": true, "time": 0.003862142562866211, "tests_passed": true, "error": null}
{"code": "file_list = []\n\n    for root, dirs, files in os.walk(source_dir):\n        for file in files:\n            if re.search(file_pattern, file):\n                file_list.append(os.path.join(root, file))\n\n    for file_path in file_list:\n        shutil.copy(file_path, target_dir)\n\n    return len(file_list)", "compilation_passed": true, "time": 0.0035920143127441406, "tests_passed": true, "error": null}
{"code": "count = 0\n    for dirpath, dirnames, filenames in os.walk(source_dir):\n        for filename in filenames:\n            if re.fullmatch(file_pattern, filename):\n                count += 1\n                file_path = os.path.join(dirpath, filename)\n                shutil.move(file_path, target_dir)\n    return count", "compilation_passed": true, "time": 0.008300065994262695, "tests_passed": false, "error": "NotADirectoryError"}
{"code": "files = os.listdir(source_dir)\n    files = list(filter(lambda x: re.match(file_pattern, x), files))\n\n    for file in files:\n        source_path = os.path.join(source_dir, file)\n        target_path = os.path.join(target_dir, file)\n\n        try:\n            shutil.copy2(source_path, target_path)\n            print(f\"File {file} has been copied to {target_path} successfully.\")\n\n        except:\n            print(f\"There was an error copying the file {file} to {target_path}.\")\n\n    return len(files)", "compilation_passed": true, "time": 0.0038149356842041016, "tests_passed": true, "error": null}
{"code": "file_list = []\n\n    try:\n        for item in os.listdir(source_dir):\n            if re.match(file_pattern, item):\n                file_list.append(item)\n\n        for file_name in file_list:\n            shutil.move(os.path.join(source_dir, file_name), os.path.join(target_dir, file_name))\n\n        return len(file_list)\n    except Exception as error:\n        return error", "compilation_passed": true, "time": 0.00783991813659668, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if not os.path.exists(source_dir):\n        print('No such directory')\n        return None\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n\n    file_names = os.listdir(source_dir)\n    file_paths = [os.path.join(source_dir, file_name) for file_name in file_names]\n\n    # find files matching the file pattern\n    files_to_move = []\n    for file_path in file_paths:\n        if os.path.isfile(file_path) and re.match(file_pattern, file_path):\n            files_to_move.append(file_path)\n\n    # move files to target directory\n    for file_path in files_to_move:\n        shutil.move(file_path, target_dir)\n        print(f'{os.path.basename(file_path)} is moved to {target_dir}')\n\n    config_file = os.path.join(target_dir, 'config.json')\n\n    with", "compilation_passed": false, "time": 0.00025391578674316406, "tests_passed": false, "error": "SyntaxError"}
{"code": "config_file_path = ''\n    # Initialize a dictionary to keep track of the files that have been copied\n    copied_files = {}\n    # Iterate over the contents of the source directory\n    for file_name in os.listdir(source_dir):\n        # Check if the file name matches the regular expression pattern\n        if re.match(file_pattern, file_name):\n            # Construct the path to the file\n            file_path = os.path.join(source_dir, file_name)\n            # Get the extension of the file\n            extension = os.path.splitext(file_name)[1]\n            # Generate a new file name using the current date and time\n            new_file_name = 'new_' + os.path.splitext(file_name)[0] + '_' + time.strftime('%Y%m%d%H%M%S') + extension\n            # Construct the path to the new file name\n            new_file_path = os.path.join(target_dir, new_file_name)\n            # Copy the file to the target directory\n            sh", "compilation_passed": true, "time": 0.0026869773864746094, "tests_passed": false, "error": "NameError"}
{"code": "if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n\n    # 1. Get all filepaths in the source directory\n    filepaths = [os.path.join(source_dir, f) for f in os.listdir(source_dir)]\n\n    # 2. Filter to include only txt or doc files with alphanumeric filenames\n    filtered_filepaths = [fp for fp in filepaths if re.match(file_pattern, fp)]\n\n    # 3. Create a configuration file with a list of file paths\n    with open('config.txt', 'w') as f:\n        for fp in filtered_filepaths:\n            f.write(f'{fp}\\n')\n\n    # 4. Move the files to the target directory and rename them\n    for fp in filtered_filepaths:\n        filename = os.path.basename(fp)\n        new_filename = ''.join(filter(str.isalnum, filename)) + '.txt'\n        shutil.move(fp, os.path.join(target", "compilation_passed": false, "time": 0.0002307891845703125, "tests_passed": false, "error": "SyntaxError"}
{"code": "files = os.listdir(source_dir)\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    # print(f\"{source_dir}, {target_dir}\")\n    for f in files:\n        full_path_file = os.path.join(source_dir, f)\n        if os.path.isfile(full_path_file):\n            # print(f)\n            if re.search(file_pattern, f):\n                try:\n                    shutil.copy(full_path_file, target_dir)\n                    print(f\"file: '{full_path_file}' move to: '{target_dir}'\")\n                except Exception as e:\n                    print(str(e))\n    # shutil.move(source_dir, target_dir)", "compilation_passed": true, "time": 0.004211902618408203, "tests_passed": true, "error": null}
{"code": "# Check if the source directory exists.\n    if not os.path.exists(source_dir):\n        raise ValueError('Source directory does not exist: {}'.format(source_dir))\n    # Check if the target directory exists.\n    if not os.path.exists(target_dir):\n        raise ValueError('Target directory does not exist: {}'.format(target_dir))\n    # Check if the file pattern is valid.\n    try:\n        re.compile(file_pattern)\n    except re.error:\n        raise ValueError('Invalid file pattern: {}'.format(file_pattern))\n\n    # Create a list of all files in the source directory.\n    files = os.listdir(source_dir)\n    # Initialize a counter to keep track of the number of files that were moved.\n    count = 0\n    # Loop through each file in the source directory.\n    for file in files:\n        # Check if the file matches the file pattern.\n        if re.match(file_pattern, file):\n            # If the file matches, move it to the target directory.\n            shutil.move", "compilation_passed": true, "time": 0.0027570724487304688, "tests_passed": true, "error": null}
{"code": "# find files in the source directory that match the pattern\n    # and create a list of their paths\n    files = []\n    for root, dirs, file_list in os.walk(source_dir):\n        for name in file_list:\n            if re.match(file_pattern, name):\n                files.append(os.path.join(root, name))\n\n    # move the files from the source to the target directory and remove the original file\n    for file in files:\n        shutil.move(file, target_dir)\n\n    # write the list of files to the configuration file\n    config_file = os.path.join(target_dir, 'config.txt')\n    with open(config_file, 'w') as f:\n        for file in files:\n            f.write(file + '\\n')\n    return len(files)", "compilation_passed": true, "time": 0.008871078491210938, "tests_passed": false, "error": "NotADirectoryError"}
{"code": "if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n    file_list = []\n    for dirpath, dirnames, filenames in os.walk(source_dir):\n        for filename in filenames:\n            if re.match(file_pattern, filename):\n                file_list.append(os.path.join(dirpath, filename))\n    if len(file_list) > 0:\n        for file in file_list:\n            shutil.copy2(file, target_dir)\n    return 'Files have been copied to the specified folder'", "compilation_passed": true, "time": 0.0038428306579589844, "tests_passed": true, "error": null}
{"code": "# Create a list of all files in the source directory\n    all_files = os.listdir(source_dir)\n    # Filter the list of all files to only include those that match the regular expression\n    matching_files = [file for file in all_files if re.match(file_pattern, file)]\n    # Move each matching file to the target directory\n    for file in matching_files:\n        src = os.path.join(source_dir, file)\n        dest = os.path.join(target_dir, file)\n        shutil.move(src, dest)\n    # Return the number of files that were moved\n    return len(matching_files)", "compilation_passed": true, "time": 0.008238077163696289, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# \u041f\u043e\u0434\u0441\u0447\u0451\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0444\u0430\u0439\u043b\u043e\u0432, \u0443\u0434\u043e\u0432\u043b\u0435\u0442\u0432\u043e\u0440\u044f\u044e\u0449\u0438\u0445 \u0448\u0430\u0431\u043b\u043e\u043d\u0443\n    file_counter = 0\n    # \u0421\u043e\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0438\u043c\u0435\u043d \u0444\u0430\u0439\u043b\u043e\u0432, \u0443\u0434\u043e\u0432\u043b\u0435\u0442\u0432\u043e\u0440\u044f\u044e\u0449\u0438\u0445 \u0448\u0430\u0431\u043b\u043e\u043d\u0443\n    list_files = [file for file in os.listdir(source_dir) if re.search(file_pattern, file) != None]\n    # \u041f\u0435\u0440\u0435\u0431\u043e\u0440 \u0444\u0430\u0439\u043b\u043e\u0432 \u043f\u043e \u0441\u043f\u0438\u0441\u043a\u0443\n    for file in list_files:\n        # \u0424\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438\u043c\u0435\u043d\u0438 \u0444\u0430\u0439\u043b\u0430 \u0434\u043b\u044f \u043f\u0435\u0440\u0435\u043d\u043e\u0441\u0430\n        source_path = os.path.join(source_dir, file)\n        target_path = os.path.join(target_dir, file)\n        # \u041f\u0435\u0440\u0435\u043d\u043e\u0441 \u0444\u0430\u0439\u043b\u043e\u0432\n        shutil.move(source_path, target_path)\n        file_counter += 1\n    print('Number of moved files: {}'.format(file_counter))\n    return 1", "compilation_passed": true, "time": 0.004399776458740234, "tests_passed": true, "error": null}
{"code": "# Use regular expression to match filename pattern\n    matching_files = []\n    for filename in os.listdir(source_dir):\n        if re.search(file_pattern, filename) is not None:\n            matching_files.append(os.path.join(source_dir, filename))\n\n    # Move the matching files to the target directory\n    num_files_moved = 0\n    for source_file in matching_files:\n        target_file = os.path.join(target_dir, os.path.basename(source_file))\n        shutil.move(source_file, target_file)\n        num_files_moved += 1\n\n    return num_files_moved", "compilation_passed": true, "time": 0.009243965148925781, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Initialize variables\n    files_to_move = []\n\n    # Iterate through all files in the directory\n    for file in os.listdir(source_dir):\n        # Check if the file matches the file_pattern\n        if re.match(file_pattern, file):\n            # Add the file to the list of files to move\n            files_to_move.append(file)\n\n    # Move files to the target directory\n    for file in files_to_move:\n        source_path = os.path.join(source_dir, file)\n        target_path = os.path.join(target_dir, file)\n        shutil.move(source_path, target_path)\n\n    # Print the number of files moved\n    print(f\"{len(files_to_move)} file(s) moved from {source_dir} to {target_dir}\")\n\n    # Return the path to the created configuration file\n    return len(files_to_move)", "compilation_passed": true, "time": 0.008603096008300781, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Iterate through all files in the source directory. If the filename matches the\n    # regular expression pattern and the extension is in the list of allowed extensions,\n    # move the file to the target directory.\n    count = 0\n    for filename in os.listdir(source_dir):\n        if re.match(file_pattern, filename):\n            # Move the file to the target directory, overwriting any existing file with the same name.\n            shutil.move(os.path.join(source_dir, filename),\n                        os.path.join(target_dir, filename))\n            count += 1\n\n    # Return the number of moved files.\n    return count", "compilation_passed": true, "time": 0.007901191711425781, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "file_list = []\n    config_file_path = f\"{os.path.basename(source_dir)}_task_config.txt\"\n\n    for root, dirs, files in os.walk(source_dir):\n        for file in files:\n            if re.match(file_pattern, file):\n                file_list.append(os.path.join(root, file))\n    if not os.path.exists(target_dir):\n        os.makedirs(target_dir)\n\n    for file_path in file_list:\n        shutil.move(file_path, target_dir)\n\n    with open(config_file_path, \"w\") as config_file:\n        config_file.write(f\"{len(file_list)} files were moved to {target_dir}\\n\")\n        config_file.write(f\"The configuration file was created at {os.path.abspath(config_file_path)}\")\n\n    return config_file_path", "compilation_passed": true, "time": 0.0029649734497070312, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "files = []\n\n    try:\n        if os.path.exists(source_dir):\n            print('Source directory exists.')\n            for dirpath, dirnames, filenames in os.walk(source_dir):\n                for filename in filenames:\n                    if re.match(file_pattern, filename):\n                        print(f'{dirpath}\\\\{filename}')\n                        shutil.move(f'{dirpath}\\\\{filename}', f'{target_dir}')\n\n    except Exception as err:\n        print(f'An error occurred: {err}')\n    # finally:\n        return True", "compilation_passed": true, "time": 0.0025811195373535156, "tests_passed": true, "error": null}
{"code": "# create empty dict for files to move\n    files_to_move = []\n    # walk through all dirs starting from source_dir\n    for root, dirs, files in os.walk(source_dir):\n        # iterate through all files in the dir\n        for file in files:\n            # check if file match the pattern\n            if re.match(file_pattern, file):\n                # if yes, append to the dict\n                files_to_move.append(os.path.join(root, file))\n\n    # move all files to the target_dir\n    for file in files_to_move:\n        shutil.move(file, target_dir)\n\n    return files_to_move", "compilation_passed": true, "time": 0.004375934600830078, "tests_passed": true, "error": null}
