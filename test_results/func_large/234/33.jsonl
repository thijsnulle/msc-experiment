{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"input is not a dataframe\")\n\n    df = df.loc[~df[\"Name\"].duplicated(keep=False)]\n    slope, intercept, r, p, std_err = stats.linregress(df[\"age\"], df[\"score\"])\n\n    def run(x):\n        return slope * x + intercept\n\n    model = list(map(run, df[\"age\"]))\n    plt.plot(df[\"age\"], model, \"o\")\n    plt.plot(df[\"age\"], model)\n\n    plt.title(\"Linear Regression\")\n    plt.xlabel(\"Age\")\n    plt.ylabel(\"Score\")\n\n    return plt, plt.axes()", "compilation_passed": true, "time": 0.0018382072448730469, "tests_passed": false, "error": "KeyError"}
{"code": "# Check if the input is a DataFrame\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df must be a pandas DataFrame\")\n\n    # Check if the data has the necessary columns\n    if \"Age\" not in df.columns or \"Score\" not in df.columns or \"Name\" not in df.columns:\n        raise ValueError(\"DataFrame must have the columns 'Age', 'Score', and 'Name'\")\n\n    # Check if the data has duplicate names\n    if df.duplicated(subset=\"Name\", keep=False).any():\n        raise ValueError(\"DataFrame must not have duplicate names\")\n\n    # Use a linear regression to calculate the line of best fit\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df[\"Age\"], df[\"Score\"])\n    x = df[\"Age\"]\n    y = df[\"Score\"]\n    plt.scatter(x, y)\n    plt.plot(x, slope * x + intercept)\n    plt.title", "compilation_passed": true, "time": 0.001271963119506836, "tests_passed": false, "error": "ValueError"}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df must be a DataFrame\")\n\n    # Filtering dataframe rows with duplicate names\n    df = df[~df['Name'].duplicated(keep=False)]\n\n    # Linear Regression\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df[\"Age\"], df[\"Score\"])\n    line = slope * df[\"Age\"] + intercept\n    plt.plot(df[\"Age\"], line, color='red', linewidth=2)\n    plt.title(\"Linear Regression\")\n    plt.xlabel(\"Age\")\n    plt.ylabel(\"Score\")\n    plt.scatter(df[\"Age\"], df[\"Score\"], color='blue')\n    plt.grid()\n    return plt, plt.axes()", "compilation_passed": true, "time": 0.00541377067565918, "tests_passed": true, "error": null}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input argument must be a pandas DataFrame\")\n\n    # Remove rows with duplicate names\n    df = df.drop_duplicates(subset='Name')\n\n    # Extract the age and score columns\n    x = df['Age']\n    y = df['Score']\n\n    # Perform a linear regression\n    slope, intercept, r, p, std_err = stats.linregress(x, y)\n\n    # Define the linear function to model\n    def lin_func(x):\n        return slope * x + intercept\n\n    # Apply the function on the age column\n    model = list(map(lin_func, x))\n\n    # Create the scatter plot\n    plt.scatter(x, y)\n    plt.plot(x, model, color='red')\n    plt.title('Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n\n    return plt, ax", "compilation_passed": true, "time": 0.002644062042236328, "tests_passed": false, "error": "NameError"}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df must be a DataFrame\")\n    df = df.drop_duplicates(subset=['Name'])\n    x = df['Age']\n    y = df['Score']\n\n    # Perform linear regression\n    slope, intercept, r, p, std_err = stats.linregress(x, y)\n\n    # Define the regression line\n    def regress_line(x):\n        return slope * x + intercept\n\n    # Create the regression line\n    line = x.map(regress_line)\n\n    # Create the plot\n    fig, ax = plt.subplots()\n\n    ax.plot(x, y, 'o')\n    ax.plot(x, line)\n\n    ax.set_title('Linear Regression')\n    ax.set_xlabel('Age')\n    ax.set_ylabel('Score')\n\n    return plt, ax", "compilation_passed": true, "time": 0.017738819122314453, "tests_passed": true, "error": null}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"input is not DataFrame\")\n    df = df.set_index(\"Name\").drop_duplicates(\"Age\")\n    slope, intercept, r, p, std_err = stats.linregress(df[\"Age\"], df[\"Score\"])\n\n    def run(x):\n        return slope * x + intercept\n\n    run_model = list(map(run, df[\"Age\"]))\n    plt.plot(df[\"Age\"], run_model)\n    plt.title(\"Linear Regression\")\n    plt.xlabel(\"Age\")\n    plt.ylabel(\"Score\")\n    ax = plt.scatter(df[\"Age\"], df[\"Score\"])\n\n    return plt, ax", "compilation_passed": true, "time": 0.0027980804443359375, "tests_passed": true, "error": null}
{"code": "# check if the input is a DataFrame\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input should be a DataFrame\")\n    # remove duplicated names\n    df = df[~df.Name.duplicated()]\n\n    # get the X and Y variables\n    X = df['Age']\n    Y = df['Score']\n    # create a scatter plot\n    plt.scatter(X, Y)\n\n    # Perform a linear regression between X and Y\n    slope, intercept, r, p, std_err = stats.linregress(X, Y)\n    # add the regression line to the plot\n    def myfunc(x):\n        return slope * x + intercept\n    model = list(map(myfunc, X))\n    plt.plot(X, model)\n    # set plot title, xlabel and ylabel\n    plt.title(\"Linear Regression\")\n    plt.xlabel(\"Age\")\n    plt.ylabel(\"Score\")\n\n    # return the figure and axes objects\n    return plt, plt.gca()", "compilation_passed": true, "time": 0.0023338794708251953, "tests_passed": true, "error": null}
{"code": "# Check if input df is a DataFrame\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame\")\n\n    # Remove rows with duplicate names\n    df = df.drop_duplicates(subset=['Name'], keep='last')\n\n    # Perform linear regression\n    X = df['Age'].values.reshape(-1, 1)\n    y = df['Score'].values.reshape(-1, 1)\n    slope, intercept, r, p, std_err = stats.linregress(X.flatten(), y.flatten())\n    regression_line = intercept + slope * X\n\n    # Create plot\n    plt.plot(X, regression_line, label='Regression line')\n    plt.scatter(X, y, label='Scores')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.title('Linear Regression')\n\n    # Create the axes object\n    ax = plt.gca()\n\n    return plt, ax", "compilation_passed": true, "time": 0.0023009777069091797, "tests_passed": true, "error": null}
{"code": "# Perform the linear regression\n    x = df[df[\"Name\"].duplicated() == False]\n    x = x[\"Age\"]\n    y = df[df[\"Name\"].duplicated() == False]\n    y = y[\"Score\"]\n    slope, intercept, r, p, std_err = stats.linregress(x, y)\n    def myfunc(x):\n        return slope * x + intercept\n    mymodel = list(map(myfunc, x))\n    # Plot the regression line and the scatter plot\n    plt.plot(x, mymodel)\n    plt.scatter(x, y)\n    # Set the title and labels\n    plt.title(\"Linear Regression\")\n    plt.xlabel(\"Age\")\n    plt.ylabel(\"Score\")\n    return plt, ax", "compilation_passed": true, "time": 0.002393007278442383, "tests_passed": false, "error": "NameError"}
{"code": "# check if input df is not a DataFrame\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"df should be a DataFrame.\")\n    # check if df is empty\n    if df.empty:\n        return None, None\n    # get the data for the plot\n    # remove rows with duplicate names\n    df = df.drop_duplicates(subset=['Name'], keep='first')\n    # check if df is empty after removing duplicates\n    if df.empty:\n        return None, None\n    # get the x and y data for the plot\n    x, y = df['Age'].values, df['Score'].values\n    # perform a linear regression\n    slope, intercept, r, p, stderr = stats.linregress(x, y)\n    # create a function for the line of the regression\n    regression_line = lambda x: slope * x + intercept\n    # compute the coordinates of the regression line\n    line = regression_line(x)\n    # plot the data and the line\n    fig, ax = plt.subplots()\n    ax.plot(", "compilation_passed": false, "time": 0.00021600723266601562, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df must be a DataFrame\")\n\n    df.drop_duplicates(subset=[\"Name\"], inplace=True)\n\n    # Linear Regression\n    slope, intercept, r, p, std_err = stats.linregress(df.Age, df.Score)\n\n    def run(x):\n        return slope * x + intercept\n\n    run_model = list(map(run, df.Age))\n\n    fig, ax = plt.subplots()\n    ax.scatter(df.Age, df.Score)\n    ax.plot(df.Age, run_model)\n\n    ax.set_title(\"Linear Regression\")\n    ax.set_xlabel(\"Age\")\n    ax.set_ylabel(\"Score\")\n\n    return fig, ax", "compilation_passed": true, "time": 0.01737213134765625, "tests_passed": false, "error": "AttributeError"}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input should be a DataFrame\")\n\n    df_no_dupl_name = df.drop_duplicates('Name')\n    X = df_no_dupl_name['Age'].to_numpy().reshape(-1, 1)\n    y = df_no_dupl_name['Score'].to_numpy()\n\n    slope, intercept, r, p, stderr = stats.linregress(X.flatten(), y)\n\n    def func(x):\n        return slope * x + intercept\n\n    model = list(map(func, X))\n\n    plt.plot(X, model, '--k')\n    plt.scatter(X, y)\n    plt.title('Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    ax = plt.gca()\n    plt.show()\n\n    return plt, ax", "compilation_passed": true, "time": 0.002672910690307617, "tests_passed": true, "error": null}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input argument must be a pandas DataFrame\")\n\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input argument must be a pandas DataFrame\")\n\n    df = df.drop_duplicates(subset='Name')\n\n    # Perform the linear regression\n    x = df['Age']\n    y = df['Score']\n    slope, intercept, r, p, std_err = stats.linregress(x, y)\n\n    # Create the line of best fit\n    line = f'y = {intercept:.2f} + {slope:.2f}x'\n\n    # Plot the graph\n    ax = df.plot(kind='scatter', x='Age', y='Score', label=line, color='red')\n\n    # Plot the regression line\n    ax.set_title('Linear Regression')\n    ax.set_xlabel('Age')\n    ax.set_ylabel('Score')\n    ax.plot(x, intercept + slope * x, color='red',", "compilation_passed": false, "time": 0.0002548694610595703, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df must be a DataFrame.\")\n    df = df.drop_duplicates(subset=['Name'])\n    X = df['Age'].values.reshape(-1, 1)\n    y = df['Score'].values\n    slope, intercept, r, _, _ = stats.linregress(X.flatten(), y)\n    plt.scatter(X, y)\n    plt.plot(X, slope * X + intercept, 'r')\n    plt.title('Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    return plt, ax", "compilation_passed": true, "time": 0.002323150634765625, "tests_passed": false, "error": "NameError"}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError('df must be a DataFrame')\n\n    # 1. remove duplicate names\n    # 2. plot \"age\" vs. \"score\"\n    # 3. show a line of the regression\n    # 4. return the plt and axes\n    # 5. plot title is \"Linear Regression\"\n    # 6. the xlabel is \"Age\" and the ylabel is \"Score\"\n    # 7. return plt and ax\n    # 8. ax.lines[0].get_xdata()[0] is 20\n    # 9. ax.lines[0].get_xdata()[-1] is 30\n    # 10. ax.lines[0].get_ydata()[0] is 70\n    # 11. ax.lines[0].get_ydata()[-1] is 80\n    # 12. ax.lines[0].get_color() is 'r'\n    # 13. ax.lines[0].get_linestyle", "compilation_passed": true, "time": 0.0010519027709960938, "tests_passed": false, "error": "TypeError"}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError('input df is not a DataFrame')\n    # Linear Regression\n    df.drop_duplicates(subset=['Name'], inplace=True)\n    df['Age'] = df['Age'].astype('int64')\n    df['Score'] = df['Score'].astype('int64')\n    x = df['Age'].to_numpy()\n    y = df['Score'].to_numpy()\n    slope, intercept, r, p, std_err = stats.linregress(x, y)\n    f = lambda x: slope * x + intercept\n    x_axis = np.linspace(x.min(), x.max(), 100)\n    y_axis = f(x_axis)\n    plt.plot(x_axis, y_axis, label=\"regression line\")\n    plt.scatter(x, y, label=\"data\")\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.legend()\n    plt.title(\"Linear", "compilation_passed": false, "time": 0.00011801719665527344, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input data should be a pandas DataFrame.\")\n\n    df.drop_duplicates(subset='Name', keep='first', inplace=True)\n\n    x = df['Age'].to_numpy()\n    y = df['Score'].to_numpy()\n\n    # Perform a linear regression\n    slope, intercept, r, p, stderr = stats.linregress(x, y)\n\n    # Plot the data along with the regression line\n    fig, ax = plt.subplots()\n    ax.scatter(x, y, alpha=0.5, s=10, c='r')\n    ax.plot(x, intercept + slope * x, 'k', alpha=0.5)\n\n    ax.set_title('Linear Regression')\n    ax.set_xlabel('Age')\n    ax.set_ylabel('Score')\n\n    return fig, ax", "compilation_passed": true, "time": 0.018579959869384766, "tests_passed": false, "error": "AttributeError"}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df must be a pandas DataFrame.\")\n\n    # Create a new DataFrame that excludes rows with duplicate names\n    new_df = df[~df['Name'].duplicated()]\n\n    # Perform linear regression\n    slope, intercept, r, p, std_err = stats.linregress(new_df['Age'], new_df['Score'])\n\n    # Define the function for the line of best fit\n    def line_func(x):\n        return slope * x + intercept\n\n    # Get the x- and y- values for the line\n    line_vals = list(map(line_func, new_df['Age']))\n\n    # Set the plot parameters\n    plt.plot(new_df['Age'], new_df['Score'], marker='o', linestyle='None', label=\"Scatter Plot\")\n    plt.plot(new_df['Age'], line_vals, color='red', label=\"Linear Regression\")\n    plt.xlabel('Age')\n    plt", "compilation_passed": true, "time": 0.0020520687103271484, "tests_passed": false, "error": "TypeError"}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df should be a DataFrame\")\n\n    # Select only rows with unique names\n    df = df[df[\"Name\"].duplicated(keep=False) == False]\n    df = df.astype({\"Age\": \"int64\", \"Score\": \"int64\"})\n\n    plt.figure()\n    plt.title('Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.scatter(df[\"Age\"], df[\"Score\"])\n    slope, intercept, r_value, p_value, std_err = stats.linregress(\n        df[\"Age\"], df[\"Score\"])\n\n    plt.plot(df[\"Age\"], df[\"Age\"]*slope+intercept, \"-r\")\n    plt.grid(True)\n    plt.show()\n    return plt, plt.gca()", "compilation_passed": true, "time": 0.06709623336791992, "tests_passed": true, "error": null}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df must be a DataFrame\")\n    df.drop_duplicates(subset=['Name'], inplace=True)\n    x = df[\"Age\"].to_numpy()\n    y = df[\"Score\"].to_numpy()\n\n    # Perform a linear regression\n    slope, intercept, r, p, std_err = stats.linregress(x, y)\n\n    def my_func(x):\n        return slope * x + intercept\n\n    mymodel = list(map(my_func, x))\n\n    # Plot the line\n    plt.figure(figsize=(5, 4))\n    plt.plot(x, mymodel, label=f\"R^2={r**2:.4f}\")\n    # Plot the data as a scatter plot\n    plt.scatter(x, y)\n\n    # Set the plot title and axes labels\n    plt.title(\"Linear Regression\")\n    plt.xlabel(\"Age\")\n    plt.ylabel(\"Score\")\n", "compilation_passed": true, "time": 0.020086050033569336, "tests_passed": false, "error": "TypeError"}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Invalid input: df must be a DataFrame.\")\n\n    # Drop duplicate names\n    df = df.drop_duplicates(subset='Name')\n\n    # Perform linear regression\n    X = df['Age'].values.reshape(-1, 1)\n    y = df['Score'].values\n\n    slope, intercept, r_value, p_value, std_err = stats.linregress(X.flatten(), y)\n\n    # Plot regression line\n    regression_line = [slope * x + intercept for x in X.flatten()]\n\n    # Create a plot with a title, xlabel, and ylabel\n    fig, ax = plt.subplots()\n    ax.plot(X.flatten(), y, 'o', label='Original data', markersize=10)\n    ax.plot(X.flatten(), regression_line, 'r', label='Fitted line', linewidth=2)\n    ax.set_title('Linear Regression')\n    ax.", "compilation_passed": false, "time": 0.0002932548522949219, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input data should be a pandas DataFrame\")\n    df.drop_duplicates('Name', inplace=True)\n    model = stats.linregress(df.Age, df.Score)\n    ax = df.plot(x='Age', y='Score', title=\"Linear Regression\", label=\"Data\", figsize=(10, 5))\n    ax.axline(xy1=(df['Age'].min(), model.slope * df['Age'].min() + model.intercept),\n              xy2=(df['Age'].max(), model.slope * df['Age'].max() + model.intercept), label='Linear Regression', color='red')\n    plt.legend(loc=2)\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    return plt, ax", "compilation_passed": true, "time": 0.01991724967956543, "tests_passed": true, "error": null}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError('Input argument df must be a DataFrame')\n    df.drop_duplicates('Name', inplace=True)\n    x = df['Age'].to_numpy()\n    y = df['Score'].to_numpy()\n    slope, intercept, r, p, std_err = stats.linregress(x, y)\n    print(f\"Slope: {slope}\")\n    print(f\"Intercept: {intercept}\")\n    print(f\"R-squared: {r**2}\")\n    def func(x):\n        return slope * x + intercept\n    model = list(map(func, x))\n    fig, ax = plt.subplots()\n    ax.set_title(\"Linear Regression\")\n    ax.set_xlabel(\"Age\")\n    ax.set_ylabel(\"Score\")\n    ax.scatter(x, y)\n    ax.plot(x, model)\n    return (plt, ax)", "compilation_passed": true, "time": 0.06393909454345703, "tests_passed": true, "error": null}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input argument must be a DataFrame\")\n\n    # Remove duplicate names and create a copy\n    df = df[~df.Name.duplicated(keep=False)].copy()\n\n    # Perform linear regression\n    x = df['Age']\n    y = df['Score']\n    slope, intercept, r, p, std_err = stats.linregress(x, y)\n\n    # Create a scatter plot of Age vs Score\n    ax = df.plot(x='Age', y='Score', style='o', figsize=(10, 5))\n\n    # Create a linear regression line\n    ax.plot(x, slope * x + intercept)\n\n    plt.title(\"Linear Regression\")\n    plt.xlabel(\"Age\")\n    plt.ylabel(\"Score\")\n    plt.tight_layout()\n\n    # Return the plot object and the axes object\n    return plt, ax", "compilation_passed": true, "time": 0.030938148498535156, "tests_passed": true, "error": null}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input argument should be a pandas DataFrame\")\n\n    # exclude rows with duplicate names\n    df = df.drop_duplicates(subset='Name')\n\n    # perform a linear regression\n    slope, intercept, r_value, p_value, std_err = stats.linregress(df['Age'], df['Score'])\n\n    # plot the data and the regression line\n    plt.plot(df['Age'], df['Score'], 'o')\n    plt.plot(df['Age'], df['Age']*slope + intercept)\n    plt.title('Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.show()\n    return plt, ax", "compilation_passed": true, "time": 0.002418994903564453, "tests_passed": false, "error": "NameError"}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a DataFrame\")\n\n    df = df.sort_values(\"Age\")\n    df = df.drop_duplicates(subset=[\"Name\"])\n\n    x = df[\"Age\"]\n    y = df[\"Score\"]\n    slope, intercept, r, p, std_err = stats.linregress(x, y)\n    plt.title('Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score')\n    plt.scatter(x, y)\n    line = lambda x: slope * x + intercept\n    linear_regression_line = line(x)\n    plt.plot(x, linear_regression_line)\n    plt.tight_layout()\n    return plt, ax", "compilation_passed": true, "time": 0.009313106536865234, "tests_passed": false, "error": "NameError"}
{"code": "df = pd.DataFrame(df)\n    # if df is not DataFrame\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"df is not DataFrame\")\n\n    # if df has duplicates names\n    if df['Name'].duplicated().any():\n        df.drop_duplicates(subset=['Name'], inplace=True)\n\n    # perform a linear regression between \"age\" and \"score\" in the DataFrame\n    slope, intercept, r, p, std_err = stats.linregress(df['Age'], df['Score'])\n\n    # plot the regression line\n    def regress(x):\n        return slope * x + intercept\n\n    regress_scatter = df['Age'].apply(regress)\n\n    # create a scatter plot of the data\n    plt.scatter(df['Age'], df['Score'])\n\n    # add the regression line to the plot\n    plt.plot(df['Age'], regress_scatter)\n\n    plt.title('Linear Regression')\n    plt.xlabel('Age')\n    plt.ylabel('Score", "compilation_passed": false, "time": 0.00011682510375976562, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input 'df' must be a pandas DataFrame object.\")\n\n    # drop rows with duplicate names\n    df = df.drop_duplicates(subset=\"Name\")\n\n    # perform linear regression\n    slope, intercept, r, p, std_err = stats.linregress(df[\"Age\"], df[\"Score\"])\n    x = df[\"Age\"]\n    y = df[\"Score\"]\n\n    # plot regression line\n    line = f\"Regression line: y={intercept:.2f}+{slope:.2f}x, r={r:.2f}\"\n    plt.plot(x, df[\"Score\"], linewidth=1, zorder=1)\n\n    # plot scatter of data\n    plt.scatter(x, y, zorder=2)\n\n    # set axis labels and title\n    plt.xlabel(\"Age\")\n    plt.ylabel(\"Score\")\n    plt.title(\"Linear Regression\")\n\n    # return", "compilation_passed": true, "time": 0.0023849010467529297, "tests_passed": false, "error": "TypeError"}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame.\")\n\n    # Get the DataFrame without duplicate names\n    df = df[~df[\"Name\"].duplicated()]\n\n    # Get the X and Y values for the regression\n    X = df[\"Age\"].values\n    Y = df[\"Score\"].values\n\n    # Perform the linear regression\n    slope, intercept, r, p, std_err = stats.linregress(X, Y)\n\n    def regression_func(x):\n        return slope * x + intercept\n\n    regression_line = list(map(regression_func, X))\n\n    # Plot the graph\n    plt.title(\"Linear Regression\")\n    plt.xlabel(\"Age\")\n    plt.ylabel(\"Score\")\n    ax = plt.scatter(X, Y)\n    ax = plt.plot(X, regression_line)\n\n    # Return the plot and the axes\n    return plt, ax", "compilation_passed": true, "time": 0.002276897430419922, "tests_passed": true, "error": null}
{"code": "df = df.drop_duplicates(subset=\"name\")\n\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a DataFrame\")\n\n    plt.figure(figsize=(15, 5))\n\n    slope, intercept, r, p, std_err = stats.linregress(df[\"age\"], df[\"score\"])\n\n    def run(x):\n        return slope * x + intercept\n\n    run_model = list(map(run, df[\"age\"]))\n\n    plt.title(\"Linear Regression\")\n    plt.xlabel(\"Age\")\n    plt.ylabel(\"Score\")\n    plt.scatter(df[\"age\"], df[\"score\"])\n    plt.plot(df[\"age\"], run_model)\n    plt.show()\n\n    return plt, ax", "compilation_passed": true, "time": 0.0014660358428955078, "tests_passed": false, "error": "KeyError"}
