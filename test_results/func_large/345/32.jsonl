{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df must be a DataFrame.\")\n    if df.empty:\n        raise ValueError(\"Input df cannot be empty.\")\n    if col1 not in df.columns or col2 not in df.columns:\n        raise ValueError(\"Input df must contain the specified columns.\")\n\n    # \u041f\u0440\u043e\u0432\u0435\u0440\u043a\u0430 \u043d\u0430 \u043d\u0435\u0447\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\n    if not df[col1].dtype.kind in ['i', 'f'] or not df[col2].dtype.kind in ['i', 'f']:\n        raise TypeError(\"Columns must be numeric.\")\n\n    return sns.regplot(x=col1, y=col2, data=df)", "compilation_passed": true, "time": 0.3375520706176758, "tests_passed": true, "error": null}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError('Input must be a non-empty pandas DataFrame')\n    if df.empty:\n        raise ValueError('Input must be a non-empty pandas DataFrame')\n    if col1 not in df.columns or col2 not in df.columns:\n        raise ValueError(f'DataFrame does not contain columns {col1} or {col2}')\n    if not (df[col1].dtype.kind in 'iufc' and df[col2].dtype.kind in 'iufc'):\n        raise TypeError('Both columns must contain numerical values')\n\n    plot = sns.scatterplot(x=col1, y=col2, data=df)\n    sns.regplot(x=col1, y=col2, data=df, scatter=False, ax=plot)\n\n    return plot", "compilation_passed": true, "time": 0.4180870056152344, "tests_passed": true, "error": null}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"df should be a pandas DataFrame\")\n\n    if df.empty:\n        raise ValueError(\"df should not be empty\")\n\n    if col1 not in df.columns:\n        raise ValueError(\"df should contain col1\")\n\n    if col2 not in df.columns:\n        raise ValueError(\"df should contain col2\")\n\n    if not df[col1].dtype in ['int32', 'int64', 'float32', 'float64']:\n        raise TypeError(f\"df[col1] should contain numeric data, got {df[col1].dtype}\")\n\n    if not df[col2].dtype in ['int32', 'int64', 'float32', 'float64']:\n        raise TypeError(f\"df[col2] should contain numeric data, got {df[col2].dtype}\")\n\n    plot = sns.scatterplot(x=col1, y=col2", "compilation_passed": false, "time": 0.0002739429473876953, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError('Input should be a DataFrame')\n    if df.empty:\n        raise ValueError('DataFrame is empty')\n    if col1 not in df.columns:\n        raise ValueError(f'DataFrame does not contain column {col1}')\n    if col2 not in df.columns:\n        raise ValueError(f'DataFrame does not contain column {col2}')\n    plot = sns.scatterplot(x=col1, y=col2, data=df)\n    sns.regplot(x=col1, y=col2, data=df, scatter=False)\n    return plot", "compilation_passed": true, "time": 0.515667200088501, "tests_passed": true, "error": null}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input should be a DataFrame\")\n    elif df.empty:\n        raise ValueError(\"Input should not be an empty DataFrame\")\n    elif col1 not in df.columns or col2 not in df.columns:\n        raise ValueError(\"Input should contain both columns\")\n\n    if df[col1].dtype == \"object\" or df[col2].dtype == \"object\":\n        raise TypeError(\"Input should not contain non-numeric data\")\n\n    plot = sns.scatterplot(data=df, x=col1, y=col2, color=\"skyblue\")\n    plot = sns.regplot(data=df, x=col1, y=col2, line_kws={\"color\": \"red\", \"lw\": 3}, marker=\"p\")\n\n    return plot", "compilation_passed": true, "time": 0.683229923248291, "tests_passed": true, "error": null}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError('Input data is not a DataFrame')\n\n    if df.empty:\n        raise ValueError('Input data is empty')\n\n    if col1 not in df.columns or col2 not in df.columns:\n        raise ValueError('DataFrame does not contain the specified columns')\n\n    plot = sns.scatterplot(data=df, x=col1, y=col2)\n\n    plot = sns.regplot(data=df, x=col1, y=col2, scatter=False, line_kws={\"color\": \"r\"})\n    plot.axes.set_xlim(0)\n    plot.axes.set_ylim(0)\n\n    return plot", "compilation_passed": true, "time": 0.5001161098480225, "tests_passed": true, "error": null}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df should be a non-empty DataFrame\")\n\n    if df.empty:\n        raise ValueError(\"Input df should be a non-empty DataFrame\")\n\n    if col1 not in df.columns:\n        raise ValueError(f\"Column {col1} not found in DataFrame\")\n\n    if col2 not in df.columns:\n        raise ValueError(f\"Column {col2} not found in DataFrame\")\n\n    plot = sns.scatterplot(data=df, x=df[col1], y=df[col2], alpha=0.5, color=\"orange\")\n    sns.regplot(data=df, x=df[col1], y=df[col2], scatter=False, linekws={\"color\": \"blue\"})\n\n    return plot", "compilation_passed": true, "time": 0.02486705780029297, "tests_passed": false, "error": "TypeError"}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a DataFrame\")\n\n    if df.empty:\n        raise ValueError(\"Input DataFrame is empty\")\n\n    if col1 not in df.columns or col2 not in df.columns:\n        raise ValueError(f\"Input DataFrame does not have the required columns: {col1}, {col2}\")\n\n    try:\n        plot = sns.scatterplot(x=col1, y=col2, data=df)\n        sns.regplot(df[col1], df[col2], scatter=False, ax=plot)\n        return plot\n    except TypeError:\n        raise TypeError(\"Input DataFrame contains non-numeric data\")", "compilation_passed": true, "time": 0.008302927017211914, "tests_passed": false, "error": "TypeError"}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input data is not a DataFrame\")\n    if df.empty:\n        raise ValueError(\"Input data is empty\")\n    if col1 not in df.columns:\n        raise ValueError(f\"Column '{col1}' not found in the DataFrame\")\n    if col2 not in df.columns:\n        raise ValueError(f\"Column '{col2}' not found in the DataFrame\")\n\n    if not (df[col1].dtype.kind in 'iuf' and df[col2].dtype.kind in 'iuf'):\n        raise TypeError(\"Input data must be numeric\")\n\n    plot = sns.scatterplot(data=df, x=col1, y=col2, hue=col1, alpha=0.5)\n    plot = sns.regplot(data=df, x=col1, y=col2, scatter=False, edgecolor=None, line_kws={'color': 'red'})\n    return plot", "compilation_passed": true, "time": 0.04977893829345703, "tests_passed": false, "error": "TypeError"}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input data should be a DataFrame\")\n    elif df.empty:\n        raise ValueError(\"Input data should not be an empty DataFrame\")\n    elif col1 not in df or col2 not in df:\n        raise ValueError(\"DataFrame should have 'col1' and 'col2' columns\")\n    try:\n        sns.regplot(x=col1, y=col2, data=df)\n    except TypeError:\n        raise TypeError(\"DataFrame should have numeric data\")\n    except ValueError:\n        raise ValueError(\"DataFrame should have 'col1' and 'col2' columns\")\n    return plt.gca()", "compilation_passed": true, "time": 0.44176626205444336, "tests_passed": true, "error": null}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input DataFrame is not a valid pandas DataFrame.\")\n\n    if df.empty:\n        raise ValueError(\"Input DataFrame is empty.\")\n\n    if col1 not in df.columns or col2 not in df.columns:\n        raise ValueError(\"The specified column names are not found in the DataFrame.\")\n\n    try:\n        plot = sns.scatterplot(data=df, x=col1, y=col2, hue=col1, style=col1, alpha=0.5, linewidth=0)\n        sns.lineplot(data=df, x=col1, y=col2, marker=\"o\", dashes=False, linewidth=2)\n    except Exception as e:\n        raise TypeError(\"DataFrame contains non-numeric data.\") from e\n\n    return plot", "compilation_passed": true, "time": 1.0062711238861084, "tests_passed": false, "error": "TypeError"}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"df must be a pandas DataFrame\")\n    if df.empty:\n        raise ValueError(\"df must not be empty\")\n    if col1 not in df or col2 not in df:\n        raise ValueError(\"df must contain the specified columns\")\n    sns.set_theme(style=\"ticks\")\n    plot = sns.lmplot(data=df, x=col1, y=col2, ci=None, scatter_kws={\"s\": 100})\n    return plot", "compilation_passed": true, "time": 0.05136895179748535, "tests_passed": true, "error": null}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input df should be a non-empty DataFrame.\")\n    if df.empty:\n        raise ValueError(\"The input df should be a non-empty DataFrame.\")\n    if not set([col1, col2]).issubset(df.columns):\n        raise ValueError(f\"The input df should contain the specified columns '{col1}' and '{col2}'.\")\n    if not set([df[col1].dtype == \"int64\", df[col1].dtype == \"float64\",\n                df[col2].dtype == \"int64\", df[col2].dtype == \"float64\"]) == set([True]):\n        raise TypeError(\"The input df should contain only numeric data.\")\n\n    sns.scatterplot(x=col1, y=col2, data=df)\n    sns.regplot(x=col1, y=col2, data=df, scatter=False, color='red')\n", "compilation_passed": true, "time": 0.0017561912536621094, "tests_passed": false, "error": "TypeError"}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a pandas DataFrame\")\n    if df.empty:\n        raise ValueError(\"Input DataFrame is empty\")\n    if not all(col in df.columns for col in [col1, col2]):\n        raise ValueError(\"Input DataFrame does not contain the specified columns\")\n    sns.set_theme(color_codes=True)\n    plot = sns.regplot(x=col1, y=col2, data=df)\n    return plot", "compilation_passed": true, "time": 0.2990851402282715, "tests_passed": true, "error": null}
{"code": "# \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0447\u0442\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u0439 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f pandas DataFrame\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"\u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442 df \u0434\u043e\u043b\u0436\u0435\u043d \u0431\u044b\u0442\u044c \u0442\u0438\u043f\u0430 pd.DataFrame\")\n    # \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0447\u0442\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u0435 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u0432 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u043e\u043c \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0435\n    if col1 not in df or col2 not in df:\n        raise ValueError(\"\u0423\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u0435 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0442 \u0432 \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u043e\u043c \u0434\u0430\u0442\u0430\u0444\u0440\u0435\u0439\u043c\u0435\")\n\n    # \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0447\u0442\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u0439 DataFrame \u043d\u0435 \u043f\u0443\u0441\u0442\u043e\u0439\n    if df.empty:\n        raise ValueError(\"\u041f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u0439 DataFrame \u043f\u0443\u0441\u0442\u043e\u0439\")\n\n    # \u041f\u0440\u043e\u0432\u0435\u0440\u044f\u0435\u043c, \u0447\u0442\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u043d\u043d\u044b\u0435 \u043a\u043e\u043b\u043e\u043d\u043a\u0438 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0447\u0438\u0441\u043b\u043e\u0432\u044b\u043c\u0438\n    if not df[col1].dtype.kind in 'iuf", "compilation_passed": false, "time": 9.894371032714844e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame.\")\n    if df.empty:\n        raise ValueError(\"Input df is empty.\")\n    if col1 not in df.columns or col2 not in df.columns:\n        raise ValueError(\"Input df does not contain the specified columns.\")\n    try:\n        return sns.scatterplot(data=df, x=col1, y=col2, legend=False, label=\"data\")\n    except TypeError:\n        raise TypeError(\"Non-numeric data detected in input df.\")", "compilation_passed": true, "time": 0.057272911071777344, "tests_passed": true, "error": null}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"df must be a DataFrame\")\n    if df.empty:\n        raise ValueError(\"df must not be empty\")\n    if col1 not in df.columns or col2 not in df.columns:\n        raise ValueError(\"df must contain specified columns\")\n    if df[col1].dtype == object or df[col2].dtype == object:\n        raise TypeError(\"df must contain only numeric data\")\n\n    plot = sns.regplot(x=df[col1], y=df[col2])\n\n    return plot", "compilation_passed": true, "time": 0.35620975494384766, "tests_passed": true, "error": null}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df must be a DataFrame.\")\n    if df.empty:\n        raise ValueError(\"Input df cannot be empty.\")\n    if not all(col in df.columns for col in [col1, col2]):\n        raise ValueError(\"Input df must contain the specified columns.\")\n    try:\n        sns.regplot(x=col1, y=col2, data=df)\n        ax = sns.scatterplot(x=col1, y=col2, data=df)\n    except Exception as e:\n        raise TypeError(\"Input data must be numeric\") from e\n    return ax", "compilation_passed": true, "time": 0.3875091075897217, "tests_passed": true, "error": null}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input data is not a pandas DataFrame\")\n    if df.empty:\n        raise ValueError(\"Input data is empty\")\n    if not all(col in df for col in (col1, col2)):\n        raise ValueError(\"Input data does not contain all specified columns\")\n    sns.set(style=\"ticks\")\n    ax = sns.regplot(x=col1, y=col2, data=df, color='green')\n    return ax", "compilation_passed": true, "time": 0.36514782905578613, "tests_passed": true, "error": null}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a pandas DataFrame\")\n    elif df.empty:\n        raise ValueError(\"DataFrame must not be empty\")\n    elif col1 not in df.columns or col2 not in df.columns:\n        raise ValueError(\"DataFrame must contain both columns\")\n    elif not df[col1].dtype in [np.float64, np.int64] or not df[col2].dtype in [np.float64, np.int64]:\n        raise TypeError(\"DataFrame must contain numeric columns\")\n\n    plot = sns.scatterplot(x=col1, y=col2, data=df)\n    plot = sns.regressionplot(x=col1, y=col2, data=df)\n\n    return plot", "compilation_passed": true, "time": 0.0017001628875732422, "tests_passed": false, "error": "NameError"}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input data is not a DataFrame\")\n    if df.empty:\n        raise ValueError(\"Input DataFrame is empty\")\n    if col1 not in df.columns:\n        raise ValueError(f\"Column {col1} not found in DataFrame\")\n    if col2 not in df.columns:\n        raise ValueError(f\"Column {col2} not found in DataFrame\")\n\n    if df[col1].dtype == object:\n        raise TypeError(\"Column {} use non-numeric data\".format(col1))\n    if df[col2].dtype == object:\n        raise TypeError(\"Column {} use non-numeric data\".format(col2))\n\n    ax = sns.scatterplot(x=col1, y=col2, data=df)\n    sns.regplot(x=col1, y=col2, data=df, scatter=False, ax=ax)\n    return ax", "compilation_passed": true, "time": 0.41363978385925293, "tests_passed": true, "error": null}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input df is not a DataFrame\")\n    if df.empty:\n        raise ValueError(\"Input df is empty\")\n    if not (col1 in df.columns and col2 in df.columns):\n        raise ValueError(\"Input df does not contain the specified columns\")\n    try:\n        plot = sns.lmplot(x=col1, y=col2, data=df)\n        if len(plot.collections[0].get_offsets().data) != df.shape[0]:\n            raise TypeError(\"Non-numeric data in the columns\")\n    except TypeError as e:\n        raise TypeError(\"Non-numeric data in the columns\") from e\n    return plot.axes[0, 0]", "compilation_passed": true, "time": 0.31746792793273926, "tests_passed": false, "error": "AttributeError"}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input data must be a DataFrame.\")\n    elif df.empty:\n        raise ValueError(\"Input data cannot be empty.\")\n    elif col1 not in df.columns or col2 not in df.columns:\n        raise ValueError(\"Input data must contain the specified columns.\")\n    if df[col1].dtype not in [np.int32, np.int64, np.float64]:\n        raise TypeError(\"Input data must contain numeric values.\")\n    if df[col2].dtype not in [np.int32, np.int64, np.float64]:\n        raise TypeError(\"Input data must contain numeric values.\")\n    plot = sns.scatterplot(data=df, x=col1, y=col2)\n    plot = sns.regplot(data=df, x=col1, y=col2, scatter=False)\n    return plot", "compilation_passed": true, "time": 0.0016291141510009766, "tests_passed": false, "error": "NameError"}
{"code": "if not isinstance(df, pd.DataFrame) or df.empty:\n        raise ValueError(\"df should be a non-empty pandas DataFrame.\")\n\n    if not (col1 in df.columns and col2 in df.columns):\n        raise ValueError(\"df should contain the specified columns.\")\n\n    plot = sns.lmplot(x=col1, y=col2, data=df)\n    return plot", "compilation_passed": true, "time": 0.3163938522338867, "tests_passed": true, "error": null}
{"code": "if not isinstance(df, pd.DataFrame) or df.empty:\n        raise ValueError(\"Input data must be a non-empty DataFrame.\")\n\n    if col1 not in df or col2 not in df:\n        raise ValueError(\"Input data must contain the specified columns.\")\n\n    try:\n        df[col1] = pd.to_numeric(df[col1])\n        df[col2] = pd.to_numeric(df[col2])\n    except (ValueError, TypeError):\n        raise TypeError(\"Columns must be numeric.\")\n\n    plot = sns.scatterplot(x=col1, y=col2, data=df)\n    plot = sns.regplot(x=col1, y=col2, data=df, scatter=False, color=\"r\")\n\n    return plot", "compilation_passed": true, "time": 0.30925893783569336, "tests_passed": true, "error": null}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input parameter 'df' must be a pandas DataFrame.\")\n    if df.empty:\n        raise ValueError(\"Input parameter 'df' must not be empty.\")\n    if col1 not in df.columns or col2 not in df.columns:\n        raise ValueError(f\"DataFrame must contain the specified columns: {col1}, {col2}.\")\n\n    if not df[col1].dtype.name == 'floating' and not df[col1].dtype.name == 'integer':\n        raise TypeError(\"Values in column {col1} should be of type 'integer' or 'floating'.\")\n    if not df[col2].dtype.name == 'floating' and not df[col2].dtype.name == 'integer':\n        raise TypeError(\"Values in column {col2} should be of type 'integer' or 'floating'.\")\n\n    plot = sns.scatterplot(x=col1, y=col2, data=df", "compilation_passed": false, "time": 0.00026106834411621094, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input data is not a pandas DataFrame.\")\n    if df.empty:\n        raise ValueError(\"Input DataFrame is empty.\")\n    if col1 not in df.columns:\n        raise ValueError(f\"Column '{col1}' not found in the DataFrame.\")\n    if col2 not in df.columns:\n        raise ValueError(f\"Column '{col2}' not found in the DataFrame.\")\n\n    try:\n        plot = sns.regplot(x=col1, y=col2, data=df)\n    except ValueError:\n        raise TypeError(f\"DataFrame contains invalid values.\")\n\n    return plot", "compilation_passed": true, "time": 0.3615443706512451, "tests_passed": true, "error": null}
{"code": "# Check if the input df is not a DataFrame, empty, or does not contain the specified columns\n    if not isinstance(df, pd.DataFrame) or df.empty or not all([col in df.columns for col in [col1, col2]]):\n        raise ValueError(\"The input df must be a non-empty DataFrame and must contain the specified columns.\")\n\n    try:\n        # Draw a scatter plot with a regression line for two columns from a DataFrame\n        plot = sns.regplot(x=col1, y=col2, data=df)\n\n        # Check if the plot is a valid plot\n        if not isinstance(plot, sns.axes.Axes):\n            raise ValueError(\"The plot must be a valid plot.\")\n\n        # Check if the plot is a valid plot type\n        if plot.collections[0].get_offsets().ndim != 2:\n            raise ValueError(\"The plot must be a valid plot type.\")\n\n        return plot\n\n    except Exception as e:\n        raise ValueError(\"An error occurred: {", "compilation_passed": false, "time": 0.00012993812561035156, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input argument df is not a DataFrame.\")\n    if df.empty:\n        raise ValueError(\"Input DataFrame df is empty.\")\n    if col1 not in df.columns or col2 not in df.columns:\n        raise ValueError(\"One or both columns are not present in the DataFrame.\")\n\n    sns.set(style='ticks')\n    ax = sns.regplot(x=col1, y=col2, data=df)\n\n    return ax", "compilation_passed": true, "time": 0.3711369037628174, "tests_passed": true, "error": null}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input data should be a pandas DataFrame.\")\n    if df.empty:\n        raise ValueError(\"Input data should not be an empty DataFrame.\")\n    if not set([col1, col2]).issubset(df.columns):\n        raise ValueError(\"Input DataFrame should have the specified columns.\")\n    try:\n        plot = sns.scatterplot(data=df, x=col1, y=col2)\n        plot = sns.regressplot(data=df, x=col1, y=col2, scatter=False, color='r')\n        return plot\n    except ValueError as e:\n        raise TypeError(\"Input data should be numeric.\") from e", "compilation_passed": true, "time": 0.023792028427124023, "tests_passed": false, "error": "AttributeError"}
