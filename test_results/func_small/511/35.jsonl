{"code": "data_list = [d[column] for d in data]\n    sum_data = sum(data_list)\n    mean_data = sum_data / len(data_list)\n    min_data = min(data_list)\n    max_data = max(data_list)\n    d = {\n        'sum': sum_data,\n        'mean': mean_data,\n        'min': min_data,\n        'max': max_data,\n    }\n    # matplotlib.pyplot.subplots()\n    fig, ax = plt.subplots(figsize=(10,5))\n    ax.pie(data_list, labels=data_list, autopct='%1.1f%%')\n    return (d, ax)", "compilation_passed": true, "time": 0.0013287067413330078, "tests_passed": false, "error": "TypeError"}
{"code": "# TODO:\n    if column == 'Age':\n        print(pd.Series(data).value_counts().idxmax(), pd.Series(data).value_counts().idxmin())\n        return (pd.Series(data).value_counts().idxmax(), pd.Series(data).value_counts().idxmin())\n    elif column == 'Salary':\n        print(pd.Series(data).value_counts().idxmax(), pd.Series(data).value_counts().idxmin())\n        return (pd.Series(data).value_counts().idxmax(), pd.Series(data).value_counts().idxmin())\n    elif column == 'Experience':\n        print(pd.Series(data).value_counts().idxmax(), pd.Series(data).value_counts().idxmin())\n        return (pd.Series(data).value_counts().idxmax(), pd.Series(data).value_counts().idxmin())\n    elif column == 'Name':\n        print(pd.Series(data", "compilation_passed": false, "time": 0.00028204917907714844, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Validate the column.\n    if column not in ['Age', 'Salary', 'Experience']:\n        raise KeyError('Invalid column name')\n\n    # Calculate the stats.\n    sum_func = lambda x: sum(x)\n    mean_func = lambda x: sum_func(x) / len(x)\n    min_func = lambda x: np.min(x)\n    max_func = lambda x: np.max(x)\n\n    stats = {'sum': sum_func(data[column]),\n             'mean': mean_func(data[column]),\n             'min': min_func(data[column]),\n             'max': max_func(data[column])}\n\n    # Create the pie chart.\n    labels = ['Under ' + str(stats['min']) + ' years',\n              '10 years or more',\n              'Between 20 and 30 years',\n              'Over 30 years']\n    values = [0, len([x for x in data[column] if x < stats['min']]),\n              ", "compilation_passed": false, "time": 0.0002472400665283203, "tests_passed": false, "error": "SyntaxError"}
{"code": "if column not in {'Age', 'Salary', 'Experience'}:\n        raise KeyError\n    data = pd.DataFrame(data)\n    stats = {\n        'sum': np.sum(data[column]),\n        'mean': np.mean(data[column]),\n        'min': np.min(data[column]),\n        'max': np.max(data[column]),\n    }\n    df = pd.DataFrame(data, columns=['Age', 'Salary', 'Experience'])\n    fig, ax = plt.subplots(figsize=(10, 8))\n    ax.pie(df[column].value_counts(), labels=df.Age.unique(), autopct='%.2f%%')\n    plt.show()\n    return stats, ax", "compilation_passed": true, "time": 0.0013909339904785156, "tests_passed": false, "error": "KeyError"}
{"code": "data_df = pd.DataFrame(data, columns=['Age', 'Salary', 'Experience'])\n\n    column_stats = {'sum': np.sum(data_df[column]),\n                    'mean': np.mean(data_df[column]),\n                    'min': np.min(data_df[column]),\n                    'max': np.max(data_df[column])}\n\n    data_df[column].value_counts().plot.pie(title=column,\n                                            autopct='%1.1f%%',\n                                            ylabel='')\n\n    ax = plt.gca()\n\n    return (column_stats, ax)", "compilation_passed": true, "time": 0.040024757385253906, "tests_passed": true, "error": null}
{"code": "if column not in ['Age', 'Salary', 'Experience']:\n        raise KeyError\n\n    sum_col = []\n    mean_col = []\n    min_col = []\n    max_col = []\n    for i in range(0, len(data)):\n        sum_col.append(data[i][1])\n        mean_col.append(data[i][1] / 3)\n        min_col.append(min(sum_col))\n        max_col.append(max(sum_col))\n    stats = {\n        'sum': sum(sum_col),\n        'mean': sum(mean_col) / len(sum_col),\n        'min': min(min_col),\n        'max': max(max_col)\n    }\n    return (stats, ax)", "compilation_passed": true, "time": 0.0014469623565673828, "tests_passed": false, "error": "NameError"}
{"code": "stats = {}\n    stats['sum'] = sum(x[1] for x in data)\n    stats['mean'] = round(sum(x[1] for x in data) / len(data), 2)\n    stats['min'] = round(min(x[1] for x in data), 2)\n    stats['max'] = round(max(x[1] for x in data), 2)\n\n    if column == 'Age':\n        data_df = pd.DataFrame(data)\n        ax = data_df.plot(kind='pie', y='Age', label='Age')\n    elif column == 'Salary':\n        data_df = pd.DataFrame(data)\n        ax = data_df.plot(kind='pie', y='Salary', label='Salary')\n    else:\n        data_df = pd.DataFrame(data)\n        ax = data_df.plot(kind='pie', y='Experience', label='Experience')\n\n    return (stats, ax)", "compilation_passed": true, "time": 0.0017969608306884766, "tests_passed": false, "error": "KeyError"}
{"code": "# Check the validity of the column.\n    if column not in ['Age', 'Salary', 'Experience']:\n        raise KeyError(\"Column must be one of 'Age', 'Salary', or 'Experience'\")\n\n    # Calculate the statistics.\n    if column == 'Age':\n        column_values = [x[0] for x in data]\n    elif column == 'Salary':\n        column_values = [x[1] for x in data]\n    else:\n        column_values = [x[2] for x in data]\n\n    sum_value = sum(column_values)\n    mean_value = sum(column_values) / len(column_values)\n    min_value = min(column_values)\n    max_value = max(column_values)\n\n    # Create pie chart and return the pie chart axes.\n    ax = plt.subplot()\n    ax.pie([len(column_values), 0, 0],\n            labels=[column],\n            autopct='%1.1f%%')\n    ax.", "compilation_passed": false, "time": 0.0002467632293701172, "tests_passed": false, "error": "SyntaxError"}
{"code": "if column not in ['Age', 'Salary', 'Experience']:\n        raise KeyError(\"Column not valid\")\n    col = None\n    if column == 'Age':\n        col = 0\n    elif column == 'Salary':\n        col = 1\n    else:\n        col = 2\n    sum = 0\n    mean = 0\n    min = 0\n    max = 0\n\n    for i in data:\n        sum += i[col]\n    mean = sum / len(data)\n\n    for i in data:\n        if i[col] < min:\n            min = i[col]\n        if i[col] > max:\n            max = i[col]\n\n    return dict(sum=sum, mean=mean, min=min, max=max), plt.pie(data=data, colors=['red', 'blue', 'green'])", "compilation_passed": true, "time": 0.0012450218200683594, "tests_passed": false, "error": "TypeError"}
{"code": "stats = dict()\n    stats['sum'] = sum(list(map(lambda x: x[1], data)))\n    stats['mean'] = sum(list(map(lambda x: x[1], data))) / len(data)\n    stats['min'] = min(list(map(lambda x: x[1], data)))\n    stats['max'] = max(list(map(lambda x: x[1], data)))\n\n    if column == 'Age':\n        labels = [str(i) for i in range(20, 45)]\n        values = [stats['sum']] + [stats['sum'] - s for s in stats['min'], stats['min'], stats['max']]\n        ax = plt.figure(figsize=(5, 5)).gca()\n        ax.pie(values, labels=labels, autopct='%1.1f%%', counterclock=False,\n                wedgeprops={'edgecolor': 'k'})\n    elif column == 'Salary':\n        labels = [\"0 - 50000\", \"50", "compilation_passed": false, "time": 0.00021886825561523438, "tests_passed": false, "error": "SyntaxError"}
{"code": "if column not in ['Age', 'Salary', 'Experience']:\n        raise KeyError(f\"Invalid column '{column}'\")\n\n    df = pd.DataFrame(data)\n    if column == 'Age':\n        stats = dict(sum=df[column].sum(), mean=df[column].mean(), min=df[column].min(), max=df[column].max())\n        return stats, plt.pie(stats.values(), labels=list(stats.keys()))\n    else:\n        df[column] = pd.to_numeric(df[column])\n        stats = dict(sum=df[column].sum(), mean=df[column].mean(), min=df[column].min(), max=df[column].max())\n        return stats, plt.pie(stats.values(), labels=list(stats.keys()))", "compilation_passed": true, "time": 0.0013780593872070312, "tests_passed": false, "error": "KeyError"}
{"code": "column = column.upper()\n\n    if column not in ['AGE', 'SALARY', 'EXPERIENCE']:\n        raise KeyError(f\"Invalid column name: {column}\")\n\n    column_values = [row[column] for row in data]\n\n    if not column_values:\n        sum_ = 0\n        mean = np.nan\n        min_ = np.nan\n        max_ = np.nan\n    else:\n        sum_ = sum(column_values)\n        mean = np.mean(column_values)\n        min_ = min(column_values)\n        max_ = max(column_values)\n\n    return {\n        'sum': sum_,\n        'mean': mean,\n        'min': min_,\n        'max': max_,\n        'median': np.median(column_values)\n    }, plt.pie(column_values, labels=column_values)", "compilation_passed": true, "time": 0.0011429786682128906, "tests_passed": false, "error": "TypeError"}
{"code": "stats = {'sum': sum(d[1] for d in data), 'mean': np.mean(data, axis=0)[1], 'min': min(d[1] for d in data), 'max': max(d[1] for d in data)}\n    fig, ax = plt.subplots()\n    ax.pie(stats.values(), labels=stats.keys(), autopct='%1.2f%%')\n\n    return stats, ax", "compilation_passed": true, "time": 0.013355016708374023, "tests_passed": true, "error": null}
{"code": "if column in ('Age', 'Salary', 'Experience'):\n        df = pd.DataFrame(data)\n        if column == 'Age':\n            return {\n                'sum': df.Age.sum(),\n                'mean': df.Age.mean(),\n                'min': df.Age.min(),\n                'max': df.Age.max()\n            }, plt.pie(df.Age.value_counts(), labels=df.Age.value_counts().index)\n        elif column == 'Salary':\n            return {\n                'sum': df.Salary.sum(),\n                'mean': df.Salary.mean(),\n                'min': df.Salary.min(),\n                'max': df.Salary.max()\n            }, plt.pie(df.Salary.value_counts(), labels=df.Salary.value_counts().index)\n        elif column == 'Experience':\n            return {\n                'sum': df.Experience.sum(),\n                'mean': df.Experience.mean(),\n                'min':", "compilation_passed": false, "time": 0.0002770423889160156, "tests_passed": false, "error": "SyntaxError"}
{"code": "column = column.lower()\n    if column not in ['age', 'salary', 'experience']:\n        raise KeyError('Invalid column: {}. Valid options are: Age, Salary, Experience'.format(column))\n    stats = {}\n\n    if len(data) == 0:\n        stats['sum'] = 0\n        stats['mean'] = np.nan\n        stats['min'] = np.nan\n        stats['max'] = np.nan\n    else:\n        stats['sum'] = sum(list(map(lambda x: x[1], data)))\n        stats['mean'] = round(sum(list(map(lambda x: x[1], data)))/len(data), 2)\n        stats['min'] = round(min(list(map(lambda x: x[1], data))), 2)\n        stats['max'] = round(max(list(map(lambda x: x[1], data))), 2)\n\n    fig, ax = plt.subplots(1, 1, figsize=(8, 6))\n    plt.", "compilation_passed": false, "time": 0.0002989768981933594, "tests_passed": false, "error": "SyntaxError"}
{"code": "if column not in ['Age', 'Salary', 'Experience']:\n        raise KeyError(f\"{column} is not a valid column.\")\n    data = pd.DataFrame(data, columns=['Age', 'Salary', 'Experience'])\n    result = data[column].value_counts(normalize=True)\n    return (dict(result), plt.pie(list(result.index), list(result.values), labels=list(result.index)))", "compilation_passed": true, "time": 0.007340669631958008, "tests_passed": true, "error": null}
{"code": "if column == 'Age':\n        stats = {\n            'sum': np.sum(pd.Series(data).apply(lambda x: x[0])),\n            'mean': np.mean(pd.Series(data).apply(lambda x: x[0])),\n            'min': pd.Series(data).apply(lambda x: x[0]).min(),\n            'max': pd.Series(data).apply(lambda x: x[0]).max()\n        }\n        ax = pd.DataFrame(data).plot(kind='pie', figsize=(15, 5), legend=False,\n                                     autopct='%1.2f%%')\n    elif column == 'Salary':\n        stats = {\n            'sum': np.sum(pd.Series(data).apply(lambda x: x[1])),\n            'mean': np.mean(pd.Series(data).apply(lambda x: x[1])),\n            'min': pd.Series(data).apply(lambda x: x[1]).min(),\n            '", "compilation_passed": false, "time": 0.00012683868408203125, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Check for invalid input\n    if column not in ['Age', 'Salary', 'Experience']:\n        raise KeyError(\"Invalid column. Valid columns are 'Age', 'Salary', and 'Experience'\")\n\n    # Check for empty data\n    if len(data) == 0:\n        return {column: 0}, plt.gca()\n\n    # Calculate statistics\n    stats = {\n        'sum': sum(row[column_index] for row in data),\n        'mean': np.mean(data),\n        'min': min(row[column_index] for row in data),\n        'max': max(row[column_index] for row in data),\n    }\n\n    # Get the column index\n    column_index = {'Age': 0, 'Salary': 1, 'Experience': 2}[column]\n\n    # Create pie chart\n    n_unique = len(set([row[column_index] for row in data]))\n    unique_data = sorted(set([row[column_index] for row in data]))", "compilation_passed": true, "time": 0.0021822452545166016, "tests_passed": false, "error": "NameError"}
{"code": "if column not in {'Age', 'Salary', 'Experience'}:\n        raise KeyError(f\"{column!r} is not a valid column. Valid columns are 'Age', 'Salary', and 'Experience'\")\n\n    # Convert data to a Pandas DataFrame\n    df = pd.DataFrame(data, columns=['Age', 'Salary', 'Experience'])\n    # Group data by column and aggregate\n    grouped_df = df.groupby(column).sum()\n\n    # Get sum, mean, min, and max values\n    sum_ = grouped_df['Salary'].sum()\n    mean = grouped_df['Salary'].mean()\n    min_ = grouped_df['Salary'].min()\n    max_ = grouped_df['Salary'].max()\n\n    # Visualize data using matplotlib\n    fig, ax = plt.subplots()\n    labels = df['Age'].unique()\n    sizes = df[column].value_counts()\n    ax.pie(sizes.values, labels=labels, autopct='%", "compilation_passed": false, "time": 0.00010371208190917969, "tests_passed": false, "error": "SyntaxError"}
{"code": "if column not in ('Age', 'Salary', 'Experience'):\n        raise KeyError('Invalid column. Please use one of: \"Age\", \"Salary\", or \"Experience\"')\n\n    if data:\n        data_df = pd.DataFrame(data, columns=['Age', 'Salary', 'Experience'])\n        column_stats = data_df[column].describe()\n    else:\n        column_stats = pd.Series(index=['sum', 'mean', 'min', 'max'], dtype=float)\n\n    column_stats[column] = data_df[column].sum() if data else 0\n    column_stats['mean'] = data_df[column].mean() if data else np.nan\n    column_stats['min'] = data_df[column].min() if data else np.nan\n    column_stats['max'] = data_df[column].max() if data else np.nan\n\n    ax = column_stats.plot(kind='pie')\n    return column_stats, ax", "compilation_passed": true, "time": 0.18339204788208008, "tests_passed": false, "error": "ValueError"}
{"code": "try:\n        stats = {\n            'sum': np.sum([row[column] for row in data]),\n            'mean': np.mean([row[column] for row in data]),\n            'min': min([row[column] for row in data]),\n            'max': max([row[column] for row in data])\n        }\n        colors = ['red', 'orange', 'green', 'blue', 'purple']\n        labels = [str(row[column]) for row in data]\n        ax = plt.pie(stats.values(), colors=colors, labels=labels)\n        return stats, ax\n    except KeyError:\n        print(f\"Invalid column: {column}\")", "compilation_passed": true, "time": 0.001291036605834961, "tests_passed": false, "error": "TypeError"}
{"code": "# TODO: Implement the function.\n    try:\n        column_data = dict()\n        column_data[column] = list()\n        for i in data:\n            column_data[column] = i[column_data[column].index(i[column])+1]\n            if type(column_data[column]) == int:\n                column_data[column] = np.array(i[column_data[column].index(i[column])+1])\n        if len(column_data) == 0:\n            column_data[column] = [0, 0, 0]\n            return {'sum':0, 'mean':0, 'min':0, 'max':0}, None\n    except:\n        print(\"Error with column data\")\n\n    column_data = pd.Series(column_data)\n    column_data = pd.Series(column_data)\n    column_data = pd.DataFrame(column_data)\n    column_data = pd.DataFrame(column_data)\n    return {'sum': np.sum(column_data), 'mean':", "compilation_passed": false, "time": 0.00027489662170410156, "tests_passed": false, "error": "SyntaxError"}
{"code": "if column == 'Age':\n        col_list = data[0]\n        df = pd.DataFrame(data, columns=['Age', 'Salary', 'Experience'])\n        return(df.Age.mean(), df.Age.max(), df.Age.min(), df.Age.sum()), ax.pie(df.Age.value_counts(), labels=list(df.Age.unique()))\n    elif column == 'Salary':\n        col_list = data[0]\n        df = pd.DataFrame(data, columns=['Age', 'Salary', 'Experience'])\n        return(df.Salary.mean(), df.Salary.max(), df.Salary.min(), df.Salary.sum()), ax.pie(df.Salary.value_counts(), labels=list(df.Salary.unique()))\n    elif column == 'Experience':\n        col_list = data[0]\n        df = pd.DataFrame(data, columns=['Age', 'Salary', 'Experience'])\n        return(df.Experience.mean(), df.", "compilation_passed": false, "time": 0.0002689361572265625, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Check the valid input\n    if column not in ['Age', 'Salary', 'Experience']:\n        raise KeyError\n\n    # Calculate stats\n    stats = dict()\n    stats['sum'] = sum(d[column] for d in data)\n    stats['mean'] = stats['sum'] / len(data)\n    stats['min'] = min(d[column] for d in data)\n    stats['max'] = max(d[column] for d in data)\n\n    # Create the pie chart\n    df = pd.DataFrame(data)\n    labels = df[column].apply(lambda x: f'{x:.0f}')\n    data = df[column].apply(lambda x: x - stats['min'])\n    fig, ax = plt.subplots()\n    ax.pie(data, labels=labels, autopct='%1.1f%%')\n\n    return stats, ax", "compilation_passed": true, "time": 0.0012090206146240234, "tests_passed": false, "error": "TypeError"}
{"code": "column_stats = {\n        'sum': sum([row[i] for row in data]),\n        'mean': np.nanmean(np.array([row[i] for row in data])),\n        'min': np.nanmin(np.array([row[i] for row in data])),\n        'max': np.nanmax(np.array([row[i] for row in data]))\n    }\n    pie_chart_data = [row[i] for row in data]\n    ax = plt.pie(pie_chart_data,\n                 colors=['red', 'blue', 'green', 'yellow'],\n                 labels=[f'age: {row[0]}' for row in data],\n                 startangle=90)\n    return column_stats, ax", "compilation_passed": true, "time": 0.0011436939239501953, "tests_passed": false, "error": "NameError"}
{"code": "data = pd.DataFrame(data)\n    if column not in ['Age', 'Salary', 'Experience']:\n        raise KeyError('Invalid column. Valid values are Age, Salary, and Experience.')\n    elif column == 'Age':\n        data['Age_Cat'] = pd.cut(data['Age'], 5)\n        data = data.groupby('Age_Cat').agg({column: ['sum', 'mean', 'min', 'max']}).reset_index()\n        stats = {'sum': data['Age'][column].values, 'mean': data['Age'][column].mean(), 'min': data['Age'][column].min(),\n                'max': data['Age'][column].max()}\n    elif column == 'Salary':\n        data['Salary_Cat'] = pd.cut(data['Salary'], 3)\n        data = data.groupby('Salary_Cat').agg({column: ['sum', 'mean', 'min', 'max']}).reset_index()\n        stats = {'sum': data['Salary", "compilation_passed": false, "time": 0.00011086463928222656, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Convert data to a pandas DataFrame for easier analysis\n    df = pd.DataFrame(data)\n\n    # Check column name and return if invalid\n    if column not in ['Age', 'Salary', 'Experience']:\n        raise KeyError('Invalid column name.')\n\n    # Calculate column statistics using pandas functions\n    stats = {\n        'sum': df[column].sum(),\n        'mean': df[column].mean(),\n        'min': df[column].min(),\n        'max': df[column].max()\n    }\n\n    # Create a pie chart and return it\n    fig, ax = plt.subplots()\n    df[column].plot.pie(ax=ax, labels=df[column].unique(), figsize=(7, 7))\n    return stats, ax", "compilation_passed": true, "time": 0.0012958049774169922, "tests_passed": false, "error": "KeyError"}
{"code": "# check if column is valid\n    if column not in ['Age', 'Salary', 'Experience']:\n        raise KeyError(f\"Invalid column: {column}\")\n\n    # calculate stats\n    column_values = [row[column] for row in data]\n    sum_col = sum(column_values)\n    mean_col = sum_col / len(column_values)\n    min_col = min(column_values)\n    max_col = max(column_values)\n\n    # create pie chart\n    column_stats = {'sum': sum_col, 'mean': mean_col, 'min': min_col, 'max': max_col}\n    fig, ax = plt.subplots()\n    ax.pie(column_stats.values(), labels=['sum', 'mean', 'min', 'max'],\n           autopct=lambda p: f'{round(p, 2)}%')\n    return column_stats, ax", "compilation_passed": true, "time": 0.0011320114135742188, "tests_passed": false, "error": "TypeError"}
{"code": "if column not in ['Age', 'Salary', 'Experience']:\n        raise KeyError(\"Column not valid: Age, Salary, or Experience\")\n\n    stats = {'sum': 0, 'mean': None, 'min': np.inf, 'max': -np.inf}\n\n    for employee in data:\n        stats['sum'] += employee[1]\n        stats['min'] = min(stats['min'], employee[1])\n        stats['max'] = max(stats['max'], employee[1])\n        stats['mean'] = stats['sum'] / len(data)\n\n    if len(data) > 0:\n        ax = plt.subplot()\n        ax.pie(data, labels=[d[column] for d in data], autopct='%1.1f%%')\n    return stats, ax", "compilation_passed": true, "time": 0.0046977996826171875, "tests_passed": false, "error": "TypeError"}
{"code": "# Check if the column value is valid\n    if column not in ['Age', 'Salary', 'Experience']:\n        raise KeyError(\"Invalid column: Must be one of 'Age', 'Salary', or 'Experience'.\")\n\n    # Create a dictionary to store the column statistics\n    stats = {\n        'sum': sum(d[column] for d in data),\n        'mean': np.mean([d[column] for d in data]),\n        'min': min([d[column] for d in data]),\n        'max': max([d[column] for d in data])\n    }\n\n    # Create a pie chart for the column data\n    if column == 'Age':\n        labels = ['0-15', '15-30', '30-45', '45-60', '60-75', '75-90', '90-105', '105-120']\n    elif column == 'Salary':\n        labels = ['< 30,", "compilation_passed": false, "time": 0.00010204315185546875, "tests_passed": false, "error": "SyntaxError"}
