{"code": "# Check for valid data type and number of clusters\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError('Invalid data type.')\n\n    if n_clusters <= 1:\n        raise ValueError('Number of clusters must be greater than 1.')\n\n    # Perform KMeans clustering\n    model = KMeans(n_clusters=n_clusters, random_state=42)\n    model.fit(data.values)\n\n    # Visualize results in a scatter plot\n    plt.scatter(data.iloc[:, 0], data.iloc[:, 1], c=model.labels_)\n    plt.scatter([i for i in model.cluster_centers_[:, 0]],\n                [i for i in model.cluster_centers_[:, 1]], s=200, marker='x')\n    return model.labels_, plt.gca()", "compilation_passed": true, "time": 0.009974956512451172, "tests_passed": true, "error": null}
{"code": "# Check if 'data' is a pd.DataFrame\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"'data' must be a pd.DataFrame.\")\n\n    # Check if 'n_clusters' is an integer greater than 1\n    if not isinstance(n_clusters, int) or n_clusters <= 1:\n        raise ValueError(\"'n_clusters' must be an integer greater than 1.\")\n\n    # Perform K-means clustering\n    kmeans = KMeans(n_clusters=n_clusters)\n    kmeans.fit(data)\n    cluster_labels = kmeans.labels_\n\n    # Plot the scatter plot\n    plt.figure()\n    plt.scatter(data['Feature1'], data['Feature2'], c=cluster_labels, cmap='rainbow')\n    plt.scatter(data.mean(axis=0)['Feature1'], data.mean(axis=0)['Feature2'], c='r', marker='x')\n    return cluster_labels, plt.gca()", "compilation_passed": true, "time": 0.014729976654052734, "tests_passed": true, "error": null}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"'data' should be a pandas.DataFrame\")\n\n    if not isinstance(n_clusters, int) or n_clusters < 2:\n        raise ValueError(\"'n_clusters' should be an integer greater than 1\")\n\n    kmeans = KMeans(n_clusters, random_state=42)\n    kmeans.fit(data.values)\n\n    # create a scatter plot using plt.scatter\n    centers = kmeans.cluster_centers_\n    colors = '0-10-20-40-80'.split('-')  # colors for the different clusters\n    colormap = list(zip(colors, kmeans.colors_))  # list of tuples for each cluster\n\n    # Create a scatter plot of the clustered points, colored by cluster\n    path_collection = PathCollection(\n        plt.scatter(data['Feature1'], data['Feature2'], c='k', cmap=colormap, edgecolors='k')\n    )\n    path_collection.", "compilation_passed": false, "time": 0.0002689361572265625, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"data must be a pd.DataFrame\")\n    elif n_clusters <= 1:\n        raise ValueError(\"n_clusters must be greater than 1\")\n\n    kmeans = KMeans(n_clusters=n_clusters, random_state=42)\n    kmeans.fit(data)\n    centroids = kmeans.cluster_centers_\n    labels = kmeans.labels_\n\n    plt.figure(figsize=(8, 8))\n    plt.title(\"K-Means Clustering\")\n    plt.scatter(data.iloc[:, 0], data.iloc[:, 1], c=labels)\n    plt.scatter(centroids[:, 0], centroids[:, 1], c='r', marker='o')\n\n    return labels, plt.gca()", "compilation_passed": true, "time": 0.015083074569702148, "tests_passed": true, "error": null}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"data must be a pandas DataFrame\")\n    if not isinstance(n_clusters, int) or n_clusters < 1:\n        raise ValueError(\"n_clusters must be an integer greater than 1\")\n\n    km = KMeans(n_clusters=n_clusters, random_state=42)\n    km.fit(data)\n\n    labels = np.array(km.labels_)\n\n    centroids = np.array(km.cluster_centers_)\n\n    fig, ax = plt.subplots()\n    ax.scatter(\n        data.iloc[:, 0],\n        data.iloc[:, 1],\n        c=labels,\n        cmap=plt.cm.Spectral,\n        s=50,\n        edgecolor=\"k\",\n        alpha=0.7,\n        zorder=10,\n    )\n    ax.scatter(\n        centroids[:, 0],\n        centroids[:, 1],\n        c=\"w\"", "compilation_passed": false, "time": 0.0002980232238769531, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Check 'data' type\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"'data' must be a pd.DataFrame\")\n\n    # Check 'n_clusters' value\n    if not isinstance(n_clusters, int) or n_clusters <= 1:\n        raise ValueError(\"'n_clusters' must be an integer greater than 1\")\n\n    # Calculate the K-Means centroids\n    kmeans = KMeans(n_clusters=n_clusters, random_state=0)\n    kmeans.fit(data)\n\n    # Create the scatter plot\n    x, y = data.values.T\n    c = kmeans.cluster_centers_.T\n    plt.figure(figsize=(6, 6))\n    plt.scatter(x, y, s=75, c=kmeans.labels_)\n    plt.scatter(c[0], c[1], c='r', s=100)\n    plt.axis('equal')\n\n    # Return cluster labels and Axes object\n    return kmeans.labels_", "compilation_passed": true, "time": 0.014461994171142578, "tests_passed": false, "error": "ValueError"}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"'data' must be a pd.DataFrame\")\n    if not isinstance(n_clusters, int) or n_clusters <= 1:\n        raise ValueError(\"'n_clusters' must be an integer greater than 1\")\n\n    # Perform K-means clustering\n    kmeans = KMeans(n_clusters=n_clusters)\n    kmeans.fit(data)\n\n    # Generate a scatter plot of the data, coloring the samples based on their cluster label\n    centroids = kmeans.cluster_centers_\n    labels = kmeans.labels_\n    plt.figure(figsize=(8, 8))\n    colors = ['red', 'green', 'blue', 'purple', 'orange', 'yellow', 'black', 'cyan', 'pink', 'brown']\n    centroids = centroids.astype(float)\n    paths = []\n    for i in range(n_clusters):\n        path = np.empty((0, 2), dtype=np.float6", "compilation_passed": false, "time": 0.0002849102020263672, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"'data' must be a pd.DataFrame\")\n    if not isinstance(n_clusters, int):\n        raise ValueError(\"'n_clusters' must be an integer greater than 1\")\n    if n_clusters < 2:\n        raise ValueError(\"'n_clusters' must be an integer greater than 1\")\n\n    kmeans = KMeans(n_clusters=n_clusters)\n    kmeans.fit(data)\n\n    labels = kmeans.labels_\n    centroids = kmeans.cluster_centers_\n\n    colors = [\n        'r' if i == 0 else 'b' if i == 1 else 'g' if i == 2 else 'c' for i in range(kmeans.n_clusters)\n    ]\n\n    fig, ax = plt.subplots()\n    ax.scatter(data['Feature1'], data['Feature2'], c='gray', s=1)\n    for i in range(kmeans.n_clusters):\n        ax.scatter(", "compilation_passed": false, "time": 0.00022792816162109375, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"Data must be a pandas DataFrame.\")\n\n    if not isinstance(n_clusters, int) or n_clusters < 2:\n        raise ValueError(\"Number of clusters must be greater than 1.\")\n\n    k_means = KMeans(n_clusters=n_clusters, random_state=42)\n    k_means.fit(data)\n    labels = k_means.labels_\n\n    centroids = k_means.cluster_centers_\n    centroids_path = PathCollection(centroids, linewidths=5, facecolors='none', label='Centroid')\n\n    data_path = PathCollection(data, cmap='tab10', label='Data')\n\n    fig, ax = plt.subplots(figsize=(5, 5))\n    ax.add_collection(data_path)\n    ax.add_collection(centroids_path)\n    ax.set_title('K-Means Clustering')\n    ax.legend(handles=[centroids_path, data", "compilation_passed": false, "time": 0.00023508071899414062, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Validate input\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"Data must be a pandas DataFrame.\")\n    elif not isinstance(n_clusters, int) or n_clusters < 1:\n        raise ValueError(\"n_clusters must be an integer greater than 1.\")\n\n    # Generate K-means clustering\n    kmeans = KMeans(n_clusters=n_clusters, random_state=42)\n    kmeans.fit(data.values)\n    y_pred = kmeans.labels_\n\n    # Plot results\n    fig, ax = plt.subplots()\n    centers = np.unique(y_pred, return_counts)\n    ax.scatter(data.iloc[:, 0], data.iloc[:, 1], c=y_pred)\n    for i, c in enumerate(centers[0]):\n        ax.scatter(\n            centers[1][i], centers[1][i], s=50, c=f\"C{i+1}\", alpha=1\n        )\n", "compilation_passed": true, "time": 0.013024091720581055, "tests_passed": false, "error": "NameError"}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError('data must be a pd.DataFrame.')\n    if not isinstance(n_clusters, int) or n_clusters <= 1:\n        raise ValueError('n_clusters must be an integer greater than 1.')\n    kmeans = KMeans(n_clusters=n_clusters)\n    kmeans.fit(data)\n    labels = kmeans.labels_\n    centroids = kmeans.cluster_centers_\n    centroid_paths = [plt.Path(path.vertices) for path in centroids]\n    ax = plt.gca()\n    ax.set_title('K-Means Clustering')\n    ax.set_xlim(0, 1)\n    ax.set_ylim(0, 1)\n    ax.grid()\n    ax.add_collection(PathCollection(centroid_paths, ax=ax,\n                                      edgecolor='black',\n                                      facecolor='white',\n                                      linewidth=1,\n                                      offsets=[centroids[i].mean(axis", "compilation_passed": false, "time": 0.0003237724304199219, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"Input data must be a pandas DataFrame.\")\n\n    if not isinstance(n_clusters, int) or n_clusters < 2:\n        raise ValueError(\"Number of clusters must be an integer greater than 1.\")\n\n    # perform K-means clustering\n    kmeans = KMeans(n_clusters=n_clusters, random_state=42)\n    kmeans.fit(data)\n\n    # generate a scatter plot showing the clusters and their centroids\n    plt.figure()\n    plt.title('K-Means Clustering')\n    centroids = data[kmeans.cluster_centers_.ravel() > 0]\n    centroids.plot(\n        sizes=0.2, color='white', ax=plt.gca(), zorder=0,\n        marker='x', markersize=15, linewidth=3,\n        markerfacecolor='red', zorder=100)\n    plt.scatter(data['Feature1'], data['Feature2'], c=k", "compilation_passed": false, "time": 0.0002300739288330078, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"'data' must be a pd.DataFrame.\")\n    if not isinstance(n_clusters, int) or n_clusters < 2:\n        raise ValueError(\"'n_clusters' must be an integer greater than 1.\")\n\n    # Step 1: Perform K-means clustering\n    kmeans = KMeans(n_clusters=n_clusters, random_state=0)\n    kmeans.fit(data)\n\n    # Step 2: Generate scatter plot visualizing the clusters and centroids\n    _, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(data['Feature1'], data['Feature2'], c=kmeans.labels_)\n    ax.scatter(data['Feature1'], data['Feature2'], c=kmeans.labels_, marker='x', s=100)\n    ax.set_title('K-Means Clustering')\n\n    # Step 3: Return labels and Axes object for use in other functions\n    return kmeans.", "compilation_passed": false, "time": 0.00020694732666015625, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"Input must be a pd.DataFrame\")\n    if not isinstance(n_clusters, int) or n_clusters < 2:\n        raise ValueError(\"n_clusters must be an integer greater than 1\")\n\n    k_means = KMeans(n_clusters=n_clusters).fit(data.to_numpy())\n    cluster_labels = k_means.labels_\n\n    plt.scatter(data['Feature1'], data['Feature2'], c=cluster_labels, cmap='Set2')\n    plt.legend(cluster_labels)\n\n    return cluster_labels, plt.gca()", "compilation_passed": true, "time": 0.002933025360107422, "tests_passed": true, "error": null}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"data must be a pandas DataFrame.\")\n    if not isinstance(n_clusters, int) or n_clusters < 1:\n        raise ValueError(\"n_clusters must be an integer greater than 1.\")\n\n    # Initialize a KMeans object with the specified number of clusters\n    kmeans = KMeans(n_clusters=n_clusters, random_state=42)\n    kmeans.fit(data)  # Fit the kmeans model to the data\n\n    # Extract the cluster centroids\n    centroids = kmeans.cluster_centers_\n\n    # Get the cluster labels for each sample\n    labels = kmeans.labels_\n\n    # Create a scatter plot\n    fig, ax = plt.subplots()\n    # Plot the data as points\n    ax.plot(data.iloc[:, 0], data.iloc[:, 1], marker='o', color='blue', linewidth=0)\n\n    # Plot the centroids as red dots\n    ax.plot(centroids", "compilation_passed": false, "time": 0.00021505355834960938, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Check that 'data' is a DataFrame\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"'data' must be a Pandas DataFrame\")\n\n    # Check that 'n_clusters' is an integer greater than 1\n    if not isinstance(n_clusters, int) or n_clusters <= 1:\n        raise ValueError(\"'n_clusters' must be an integer greater than 1\")\n\n    # Perform K-means clustering\n    km = KMeans(n_clusters=n_clusters, random_state=42)\n    km.fit(data)\n\n    # Get the centroids as a DataFrame\n    centroids = pd.DataFrame(km.cluster_centers_, columns=data.columns)\n\n    # Get the cluster labels and sort them by the row index\n    cluster_labels = km.predict(data)\n    sorted_labels = np.argsort(cluster_labels)\n\n    # Sort the labels in ascending order, since this is what matplotlib expects\n    cluster_labels = cluster_labels[sorted_labels]\n\n    # Generate", "compilation_passed": true, "time": 0.0024156570434570312, "tests_passed": false, "error": "TypeError"}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"Data must be a pandas DataFrame.\")\n    if not isinstance(n_clusters, int) or n_clusters < 2:\n        raise ValueError(\"n_clusters must be an integer greater than 1.\")\n    kmeans = KMeans(n_clusters=n_clusters, random_state=42)\n    kmeans.fit(data.values)\n    plt.figure(figsize=(10, 6))\n    centroids = kmeans.cluster_centers_\n    cluster_labels = kmeans.labels_\n    data['Cluster_Label'] = cluster_labels\n    path = data.groupby('Cluster_Label').plot(x='Feature1', y='Feature2', kind='scatter', marker='*', ax=plt.gca())\n    plt.show()\n    return cluster_labels, plt.gca()", "compilation_passed": true, "time": 0.025656700134277344, "tests_passed": true, "error": null}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"'data' must be a pandas DataFrame.\")\n    if not isinstance(n_clusters, int):\n        raise ValueError(\"'n_clusters' must be an integer greater than 1.\")\n    if n_clusters < 2:\n        raise ValueError(\"'n_clusters' must be greater than 1.\")\n\n    model = KMeans(n_clusters=n_clusters)\n    model.fit(data)\n    labels = model.labels_\n\n    centroids = model.cluster_centroids_\n    fig, ax = plt.subplots()\n    ax.scatter(data.iloc[:, 0], data.iloc[:, 1], c=labels)\n    ax.scatter(centroids[:, 0], centroids[:, 1], c='r', marker='x')\n    return labels, ax", "compilation_passed": true, "time": 0.0021860599517822266, "tests_passed": false, "error": "AttributeError"}
{"code": "X = data.values\n    model = KMeans(n_clusters=n_clusters)\n    model.fit(X)\n    labels, centroids = model.labels_, model.cluster_centroids_\n\n    centroid_colors = ['C0', 'C1', 'C2', 'C3', 'C4', 'C5', 'C6', 'C7', 'C8', 'C9']\n    centroids_paths = []\n\n    for idx, centroid in enumerate(centroids):\n        p = plt.scatter(centroid[0], centroid[1], s=100, marker='o', c=centroid_colors[labels == idx])\n        centroids_paths.append(p.get_paths()[0])\n\n    centroids = [centroid_paths[i] for i in model.labels_]\n    ax = plt.scatter(X[:, 0], X[:, 1], c=labels, alpha=0.4, marker='o')\n    ax.set_title('K-Means", "compilation_passed": false, "time": 0.00012302398681640625, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"'data' must be a pandas DataFrame.\")\n\n    if not isinstance(n_clusters, int) or n_clusters <= 1:\n        raise ValueError(\"'n_clusters' must be an integer greater than 1.\")\n\n    # Use KMeans to cluster data into 'n_clusters' clusters\n    kmeans = KMeans(n_clusters=n_clusters)\n    kmeans.fit(data.values)\n\n    # Assign cluster labels to samples and create a scatter plot of the data\n    clusters = kmeans.labels_\n    centroids = kmeans.cluster_centers_\n\n    # Define the colors for each cluster\n    cmap = plt.cm.get_cmap(\"viridis\")\n    colors = [cmap(i) for i in range(kmeans.n_clusters)]\n\n    # Create a scatter plot of the data and display the clusters and centroids\n    fig, ax = plt.subplots()\n    ax.scatter(data.Feature1, data.Feature2, c", "compilation_passed": false, "time": 0.0002110004425048828, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Checking inputs\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"Data must be a pandas DataFrame.\")\n    if not isinstance(n_clusters, int):\n        raise ValueError(\"n_clusters must be an integer greater than 1.\")\n    if n_clusters < 2:\n        raise ValueError(\"n_clusters must be greater than 1.\")\n\n    # Clustering\n    kmeans = KMeans(n_clusters=n_clusters)\n    kmeans.fit(data)\n    clusters = kmeans.labels_\n    centroids = kmeans.cluster_centers_\n\n    # Visualization\n    fig, ax = plt.subplots()\n    ax.scatter(data['Feature1'], data['Feature2'], c=clusters, marker='x')\n    ax.scatter(centroids[:, 0], centroids[:, 1], s=50, c='r', marker='x')\n    ax.set_title('K-Means Clustering')\n    ax.get_figure().canvas.draw()", "compilation_passed": true, "time": 0.033000946044921875, "tests_passed": false, "error": "TypeError"}
{"code": "# Check if data is a pandas DataFrame\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError('\"data\" must be a pandas DataFrame.')\n\n    # Check if n_clusters is an integer greater than 1\n    if not isinstance(n_clusters, int) or n_clusters <= 1:\n        raise ValueError(\"'n_clusters' must be an integer greater than 1.\")\n\n    # Perform K-means clustering\n    kmeans = KMeans(n_clusters=n_clusters, random_state=42).fit(data)\n\n    # Get the cluster labels and centroids\n    labels = kmeans.labels_\n    centroids = kmeans.cluster_centroids_\n\n    # Create scatter plot with centroids and clusters\n    fig, ax = plt.subplots()\n    ax.scatter(data.iloc[:, 0], data.iloc[:, 1], c=labels, s=50, edgecolors='black', alpha=0.5)\n    ax.scatter(centroids[:, 0], centroids[:,", "compilation_passed": false, "time": 0.0002989768981933594, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError('data must be a pd.DataFrame')\n    if not isinstance(n_clusters, int) or n_clusters < 2:\n        raise ValueError('n_clusters must be an integer greater than 1')\n\n    kmeans = KMeans(n_clusters=n_clusters)\n    kmeans.fit(data)\n\n    labels = kmeans.labels_\n    centroids = kmeans.cluster_centroids_\n\n    colors = ['blue', 'red', 'green', 'orange', 'purple', 'cyan', 'magenta', 'teal', 'pink', 'brown', 'yellow', 'lightgray']\n    cluster_colors = [colors[i] for i in range(n_clusters)]\n    cluster_colors_dict = {i: cluster_colors[i] for i in range(n_clusters)}\n\n    ax = data.plot(kind='scatter', color=cluster_colors_dict.get(labels))\n    for i in range(n_clusters):\n        cent", "compilation_passed": true, "time": 0.002346038818359375, "tests_passed": false, "error": "AttributeError"}
{"code": "# Check input\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(f\"'data' must be a pd.DataFrame, but received {type(data)}.\")\n    if not isinstance(n_clusters, int):\n        raise ValueError(f\"'n_clusters' must be an integer, but received {type(n_clusters)}.\")\n    if n_clusters < 2:\n        raise ValueError(f\"'n_clusters' must be greater than 1, but received {n_clusters}.\")\n\n    # Cluster data\n    kmeans = KMeans(n_clusters=n_clusters, random_state=0)\n    kmeans.fit(data)\n\n    # Get centroids\n    centroids = kmeans.cluster_centers_\n    centroid_features = [f for f in centroids[0]]\n    # Plot\n    plt.figure(figsize=(8, 8))\n    plt.scatter(\n        data[\"Feature1\"], data[\"Feature2\"], color=\"black\", s=100\n    )", "compilation_passed": true, "time": 0.013432979583740234, "tests_passed": false, "error": "TypeError"}
{"code": "X = data.to_numpy()\n    kmeans = KMeans(n_clusters=n_clusters)\n    kmeans.fit(X)\n    labels = kmeans.labels_\n\n    centers = kmeans.cluster_centers_\n    centers = pd.DataFrame(centers, columns=data.columns)\n    centers.set_index(data.index, inplace=True)\n\n    # Create the scatter plot\n    fig, ax = plt.subplots()\n    ax.scatter(data.loc[:, 'Feature1'], data.loc[:, 'Feature2'], c=labels, cmap=plt.cm.Spectral)\n    ax.scatter(centers.loc[:, 'Feature1'], centers.loc[:, 'Feature2'], s=100, c='black')\n\n    ax.set_title('K-Means Clustering')\n    ax.grid(True)\n\n    return (labels, ax)", "compilation_passed": true, "time": 0.002924203872680664, "tests_passed": false, "error": "ValueError"}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"'data' must be a pd.DataFrame\")\n\n    if not isinstance(n_clusters, int) or n_clusters < 2:\n        raise ValueError(\"'n_clusters' must be an integer greater than 1\")\n\n    # Create a k-means clustering object and fit it to the data.\n    kmeans = KMeans(n_clusters=n_clusters, random_state=42)\n    kmeans.fit(data)\n\n    # Get the cluster labels assigned to each sample and the centroid of each cluster.\n    cluster_labels = kmeans.labels_\n    centroids = kmeans.cluster_centroids_\n\n    # Create a scatter plot using matplotlib's PathCollection class.\n    # https://matplotlib.org/stable/api/_as_gen/matplotlib.collections.PathCollection.html\n    # https://matplotlib.org/stable/api/_as_gen/matplotlib.patches.Circle.html\n    fig, ax = plt.subplots()\n    ax.scatter(\n        data", "compilation_passed": false, "time": 0.00019502639770507812, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError('data must be a pd.DataFrame')\n    if not isinstance(n_clusters, int):\n        raise ValueError('n_clusters must be an integer')\n    if n_clusters <= 1:\n        raise ValueError('n_clusters must be greater than 1')\n\n    kmeans = KMeans(n_clusters=n_clusters)\n    kmeans.fit(data)\n    # get cluster labels\n    labels = kmeans.predict(data)\n\n    # create plot\n    fig, ax = plt.subplots(1, 1, figsize=(12, 8))\n    ax.set_title('K-Means Clustering')\n    ax.scatter(\n        data.iloc[:, 0], data.iloc[:, 1], c=labels, cmap='tab10', s=50,\n    )\n\n    # display centroids\n    centroids = kmeans.cluster_centers_\n    ax.scatter(\n        centroids[:, 0], centroids[:, 1", "compilation_passed": false, "time": 0.0002338886260986328, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"'data' must be a pd.DataFrame\")\n    if not isinstance(n_clusters, int):\n        raise ValueError(\"'n_clusters' must be an integer\")\n    if n_clusters < 2:\n        raise ValueError(\"'n_clusters' must be greater than 1\")\n\n    kmeans = KMeans(n_clusters=n_clusters).fit(data)\n    clusters = kmeans.labels_\n\n    # Create a scatter plot of the clustered points\n    fig, ax = plt.subplots()\n    ax.scatter(data['Feature1'], data['Feature2'], c=clusters)\n    centroids = [kmeans.cluster_centers_[i] for i in range(n_clusters)]\n    ax.plot(centroids[0][0], centroids[0][1], 'bo', linewidth=3)\n    for c, (x, y) in enumerate(centroids):\n        ax.annotate('Cluster {}'.format(c), (x, y", "compilation_passed": false, "time": 0.00025010108947753906, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError('data must be a pandas dataframe')\n    if not isinstance(n_clusters, int):\n        raise ValueError('n_clusters must be an integer')\n    if n_clusters < 2:\n        raise ValueError('n_clusters must be greater than 1')\n\n    model = KMeans(n_clusters=n_clusters)\n    model.fit(data)\n\n    centers = model.cluster_centers_\n    labels = model.labels_\n\n    plt.figure(figsize=(5, 5))\n    plt.scatter(data['Feature1'], data['Feature2'], c=labels, cmap='tab10')\n    plt.scatter(centers[:, 0], centers[:, 1], c='black', s=50)\n\n    return labels, plt.gca()", "compilation_passed": true, "time": 0.01453089714050293, "tests_passed": true, "error": null}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"'data' should be a DataFrame\")\n    if not isinstance(n_clusters, int) or n_clusters <= 1:\n        raise ValueError(\"'n_clusters' must be a positive integer\")\n\n    kmeans = KMeans(n_clusters=n_clusters, random_state=42)\n    kmeans.fit(data.values)\n    labels = kmeans.labels_\n    centroids = kmeans.cluster_centers_\n    colours = [\"red\", \"blue\", \"green\", \"orange\"]\n\n    fig, ax = plt.subplots(figsize=(8, 6))\n    ax.scatter(data.iloc[:, 0].values, data.iloc[:, 1].values, s=10, c='black', alpha=0.5)\n    ax.scatter(centroids[:, 0], centroids[:, 1], s=200, c=colours[labels], alpha=0.5)\n\n", "compilation_passed": true, "time": 0.013423919677734375, "tests_passed": false, "error": "TypeError"}
