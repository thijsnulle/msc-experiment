{"code": "# Create a dictionary to hold word frequencies\n    word_freqs = {}\n    for sentence_key, sentence_value in sentences_dict.items():\n        tokens = sentence_value.split()\n        for word in tokens:\n            word_freqs[word] = word_freqs.get(word, 0) + 1\n\n    # Convert the dictionary to a DataFrame\n    word_freq_df = pd.DataFrame(word_freqs).T\n    word_freq_df.columns = ['Frequency']\n\n    # Convert the DataFrame to a table\n    word_freq_df = pd.pivot_table(word_freq_df, index=word_freq_df.index, values='Frequency')\n    word_freq_df = word_freq_df.T\n\n    # Create a dictionary of word indices\n    word_idxs = dict(zip(word_freq_df.columns, range(len(word_freq_df.columns))))\n\n    # Create a dictionary of word positions in word_keys\n    word_pos = dict(zip(word_keys, [word_idx", "compilation_passed": false, "time": 0.00028014183044433594, "tests_passed": false, "error": "SyntaxError"}
{"code": "occurrences = [sentence.split(\" \").count(word) for sentence, word in zip(sentences_dict.values(), word_keys)]\n    occurrences = pd.Series(occurrences, index=sentences_dict.keys())\n\n    fig, ax = plt.subplots()\n\n    ax.barh(occurrences.index, occurrences, color='green')\n    ax.set_title('Frequency of Words')\n    ax.set_xlabel('Frequency')\n    ax.set_ylabel('Sentences')\n\n    return ax", "compilation_passed": true, "time": 0.0019600391387939453, "tests_passed": false, "error": "ValueError"}
{"code": "# -----------------------------------------------------------------------------------------------------------------\n    # Your Code\n\n    data = []\n    for word in word_keys:\n        for sentence in sentences_dict:\n            if word in sentences_dict[sentence].split(' '):\n                data.append((sentence, sentences_dict[sentence].split(' ').count(word)))\n\n    return plt.bar(data)\n    # -----------------------------------------------------------------------------------------------------------------", "compilation_passed": true, "time": 0.0015070438385009766, "tests_passed": false, "error": "TypeError"}
{"code": "# YOUR CODE HERE\n    freq_list = []\n    for key in word_keys:\n        if key in sentences_dict:\n            freq_list.append(len(sentences_dict[key].split()))\n        else:\n            freq_list.append(0)\n    ax = plt.bar(word_keys, freq_list, align='center', alpha=0.8, edgecolor='k')\n\n    return ax", "compilation_passed": true, "time": 0.0025391578674316406, "tests_passed": false, "error": "AttributeError"}
{"code": "# Initialize the occurrence counts\n    occurrence_counts = {word: 0 for word in word_keys}\n\n    # Iterate over sentences in sentences_dict\n    for sentence in sentences_dict.values():\n        # Split the sentence into words\n        words = sentence.split()\n\n        # Iterate over the words\n        for word in words:\n            # If the word is in the list of word keys, increment the occurrence count\n            if word in occurrence_counts.keys():\n                occurrence_counts[word] += 1\n\n    # Create a new dictionary with the occurrence counts\n    occurrence_counts = collections.OrderedDict(sorted(occurrence_counts.items(), key=lambda x: -x[1]))\n\n    # Plot the occurrence counts as a bar chart\n    fig, ax = plt.subplots()\n    ax.bar(occurrence_counts.keys(), occurrence_counts.values(), color='green')\n    return ax", "compilation_passed": true, "time": 0.012332916259765625, "tests_passed": true, "error": null}
{"code": "sentences_list = list(sentences_dict.keys())\n\n    occurrence_dict = {}\n\n    for sentence in sentences_list:\n        sentence = sentences_dict[sentence]\n        for word in word_keys:\n            if word not in occurrence_dict:\n                occurrence_dict[word] = sentence.count(word)\n            else:\n                occurrence_dict[word] += sentence.count(word)\n\n    df = pd.DataFrame(occurrence_dict.items(), columns=['Word', 'Occurrence'])\n    df = df.sort_values(by='Occurrence', ascending=False)\n    fig = df.plot.barh(x='Word', y='Occurrence', figsize=(10, 6))\n    fig.set_title('Word occurrence in sentences')\n    plt.show()\n\n    return fig", "compilation_passed": true, "time": 0.019442081451416016, "tests_passed": true, "error": null}
{"code": "fig, ax = plt.subplots(figsize=(12, 5))\n    ax.bar(word_keys, [sentences_dict[k].count(w) for w in word_keys for k in sentences_dict.keys()])\n    return ax", "compilation_passed": true, "time": 0.15401196479797363, "tests_passed": false, "error": "ValueError"}
{"code": "result = []\n\n    # TODO: Use pandas to convert sentences_dict to a DataFrame object\n    dataframe = pd.DataFrame(sentences_dict)\n\n    # TODO: Loop through the word_keys and add each word and its occurrence to the result list\n    for key in word_keys:\n        dataframe[key] = dataframe[key].value_counts()\n        result.append((key, dataframe[key]))\n\n    # TODO: Use the matplotlib.pyplot to make a bar chart with the result as the input\n    fig, ax = plt.subplots()\n    for key, data in result:\n        ax.barh(data.index, data)\n        ax.barh(data.index, data, alpha=0.3, color=\"pink\", label=key)\n    ax.set_xlabel(\"Frequencies\")\n    ax.set_ylabel(\"Words\")\n    ax.legend(loc=\"upper right\")\n    plt.show()\n\n    return ax", "compilation_passed": true, "time": 0.0024030208587646484, "tests_passed": false, "error": "ValueError"}
{"code": "fig, axs = plt.subplots(1,1,figsize=(10,5), constrained_layout=True)\n    axs.set_title('Frequencies', fontweight='bold', fontsize=15)\n    x = word_keys\n    y = [sentences_dict[k].count(word) for word in x]\n    pd.DataFrame({\"word\": x, \"value\": y}).plot(kind=\"bar\", ax=axs, rot=0)\n    return axs", "compilation_passed": true, "time": 0.011384010314941406, "tests_passed": false, "error": "NameError"}
{"code": "occurrence = collections.Counter()\n    for sentence in sentences_dict:\n        for word in sentences_dict[sentence].split():\n            occurrence[word] += 1\n    print(occurrence)\n    # # Get the occurrence of each word in the list\n    # word_freq = []\n    # for word in word_keys:\n    #     word_freq.append(occurrence[word])\n    # # print(word_freq)\n    # # print(sum(word_freq))\n\n    # # Generate a bar chart\n    # plt.rcParams['font.family'] = ['Times New Roman']\n    # fig, ax = plt.subplots()\n    # bar = ax.barh(word_keys, word_freq, color='red')\n    # ax.set_xticks([0, 5, 10, 15, 20])\n    # # ax.set_yticks(word_keys)\n    # ax.set_yticks([word_keys[0]], [word_keys[1]], [word_keys[2]], [", "compilation_passed": true, "time": 0.0010440349578857422, "tests_passed": false, "error": "AttributeError"}
{"code": "word_freqs = []\n\n    for i in word_keys:\n        # Iterate through sentences\n        word_count = 0\n        for sentence_value in sentences_dict.values():\n            # Iterate through sentences\n            sentence = sentence_value\n            tokens = sentence.split()\n            word_count += tokens.count(i)\n\n        word_freqs.append((i, word_count))\n\n    df = pd.DataFrame(word_freqs, columns=['word', 'count'])\n    df_transpose = df.transpose()\n    return plt.barh(df_transpose.word, df_transpose.count, alpha=0.5, color='green')", "compilation_passed": true, "time": 0.0022373199462890625, "tests_passed": false, "error": "AttributeError"}
{"code": "words_freq = collections.defaultdict(lambda: 0)\n    for sentence_key, sentence in sentences_dict.items():\n        sentence = sentence.split()\n        for word in sentence:\n            if word in word_keys:\n                words_freq[word] += 1\n    return plt.bar(range(len(word_keys)), words_freq.values(), align='center')", "compilation_passed": true, "time": 0.0017309188842773438, "tests_passed": false, "error": "AttributeError"}
{"code": "# 1. get all words from sentences_dict\n    all_words = []\n    for key, value in sentences_dict.items():\n        words = value.split(\" \")\n        all_words += words\n\n    # 2. sort the words in all_words in alphabetical order\n    sorted_words = sorted(all_words)\n\n    # 3. get the counts of each word in sorted_words\n    counts_dict = {}\n    for word in sorted_words:\n        if word in counts_dict:\n            counts_dict[word] += 1\n        else:\n            counts_dict[word] = 1\n\n    # 4. get the occurrence of each word from word_keys in counts_dict\n    bar_values = []\n    for word in word_keys:\n        bar_values.append(counts_dict.get(word, 0))\n\n    # 5. create the bar chart\n    x_axis = [index for index, _ in enumerate(word_keys)]\n    y_axis = bar_values\n    bar = plt.bar(x_axis, y", "compilation_passed": false, "time": 0.00024318695068359375, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Create a dictionary to store word frequencies\n    word_freq = collections.defaultdict(int)\n\n    # Count the occurrences of each word in all sentences\n    for sentence in sentences_dict.values():\n        for word in sentence.split():\n            word_freq[word] += 1\n\n    # Create a Pandas DataFrame from the word frequencies\n    freq_df = pd.DataFrame({'Word': word_keys, 'Frequency': word_freq.values()})\n\n    # Create a bar plot using Pandas\n    fig, ax = plt.subplots()\n    freq_df.plot.bar(ax=ax, x='Word', y='Frequency')\n    ax.set_xlabel('Word')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Frequency of Words')\n    return ax", "compilation_passed": true, "time": 0.0018470287322998047, "tests_passed": false, "error": "ValueError"}
{"code": "# Make the data series\n    words_count_dict = collections.Counter()\n    for sentence, words in sentences_dict.items():\n        for word in words.split(' '):\n            words_count_dict.update([word])\n    # Make the dataframe\n    df = pd.DataFrame(words_count_dict, columns=['words', 'count']).set_index('words')\n\n    # Filter the dataframe\n    df = df.loc[word_keys]\n\n    # Plot the dataframe\n    df.sort_values(by=['count'], inplace=True, ascending=False)\n    df.plot.bar(color=\"blue\")\n    return plt.gca()", "compilation_passed": true, "time": 0.0027871131896972656, "tests_passed": false, "error": "KeyError"}
{"code": "occurrences = collections.defaultdict(int)\n    for sentence, text in sentences_dict.items():\n        for word in text.split():\n            if word in word_keys:\n                occurrences[word] += 1\n    fig, ax = plt.subplots()\n    ax.bar(range(len(occurrences)), occurrences.values(), tick_label=list(occurrences.keys()))\n    ax.set_title(f'Frequency of Words in {len(occurrences)} Sentences')\n    ax.set_ylabel('Frequency')\n    ax.set_xticks(range(len(occurrences)))\n    ax.set_xticklabels(occurrences.keys())\n    return ax", "compilation_passed": true, "time": 0.012269020080566406, "tests_passed": true, "error": null}
{"code": "data = [0, 0, 0]\n    # Data preparation for data analysis\n    # For each sentence in the sentences dictionary, count the number of times the given word occurs in each sentence\n    # If the given word is not found in any of the sentences, the count is zero\n    # This is because we assume that all words will be lowercase and hence unique\n    for sentence in sentences_dict.values():\n        for word in sentence.split():\n            if word in word_keys:\n                data[word_keys.index(word)] += 1\n    # Create a Pandas DataFrame containing the data and apply the 'pivot_table' method to the 'index' column\n    df = pd.DataFrame({\n        'words': word_keys,\n        'counts': data\n    })\n    # Display the word count for the given word\n    df_result = df.pivot_table(index=\"words\", values=\"counts\")\n    # Bar chart for the word count\n    ax = plt.bar(df_result.index, df_result[\"counts\"])\n    # Return the Axes object\n", "compilation_passed": true, "time": 0.0015041828155517578, "tests_passed": false, "error": "ValueError"}
{"code": "sentences_df = pd.DataFrame(sentences_dict, index=['Sentence1', 'Sentence2', 'Sentence3'])\n\n    word_freq = sentences_df.apply(lambda x: x.split()).map(pd.Series.value_counts)\n    word_freq_df = pd.DataFrame(word_freq)\n\n    freq_df = word_freq_df.loc[word_keys]\n    freq_df.sort_values(by='count', ascending=False, inplace=True)\n    freq_df.plot.bar()\n    return plt.gca()", "compilation_passed": true, "time": 0.0014879703521728516, "tests_passed": false, "error": "AttributeError"}
{"code": "# You may assume that word_keys contains only words that appear in sentences_dict\n\n    # Step 1: Create the x,y-axis labels as lists\n    x = []\n    y = []\n\n    for i in range(len(word_keys)):\n        # Create the list of words (x) that appear in the sentences_dict.\n        x.append(word_keys[i])\n        # Create the list of occurrences (y) that appear in the sentences_dict.\n        y.append(sentences_dict[x[i]])\n\n    # Create the list of all the words that appear in sentences_dict (z)\n    z = list(sentences_dict.keys())\n\n    # Step 2: Create the DataFrame\n    df = pd.DataFrame(index=x, data=y)\n    df.reset_index(inplace=True)\n    df.columns = ['words', 'frequency']\n\n    # Step 3: Group the DataFrame by the words\n    df = df.groupby('words')\n\n    # Step 4: Create the dictionary that will be used to store", "compilation_passed": true, "time": 0.0010540485382080078, "tests_passed": false, "error": "KeyError"}
{"code": "fig, ax = plt.subplots(1,1)\n\n    for word in word_keys:\n        data = sentences_dict[\"Sentence1\"].split()\n        count = collections.Counter(data).get(word)\n\n        ax.bar(word, count)\n\n    return ax", "compilation_passed": true, "time": 0.014322757720947266, "tests_passed": false, "error": "TypeError"}
{"code": "# Get counts\n    counts = []\n    for sentence in sentences_dict:\n        counts.append(collections.Counter(word_keys).get(sentence))\n\n    # Create DataFrame\n    df = pd.DataFrame(counts)\n\n    # Plot counts\n    df.plot(kind=\"bar\", rot=0)\n    return plt.gca()", "compilation_passed": true, "time": 0.001993894577026367, "tests_passed": false, "error": "TypeError"}
{"code": "occurrences_dict = {key: sentences_dict[key].lower().count(key) for key in sentences_dict}\n\n    occurrences_df = pd.DataFrame(occurrences_dict, index=list(word_keys))\n\n    occurrences_df['Freq'] = occurrences_df[list(word_keys)].sum(axis=1)\n\n    occurrences_df = occurrences_df.sort_values('Freq', ascending=False)\n\n    occurrences_df.index = [\"Freq of '{}'\".format(key) for key in word_keys]\n    occurrences_df = occurrences_df.T\n\n    fig, ax = plt.subplots(1, 1, figsize=(8, 6))\n    occurrences_df.plot.bar(ax=ax, rot=0, alpha=0.5, legend=False)\n    ax.set_ylabel('Frequency')\n    ax.set_xlabel('Words')\n    ax.set_title(\"Frequency of '{}'\".format(' '.join(", "compilation_passed": false, "time": 0.0002779960632324219, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Task code\n    # Initialization of a new dictionary called 'result' to store the occurrences of the input words\n    result = {}\n\n    # Loop over the words in the list 'word_keys'\n    for word in word_keys:\n        # Initialize the occurrence of the word to 0\n        result[word] = 0\n\n    # Loop over the sentences in the dictionary 'sentences_dict'\n    for sentence in sentences_dict.values():\n        # Loop over the words in the sentence\n        for word in sentence.split():\n            # If the word is in the list 'WORDS', increment its occurrence count by 1\n            if word in WORDS:\n                result[word] += 1\n\n    # Create a bar chart of the occurrences of the input words\n    fig, ax = plt.subplots()\n    ax.bar(list(result.keys()), list(result.values()), color='orange', width=0.5)\n    ax.set_ylabel('Word count')\n    ax.set_xlabel('Words')\n    ax.set_title('Bar chart of occurrences')\n    return", "compilation_passed": true, "time": 0.012057065963745117, "tests_passed": false, "error": "AttributeError"}
{"code": "# Initialize bar chart\n    x_pos = [i for i in range(len(word_keys))]\n    bar_width = 0.25\n\n    bars = [matplotlib.patches.Rectangle((x_pos[i], 0), bar_width, 1,\n                                       facecolor='lightgreen', alpha=1, label='Freq.')\n                  for i in range(len(word_keys))]\n    ax = plt.subplot()\n    ax.barh(x_pos, WORDS, width=bar_width, align='center')\n\n    # Calculate word frequencies\n    for i, sentence_key in enumerate(sentences_dict.keys()):\n        sent = sentences_dict[sentence_key]\n        words = sent.split()\n        freq = collections.Counter(words)\n        for word in word_keys:\n            if word in freq:\n                bars[i].set_height(freq[word])\n                bars[i].set_x(freq[word])\n                bars[i].set_color('red')\n    plt", "compilation_passed": true, "time": 0.0012760162353515625, "tests_passed": false, "error": "NameError"}
{"code": "data = []\n    for sentence, value in sentences_dict.items():\n        temp = []\n        for word in value.split():\n            temp.append(word_keys.count(word))\n        data.append(temp)\n    data = pd.DataFrame(data, columns=word_keys)\n    ax = data.plot.bar(rot=0)\n    ax.set_ylabel('Occurrence')\n    ax.set_xticklabels(word_keys)\n    return ax", "compilation_passed": true, "time": 0.0013761520385742188, "tests_passed": false, "error": "ValueError"}
{"code": "for sentence, words in sentences_dict.items():\n        sentences_dict[sentence] = words.lower().split()\n    data = []\n    for words in sentences_dict.values():\n        for word in word_keys:\n            if word in words:\n                data.append(1)\n            else:\n                data.append(0)\n    return plt.bar(x=data, width=1, color='grey', align='center')", "compilation_passed": true, "time": 0.0010190010070800781, "tests_passed": false, "error": "TypeError"}
{"code": "# The pandas.core.frame.DataFrame class is an immutable two-dimensional size-mutable,\n    # Python data structure with axis labels and a data array.\n    # The data array can be any NumPy array or Python list.\n\n    # 1. DataFrame() returns a DataFrame object\n    # 2. df.plot()\n    #    or\n    #    df.plot(kind='bar')\n    #    or\n    #    df.plot(kind='bar', stacked=True)\n    #    or\n    #    df.plot(kind='bar', color='b', alpha=0.4)\n    #    or\n    #    df.plot(kind='bar', marker='o', ms=7)\n    #    or\n    #    df.plot(kind='bar', marker='*', markeredgecolor='k')\n    #    or\n    #    df.plot(kind='bar', marker='^', markeredgecolor='g', markersize=5, linewidth=3)\n\n    # Step 1: create a dataframe", "compilation_passed": true, "time": 0.0008840560913085938, "tests_passed": false, "error": "AttributeError"}
{"code": "result = pd.DataFrame(\n        sentences_dict[word_keys[0]].split()\n    ).value_counts(normalize=True)\n\n    # Use a dictionary to plot multiple bars for different words\n    fig, ax = plt.subplots()\n    for index, key in enumerate(word_keys):\n        ax.bar(\n            key,\n            result[key],\n            0.8,\n            label=f'Sentences containing \"{key}\": {len(sentences_dict[key])}'\n        )\n    ax.set_ylabel('Proportion')\n    ax.set_xlabel('Words')\n    ax.set_title('Proportion of certain words in different sentences')\n    ax.legend()\n    return ax", "compilation_passed": true, "time": 0.0010192394256591797, "tests_passed": false, "error": "KeyError"}
{"code": "word_counts = {}\n    for key in word_keys:\n        counts = [\n            value\n            for value in sentences_dict.values()\n            if key in value\n        ]\n        word_counts[key] = collections.Counter(counts).most_common()[0][1]\n    word_df = pd.DataFrame(word_counts.items(), columns=['word', 'counts'])\n    fig = plt.subplots(1, 1)\n    ax = fig.add_subplot(111)\n    word_df.plot.bar(ax=ax, column='counts', x='word')\n    ax.set_xticks(ax.get_xticks())\n    ax.set_xticklabels(word_keys)\n    ax.set_ylabel('Frequency')\n    ax.set_xlabel('Words')\n    ax.grid(True)\n    plt.show()\n    return ax", "compilation_passed": true, "time": 0.01165008544921875, "tests_passed": false, "error": "AttributeError"}
{"code": "# Create a new dictionary to store the occurrences\n    occurrence = collections.defaultdict(int)\n\n    # Loop through each key and value in the sentences_dict\n    for key, value in sentences_dict.items():\n        # Split the string into words\n        words = value.split()\n\n        # Loop through the words and count the occurrence of each word\n        for word in words:\n            if word in word_keys:\n                occurrence[word] += 1\n\n    # Convert the occurrence dictionary into a pandas Series and plot a bar chart\n    occurrence = pd.Series(occurrence).sort_index()\n    occurrence.plot(kind='bar')\n    return plt.gca()", "compilation_passed": true, "time": 0.0064389705657958984, "tests_passed": true, "error": null}
