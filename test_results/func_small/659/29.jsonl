{"code": "# Create a figure object\n    fig = plt.figure()\n    # Plot each pair of data points using Matplotlib\n    for i, (x, y) in enumerate(zip(x, y)):\n        # Calculate the x and y values for the histogram\n        hist_x, hist_y = stats.norm.pdf(np.linspace(-5, 5, 1000), loc=x, scale=2), np.histogram(y, bins=100, density=True)[:][0]\n        # Plot the histogram\n        plt.plot(hist_x, hist_y, label=labels[i])\n    # Add a legend\n    plt.legend(loc='best')\n    # Return the figure object\n    return fig", "compilation_passed": true, "time": 0.012262821197509766, "tests_passed": false, "error": "ValueError"}
{"code": "fig, ax = plt.subplots()\n    for i in range(len(x)):\n        x_array, y_array = x[i], y[i]\n        ax.plot(x_array, y_array, label=labels[i])\n        ax.axhline(y=0, color='black', ls='--')\n        ax.axvline(x=0, color='black', ls='--')\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.08170294761657715, "tests_passed": true, "error": null}
{"code": "fig = plt.figure()\n    for i in range(len(x)):\n        plt.subplot(2,2,i+1)\n        plt.hist(x[i], bins=10)\n        plt.xlabel('x')\n        plt.ylabel('y')\n        plt.title(labels[i])\n        plt.grid()\n    for i in range(len(y)):\n        plt.subplot(2,2,i+4)\n        plt.hist(y[i], bins=10)\n        plt.xlabel('x')\n        plt.ylabel('y')\n        plt.title(labels[i])\n        plt.grid()\n    return fig", "compilation_passed": true, "time": 0.034017086029052734, "tests_passed": false, "error": "ValueError"}
{"code": "fig = plt.figure()\n    fig.suptitle('Draw normal distributions')\n    for i, (x_i, y_i) in enumerate(zip(x, y)):\n        ax = fig.add_subplot(1, len(x), i + 1)\n        ax.set_title(labels[i])\n        for j in range(len(x_i)):\n            ax.plot(x_i[j], y_i[j], 'o')\n        # Plot distribution\n        ax.plot(*stats.norm.ppf([0.0001, 0.9999], loc=0, scale=np.std(x_i)), 'k-', alpha=0.4)\n    plt.show()\n    return fig", "compilation_passed": true, "time": 0.09056901931762695, "tests_passed": true, "error": null}
{"code": "fig = plt.figure()\n    ax = fig.add_subplot(111, projection='3d')\n    for x_arr, y_arr, label in zip(x, y, labels):\n        ax.scatter(x_arr, y_arr, label=label)\n    plt.xlabel('x')\n    plt.ylabel('y')\n    plt.legend()\n    return fig", "compilation_passed": true, "time": 0.0872189998626709, "tests_passed": true, "error": null}
{"code": "fig, axs = plt.subplots(nrows=len(labels), ncols=2, figsize=(12,10))\n    for i, label in enumerate(labels):\n        for j, arr in enumerate(x[i], j):\n            axs[i, 0].scatter(arr, y[i][j])\n            axs[i, 0].axhline(y=0, color='k')\n            axs[i, 0].axvline(x=0, color='k')\n            axs[i, 0].set_title(label)\n            axs[i, 0].set_xlabel('x')\n            axs[i, 0].set_ylabel('y')\n            axs[i, 1].axhline(y=0, color='k')\n            axs[i, 1].axvline(x=0, color='k')\n            axs[i, 1].set_title(label)\n            axs[i, 1].set_xlabel('x')\n", "compilation_passed": true, "time": 0.0295560359954834, "tests_passed": false, "error": "UnboundLocalError"}
{"code": "fig = plt.figure()\n\n    # Iterate over x, y and labels arrays simultaneously\n    for i, x_arr, y_arr, label in zip(range(len(x)), x, y, labels):\n        plt.subplot(3, 1, i + 1)\n        # Plotting a normal distribution\n        norm = stats.norm\n        x_plot = norm.rvs(loc=x_arr.mean(), scale=x_arr.std(), size=1000, random_state=i + 100)\n        plt.hist(x_plot, bins=20, density=True)\n        plt.plot(x_plot, norm.pdf(x_plot), lw=4, alpha=0.6, color='r')\n        plt.text(0.9, 0.1, label, transform=plt.gca().transAxes, color='#1f77b4',\n                fontsize=18)\n\n    plt.show()\n    return fig", "compilation_passed": true, "time": 0.5553390979766846, "tests_passed": true, "error": null}
{"code": "fig = plt.figure()\n    ax = fig.add_subplot(111)\n\n    for i in range(len(x)):\n        x_array = x[i]\n        y_array = y[i]\n        ax.plot(x_array, y_array, label=labels[i])\n\n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n    ax.set_title('Normal distribution')\n    ax.legend()\n\n    return fig", "compilation_passed": true, "time": 0.06897497177124023, "tests_passed": true, "error": null}
{"code": "fig, axs = plt.subplots(1, len(x), figsize=(15, 3))\n    for i in range(len(x)):\n        ax = axs[i]\n        ax.scatter(x[i], y[i], label=labels[i])\n        ax.set_xlabel('x')\n        ax.set_ylabel('y')\n        ax.set_title(labels[i])\n    fig.legend(loc='upper left')\n    return fig", "compilation_passed": true, "time": 0.05104327201843262, "tests_passed": false, "error": "TypeError"}
{"code": "fig, axes = plt.subplots(nrows=3, ncols=1)\n\n    for i, (xi, yi, label) in enumerate(zip(x, y, labels)):\n        if i == 0:\n            ax = axes[i]\n        else:\n            ax = axes[i].twinx()\n        ax.set_ylabel(label)\n        ax.plot(xi, yi)\n\n    fig.suptitle('Normal Distributions')\n\n    fig.tight_layout()\n\n    return fig", "compilation_passed": true, "time": 0.26923394203186035, "tests_passed": true, "error": null}
{"code": "fig, ax = plt.subplots()\n    for i in range(len(x)):\n        ax.plot(x[i], y[i], label=labels[i])\n        ax.axhline(y=0, color='r', linewidth=1)\n        ax.axvline(x=0, color='r', linewidth=1)\n        ax.spines['right'].set_color('none')\n        ax.spines['top'].set_color('none')\n        ax.xaxis.set_ticks_position('bottom')\n        ax.yaxis.set_ticks_position('left')\n    ax.legend()\n    return fig", "compilation_passed": true, "time": 0.07593083381652832, "tests_passed": true, "error": null}
{"code": "fig, axes = plt.subplots(len(x), len(y), sharey=True, squeeze=False)\n    for i in range(len(x)):\n        for j in range(len(y)):\n            ax = axes[i][j]\n            ax.set_title(labels[i])\n            ax.plot(x[i], y[i], color='black')\n            ax.plot(x[i], stats.norm.pdf(x[i]), '--', color='black')\n            ax.plot(x[i], stats.norm.cdf(x[i]), '--', color='black')\n            ax.fill_between(x[i], 0, stats.norm.pdf(x[i]), color='red')\n    return fig", "compilation_passed": true, "time": 0.15920710563659668, "tests_passed": true, "error": null}
{"code": "fig = plt.figure()\n    for i, (x_data, y_data, label) in enumerate(zip(x, y, labels)):\n        ax = fig.add_subplot(1, len(x), i + 1)\n        ax.plot(x_data, y_data, 'ro')\n        ax.set_title(label)\n        ax.set_xlabel('x')\n        ax.set_ylabel('y')\n    return fig", "compilation_passed": true, "time": 0.0905311107635498, "tests_passed": true, "error": null}
{"code": "fig, ax = plt.subplots()\n    ax.set_xlim(0, 12)\n    ax.set_ylim(-10, 100)\n    for i in range(len(x)):\n        ax.plot(x[i], y[i], linewidth=2, color=\"darkred\")\n        ax.text(x[i][-1], y[i][-1], labels[i], fontsize=15, color='green')\n    return fig", "compilation_passed": true, "time": 0.07068085670471191, "tests_passed": true, "error": null}
{"code": "fig = plt.figure()\n    for i in range(len(labels)):\n        ax = plt.subplot(3, 1, i+1)\n        ax.spines['left'].set_position(('data', 0))\n        ax.spines['right'].set_color('none')\n        ax.spines['top'].set_color('none')\n        ax.spines['bottom'].set_position(('data', 0))\n        ax.xaxis.set_ticks_position('none')\n        ax.yaxis.set_ticks_position('none')\n        ax.plot(x[i], y[i], label=labels[i])\n        # Add arrow to the right of the plot\n        arrowprops = dict(\n            arrowstyle='->',\n            connectionstyle='angle,angleA=0,angleB=90,shrinkA=0,shrinkB=0',\n        )\n        arrow = plt.arrow(0, 0, 0, 1, **arrowprops)\n        arrow.set(transform=plt", "compilation_passed": false, "time": 0.00029921531677246094, "tests_passed": false, "error": "SyntaxError"}
{"code": "fig = plt.figure()\n    for i, (x_i, y_i) in enumerate(zip(x, y)):\n        # Normal distribution of each x-value\n        plt.plot(x_i, stats.norm.pdf(x_i), label=labels[i])\n    return fig", "compilation_passed": true, "time": 0.06751799583435059, "tests_passed": true, "error": null}
{"code": "# YOUR CODE HERE\n    pass", "compilation_passed": true, "time": 0.0010280609130859375, "tests_passed": true, "error": null}
{"code": "fig, axs = plt.subplots(1, len(x), figsize=(8,6), sharey=True, clear=False)\n    for ax, (x, y) in zip(axs, zip(x, y)):\n        ax.hist(x, y, np.histogram_bin_edges(x, bins=20), density=True)\n        ax.plot(x, y, 'k.')\n        ax.set_xlabel('x', fontsize=14)\n        ax.set_xticks([])\n        ax.set_yticks(np.linspace(0, 0.4, 5))\n    return fig", "compilation_passed": true, "time": 0.06243586540222168, "tests_passed": false, "error": "TypeError"}
{"code": "fig, axs = plt.subplots(len(x), len(x), squeeze=False)\n\n    for i in range(len(x)):\n        for j in range(len(x[i])):\n            x1, y1 = x[i][j], y[i][j]\n            x2, y2 = x[i], y[i]\n            axs[i][j].plot(x1, y1, linestyle='--', color='r', linewidth=1)\n            axs[i][j].plot(x2, y2, linestyle='-', color='b', linewidth=1)\n            axs[i][j].set_xlabel(f'x{i+1}')\n            axs[i][j].set_ylabel(f'y{i+1}')\n            axs[i][j].set_title(f'Task_{i+1}_{j+1}')\n            axs[i][j].set_xticks(x2)\n            axs[i][j].set", "compilation_passed": true, "time": 0.04379105567932129, "tests_passed": true, "error": null}
{"code": "fig = plt.figure(figsize=(8, 6))\n    fig.suptitle(\"Multiple Distribution Graph\")\n\n    # Set the number of rows and columns based on the number of arrays in the x and y lists\n    n_rows = len(x)\n    n_columns = len(x)\n\n    # Calculate the width and height of each subplot based on the number of rows and columns\n    width = 1/n_columns\n    height = 1/n_rows\n\n    # Loop through each pair of (x, y) arrays and plot a distribution for each\n    for i, (x_arr, y_arr) in enumerate(zip(x, y)):\n        ax = fig.add_subplot(n_rows, n_columns, i+1)\n\n        # Set the axis limits based on the min and max values in each array\n        x_min = np.min(x_arr)\n        x_max = np.max(x_arr)\n        y_min = np.min(y_arr)\n        y_max = np.max(y_arr)\n        ax", "compilation_passed": true, "time": 0.021419048309326172, "tests_passed": true, "error": null}
{"code": "fig = plt.figure()\n\n    for i, (x_arr, y_arr) in enumerate(zip(x, y)):\n        plt.subplot(2, 2, i + 1)\n        stats.probplot(x_arr, plot=plt.xlabel('x', fontsize=14),\n                       label=labels[i])\n        stats.probplot(y_arr, plot=plt.ylabel('y', fontsize=14),\n                       label=labels[i])\n    plt.tight_layout()\n    return fig", "compilation_passed": true, "time": 0.01636195182800293, "tests_passed": false, "error": "TypeError"}
{"code": "fig = plt.figure(figsize=(6,6))\n    ax1 = fig.add_subplot(111)\n    ax1.set_title('Normal distribution')\n    for i in range(len(x)):\n        ax1.scatter(x[i], y[i], label=labels[i])\n    return fig", "compilation_passed": true, "time": 0.07195687294006348, "tests_passed": true, "error": null}
{"code": "fig = plt.figure(figsize=(10, 5))\n    for i, (x_i, y_i) in enumerate(zip(x, y)):\n        plt.scatter(x_i, y_i, c=i)\n        plt.plot(x_i, y_i, '-', linewidth=2, label=labels[i])\n        plt.title(labels[i])\n        plt.xlabel('x')\n        plt.ylabel('y')\n    plt.legend()\n    return fig", "compilation_passed": true, "time": 0.014381170272827148, "tests_passed": false, "error": "ValueError"}
{"code": "fig, axs = plt.subplots(1, len(x), figsize=(10, 5))\n    for i, (xi, yi, label) in enumerate(zip(x, y, labels)):\n        axs[i].hist(xi, density=True, label=label)\n        axs[i].set_xlabel(label)\n\n    fig.suptitle(\"Histograms of Normal Distributions\")\n    fig.tight_layout()\n    plt.show()\n\n    return fig", "compilation_passed": true, "time": 0.11512923240661621, "tests_passed": false, "error": "TypeError"}
{"code": "fig, axs = plt.subplots(len(x))\n    for i, (xi, yi) in enumerate(zip(x, y)):\n        axs[i].plot(xi, yi, label=labels[i])\n        axs[i].legend()\n        axs[i].set_xlabel('X')\n        axs[i].set_ylabel('Y')\n        axs[i].set_title(labels[i])\n    fig.set_tight_layout(True)\n    return fig", "compilation_passed": true, "time": 0.05341315269470215, "tests_passed": false, "error": "TypeError"}
{"code": "# Task #1\n    fig = plt.figure()\n\n    for i in range(len(x)):\n        x_data = x[i]\n        y_data = y[i]\n        label = labels[i]\n\n        # Task #2\n        normal_dist = stats.norm\n\n        # Task #3\n        sample_size = len(x_data)\n\n        # Task #4\n        x_axis_normal_dist = np.linspace(0, len(x_data) - 1, sample_size)\n\n        # Task #5\n        x_axis_normal_dist = np.random.normal(x_axis_normal_dist)\n\n        # Task #6\n        x_axis_normal_dist_mean = np.mean(x_data)\n\n        # Task #7\n        x_axis_normal_dist_std = np.std(x_data)\n\n        # Task #8\n        y_data_normal_dist = normal_dist.pdf(y_data, x_axis_normal_dist_mean, x_axis_normal_dist_", "compilation_passed": false, "time": 0.00024700164794921875, "tests_passed": false, "error": "SyntaxError"}
{"code": "fig, ax = plt.subplots()\n\n    for i, (x1, y1) in enumerate(zip(x, y)):\n        ax.plot(x1, y1, label=labels[i])\n\n    ax.set_title('Normal Distribution')\n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n    ax.legend()\n    ax.grid()\n\n    return fig", "compilation_passed": true, "time": 0.07447504997253418, "tests_passed": true, "error": null}
{"code": "fig, axes = plt.subplots(1, 3, figsize=(9, 3))\n\n    for ax, x, y, label in zip(axes, x, y, labels):\n        ax.set_title(label)\n        ax.plot(x, y, 'o')\n        ax.set_xlim(0, max(x))\n        ax.set_ylim(0, max(y))\n\n    fig.suptitle('Plot of three different normal distributions', fontsize=16)\n    plt.show()\n    return fig", "compilation_passed": true, "time": 0.10370612144470215, "tests_passed": true, "error": null}
{"code": "fig, ax = plt.subplots()\n    for x1, y1, label in zip(x, y, labels):\n        ax.plot(x1, y1, label=label)\n        ax.set_xlabel('x')\n        ax.set_ylabel('y')\n        ax.legend()\n        ax.grid()\n    plt.show()\n    return fig", "compilation_passed": true, "time": 0.07795310020446777, "tests_passed": true, "error": null}
{"code": "fig = plt.figure()\n    for i, label in enumerate(labels):\n        plt.scatter(x[i], y[i], label=label)\n        plt.xlabel('x')\n        plt.ylabel('y')\n    plt.legend()\n    return fig", "compilation_passed": true, "time": 0.5841479301452637, "tests_passed": true, "error": null}
