{"code": "if seed is not None:\n        np.random.seed(seed)\n\n    if columns:\n        # Create shuffled columns list\n        columns = np.random.permutation(columns).tolist()\n        # Create shuffled columns list with unique keys\n        # For case:\n        # ['A', 'B', 'B', 'A', 'A', 'C'] => ['A', 'C', 'B']\n        # ['A', 'B', 'B', 'A', 'A', 'C'] => ['A', 'C', 'B', 'B', 'A', 'B']\n        columns = list(set(columns))\n        # Fill shuffled columns list with random values\n        # ['A', 'B', 'C'] => ['A', 'A', 'A']\n        columns = [np.random.random() for _ in range(len(columns))]\n        # Sort shuffled columns list in ascending order\n        # ['A', 'A', 'A'] => ['A', 'A', 'A", "compilation_passed": true, "time": 0.0011608600616455078, "tests_passed": false, "error": "AttributeError"}
{"code": "df = pd.DataFrame(\n        index=range(rows),\n        columns=columns,\n    )\n    np.random.seed(seed)\n    df.loc[:, :] = np.random.rand(rows, len(columns))\n    df = df.sort_values(\n        columns,\n        axis=1,\n        ascending=True,\n    )\n    return df", "compilation_passed": true, "time": 0.002407073974609375, "tests_passed": false, "error": "KeyError"}
{"code": "if seed is not None and not isinstance(seed, int):\n        raise TypeError(\"The seed must be an integer.\")\n\n    if rows < 0:\n        raise ValueError(f\"The number of rows must be non-negative.\")\n\n    if not isinstance(columns, list) or len(columns) < 1:\n        columns = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n\n    columns.sort(key=str.casefold)\n    columns = [str(c) for c in columns]\n\n    random.seed(seed)\n    np.random.seed(seed)\n\n    col_indexes = sorted(random.sample(range(1, len(columns)), len(columns) - 1))\n\n    df = pd.DataFrame(columns=columns)\n    df_dict = {}\n    for i, col in enumerate(columns):\n        if i not in col_indexes:\n            col = np.random.random(rows)\n        df_dict[col] = [random.choice(col) for i in range(", "compilation_passed": false, "time": 0.00030231475830078125, "tests_passed": false, "error": "SyntaxError"}
{"code": "np.random.seed(seed)\n    values = np.random.rand(rows, len(columns))\n    cols_dict = {}\n    for i in range(len(columns)):\n        cols_dict[columns[i]] = values[:, i]\n\n    df = pd.DataFrame(cols_dict)\n    df = df.sort_index(axis=1)\n    return df", "compilation_passed": true, "time": 0.0017311573028564453, "tests_passed": true, "error": null}
{"code": "columns_list = list(columns) if columns else []\n    columns_list = sorted(list(set(columns_list)), key=str.casefold)\n    np.random.seed(seed)\n    return pd.DataFrame(np.random.random((rows, len(columns_list))), columns=columns_list).sort_index()", "compilation_passed": true, "time": 0.0014421939849853516, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    if not columns:\n        return pd.DataFrame()\n\n    columns = np.array(columns)\n\n    shuffle_columns = columns[:]\n    np.random.shuffle(shuffle_columns)\n\n    df = pd.DataFrame(np.random.uniform(), columns=columns)\n    df.sort_values(columns, inplace=True)\n    df[shuffle_columns] = df.pop(columns)\n    return df", "compilation_passed": true, "time": 0.0010790824890136719, "tests_passed": false, "error": "ValueError"}
{"code": "columns = sorted(set(columns))\n    columns.sort()\n    if len(columns) == 0:\n        return pd.DataFrame([])\n    np.random.seed(seed)\n    data = np.random.random((rows, len(columns)))\n    np.random.shuffle(columns)\n    return pd.DataFrame(data, columns=columns, index=range(1, rows + 1))", "compilation_passed": true, "time": 0.001462697982788086, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    columns = sorted(set(columns))\n    df = pd.DataFrame(np.random.rand(rows, len(columns)), columns=columns, dtype=np.float64)\n    np.random.shuffle(df.columns)\n    return df", "compilation_passed": true, "time": 0.0009908676147460938, "tests_passed": false, "error": "TypeError"}
{"code": "seed_val = seed\n    random.seed(seed_val)\n    if columns == []:\n        df = pd.DataFrame()\n    else:\n        columns = list(columns)\n        # random.sample is a subset of random.choices and is not stable\n        # random.sample will be removed in future, replace it with random.choices in the next major version\n        # https://docs.python.org/3/library/random.html#random.sample\n        random.sample(columns, len(columns))\n        random.shuffle(columns)\n\n        df = pd.DataFrame(columns=columns, index=range(rows))\n        np.random.seed(seed_val)\n        df.values = np.random.rand(rows, len(columns))\n\n    return df", "compilation_passed": true, "time": 0.0008859634399414062, "tests_passed": false, "error": "NameError"}
{"code": "if columns:\n        columns = sorted(list(set(columns)))\n    else:\n        columns = []\n    seed = int(np.random.random()*1000)\n    np.random.seed(seed)\n    df = pd.DataFrame(\n        np.random.random((rows, len(columns))), columns=columns, index=range(rows)\n    )\n    df.sort_values(df.columns, inplace=True)\n    df = df.T\n    return df", "compilation_passed": true, "time": 0.0010738372802734375, "tests_passed": false, "error": "KeyError"}
{"code": "np.random.seed(seed)\n    data = np.random.random(rows)\n    data = np.sort(data)\n    df = pd.DataFrame(data, columns=columns)\n    df = df.sample(frac=1)\n    return df", "compilation_passed": true, "time": 0.0010480880737304688, "tests_passed": false, "error": "ValueError"}
{"code": "np.random.seed(seed)\n    np.random.shuffle(columns)\n    df = pd.DataFrame(columns=columns)\n    for i in range(rows):\n        row = [round(random.random(), 3) for _ in range(len(columns))]\n        df.loc[i] = row\n    return df", "compilation_passed": true, "time": 0.0010991096496582031, "tests_passed": false, "error": "NameError"}
{"code": "# validate parameters\n    if seed < 0:\n        raise ValueError(\n            \"Seed value must be non-negative, but got {}\".format(seed))\n\n    if rows < 0:\n        raise ValueError(\n            \"Number of rows must be non-negative, but got {}\".format(rows))\n\n    # use np.random.seed to reproduce\n    np.random.seed(seed)\n\n    if not columns:\n        return pd.DataFrame()\n    else:\n        df_columns = pd.DataFrame(\n            np.random.random(size=rows * len(columns)).reshape((rows, len(columns))))\n        df_columns = df_columns.sort_values(axis=columns, ascending=False)\n        df = df_columns.rename(columns=dict(zip(range(len(columns)), columns)))\n        return df", "compilation_passed": true, "time": 0.0009567737579345703, "tests_passed": false, "error": "TypeError"}
{"code": "np.random.seed(seed)\n    rows = max(rows, 0)\n    df = pd.DataFrame(\n        np.random.uniform(), index=[\"col_{}\".format(col) for col in range(rows)]\n    ).T\n    if columns:\n        columns = sorted(columns, key=lambda x: x.lower())\n    return df[columns]", "compilation_passed": true, "time": 0.0012617111206054688, "tests_passed": false, "error": "ValueError"}
{"code": "# Seed the random generator\n    random.seed(seed)\n\n    # If the column is empty or contains no value, return an empty DataFrame\n    if not columns or len(columns) == 0:\n        return pd.DataFrame()\n\n    # If the column is not empty, deduplicate the list and sort it\n    columns = sorted(list(set(columns)), key=str.lower)\n\n    # Generate a list of floats in the range [0, 1)\n    rng = np.random.random(rows)\n\n    # Shuffle the columns and return a DataFrame with the shuffled column\n    random.shuffle(columns)\n\n    # Convert the rng array into a DataFrame\n    df = pd.DataFrame(rng)\n    df = df.rename(columns={0: \"_\"})\n    df = df.reset_index()\n    df[columns] = df.pop(\"_\")\n    df = df.sort_values(columns, axis=1)\n\n    return df", "compilation_passed": true, "time": 0.0009272098541259766, "tests_passed": false, "error": "NameError"}
{"code": "if seed is not None:\n        np.random.seed(seed)\n    if len(columns) > 0:\n        df = pd.DataFrame([np.random.random() for _ in range(rows)])\n        df = df.sort_index(axis=1)\n        df.columns = columns\n        df = df.sample(frac=1)\n    else:\n        df = pd.DataFrame([np.random.random() for _ in range(rows)])\n        df.columns = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n\n    return df", "compilation_passed": true, "time": 0.0013668537139892578, "tests_passed": false, "error": "ValueError"}
{"code": "if rows < 0:\n        raise ValueError(\"rows must not be negative\")\n    rng = np.random.RandomState(seed)\n    random_column = rng.permutation(columns)\n    return pd.DataFrame(columns=random_column, index=np.arange(rows))", "compilation_passed": true, "time": 0.001313924789428711, "tests_passed": true, "error": null}
{"code": "random.seed(seed)\n    # Check whether the given number of rows is valid and non-negative\n    if rows <= 0:\n        raise ValueError(f\"Invalid number of rows: {rows}.\")\n\n    # Create a shuffled column list using a unique combination of elements\n    # from the given column names\n    col_list = [col for col in columns]\n    random.shuffle(col_list)\n\n    # Create a DataFrame with shuffled column names and random values\n    df = pd.DataFrame(\n        random.random((rows, len(col_list))), columns=col_list\n    ).round(4)\n\n    # Shuffle columns and return the DataFrame\n    return df.iloc[:, list(pd.Series(df.columns).sample(frac=1, replace=False))]", "compilation_passed": true, "time": 0.0009298324584960938, "tests_passed": false, "error": "NameError"}
{"code": "if seed is not None:\n        random.seed(seed)\n    if rows < 0:\n        return pd.DataFrame()\n    columns = list(columns)\n    columns.sort()\n    columns = list(set(columns))\n    columns = sorted(columns, key=str)\n    data = np.random.random((rows, len(columns)))\n    df = pd.DataFrame(\n        data,\n        columns=[col + str(i) for i in range(len(columns))],\n    )\n    df = df.sample(frac=1)\n    return df", "compilation_passed": true, "time": 0.0008959770202636719, "tests_passed": false, "error": "NameError"}
{"code": "assert rows >= 0, \"rows must be non-negative.\"\n\n    if columns is None or len(columns) == 0:\n        return pd.DataFrame()\n\n    columns = sorted(np.array(columns).astype(str))\n    np.random.seed(seed)\n    columns = np.random.choice(columns, size=rows)\n    columns = pd.unique(pd.Series(columns))\n\n    df = pd.DataFrame(columns=columns, index=range(rows))\n    df[np.random.choice(columns, size=rows, replace=False)] = np.random.rand(rows)\n\n    return df", "compilation_passed": true, "time": 0.0012791156768798828, "tests_passed": false, "error": "ValueError"}
{"code": "np.random.seed(seed)\n    df = pd.DataFrame(\n        {column: np.random.random((rows,)) for column in sorted(columns)}\n    )\n    return df.sample(frac=1)", "compilation_passed": true, "time": 0.0012850761413574219, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    columns = set(columns)\n    df = pd.DataFrame(columns=[str(i) for i in range(len(columns))])\n    for i in range(rows):\n        df[list(columns)] = np.random.rand(len(columns))\n        df = df.apply(pd.Series.sort_values, ascending=False)\n        df = df.apply(pd.Series.unique, dropna=True)\n    return df", "compilation_passed": true, "time": 0.004076957702636719, "tests_passed": true, "error": null}
{"code": "if rows < 0:\n        raise ValueError(f\"Rows must not be negative, but got: {rows}\")\n    if not columns:\n        return pd.DataFrame()\n    columns = [x.lower().strip() for x in columns]\n    columns = sorted(set(columns))\n    columns = columns.copy()\n    columns.sort()\n    np.random.seed(seed)\n    df = pd.DataFrame(np.random.uniform(), columns=columns)\n    df.sort_index(axis=0, ascending=True, inplace=True)\n    return df", "compilation_passed": true, "time": 0.0010769367218017578, "tests_passed": false, "error": "ValueError"}
{"code": "# Your code here\n    np.random.seed(seed)\n\n    if columns == []:\n        return pd.DataFrame()\n    columns = sorted(set(columns), key=str.lower)\n\n    arr = np.random.random(size=(rows, len(columns)))\n\n    df = pd.DataFrame(arr, columns=columns)\n    df = df.sample(frac=1)\n\n    return df", "compilation_passed": true, "time": 0.0012309551239013672, "tests_passed": true, "error": null}
{"code": "columns = list(columns)\n\n    np.random.seed(seed)\n    np.random.shuffle(columns)\n\n    if len(columns) > 0:\n        return pd.DataFrame(columns=columns, index=list(range(rows)))\n    else:\n        return pd.DataFrame(index=list(range(rows)))", "compilation_passed": true, "time": 0.0015299320220947266, "tests_passed": true, "error": null}
{"code": "columns = columns or []\n\n    if not columns:\n        return pd.DataFrame()\n\n    np.random.seed(seed)\n\n    cols = list(columns)\n    np.random.shuffle(cols)\n\n    return pd.DataFrame(np.random.random((rows, len(cols))), columns=cols)", "compilation_passed": true, "time": 0.001318216323852539, "tests_passed": true, "error": null}
{"code": "rng = np.random.default_rng(seed)\n\n    if len(columns) > 1:\n        columns = sorted(columns)\n\n    if not columns:\n        return pd.DataFrame()\n\n    df = pd.DataFrame(\n        rng.random((rows, len(columns))),\n        columns=columns,\n        index=range(rows)\n    ).T\n\n    df.columns = rng.permutation(df.columns)\n\n    return df", "compilation_passed": true, "time": 0.001085042953491211, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    cols = columns.copy()\n    np.random.shuffle(cols)\n    df = pd.DataFrame(np.random.random((rows, len(cols))), columns=cols)\n    df.sort_values(\n        df.columns, axis=0, inplace=True, kind=\"quicksort\", na_position=\"last\",\n    )\n    df.reset_index(drop=True, inplace=True)\n    return df", "compilation_passed": true, "time": 0.0010428428649902344, "tests_passed": false, "error": "KeyError"}
{"code": "rng = np.random.default_rng(seed)\n    values = rng.random((rows, len(columns)))\n    return pd.DataFrame(values, columns=columns)", "compilation_passed": true, "time": 0.0010349750518798828, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    if columns:\n        columns = list(columns)\n        df = pd.DataFrame(np.random.random((rows, len(columns))), columns=columns)\n    else:\n        df = pd.DataFrame(np.random.random((rows, 5)))\n    df.columns = np.arange(5)\n    df = df.sample(frac=1, random_state=seed)\n    return df", "compilation_passed": true, "time": 0.001708984375, "tests_passed": false, "error": "KeyError"}
