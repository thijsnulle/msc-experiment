{"code": "df = pd.DataFrame(pd.Series(randint(integer_range[0], integer_range[1]) for _ in range(50)).value_counts()).sort_index().reset_index().rename(columns={\"index\": \"Count\"})\n    ax.barh(range(len(df)), df.iloc[:, 1], align=\"center\", height=df.iloc[:, 0].astype(str))\n    ax.invert_yaxis()\n    return fig, ax", "compilation_passed": true, "time": 0.0016150474548339844, "tests_passed": false, "error": "NameError"}
{"code": "# Create a DataFrame containing random integers across num_types categories\n    # using integer_range as the range for the values\n    df = pd.DataFrame({\n        f\"category_{i}\": randint(integer_range[0], integer_range[1]) for i in range(num_types)\n    })\n\n    # Plot the data as a stacked bar chart\n    ax.barh(df.index, df.iloc[:, 0], align=\"center\", width=1)\n\n    # Set the axes labels and title\n    ax.set_xlabel(\"Category Value\")\n    ax.set_ylabel(\"Category\")\n    ax.set_title(\"Category Stacked Bar Plot\")\n\n    # Return the matplotlib Figure and Axes objects as a tuple\n    return (fig, ax)", "compilation_passed": true, "time": 0.0009989738464355469, "tests_passed": false, "error": "ValueError"}
{"code": "types = [chr(ord('a') + i) for i in range(num_types)]\n    df = pd.DataFrame(\n        {type_: randint(*integer_range) for type_ in types}\n    ).groupby(pd.cut(\n        df.index,\n        bins=[0] + [i for i in range(integer_range[0], integer_range[1])],\n        labels=types\n    )).aggregate('sum').sort_index()\n    ax = df.plot(kind='barh')\n    fig = ax.figure\n    return fig, ax", "compilation_passed": true, "time": 0.00096893310546875, "tests_passed": false, "error": "ValueError"}
{"code": "df = pd.DataFrame(\n        {\n            f\"cat_{i}\": pd.Series(\n                [randint(*integer_range) for i in range(randint(1, num_types))]\n            )\n            for i in range(num_types)\n        }\n    )\n    df = df.stack().reset_index().rename(columns={0: \"val\"})\n    df[\"cat\"] = df.pop(\"cat_0\").astype(int)\n    fig = plt.figure()\n    ax = fig.add_axes([0, 0, 1, 1])\n    ax.barh(y=\"cat\", x=\"val\", label=\"cat\", height=0.8)\n    return fig, ax", "compilation_passed": true, "time": 0.002414703369140625, "tests_passed": false, "error": "KeyError"}
{"code": "fig, ax = plt.subplots()\n    for category_num in range(num_types):\n        x = [randint(integer_range[0], integer_range[1])]\n        y = [category_num + 1]\n        ax.barh(y, x, height=0.7, left=0.1, label=f\"category {category_num + 1}\", alpha=0.7)\n    ax.set_ylim(y_min=0, y_max=num_types)\n    ax.set_title(f\"Random numbers across {num_types} categories\",\n                 fontdict={'fontweight': 'bold', 'fontsize': 'medium'})\n    ax.legend(bbox_to_anchor=(1, 1.15), loc='upper left', borderaxespad=0)\n    plt.show()\n    return fig, ax", "compilation_passed": true, "time": 0.005856990814208984, "tests_passed": false, "error": "TypeError"}
{"code": "df = pd.DataFrame({'category': [f'category{i}' for i in range(num_types)]})\n    df['value'] = randint(*integer_range)\n    df = df.pivot_table('value', 'category')\n    return df.plot.barh(color='tab:blue')", "compilation_passed": true, "time": 0.009398698806762695, "tests_passed": false, "error": "TypeError"}
{"code": "df = pd.DataFrame({'category': ['cat %s' % i for i in range(num_types)],\n                       'value': [randint(integer_range[0], integer_range[1]) for _ in range(num_types)]},\n                      index=range(num_types))\n    df.sort_index(inplace=True)\n    df.plot.barh(x='value',\n                 stacked=True,\n                 rot=0,\n                 figsize=(20, 10),\n                 color='green',\n                 title=\"Visualized data as a stacked horizontal bar chart\",\n                 ax=ax)\n    return df", "compilation_passed": true, "time": 0.0008931159973144531, "tests_passed": false, "error": "NameError"}
{"code": "# Generate a DataFrame with random integers across the specified number of categories\n    data = pd.DataFrame({\n        'type': pd.cut(\n            pd.Series(range(randint(*integer_range))),\n            num_types,\n            labels=list(range(1, num_types + 1)),\n            include_lowest=True\n        ),\n        'value': pd.Series(range(1, 101))\n    })\n\n    # Plot the data using matplotlib\n    data.plot(kind='barh', figsize=(15, 7), rot=0, linewidth=2)\n\n    # Create a tuple containing the matplotlib Figure and Axes objects\n    return (plt.gcf(), plt.gca())", "compilation_passed": true, "time": 0.055145978927612305, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(\n        pd.Series(\n            [randint(integer_range[0], integer_range[1]) for _ in range(num_types)],\n            index=[chr(65 + i) for i in range(num_types)],\n        )\n    ).reset_index()\n    df.plot.barh(x=df.columns[0], figsize=(8, 8))\n    fig.suptitle(\"Bar Chart\")\n    return fig, plt.gca()", "compilation_passed": true, "time": 0.008814096450805664, "tests_passed": false, "error": "NameError"}
{"code": "# Generate random integer values across the specified number of categories\n    values_by_category = [\n        randint(integer_range[0], integer_range[1])\n        for _ in range(num_types)\n    ]\n\n    # Generate random colors for each category\n    colors = ['C{}'.format(i + 1) for i in range(num_types)]\n    random.shuffle(colors)\n\n    # Create a pandas DataFrame containing the values\n    df = pd.DataFrame({\n        'values': values_by_category,\n        'colors': colors\n    })\n\n    # Set the y-axis categories as the indices (indexing starts at zero)\n    # and values as the values\n    df = df.set_index(df.index)\n\n    # Plot the data using matplotlib\n    fig, ax = plt.subplots(figsize=(12, 4))\n    df.plot.barh(ax=ax, column='values')\n\n    # Configure the plot\n    ax.grid(True, linewidth=1)\n    ax.set_title(f\"Bar Chart", "compilation_passed": false, "time": 0.00011801719665527344, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Create a random DataFrame with the desired number of rows,\n    # and a category column named \"category\" and a value column named \"value\"\n    data = pd.DataFrame({\n        \"category\": [chr(ord(\"a\") + x) for x in range(num_types)],\n        \"value\": [randint(*integer_range) for _ in range(num_types)]\n    })\n\n    # Create a vertical stacked bar chart of the data, with \"category\"\n    # as the x-axis and \"value\" as the y-axis.\n    # Note that this will also create the axis labels, etc.\n    ax = data.hlocbar(x='category', y='value', rot=0)\n    ax.set_yticklabels(ax.get_xticklabels(), rotation=0)\n\n    return fig, ax", "compilation_passed": true, "time": 0.0009138584136962891, "tests_passed": false, "error": "AttributeError"}
{"code": "# Generate random integer data for each category\n    integer_data = {}\n    for i in range(num_types):\n        integer_data[f'category {i + 1}'] = []\n        for j in range(randint(5, 20)):\n            integer_data[f'category {i + 1}'].append(randint(integer_range[0], integer_range[1]))\n\n    # Combine data segments for each category into one DataFrame\n    integer_df = pd.DataFrame(integer_data)\n    integer_df.set_index(integer_df.columns[0], inplace=True)\n\n    # Visualize the data as a bar chart\n    integer_df.plot(kind='barh', stacked=True, ax=ax)\n    ax.grid()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0009779930114746094, "tests_passed": false, "error": "ValueError"}
{"code": "if not isinstance(num_types, int) or not isinstance(integer_range, tuple):\n        raise ValueError(\"Inputs must be integer values.\")\n    elif not num_types >= 0:\n        raise ValueError(\"The number of categories must be a positive integer.\")\n    elif not isinstance(integer_range[0], int) or not isinstance(integer_range[1], int):\n        raise ValueError(\"Inputs must be integer values.\")\n    elif not integer_range[0] <= integer_range[1]:\n        raise ValueError(\"The inclusive range must include both upper and lower bounds.\")\n\n    data = {}\n    for i in range(num_types):\n        data[f\"type {i}\"] = [randint(*integer_range) for _ in range(5)]\n    df = pd.DataFrame(data)\n    fig, ax = plt.subplots(figsize=(30, 10))\n    df.plot.barh(ax=ax)\n    return (fig, ax)", "compilation_passed": true, "time": 0.02307891845703125, "tests_passed": true, "error": null}
{"code": "# generate a dataframe with a number of types as columns\n    df = pd.DataFrame(index=range(20))\n    for i in range(num_types):\n        df[f'type{i}'] = randint(*integer_range)\n\n    # create a bar plot with the dataframe as input\n    fig, ax = plt.subplots()\n    ax.barh(df.index, df.columns, height=0.8, color=\"black\", edgecolor=\"white\")\n    ax.barh(df.index, df.columns, height=0.8, color=\"red\", edgecolor=\"white\",\n            stacked=True)\n\n    return fig, ax", "compilation_passed": true, "time": 0.005358219146728516, "tests_passed": false, "error": "ValueError"}
{"code": "data = [randint(integer_range[0], integer_range[1]) for i in range(num_types)]\n    labels = ['cat' + str(i) for i in range(num_types)]\n    df = pd.DataFrame({'cat': labels, 'val': data})\n    fig, ax = plt.subplots(figsize=(10, 5))\n    df.groupby('cat').plot.barh(ax=ax, column='cat', color=list(map(str, ['red', 'blue', 'green'])),\n                                stacked=True, alpha=0.7, linewidth=0, title='Random Integer Plot',\n                                legend=False)\n    ax.set_ylabel('Integer Range', fontsize=16)\n    ax.set_xlabel(f'Sample Size: {num_types}')\n    ax.legend(loc='upper right')\n    return fig, ax", "compilation_passed": true, "time": 0.013219833374023438, "tests_passed": true, "error": null}
{"code": "if num_types < 2:\n        return \"Invalid number of categories, should be at least 2\"\n\n    # generate random data for each category\n    df = pd.DataFrame({\n        category: randint(*integer_range)\n        for category in [f\"type{i}\" for i in range(num_types)]\n    })\n\n    # calculate totals for each category\n    totals = df.groupby(\"type0\").sum().iloc[:1]\n\n    # generate stacked bar chart\n    df = df.groupby(\"type0\").agg(sum)\n    df = df.assign(total=totals).set_index(\"total\")\n    df.plot.barh(ax=ax)\n    ax.set_yticklabels(df.index)\n    ax.grid(axis='y')\n    return fig, ax", "compilation_passed": true, "time": 0.0010809898376464844, "tests_passed": false, "error": "ValueError"}
{"code": "types_list = []\n    values_list = []\n    for i in range(num_types):\n        types_list.append('Category ' + str(i))\n        values_list.append(randint(*integer_range))\n    df = pd.DataFrame({'Values': values_list}, index=types_list)\n    df.sort_values(by='Values', inplace=True)\n    ax.barh(df.index, df['Values'])\n    ax.invert_yaxis()\n    ax.grid(False)\n    plt.show()\n    return (fig, ax)", "compilation_passed": true, "time": 0.0008492469787597656, "tests_passed": false, "error": "NameError"}
{"code": "data = pd.DataFrame(\n        {\n            \"x\": [i for i in range(randint(*integer_range))]\n            for j in range(1, num_types + 1)\n        }\n    ).pivot(\"x\", columns=[f\"C{i}\" for i in range(1, num_types + 1)])\n    ax.barh(range(1, num_types + 1), data.values, color=[\"red\", \"green\", \"blue\", \"yellow\", \"brown\"])\n    fig, ax = plt.subplots()\n    return fig, ax", "compilation_passed": true, "time": 0.0008108615875244141, "tests_passed": false, "error": "TypeError"}
{"code": "df = pd.DataFrame({i: [randint(*integer_range) for _ in range(num_types)] for i in [f\"Category_{j}\" for j in range(num_types)]})\n    ax.barh(df.index, df[df.index[0]], label=df.index[0])\n    for i in range(1, num_types):\n        ax.barh(df.index, df[df.index[i]], label=df.index[i], left=df[df.index[0]])\n        ax.barh(df.index, df[df.index[0]] + df[df.index[i]], label=df.index[0])\n    return plt.gcf(), plt.gca()", "compilation_passed": true, "time": 0.0007832050323486328, "tests_passed": false, "error": "NameError"}
{"code": "# Generate random integers across categories\n    random_data = {}\n    for i in range(num_types):\n        category = f\"Category {i}\"\n        n = randint(0, 100)\n        random_data[category] = [n for _ in range(n)]\n\n    # Create a pandas DataFrame from the random data\n    df = pd.DataFrame(random_data)\n\n    # Plot the bar chart\n    ax = df.plot.barh(stacked=True, figsize=(8, 10))\n    return fig, ax", "compilation_passed": true, "time": 0.0008759498596191406, "tests_passed": false, "error": "ValueError"}
{"code": "# generate a pandas DataFrame containing random integer values across the specified number of categories\n    df = pd.DataFrame({\n        category: [randint(integer_range[0], integer_range[1]) for _ in range(10)] for category in\n        [f'category_{i}' for i in range(num_types)]\n    })\n\n    # group the data by category, and calculate their sum as a vertical line\n    # using the \"stack\" method (method 1)\n    df.groupby('category')['column_name'].sum().plot.barh(title='Vertical Bar Plot', color='#66c2a4', figsize=(10, 6))\n    return plt.gcf(), plt.gca()", "compilation_passed": true, "time": 0.0009670257568359375, "tests_passed": false, "error": "KeyError"}
{"code": "# Define a range for random integer values\n    low, high = integer_range\n\n    # Define a dictionary to store categories and their corresponding values\n    data = {}\n\n    # Iterate through the specified number of categories\n    for _ in range(num_types):\n        # Generate random integers in the specified range\n        rand_int = randint(low, high)\n\n        # Add the integer to the corresponding category in the dictionary\n        data[rand_int] = rand_int\n\n    # Convert the dictionary into a pandas DataFrame\n    df = pd.DataFrame.from_dict(data, orient=\"index\")\n\n    # Set the index of the DataFrame to be the category name\n    df.index = range(1, num_types + 1)\n\n    # Configure the plot to display categories on the y-axis and values on the x-axis\n    ax = df.plot(kind='barh')\n\n    # Return the matplotlib Figure and Axes objects\n    return (df.figure, ax)", "compilation_passed": true, "time": 0.008718013763427734, "tests_passed": false, "error": "AttributeError"}
{"code": "df = pd.DataFrame(\n        randint(integer_range[0], integer_range[1])\n        for _ in range(1, num_types + 1),\n        columns=[str(i) for i in range(num_types)]\n    ).astype(int)\n    df.plot.barh(\n        column=[str(i) for i in range(num_types)],\n        stacked=True,\n        title=\"Random Distribution\",\n    )\n    fig.show()\n    return fig, ax", "compilation_passed": false, "time": 0.0001270771026611328, "tests_passed": false, "error": "SyntaxError"}
{"code": "random_ints = [randint(*integer_range) for _ in range(num_types)]\n    categories = [f'Cat{i}' for i in range(num_types)]\n    df = pd.DataFrame({'values': random_ints, 'categories': categories})\n    ax = df.hstack().set_ylabel('Category', rotation=90)\n\n    return fig, ax", "compilation_passed": true, "time": 0.0008759498596191406, "tests_passed": false, "error": "AttributeError"}
{"code": "# ******************\n    # add your code here\n    # ******************\n    # Create a list of integers in the specified range\n    integers = [randint(integer_range[0], integer_range[1]) for _ in range(num_types)]\n\n    # Create a dictionary that maps integers to category names\n    categories = {i: f'Category {i+1}' for i in range(num_types)}\n\n    # Create a pandas DataFrame with columns categories and values\n    df = pd.DataFrame(integers, columns=['values'])\n    df['categories'] = df.index.map(categories)\n\n    # Visualize the data using a stacked bar chart\n    sns.barplot(x='values', y='categories', data=df)\n\n    # Return a tuple containing the figure and axes objects\n    return plt.gcf(), plt.gca()", "compilation_passed": true, "time": 0.0009548664093017578, "tests_passed": false, "error": "NameError"}
{"code": "data_range = list(range(*integer_range))\n\n    random_num_data_values = randint(1, 50)\n    data_values = []\n    data_types = []\n\n    for _ in range(random_num_data_values):\n        data = randint(1, len(data_range) - 1)\n        data_types.append(data_range[data])\n        data_values.append(data)\n\n    df = pd.DataFrame(\n        {\n            \"category\": data_types,\n            \"value\": data_values,\n        }\n    )\n\n    ax = df.pivot_table(index=\"category\", columns=\"value\").plot.bar(stacked=True, rot=0)\n    fig = plt.gcf()\n    return fig, ax", "compilation_passed": true, "time": 0.0025658607482910156, "tests_passed": false, "error": "TypeError"}
{"code": "types_arr = [i for i in range(num_types)]\n    types_df = pd.DataFrame(types_arr)\n\n    fig, ax = plt.subplots(1, figsize=(30, 30), dpi=200)\n    ax.set_title(f\"Task 11.1 - 5.\")\n    ax.set_xlabel(f\"Types: {types_arr}\")\n    ax.set_ylabel(f\"Values: {range(len(types_arr))}\")\n    ax.set_xticks(types_arr)\n    ax.set_xticklabels(types_arr)\n    ax.set_yticks(range(len(types_arr)))\n    ax.set_yticklabels(types_arr)\n    ax.grid(True)\n\n    ax.barh(types_df.index, types_df.columns, tick_label=types_df.columns, width=1, alpha=0.65, color=[\"yellow\"] * num_types)\n    ax.barh(types_df.index, types", "compilation_passed": false, "time": 0.00025200843811035156, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Create a random generator using the seeded random.randint function\n    random_generator = Random()\n    random_generator.seed(1)\n\n    # Generate data for each category\n    data = []\n    for i in range(num_types):\n        data.append(random_generator.randint(integer_range[0], integer_range[1]) for _ in range(randint(5, 10)))\n\n    # Create a DataFrame from the data\n    df = pd.DataFrame(data, columns=[\"Category \" + str(i) for i in range(num_types)])\n\n    # Create a horizontal stacked bar chart from the DataFrame using pandas\n    df.plot(kind=\"barh\", stacked=True, figsize=(12, 15), rot=0, title=\"Data Stacked Horizontally\")\n\n    # Convert the axes object to a tuple\n    return plt.gcf(), plt.gca()", "compilation_passed": true, "time": 0.0006978511810302734, "tests_passed": false, "error": "NameError"}
{"code": "nums = []\n    for i in range(num_types):\n        nums.append(randint(*integer_range))\n\n    df = pd.DataFrame({'Data': nums})\n    df = df.sort_values('Data', ascending=False)\n\n    ax = df.hstack().hstack().plot()\n\n    plt.show()\n    return fig, ax", "compilation_passed": true, "time": 0.0008869171142578125, "tests_passed": false, "error": "AttributeError"}
{"code": "df = pd.DataFrame(\n        index=range(0, randint(*integer_range)),\n        columns=['cat' + str(i) for i in range(0, num_types)],\n    )\n\n    for col in df.columns:\n        df[col] = df[col].astype(int)\n    fig, ax = plt.subplots()\n    ax.barh(df.index, df.values, left=df.index.max(), height=1, edgecolor='w')\n    return fig, ax", "compilation_passed": true, "time": 0.001512765884399414, "tests_passed": false, "error": "ValueError"}
