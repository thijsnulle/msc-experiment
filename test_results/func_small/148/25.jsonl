{"code": "return df.copy()", "compilation_passed": true, "time": 0.0009021759033203125, "tests_passed": true, "error": null}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"df must be a pandas DataFrame\")\n    if not isinstance(column_name, str):\n        raise ValueError(\"column_name must be a string\")\n\n    df[column_name] = LabelEncoder().fit_transform(df[column_name])\n\n    return df", "compilation_passed": true, "time": 0.0013120174407958984, "tests_passed": true, "error": null}
{"code": "return df.apply(lambda x: pd.Series(LabelEncoder().fit_transform(x[column_name])), axis=1)", "compilation_passed": true, "time": 0.001964092254638672, "tests_passed": false, "error": "ValueError"}
{"code": "le = LabelEncoder()\n    return df.assign(encoded_col=le.fit_transform(df[column_name]))", "compilation_passed": true, "time": 0.0009729862213134766, "tests_passed": true, "error": null}
{"code": "df[column_name] = LabelEncoder().fit_transform(df[column_name])\n    return df", "compilation_passed": true, "time": 0.0012888908386230469, "tests_passed": true, "error": null}
{"code": "# Create a LabelEncoder object\n    le = LabelEncoder()\n\n    # Encode the data in the specified column\n    df[column_name] = le.fit_transform(df[column_name])\n\n    return df", "compilation_passed": true, "time": 0.0012059211730957031, "tests_passed": true, "error": null}
{"code": "return LabelEncoder().fit_transform(df[column_name])", "compilation_passed": true, "time": 0.000762939453125, "tests_passed": false, "error": "IndexError"}
{"code": "return df.copy().loc[:, column_name].fillna(0).replace({k: v for v, k in LabelEncoder().fit_transform(df[column_name]).items()})", "compilation_passed": true, "time": 0.0009090900421142578, "tests_passed": false, "error": "AttributeError"}
{"code": "# Create a label encoder object\n    le = LabelEncoder()\n\n    # Fit the label encoder to the column\n    encoded_col = le.fit_transform(df[column_name])\n\n    # Create a new column with the encoded data\n    df[column_name] = encoded_col\n\n    # Return the DataFrame\n    return df", "compilation_passed": true, "time": 0.0012369155883789062, "tests_passed": true, "error": null}
{"code": "le = LabelEncoder()\n    return df.copy().assign(**{column_name: le.fit_transform(df[column_name])})", "compilation_passed": true, "time": 0.001336812973022461, "tests_passed": true, "error": null}
{"code": "column = df[column_name]\n    le = LabelEncoder()\n    df[column_name] = le.fit_transform(column)\n    return df", "compilation_passed": true, "time": 0.0012178421020507812, "tests_passed": true, "error": null}
{"code": "encoder = LabelEncoder()\n    return df[[column_name]].apply(encoder.fit_transform)", "compilation_passed": true, "time": 0.0020699501037597656, "tests_passed": true, "error": null}
{"code": "col_to_encode = df[column_name]\n    # TODO: Use LabelEncoder\n    # hint:\n    # https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.LabelEncoder.html\n    #\n    # TODO: You must return the `df` with the encoded column, and not only the `df`!\n\n    return None", "compilation_passed": true, "time": 0.0007338523864746094, "tests_passed": false, "error": "TypeError"}
{"code": "le = LabelEncoder()\n    le.fit(df[column_name].values)\n    return df.assign(encoded=le.transform(df[column_name]))", "compilation_passed": true, "time": 0.0009310245513916016, "tests_passed": true, "error": null}
{"code": "# YOUR CODE GOES HERE\n    encoder = LabelEncoder()\n    df[column_name] = encoder.fit_transform(df[column_name])\n\n    return df", "compilation_passed": true, "time": 0.0012159347534179688, "tests_passed": true, "error": null}
{"code": "le = LabelEncoder()\n    le.fit(df[column_name])\n    df[column_name] = le.transform(df[column_name])\n    return df", "compilation_passed": true, "time": 0.0013952255249023438, "tests_passed": true, "error": null}
{"code": "le = LabelEncoder()\n    df[column_name] = le.fit_transform(df[column_name])\n    return df", "compilation_passed": true, "time": 0.001232147216796875, "tests_passed": true, "error": null}
{"code": "le = LabelEncoder()\n    df[column_name] = le.fit_transform(df[column_name])\n\n    return df", "compilation_passed": true, "time": 0.0011751651763916016, "tests_passed": true, "error": null}
{"code": "return pd.DataFrame(df[[column_name]])", "compilation_passed": true, "time": 0.0009148120880126953, "tests_passed": true, "error": null}
{"code": "# Fill in your code here.\n    return df", "compilation_passed": true, "time": 0.0007178783416748047, "tests_passed": true, "error": null}
{"code": "# TODO: Implement me\n    return None", "compilation_passed": true, "time": 0.0006530284881591797, "tests_passed": false, "error": "TypeError"}
{"code": "encoder = LabelEncoder()\n    encoder.fit(df[column_name])\n    df[column_name] = encoder.transform(df[column_name])\n\n    return df", "compilation_passed": true, "time": 0.0014410018920898438, "tests_passed": true, "error": null}
{"code": "le = LabelEncoder()\n    le.fit(df[column_name].unique())\n    return df.assign(**{column_name: le.transform(df[column_name])})", "compilation_passed": true, "time": 0.0014951229095458984, "tests_passed": true, "error": null}
{"code": "encoder = LabelEncoder()\n    encoder.fit(df[column_name])\n    return pd.DataFrame(encoder.transform(df[column_name]))", "compilation_passed": true, "time": 0.00109100341796875, "tests_passed": false, "error": "KeyError"}
{"code": "le = LabelEncoder()\n    le.fit(df[column_name])\n    encoded_df = df.copy()\n    encoded_df[column_name] = le.transform(encoded_df[column_name])\n    return encoded_df", "compilation_passed": true, "time": 0.001461029052734375, "tests_passed": true, "error": null}
{"code": "return df.copy()\n    # Your code here", "compilation_passed": true, "time": 0.0007309913635253906, "tests_passed": true, "error": null}
{"code": "column = df[column_name]\n    enc = LabelEncoder()\n    column = enc.fit_transform(column)\n    df.loc[:, column_name] = column\n    return df", "compilation_passed": true, "time": 0.0015957355499267578, "tests_passed": true, "error": null}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise TypeError(\"Input should be a pandas DataFrame.\")\n\n    if column_name not in df.columns:\n        raise ValueError(f\"Column '{column_name}' not found in DataFrame.\")\n\n    df[column_name] = LabelEncoder().fit_transform(df[column_name])\n\n    return df", "compilation_passed": true, "time": 0.001241922378540039, "tests_passed": true, "error": null}
