{"code": "if seed is not None:\n        random.seed(seed)\n    np.random.seed(seed)\n\n    df = pd.DataFrame(\n        np.random.rand(rows, columns),\n        columns=np.arange(1, columns + 1, 1),\n        index=np.arange(1, rows + 1, 1),\n    )\n    df.replace(0, 0.001, inplace=True)\n    df.replace(1, 0.999, inplace=True)\n    df.round(3, inplace=True)\n    return df", "compilation_passed": true, "time": 0.0008628368377685547, "tests_passed": false, "error": "NameError"}
{"code": "np.random.seed(seed)\n    return pd.DataFrame(np.random.random((rows, columns)))", "compilation_passed": true, "time": 0.002042055130004883, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    return pd.DataFrame(np.random.rand(rows, columns))", "compilation_passed": true, "time": 0.0019872188568115234, "tests_passed": true, "error": null}
{"code": "if seed is not None:\n        np.random.seed(seed)\n\n    return pd.DataFrame(np.random.random((rows, columns)))", "compilation_passed": true, "time": 0.002010822296142578, "tests_passed": true, "error": null}
{"code": "# Generate a random number generator with the given seed\n    random_generator = np.random.RandomState(seed)\n    # Generate the matrix with given dimensions and random values\n    matrix = random_generator.random((rows, columns))\n    # Convert the matrix to a Pandas DataFrame\n    df = pd.DataFrame(matrix)\n    return df", "compilation_passed": true, "time": 0.002543926239013672, "tests_passed": true, "error": null}
{"code": "# If seed is set to None, a random seed will be generated and used for the random number generator.\n    if seed is None:\n        seed = np.random.randint(0, 100)\n\n    # Generate a seed for the random number generator if a non-zero seed is provided.\n    if seed:\n        np.random.seed(seed)\n\n    # Generate a matrix of the specified dimensions using random values between 0 and 1.\n    matrix = np.random.rand(rows, columns)\n\n    # Convert the matrix to a Pandas DataFrame and return it.\n    df = pd.DataFrame(matrix)\n    return df", "compilation_passed": true, "time": 0.0020537376403808594, "tests_passed": true, "error": null}
{"code": "rng = np.random.default_rng(seed)\n    return pd.DataFrame(rng.random((rows, columns)))", "compilation_passed": true, "time": 0.0020198822021484375, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    return pd.DataFrame(np.random.uniform(0,1,(rows,columns)),columns=list(range(columns)))", "compilation_passed": true, "time": 0.002039194107055664, "tests_passed": true, "error": null}
{"code": "if seed is not None:\n        np.random.seed(seed)\n    return pd.DataFrame(np.random.random((rows, columns)))", "compilation_passed": true, "time": 0.0019559860229492188, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    return pd.DataFrame(np.random.uniform(size=(rows, columns)))", "compilation_passed": true, "time": 0.0019230842590332031, "tests_passed": true, "error": null}
{"code": "if seed:\n        np.random.seed(seed)\n    return pd.DataFrame(np.random.rand(rows, columns))", "compilation_passed": true, "time": 0.0020208358764648438, "tests_passed": true, "error": null}
{"code": "# Generate a matrix of the specified dimensions\n    matrix = np.random.random((rows, columns))\n    # Return the matrix as a Pandas DataFrame\n    return pd.DataFrame(matrix)", "compilation_passed": true, "time": 0.001934051513671875, "tests_passed": true, "error": null}
{"code": "if seed is not None:\n        random_state = np.random.RandomState(seed)\n    else:\n        random_state = np.random.RandomState()\n\n    df = pd.DataFrame(random_state.rand(rows, columns),\n                      index=range(rows), columns=range(columns))\n    return df", "compilation_passed": true, "time": 0.002585887908935547, "tests_passed": true, "error": null}
{"code": "# If seed is not None, set it to a random seed\n    if seed is not None:\n        np.random.seed(seed)\n\n    # Generate a matrix of given dimensions filled with random values between 0 and 1\n    values = np.random.random((rows, columns))\n\n    # Create a Pandas DataFrame from the matrix\n    df = pd.DataFrame(values)\n\n    # Return the DataFrame\n    return df", "compilation_passed": true, "time": 0.0020499229431152344, "tests_passed": true, "error": null}
{"code": "# Initialize a random seed if provided\n    np.random.seed(seed)\n\n    # Generate a matrix of the specified dimensions with random values between 0 and 1\n    random_matrix = np.random.rand(rows, columns)\n\n    # Return the resulting DataFrame\n    return pd.DataFrame(random_matrix)", "compilation_passed": true, "time": 0.0019791126251220703, "tests_passed": true, "error": null}
{"code": "# Seed the random number generator\n    np.random.seed(seed)\n\n    # Generate random values between 0 and 1\n    random_values = np.random.rand(rows, columns)\n\n    # Convert the values into a Pandas DataFrame\n    return pd.DataFrame(random_values)", "compilation_passed": true, "time": 0.001965045928955078, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    matrix = np.random.random((rows, columns))\n    df = pd.DataFrame(matrix)\n    return df", "compilation_passed": true, "time": 0.0019540786743164062, "tests_passed": true, "error": null}
{"code": "seed = seed if seed is not None else np.random.randint(0, 10000)\n    np.random.seed(seed)\n    return pd.DataFrame(\n        np.random.uniform(low=0, high=1, size=(rows, columns)),\n        columns=[str(i) for i in range(columns)])", "compilation_passed": true, "time": 0.0021219253540039062, "tests_passed": true, "error": null}
{"code": "# Create a random generator with a random seed, if provided\n    rng = np.random.default_rng(seed)\n\n    # Create a matrix of the specified dimensions\n    matrix = rng.uniform(size=(rows, columns))\n\n    # Convert the matrix to a Pandas DataFrame\n    df = pd.DataFrame(matrix)\n\n    return df", "compilation_passed": true, "time": 0.0020761489868164062, "tests_passed": true, "error": null}
{"code": "random_generator = np.random.RandomState(seed)\n    return pd.DataFrame(\n        random_generator.rand(rows, columns)\n    )", "compilation_passed": true, "time": 0.002424955368041992, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    return pd.DataFrame(np.random.randint(2**10, size=(rows, columns)))", "compilation_passed": true, "time": 0.0010631084442138672, "tests_passed": true, "error": null}
{"code": "# Check requirements\n    check_requirements(np, pd)\n\n    # Seed the random number generator\n    if seed is not None:\n        np.random.seed(seed)\n\n    # Generate a matrix of given dimensions and fill it with random values\n    matrix = np.random.random((rows, columns))\n\n    # Convert the matrix to a Pandas DataFrame\n    df = pd.DataFrame(matrix)\n\n    return df", "compilation_passed": true, "time": 0.0007722377777099609, "tests_passed": false, "error": "NameError"}
{"code": "return pd.DataFrame(\n        np.random.RandomState(seed).rand(rows, columns)\n    )", "compilation_passed": true, "time": 0.0025000572204589844, "tests_passed": true, "error": null}
{"code": "if seed is not None:\n        np.random.seed(seed)\n    return pd.DataFrame(np.random.rand(rows, columns))", "compilation_passed": true, "time": 0.0019237995147705078, "tests_passed": true, "error": null}
{"code": "if seed:\n        np.random.seed(seed)\n    return pd.DataFrame(\n        np.random.uniform(low=0, high=1, size=(rows, columns)),\n        dtype=np.float64)", "compilation_passed": true, "time": 0.0019791126251220703, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    df = pd.DataFrame(np.random.rand(rows, columns))\n    return df", "compilation_passed": true, "time": 0.0019240379333496094, "tests_passed": true, "error": null}
