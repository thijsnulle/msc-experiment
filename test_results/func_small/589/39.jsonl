{"code": "data = np.random.random((SIZE, 2)) * RANGE\n    data[:] *= 0.5  # Scale the data to 0.0-5.0\n\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n\n    # Plot the clustered points and centroids\n    plt.scatter(data[:, 0], data[:, 1], c='black', marker='o')\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='r', marker='x')\n    plt.show()\n\n    return (data, kmeans)", "compilation_passed": true, "time": 0.016568899154663086, "tests_passed": true, "error": null}
{"code": "# Generating random data points within a specified range and size\n    x = np.random.uniform(-RANGE, RANGE, size=SIZE)\n    y = np.random.uniform(-RANGE, RANGE, size=SIZE)\n    data = np.column_stack((x, y))\n\n    # Clustering points with KMeans algorithm\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=42)\n    kmeans.fit(data)\n\n    # Plotting the results\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis', s=SIZE)\n    for i in range(kmeans.n_clusters):\n        plt.scatter(\n            kmeans.cluster_centers_[i][0],\n            kmeans.cluster_centers_[i][1],\n            marker='x',\n            s=1000,\n            c='black')\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.019343137741088867, "tests_passed": true, "error": null}
{"code": "# Generate random points within a specified range\n    data = np.random.rand(SIZE, 2) * (RANGE-1) + 1  # size x size\n    kmeans = KMeans(n_clusters=CLUSTERS)\n\n    # Fit KMeans clustering to data\n    kmeans.fit(data)\n\n    # Create scatter plot\n    colors = plt.cm.Spectral(np.linspace(0, 1, CLUSTERS))\n    colors = [colors[i] for i in kmeans.labels_]\n    plt.scatter(data[:, 0], data[:, 1], s=10, c=colors, marker='.')\n    centroids = kmeans.cluster_centers_.reshape(-1, 1, 2)\n    plt.scatter(centroids[:, 0, 0], centroids[:, 0, 1], s=100, c='r')\n\n    # Return the numpy array of data points and fitted KMeans model\n    return data, kmeans", "compilation_passed": true, "time": 0.01892685890197754, "tests_passed": true, "error": null}
{"code": "np.random.seed(0)\n    data = np.random.randint(RANGE, size=(SIZE, 2))\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, marker='x')\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x')\n    return data, kmeans", "compilation_passed": true, "time": 0.01680898666381836, "tests_passed": true, "error": null}
{"code": "# Generate data points within a range and size\n    x, y = np.random.randint(0, RANGE, (2, SIZE))\n\n    # Fit KMeans to data points\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(np.stack((x, y), axis=1))\n\n    # Plot data points and cluster centroids\n    fig, ax = plt.subplots()\n    for i in range(CLUSTERS):\n        centroid = kmeans.cluster_centers_[i]\n        x, y = zip(*np.vstack((x, y)))\n        ax.scatter(x, y, marker='x', color='k', alpha=0.75)\n        ax.scatter(centroid[0], centroid[1], marker='+', color='r', s=200, alpha=0.75)\n    plt.title('KMeans Clustering')\n    plt.show()\n\n    # Return the fitted KMeans model and data\n    return kmeans.cluster_centers_, kmeans<|", "compilation_passed": false, "time": 0.00029206275939941406, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Generate random 2D points within a range of -RANGE to RANGE in both dimensions\n    x_range = np.linspace(-RANGE, RANGE, SIZE)\n    y_range = np.linspace(-RANGE, RANGE, SIZE)\n    data_points = np.array([[x, y] for x in x_range for y in y_range])\n\n    # Fit KMeans clustering to data points and find the cluster centers\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data_points)\n    cluster_centers = kmeans.cluster_centers_\n\n    # Plot the points and cluster centers\n    plt.figure()\n    plt.scatter(x_range, y_range, alpha=0.5, c=kmeans.labels_)\n    for c in cluster_centers:\n        plt.plot(c[0], c[1], 'x')\n\n    plt.show()\n    return data_points, kmeans", "compilation_passed": true, "time": 1.1301460266113281, "tests_passed": false, "error": "TimeoutError"}
{"code": "# Create a numpy array of random floats\n    data = np.random.random((SIZE, 2)) * RANGE\n    # Fit KMeans model to data\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=42)\n    kmeans.fit(data)\n    # Return the data and kmeans model as a tuple\n    return (data, kmeans)", "compilation_passed": true, "time": 0.012485742568969727, "tests_passed": true, "error": null}
{"code": "np.random.seed(42)\n    data = np.random.uniform(RANGE, RANGE, (SIZE, 2))\n\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n\n    # Plot the points and the centroids of the clusters\n    plt.scatter(data[:, 0], data[:, 1], c='blue')\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], c='red', marker='x')\n\n    # Display the plot\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.01607489585876465, "tests_passed": true, "error": null}
{"code": "# Generate a random set of data points\n    data = np.random.uniform(RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering to the data\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    # Plot the clustered points with centroids\n    plt.scatter(data[:,0], data[:,1], c=kmeans.labels_, s=1, cmap=\"rainbow\")\n    # Highlight the centroids\n    plt.scatter([i.center[0] for i in kmeans.cluster_centers_],\n                [i.center[1] for i in kmeans.cluster_centers_],\n                marker=\"x\", color=\"red\", s=200)\n    # Show the plot\n    plt.show()\n    # Return the numpy array of data points and the fitted KMeans model\n    return data, kmeans", "compilation_passed": true, "time": 0.0025336742401123047, "tests_passed": false, "error": "AttributeError"}
{"code": "# Generate random points\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n\n    # Perform KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n\n    # Plot the points with their respective colors and centroids\n    plt.scatter(\n        data[:, 0],\n        data[:, 1],\n        c=kmeans.labels_,\n        s=50,\n        alpha=0.7,\n        edgecolor=\"k\"\n    )\n    plt.scatter(\n        kmeans.cluster_centers_[:, 0],\n        kmeans.cluster_centers_[:, 1],\n        c=\"r\",\n        s=100,\n        marker=\"x\",\n    )\n    # Show the plot\n    plt.show()\n    # Return the fitted model and data points as a tuple\n    return data, kmeans", "compilation_passed": true, "time": 0.016334056854248047, "tests_passed": true, "error": null}
{"code": "# Generate random 2D coordinates in the specified range\n    x = np.random.uniform(low=0.0, high=100.0, size=(SIZE, 2))\n    # Fit kmeans clustering to the generated points\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=42)\n    kmeans.fit(x)\n    # Return the numpy array of points and the fitted KMeans model\n    return x, kmeans", "compilation_passed": true, "time": 0.01155400276184082, "tests_passed": true, "error": null}
{"code": "# Create a random set of 2D points within the specified range and size\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n\n    # Apply k-means clustering to the data\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n\n    # Plot the results with centroids highlighted\n    centers = kmeans.cluster_centers_\n    colors = [plt.cm.Spectral(i / CLUSTERS) for i in range(CLUSTERS)]\n    for i, c in enumerate(centers):\n        plt.scatter(c[0], c[1], marker=\"x\", s=100, color=colors[i])\n    plt.show()\n\n    return data, kmeans", "compilation_passed": true, "time": 0.023127079010009766, "tests_passed": true, "error": null}
{"code": "# Generate random data within the specified range and size\n    x = np.random.randint(RANGE, size=SIZE)\n    y = np.random.randint(RANGE, size=SIZE)\n\n    # Convert x and y to a numpy array\n    data = np.array([x, y]).T\n\n    # Fit KMeans clustering to the data and return the resulting centroids and fitted model\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n\n    # Plot the clusters and centroids\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, s=1)\n    plt.scatter([centroid[0] for centroid in kmeans.cluster_centers_], [centroid[1] for centroid in kmeans.cluster_centers_], c='red', s=5)\n\n    # Display the plot\n    plt.show()\n\n    return data, kmeans", "compilation_passed": true, "time": 0.018707752227783203, "tests_passed": true, "error": null}
{"code": "random_points = np.random.uniform(RANGE, RANGE, size=(SIZE, 2))\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(random_points)\n    return random_points, kmeans", "compilation_passed": true, "time": 0.006439924240112305, "tests_passed": true, "error": null}
{"code": "# Create random points within the specified range and size\n    data = np.random.uniform(RANGE, size=(SIZE, 2))\n\n    # Apply KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n\n    # Plot the results\n    fig, ax = plt.subplots()\n    ax.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, cmap='viridis')\n    ax.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], marker='x')\n\n    return data, kmeans", "compilation_passed": true, "time": 0.03712201118469238, "tests_passed": true, "error": null}
{"code": "random_points = np.random.uniform(RANGE, RANGE, (SIZE, 2))\n    kmeans = KMeans(random_points, CLUSTERS)\n    kmeans.fit(random_points)\n    data = kmeans.cluster_centers_\n    return data, kmeans", "compilation_passed": true, "time": 0.0008437633514404297, "tests_passed": false, "error": "TypeError"}
{"code": "# Generate a set of 2D random points within a specified range and size\n    # The array `data` will contain 1000 random points, each with two\n    # coordinates ranging from 0 to 100.\n    data = np.random.uniform(0, RANGE, (SIZE, 2))\n\n    # Apply KMeans clustering to the data.\n    # This will fit the data points into clusters.\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(data)\n\n    # Plot the data points and the cluster centroids\n    plt.figure(figsize=(10, 7))\n    plt.scatter(data[:, 0], data[:, 1], color='gray')\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], color='r')\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.03364300727844238, "tests_passed": true, "error": null}
{"code": "# generate 2D random points within specified range and size\n    x = np.random.randint(RANGE, size=SIZE)\n    y = np.random.randint(RANGE, size=SIZE)\n    points = np.vstack((x, y)).T\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0)\n    kmeans.fit(points)\n    return points, kmeans", "compilation_passed": true, "time": 0.012236833572387695, "tests_passed": true, "error": null}
{"code": "X = np.random.randint(-RANGE, RANGE, (SIZE, 2))\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=0)\n    kmeans.fit(X)\n    data = np.vstack((X, np.array([kmeans.cluster_centers_])))\n    plt.figure(figsize=(6, 6))\n    plt.scatter(*zip(*X), c=kmeans.labels_, s=5)\n    plt.scatter(*zip(*kmeans.cluster_centers_), c=\"red\", s=100)\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.004567146301269531, "tests_passed": false, "error": "ValueError"}
{"code": "# Generate a set of random points within the specified range and size\n    x = np.random.uniform(0, RANGE, size=(SIZE, 2))\n    x = np.random.randint(RANGE, size=(SIZE, 2))\n    # Apply KMeans clustering to the points\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(x)\n    # Plot the results with the centroids highlighted\n    plt.scatter(x[:, 0], x[:, 1], s=10, c='black')\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=50, c='r')\n    plt.show()\n    # Return the data points and fitted model\n    return x, kmeans", "compilation_passed": true, "time": 0.017261028289794922, "tests_passed": true, "error": null}
{"code": "X = np.random.rand(SIZE, 2) * RANGE\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(X)\n    data = kmeans.transform(X)\n    centroids = kmeans.cluster_centers_\n\n    # Plotting the points\n    plt.scatter(X[:, 0], X[:, 1])\n\n    # Plotting the centroids\n    plt.scatter(centroids[:, 0], centroids[:, 1], s=100, c='red')\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.014514923095703125, "tests_passed": true, "error": null}
{"code": "# Generate random data points in the specified range and size\n    x = np.random.rand(SIZE, 2) * 2 * RANGE - RANGE\n\n    # Fit the KMeans clustering model\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(x)\n\n    # Plot the points with cluster centroids as markers\n    plt.scatter(x[:,0], x[:,1], marker='o', c=kmeans.labels_)\n    plt.scatter(kmeans.cluster_centers_[:,0], kmeans.cluster_centers_[:,1], marker='+', s=50)\n    plt.show()\n\n    return x, kmeans", "compilation_passed": true, "time": 0.011322021484375, "tests_passed": true, "error": null}
{"code": "X = np.random.random((SIZE, 2)) * RANGE  # Generate random 2D points\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(X)  # Fit KMeans clustering\n    plt.scatter(X[:, 0], X[:, 1], c=kmeans.labels_, cmap='rainbow')\n    plt.scatter([cent.[0] for cent in kmeans.cluster_centers_],\n                [cent.[1] for cent in kmeans.cluster_centers_],\n                s=100, color='green')\n    plt.show()\n    return X, kmeans", "compilation_passed": false, "time": 0.0001571178436279297, "tests_passed": false, "error": "SyntaxError"}
{"code": "data = np.random.uniform(0, RANGE, size=(SIZE, 2))\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n    # Plot the data points and centroids\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_, s=2)\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1],\n                s=100, c='r', zorder=3)\n    plt.show()\n    return data, kmeans", "compilation_passed": true, "time": 0.01940298080444336, "tests_passed": true, "error": null}
{"code": "# Generate the data points and store them in a list\n    points = [(x, y) for x in np.random.randint(RANGE, size=SIZE) for y in np.random.randint(RANGE, size=SIZE)]\n    # print(points)\n\n    # Fit k-means clustering on the data points\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=42)\n    kmeans.fit(points)\n\n    # Plot the data points and the cluster centroids\n    plt.figure(figsize=(10, 7))\n    plt.scatter(points[:, 0], points[:, 1], s=1, marker='.')\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], s=10, marker='x')\n    plt.show()\n\n    return points, kmeans", "compilation_passed": true, "time": 0.9239969253540039, "tests_passed": false, "error": "TypeError"}
{"code": "# Create a random set of 2D points within the specified range and size\n    data = np.random.uniform(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering with a pre-determined number of clusters\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    # Fit the model to the data\n    kmeans.fit(data)\n    # Return a tuple containing the data points and the fitted model\n    return data, kmeans", "compilation_passed": true, "time": 0.008463859558105469, "tests_passed": true, "error": null}
{"code": "# Generate a numpy array of 2D points within the specified range and size\n    data = np.random.uniform(-RANGE, RANGE, (SIZE, 2))\n    kmeans = KMeans(n_clusters=CLUSTERS).fit(data)\n\n    # Plot the results with a scatter plot of the clustered points with each\n    # cluster displayed in a different color and the centroids of these clusters\n    # highlighted.\n    plt.scatter(data[:, 0], data[:, 1], c=kmeans.labels_)\n    plt.scatter([centroid[0] for centroid in kmeans.cluster_centers_],\n                [centroid[1] for centroid in kmeans.cluster_centers_],\n                marker='x', cmap='hsv')\n    plt.show()\n\n    return data, kmeans", "compilation_passed": true, "time": 0.01385188102722168, "tests_passed": true, "error": null}
{"code": "# Generate random data points in a circle\n    data = np.random.uniform(-RANGE, RANGE, (SIZE, 2))\n    # Apply KMeans clustering to the data\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=1234)\n    kmeans.fit(data)\n\n    # Plot the data with cluster centroids\n    plt.scatter(data[:, 0], data[:, 1], color='black')\n    plt.scatter(kmeans.cluster_centers_[:, 0], kmeans.cluster_centers_[:, 1], color='red')\n    plt.show()\n\n    return data, kmeans", "compilation_passed": true, "time": 0.013712167739868164, "tests_passed": true, "error": null}
{"code": "# Generate random points within the range\n    X = np.random.rand(SIZE, 2) * RANGE\n    # Perform KMeans clustering\n    kmeans = KMeans(n_clusters=CLUSTERS)\n    kmeans.fit(X)\n    # Plot results\n    plt.scatter(X[:, 0], X[:, 1], c=kmeans.labels_)\n    plt.scatter([i.x for i in kmeans.cluster_centers_], [i.y for i in kmeans.cluster_centers_], marker='^', s=200, c='r')\n    plt.show()\n    return X, kmeans", "compilation_passed": true, "time": 0.004145145416259766, "tests_passed": false, "error": "AttributeError"}
{"code": "np.random.seed(1967)  # Set a seed for consistency\n    X = np.random.uniform(low=-RANGE, high=RANGE, size=(SIZE, 2))\n    kmeans = KMeans(n_clusters=CLUSTERS, random_state=42)\n    kmeans.fit(X)\n    clusters = [[] for _ in range(CLUSTERS)]\n    for i in range(SIZE):\n        clusters[kmeans.labels_[i]].append(X[i])\n    return X, kmeans", "compilation_passed": true, "time": 0.011224985122680664, "tests_passed": true, "error": null}
