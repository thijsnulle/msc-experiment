{"code": "x = np.linspace(mu - 3 * sigma, mu + 3 * sigma, 100)\n    ax = plt.subplot()\n    ax.plot(x, norm.pdf(x, mu, sigma))\n    return ax", "compilation_passed": true, "time": 0.027453899383544922, "tests_passed": true, "error": null}
{"code": "arr = np.linspace(mu - 3 * sigma, mu + 3 * sigma, 100)\n    ax = plt.subplot()\n    ax.plot(arr, norm.pdf(arr, mu, sigma))\n    return ax", "compilation_passed": true, "time": 0.027337074279785156, "tests_passed": true, "error": null}
{"code": "return plt.subplot(111)", "compilation_passed": true, "time": 0.00409698486328125, "tests_passed": false, "error": "IndexError"}
{"code": "x_array = np.linspace(mu - 3 * sigma, mu + 3 * sigma, 100)\n    y_array = norm(mu, sigma).pdf(x_array)\n    ax = plt.plot(x_array, y_array)\n    return ax", "compilation_passed": true, "time": 0.004778861999511719, "tests_passed": false, "error": "AttributeError"}
{"code": "x = np.linspace(mu - 3*sigma, mu + 3*sigma, 100)\n    ax = plt.plot(x, norm.pdf(x,mu,sigma))\n    return ax", "compilation_passed": true, "time": 0.0048410892486572266, "tests_passed": false, "error": "AttributeError"}
{"code": "x = np.linspace(mu - 3*sigma, mu + 3*sigma, 100)\n    return plt.plot(x, norm.pdf(x, mu, sigma))\n    # return plt.show()", "compilation_passed": true, "time": 0.0040700435638427734, "tests_passed": false, "error": "AttributeError"}
{"code": "x_values = np.linspace(mu-3*sigma, mu+3*sigma, 100)\n    y_values = norm.pdf(x_values, mu, sigma)\n    fig, ax = plt.subplots()\n    ax.plot(x_values, y_values)\n    return ax", "compilation_passed": true, "time": 0.026352882385253906, "tests_passed": true, "error": null}
{"code": "x = np.linspace(mu - 3 * sigma, mu + 3 * sigma, 10000)\n    y = norm.pdf(x, mu, sigma)\n    ax = plt.plot(x, y, lw=2, label='normal', alpha=0.5)\n    return ax", "compilation_passed": true, "time": 0.0043430328369140625, "tests_passed": false, "error": "AttributeError"}
{"code": "# Draw a normal distribution with the given mean and standard deviation\n    # using numpy's linspace to create an array of 100 linearly spaced numbers between mu - 3*sigma and mu + 3*sigma\n    x = np.linspace(mu - 3*sigma, mu + 3*sigma, 100)\n\n    # Use scipy's norm.pdf to compute the values of the normal distribution\n    # at each value in the x array\n    y = norm.pdf(x, mu, sigma)\n\n    # Create a 10x10 subplot with a black grid background\n    plt.figure(figsize=(10, 10), facecolor='black')\n\n    # Create an axes object on the subplot with the given x and y arrays\n    ax = plt.axes(x=x, y=y)\n\n    # Return the axes object\n    return ax", "compilation_passed": true, "time": 0.0041577816009521484, "tests_passed": false, "error": "AttributeError"}
{"code": "x = np.linspace(mu - 3 * sigma, mu + 3 * sigma, 100)\n    plt.plot(x, norm.pdf(x, mu, sigma), linewidth=1, color='red')\n    plt.plot(x, norm.pdf(x, mu, 1), linewidth=1, color='black')\n    plt.show()\n    return plt", "compilation_passed": true, "time": 0.005208015441894531, "tests_passed": false, "error": "AttributeError"}
{"code": "arr = np.linspace(mu - 3*sigma, mu + 3*sigma, 100)\n    return plt.plot(arr, norm.pdf(arr, mu, sigma), label=\"Normal distribution\")", "compilation_passed": true, "time": 0.00397491455078125, "tests_passed": false, "error": "AttributeError"}
{"code": "x = np.linspace(mu - 3*sigma, mu + 3*sigma, 100)\n    plt.plot(x, norm.pdf(x, mu, sigma))\n    return plt.gca()", "compilation_passed": true, "time": 0.02603602409362793, "tests_passed": true, "error": null}
{"code": "x = np.linspace(mu - 3 * sigma, mu + 3 * sigma, 1000)\n    plt.plot(x, norm.pdf(x, mu, sigma))\n    plt.show()\n    return ax", "compilation_passed": true, "time": 0.004260063171386719, "tests_passed": false, "error": "NameError"}
{"code": "x = np.linspace(mu - 3 * sigma, mu + 3 * sigma, 100)\n    plt.plot(x, norm.pdf(x, mu, sigma), color=\"red\")\n    plt.show()\n    return plt.gca()", "compilation_passed": true, "time": 0.026335954666137695, "tests_passed": true, "error": null}
{"code": "x = np.linspace(mu - 3*sigma, mu + 3*sigma, 100)\n    return plt.plot(x, norm.pdf(x, mu, sigma))", "compilation_passed": true, "time": 0.004878997802734375, "tests_passed": false, "error": "AttributeError"}
{"code": "# Set up the plot with a title, axis labels, and limits\n    ax = plt.subplot(1, 1, 1)\n    ax.set_title('Normal Distribution')\n    ax.set_xlabel('x')\n    ax.set_ylabel('f(x)')\n    ax.set_xlim(-3*sigma, 3*sigma)\n    ax.set_ylim(-0.05, 1.05)\n\n    # Add a black line representing the normal curve\n    x = np.linspace(mu - 3*sigma, mu + 3*sigma, 100)\n    y = norm.pdf(x, mu, sigma)\n    ax.plot(x, y, color='black')\n\n    # Add a red line representing the normal curve at mu=0\n    y0 = norm.pdf(x, 0, sigma)\n    ax.plot(x, y0, color='red', label='Normal Curve at mu=0')\n\n    # Set the tick intervals for x, and set the location of the tick labels\n    ax.xaxis.set", "compilation_passed": true, "time": 0.004421710968017578, "tests_passed": false, "error": "AttributeError"}
{"code": "x = np.linspace(mu - 3 * sigma, mu + 3 * sigma, 100)\n    y = norm(loc=mu, scale=sigma).pdf(x)\n    return plt.plot(x, y)", "compilation_passed": true, "time": 0.0043981075286865234, "tests_passed": false, "error": "AttributeError"}
{"code": "x = np.linspace(mu - 3 * sigma, mu + 3 * sigma, 100)\n    y = norm(mu, sigma).pdf(x)\n    fig, ax = plt.subplots(figsize=(15, 5))\n    ax.plot(x, y)\n    ax.axvline(x=mu, linewidth=3, color='r', linestyle='dashed')\n    ax.axhline(y=0.05, linewidth=3, color='r', linestyle='dotted')\n    ax.set(xlabel='x', ylabel='Probability', title='Normal Distribution')\n    return ax", "compilation_passed": true, "time": 0.02740311622619629, "tests_passed": true, "error": null}
{"code": "x = norm(mu, sigma).rvs(100)\n    fig, ax = plt.subplots()\n    ax.plot(x, np.sin(x))\n    ax.set_xlabel('x')\n    ax.set_ylabel('sin(x)')\n    return ax", "compilation_passed": true, "time": 0.004656076431274414, "tests_passed": true, "error": null}
{"code": "x = np.linspace(mu - 3 * sigma, mu + 3 * sigma, 100)\n    y = norm.pdf(x, mu, sigma)\n    fig, ax = plt.subplots()\n    ax.plot(x, y)\n    ax.set_title('Normal distribution with mean mu={} and standard deviation sigma={}'.format(mu, sigma))\n    ax.set_xlabel('x')\n    ax.set_ylabel('PDF(x)')\n    ax.grid()\n    return ax", "compilation_passed": true, "time": 0.029207229614257812, "tests_passed": true, "error": null}
{"code": "x = norm.rvs(mu, sigma, size=100)\n    ax = plt.plot(x)\n    plt.show()\n    return ax", "compilation_passed": true, "time": 0.005362033843994141, "tests_passed": false, "error": "AttributeError"}
{"code": "x = np.linspace(mu - 3 * sigma, mu + 3 * sigma, 100)\n    y = norm.pdf(x, mu, sigma)\n    ax = plt.subplot()\n    ax.plot(x, y, linewidth=1.5, color='gray')\n    return ax", "compilation_passed": true, "time": 0.026814937591552734, "tests_passed": true, "error": null}
{"code": "# Generate x-axis values for the distribution\n    x_values = np.linspace(mu - 3 * sigma, mu + 3 * sigma, 100)\n\n    # Create a plot using matplotlib to plot a normal distribution\n    plot, plot_ax = plt.subplots()\n    plot_ax.plot(x_values, norm.pdf(x_values, mu, sigma))\n\n    return plot, plot_ax", "compilation_passed": true, "time": 0.005321025848388672, "tests_passed": false, "error": "AttributeError"}
{"code": "x = np.linspace(mu - 3*sigma, mu + 3*sigma, 100)\n    return plt.plot(x, norm.pdf(x), color='green', alpha=0.5)", "compilation_passed": true, "time": 0.004270076751708984, "tests_passed": false, "error": "AttributeError"}
{"code": "# TODO: Implement this function\n    pass", "compilation_passed": true, "time": 0.001077413558959961, "tests_passed": false, "error": "AttributeError"}
{"code": "x = np.linspace(mu - 3*sigma, mu + 3*sigma, 100)\n    y = norm.pdf(x, mu, sigma)\n    ax = plt.subplot()\n    ax.plot(x, y)\n    return ax", "compilation_passed": true, "time": 0.381986141204834, "tests_passed": true, "error": null}
{"code": "# Your code goes here\n    x = np.linspace(mu - 3 * sigma, mu + 3 * sigma, 100)\n    y = norm.pdf(x)\n    plt.plot(x, y)\n    plt.axhline(y=0, color='k')\n    plt.axvline(x=mu, color='k')\n    return plt.gca()", "compilation_passed": true, "time": 0.012907028198242188, "tests_passed": true, "error": null}
{"code": "x = np.linspace(mu - 3 * sigma, mu + 3 * sigma, 100)\n    y = norm.pdf(x)\n    return plt.subplot(1, 1, 1, x, y)", "compilation_passed": true, "time": 0.0014960765838623047, "tests_passed": false, "error": "TypeError"}
{"code": "# Create an array of 100 linearly spaced numbers between `mu - 3*sigma` and `mu + 3*sigma`.\n    x_vals = np.linspace(mu - 3 * sigma, mu + 3 * sigma, 100)\n\n    # Draw and return a subplot of a normal distribution with the given mean and standard deviation.\n    return plt.plot(x_vals, norm.pdf(x_vals, mu, sigma))", "compilation_passed": true, "time": 0.004227876663208008, "tests_passed": false, "error": "AttributeError"}
{"code": "x = np.linspace(mu - 3*sigma, mu + 3*sigma, 100)\n    y = norm.pdf(x,mu,sigma)\n    ax = plt.subplots()[1]\n    plt.plot(x,y,'k')\n    return ax", "compilation_passed": true, "time": 0.027537822723388672, "tests_passed": true, "error": null}
