{"code": "# Check for negative value and raise error if true\n    if n_tasks < 0:\n        raise ValueError(\"n_tasks should not be negative!\")\n\n    # Randomly assign tasks to employees with a due date of the current day\n    random.seed(seed)\n    employee_names = employees\n    df_tasks = pd.DataFrame()\n    for i in range(n_tasks):\n        task = task_list[i]\n        task = task.replace(' ', '_')\n        due_date = datetime.now().strftime(\"%Y-%m-%d\")\n        assigned_to = random.choice(employee_names)\n        df_tasks = df_tasks.append(\n            {\"Task Name\": task, \"Assigned To\": assigned_to, \"Due Date\": due_date},\n            ignore_index=True,\n        )\n    return df_tasks", "compilation_passed": true, "time": 0.001489877700805664, "tests_passed": false, "error": "AttributeError"}
{"code": "random.seed(seed)\n    task_list = [i.replace(\" \", \"_\") for i in task_list]\n    df = pd.DataFrame(\n        columns=[\n            \"Task Name\",\n            \"Assigned To\",\n            \"Due Date\",\n        ]\n    )\n    employees = employees or [\"John Doe\", \"Jane Smith\", \"James Brown\", \"Mary Johnson\", \"Robert Davis\"]\n    employees_dict = dict(zip(employees, range(len(employees))))\n\n    for i in range(n_tasks):\n        task = task_list[i]\n        employee_index = random.randint(0, len(employees) - 1)\n        employee = employees[employee_index]\n        employee_id = employees_dict[employee]\n        date = datetime.now().date()\n        df = df.append(\n            pd.Series(\n                [\n                    task,\n                    employee,\n                    date,\n                ],\n                index=[\n                    \"Task Name\",\n                ", "compilation_passed": false, "time": 0.00028896331787109375, "tests_passed": false, "error": "SyntaxError"}
{"code": "if seed is not None:\n        random.seed(seed)\n        datetime.now().strftime(\"%Y-%m-%d\")\n\n    if n_tasks < 0:\n        raise ValueError(\"n_tasks cannot be negative!\")\n\n    task_list = [task.replace(\" \", \"_\") for task in task_list]\n    num_assigned = len(employees) * n_tasks\n\n    random_tasks = random.sample(task_list, num_assigned)\n\n    # Convert random_tasks into a list of tuples\n    random_tasks = [(random_tasks[i], random_tasks[i + 1], datetime.today().date()) for i in range(0, num_assigned, 2)]\n\n    # Convert random_tasks into a dataframe\n    df = pd.DataFrame(random_tasks, columns=['Task Name', 'Assigned To', 'Due Date'])\n\n    return df", "compilation_passed": true, "time": 0.0013828277587890625, "tests_passed": false, "error": "ValueError"}
{"code": "if seed is not None:\n        random.seed(seed)\n\n    if n_tasks < 0:\n        raise ValueError(\"n_tasks cannot be negative.\")\n\n    df = pd.DataFrame(index=range(n_tasks))\n\n    for row_num in range(n_tasks):\n        task_name = \"_\".join(random.choice(task_list).split())\n\n        employee = random.choice(employees)\n\n        # Set the due date to the current date\n        current_date = datetime.today().date()\n\n        # Generate a random due date after current date within 10 days\n        random_date = current_date + timedelta(days=random.randint(0, 10))\n\n        # Format the due date as a string in the desired format\n        formatted_date = f\"{random_date.year}-{random_date.month:02}-{random_date.day:02}\"\n\n        # Update the DataFrame row with the new values\n        df.loc[row_num] = [task_name, employee", "compilation_passed": false, "time": 0.0002551078796386719, "tests_passed": false, "error": "SyntaxError"}
{"code": "random.seed(seed)\n    np.random.seed(seed)\n\n    if n_tasks < 0:\n        raise ValueError(\"Number of tasks should not be negative\")\n\n    if isinstance(employees, list):\n        employees = employees\n    else:\n        employees = [\"John Doe\", \"Jane Smith\", \"James Brown\", \"Mary Johnson\", \"Robert Davis\"]\n\n    # Sanitize task names\n    task_list = [name.replace(\" \", \"_\") for name in task_list]\n\n    # Get random task assignments\n    task_assignments = pd.DataFrame(\n        columns=[\"Task Name\", \"Assigned To\", \"Due Date\"]\n    )  # Initialize an empty dataframe\n    for i in range(n_tasks):\n        task_name = random.choice(task_list)  # Pick a random task\n        employee_name = random.choice(employees)  # Pick a random employee\n        due_date = datetime.now().strftime(\"%Y-%m-%d\")  #", "compilation_passed": true, "time": 0.0013229846954345703, "tests_passed": false, "error": "NameError"}
{"code": "if n_tasks < 0:\n        raise ValueError(\"n_tasks cannot be negative\")\n\n    if seed is not None:\n        random.seed(seed)\n\n    assignments = []\n    for _ in range(n_tasks):\n        task_name = sanitize_task_name(random.choice(task_list))\n        employee = random.choice(employees)\n        date = datetime.now().strftime(\"%Y-%m-%d\")\n        row = [task_name, employee, date]\n        assignments.append(row)\n\n    df = pd.DataFrame(assignments, columns=['Task Name', 'Assigned To', 'Due Date'])\n\n    return df", "compilation_passed": true, "time": 0.00127410888671875, "tests_passed": false, "error": "NameError"}
{"code": "# raise NotImplementedError()\n    random.seed(seed)\n\n    if n_tasks < 0:\n        raise ValueError(f'Number of tasks cannot be negative, got {n_tasks}')\n\n    if employees is None:\n        employees = [\n            \"John Doe\",\n            \"Jane Smith\",\n            \"James Brown\",\n            \"Mary Johnson\",\n            \"Robert Davis\",\n        ]\n    tasks = [\n        (random.choice(task_list).replace(\" \", \"_\"), employee, datetime.today())\n        for _ in range(n_tasks)\n    ]\n    return pd.DataFrame(tasks, columns=[\"Task Name\", \"Assigned To\", \"Due Date\"])", "compilation_passed": true, "time": 0.0012562274932861328, "tests_passed": false, "error": "NameError"}
{"code": "random.seed(seed)\n    tasks = []\n\n    # If seed is None, we need to generate a new seed each time the function is called\n    if seed is None:\n        random.seed(datetime.now())\n\n    for task_name in task_list:\n        task_name = sanitize(task_name)\n        task = {\n            \"Task Name\": task_name,\n            \"Assigned To\": random.choice(employees),\n            \"Due Date\": datetime.now().strftime(\"%Y-%m-%d\"),\n        }\n        tasks.append(task)\n\n    if n_tasks <= 0:\n        raise ValueError(\"n_tasks must be greater than 0.\")\n    if len(tasks) < n_tasks:\n        print(\n            f\"WARNING: There are only {len(tasks)} tasks, but n_tasks is {n_tasks}. \"\n            \"Using the first n_tasks tasks.\"\n        )\n\n    return pd.DataFrame(tasks)[:n_tasks]", "compilation_passed": true, "time": 0.0014400482177734375, "tests_passed": false, "error": "NameError"}
{"code": "# Check if n_tasks is negative\n    if n_tasks < 0:\n        raise ValueError(\"n_tasks must be non-negative\")\n\n    # Set random seed if specified\n    random.seed(seed)\n\n    # Initialize empty DataFrame\n    df = pd.DataFrame(columns=[\"Task Name\", \"Assigned To\", \"Due Date\"])\n\n    # Create list of random task names\n    task_list = [s.replace(\" \", \"_\") for s in task_list]\n    task_list = [s for s in task_list if len(s) < 50]\n    task_list = random.sample(task_list, n_tasks)\n\n    # Create random due dates between today and one year from today\n    due_dates = [datetime.now() + timedelta(random.randint(0, 365)) for _ in range(n_tasks)]\n\n    # Create random assignments to employees\n    assignments = []\n    for _ in range(n_tasks):\n        employee_choice = random.randint(0, len(", "compilation_passed": false, "time": 0.00024890899658203125, "tests_passed": false, "error": "SyntaxError"}
{"code": "if n_tasks < 0:\n        raise ValueError(\"n_tasks cannot be negative.\")\n\n    random.seed(seed)\n    tasks = []\n    for task in task_list:\n        tasks.append(sanitize_task_name(task))\n    assigned_to = employees\n    assigned_to = pd.Series(assigned_to).sample(n=n_tasks).values.tolist()\n    due_date = datetime.now().strftime(\"%Y-%m-%d\")\n    for task, assigned_to in zip(tasks, assigned_to):\n        tasks.append(\n            {\n                \"Task Name\": task,\n                \"Assigned To\": assigned_to,\n                \"Due Date\": due_date,\n            }\n        )\n\n    return pd.DataFrame(tasks)", "compilation_passed": true, "time": 0.0013010501861572266, "tests_passed": false, "error": "NameError"}
{"code": "if seed:\n        random.seed(seed)\n\n    if n_tasks < 0:\n        raise ValueError(\"n_tasks should not be negative\")\n\n    random.shuffle(task_list)\n\n    assignments = []\n    for i in range(n_tasks):\n        task_name = task_list[i].replace(\" \", \"_\")\n        employee = random.choice(employees)\n        due_date = datetime.now().strftime(\"%Y-%m-%d\")\n        assignments.append(\n            {\n                \"Task Name\": task_name,\n                \"Assigned To\": employee,\n                \"Due Date\": due_date,\n            }\n        )\n\n    return pd.DataFrame(assignments)", "compilation_passed": true, "time": 0.0018591880798339844, "tests_passed": false, "error": "IndexError"}
{"code": "# Sanitize the task names\n    task_list = [task.replace(\" \", \"_\") for task in task_list]\n\n    # Validate the n_tasks parameter\n    if n_tasks < 0:\n        raise ValueError(\"n_tasks cannot be negative\")\n\n    # Generate random assignments\n    if seed:\n        random.seed(seed)\n        assignments = random.sample(task_list, n_tasks)\n    else:\n        assignments = random.choices(task_list, k=n_tasks)\n\n    # Convert the assignments to a DataFrame and set Due Date\n    df = pd.DataFrame({'Task Name': assignments,\n                       'Assigned To': employees,\n                       'Due Date': datetime.now().strftime(\"%Y-%m-%d\")})\n\n    # Check for duplicates\n    duplicates = df[df.duplicated()]['Task Name'].unique()\n    if duplicates:\n        raise ValueError(\"Task list contains duplicate entries: {}\".format(duplicates))\n\n    return df", "compilation_passed": true, "time": 0.0015959739685058594, "tests_passed": false, "error": "ValueError"}
{"code": "if n_tasks < 0:\n        raise ValueError(\"n_tasks must be non-negative.\")\n\n    random.seed(seed)\n    df = pd.DataFrame(columns=[\"Task Name\", \"Assigned To\", \"Due Date\"])\n    today = datetime.now().date()\n\n    # Add a random number of tasks\n    for i in range(n_tasks):\n        task_name = random.choice(task_list)\n        task_name = task_name.replace(\" \", \"_\")\n        assigned_to = random.choice(employees)\n        due_date = today\n        df.loc[i] = [task_name, assigned_to, due_date]\n    return df", "compilation_passed": true, "time": 0.0021598339080810547, "tests_passed": true, "error": null}
{"code": "# Sanitize task names to replace spaces with underscores.\n    # This allows for tasks with spaces in their names.\n    task_list = [name.replace(\" \", \"_\") for name in task_list]\n\n    # Assign random tasks to employees\n    employees_list = employees if employees else [\n        \"John Doe\", \"Jane Smith\", \"James Brown\", \"Mary Johnson\", \"Robert Davis\"]\n\n    random.seed(seed)\n    assigned_tasks = []\n    due_dates = []\n\n    for _ in range(n_tasks):\n        task_name = random.choice(task_list)\n        assigned_to = random.choice(employees_list)\n        due_date = datetime.now().strftime(\"%Y-%m-%d\")\n        assigned_tasks.append(task_name)\n        due_dates.append(due_date)\n\n    return pd.DataFrame(\n        {\n            \"Task Name\": assigned_tasks,\n            \"Assigned To\": employees_list,\n            \"Due Date\": due", "compilation_passed": false, "time": 0.0002498626708984375, "tests_passed": false, "error": "SyntaxError"}
{"code": "if n_tasks < 0:\n        raise ValueError(\"n_tasks cannot be negative\")\n\n    if seed:\n        random.seed(seed)\n\n    task_list = [task_name.replace(\" \", \"_\") for task_name in task_list]\n    tasks = [(task, random.choice(employees), datetime.now().strftime(\"%Y-%m-%d\")) for task in task_list]\n    df = pd.DataFrame(tasks, columns=['Task Name', 'Assigned To', 'Due Date'])\n\n    return df", "compilation_passed": true, "time": 0.00144195556640625, "tests_passed": true, "error": null}
{"code": "# TODO: validate input types\n\n    # Sanitize task names\n    task_list_sanitized = []\n    for task in task_list:\n        sanitized_task = task.replace(' ', '_')\n        task_list_sanitized.append(sanitized_task)\n\n    # Check for negative number of tasks\n    if n_tasks < 0:\n        raise ValueError(\"Number of tasks cannot be negative.\")\n\n    # Initialize list to store tasks with random due dates\n    tasks_due_dates = []\n\n    # Randomly assign tasks to employees until desired number of tasks is reached\n    while len(tasks_due_dates) < n_tasks:\n        # Generate random employee for each task\n        employee = random.choice(employees)\n        # Generate random date 5 days in the future\n        today = datetime.today()\n        random_date = today + datetime.timedelta(days=random.randint(0, 5))\n        # Generate a random number of days for each task to be completed by\n        days_to_complete = random.randint(1", "compilation_passed": false, "time": 0.00021576881408691406, "tests_passed": false, "error": "SyntaxError"}
{"code": "if seed:\n        random.seed(seed)\n    random.shuffle(employees)\n    employees.sort()\n    if n_tasks > len(task_list):\n        raise ValueError(f\"Number of tasks to be assigned should be less than or equal to the number of tasks available.\")\n    tasks = pd.DataFrame(\n        data={\n            \"Task Name\": [task.replace(\" \", \"_\") for task in task_list[:n_tasks]],\n            \"Assigned To\": [employees[random.randint(0, len(employees) - 1)] for _ in range(n_tasks)],\n            \"Due Date\": [datetime.today()] * n_tasks,\n        },\n        index=list(range(1, n_tasks + 1)),\n    )\n    return tasks", "compilation_passed": true, "time": 0.0017101764678955078, "tests_passed": true, "error": null}
{"code": "# check if n_tasks is a positive integer\n    if n_tasks < 0:\n        raise ValueError(\"n_tasks cannot be negative.\")\n\n    random.seed(seed)\n    assigned_tasks = []\n    # Create a DataFrame for the assigned tasks\n    df = pd.DataFrame(\n        columns=[\n            \"Task Name\",\n            \"Assigned To\",\n            \"Due Date\",\n        ]\n    )\n    for i in range(n_tasks):\n        task_name = sanitize(task_list[random.randint(0, len(task_list) - 1)])\n        task_name = task_name + str(i)\n        assigned_to = employees[random.randint(0, len(employees) - 1)]\n        due_date = datetime.now().date()\n        assigned_tasks.append((task_name, assigned_to, due_date))\n        df.loc[i, :] = [task_name, assigned_to, due_date]\n    return df", "compilation_passed": true, "time": 0.0016629695892333984, "tests_passed": false, "error": "NameError"}
{"code": "if n_tasks < 0:\n        raise ValueError(\"n_tasks cannot be negative.\")\n\n    if seed is not None:\n        random.seed(seed)\n\n    df = pd.DataFrame(columns=[\"Task Name\", \"Assigned To\", \"Due Date\"])\n\n    for task in task_list:\n        df.loc[\n            len(df),\n            [\n                \"Task Name\",\n                \"Assigned To\",\n                \"Due Date\",\n            ]\n        ] = [\n            task,\n            random.choice(employees),\n            datetime.now().strftime(\"%Y-%m-%d\"),\n        ]\n\n    df.loc[\n        len(df)\n        - 1,\n        [\n            \"Task Name\",\n            \"Assigned To\",\n            \"Due Date\",\n        ],\n    ] = [\n        \"\",\n        \"\",\n        \"\",\n    ]\n\n    df[\"Task Name\"] = df[\"Task Name\"].replace(", "compilation_passed": false, "time": 0.0002543926239013672, "tests_passed": false, "error": "SyntaxError"}
{"code": "random.seed(seed)\n    df = pd.DataFrame()\n\n    # Validate number of tasks\n    if n_tasks < 0:\n        raise ValueError(\"n_tasks cannot be negative.\")\n\n    # Generate a list of task names\n    task_list = [task.replace(' ', '_') for task in task_list]\n\n    # Generate task list\n    tasks = [{'Task Name': task, 'Assigned To': None, 'Due Date': datetime.today().date()} for task in task_list]\n    random.shuffle(tasks)\n\n    for _ in range(n_tasks):\n        df = df.append(tasks.pop())\n\n    # Assign random employees to tasks\n    df['Assigned To'] = random.choices(employees, k=len(df))\n\n    return df", "compilation_passed": true, "time": 0.0014889240264892578, "tests_passed": false, "error": "AttributeError"}
{"code": "if n_tasks < 0:\n        raise ValueError(\"n_tasks must be non-negative.\")\n\n    random.seed(seed)\n    today = datetime.now()\n    assigned_to = employees[random.randint(0, len(employees) - 1)]\n    task_name = [\n        task.replace(\" \", \"_\") for task in task_list[random.randint(0, len(task_list) - 1)]\n    ]\n    due_date = datetime.strftime(today, \"%Y-%m-%d\")\n\n    df = pd.DataFrame(\n        index=range(n_tasks),\n        data={\"Task Name\": task_name, \"Assigned To\": assigned_to, \"Due Date\": due_date},\n    )\n\n    return df", "compilation_passed": true, "time": 0.001603841781616211, "tests_passed": false, "error": "ValueError"}
{"code": "random.seed(seed)  # Set the seed to ensure reproducibility\n\n    if n_tasks < 0:  # Raise an error if n_tasks is negative\n        raise ValueError(\"n_tasks must be a non-negative number\")\n\n    task_list = [task.replace(\" \", \"_\") for task in task_list]  # Sanitize task names\n    task_count = len(task_list)\n    df = pd.DataFrame(\n        index=range(n_tasks),\n        columns=[\"Task Name\", \"Assigned To\", \"Due Date\"],\n    )\n    today = datetime.now().date()\n\n    for i in range(n_tasks):\n        task_name = task_list[\n            random.randrange(task_count)\n        ]  # Get a random task from the list of tasks\n        task_name = task_name.replace(\" \", \"_\")  # Sanitize the task name\n        assigned_to = employees[\n            random.randrange(len(employees))\n        ]", "compilation_passed": true, "time": 0.001519918441772461, "tests_passed": true, "error": null}
{"code": "# Validating the number of tasks\n    if n_tasks < 0:\n        raise ValueError(\"Number of tasks cannot be negative.\")\n\n    # Generating a random order of task_list\n    shuffled_task_list = random.sample(task_list, len(task_list))\n    for idx, task in enumerate(shuffled_task_list):\n        task_list[idx] = task.replace(\" \", \"_\")\n\n    # Generating random dates for the due dates\n    if seed is not None:\n        random.seed(seed)\n    current_date = datetime.now().date()\n    random_dates = [current_date + timedelta(days=random.randint(-90, 0)) for _ in range(n_tasks)]\n\n    # Generating random assignments\n    df = pd.DataFrame(\n        columns=[\"Task Name\", \"Assigned To\", \"Due Date\"],\n        index=[f\"{idx + 1}\" for idx in range(n_tasks)],\n    )\n    for task, task_name,", "compilation_passed": false, "time": 0.0002560615539550781, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Create a list of tasks with task_name sanitized to avoid spaces and then store it in task_list\n    task_list = [task_name.replace(\" \", \"_\") for task_name in task_list]\n    random.seed(seed)\n    # Set the seed for the random module, if it was provided\n    if seed:\n        random.seed(seed)\n    # Select n_tasks random tasks from the list task_list and store them in a list called sample_tasks\n    sample_tasks = random.sample(task_list, n_tasks)\n    # Create a list of available tasks to assign.\n    # If sample_tasks is empty, select all tasks from task_list\n    available_tasks = task_list if sample_tasks else task_list\n\n    # Get the current date and time\n    now = datetime.now()\n\n    # Create a dataframe with columns for Task Name, Assigned To, and Due Date.\n    # Then loop through the sample_tasks list and for each task assign it to a random available employee and due date.\n    # The available employee names will be taken from the", "compilation_passed": true, "time": 0.0012402534484863281, "tests_passed": true, "error": null}
{"code": "if seed is not None:\n        random.seed(seed)\n    else:\n        pass\n    task_list = [t.replace(\" \", \"_\") for t in task_list]\n\n    if n_tasks > len(task_list):\n        raise ValueError(\"n_tasks cannot be larger than the number of tasks in the list.\")\n    else:\n        df = pd.DataFrame(columns=[\"Task Name\", \"Assigned To\", \"Due Date\"])\n        for i in range(n_tasks):\n            task = random.choice(task_list)\n            employee = random.choice(employees)\n            df.loc[i] = [task, employee, datetime.now().strftime(\"%Y-%m-%d\")]\n    return df", "compilation_passed": true, "time": 0.004029989242553711, "tests_passed": false, "error": "ValueError"}
{"code": "# Check that the number of tasks is not negative\n    if n_tasks < 0:\n        raise ValueError(\"Negative tasks is not allowed.\")\n\n    # Sanitize the task names\n    task_names = [name.replace(\" \", \"_\") for name in task_list]\n\n    # Set the seed if provided\n    if seed:\n        random.seed(seed)\n\n    # Assign tasks to employees\n    employee_names = employees\n    num_tasks = len(task_names)\n    if num_tasks > len(employee_names):\n        raise ValueError(\n            \"There are fewer employees than tasks, so there are no more tasks to be assigned.\"\n        )\n    elif num_tasks < len(employee_names):\n        num_tasks = num_tasks + len(employee_names) - num_tasks\n        print(\"There are fewer employees than tasks, so additional tasks will be assigned.\")\n\n    assignments = []\n    for _ in range(num_tasks):\n        employee = random.choice(employee_names)\n        task = random.choice(", "compilation_passed": false, "time": 0.00024509429931640625, "tests_passed": false, "error": "SyntaxError"}
{"code": "if n_tasks < 0:\n        raise ValueError(\"n_tasks cannot be negative\")\n\n    task_list = [task.replace(\" \", \"_\") for task in task_list]\n\n    random.seed(seed)\n    df = pd.DataFrame(\n        {\n            \"Task Name\": [random.choice(task_list) for i in range(n_tasks)],\n            \"Assigned To\": [random.choice(employees) for i in range(n_tasks)],\n            \"Due Date\": [datetime.now() for i in range(n_tasks)],\n        }\n    )\n\n    return df", "compilation_passed": true, "time": 0.0015881061553955078, "tests_passed": true, "error": null}
{"code": "if seed:\n        random.seed(seed)\n    df = pd.DataFrame(columns=[\"Task Name\", \"Assigned To\", \"Due Date\"])\n\n    for i in range(n_tasks):\n        task = sanitize(task_list[i])\n        due_date = datetime.today().strftime(\"%Y-%m-%d\")\n        employee = random.choice(employees)\n        df.loc[i] = [task, employee, due_date]\n    return df", "compilation_passed": true, "time": 0.0014829635620117188, "tests_passed": false, "error": "NameError"}
{"code": "# Check that seed is either None or an int\n    if seed is not None and not isinstance(seed, int):\n        raise ValueError(\"Seed must be either None or an int\")\n\n    random.seed(seed)\n\n    if n_tasks < 0:\n        raise ValueError(\"n_tasks cannot be negative\")\n\n    if n_tasks > len(task_list):\n        task_list = task_list * ((n_tasks // len(task_list)) + 1)\n\n    result = []\n    for i in range(n_tasks):\n        # Select an employee randomly\n        employee = random.choice(employees)\n        # Select a task randomly\n        task = random.choice(task_list)\n        # Sanitize the task name\n        sanitized_task = task.replace(\" \", \"_\")\n\n        result.append([sanitized_task, employee, datetime.today()])\n\n    return pd.DataFrame(result, columns=[\"Task Name\", \"Assigned To\", \"Due Date\"])", "compilation_passed": true, "time": 0.0015859603881835938, "tests_passed": true, "error": null}
{"code": "if seed is not None:\n        random.seed(seed)\n    else:\n        pass\n    tasks = [task.replace(\" \", \"_\") for task in task_list]\n    if n_tasks < 0:\n        raise ValueError(\"The number of tasks cannot be negative.\")\n    if n_tasks > len(tasks):\n        n_tasks = len(tasks)\n    assignments = []\n\n    for _ in range(n_tasks):\n        employee = random.choice(employees)\n        tasks_for_employee = [task for task in tasks if task_name == random.choice(tasks)]\n        task = random.choice(tasks_for_employee)\n        assignments.append({\"Task Name\": task, \"Assigned To\": employee, \"Due Date\": datetime.today()})\n        tasks.remove(task)\n\n    return pd.DataFrame(assignments, columns=[\"Task Name\", \"Assigned To\", \"Due Date\"])", "compilation_passed": true, "time": 0.0013689994812011719, "tests_passed": false, "error": "NameError"}
