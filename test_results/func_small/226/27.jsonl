{"code": "x_list = []\n    y_list = []\n    for i in np.arange(step, range_end, step):\n        x_list.append(i)\n        y_list.append(np.exp(i))\n    ax = plt.axes()\n    ax.set(xlim=[0, 10])\n    ax.set(ylim=[0, 5])\n    ax.plot(x_list, y_list, label='e^x', linestyle='solid', color='orange')\n    ax.legend()\n    ax.grid(color='#000000', linestyle='--', linewidth='0.15', alpha=0.2)\n    ax.set_xlabel(\"x\")\n    ax.set_ylabel(\"e^x\")\n    ax.set_title('Exponential Function Plot')\n\n    return ax", "compilation_passed": true, "time": 0.004897117614746094, "tests_passed": false, "error": "TypeError"}
{"code": "x = np.linspace(range_start, range_end, 100)\n    y = np.exp(x)\n    plt.plot(x, y)\n    plt.title(\"Exponential Function Plot\")\n    yield from zip(x, y)\n\n    return plt.gca()", "compilation_passed": true, "time": 0.001010894775390625, "tests_passed": false, "error": "ValueError"}
{"code": "x_axis = []\n    y_axis = []\n    for x in range(range_start, range_end, step):\n        y = math.exp(x)\n        x_axis.append(x)\n        y_axis.append(y)\n    ax = plt.plot(x_axis, y_axis)\n    return zip(x_axis, y_axis), ax", "compilation_passed": true, "time": 0.0007932186126708984, "tests_passed": false, "error": "TypeError"}
{"code": "start = range_start\n    end = range_end\n    step = 0.1\n\n    x = []\n    y = []\n    for i in np.arange(start, end, step):\n        x.append(i)\n        y.append(np.exp(i))\n    plt.plot(x, y)\n    plt.title('Exponential Function Plot')\n    plt.show()\n    return iter((x, y))\n    #return (x, y)", "compilation_passed": true, "time": 0.0010879039764404297, "tests_passed": false, "error": "TypeError"}
{"code": "x_axis = np.arange(range_start, range_end, step)\n    y_axis = np.exp(x_axis)\n    x_axis_tuple = tuple(x_axis)\n    y_axis_tuple = tuple(y_axis)\n    return zip(x_axis_tuple, y_axis_tuple), plt.figure(figsize=(10,5)).add_subplot(111)", "compilation_passed": true, "time": 0.004118204116821289, "tests_passed": true, "error": null}
{"code": "range_start = math.ceil(range_start / step)\n    range_end = math.floor(range_end / step)\n\n    def e_generator(start, end, step=0.1):\n        i = start\n        while i <= end:\n            yield (i, math.exp(i))\n            i += step\n\n    data = e_generator(range_start * step, range_end * step, step * step)\n    ax = plt.subplot()\n    ax.grid(which='both')\n    ax.set_xlim((0, 10))\n    ax.set_ylim((0, 5))\n\n    x, y = zip(*data)\n    ax.plot(x, y)\n    ax.set_title(f'Exponential Function Plot')\n    return data, ax", "compilation_passed": true, "time": 0.0015628337860107422, "tests_passed": false, "error": "StopIteration"}
{"code": "x_range = np.arange(range_start, range_end + step, step)\n    exp_range = [math.e ** n for n in x_range]\n    return zip(x_range, exp_range), plt.plot(x_range, exp_range)", "compilation_passed": true, "time": 0.0008761882781982422, "tests_passed": false, "error": "AttributeError"}
{"code": "i = range_start\n    while i <= range_end:\n        yield (i, np.exp(i))\n        i += step", "compilation_passed": true, "time": 0.0007212162017822266, "tests_passed": false, "error": "ValueError"}
{"code": "x = range_start\n    e_x = []\n    while x < range_end:\n        e_x.append((x, math.exp(x)))\n        x += step\n    return iter(e_x), plt.subplot()", "compilation_passed": true, "time": 0.0007090568542480469, "tests_passed": true, "error": null}
{"code": "# Write your code here.\n\n    def calc_func(x):\n        return math.exp(x)\n\n    x_values = np.arange(range_start, range_end, step)\n    y_values = np.vectorize(calc_func)(x_values)\n\n    return zip(x_values, y_values), plt.plot(x_values, y_values)", "compilation_passed": true, "time": 0.0009098052978515625, "tests_passed": false, "error": "AttributeError"}
{"code": "x = np.arange(range_start, range_end, step)\n    e_x = np.exp(x)\n    data = zip(x, e_x)\n\n    ax = plt.gca()\n    ax.plot(x, e_x, '--')\n    ax.set_title('Exponential Function Plot')\n\n    return data, ax", "compilation_passed": true, "time": 0.0009257793426513672, "tests_passed": true, "error": null}
{"code": "# TODO: Create a generator that produces tuples of (x, e^x) values.\n    #       Plot the exponential function using these values.\n    #       Return both the data and the Axes object of the plot.\n    #       You may use any numpy or math functions.\n\n    x = np.arange(range_start, range_end, step)\n    y = math.exp(x)\n\n    return zip(x, y), plt.gca()", "compilation_passed": true, "time": 0.0006651878356933594, "tests_passed": false, "error": "TypeError"}
{"code": "assert range_start < range_end, \"range_start must be smaller than range_end\"\n    assert step > 0, \"Step cannot be smaller than 0\"\n    x_points = np.arange(range_start, range_end, step)\n    exp = []\n    for i in x_points:\n        exp.append((i, np.exp(i)))\n    return iter(exp), plt.Axes(plt.figure(), [0, 0, 1, 1])", "compilation_passed": true, "time": 0.003631114959716797, "tests_passed": true, "error": null}
{"code": "data = []\n    for x in np.arange(range_start, range_end, step):\n        y = math.exp(x)\n        data.append((x, y))\n\n    fig, ax = plt.subplots()\n\n    ax.plot(*zip(*data))\n    ax.set_title(f'Exponential Function Plot')\n    return data, ax", "compilation_passed": true, "time": 0.004101991653442383, "tests_passed": false, "error": "TypeError"}
{"code": "x_axis = np.arange(range_start, range_end, step)\n    y_axis = np.exp(x_axis)\n\n    def gen_func():\n        for i in range(len(x_axis)):\n            yield x_axis[i], y_axis[i]\n\n    return gen_func(), plt.subplots(1)[1]", "compilation_passed": true, "time": 0.0036690235137939453, "tests_passed": true, "error": null}
{"code": "data = []\n    i = range_start\n    while i <= range_end:\n        data.append((i, math.exp(i)))\n        i += step\n\n    fig, ax = plt.subplots()\n    for d in data:\n        ax.plot(d, lw=3)\n    ax.set_title('Exponential Function Plot')\n    return data, ax", "compilation_passed": true, "time": 0.013631343841552734, "tests_passed": false, "error": "TypeError"}
{"code": "x = range_start\n\n    while x <= range_end:\n        yield (x, np.exp(x))\n        x += step", "compilation_passed": true, "time": 0.000762939453125, "tests_passed": false, "error": "ValueError"}
{"code": "x = np.linspace(range_start, range_end, (range_end - range_start) / step, dtype=np.float)\n    y = [math.exp(xx) for xx in x]\n    data = zip(x, y)\n    fig, ax = plt.subplots()\n    ax.plot(x, y)\n    ax.set_title(\"Exponential Function Plot\")\n    return data, ax", "compilation_passed": true, "time": 0.0008237361907958984, "tests_passed": false, "error": "    https"}
{"code": "range_array = np.arange(range_start, range_end, step)\n    data = tuple((i, math.exp(i)) for i in range_array)\n    plt.plot(*zip(*data), label=\"E^x\")\n    plt.plot(range_array, np.exp(range_array), label=\"E^x\")\n    plt.ylabel(\"y\")\n    plt.xlabel(\"x\")\n    plt.legend()\n    plt.title(\"Exponential Function Plot\")\n    return data", "compilation_passed": true, "time": 0.0016582012176513672, "tests_passed": false, "error": "ValueError"}
{"code": "for i in np.arange(range_start, range_end, step):\n        yield (i, math.e ** i)", "compilation_passed": true, "time": 0.0007369518280029297, "tests_passed": false, "error": "ValueError"}
{"code": "e = math.e\n    for i in range(range_start, range_end, step):\n        yield i, e ** i\n    ax = plt.gca()\n    return ax", "compilation_passed": true, "time": 0.0006670951843261719, "tests_passed": false, "error": "TypeError"}
{"code": "# Create a generator object\n    def exponential_gen(start, end, step):\n        while True:\n            # Generate a list of x values\n            x_values = np.arange(start, end, step)\n\n            # Generate corresponding e^x values\n            y_values = np.exp(x_values)\n\n            # Generate a list of tuples (x, y)\n            x_y_pairs = list(zip(x_values, y_values))\n\n            # Yield the tuples\n            yield from x_y_pairs\n\n    gen = exponential_gen(range_start, range_end, step)\n    data = gen\n    ax = plt.plot(data)\n\n    return data, ax", "compilation_passed": true, "time": 0.0015149116516113281, "tests_passed": false, "error": "RuntimeError"}
{"code": "x_data = np.arange(range_start, range_end, step)\n    y_data = np.exp(x_data)\n    ax = plt.axes()\n    ax.plot(x_data, y_data)\n    ax.set_title(\"Exponential Function Plot\")\n    return zip(x_data, y_data), ax", "compilation_passed": true, "time": 0.003948688507080078, "tests_passed": true, "error": null}
{"code": "start = range_start\n    end = range_end\n    step = step\n    step_array = np.arange(start, end, step)\n    x = []\n    y = []\n    for step in step_array:\n        y.append(np.e ** step)\n        x.append(step)\n    return zip(x, y), plt.figure(figsize=(10, 5)).subplots()", "compilation_passed": true, "time": 0.0037131309509277344, "tests_passed": true, "error": null}
{"code": "range_step = range(int(range_start / step), int(range_end / step) + 1)\n    data = (\n        (i * step, math.exp(i * step))\n        for i in range_step\n    )\n    plt.plot([i for i, _ in data], [j for _, j in data])\n    plt.title(\"Exponential function\")\n    return data, plt.gca()", "compilation_passed": true, "time": 0.0010249614715576172, "tests_passed": false, "error": "ValueError"}
{"code": "def func(x):\n        return math.e**x\n    def generate_data():\n        x = range_start\n        while x < range_end:\n            yield (x, func(x))\n            x += step\n\n    gen = generate_data()\n    ax = plt.Axes(None, {'title': 'Exponential Function Plot'})\n    ax.grid(True)\n    ax.plot(next(gen))\n    for data in gen:\n        ax.plot(data)\n    plt.show()\n\n    return gen, ax", "compilation_passed": true, "time": 0.0008950233459472656, "tests_passed": false, "error": "TypeError"}
{"code": "for i in np.arange(range_start, range_end, step):\n        yield i, math.exp(i)\n\n    ax = plt.gca()\n    ax.set_title(\"Exponential Function Plot\")\n    return data, ax", "compilation_passed": true, "time": 0.0006551742553710938, "tests_passed": false, "error": "ValueError"}
{"code": "x_data = np.arange(range_start, range_end, step)\n    y_data = np.exp(x_data)\n\n    generator = zip(x_data, y_data)\n    plt.title(\"Exponential Function Plot\")\n\n    return generator, plt.plot(x_data, y_data, color=\"red\", label=\"e^x\")", "compilation_passed": true, "time": 0.0009109973907470703, "tests_passed": false, "error": "AttributeError"}
{"code": "x_range = np.arange(range_start, range_end + step, step)\n    y_range = np.exp(x_range)\n\n    data = zip(x_range, y_range)\n\n    plt.plot(x_range, y_range, marker='o')\n    plt.title('Exponential Function Plot')\n    plt.xlabel('X')\n    plt.ylabel('Y')\n\n    ax = plt.gca()\n\n    return data, ax", "compilation_passed": true, "time": 0.0010120868682861328, "tests_passed": true, "error": null}
{"code": "# TODO: write code to generate a sequence of tuples\n    #       The sequence should have x values ranging from range_start to range_end (included)\n    #       at the given step\n    #       The sequence should yield e^x values\n    #       Use the values of range_start, range_end, and step variables as inputs\n\n    # TODO: write code to create a new plot using these values\n    #       Set the title of the plot to \"Exponential Function Plot\"\n    #       Set the x-axis label to \"x\"\n    #       Set the y-axis label to \"e^x\"\n    #       Use the x values as the x-axis values\n    #       Use the calculated e^x values as the y-axis values\n\n    # TODO: return the generated generator object\n    # TODO: return the Axes object of the plot\n    #\n    # HINT: The function range(), with three arguments, can be used to generate a sequence of values\n    #       The function xrange() is an alternative, but it was deprecated in Python 2\n\n    def func():\n        for i in range(range", "compilation_passed": false, "time": 0.0001049041748046875, "tests_passed": false, "error": "SyntaxError"}
