{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(f\"Input must be a pandas DataFrame.\")\n    if df.empty:\n        raise ValueError(f\"Empty DataFrame.\")\n    if not df[col1].apply(lambda x: np.issubdtype(x.dtype, np.number)).all():\n        raise TypeError(f\"Data in {col1} column is not numeric.\")\n    if not df[col2].apply(lambda x: np.issubdtype(x.dtype, np.number)).all():\n        raise TypeError(f\"Data in {col2} column is not numeric.\")\n    if df[col1].isnull().any() or df[col2].isnull().any():\n        raise ValueError(f\"Input DataFrame contains NA values.\")\n\n    return sns.regplot(x=col1, y=col2, data=df)", "compilation_passed": true, "time": 0.0018973350524902344, "tests_passed": false, "error": "NameError"}
{"code": "if not isinstance(df, pd.core.frame.DataFrame):\n        raise ValueError('df is not a DataFrame.')\n    if len(df.columns) < 2:\n        raise ValueError('df does not contain the specified columns.')\n    if not df[col1].apply(lambda x: x.isdigit()).all() or not df[col2].apply(lambda x: x.isdigit()).all():\n        raise TypeError('df contains non-numeric data.')\n    df = df.rename({col1: 'x', col2: 'y'}, axis=1)\n    return sns.scatterplot(x=\"x\", y=\"y\", data=df)", "compilation_passed": true, "time": 0.00199127197265625, "tests_passed": false, "error": "AttributeError"}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input should be a DataFrame.\")\n    if not df.empty:\n        if not df.isnull().any().any():\n            if (df[col1].dtype == int) or (df[col1].dtype == float):\n                if (df[col2].dtype == int) or (df[col2].dtype == float):\n                    return sns.regplot(x=col1, y=col2, data=df, truncate=False, ci=None, fit_reg=False)\n            raise TypeError(\"The second input column should be numerical.\")\n    raise ValueError(\"The input DataFrame is empty or not contains the specified columns.\")", "compilation_passed": true, "time": 0.0019009113311767578, "tests_passed": false, "error": "KeyError"}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise TypeError(\"df should be a pandas DataFrame\")\n    if not df.empty:\n        if isinstance(df, pd.DataFrame):\n            if len(df.columns) == 2 and not df.columns.str.contains(col1).any() and not df.columns.str.contains(col2).any():\n                return sns.scatterplot(df[col1], df[col2]).figure().gca()\n            raise ValueError(\n                \"df should contain exactly 2 columns named col1 and col2 and not contain col1 or col2\")\n        raise ValueError(\"df should contain exactly 2 columns named col1 and col2\")\n    raise ValueError(\"df cannot be empty\")", "compilation_passed": true, "time": 0.0014002323150634766, "tests_passed": false, "error": "ValueError"}
{"code": "# Task 1\n    if type(df) != pd.core.frame.DataFrame:\n        raise ValueError(\"df is not a DataFrame\")\n    elif df.empty:\n        raise ValueError(\"df is empty\")\n    else:\n        # Task 2\n        col1_col = df.columns[df.columns.str.startswith(col1)]\n        col2_col = df.columns[df.columns.str.startswith(col2)]\n        if type(col1_col) == list:\n            if len(col1_col) != 1:\n                raise ValueError(\"col1 is not a single column\")\n        else:\n            col1_col = col1_col.iloc[0]\n        if type(col2_col) == list:\n            if len(col2_col) != 1:\n                raise ValueError(\"col2 is not a single column\")\n        else:\n            col2_col = col2_col.iloc[0]\n\n    # Task 3\n    if", "compilation_passed": false, "time": 0.00020503997802734375, "tests_passed": false, "error": "SyntaxError"}
{"code": "import matplotlib.pyplot as plt\n\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"df must be a pandas DataFrame.\")\n\n    if not df.empty:\n        if df.dtypes[col1].name not in ['int64', 'float64']:\n            raise TypeError(\"Data in col1 must be numerical.\")\n        if df.dtypes[col2].name not in ['int64', 'float64']:\n            raise TypeError(\"Data in col2 must be numerical.\")\n        if col1 in df.columns and col2 in df.columns:\n            df1 = df[col1]\n            df2 = df[col2]\n            if (df1.min() < df1.max()) and (df2.min() < df2.max()):\n                sns.regplot(df1, df2, scatter=\"seaborn scatter\", fit_reg=False)\n            else:\n                plt.errorbar(df1, df2, xerr=0, yerr=0,", "compilation_passed": false, "time": 0.0002338886260986328, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise TypeError('Invalid input type. Expected a pandas DataFrame.')\n\n    if not (df.empty or df.columns == [col1, col2]):\n        raise ValueError('Invalid columns. Input DataFrame does not have the specified column names.')\n\n    if df[col1].nunique() == 1 or df[col2].nunique() == 1:\n        raise TypeError('Input DataFrame contains non-numeric data.')\n\n    sns.scatterplot(x=col1, y=col2, data=df)\n    return plt.gca()", "compilation_passed": true, "time": 0.001299142837524414, "tests_passed": false, "error": "KeyError"}
{"code": "# Check if the input df is a DataFrame\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\n            \"The input df is not a DataFrame, please check the input and try again\"\n        )\n\n    # Check if the df is empty\n    if df.empty:\n        raise ValueError(\n            \"The input df is empty, please check the input and try again\"\n        )\n\n    # Check if the df contains the specified columns\n    if not set(df.columns) >= {col1, col2}:\n        raise ValueError(\n            \"The input df does not contain the specified columns, please check the input and try again\"\n        )\n\n    # Check if the df contains non-numerical data\n    if df[col1].apply(pd.core.common._maybe_get_numeric_type).any():\n        raise TypeError(\n            \"The input df contains non-numerical data, please check the input and try again\"\n        )\n\n    # Check if the df contains non-numerical data\n    if df[col2].apply(pd.core.", "compilation_passed": false, "time": 0.0001652240753173828, "tests_passed": false, "error": "SyntaxError"}
{"code": "df = df.copy()\n    if df.shape == (0, 0) or df.empty:\n        raise ValueError(\"Empty DataFrame\")\n    if not df.columns.isin([col1, col2]).all():\n        raise ValueError(\"Input columns missing from the DataFrame\")\n    if df[col1].dtype == object or df[col2].dtype == object:\n        raise TypeError(\"Input column(s) is of non-numeric type\")\n    sns.regplot(x=col1, y=col2, data=df, color=\"C0\")\n    return plt.gca()", "compilation_passed": true, "time": 0.001405954360961914, "tests_passed": false, "error": "KeyError"}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"df should be a DataFrame\")\n    if df.empty:\n        raise ValueError(\"df is empty\")\n    if col1 not in df.columns:\n        raise ValueError(\"col1 should be a column in df\")\n    if col2 not in df.columns:\n        raise ValueError(\"col2 should be a column in df\")\n    if df[col1].dtype == np.object_ or df[col1].dtype == np.bool_:\n        raise TypeError(\"df[col1] should contain numeric data\")\n    if df[col2].dtype == np.object_ or df[col2].dtype == np.bool_:\n        raise TypeError(\"df[col2] should contain numeric data\")\n    return sns.regplot(x=col1, y=col2, data=df, order=1)", "compilation_passed": true, "time": 0.0016498565673828125, "tests_passed": false, "error": "NameError"}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input 'df' is not a DataFrame.\")\n    elif not len(df.columns):\n        raise ValueError(\"The input 'df' is empty.\")\n    elif not isinstance(col1, str):\n        raise ValueError(\"The input 'col1' is not a string.\")\n    elif not isinstance(col2, str):\n        raise ValueError(\"The input 'col2' is not a string.\")\n    elif col1 not in df.columns or col2 not in df.columns:\n        raise ValueError(\"One or more input columns are not in the DataFrame.\")\n    elif not df[col1].dtype.is_numeric_type():\n        raise TypeError(\"The 'df' DataFrame uses non-numeric data in the column.\")\n\n    return sns.regplot(x=col1, y=col2, data=df)", "compilation_passed": true, "time": 0.0014009475708007812, "tests_passed": false, "error": "AttributeError"}
{"code": "# check if df is a DataFrame\n    if not isinstance(df, pd.DataFrame):\n        raise TypeError(\"Input must be a pandas DataFrame\")\n\n    # check if df is empty\n    if df.empty:\n        raise ValueError(\"DataFrame is empty\")\n\n    # check if col1 and col2 are valid columns\n    if col1 not in df.columns:\n        raise ValueError(\"Invalid column: \" + col1)\n    if col2 not in df.columns:\n        raise ValueError(\"Invalid column: \" + col2)\n\n    # check if df is numeric\n    if df[col1].dtype != np.dtype('float'):\n        raise TypeError(\"Data must be numeric\")\n\n    if df[col2].dtype != np.dtype('float'):\n        raise TypeError(\"Data must be numeric\")\n\n    # check if the column names are valid\n    valid_col_names = ['X', 'Y']\n    if col1 not in valid_col_names:\n        raise ValueError(", "compilation_passed": false, "time": 0.00020623207092285156, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Check input\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"df should be a DataFrame\")\n    if df.empty:\n        raise ValueError(\"df should be non-empty\")\n    if not df.columns.is_unique:\n        raise ValueError(\"df column names should be unique\")\n\n    cols = [col1, col2]\n    if not all(col in df.columns for col in cols):\n        raise ValueError(\"df should contain the specified columns\")\n\n    if not df.columns.isin(cols).any():\n        raise TypeError(\"df use non-numeric data\")\n\n    # Draw plot\n    fig, axes = plt.subplots(figsize=(10, 10))\n\n    if isinstance(df, pd.DataFrame):\n        df = df.dropna(subset=[col1, col2])\n        ax = sns.regplot(x=col1, y=col2, data=df, fit_reg=False,\n                         scatter=True, ax=axes)\n\n    # Return", "compilation_passed": true, "time": 0.007189035415649414, "tests_passed": true, "error": null}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a DataFrame\")\n    if df.empty:\n        raise ValueError(\"DataFrame cannot be empty\")\n    if len(df.columns) < 2:\n        raise ValueError(\"DataFrame must contain at least two columns\")\n    if df[col1].dtype.name.lower() not in ['int64', 'float64'] or df[col2].dtype.name.lower() not in ['int64', 'float64']:\n        raise TypeError(\"Only numerical data can be plotted\")\n    return sns.regplot(x=col1, y=col2, data=df)", "compilation_passed": true, "time": 0.46424198150634766, "tests_passed": true, "error": null}
{"code": "if not isinstance(df, pd.DataFrame) or df.empty:\n        raise ValueError(\"Input DataFrame is empty.\")\n\n    if not all(pd.api.types.is_numeric_dtype(df[col]) for col in [col1, col2]):\n        raise TypeError(\"DataFrame does not contain non-numeric columns.\")\n\n    return sns.scatterplot(x=col1, y=col2, data=df)", "compilation_passed": true, "time": 0.8648548126220703, "tests_passed": false, "error": "KeyError"}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input dataframe should be a Pandas DataFrame\")\n    if not df.columns.isin([col1, col2]).all():\n        raise ValueError(\"Input dataframe does not contain the specified columns\")\n    if df[col1].dtype != 'int64':\n        raise TypeError(\"Column X should be an integer type\")\n    if df[col2].dtype != 'int64':\n        raise TypeError(\"Column Y should be an integer type\")\n    return sns.regplot(data=df, x=col1, y=col2, fit_reg=False)", "compilation_passed": true, "time": 0.0015981197357177734, "tests_passed": false, "error": "KeyError"}
{"code": "import matplotlib.pyplot as plt\n\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\n            'Input df must be a pandas DataFrame. Please provide the correct df as the argument.')\n\n    if not df.columns.isin([col1, col2]).all():\n        raise ValueError(\n            f'Input DataFrame does not contain the specified columns: {col1}, {col2}. Please provide a DataFrame with these columns.')\n\n    if df[col1].dtype.name != 'int64' or df[col2].dtype.name != 'int64':\n        raise TypeError(\n            f'Input DataFrame contains non-numeric data, please provide a DataFrame with numeric columns.')\n\n    plt.scatter(df[col1], df[col2])\n    return plt.gca()", "compilation_passed": true, "time": 0.0013442039489746094, "tests_passed": false, "error": "KeyError"}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"The input must be a DataFrame\")\n    if df.empty:\n        raise ValueError(\"The input DataFrame is empty\")\n    if not set(col1, col2).issubset(df.columns):\n        raise ValueError(\"The input DataFrame does not contain the specified columns\")\n    if df[col1].dtype != \"float64\" or df[col2].dtype != \"float64\":\n        raise TypeError(\"The input DataFrame contains non-numeric data\")\n    return sns.scatterplot(df, x=col1, y=col2)", "compilation_passed": true, "time": 0.0011012554168701172, "tests_passed": false, "error": "TypeError"}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(f\"Expected 'df' to be a pandas DataFrame. Received: {type(df).__name__}\")\n    if len(df) == 0 or col1 not in df or col2 not in df:\n        raise ValueError(f\"Expected 'df' to contain the specified columns: {col1} and {col2}.\")\n\n    if pd.api.types.is_numeric_dtype(df[col1]) and pd.api.types.is_numeric_dtype(df[col2]):\n        try:\n            return sns.scatterplot(x=col1, y=col2, data=df).figure.gca()\n        except TypeError:\n            raise TypeError(f\"Data in 'df' is not numeric: {df.dtypes}\")\n    else:\n        raise TypeError(f\"Data in 'df' is not numeric: {df.dtypes}\")", "compilation_passed": true, "time": 0.17123818397521973, "tests_passed": true, "error": null}
{"code": "if not isinstance(df, pd.DataFrame) or df.empty:\n        raise ValueError(\"Invalid input data\")\n\n    if not all(df[col].apply(pd.Series.dtype) == \"int64\" or df[col].apply(pd.Series.dtype) == \"float64\") or df[col1].empty or df[col2].empty:\n        raise TypeError(\"Input data is not numerical\")\n\n    sns.scatterplot(x=col1, y=col2, data=df)\n    sns.regplot(x=col1, y=col2, data=df)\n    return plt.gca()", "compilation_passed": true, "time": 0.0014040470123291016, "tests_passed": false, "error": "NameError"}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a DataFrame\")\n    if not df.columns:\n        raise ValueError(\"Empty DataFrame\")\n    if not all([pd.api.types.is_numeric_dtype(col) for col in df.columns]):\n        raise TypeError(\"DataFrame contains non-numeric data\")\n    if len(df.columns) < 2:\n        raise ValueError(f\"DataFrame does not contain at least 2 columns: {df.columns}\")\n    if len(set(df.columns)) < 2:\n        raise ValueError(f\"DataFrame contains duplicate columns: {df.columns}\")\n\n    return sns.scatterplot(data=df, x=col1, y=col2)", "compilation_passed": true, "time": 0.0014090538024902344, "tests_passed": false, "error": "ValueError"}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise TypeError('Data should be in pandas DataFrame format')\n    if df.empty:\n        raise ValueError(f'DataFrame is empty')\n    if not all([col in df.columns for col in [col1, col2]]):\n        raise ValueError(f\"DataFrame doesn't contain specified column names\")\n\n    # TODO: Use seaborn to create scatterplot with linear regression line\n    return sns.regplot(x=col1, y=col2, data=df)", "compilation_passed": true, "time": 0.3184809684753418, "tests_passed": false, "error": "TypeError"}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"df is not a DataFrame\")\n    if len(df.columns) == 0:\n        raise ValueError(\"df is empty\")\n    if not set(col1).issubset(df.columns):\n        raise ValueError(\"col1 is not a valid column in df\")\n    if not set(col2).issubset(df.columns):\n        raise ValueError(\"col2 is not a valid column in df\")\n    if df[col1].dtype != float or df[col2].dtype != float:\n        raise TypeError(\"df use non-numeric data\")\n\n    return sns.scatterplot(x=col1, y=col2, data=df)", "compilation_passed": true, "time": 0.0015530586242675781, "tests_passed": false, "error": "TypeError"}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(f\"Input dataframe not a pandas dataframe: {df}\")\n    if df.empty:\n        raise ValueError(f\"Input dataframe is empty: {df}\")\n    if not (\n        pd.api.types.is_numeric_dtype(df[col1]) and pd.api.types.is_numeric_dtype(df[col2])\n    ):\n        raise TypeError(\n            f\"Columns {col1} or {col2} not of numeric type in input dataframe: {df}\"\n        )\n    return sns.relplot(\n        x=col1,\n        y=col2,\n        data=df,\n        kind=\"scatter\",\n        x_jitter=True,\n        y_jitter=True,\n    )", "compilation_passed": true, "time": 0.0013082027435302734, "tests_passed": false, "error": "KeyError"}
{"code": "if not isinstance(df, pd.DataFrame) or df.empty:\n        raise ValueError('Invalid dataframe.')\n\n    if not all(isinstance(col, str) for col in [col1, col2]):\n        raise TypeError('The inputs must be strings.')\n\n    if df.dtypes[col1].name in [\"O\", \"category\"]:\n        raise TypeError(\n            f\"The dataframe must have numeric values in the column {col1}.\")\n\n    if df.dtypes[col2].name in [\"O\", \"category\"]:\n        raise TypeError(\n            f\"The dataframe must have numeric values in the column {col2}.\")\n\n    if (\n        not all(col in df for col in [col1, col2])\n        or len(set(df[col1]).difference(set(df[col2]))) != 0\n    ):\n        raise ValueError(\"The columns must be the same.\")\n\n    df = df.sort_values(by=[col1, col2])\n", "compilation_passed": true, "time": 0.0017969608306884766, "tests_passed": false, "error": "KeyError"}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a dataframe.\")\n    if len(df) == 0:\n        raise ValueError(\"Input dataframe is empty.\")\n    if len(df) == 1:\n        raise ValueError(\"Input dataframe contains only 1 row.\")\n    if not df[col1].dtype.name.upper().startswith(\"NUM\"):\n        raise TypeError(\"Input DataFrame does not contain numeric data.\")\n    if not df[col2].dtype.name.upper().startswith(\"NUM\"):\n        raise TypeError(\"Input DataFrame does not contain numeric data.\")\n\n    sns.scatterplot(x=col1, y=col2, data=df, alpha=0.5,\n                    color='orange')\n    sns.regplot(x=col1, y=col2, data=df)\n\n    return plt.gca()", "compilation_passed": true, "time": 0.001390695571899414, "tests_passed": false, "error": "TypeError"}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a DataFrame.\")\n    if not df.empty:\n        if not df[col1].dtype.name.upper() in ['INT', 'FLOAT']:\n            raise TypeError('input data is not numeric')\n        if not df[col2].dtype.name.upper() in ['INT', 'FLOAT']:\n            raise TypeError('input data is not numeric')\n        sns.scatterplot(df, col1, col2)\n    return plt.gcf().axes[0]", "compilation_passed": true, "time": 0.0017850399017333984, "tests_passed": false, "error": "TypeError"}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input should be a DataFrame\")\n    if len(df) == 0:\n        raise ValueError(\"DataFrame should not be empty\")\n    if not isinstance(df[col1], pd.core.dtypes.common.numeric_dtypes):\n        raise TypeError(\"Input should be numerical\")\n    if not isinstance(df[col2], pd.core.dtypes.common.numeric_dtypes):\n        raise TypeError(\"Input should be numerical\")\n\n    df.plot.scatter(col1, col2)\n    return plt.gca()", "compilation_passed": true, "time": 0.0011048316955566406, "tests_passed": false, "error": "AttributeError"}
{"code": "df = pd.DataFrame(df)\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"input is not a DataFrame\")\n    if len(df) == 0:\n        raise ValueError(\"df is empty\")\n    if df.columns.dtype.names[0] not in ('int', 'float'):\n        raise TypeError(\"df contains non-numeric data\")\n    if col1 not in df.columns or col2 not in df.columns:\n        raise ValueError(\"df does not contain the specified columns\")\n\n    plot = sns.regplot(x=col1, y=col2, data=df)\n    return plot", "compilation_passed": true, "time": 0.0010480880737304688, "tests_passed": false, "error": "TypeError"}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError('Input data must be a Pandas DataFrame.')\n    if df.empty:\n        raise ValueError('DataFrame is empty.')\n    if not all(df.dtypes == 'int64'):\n        raise TypeError('DataFrame contains non-numeric data.')\n\n    return sns.scatterplot(df, x=col1, y=col2).axes", "compilation_passed": true, "time": 0.022732973098754883, "tests_passed": false, "error": "TypeError"}
