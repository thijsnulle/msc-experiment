{"code": "# Initial values for the function\n    amp = 100\n    freq = 50\n    phase_shift = 50\n    t = np.linspace(0, 100, 1000)\n\n    # Function to generate the sine wave\n    wave_func = amp * np.sin(2 * np.pi * freq * t + phase_shift)\n\n    # Draw the plot\n    fig, ax = plt.subplots()\n    ax.plot(t, wave_func)\n    ax.set_title('Random Sine Wave')\n    ax.set_xlabel('Time (s)')\n    ax.set_ylabel('Amplitude (V)')\n    ax.set_ylim(-amp, amp)\n\n    # Return the axis object\n    return ax", "compilation_passed": true, "time": 0.000804901123046875, "tests_passed": false, "error": "NameError"}
{"code": "# -------------------------------------------------------------------------------------------------------------- #\n\n    # create your ax object here\n    ax = plt.subplot(111)\n\n    # -------------------------------------------------------------------------------------------------------------- #\n    # plot your random sine wave here\n    ax.plot(np.random.randint(-4,4,100),np.sin(np.random.randint(-180,180,100)))\n    # -------------------------------------------------------------------------------------------------------------- #\n\n    # -------------------------------------------------------------------------------------------------------------- #\n    # set the plot title here\n    ax", "compilation_passed": true, "time": 0.0006668567657470703, "tests_passed": false, "error": "NameError"}
{"code": "# Task function\n    x = np.arange(-20, 20, 0.01)\n\n    random_amplitude = 0.5 + np.random.rand() * 3\n    random_frequency = 3.5 + np.random.rand() * 4\n    random_phase_shift = -np.pi / 2 + np.pi * np.random.rand()\n\n    random_sine_wave = random_amplitude * np.sin(random_frequency * x + random_phase_shift)\n\n    plt.title('Random Sine Wave')\n    plt.xlabel('Time')\n    plt.ylabel('Amplitude')\n    plt.plot(x, random_sine_wave)\n    return plt.gca()", "compilation_passed": true, "time": 0.0006377696990966797, "tests_passed": false, "error": "NameError"}
{"code": "ax = plt.gca()\n    ax.set_title('Random Sine Wave')\n    ax.set_xlabel('Time')\n    ax.set_ylabel('Amplitude')\n    ax.set_ylim(0,10)\n\n    ax.grid(True)\n\n    y = [math.sin(2*math.pi*i/100)*5 for i in range(100)]\n    ax.plot(y)\n    plt.show()\n    return ax", "compilation_passed": true, "time": 0.0028481483459472656, "tests_passed": true, "error": null}
{"code": "# Create a figure object\n    fig = plt.figure()\n\n    # Create an axis object for the figure object\n    ax = fig.add_subplot()\n\n    # Add a title to the plot\n    ax.set_title('Random Sine Wave')\n\n    # Add x-axis ticks, ticks are time values of the 0 to 1 second interval\n    xticks = np.arange(0, 100, 1)\n    ax.set_xticks(xticks)\n\n    # Add x-axis labels\n    ax.set_xlabel('Time')\n\n    # Add y-axis labels\n    ax.set_ylabel('Amplitude')\n\n    # Generate random frequency, amplitude and phase shift\n    x = np.linspace(0, 100, 100)\n    random_frequency = np.random.randint(1, 50)\n    random_amplitude = np.random.randint(1, 50)\n    random_phase_shift = np.random.randint(0, 360)\n\n    # Plot a sine wave", "compilation_passed": true, "time": 0.004232883453369141, "tests_passed": false, "error": "NameError"}
{"code": "# The variable 'ax' should be a matplotlib.axes._axes.Axes object.\n    ax = None\n\n    # TODO: Add code to create your plot here.\n    ax = plt.subplot(111)\n    # ax.set_title('Random Sine Wave')\n    # ax.set_xlabel('Time')\n    # ax.set_ylabel('Amplitude')\n    x = []\n    y = []\n    f = randint(2,20)\n    for i in range(20):\n        x.append(i)\n        y.append((math.sin(f*x[i]) + 1) * 250)\n    plt.plot(x,y)\n    plt.show()\n    # The plot should be a sine wave.\n    # The plot should have Random Sine Wave as title.\n    # The plot should have 'Time' as the x axis label.\n    # The plot should have 'Amplitude' as the y axis label.\n    # The plot should be interactive.\n    return ax", "compilation_passed": true, "time": 0.0009849071502685547, "tests_passed": true, "error": null}
{"code": "# YOUR CODE GOES HERE\n    pass", "compilation_passed": true, "time": 0.0006022453308105469, "tests_passed": false, "error": "AttributeError"}
{"code": "fig, ax = plt.subplots()\n\n    def func(x, amplitude, freq, phase):\n        return amplitude * (math.sin(freq * x + phase))\n\n    amplitude = randint(5, 30)\n    freq = randint(2, 5)\n    phase = randint(0, 2 * math.pi)\n    x_values = list(range(101))\n    y_values = [func(x, amplitude, freq, phase) for x in x_values]\n\n    ax.plot(x_values, y_values)\n    ax.set_title('Random Sine Wave')\n    ax.set_xlabel('Time')\n    ax.set_ylabel('Amplitude')\n\n    return ax", "compilation_passed": true, "time": 0.003934144973754883, "tests_passed": false, "error": "ValueError"}
{"code": "# TODO: Create the plot\n    ax = plt.gca()\n\n    # TODO: Add the plot title and x, y labels\n    ax.set_title(\"Random Sine Wave\")\n    ax.set_xlabel(\"Time (s)\")\n    ax.set_ylabel(\"Amplitude\")\n    # TODO: Add the plot\n    plt.plot(x, y)\n    plt.show()\n    return ax", "compilation_passed": true, "time": 0.0007040500640869141, "tests_passed": false, "error": "NameError"}
{"code": "# your code goes here\n    # ***************************************************************************************** #\n\n    # Create plot\n    fig, ax = plt.subplots(figsize=(10, 8))\n\n    # Set axis labels\n    ax.set_xlabel(\"Time\")\n    ax.set_ylabel(\"Amplitude\")\n\n    # Set plot title\n    ax.set_title(\"Random Sine Wave\")\n    # ***************************************************************************************** #\n\n    # your code goes here\n    # ***************************************************************************************** #\n\n    # Generate data\n    t = np.arange(0, 10, 0.01)  # Generate a time array with a step of 0.01\n    x = np.sin(2 * math.pi * randint(0, 100) / 100 * t + randint(0, 30) * 2 * math.pi)\n\n    # Set random frequency, amplitude and phase shift\n    freq = 30\n    amp = 0.5\n    phase_shift = 5\n", "compilation_passed": true, "time": 0.0038149356842041016, "tests_passed": false, "error": "NameError"}
{"code": "ax = plt.axes(title = 'Random Sine Wave', xlabel = 'Time', ylabel = 'Amplitude')\n    time = np.linspace(0, 100, 1000)\n    freq = 10\n    phase = randint(0, 359)\n    ampl = 5\n\n    ax.plot(time, ampl * np.sin((2 * math.pi * freq) * time + phase))\n\n    return ax", "compilation_passed": true, "time": 0.003958940505981445, "tests_passed": false, "error": "NameError"}
{"code": "ax = plt.subplot(111)\n    ax.plot([0, 1], [-1, 1])\n    ax.set_title(\"Random Sine Wave\")\n    ax.set_xlabel(\"Time\")\n    ax.set_ylabel(\"Amplitude\")\n    return ax", "compilation_passed": true, "time": 0.001641988754272461, "tests_passed": true, "error": null}
{"code": "def random_func(t, freq, amp, phase):\n        \"\"\"\n        A helper function that returns a random sine wave given a list of time samples, a frequency\n        and a phase shift.\n\n        Parameters:\n        t (list): A list of time samples\n        freq (float): A frequency in Hertz (cycles/second)\n        amp (float): An amplitude.\n        phase (float): A phase shift in radians.\n\n        Returns:\n        A list of values corresponding to the samples given.\n\n        Example:\n        >>> random_func(list(range(10)), 10, 1, math.pi/4)\n        [-0.03655862084945065, -0.13404483928442552, -0.31360460060609236, -0.596924505743399, -0.8967840088522613,", "compilation_passed": false, "time": 3.886222839355469e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "# ====== YOUR CODE: ======\n    amplitude = 200\n    period = 6\n    phase = 0\n    freq = randint(2, 8)\n    ax = plt.gca()\n\n    x = [0.0]\n    y = [0.0]\n    n = 250\n    for i in range(n):\n        t = x[i]\n        y.append(amplitude * math.sin(2 * math.pi * freq * t + phase) + amplitude)\n        x.append(x[i] + period / n)\n\n    ax.set_title('Random Sine Wave')\n    ax.set_xlabel('Time')\n    ax.set_ylabel('Amplitude')\n    ax.plot(x, y, label='Random Sine Wave')\n    return ax\n    # ====== END OF YOUR CODE: ======", "compilation_passed": true, "time": 0.0019452571868896484, "tests_passed": true, "error": null}
{"code": "ax = plt.subplot()\n\n    x = np.linspace(0, 2*math.pi, 1000, endpoint=True)\n    y = np.sin(x)\n    ax.plot(x, y)\n    ax.set_title('Random Sine Wave')\n    ax.set_xlabel('Time')\n    ax.set_ylabel('Amplitude')\n    return ax", "compilation_passed": true, "time": 0.0007050037384033203, "tests_passed": false, "error": "NameError"}
{"code": "x = np.linspace(-math.pi, math.pi, 100)\n    y = np.sin(x)\n\n    fig, ax = plt.subplots()\n    ax.plot(x, y)\n    ax.set_title('Random Sine Wave')\n    ax.set_xlabel('Time (rad)')\n    ax.set_ylabel('Amplitude')\n\n    return ax", "compilation_passed": true, "time": 0.0006129741668701172, "tests_passed": false, "error": "NameError"}
{"code": "fig, ax = plt.subplots()\n\n    # Get the time range in seconds\n    t_start = 0\n    t_end = 10\n    dt = 0.05\n    t = np.arange(t_start, t_end, dt)\n\n    # Create a random sine wave\n    x = np.sin(2*math.pi*(t+randint(0,100)/1000) + math.pi/4) * math.sin(2*math.pi*t)\n\n    # Plot the random sine wave\n    ax.plot(x, t)\n    ax.set_title('Random Sine Wave')\n    ax.set_xlabel('Time (s)')\n    ax.set_ylabel('Amplitude')\n    return ax", "compilation_passed": true, "time": 0.0037550926208496094, "tests_passed": false, "error": "NameError"}
{"code": "# ax = plt.subplots()\n    x = [0, 100]\n    y = [0, 1]\n    plt.plot(x,y)\n\n    return ax", "compilation_passed": true, "time": 0.0007457733154296875, "tests_passed": false, "error": "NameError"}
{"code": "# Define some parameters for the sine wave\n    amplitude = 100 # Range: -100 <= x <= 100\n    frequency = 4.0 # Frequency (in Hz)\n    phase = 0\n\n    # Set the x values for the sine wave\n    x = np.arange(-1000, 1000, 0.01)\n\n    # Calculate the y values for the sine wave\n    y = amplitude * math.sin(2 * math.pi * frequency * x + phase)\n\n    # Create a plot of the sine wave\n    fig, ax = plt.subplots()\n    ax.plot(x, y)\n    ax.set_title('Random Sine Wave')\n    ax.set_xlabel('Time')\n    ax.set_ylabel('Amplitude')\n\n    return ax", "compilation_passed": true, "time": 0.0006997585296630859, "tests_passed": false, "error": "NameError"}
{"code": "freq = math.pi\n    amplitude = randint(0, 10)\n    phase_shift = math.pi\n    t = np.linspace(0, 10, 1000)\n    s = amplitude * math.sin(freq*t + phase_shift)\n    ax = plt.subplot()\n    ax.plot(t, s)\n    ax.set_title('Random Sine Wave')\n    ax.set_xlabel('Time')\n    ax.set_ylabel('Amplitude')\n    return ax", "compilation_passed": true, "time": 0.0006380081176757812, "tests_passed": false, "error": "NameError"}
{"code": "fig = plt.figure(figsize=(10, 10))\n    ax = fig.add_subplot(1, 1, 1)\n    ax.set_title(\"Random Sine Wave\")\n    ax.set_xlabel(\"Time\")\n    ax.set_ylabel(\"Amplitude\")\n    ax.grid(True)\n    x_axis = list(range(100))\n    random_freq = randint(1, 100)\n    random_amplitude = randint(1, 100)\n    random_phase = randint(1, 100)\n    sin_values = [math.sin((i * random_freq) / 1000 + random_phase) * random_amplitude for i in x_axis]\n    ax.plot(x_axis, sin_values)\n    return ax", "compilation_passed": true, "time": 0.017718076705932617, "tests_passed": true, "error": null}
{"code": "fig, ax = plt.subplots(figsize=(15,5))\n    ax.set(title='Random Sine Wave', xlabel='Time', ylabel='Amplitude')\n    ax.plot(np.sin(100 * (np.arange(1000) / 100)))\n    ax.set_xlim(-0.2, 100)\n    ax.set_ylim(-1.2, 1.2)\n    return ax", "compilation_passed": true, "time": 0.0038352012634277344, "tests_passed": false, "error": "NameError"}
{"code": "f = math.pi\n    a = 1\n    p = math.pi\n    ax = plt.subplots(figsize=(15, 10))[1]\n    plt.title('Random Sine Wave')\n    plt.xlabel('Time')\n    plt.ylabel('Amplitude')\n    x = np.linspace(0, 1, 100)\n    y = a * np.sin(p + f * x)\n    plt.plot(x, y, lw=3)\n    return ax", "compilation_passed": true, "time": 0.003797769546508789, "tests_passed": false, "error": "NameError"}
{"code": "ax = plt.figure(\"Random Sine Wave\").add_subplot(1, 1, 1)\n    ax.set_title(\"Random Sine Wave\")\n    ax.set_xlabel(\"Time\")\n    ax.set_ylabel(\"Amplitude\")\n\n    for _ in range(5):\n        random_number_frequency = randint(1, 100)\n        random_number_amplitude = randint(-100, 100)\n        random_number_phase = randint(0, 2 * math.pi)\n        random_number_time = randint(0, 1000)\n        random_sine_wave = plt.plot(\n            range(random_number_time),\n            math.sin(math.pi * random_number_frequency * random_number_time / 1000.0 + random_number_phase) *\n            random_number_amplitude + random_number_amplitude,\n            \"r\"\n        )\n        # plt.title(random_sine_wave)\n\n", "compilation_passed": true, "time": 0.0041730403900146484, "tests_passed": false, "error": "ValueError"}
{"code": "fig, ax = plt.subplots()\n    x = []\n    y = []\n    t = []\n    while (True):\n        x.append(time.time())\n        t.append(math.sin(time.time() * 100))\n        y.append(randint(-10, 10))\n        y = [i * 2 for i in y]\n        ax.clear()\n        ax.plot(x, y)\n        ax.grid(True)\n        ax.set_title(\"Random Sine Wave\")\n        ax.set_xlabel(\"Time\")\n        ax.set_ylabel(\"Amplitude\")\n        time.sleep(1)\n    return ax", "compilation_passed": true, "time": 0.00360107421875, "tests_passed": false, "error": "NameError"}
{"code": "# FREQ = 100 # Frequency in Hertz.\n    # AMPL = 1. # Amplitude in Amplitude.\n    # PHAS = 0 # Phase shift in Rad.\n    # N_SAMPLES = 100 # Number of samples.\n\n    # T = np.linspace(0,1,N_SAMPLES) # Time in seconds.\n    # S = AMPL * np.sin(2 * np.pi * FREQ * T + PHAS) # Sine wave.\n\n    # ax.plot(T,S)\n    # ax.set_title('Random Sine Wave')\n    # ax.set_xlabel('Time (sec)')\n    # ax.set_ylabel('Amplitude')\n\n    # return ax", "compilation_passed": true, "time": 0.0005648136138916016, "tests_passed": false, "error": "AttributeError"}
{"code": "fig = plt.figure()\n    ax = plt.axes(xlim = (0, 100), ylim = (-5, 5))\n    ax.set_title(\"Random Sine Wave\")\n    ax.set_xlabel(\"Time\")\n    ax.set_ylabel(\"Amplitude\")\n    x = np.linspace(0,100,1000)\n\n    def animate_func(t):\n        a = randint(-5, 5)\n        f = randint(1,100)/100\n        d = randint(1, 1000)/1000\n        y = a*np.sin(2*math.pi*f*t+d)\n        ax.clear()\n        ax.plot(x,y)\n        plt.show()\n\n    ani = plt.FuncAnimation(fig,animate_func,frames=100)\n    plt.show()\n    return ax", "compilation_passed": true, "time": 0.0037589073181152344, "tests_passed": false, "error": "NameError"}
{"code": "# -------------------------------------------------------------------------------------------- #\n    # Task 1\n    # Your code\n\n    # -------------------------------------------------------------------------------------------- #\n    ax = plt.subplots()[1]\n    return ax", "compilation_passed": true, "time": 0.0034241676330566406, "tests_passed": true, "error": null}
{"code": "# TODO 1\n    # Step 1: Get random parameters from a uniform distribution\n    freq = randint(1, 100)\n    amp = randint(0, 100)\n    phase = randint(0, 100)\n\n    # Step 2: Create an x_list\n    x_list = [0]\n    for t in range(1, 1000):\n        x_list.append(t)\n\n    # Step 3: Create an y_list using the parameters\n    y_list = [0]\n    for t in x_list:\n        y_list.append(amp * math.sin(freq * t + phase))\n\n    # Step 4: Plot the x_list and y_list to an axis\n    ax = plt.gca()\n    ax.plot(x_list, y_list)\n    ax.set_title(\"Random Sine Wave\")\n    ax.set_xlabel(\"Time\")\n    ax.set_ylabel(\"Amplitude\")\n    return ax", "compilation_passed": true, "time": 0.0010788440704345703, "tests_passed": false, "error": "ValueError"}
{"code": "fig, ax = plt.subplots()\n    ax.plot(np.random.rand(100), 'ro')\n    ax.set_title('Random Sine Wave')\n    ax.set_xlabel('Time')\n    ax.set_ylabel('Amplitude')\n    ax.set_ylim(-1, 1)\n    return ax", "compilation_passed": true, "time": 0.003832101821899414, "tests_passed": false, "error": "NameError"}
