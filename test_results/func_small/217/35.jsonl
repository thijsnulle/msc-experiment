{"code": "# generate a sample from a normal distribution\n    np.random.seed(seed)\n    data = np.random.normal(mu, sigma, sample_size)\n\n    # compute empirical mean and standard deviation\n    empirical_mean = np.mean(data)\n    empirical_std = np.std(data)\n\n    # compute histogram of the sample\n    n, bins, patches = plt.hist(data, 50, density=True, facecolor='yellow', alpha=0.5)\n\n    # compute normal PDF with mean and standard deviation\n    x = np.linspace(-6, 6, 1000)\n    y = stats.norm(mu, sigma).pdf(x)\n    plt.plot(x, y, '--', color='red', label=\"Normal Distribution\")\n    # create axes for the plot\n    ax = plt.subplots(figsize=(10, 5))[1]\n    # set plot title\n    plt.title('Normal Distribution with $\\\\mu = %0.2f, \\\\sigma = %0.2f$' % (mu,", "compilation_passed": false, "time": 0.00027680397033691406, "tests_passed": false, "error": "SyntaxError"}
{"code": "# generate sample\n    random.seed(seed)\n    np.random.seed(seed)\n    sample = stats.norm(mu, sigma).rvs(sample_size)\n    # create axes\n    ax = plt.subplots()\n    plt.title('Normal Distribution with mu=%0.2f, sigma=%0.2f' % (mu, sigma))\n    plt.hist(sample)\n    # get the empirical mean and standard deviation of the sample\n    mean = np.mean(sample)\n    std = np.std(sample)\n    return ax, round(mean, 3), round(std, 3)", "compilation_passed": true, "time": 0.0009438991546630859, "tests_passed": false, "error": "NameError"}
{"code": "np.random.seed(seed)\n    x = stats.norm(mu, sigma).rvs(sample_size)\n    mean = np.mean(x)\n    std = np.std(x)\n    ax = plt.hist(x, bins=20, density=True)\n    plt.xlabel('x')\n    plt.ylabel('PDF')\n    plt.title('Normal Distribution with $\\mu = {}, \\\\sigma = {}$'.format(mu, sigma))\n    return ax, mean, std", "compilation_passed": true, "time": 0.005288839340209961, "tests_passed": true, "error": null}
{"code": "rng = np.random.default_rng(seed)\n    norm_dist = stats.norm(mu, sigma)\n    sample = norm_dist.rvs(sample_size)\n\n    # Plot the histogram with bins centered at sample values and the PDF\n    plt.figure(figsize=(10, 5))\n    ax = plt.subplot(1, 1, 1)\n    ax.hist(sample, bins=10, density=True, color='g', label='Sample')\n    x = np.linspace(sample.min(), sample.max(), 200)\n    y = norm_dist.pdf(x)\n    ax.plot(x, y, color='b', label='PDF')\n    ax.legend(loc='upper right')\n    plt.title(f'Normal Distribution with $\\\\mu = {round(mu, 3)}, \\\\sigma = {round(sigma, 3)}$')\n    return ax, round(mean, 3), round(std, 3)", "compilation_passed": true, "time": 0.007227897644042969, "tests_passed": false, "error": "NameError"}
{"code": "# Generate a sample from a normal distribution using the scipy.stats.norm.rvs() method\n    # The seed argument is set to the given value, so that the same sample is generated every time the function is run\n    np.random.seed(seed)\n    sample = stats.norm.rvs(loc=mu, scale=sigma, size=sample_size)\n\n    # Plot the histogram with the PDF using matplotlib.pyplot.hist()\n    plt.title(f\"Normal Distribution with \\\\mu = {mu:.2f}, \\\\sigma = {sigma:.2f}\")\n    plt.hist(sample, bins=20, density=True)\n    plt.xlabel(\"Sample\")\n    plt.ylabel(\"Probability\")\n    plt.grid()\n    ax = plt.gca()\n\n    # Compute the empirical mean and standard deviation of the sample\n    empirical_mean = np.mean(sample)\n    empirical_std = np.std(sample, ddof=1)\n\n    # Return the axes object and the empirical mean and standard deviation\n    return ax, empirical_mean, empirical", "compilation_passed": true, "time": 0.0049021244049072266, "tests_passed": false, "error": "NameError"}
{"code": "np.random.seed(seed)\n    sample = np.random.normal(mu, sigma, sample_size)\n\n    plt.hist(sample, bins=30, density=True)\n    x = np.linspace(min(sample), max(sample), len(sample) * 2)\n    plt.plot(x, stats.norm.pdf(x, mu, sigma), label=\"PDF\")\n    plt.title('Normal Distribution with \u03bc = {}, \u03c3 = {}'.format(round(mu, 2), round(sigma, 2)))\n    plt.legend()\n    plt.show()\n\n    return plt.gca(), round(mean, 3), round(std, 3)", "compilation_passed": true, "time": 0.007897138595581055, "tests_passed": false, "error": "NameError"}
{"code": "np.random.seed(seed)\n    data = stats.norm(mu, sigma).rvs(sample_size)\n\n    # plot data\n    ax = plt.figure().add_subplot(111)\n    ax.hist(data, density=True, edgecolor='black', bins=20)\n    ax.xaxis.set_ticks(np.arange(-5, 6, 1))\n    ax.yaxis.set_ticks(np.arange(0, 0.6, 0.1))\n    ax.xaxis.grid(True)\n    ax.yaxis.grid(True)\n    ax.xaxis.set_major_formatter(plt.NullFormatter())\n    ax.yaxis.set_major_formatter(plt.NullFormatter())\n    ax.set_title('Normal Distribution with \u03bc = {0}, \u03c3 = {1}'.format(round(mu, 3), round(sigma, 3)))\n\n    return ax, np.mean(data), np.std(data)", "compilation_passed": true, "time": 0.013195037841796875, "tests_passed": true, "error": null}
{"code": "# Generate sample from the normal distribution\n    np.random.seed(seed)\n    sample = np.random.normal(mu, sigma, sample_size)\n\n    # Plot histogram and normal PDF\n    plt.figure()\n    n, bins, patches = plt.hist(sample, density=True, bins=50, alpha=0.5)\n    x = np.linspace(min(sample), max(sample), 200)\n    y = stats.norm(mu, sigma).pdf(x)\n    plt.plot(x, y, color='r', linewidth=2)\n    plt.title('Normal Distribution with $\\\\mu = %0.2f, \\\\sigma = %0.2f$' % (mu, sigma))\n    plt.show()\n\n    # Calculate empirical mean and standard deviation\n    emp_mean = np.mean(sample)\n    emp_std = np.std(sample)\n\n    return plt.gca(), emp_mean, emp_std", "compilation_passed": true, "time": 0.06841492652893066, "tests_passed": true, "error": null}
{"code": "# Generate sample from normal distribution\n    sample = stats.norm.rvs(loc=mu, scale=sigma, size=sample_size, random_state=seed)\n    # Calculate empirical mean and standard deviation of sample\n    emp_mean = np.mean(sample)\n    emp_std = np.std(sample)\n    # Plot the histogram together with the normal PDF\n    ax = plt.hist(sample, bins=25, density=True, label=\"PDF\")\n    plt.xlabel(\"x\")\n    plt.ylabel(\"PDF(x)\")\n    plt.title(\"Normal Distribution with mu = {0:.2f}, sigma = {1:.2f}\".format(mu, sigma))\n    return ax, emp_mean, emp_std", "compilation_passed": true, "time": 0.0059969425201416016, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    sample = np.random.normal(mu, sigma, sample_size)\n\n    ax = plt.hist(sample, bins=50)\n    plt.title(f'Normal Distribution with $\\\\mu = {round(mu, 2)}, \\\\sigma = {round(sigma, 2)}$')\n    plt.show()\n\n    empirical_mean = np.mean(sample)\n    empirical_std = np.std(sample)\n\n    return ax, empirical_mean, empirical_std", "compilation_passed": true, "time": 0.010187864303588867, "tests_passed": true, "error": null}
{"code": "# Generate a sample from the normal distribution.\n    sample = np.random.normal(mu, sigma, sample_size)\n\n    # Generate a histogram of the sample.\n    fig, ax = plt.subplots()\n    ax.hist(sample, density=True)\n    x = np.linspace(min(sample), max(sample), 100)\n    ax.plot(x, stats.norm(mu, sigma).pdf(x), label='PDF')\n    ax.legend()\n    ax.set_title(\"Normal Distribution with \u03bc = {mu:.2f}, \u03c3 = {sigma:.2f}\".format(mu=mu, sigma=sigma))\n    ax.set_xlabel('x')\n    ax.set_ylabel('PDF')\n\n    return fig, sample.mean(), sample.std()", "compilation_passed": true, "time": 0.007533073425292969, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    samples = stats.norm(loc=mu, scale=sigma).rvs(sample_size)\n    ax = plt.hist(samples, density=True, bins=50)\n    x = np.linspace(samples.min(), samples.max(), 1000)\n    y = stats.norm(loc=mu, scale=sigma).pdf(x)\n    plt.title(f'Normal Distribution with $\\mu = {mu}, \\sigma = {sigma}$')\n    plt.plot(x, y, color='r', linewidth=3)\n    plt.show()\n    return ax, round(np.mean(samples), 3), round(np.std(samples), 3)", "compilation_passed": true, "time": 0.010860919952392578, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    x = stats.norm.rvs(mu, sigma, size=sample_size, random_state=seed)\n    fig, ax = plt.subplots(1, 1)\n    ax.set(title(\"Normal Distribution with $\\mu = {0:.3f}, \\sigma = {1:.3f}$\".format(mu, sigma)))\n    ax.hist(x, density=True, label=\"sample\", bins=20)\n    ax.plot(x, np.exp(-(x - mu)**2 / 2) / np.sqrt(2 * np.pi),\n            label='probability density function (PDF)', lw=2)\n    ax.grid(True)\n    ax.legend(loc='best')\n    return ax, x.mean(), x.std()", "compilation_passed": true, "time": 0.004144191741943359, "tests_passed": false, "error": "NameError"}
{"code": "# generate sample\n    rng = np.random.default_rng(seed)\n    sample = rng.normal(mu, sigma, sample_size)\n\n    # plot histogram\n    fig, ax = plt.subplots(figsize=(10, 6), facecolor='w')\n    ax.hist(sample, bins=10, alpha=0.5, density=True, color=\"red\", label=f'$\\mu = {mu:.2f}, \\\\sigma = {sigma:.2f}$')\n    ax.axvline(mu, linestyle='--', color='blue', linewidth=1.5)\n    ax.set_xlabel(r\"$x$\")\n    ax.set_ylabel(r\"$\\pi(x)$\")\n    ax.set_title(f\"Normal Distribution with $\\\\mu = {mu:.2f}, \\\\sigma = {sigma:.2f}$\")\n    ax.set_xlim([-5, 5])\n    plt.show()\n\n    # empirical mean and standard deviation\n    emp_mean = np.", "compilation_passed": false, "time": 0.00027179718017578125, "tests_passed": false, "error": "SyntaxError"}
{"code": "np.random.seed(seed)\n    norm_dist = stats.norm(mu, sigma)\n    samples = norm_dist.rvs(sample_size)\n    mean = np.mean(samples)\n    std = np.std(samples)\n\n    ax = plt.plot(np.arange(sample_size), np.histogram(samples, bins=100, density=True)[0],\n                  color='#54F3FB', linewidth=1,\n                  alpha=0.4, label='PDF', lw=3)\n\n    plt.axvline(x=mean, color='#54F3FB', linestyle='--', alpha=0.8)\n    plt.title(f'Normal Distribution with $\\\\mu = {round(mean, 3)}, \\\\sigma = {round(std, 3)}$')\n\n    return ax, mean, std", "compilation_passed": true, "time": 0.001522064208984375, "tests_passed": false, "error": "TypeError"}
{"code": "np.random.seed(seed)\n    sample = stats.norm.rvs(loc=mu, scale=sigma, size=sample_size)\n    ax = plt.hist(sample, bins='auto')\n    return ax, np.mean(sample), np.std(sample)", "compilation_passed": true, "time": 0.276932954788208, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    samples = stats.norm.rvs(size=sample_size, loc=mu, scale=sigma)\n    ax = plt.hist(samples, bins=30)\n    plt.title(f\"Normal Distribution with $\\\\mu = {mu:.2f}, \\\\sigma = {sigma:.2f}$\")\n    ax.set_xlabel(\"x\")\n    ax.set_ylabel(\"Count\")\n    return plt.gcf(), samples.mean(), samples.std()", "compilation_passed": true, "time": 0.006256103515625, "tests_passed": false, "error": "AttributeError"}
{"code": "# TODO: Generate a sample from a normal distribution with a given mean and standard deviation.\n    #  - Return the Axes object representing the plot together with the empirical mean and standard deviation\n    #    of the sample.\n\n    # TODO: Generate a sample from a normal distribution with a given mean and standard deviation.\n    np.random.seed(seed)\n    sample = np.random.normal(mu, sigma, sample_size)\n    emp_mean = np.mean(sample)\n    emp_std = np.std(sample)\n    emp_sample = np.asarray(sample)\n\n    ax = plt.subplots()\n    plt.hist(sample, 50, density=True)\n    x = np.linspace(np.min(sample), np.max(sample), 100)\n    plt.plot(x, stats.norm(emp_mean, emp_std).pdf(x))\n\n    ax.set_title(\"Normal Distribution with \u03bc = %0.2f, \u03c3 = %0.2f\" % (emp_mean, emp_std))\n    return ax", "compilation_passed": true, "time": 0.013028144836425781, "tests_passed": false, "error": "AttributeError"}
{"code": "if seed is not None:\n        np.random.seed(seed)\n    # your code here\n    sample = stats.norm.rvs(mu, sigma, sample_size)\n    ax = plt.hist(sample, bins=100, density=True)\n    plt.title(\"Normal Distribution with \u03bc = %0.2f, \u03c3 = %0.2f\" % (mu, sigma))\n    return ax, np.mean(sample), np.std(sample)", "compilation_passed": true, "time": 0.018217086791992188, "tests_passed": true, "error": null}
{"code": "if sample_size <= 0:\n        print(\"sample_size must be > 0\")\n        return\n    # Create numpy array with sample size of data to draw from\n    # sample = np.random.normal(mu, sigma, sample_size)\n    sample = np.random.default_rng(seed).normal(mu, sigma, sample_size)\n    # print(np.mean(sample))\n    # print(np.std(sample))\n    emp_mean = np.mean(sample)\n    emp_std = np.std(sample)\n    # Plot histogram\n    ax = plt.subplots()\n    plt.hist(sample, 100, density=True, edgecolor='black')\n    plt.plot(range(-3, 3), stats.norm(emp_mean, emp_std).pdf(range(-3, 3)), 'k', linewidth=1.5)\n    # Set plot title\n    title = f\"Normal Distribution with \u03bc = {emp_mean:.3f}, \u03c3 = {emp_std:.3f}\"\n    plt", "compilation_passed": true, "time": 0.02165508270263672, "tests_passed": false, "error": "TypeError"}
{"code": "# 1\n    np.random.seed(seed)\n    # 2\n    x = stats.norm.rvs(mu, sigma, size=sample_size)\n    # 3\n    plt.hist(x, bins=100, density=True)\n    # 4\n    plt.plot(x, stats.norm.pdf(x, mu, sigma), 'r', lw=5, alpha=0.6)\n    # 5\n    plt.title(f'Normal Distribution with $\\\\mu = {mu}, \\\\sigma = {sigma}$')\n    # 6\n    ax = plt.gca()\n    # 7\n    emp_mean = np.mean(x)\n    # 8\n    emp_std = np.std(x)\n    # 9\n    return ax, emp_mean, emp_std", "compilation_passed": true, "time": 0.018141984939575195, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    random_values = stats.norm.rvs(mu, sigma, sample_size)\n    ax = plt.hist(random_values, bins=100)\n    ax.set_xlabel(\"Value\")\n    ax.set_ylabel(\"Frequency\")\n    ax.set_title(\"Normal Distribution with mu = %0.2f, sigma = %0.2f\" % (mu, sigma))\n    ax = plt.plot(ax[0], ax[1], linewidth=2)\n    return ax, mean, std", "compilation_passed": true, "time": 0.01772904396057129, "tests_passed": false, "error": "AttributeError"}
{"code": "np.random.seed(seed)\n    x = stats.norm(mu, sigma).rvs(sample_size)\n    ax = plt.hist(x, bins=50)\n    plt.title('Normal Distribution with mu={}, sigma={}'.format(mu, sigma))\n    return ax, np.mean(x), np.std(x)", "compilation_passed": true, "time": 0.009885072708129883, "tests_passed": true, "error": null}
{"code": "random_number = np.random.RandomState(seed)\n    samples = stats.norm.rvs(mu, sigma, sample_size)\n    ax = plt.subplot(1, 1, 1)\n    ax.hist(samples, density=True)\n    ax.plot(np.linspace(-4.5, 4.5, 200), stats.norm.pdf(np.linspace(-4.5, 4.5, 200), mu, sigma))\n    plt.title('Normal Distribution with \u03bc = %0.2f, \u03c3 = %0.2f' % (mu, sigma))\n    ax.set_xlabel('X')\n    ax.set_ylabel('Frequency')\n    return ax, samples.mean(), samples.std()", "compilation_passed": true, "time": 0.003298044204711914, "tests_passed": true, "error": null}
{"code": "# Generate sample\n    random_sample = stats.norm.rvs(loc=mu, scale=sigma, size=sample_size, random_state=seed)\n\n    # Plot histogram\n    # x = np.linspace(stats.norm.ppf(0.001, loc=mu, scale=sigma), stats.norm.ppf(0.999, loc=mu, scale=sigma), 100)\n    # fig, ax = plt.subplots(figsize=(8,8))\n    # ax.plot(x, stats.norm.pdf(x, loc=mu, scale=sigma))\n    # ax.hist(random_sample, density=True, color='green', alpha=0.75, label='histogram')\n    # ax.plot(x, stats.norm.pdf(x, loc=mu, scale=sigma), 'k-', lw=2, alpha=1, label='PDF')\n    # ax.set_xlim((-5, 5))\n    # ax.set_title(\"Normal distribution with mu = \" + str(mu", "compilation_passed": true, "time": 0.0008859634399414062, "tests_passed": false, "error": "TypeError"}
{"code": "if seed != 0:\n        np.random.seed(seed)\n\n    sample = np.random.normal(mu, sigma, sample_size)\n    ax = plt.hist(sample, bins='auto', density=True, histtype='step', color='blue', label=\"PDF\")\n\n    # plot PDF\n    x = np.linspace(-10, 10, 10000)\n    y = stats.norm.pdf(x, mu, sigma)\n    ax2 = plt.plot(x, y, 'k', label=\"PDF\")\n    plt.title('Normal Distribution with \u03bc = %0.2f, \u03c3 = %0.2f' % (mu, sigma))\n    plt.xlabel('x')\n    plt.ylabel('f(x)')\n    plt.legend()\n    plt.show()\n\n    return ax, round(mean, 3), round(std, 3)", "compilation_passed": true, "time": 0.0032799243927001953, "tests_passed": false, "error": "NameError"}
{"code": "np.random.seed(seed)\n    X = np.random.normal(loc=mu, scale=sigma, size=sample_size)\n    ax = plt.plot(X, 1 / np.sqrt(2 * np.pi * sigma**2) * np.exp(-(X - mu)**2 / 2), label=\"PDF\")\n    plt.title(f\"Normal Distribution with $\\\\mu = {mu:.2f}, \\\\sigma = {sigma:.2f}$\")\n    return ax, np.mean(X), np.std(X)", "compilation_passed": true, "time": 0.0011188983917236328, "tests_passed": true, "error": null}
{"code": "random.seed(seed)\n    sample = stats.norm(mu, sigma).rvs(sample_size)\n    ax = plt.plot(sample, 'g.')\n    plt.hist(sample, bins=30, density=True, alpha=0.5, label=\"PDF\", color=\"r\")\n    return ax, stats.mean(sample), stats.stdev(sample)", "compilation_passed": true, "time": 0.0010716915130615234, "tests_passed": false, "error": "NameError"}
{"code": "np.random.seed(seed)\n    random_numbers = stats.norm.rvs(mu, sigma, size=sample_size)\n\n    ax, bins, patches = plt.hist(random_numbers, bins=50, density=True, color='blue', ec='black', alpha=0.7, label='Empirical distribution')\n    x = np.linspace(random_numbers.min(), random_numbers.max(), 1000)\n    plt.plot(x, stats.norm.pdf(x, mu, sigma), 'k-', label='Probability density function')\n\n    return ax, random_numbers.mean(), random_numbers.std()", "compilation_passed": true, "time": 0.01012730598449707, "tests_passed": true, "error": null}
{"code": "random.seed(seed)\n    x = np.random.normal(mu, sigma, sample_size)\n    ax = plt.hist(x, bins=25)\n    ax = plt.plot(ax[0], stats.norm.pdf(ax[0], mu, sigma))\n    ax = plt.title(f'Normal Distribution with \\\\mu = {mu}, \\\\sigma = {sigma}')\n    ax = plt.axvline(x, linewidth=2, color='g', alpha=0.5)\n    mean = sum(x)/len(x)\n    std = np.std(x)\n    return ax, mean, std", "compilation_passed": true, "time": 0.0008559226989746094, "tests_passed": false, "error": "NameError"}
