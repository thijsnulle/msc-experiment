{"code": "# Create a histogram\n    samples = norm.rvs(loc=mean, scale=std_dev, size=num_samples, random_state=42)\n\n    # Create a figure for the plot\n    fig, ax = plt.subplots(figsize=(6,4))\n    ax.set(title=f'Fit results: mean={mean:.2f}, std={std_dev:.2f}')\n    ax.hist(samples, bins=30)\n    return fig, samples", "compilation_passed": true, "time": 0.01778697967529297, "tests_passed": false, "error": "AttributeError"}
{"code": "x = np.random.normal(mean, std_dev, num_samples)\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    ax.set_xlim(x.min(), x.max())\n    ax.set_xticks(np.linspace(x.min(), x.max(), 10))\n    ax.set_ylim(0, 0.15)\n    ax.hist(x, density=True, bins=30, label='Normal')\n    ax.plot(x, norm.pdf(x), label='Probability Distribution')\n    return fig, x", "compilation_passed": true, "time": 0.020036935806274414, "tests_passed": false, "error": "AttributeError"}
{"code": "mean = 0\n    std_dev = 1\n    num_samples = 1000\n\n    # Generate the samples\n    samples = np.random.normal(mean, std_dev, num_samples)\n\n    # Create the histogram and plot\n    fig, ax = plt.subplots()\n    ax.hist(samples, bins=30, density=True)\n    x = np.linspace(np.min(samples), np.max(samples), num=500, endpoint=True)\n    ax.plot(x, norm.pdf(x, mean, std_dev), linewidth=2)\n    ax.set_title(f'Fit results: mean = {mean:.2f}, std = {std_dev:.2f}')\n    return fig, samples", "compilation_passed": true, "time": 0.017319202423095703, "tests_passed": false, "error": "AttributeError"}
{"code": "x = np.linspace(mean - 5 * std_dev, mean + 5 * std_dev, 10000)\n    y = norm.pdf(x, mean, std_dev)\n    fig, ax = plt.subplots()\n    ax.plot(x, y)\n    ax.set_xlabel(\"x\")\n    ax.set_ylabel(\"y\")\n    ax.set_title(\"Fit results: mean = %.2f, std = %.2f\" % (mean, std_dev))\n    ax.hist(x, bins=30, density=True, label=\"histogram\")\n    plt.show()\n    return (fig, x)", "compilation_passed": true, "time": 0.017361164093017578, "tests_passed": false, "error": "AttributeError"}
{"code": "samples = np.random.normal(mean, std_dev, num_samples)\n\n    fig, ax = plt.subplots()\n    ax.hist(samples, bins=30, density=True)\n    x = np.linspace(np.min(samples), np.max(samples), 100)\n    ax.plot(x, norm.pdf(x, mean, std_dev))\n    return fig, samples", "compilation_passed": true, "time": 0.017171859741210938, "tests_passed": false, "error": "AttributeError"}
{"code": "fig, ax = plt.subplots()\n    samples = norm.rvs(size = num_samples, loc = mean, scale = std_dev, random_state = 1)\n    ax.hist(samples, bins = 30, density = True, color = 'red')\n    ax.plot(samples, norm.pdf(samples, loc = mean, scale = std_dev), linewidth = 5, color = 'blue', label = 'PDF')\n    ax.set_title(\"Fit results: mean = %.2f, std = %.2f\" % (mean, std_dev))\n    ax.legend()\n    plt.show()\n    return fig, samples", "compilation_passed": true, "time": 0.01763010025024414, "tests_passed": false, "error": "AttributeError"}
{"code": "np.random.seed(0)\n    samples = norm.rvs(loc=mean, scale=std_dev, size=num_samples, random_state=0)\n    plt.figure()\n    bins = np.linspace(0, 10, 30)\n    plt.hist(samples, bins=bins, density=True)\n    x = np.linspace(-10, 10, 100)\n    y = norm.pdf(x, loc=mean, scale=std_dev)\n    plt.plot(x, y)\n    plt.title(f\"Fit results: mean = {mean:.2f}, std = {std_dev:.2f}\")\n    plt.show()\n    return fig, samples", "compilation_passed": true, "time": 0.017297029495239258, "tests_passed": false, "error": "NameError"}
{"code": "fig, ax = plt.subplots()\n\n    ax.set_xlabel(\"Samples\")\n    ax.set_ylabel(\"PDF\")\n\n    samples = np.random.normal(mean, std_dev, num_samples)\n    ax.hist(samples, density=True, bins=30, label=\"Sample\")\n\n    x = np.linspace(mean - 3*std_dev, mean + 3*std_dev, 100)\n    ax.plot(x, norm.pdf(x, mean, std_dev), label=\"PDF\")\n\n    ax.set_title(\"Fit results: mean = {mean:.2f}, std = {std_dev:.2f}\".format(mean=mean, std_dev=std_dev))\n    ax.grid(True)\n    ax.legend()\n\n    return fig, samples", "compilation_passed": true, "time": 0.01813507080078125, "tests_passed": false, "error": "AttributeError"}
{"code": "# Generate the sample values.\n    rng = np.random.default_rng()\n    samples = rng.normal(mean, std_dev, num_samples)\n\n    # Create a figure object and axes object to draw the plot\n    fig, ax = plt.subplots()\n\n    # Create the histogram\n    ax.hist(samples, bins=30, density=True)\n\n    # Create the PDF\n    x = np.linspace(samples.min(), samples.max(), 100)\n    pdf = norm.pdf(x, mean, std_dev)\n    ax.plot(x, pdf, 'r--')\n\n    # Set the title with the fit results\n    ax.set_title('Fit results: mean = {0:.2f}, std = {1:.2f}'.format(mean, std_dev))\n    return fig, samples", "compilation_passed": true, "time": 0.021027088165283203, "tests_passed": false, "error": "AttributeError"}
{"code": "fig = plt.figure()\n    samples = np.random.normal(mean, std_dev, num_samples)\n    bins = np.linspace(mean-3*std_dev, mean+3*std_dev, 30)\n    plt.hist(samples, bins, color='green')\n    plt.axvline(x=mean, color='red')\n    plt.title(\"Fit results: mean = %.2f, std = %.2f\" % (mean, std_dev))\n    return fig, samples", "compilation_passed": true, "time": 0.0175631046295166, "tests_passed": false, "error": "AttributeError"}
{"code": "x = norm.pdf(np.arange(0, 100, .2), mean, std_dev)\n    y = norm(mean, std_dev).pdf(np.arange(0, 100, .2))\n    fig = plt.figure()\n    plt.plot(x, y)\n    plt.show(fig)\n    return fig, np.arange(0, 100, .2)", "compilation_passed": true, "time": 0.012691974639892578, "tests_passed": false, "error": "AttributeError"}
{"code": "fig, ax = plt.subplots()\n    # 1.) Generates a histogram of samples drawn from a normal distribution and overlays\n    #     the probability density function (PDF) of the normal distribution.\n    x = np.linspace(-4,4,30)\n    pdf = norm.pdf(x, mean, std_dev)\n    ax.plot(x, pdf)\n    # 2.) The plot is titled with the fit results, showing the mean and standard deviation used in the generation.\n    plt.title(f'Fit results: mean = {mean}, std = {std_dev}')\n    ax.hist(x, normed=True, bins=30, density=True)\n    return fig, samples", "compilation_passed": true, "time": 0.018014907836914062, "tests_passed": false, "error": "AttributeError"}
{"code": "random_seed = 7\n    np.random.seed(random_seed)\n    x = np.linspace(0, 1000, 3000)\n    y = norm(mean, std_dev).pdf(x)\n    plt.plot(x, y, linewidth = 3), plt.grid(True)\n    plt.title(f\"Fit results: mean = {mean:.2f}, std = {std_dev:.2f}\")\n    plt.show()\n    return plt.figure(), np.random.normal(mean, std_dev, num_samples)", "compilation_passed": true, "time": 0.009594917297363281, "tests_passed": false, "error": "AttributeError"}
{"code": "samples = np.random.normal(mean, std_dev, num_samples)\n    bins = np.linspace(samples.min(), samples.max(), 30)\n    fig, ax = plt.subplots(1, 1)\n    ax.hist(samples, density=True, bins=bins)\n    ax.plot(bins, norm.pdf(bins, mean, std_dev))\n    ax.set_title(f\"Fit results: mean = {mean:.2f}, std = {std_dev:.2f}\")\n    return (fig, samples)", "compilation_passed": true, "time": 0.017838001251220703, "tests_passed": false, "error": "AttributeError"}
{"code": "random_state = np.random.RandomState(1234)\n    samples = norm.rvs(loc=mean, scale=std_dev, size=num_samples, random_state=random_state)\n    plt.title(f'Fit results: mean = {mean}, std = {std_dev}')\n    plt.hist(samples, bins=30, density=True)\n    plt.plot(np.linspace(mean - 4 * std_dev, mean + 4 * std_dev, 100), norm.pdf(np.linspace(mean - 4 * std_dev, mean + 4 * std_dev, 100), loc=mean, scale=std_dev))\n    plt.show()\n    return (fig, samples)", "compilation_passed": true, "time": 0.007143735885620117, "tests_passed": false, "error": "NameError"}
{"code": "# Set the seed for reproducible results\n    np.random.seed(501)\n\n    # Generate a histogram of samples drawn from a normal distribution with the given mean and standard deviation.\n    # The histogram plot will be centered on the mean, with the standard deviation as the y-axis range.\n    # The number of bins is set to 30\n    histogram, _ = plt.hist(\n        np.random.normal(mean, std_dev, num_samples),\n        bins=30,\n        edgecolor='black',\n        density=True,\n        color='#926d3b'\n    )\n\n    # Plot the PDF of the normal distribution on top of the histogram\n    x = np.linspace(mean - 3 * std_dev, mean + 3 * std_dev, 300)\n    pdf = norm(mean, std_dev).pdf(x)\n    plt.plot(x, pdf, color='#0039a9')\n\n    # Set the plot title and show the plot\n    plt.title(f\"Fit results: mean = {", "compilation_passed": false, "time": 9.298324584960938e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "np.random.seed(1111)\n    samples = norm.rvs(loc=mean, scale=std_dev, size=num_samples, random_state=1111)\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    bins = np.linspace(0, 30, 30)\n    ax.hist(samples, bins=bins, density=True)\n    ax.plot(bins, norm.pdf(bins, loc=mean, scale=std_dev), 'r-', linewidth=5, label='PDF')\n    plt.title(f\"Fit results: mean = {mean:.2f}, std = {std_dev:.2f}\")\n    plt.legend()\n    plt.show()\n    return fig, samples", "compilation_passed": true, "time": 0.018705129623413086, "tests_passed": false, "error": "AttributeError"}
{"code": "samples = np.random.normal(mean, std_dev, num_samples)\n    fig = plt.figure()\n    plt.hist(samples, bins=30)\n    plt.title(f\"Fit results: mean = {mean:.2f}, std = {std_dev:.2f}\")\n    plt.show()\n    return fig, samples", "compilation_passed": true, "time": 0.017531871795654297, "tests_passed": false, "error": "AttributeError"}
{"code": "fig = plt.figure()\n\n    # set random seed for reproducibility\n    np.random.seed(101)\n\n    # draw samples\n    samples = norm.rvs(loc=mean, scale=std_dev, size=num_samples)\n\n    # create histogram\n    hist = plt.hist(samples, bins=30, density=True, color='blue', alpha=0.5)\n    # overlays PDF\n    x = np.linspace(norm.ppf(0.01), norm.ppf(0.99), 100)\n    plt.plot(x, norm.pdf(x, loc=mean, scale=std_dev), 'r--')\n\n    # labels and title\n    plt.title(f\"Fit results: mean = {mean:.2f}, std = {std_dev:.2f}\")\n    return fig, samples", "compilation_passed": true, "time": 0.018472909927368164, "tests_passed": false, "error": "AttributeError"}
{"code": "# TODO: Implement this function\n    return plt.hist(np.random.normal(mean, std_dev, num_samples), bins=30), np.random.normal(mean, std_dev, num_samples)", "compilation_passed": true, "time": 0.006515026092529297, "tests_passed": false, "error": "AttributeError"}
{"code": "x_axis = np.linspace(-5, 5, 30)\n    y_axis = norm.pdf(x_axis, mean, std_dev)\n\n    fig = plt.figure()\n    plt.plot(x_axis, y_axis)\n    plt.title(f\"Fit results: mean = {mean:.2f}, std = {std_dev:.2f}\")\n    plt.xlabel(\"x\")\n    plt.ylabel(\"PDF\")\n    plt.show()\n    return fig, x_axis, y_axis", "compilation_passed": true, "time": 0.01289987564086914, "tests_passed": false, "error": "ValueError"}
{"code": "# TODO 2a: Generate a histogram of samples drawn from the normal distribution.\n    # The histogram should be titled \"Fit results: mean = ??, std = ??\".\n    # The histogram should have 30 bins and the values displayed should be rounded to two decimal places.\n    # The function should return the plot and the samples as a tuple.\n\n    # Hint: You will need to import matplotlib.pyplot.\n    # You may need to refer back to the previous lab to recall how to create the plot.\n\n    samples = norm.rvs(size=num_samples, loc=mean, scale=std_dev)\n\n    # Create the figure\n    fig = plt.figure()\n\n    # Display the plot\n    plt.hist(samples, bins=30, density=True)\n\n    # Set the title\n    plt.title(f\"Fit results: mean = {mean:.2f}, std = {std_dev:.2f}\")\n\n    # Return the plot and the samples\n    return fig, samples", "compilation_passed": true, "time": 0.01807880401611328, "tests_passed": false, "error": "AttributeError"}
{"code": "rng = np.random.default_rng()\n    x = rng.normal(mean, std_dev, num_samples)\n    fig = plt.figure()\n    plt.hist(x, bins=30, density=True)\n    prob_func = norm.pdf(x, mean, std_dev)\n    plt.plot(x, prob_func)\n    plt.title('Fit results: mean = {}, std = {}'.format(mean, std_dev))\n    plt.show()\n    return fig, x", "compilation_passed": true, "time": 0.018217086791992188, "tests_passed": false, "error": "AttributeError"}
{"code": "fig, ax = plt.subplots()\n    rvs = norm.rvs(loc=mean, scale=std_dev, size=num_samples, random_state=1)\n    ax.hist(rvs, bins=30, density=True, alpha=0.7, label='PDF')\n    x = np.linspace(rvs.min(), rvs.max(), 100)\n    pdf = norm.pdf(x, mean, std_dev)\n    ax.plot(x, pdf, color='red', label='PDF')\n    ax.set(xlabel=\"X-axis\", ylabel='Y-axis')\n    ax.set_title(f\"Fit results: mean = {mean:.2f}, std = {std_dev:.2f}\")\n    plt.show()\n    return fig, rvs", "compilation_passed": true, "time": 0.018542051315307617, "tests_passed": false, "error": "AttributeError"}
{"code": "# Step 1: Initialize the figure object, set the x-axis limits, and create an array of sample points\n    fig = plt.figure()\n    x = np.linspace(-3 * std_dev, 3 * std_dev, 3000)\n    plt.xlim(-3 * std_dev, 3 * std_dev)\n    samples = np.random.normal(mean, std_dev, num_samples)\n    print(\"number of samples is\", num_samples)\n\n    # Step 2: Plot the histogram of samples\n    n, bins, patches = plt.hist(samples, 3000)\n    # Step 3: Overlay the PDF\n    ax = plt.gca()\n    ax.set_autoscalex_on(False)\n    plt.plot(x, norm.pdf(x, mean, std_dev))\n    fig.suptitle(\"Fit results: mean = %.2f, std = %.2f\" % (mean, std_dev))\n\n    # Return the plot and samples\n    return fig, samples", "compilation_passed": true, "time": 0.7967538833618164, "tests_passed": false, "error": "AttributeError"}
{"code": "x = np.linspace(-3, 3, 100)\n    y = norm.pdf(x, mean, std_dev)\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    ax.set_title(\"Fit results: mean = {}, std = {}\".format(mean, std_dev))\n    ax.set_xlabel(\"x\")\n    ax.set_ylabel(\"PDF(x)\")\n    ax.plot(x, y)\n    ax.hist(samples, bins=30, density=True)\n    return fig, samples", "compilation_passed": true, "time": 0.012996912002563477, "tests_passed": false, "error": "NameError"}
{"code": "plt.figure(figsize=(16, 6), dpi=100)\n    # X is a sample of a random number drawn from the standard normal distribution using norm.rvs\n    X = norm.rvs(loc=mean, scale=std_dev, size=num_samples)\n    # The bin range is specified by bins=30.\n    # This is the number of bins to use for the histogram.\n    # We want to fit the data to a normal distribution.\n    # This means we need to find the mean and standard deviation of the data.\n    # These values are found by using the fit method of the stats.norm class.\n    # This is a function that returns the parameters of a normal distribution,\n    # including the mean and standard deviation.\n    # The fit method takes a list of values, and returns a tuple of the mean and standard deviation.\n    # The mean and standard deviation are used in the next step.\n    mean, std = norm.fit(X)\n    # plt.hist returns the x values for the histogram and the y values for the histogram.\n    # The x values are the bins.\n", "compilation_passed": true, "time": 0.008401870727539062, "tests_passed": false, "error": "TypeError"}
{"code": "# Generate samples using normal distribution\n    samples = norm.rvs(loc=mean, scale=std_dev, size=num_samples)\n\n    # Create figure and axes\n    fig = plt.figure(figsize=(8, 5))\n    ax = fig.add_subplot(111)\n\n    # Set plot title\n    plt.title(f\"Fit results: mean = {mean:.2f}, std = {std_dev:.2f}\")\n\n    # Set the histogram and fit results\n    ax.hist(samples, bins=30, density=True)\n    ax.set_xlabel(\"Sample\")\n    ax.set_ylabel(\"PDF\")\n\n    # Set x-axis limits to match the distribution\n    ax.set_xlim(norm.interval(0.01, loc=mean, scale=std_dev))\n    ax.set_ylim(0, 0.4)\n\n    # Plot the PDF\n    xs = np.linspace(norm.interval(0.01, loc=mean, scale=std_dev)[0],", "compilation_passed": false, "time": 0.000263214111328125, "tests_passed": false, "error": "SyntaxError"}
{"code": "np.random.seed(42)\n    x = norm(mean, std_dev).rvs(num_samples)\n    fig, ax = plt.subplots()\n    ax.hist(x, bins=30, density=True, label=\"PDF\")\n    x = np.linspace(0, 50, 1000)\n    ax.plot(x, norm(mean, std_dev).pdf(x), label=\"PDF\")\n    ax.set(\n        xlabel=r\"$x$\",\n        ylabel=r\"PDF\",\n        title=f\"Fit results: mean = {mean:.2f}, std = {std_dev:.2f}\",\n    )\n    ax.legend()\n    return fig, x, samples", "compilation_passed": true, "time": 0.018129825592041016, "tests_passed": false, "error": "NameError"}
{"code": "np.random.seed(12345) # ensure the same random values every time\n    samples = norm.rvs(loc=mean, scale=std_dev, size=num_samples)\n    x = np.linspace(norm.ppf(0.0001, loc=mean, scale=std_dev),\n                    norm.ppf(0.9999, loc=mean, scale=std_dev), 1000)\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    ax.plot(x, norm.pdf(x, loc=mean, scale=std_dev),\n            color='#000000', alpha=0.65)\n    ax.set_title('Fit results: mean=%.2f, std=%.2f' % (mean, std_dev))\n    ax.hist(samples, density=True, bins=30, color='#FF0000')\n    return fig, samples", "compilation_passed": true, "time": 0.0182039737701416, "tests_passed": false, "error": "AttributeError"}
