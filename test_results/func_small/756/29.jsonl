{"code": "source_dir = Path(source_dir)\n    target_dir = Path(target_dir)\n    if not source_dir.exists():\n        raise ValueError(f'Source directory {source_dir} not found')\n    if not target_dir.exists():\n        raise ValueError(f'Target directory {target_dir} not found')\n    extensions = [ext.lower() for ext in extensions]\n    count = 0\n    for file in source_dir.glob('**/*'):\n        if file.suffix.lower() in extensions:\n            shutil.move(str(file), str(target_dir))\n            count += 1\n    return count", "compilation_passed": true, "time": 0.021851778030395508, "tests_passed": true, "error": null}
{"code": "if not Path(source_dir).exists():\n        raise ValueError(f\"{source_dir} does not exist\")\n    if not Path(target_dir).exists():\n        raise ValueError(f\"{target_dir} does not exist\")\n\n    moved_files = 0\n    for file_path in Path(source_dir).glob(\"*\"):\n        if file_path.is_file() and file_path.suffix in extensions:\n            shutil.move(str(file_path), str(Path(target_dir) / file_path.name))\n            moved_files += 1\n    return moved_files", "compilation_passed": true, "time": 0.022697925567626953, "tests_passed": true, "error": null}
{"code": "if not Path(source_dir).is_dir():\n        raise ValueError('source_dir does not exist')\n\n    if not Path(target_dir).is_dir():\n        raise ValueError('target_dir does not exist')\n\n    source_dir = Path(source_dir)\n    target_dir = Path(target_dir)\n    moved_files = 0\n\n    for file_name in source_dir.iterdir():\n        if file_name.suffix in extensions:\n            shutil.move(str(file_name), str(target_dir / file_name.name))\n            moved_files += 1\n\n    return moved_files", "compilation_passed": true, "time": 0.019726276397705078, "tests_passed": true, "error": null}
{"code": "# Create Path objects for source_dir and target_dir\n    source_dir_path = Path(source_dir)\n    target_dir_path = Path(target_dir)\n\n    # Check if source_dir or target_dir exist\n    if not source_dir_path.is_dir():\n        raise ValueError(f\"{source_dir} does not exist.\")\n    if not target_dir_path.is_dir():\n        raise ValueError(f\"{target_dir} does not exist.\")\n\n    # Check if target_dir is not the source_dir\n    if source_dir_path.resolve().is_dir() and target_dir_path.resolve().is_dir():\n        raise ValueError(\"Cannot move files into themselves.\")\n\n    # Get files in source_dir with specified extensions\n    files = list(source_dir_path.rglob(f\"*{'.'.join(extensions)}\"))\n\n    # Move files to target_dir\n    moved_count = 0\n    for file in files:\n        shutil.move(str", "compilation_passed": false, "time": 0.0002560615539550781, "tests_passed": false, "error": "SyntaxError"}
{"code": "try:\n        source_dir_path = Path(source_dir)\n        if source_dir_path.exists():\n            source_dir_path.iterdir()\n    except FileNotFoundError:\n        raise ValueError('source_dir must exist') from None\n\n    try:\n        target_dir_path = Path(target_dir)\n        if target_dir_path.exists():\n            target_dir_path.mkdir(exist_ok=True, parents=True)\n    except FileNotFoundError:\n        raise ValueError('target_dir must exist') from None\n\n    moved_files = 0\n\n    for source_file in source_dir_path.iterdir():\n        extension = source_file.suffix.lower()\n        if extension in extensions:\n            target_file = target_dir_path / (source_file.name)\n            source_file.replace(target_file)\n            moved_files += 1\n\n    return moved_files", "compilation_passed": true, "time": 0.020187854766845703, "tests_passed": true, "error": null}
{"code": "if not Path(source_dir).exists():\n        raise ValueError(f'source_dir {source_dir} does not exist')\n\n    if not Path(target_dir).exists():\n        raise ValueError(f'target_dir {target_dir} does not exist')\n\n    files_count = 0\n    for root, dirs, files in os.walk(source_dir):\n        for extension in extensions:\n            for file in files:\n                if file.endswith(extension):\n                    try:\n                        shutil.move(os.path.join(root, file), os.path.join(target_dir, file))\n                        files_count += 1\n                    except:\n                        pass\n    return files_count", "compilation_passed": true, "time": 0.018205881118774414, "tests_passed": true, "error": null}
{"code": "# create Path objects for source and target directories\n    source_dir = Path(source_dir)\n    if not source_dir.exists():\n        raise ValueError(f'The directory {source_dir} does not exist.')\n    target_dir = Path(target_dir)\n    if not target_dir.exists():\n        target_dir.mkdir(parents=True)\n\n    # initialize count variable\n    count = 0\n\n    # for each file in the source directory\n    for file in source_dir.iterdir():\n        # if the file is a file with the desired extensions\n        if file.is_file() and file.suffix in extensions:\n            # move the file to the target directory\n            shutil.move(str(file), str(target_dir / file.name))\n            count += 1\n\n    # return the count\n    return count", "compilation_passed": true, "time": 0.01966691017150879, "tests_passed": true, "error": null}
{"code": "if Path(source_dir).is_dir() and Path(target_dir).is_dir():\n        return 0\n    else:\n        raise ValueError(\"One of the provided paths does not exist.\")\n\n    # Move files with certain extensions\n    move_files = []\n    for ext in extensions:\n        move_files.extend(Path(source_dir).glob('*' + ext))\n    for file in move_files:\n        shutil.move(str(file), target_dir)\n\n    # Return the number of files moved\n    return len(move_files)", "compilation_passed": true, "time": 0.0022411346435546875, "tests_passed": true, "error": null}
{"code": "count = 0\n    if not Path(source_dir).exists():\n        raise ValueError('source_dir does not exist')\n\n    if not Path(target_dir).exists():\n        raise ValueError('target_dir does not exist')\n\n    for root, dirs, files in os.walk(source_dir):\n        for f in files:\n            if f.endswith(tuple(extensions)):\n                count += 1\n                shutil.move(os.path.join(root, f), os.path.join(target_dir, f))\n\n    return count", "compilation_passed": true, "time": 0.019082069396972656, "tests_passed": true, "error": null}
{"code": "source_dir = Path(source_dir).resolve()\n    target_dir = Path(target_dir).resolve()\n\n    if not source_dir.exists():\n        raise ValueError(f'source_dir {source_dir} does not exist')\n    if not target_dir.exists():\n        raise ValueError(f'target_dir {target_dir} does not exist')\n\n    n_moved = 0\n    for file_path in source_dir.iterdir():\n        if file_path.name.endswith(tuple(extensions)):\n            shutil.move(file_path, target_dir / file_path.name)\n            n_moved += 1\n\n    return n_moved", "compilation_passed": true, "time": 0.017531156539916992, "tests_passed": true, "error": null}
{"code": "source_dir = Path(source_dir)\n    target_dir = Path(target_dir)\n\n    if not source_dir.exists():\n        raise ValueError('Source directory does not exist.')\n\n    if not target_dir.exists():\n        raise ValueError('Target directory does not exist.')\n\n    # Count the number of files to move\n    num_files_to_move = 0\n    for ext in extensions:\n        files_to_move = source_dir.glob(ext)\n        num_files_to_move += len(list(files_to_move))\n\n    if num_files_to_move == 0:\n        print('No files to move.')\n        return 0\n\n    print(f'Moving {num_files_to_move} files...')\n\n    for ext in extensions:\n        files_to_move = source_dir.glob(ext)\n        for file in files_to_move:\n            shutil.move(file, target_dir)\n            print(f'Moved {file.name}')\n\n    print('", "compilation_passed": false, "time": 0.00012969970703125, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not Path(source_dir).exists():\n        raise ValueError('source_dir does not exist')\n    if not Path(target_dir).exists():\n        raise ValueError('target_dir does not exist')\n\n    counter = 0\n    for file_name in Path(source_dir).iterdir():\n        if file_name.is_file() and file_name.suffix in extensions:\n            shutil.move(str(file_name), target_dir)\n            counter += 1\n    return counter", "compilation_passed": true, "time": 0.019540071487426758, "tests_passed": true, "error": null}
{"code": "counter = 0\n    source_dir_path = Path(source_dir)\n    target_dir_path = Path(target_dir)\n    if source_dir_path.exists() is False:\n        raise ValueError(\"source_dir is not exist!\")\n    if target_dir_path.exists() is False:\n        raise ValueError(\"target_dir is not exist!\")\n    for item in source_dir_path.iterdir():\n        if item.suffix in extensions:\n            shutil.move(str(item.absolute()), target_dir)\n            counter += 1\n    return counter", "compilation_passed": true, "time": 0.018047809600830078, "tests_passed": true, "error": null}
{"code": "source_path = Path(source_dir)\n    target_path = Path(target_dir)\n    if not source_path.exists():\n        raise ValueError(f\"Source directory {source_path} does not exist\")\n    if not target_path.exists():\n        raise ValueError(f\"Target directory {target_path} does not exist\")\n\n    source_dir_files = source_path.glob('*.*')\n    extensions_set = set(ext.lower() for ext in extensions)\n    moved = 0\n    for file in source_dir_files:\n        if file.suffix.lower() in extensions_set:\n            shutil.move(file, target_path)\n            moved += 1\n    return moved", "compilation_passed": true, "time": 0.01792311668395996, "tests_passed": true, "error": null}
{"code": "count = 0\n\n    for filename in Path(source_dir).glob('**/*'):\n        if filename.suffix in extensions:\n            target_path = Path(target_dir, filename.name)\n            if target_path.exists():\n                target_path.unlink()\n            shutil.move(filename, target_dir)\n            count += 1\n\n    return count", "compilation_passed": true, "time": 0.019598960876464844, "tests_passed": true, "error": null}
{"code": "source_dir = Path(source_dir)\n    target_dir = Path(target_dir)\n    if not source_dir.exists():\n        raise ValueError(f'The source directory {source_dir} does not exist.')\n    if not target_dir.exists():\n        raise ValueError(f'The target directory {target_dir} does not exist.')\n    # Iterate through source_dir files\n    n_moved = 0\n    for file in Path(source_dir).glob('**/*'):\n        if not file.is_file():\n            continue\n        # Extract extension\n        ext = file.suffix.lower()\n        if ext in extensions:\n            shutil.move(file, target_dir)\n            n_moved += 1\n    return n_moved", "compilation_passed": true, "time": 0.018056869506835938, "tests_passed": true, "error": null}
{"code": "# TODO: Implement the task\n\n    source_dir = Path(source_dir)\n    target_dir = Path(target_dir)\n\n    if source_dir.exists() and target_dir.exists():\n        for path in source_dir.glob(f'*.{extensions[0]}'):\n            shutil.move(path, target_dir)\n        return len(extensions)\n\n    raise ValueError('Path not found')", "compilation_passed": true, "time": 0.0023391246795654297, "tests_passed": true, "error": null}
{"code": "counter = 0\n\n    try:\n        source_dir_path = Path(source_dir)\n        target_dir_path = Path(target_dir)\n\n        if not source_dir_path.exists():\n            raise ValueError(\n                f\"The source directory '{source_dir}' does not exist.\")\n        if not target_dir_path.exists():\n            raise ValueError(\n                f\"The target directory '{target_dir}' does not exist.\")\n\n        for filename in source_dir_path.iterdir():\n            file_extension = Path(filename).suffix\n            if file_extension in extensions:\n                target_path = target_dir_path / filename.name\n                shutil.move(str(filename), str(target_path))\n                counter += 1\n    except Exception as e:\n        print(f\"Error moving files: {e}\")\n\n    return counter", "compilation_passed": true, "time": 0.019750118255615234, "tests_passed": true, "error": null}
{"code": "# Create the source directory path if it doesn't exist\n    if not Path(source_dir).exists():\n        raise ValueError(f\"{source_dir} does not exist.\")\n\n    # Create the target directory path if it doesn't exist\n    if not Path(target_dir).exists():\n        Path(target_dir).mkdir(parents=True)\n        if not Path(target_dir).exists():\n            raise ValueError(f\"{target_dir} does not exist.\")\n\n    # Get all the files in the source directory with certain extensions\n    source_files = [f for f in Path(source_dir).glob('*') if f.suffix.lower() in extensions and f.is_file()]\n\n    # Move all the files to the target directory\n    for source_file in source_files:\n        target_file = source_file.parent / f'{source_file.name}'\n        shutil.move(str(source_file), str(target_file))\n\n    # Return the number of moved files\n    return len(source_files", "compilation_passed": false, "time": 0.0002701282501220703, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not Path(source_dir).exists():\n        raise ValueError(\"Source directory does not exist.\")\n    if not Path(target_dir).exists():\n        raise ValueError(\"Target directory does not exist.\")\n    count = 0\n    for file in Path(source_dir).rglob('*.*'):\n        if file.suffix in extensions:\n            count += 1\n            shutil.move(str(file), str(Path(target_dir, file.name)))\n    return count", "compilation_passed": true, "time": 0.019973278045654297, "tests_passed": true, "error": null}
{"code": "if not Path(source_dir).exists():\n        raise ValueError(f'source_dir: {source_dir} does not exist')\n    if not Path(target_dir).exists():\n        raise ValueError(f'target_dir: {target_dir} does not exist')\n\n    counter = 0\n    for file in Path(source_dir).iterdir():\n        if file.is_file() and file.suffix in extensions:\n            shutil.move(str(file), f'{target_dir}{file.name}')\n            counter += 1\n\n    return counter", "compilation_passed": true, "time": 0.0030660629272460938, "tests_passed": true, "error": null}
{"code": "source_dir = Path(source_dir)\n    target_dir = Path(target_dir)\n    if not source_dir.is_dir():\n        raise ValueError('Source directory does not exist')\n    if not target_dir.is_dir():\n        raise ValueError('Target directory does not exist')\n\n    n = 0\n    for file_ in source_dir.glob('*'):\n        if file_.suffix in extensions:\n            shutil.move(file_, target_dir)\n            n += 1\n\n    print(n)\n    return n", "compilation_passed": true, "time": 0.017359018325805664, "tests_passed": true, "error": null}
{"code": "if not Path(source_dir).is_dir():\n        raise ValueError(f'{source_dir} does not exist.')\n    if not Path(target_dir).is_dir():\n        raise ValueError(f'{target_dir} does not exist.')\n\n    counter = 0\n    for ext in extensions:\n        source = Path(source_dir) / ext\n        target = Path(target_dir) / ext\n        shutil.move(str(source), str(target))\n        counter += 1\n    return counter", "compilation_passed": true, "time": 0.002566814422607422, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Check if source and target directories exist\n    if not Path(source_dir).exists():\n        raise ValueError(f\"Directory {source_dir} does not exist.\")\n    if not Path(target_dir).exists():\n        raise ValueError(f\"Directory {target_dir} does not exist.\")\n\n    # Move files from source to target directory\n    moved_files = 0\n    for file in Path(source_dir).iterdir():\n        if file.suffix.lower() in extensions:\n            shutil.move(file, Path(target_dir) / file.name)\n            moved_files += 1\n\n    return moved_files", "compilation_passed": true, "time": 0.018522262573242188, "tests_passed": true, "error": null}
{"code": "if not Path(source_dir).exists():\n        raise ValueError('Source directory does not exist!')\n    if not Path(target_dir).exists():\n        raise ValueError('Target directory does not exist!')\n\n    moved_files = 0\n\n    for extension in extensions:\n        for path in Path(source_dir).rglob(extension):\n            shutil.move(path, target_dir)\n            moved_files += 1\n\n    return moved_files", "compilation_passed": true, "time": 0.0022389888763427734, "tests_passed": true, "error": null}
{"code": "if not Path(source_dir).exists():\n        raise ValueError(\"source_dir does not exist\")\n    if not Path(target_dir).exists():\n        raise ValueError(\"target_dir does not exist\")\n    # Check if the source and target directories are the same\n    if source_dir == target_dir:\n        print(\"Source and target directories are the same\")\n        return 0\n\n    source_files = []\n    for file in Path(source_dir).rglob('*'):\n        if file.suffix.lower() in extensions:\n            source_files.append(str(file))\n\n    count = 0\n    for file in source_files:\n        file_name = Path(file).name\n        # Move file to the target directory\n        target_file = Path(target_dir) / file_name\n        try:\n            shutil.move(file, target_file)\n            count += 1\n        except PermissionError:\n            print(\"Permission denied: {}\".format(file))\n\n    return count", "compilation_passed": true, "time": 0.01905512809753418, "tests_passed": true, "error": null}
{"code": "try:\n        source = Path(source_dir)\n        target = Path(target_dir)\n    except FileNotFoundError:\n        raise ValueError('One of the given paths does not exist')\n    count = 0\n    for file_ in Path(source).iterdir():\n        if file_.suffix in extensions:\n            shutil.move(file_, target)\n            count += 1\n\n    return count", "compilation_passed": true, "time": 0.017515897750854492, "tests_passed": true, "error": null}
{"code": "if not Path(source_dir).is_dir():\n        raise ValueError('source_dir must be a directory')\n    if not Path(target_dir).is_dir():\n        raise ValueError('target_dir must be a directory')\n    moved_files = 0\n    for file in Path(source_dir).iterdir():\n        if file.is_file() and file.suffix in extensions:\n            try:\n                shutil.move(file, Path(target_dir) / file.name)\n                moved_files += 1\n            except Exception as e:\n                print(f'Error moving file: {file}')\n                print(f'Error: {e}')\n    return moved_files", "compilation_passed": true, "time": 0.019288063049316406, "tests_passed": true, "error": null}
{"code": "source_dir = Path(source_dir)\n    if not source_dir.exists():\n        raise ValueError(f'source_dir {source_dir} does not exist')\n\n    target_dir = Path(target_dir)\n    if not target_dir.exists():\n        raise ValueError(f'target_dir {target_dir} does not exist')\n\n    source_dir = Path(source_dir)\n    target_dir = Path(target_dir)\n\n    extensions = [ext.replace('.', '') for ext in extensions]\n\n    moved_files = []\n\n    for file in source_dir.rglob('*'):\n        if file.is_file() and file.suffix.strip('.') in extensions:\n            moved_files.append(file)\n\n    for file in moved_files:\n        file.replace(target_dir / file.name)\n\n    return len(moved_files)", "compilation_passed": true, "time": 0.01946282386779785, "tests_passed": true, "error": null}
{"code": "if not Path(source_dir).exists():\n        raise ValueError('Source directory does not exist.')\n    elif not Path(target_dir).exists():\n        raise ValueError('Target directory does not exist.')\n    moved_files = 0\n    for file in Path(source_dir).glob('*'):\n        if file.is_file() and file.suffix in extensions:\n            shutil.move(str(file), target_dir)\n            moved_files += 1\n    return moved_files", "compilation_passed": true, "time": 0.02063608169555664, "tests_passed": true, "error": null}
