{"code": "files = []\n    if not os.path.exists(directory_path):\n        raise FileNotFoundError(f\"Directory {directory_path} not found\")\n\n    for filename in glob.glob(os.path.join(directory_path, '*.json')):\n        with open(filename, 'r') as file:\n            data = file.read()\n\n        pattern = re.compile(r'(?<!\\\\)(?<!\\r?\\n)(\\\"(?:[^\\\\\\\"]|\\\\.)*\\\")')\n        modified = re.sub(pattern, r'\\\\\\1', data)\n\n        with open(filename, 'w') as file:\n            file.write(modified)\n\n        files.append(filename)\n\n    return files", "compilation_passed": true, "time": 0.002157926559448242, "tests_passed": false, "error": "re.error"}
{"code": "if not os.path.exists(directory_path):\n        raise FileNotFoundError\n    file_names = glob.glob(directory_path + \"/../*.json\")\n    for file_name in file_names:\n        with open(file_name, \"r\") as file:\n            data = json.load(file)\n        escaped_data = json.dumps(data, indent=None, separators=(',', ':'))\n        escaped_data = re.sub(r'(\")(.+?)(\")', r\"\\1\\\\2\\1\", escaped_data)\n        escaped_data = escaped_data.replace('\"', '')\n        with open(file_name, 'w') as file:\n            file.write(escaped_data)\n    return file_names", "compilation_passed": true, "time": 0.0017709732055664062, "tests_passed": true, "error": null}
{"code": "json_files = glob.glob(directory_path + \"/**/*.json\", recursive=True)\n\n    for file in json_files:\n        with open(file, 'r') as json_file:\n            json_content = json.load(json_file)\n        json_content = re.sub('\"', '\\\\\"', json_content)  # Replace double quotes with escaped double quotes\n        with open(file, 'w') as json_file:\n            json.dump(json_content, json_file, indent=4, sort_keys=True)\n    return json_files", "compilation_passed": true, "time": 0.0018527507781982422, "tests_passed": false, "error": "TypeError"}
{"code": "files = []\n\n    if not os.path.exists(directory_path):\n        raise FileNotFoundError(\"The specified directory does not exist.\")\n\n    for root, dirs, files in os.walk(directory_path):\n        for file in glob.glob(os.path.join(root, \"**\", \"*.json\")):\n            files.append(file)\n            with open(file, \"r\") as json_file:\n                contents = json.load(json_file)\n\n            with open(file, \"w\") as json_file:\n                json.dump(contents, json_file, ensure_ascii=False)\n\n    return files", "compilation_passed": true, "time": 0.0018112659454345703, "tests_passed": true, "error": null}
{"code": "# Check if directory exists\n    if not os.path.exists(directory_path):\n        raise FileNotFoundError(f\"Directory {directory_path} does not exist\")\n\n    # Define the list to store the modified files\n    files_list = []\n\n    # Find all JSON files in the directory\n    for file in glob.glob(f\"{directory_path}/**/*.json\", recursive=True):\n        # Open the file in read mode\n        with open(file, \"r\") as json_file:\n            # Read the file content as a JSON string\n            file_content = json_file.read()\n            # Replace double quotes with double backslash\n            modified_content = file_content.replace('\"', '\"\\\\\"')\n            # Open the file in write mode\n            with open(file, \"w\") as json_file:\n                # Write the modified content back to the file\n                json_file.write(modified_content)\n\n    # Return the list of modified files\n    return files_list", "compilation_passed": true, "time": 0.0020151138305664062, "tests_passed": true, "error": null}
{"code": "result = []\n    if os.path.exists(directory_path):\n        files = glob.glob(os.path.join(directory_path, \"*.json\"))\n        for file in files:\n            try:\n                with open(file, \"r\") as f:\n                    content = json.load(f)\n                    content = re.sub(\"\\\"\", r\"\\\\\"\",\", content)\n                    with open(file, \"w\") as f:\n                        json.dump(content, f, indent=4, separators=(\",\", \": \"), ensure_ascii=False)\n                    result.append(file)\n            except json.JSONDecodeError:\n                print(f\"Cannot load JSON file from: {file}. Skipped\")\n    else:\n        raise FileNotFoundError\n    return result", "compilation_passed": true, "time": 0.0018680095672607422, "tests_passed": false, "error": "TypeError"}
{"code": "if not os.path.exists(directory_path):\n        raise FileNotFoundError(\"The specified directory does not exist.\")\n    json_files = glob.glob(f\"{directory_path}/*.json\")\n    for file in json_files:\n        with open(file, \"r\") as json_file:\n            json_data = json.load(json_file)\n            with open(file, \"w\") as json_file:\n                json.dump(json_data, json_file, indent=4)\n    return json_files", "compilation_passed": true, "time": 0.001990795135498047, "tests_passed": true, "error": null}
{"code": "files = []\n    for file_name in glob.glob(os.path.join(directory_path, \"**/*.json\"), recursive=True):\n        with open(file_name, 'r', encoding='utf-8') as file:\n            content = file.read()\n\n        pattern = r'\"([^\"]*)\"'\n        fixed_content = re.sub(pattern, r'\"\\\\1\"', content)\n\n        with open(file_name, 'w', encoding='utf-8') as file:\n            file.write(fixed_content)\n\n        files.append(file_name)\n\n    return files", "compilation_passed": true, "time": 0.0020029544830322266, "tests_passed": true, "error": null}
{"code": "file_path = glob.glob(f\"{directory_path}/**/*.json\")\n\n    with os.scandir(directory_path) as content:\n        for entry in content:\n            if entry.is_file():\n                with open(entry.path, \"r+\") as file:\n                    file_content = file.read()\n                    file_content_modified = file_content.replace('\"', \"\\\\\\\"\")\n                    file.seek(0)\n                    file.write(file_content_modified)\n\n    return file_path", "compilation_passed": true, "time": 0.0018329620361328125, "tests_passed": true, "error": null}
{"code": "files = []\n    try:\n        directory_path = os.path.abspath(directory_path)\n        for file in glob.glob(directory_path + '/*.json'):\n            with open(file, \"r\") as f:\n                file_data = f.read()\n            escaped_file_data = re.sub(r'(\")(?=([^\"]*\")*[^\"]*\")', r'\\\\' + r\"\\1\", file_data)\n            with open(file, \"w\") as f:\n                f.write(escaped_file_data)\n            files.append(file)\n    except FileNotFoundError:\n        print(\"File not found!\")\n    except IOError:\n        print(\"I/O error!\")\n    return files", "compilation_passed": true, "time": 0.0033500194549560547, "tests_passed": true, "error": null}
{"code": "files = []\n\n    if not os.path.exists(directory_path):\n        raise FileNotFoundError(f\"Directory {directory_path} not found\")\n\n    for filename in glob.glob(os.path.join(directory_path, \"*\")):\n        if not filename.endswith(\".json\"):\n            continue\n        with open(filename, \"r+\") as file:\n            content = file.read()\n            new_content = re.sub(r'\"(?![^\\\\])', '\"\\\\\"', content)\n            file.seek(0)\n            file.write(new_content)\n            files.append(filename)\n\n    return files", "compilation_passed": true, "time": 0.0019068717956542969, "tests_passed": true, "error": null}
{"code": "try:\n        files = []\n        for file in glob.glob(os.path.join(directory_path, \"**/*.json\")):\n            with open(file, 'r+') as file_handler:\n                content = json.load(file_handler)\n                content[\"content\"] = \"\\\"\" + content[\"content\"] + \"\\\"\"\n                file_handler.seek(0)\n                file_handler.truncate()\n                file_handler.write(json.dumps(content))\n            files.append(file)\n    except FileNotFoundError as e:\n        raise e\n    return files", "compilation_passed": true, "time": 0.001783132553100586, "tests_passed": true, "error": null}
{"code": "files = glob.glob(os.path.join(directory_path, '*.json'))\n\n    for file_name in files:\n        with open(file_name, 'r+') as file:\n            json_content = json.load(file)\n            for key, value in json_content.items():\n                if isinstance(value, str):\n                    json_content[key] = re.sub(r'(\")', r'\\\"\\\\\\1\\\"', value)\n        with open(file_name, 'w') as file:\n            json.dump(json_content, file, indent=4)\n\n    return files", "compilation_passed": true, "time": 0.0020411014556884766, "tests_passed": true, "error": null}
{"code": "file_paths = glob.glob(directory_path + \"/*.json\")\n\n    if not file_paths:\n        raise FileNotFoundError(directory_path)\n\n    processed_files = []\n    for path in file_paths:\n        with open(path, \"r+\") as file:\n            data = json.load(file)\n            data[\"name\"] = \"John\"\n            data[\"age\"] = 30\n            data[\"city\"] = \"New York\"\n\n            file.seek(0)\n            json.dump(data, file)\n\n        processed_files.append(path)\n\n    return processed_files", "compilation_passed": true, "time": 0.0018918514251708984, "tests_passed": true, "error": null}
{"code": "# Create a list to store the processed JSON files\n    processed_files = []\n\n    # Check if the given directory exists\n    if not os.path.isdir(directory_path):\n        raise FileNotFoundError(f\"{directory_path} is not a valid directory.\")\n\n    # Iterate through all files in the directory\n    for filename in glob.iglob(os.path.join(directory_path, \"*\")):\n\n        # Check if the file is a JSON file\n        if not os.path.isfile(filename) or not filename.endswith(\".json\"):\n            continue\n\n        # Read the JSON file and process it\n        try:\n            with open(filename, \"r\", encoding=\"utf-8\") as file:\n                content = file.read()\n                content = re.sub(r'\"([^\"\\\\\\\\]+)\"', r'\"\\\\\"\\\\1\"', content)\n                processed_files.append(filename)\n\n                # Write the modified content back to the file\n                with open(filename, \"w\", encoding=\"utf-", "compilation_passed": false, "time": 9.799003601074219e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Check if the directory exists\n    if not os.path.exists(directory_path):\n        raise FileNotFoundError(f\"Directory does not exist: {directory_path}\")\n\n    # Create a list to store the modified files\n    modified_files = []\n\n    # Iterate through all JSON files in the directory\n    for filename in glob.glob(f\"{directory_path}/*.json\"):\n        # Open the file in read-only mode\n        with open(filename, \"r\") as file:\n            # Read the file content as a string\n            content = file.read()\n\n            # Replace all double quotes with double backslashes\n            content = re.sub(r'(\"|\")', r'\"\\\\1', content)\n\n            # Write the modified file content back to the original file\n            with open(filename, \"w\") as new_file:\n                new_file.write(content)\n\n            # Add the modified file to the list\n            modified_files.append(filename)\n\n    # Return the list of modified files\n    return modified_files", "compilation_passed": true, "time": 0.001985788345336914, "tests_passed": true, "error": null}
{"code": "files = []\n    directory = os.path.abspath(directory_path)\n    if not os.path.exists(directory):\n        raise FileNotFoundError\n\n    for filename in glob.glob(os.path.join(directory, \"*.json\")):\n        with open(filename, \"r\", encoding=\"UTF-8\") as file:\n            content = json.load(file)\n        with open(filename, \"w\", encoding=\"UTF-8\") as file:\n            json.dump(content, file, indent=4)\n        files.append(filename)\n\n    return files", "compilation_passed": true, "time": 0.0019850730895996094, "tests_passed": true, "error": null}
{"code": "files = []\n\n    if not os.path.exists(directory_path):\n        raise FileNotFoundError(\"Directory does not exist\")\n\n    for file in glob.glob(os.path.join(directory_path, \"**/*.json\"), recursive=True):\n        with open(file, \"r\", encoding=\"utf-8\") as infile:\n            data = infile.read()\n            data = re.sub(r\"(?<!\\\\)\" + '\"', '\\\\'\"', data)\n            data = data.replace('\\\\', '\\\\\\\\')\n            with open(file, \"w\", encoding=\"utf-8\") as outfile:\n                outfile.write(data)\n                files.append(file)\n\n    return files", "compilation_passed": false, "time": 7.605552673339844e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not os.path.isdir(directory_path):\n        raise FileNotFoundError\n\n    json_files = glob.glob(directory_path + \"/*.json\")\n    for json_file in json_files:\n        with open(json_file, \"r+\") as file:\n            json_content = file.read()\n            regex_pattern = r'\"(?!\"\")'\n            escaped_content = re.sub(regex_pattern, r'\\\\\\\\\\\\1', json_content)\n            file.seek(0)\n            file.write(escaped_content)\n            file.truncate()\n    return json_files", "compilation_passed": true, "time": 0.004786968231201172, "tests_passed": true, "error": null}
{"code": "if os.path.exists(directory_path) is False:\n        raise FileNotFoundError(directory_path + \" does not exist.\")\n\n    # Initialize a dictionary to hold the results of the task\n    result = {}\n\n    # Iterate over all JSON files in the directory\n    for file in glob.glob(directory_path + \"/*.json\"):\n        # Open the JSON file and load the data\n        with open(file) as json_file:\n            json_data = json.load(json_file)\n\n        # Escape any double quotes in the JSON file content\n        escaped_json_data = json_data.replace('\"', '\"\\\\\"')\n\n        # Write the modified content back to the JSON file\n        with open(file, \"w\") as json_file:\n            json.dump(escaped_json_data, json_file)\n\n        # Append the results of the task for this file to the overall result dictionary\n        result[file] = escaped_json_data\n\n    # Return the list of processed JSON files\n    return list(result)", "compilation_passed": true, "time": 0.0019702911376953125, "tests_passed": false, "error": "AttributeError"}
{"code": "if not os.path.exists(directory_path):\n        raise FileNotFoundError\n    files = glob.glob(directory_path + \"/**/*.json\", recursive=True)\n    modified_files = []\n    for file_path in files:\n        with open(file_path, \"r+\") as file:\n            try:\n                data = json.load(file)\n            except json.decoder.JSONDecodeError:\n                continue\n            file.seek(0)\n            file.truncate()\n            json.dump(data, file)\n            modified_files.append(file.name)\n    return modified_files", "compilation_passed": true, "time": 0.002020120620727539, "tests_passed": true, "error": null}
{"code": "files = []\n\n    if not os.path.isdir(directory_path):\n        raise FileNotFoundError(f\"{directory_path} is not a valid directory\")\n\n    for json_file in glob.glob(f\"{directory_path}/**/*.json\", recursive=True):\n        with open(json_file, \"r\") as file:\n            data = json.load(file)\n            modified_data = {\"\": data}\n            modified_data = json.dumps(modified_data)\n            modified_data = modified_data.replace('\"', '\\\\\"')\n            modified_data = json.loads(modified_data)\n            modified_data.pop(\"\")\n            files.append(json_file)\n            with open(json_file, \"w\") as file:\n                json.dump(modified_data, file)\n\n    return files", "compilation_passed": true, "time": 0.0020461082458496094, "tests_passed": false, "error": "json.decoder.JSONDecodeError"}
{"code": "files = []\n    if not os.path.exists(directory_path):\n        raise FileNotFoundError(\"Directory not found\")\n\n    for filename in glob.glob(directory_path + \"/*.json\"):\n        with open(filename, 'r') as file:\n            data = json.load(file)\n            with open(filename, 'w') as file:\n                json.dump(data, file, indent=4)\n                files.append(filename)\n\n    return files", "compilation_passed": true, "time": 0.0019822120666503906, "tests_passed": true, "error": null}
{"code": "files = []\n    for root, dirs, files_names in os.walk(directory_path):\n        for filename in files_names:\n            file_path = os.path.join(root, filename)\n            if file_path.endswith(\".json\"):\n                try:\n                    with open(file_path, \"r\") as file:\n                        contents = file.read()\n                        contents_with_double_quotes = contents.replace('\"', r'\\\"')\n                        with open(file_path, \"w\") as file:\n                            file.write(contents_with_double_quotes)\n                        files.append(file_path)\n                except Exception as e:\n                    print(\"An error occurred:\", e)\n    return files", "compilation_passed": true, "time": 0.0033299922943115234, "tests_passed": true, "error": null}
{"code": "try:\n        files = []\n        for file in glob.iglob(os.path.join(directory_path, \"**/*.json\"), recursive=True):\n            with open(file, \"r\", encoding=\"utf-8\") as file:\n                content = file.read()\n            if '\"' in content:\n                content = content.replace('\"', r'\\\"')\n                with open(file, \"w\", encoding=\"utf-8\") as file:\n                    file.write(content)\n            files.append(file)\n        return files\n    except FileNotFoundError as error:\n        raise FileNotFoundError(\"Could not find specified directory!\") from error", "compilation_passed": true, "time": 0.001809835433959961, "tests_passed": false, "error": "TypeError"}
{"code": "files = glob.glob(os.path.join(directory_path, \"*.json\"))\n    for file_path in files:\n        with open(file_path) as file:\n            data = file.read()\n        data = re.sub(r'(\")', r'\"', data)\n        with open(file_path, \"w\")\n            file.write(data)", "compilation_passed": false, "time": 0.00015425682067871094, "tests_passed": false, "error": "SyntaxError"}
{"code": "file_list = []\n    try:\n        # Iterate through the directories and files\n        for dir_path, subdirs, files in os.walk(directory_path):\n            # Iterate through the files in the current directory\n            for fname in files:\n                # Get the file path\n                file_path = os.path.join(dir_path, fname)\n\n                # Check if the file is a JSON file\n                if file_path.endswith('.json'):\n                    # Open the file and load its content\n                    with open(file_path, 'r') as f:\n                        content = f.read()\n                        # Escape any double quotes found\n                        content = re.sub(r'(\"(?!.*\\\\\"))', r'\\\\\\\\\\\\1', content)\n                        # Write the modified content back to the file\n                        with open(file_path, 'w') as f:\n                            f.write(content)\n                        file_list.append(file_path)\n    except FileNotFoundError as e:\n        print(\"Error: \", e", "compilation_passed": false, "time": 0.00021505355834960938, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not os.path.exists(directory_path):\n        raise FileNotFoundError(\"Directory not found\")\n\n    files = glob.glob(directory_path + \"/*.json\")\n\n    for file in files:\n        with open(file, \"r+\") as f:\n            content = f.read()\n            content = content.replace('\"', '\\\\\"')\n            f.seek(0)\n            f.write(content)\n    return files", "compilation_passed": true, "time": 0.005785942077636719, "tests_passed": true, "error": null}
{"code": "if not os.path.isdir(directory_path):\n        raise FileNotFoundError(\"The given directory does not exist.\")\n\n    files = glob.glob(os.path.join(directory_path, '*.json'))\n\n    result = []\n    for file in files:\n        with open(file, 'r+') as f:\n            content = json.load(f)\n            result.append(content)\n\n            for key, value in content.items():\n                if isinstance(value, str):\n                    content[key] = value.replace(\"\\\"\", \"\\\\\\\"\")\n            with open(file, 'w') as f:\n                json.dump(content, f)\n\n    return result", "compilation_passed": true, "time": 0.0023970603942871094, "tests_passed": false, "error": "TypeError"}
{"code": "files = glob.glob(directory_path + \"/*.json\")\n    for file_path in files:\n        with open(file_path, \"r\") as file:\n            content = file.read()\n        content = content.replace('\"', '\"')\n        with open(file_path, \"w\")\n            file.write(content)\n    return files", "compilation_passed": false, "time": 0.0001499652862548828, "tests_passed": false, "error": "SyntaxError"}
