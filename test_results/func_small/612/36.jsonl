{"code": "report = pd.DataFrame()\n    for team, goals in goals.items():\n        penalties_cost = np.random.choice(penalties_costs)\n        perf_score = goals - penalties - penalties_cost\n        report = report.append(\n            pd.Series(\n                {\n                    'Team': team,\n                    'Goals': goals,\n                    'Penalties': penalties[team],\n                    'Penalties Cost': penalties_cost,\n                    'Performance Score': perf_score\n                },\n                name=team\n            ),\n            ignore_index=True\n        )\n\n    return report", "compilation_passed": true, "time": 0.0016257762908935547, "tests_passed": false, "error": "AttributeError"}
{"code": "# Check for invalid input\n    if type(goals) is not dict:\n        raise ValueError('Input must be a dictionary')\n\n    # Check for invalid input\n    if type(penalties) is not dict:\n        raise ValueError('Input must be a dictionary')\n\n    # Create DataFrame\n    df = pd.DataFrame(index=teams, columns=['Goals', 'Penalties', 'Penalties Cost', 'Performance Score'])\n\n    # Filling df with zeros\n    df['Goals'] = 0\n    df['Penalties'] = 0\n    df['Penalties Cost'] = 0\n    df['Performance Score'] = 0\n\n    # Fill df rows\n    for t in teams:\n        # Goal\n        if t in goals.keys():\n            df.loc[t, 'Goals'] = goals[t]\n\n        # Penalty\n        if t in penalties.keys():\n            df.loc[t, 'Penalties'] = penalties[t]\n\n        # Penalties Cost\n        multiplier = np.random.choice(penalties", "compilation_passed": false, "time": 0.00028896331787109375, "tests_passed": false, "error": "SyntaxError"}
{"code": "assert type(goals) == dict, \"goals must be dict\"\n    assert type(penalties) == dict, \"penalties must be dict\"\n    for team in teams:\n        assert team in goals, \"all keys in goals must be present in teams\"\n        assert team in penalties, \"all keys in penalties must be present in teams\"\n    assert type(teams) == list, \"teams must be a list\"\n    assert type(penalties_costs) == list, \"penalties_costs must be a list\"\n\n    data = []\n    for i in range(len(teams)):\n        goals_count = goals[teams[i]]\n        penalties_count = penalties[teams[i]]\n        penalties_cost = penalties_costs[np.random.choice(range(len(penalties_costs)))]\n        perf_score = goals_count - penalties_count\n        if perf_score < 0:\n            perf_score = 0\n        data.append((teams[i], goals_count, penalties_count, penalties", "compilation_passed": false, "time": 0.0002872943878173828, "tests_passed": false, "error": "SyntaxError"}
{"code": "df = pd.DataFrame(columns=teams, index=teams, data=[goals, penalties])\n    df['Penalties Cost'] = df['Team'].map(lambda team: penalties_costs[choice(range(len(teams)))])\n    df['Performance Score'] = df['Team'].map(lambda team: abs(df['Goals'][team] - df['Penalties'][team]) - df['Penalties Cost'][team])\n    return df", "compilation_passed": true, "time": 0.0015749931335449219, "tests_passed": false, "error": "AttributeError"}
{"code": "# TODO 1:\n    # In case the teams param is not passed, assign default values to teams and penalties_costs.\n    if teams is None:\n        teams = TEAMS\n    if penalties_costs is None:\n        penalties_costs = PENALTIES_COSTS\n\n    # TODO 2:\n    # Loop over teams and generate goals and penalties using random.choice and a list comprehension.\n    goals_dataframe = []\n    penalties_dataframe = []\n    for team in teams:\n        goals_dataframe.append([team, goals.get(team, 0), random.choice(list(penalties.values()))])\n    for team in teams:\n        penalties_dataframe.append([team, random.choice(list(goals.values())), goals.get(team, 0), penalties_costs[random.randint(0, len(penalties_costs) - 1)]])\n\n    # TODO 3:\n    # Generate the report DataFrame using pd.DataFrame.\n    return pd.DataFrame(go", "compilation_passed": false, "time": 0.00026917457580566406, "tests_passed": false, "error": "SyntaxError"}
{"code": "assert type(goals) is dict, \"goals must be a dictionary\"\n    assert type(penalties) is dict, \"penalties must be a dictionary\"\n    assert all(type(v) is int and v >= 0 for v in penalties.values()), \"penalties values must be integers >= 0\"\n    assert all(type(v) is str for v in penalties.keys()), \"penalties keys must be strings\"\n\n    df = pd.DataFrame()\n\n    for team, goals in goals.items():\n        assert type(goals) is int and goals >= 0, f\"goals for '{team}' must be an integer >= 0\"\n        df.loc[team, 'Goals'] = goals\n\n    for team, penalties in penalties.items():\n        assert type(penalties) is int and penalties >= 0, f\"penalties for '{team}' must be an integer >= 0\"\n        penalty_cost = choice(penalties_costs)\n        df.loc[team, 'Penalties'] = penalties\n        df.loc[team,", "compilation_passed": false, "time": 0.00028705596923828125, "tests_passed": false, "error": "SyntaxError"}
{"code": "return pd.DataFrame(\n        index=[i for i in teams],\n        columns=['Team', 'Goals', 'Penalties', 'Penalties Cost', 'Performance Score'],\n        data=[[name, goals.get(name, 0), penalties.get(name, 0), penalties_costs[choice(range(5))], goals.get(name, 0) - penalties.get(name, 0)] for name in teams]\n    )", "compilation_passed": true, "time": 0.00154876708984375, "tests_passed": false, "error": "AttributeError"}
{"code": "# TODO: Complete the function.\n    # You can start with a dataframe as below, or with a list comprehension.\n\n    df = pd.DataFrame(\n        data=[\n            (team, goals.get(team), penalties.get(team),\n             penalties_costs[choice(range(len(penalties_costs)))],\n             np.abs(goals.get(team) - penalties.get(team)) if goals.get(team) and penalties.get(team)\n             else np.nan)\n            for team in teams\n        ],\n        columns=['Team', 'Goals', 'Penalties', 'Penalties Cost', 'Performance Score'])\n\n    return df", "compilation_passed": true, "time": 0.0015621185302734375, "tests_passed": false, "error": "AttributeError"}
{"code": "goals = {team: goals.get(team, 0) for team in teams}\n    penalties = {team: penalties.get(team, 0) for team in teams}\n    results = []\n    for team in teams:\n        goals_score = goals.get(team, 0)\n        penalties_score = penalties.get(team, 0)\n        cost = int(np.random.choice(penalties_costs) * (3 if goals_score - penalties_score <= 0 else 1))\n        results.append({'Team': team, 'Goals': goals_score, 'Penalties': penalties_score, 'Penalties Cost': cost,\n                        'Performance Score': goals_score - penalties_score - cost})\n    df = pd.DataFrame(results)\n    return df", "compilation_passed": true, "time": 0.001605987548828125, "tests_passed": false, "error": "AttributeError"}
{"code": "assert isinstance(goals, dict) and isinstance(penalties, dict), 'Input must be a dict'\n    assert np.issubdtype(type(goals['Team A']), np.integer), 'Goal values must be integers'\n    assert np.issubdtype(type(penalties['Team A']), np.integer), 'Penalty values must be integers'\n    assert np.all(list(goals.keys()) == teams), \"Goals and teams lists should have the same length\"\n    assert np.all(list(penalties.keys()) == teams), \"Penalties and teams lists should have the same length\"\n    assert np.all(list(goals.keys()) == list(penalties.keys())), \"Teams lists should have the same elements\"\n    assert np.all([goals[team] >= 0 for team in goals.keys()]), \"Goals values cannot be negative\"\n    assert np.all([penalties[team] >= 0 for team in penalties.keys()]), \"Penalties values cannot be negative\"\n    assert np", "compilation_passed": true, "time": 0.0016169548034667969, "tests_passed": false, "error": "AttributeError"}
{"code": "assert isinstance(goals, dict) and isinstance(penalties, dict)\n    assert set(goals.keys()).issubset(teams) and set(penalties.keys()).issubset(teams)\n\n    # generate dataframe\n    df = pd.DataFrame(index=teams, columns=['Goals', 'Penalties', 'Penalties Cost', 'Performance Score'])\n    for team, goals_score in goals.items():\n        penalties_score = penalties[team]\n        penalties_cost = np.random.choice(penalties_costs)\n        df.loc[team, ['Goals', 'Penalties', 'Penalties Cost', 'Performance Score']] = [goals_score, penalties_score, penalties_cost, goals_score - penalties_score]\n    return df", "compilation_passed": true, "time": 0.0016639232635498047, "tests_passed": false, "error": "AttributeError"}
{"code": "assert isinstance(goals, dict) and isinstance(penalties, dict)\n\n    teams = set(teams)\n    assert isinstance(teams, set)\n    assert len(teams) == 5, 'Must have exactly 5 teams'\n\n    penalties_costs = set(penalties_costs)\n    assert isinstance(penalties_costs, set)\n    assert len(penalties_costs) == 5, 'Must have exactly 5 penalties_costs'\n\n    goals = {team: goals[team] for team in teams if team in goals}\n    penalties = {team: penalties[team] for team in teams if team in penalties}\n\n    assert len(goals) == len(penalties), 'Must have equal number of teams and goals and penalties'\n\n    report = pd.DataFrame(\n        {\n            'Team': goals.keys(),\n            'Goals': goals.values(),\n            'Penalties': penalties.values(),\n            'Penalties Cost': [\n                random.choice(penalties_cost", "compilation_passed": false, "time": 0.0002968311309814453, "tests_passed": false, "error": "SyntaxError"}
{"code": "goals = {t: g for t, g in goals.items()}\n    penalties = {t: p for t, p in penalties.items()}\n    teams = teams or TEAMS\n    penalties_costs = penalties_costs or PENALTIES_COSTS\n\n    result_data = {\n        'Team': [],\n        'Goals': [],\n        'Penalties': [],\n        'Penalties Cost': [],\n        'Performance Score': []\n    }\n    for t in teams:\n        g = goals[t] if t in goals else choice([0, 1, 2])\n        p = penalties[t] if t in penalties else choice([0, 1, 2])\n        if g + p < 0:  # prevent negative values for performance\n            p = 0\n        p_cost = choice(penalties_costs)\n        result_data['Team'].append(t)\n        result_data['Goals'].append(g)\n        result_data['Penalties'].append(p)\n        result_data", "compilation_passed": true, "time": 0.0016398429870605469, "tests_passed": false, "error": "AttributeError"}
{"code": "df = pd.DataFrame(\n        {'Team': teams,\n         'Goals': goals.values(),\n         'Penalties': penalties.values(),\n         'Penalties Cost': [choice(penalties_costs)] * len(teams),\n         'Performance Score': np.abs(goals['Team A'] - penalties['Team A'])\n         })\n    return df", "compilation_passed": true, "time": 0.0014882087707519531, "tests_passed": false, "error": "AttributeError"}
{"code": "df = pd.DataFrame()\n\n    for team in teams:\n        if team in goals:\n            goals_scored = goals[team]\n        else:\n            goals_scored = 0\n\n        if team in penalties:\n            penalties_incurred = penalties[team]\n        else:\n            penalties_incurred = 0\n\n        penalties_cost = np.random.choice(penalties_costs)\n        score = goals_scored - penalties_incurred\n\n        row = {'Team': team, 'Goals': goals_scored, 'Penalties': penalties_incurred,\n               'Penalties Cost': penalties_cost, 'Performance Score': score}\n        df = df.append(row, ignore_index=True)\n\n    return df", "compilation_passed": true, "time": 0.0015323162078857422, "tests_passed": false, "error": "AttributeError"}
{"code": "result = pd.DataFrame(\n        {\n            'Team': teams,\n            'Goals': np.array(list(goals.values())),\n            'Penalties': np.array(list(penalties.values())),\n            'Penalties Cost': np.array(np.random.choice(penalties_costs, len(teams))),\n            'Performance Score': np.array(\n                [goals[team] - penalties[team] for team in teams])\n        })\n    return result", "compilation_passed": true, "time": 0.0015020370483398438, "tests_passed": false, "error": "AttributeError"}
{"code": "# Initialise team_info as an empty dictionary.\n    team_info = {}\n    # Loop over teams\n    for team in teams:\n        # If team in goals and penalties dictionaries\n        if team in goals and team in penalties:\n            # Select goals, penalties and penalties cost using random.choice.\n            goals_count = goals[team]\n            penalties_count = penalties[team]\n            penalties_cost = choices(penalties_costs)[0]\n            # Calculate performance score and append to team_info dictionary.\n            performance_score = goals_count - penalties_count * (penalties_cost / 100)\n            team_info[team] = pd.Series(\n                [team, goals_count, penalties_count, penalties_cost, np.round(performance_score, 2)],\n                index=['Team', 'Goals', 'Penalties', 'Penalties Cost', 'Performance Score'])\n        # Else\n        else:\n            # Raise a ValueError\n            raise ValueError('A team has no goals or penalties.')\n\n    return", "compilation_passed": true, "time": 0.0015439987182617188, "tests_passed": false, "error": "AttributeError"}
{"code": "# Dataframe construction\n    report_df = pd.DataFrame(\n        index=teams,\n        data={\n            'Goals': goals,\n            'Penalties': penalties\n        }\n    )\n\n    # Calculate penalties cost using a random multiplier from a predefined list\n    random_cost = choice(penalties_costs)\n    report_df['Penalties Cost'] = report_df['Penalties'] * random_cost\n\n    # Calculate performance score\n    report_df['Performance Score'] = report_df['Goals'] - report_df['Penalties']\n\n    return report_df", "compilation_passed": true, "time": 0.00156402587890625, "tests_passed": false, "error": "AttributeError"}
{"code": "team_df = pd.DataFrame(\n        index=teams,\n        data={\n            'Goals': goals,\n            'Penalties': penalties\n        }\n    )\n    # Calculate penalties cost\n    team_df['Penalties Cost'] = (team_df['Penalties'] * choice(penalties_costs))\n    # Calculate performance score\n    team_df['Performance Score'] = team_df['Goals'] - team_df['Penalties Cost']\n\n    return team_df", "compilation_passed": true, "time": 0.0014979839324951172, "tests_passed": false, "error": "AttributeError"}
{"code": "return pd.DataFrame(index=teams, columns=['Team', 'Goals', 'Penalties', 'Penalties Cost', 'Performance Score']) \\\n        .assign(**{\n            'Team': teams,\n            'Goals': goals,\n            'Penalties': penalties,\n            'Penalties Cost': penalties_costs[choice(np.arange(len(penalties_costs)))],\n            'Performance Score': goals[teams[0]] - penalties[teams[0]]\n        }) \\\n        .set_index('Team')", "compilation_passed": true, "time": 0.0014500617980957031, "tests_passed": false, "error": "AttributeError"}
{"code": "goals = goals\n    penalties = penalties\n    # Generate a dictionary for each team's goals\n    team_goals = dict.fromkeys(teams, 0)\n    for team in teams:\n        if team in goals:\n            team_goals[team] = goals[team]\n    # Generate a dictionary for each team's penalties\n    team_penalties = dict.fromkeys(teams, 0)\n    for team in teams:\n        if team in penalties:\n            team_penalties[team] = penalties[team]\n    # Generate a list of penalties cost\n    penalties_cost_list = []\n    for i in range(len(penalties_costs)):\n        penalties_cost_list.append(choice(penalties_costs))\n\n    # Generate a DataFrame with columns Team, Goals, Penalties, Penalties Cost, Performance Score\n    report = pd.DataFrame({'Team': teams, 'Goals': team_goals, 'Penalties': team_penalties,\n                           'Penalties Cost': penalties_", "compilation_passed": false, "time": 0.00027370452880859375, "tests_passed": false, "error": "SyntaxError"}
{"code": "df = pd.DataFrame(index=teams, columns=['Team', 'Goals', 'Penalties', 'Penalties Cost', 'Performance Score'])\n\n    for team in teams:\n        goals_count = goals.get(team, 0)\n        penalties_count = penalties.get(team, 0)\n\n        penalties_cost = choice(penalties_costs)\n\n        score = goals_count - penalties_count\n\n        df.loc[team] = [team, goals_count, penalties_count, penalties_cost, score]\n\n    return df", "compilation_passed": true, "time": 0.0015079975128173828, "tests_passed": false, "error": "AttributeError"}
{"code": "# Check types\n    for key in goals:\n        if not isinstance(goals[key], int) or goals[key] < 0:\n            raise TypeError(f\"Goals should be a non-negative integer, not {goals[key]}.\")\n        if not isinstance(penalties[key], int) or penalties[key] < 0:\n            raise TypeError(f\"Penalties should be a non-negative integer, not {penalties[key]}.\")\n\n    report = pd.DataFrame()\n\n    # Create a report DataFrame\n    for team in teams:\n        # Assign values to columns\n        report.loc[team, 'Team'] = team\n        report.loc[team, 'Goals'] = goals.get(team, 0)\n        report.loc[team, 'Penalties'] = penalties.get(team, 0)\n        report.loc[team, 'Penalties Cost'] = np.random.choice(penalties_costs)\n        report.loc[team, 'Performance Score'] = goals[team] - penalties[team]", "compilation_passed": true, "time": 0.0015900135040283203, "tests_passed": false, "error": "AttributeError"}
{"code": "# Generate a DataFrame with team names as index and columns 'Goals' and 'Penalties'\n    df = pd.DataFrame(index=teams, columns=['Goals', 'Penalties'])\n    df.loc[:, 'Goals'] = goals.get(team, 0)\n    df.loc[:, 'Penalties'] = penalties.get(team, 0)\n\n    # Compute penalties costs for each team\n    df.loc[:, 'Penalties Cost'] = np.array([random.choice(penalties_costs) for _ in range(5)])\n    df.loc[:, 'Performance Score'] = df['Goals'] - df['Penalties']\n\n    return df", "compilation_passed": true, "time": 0.0015079975128173828, "tests_passed": false, "error": "AttributeError"}
{"code": "data = []\n    for team in teams:\n        goals_score = goals.get(team, 0)\n        penalties_score = penalties.get(team, 0)\n\n        # Calculate penalties cost\n        penalties_cost = choice(penalties_costs) * (1 + goals_score - penalties_score)\n\n        # Calculate performance score\n        performance_score = goals_score - penalties_score\n\n        # Append the row to the data list\n        data.append({\n            'Team': team,\n            'Goals': goals_score,\n            'Penalties': penalties_score,\n            'Penalties Cost': penalties_cost,\n            'Performance Score': performance_score\n        })\n\n    # Convert the list to a Pandas DataFrame\n    return pd.DataFrame(data, columns=['Team', 'Goals', 'Penalties', 'Penalties Cost', 'Performance Score'])", "compilation_passed": true, "time": 0.0015549659729003906, "tests_passed": false, "error": "AttributeError"}
{"code": "# Check input type and return error\n    if type(goals) is not dict:\n        raise Exception(\"The first input must be a dictionary, such as {key: value}\")\n    elif type(penalties) is not dict:\n        raise Exception(\"The second input must be a dictionary, such as {key: value}\")\n\n    # Check for duplicate keys\n    if len(set(goals).intersection(set(penalties))) > 0:\n        raise Exception(\"Keys in both inputs must be unique\")\n\n    # Check that all keys are in TEAMS\n    if set(goals).isdisjoint(set(teams)):\n        raise Exception(\"One or more teams were not found in the input\")\n    elif set(penalties).isdisjoint(set(teams)):\n        raise Exception(\"One or more teams were not found in the input\")\n\n    # Calculate penalties cost\n    def calculate_penalties_cost(penalties):\n        return choice(penalties_costs) * sum([0.01 * x for x in", "compilation_passed": false, "time": 0.0002639293670654297, "tests_passed": false, "error": "SyntaxError"}
{"code": "report = pd.DataFrame()\n    for i, team in enumerate(teams):\n        report[team] = [goals.get(team, 0),\n                       penalties.get(team, 0),\n                       penalties_costs[i] * choice([0, 1]),\n                       goals[team] - penalties[team]]\n        report.iloc[i, i] = 0\n    return report", "compilation_passed": true, "time": 0.0014891624450683594, "tests_passed": false, "error": "AttributeError"}
{"code": "df = pd.DataFrame()\n\n    # Validating input arguments\n    if not isinstance(goals, dict):\n        raise ValueError(\"Invalid input data for 'goals'. Must be of type 'dict'.\")\n    if not isinstance(penalties, dict):\n        raise ValueError(\"Invalid input data for 'penalties'. Must be of type 'dict'.\")\n    for team in goals.keys():\n        if team not in teams:\n            raise ValueError(f\"Invalid team name in 'goals' dictionary: {team}.\")\n    for team in penalties.keys():\n        if team not in teams:\n            raise ValueError(f\"Invalid team name in 'penalties' dictionary: {team}.\")\n\n    # Populating 'Team' and 'Goals' columns\n    df['Team'] = goals.keys()\n    df['Goals'] = goals.values()\n    df.reset_index(drop=True, inplace=True)\n\n    # Populating 'Penalties' column\n    df['Penalties'] = penalties.values()\n\n    ", "compilation_passed": true, "time": 0.0015530586242675781, "tests_passed": false, "error": "AttributeError"}
{"code": "assert goals.keys() == penalties.keys()\n    df = pd.DataFrame()\n    for team in teams:\n        df.loc[team] = [goals[team], penalties[team],\n                        choice(penalties_costs), (goals[team] - penalties[team]) * 10]\n    df.sort_values(by='Performance Score', ascending=False, inplace=True)\n    return df", "compilation_passed": true, "time": 0.0014679431915283203, "tests_passed": false, "error": "AttributeError"}
{"code": "# Create a DataFrame with columns \"Team\", \"Goals\", \"Penalties\", \"Penalties Cost\", and \"Performance Score\"\n    df = pd.DataFrame(\n        data=[(team, goals.get(team, 0), penalties.get(team, 0), penalties_costs[i], goals[team] - penalties[team]) for i, team in enumerate(teams)],\n        columns=[\"Team\", \"Goals\", \"Penalties\", \"Penalties Cost\", \"Performance Score\"])\n\n    # Calculate 'Performance Score'\n    df['Performance Score'] = df[\"Goals\"] - df[\"Penalties\"] * (1 - df[\"Penalties Cost\"] / 100)\n\n    return df", "compilation_passed": true, "time": 0.0014920234680175781, "tests_passed": false, "error": "AttributeError"}
