{"code": "random.seed(seed)\n    df = pd.DataFrame(data).rename_axis(columns)\n    if len(df.columns) != len(columns):\n        raise ValueError(f\"Wrong number of columns in dataframe: {len(df.columns)} vs. {len(columns)}\")\n    if fill_missing:\n        if isinstance(num_range, tuple):\n            low, high = num_range\n        else:\n            low, high = (0, 100)\n        for col in df:\n            if not pd.api.types.is_numeric_dtype(df[col]):\n                continue\n            if low > high:\n                raise ValueError(f\"Invalid range: min {low} must be smaller than max {high}\")\n            missing = df[col].isna()\n            if missing.any():\n                r = random.random()\n                if low <= r <= 0.5:\n                    df[col] = random.randint(low, high)\n                else:\n                    df[col] = random.normalvariate(0,", "compilation_passed": false, "time": 0.000331878662109375, "tests_passed": false, "error": "SyntaxError"}
{"code": "columns = columns or ['Name', 'Age', 'Occupation']\n\n    if not isinstance(data, list):\n        raise TypeError('data must be a list')\n\n    data = data or [()]\n\n    for row in data:\n        if not isinstance(row, tuple) and not len(row) == len(columns):\n            raise ValueError(f'Data {row} has wrong length, expected {len(columns)}')\n\n    if seed:\n        random.seed(seed)\n\n    df = pd.DataFrame(data=data, columns=columns)\n\n    if fill_missing:\n        for col_name in df.columns:\n            if df[col_name].isna().any():\n                df.loc[df[col_name].isna(), col_name] = random.uniform(*num_range)\n\n    return df", "compilation_passed": true, "time": 0.002460956573486328, "tests_passed": false, "error": "ValueError"}
{"code": "random.seed(seed)\n    for tuple in data:\n        if not len(tuple) == len(columns):\n            raise ValueError('List of tuples must have same length as columns parameter.')\n\n    # create DataFrame from list of tuples\n    df = pd.DataFrame.from_dict(data, orient='index')\n\n    # add columns if they don't exist\n    df.columns = columns\n\n    # replace missing numeric values with random data if fill_missing is True\n    if fill_missing:\n        for column in columns:\n            if df[column].dtype == 'int64' or df[column].dtype == 'float64':\n                df.loc[df[column].isnull(), column] = random.randint(*num_range)\n\n    return df", "compilation_passed": true, "time": 0.0011277198791503906, "tests_passed": false, "error": "AttributeError"}
{"code": "random.seed(seed)\n    try:\n        df = pd.DataFrame(data)\n    except Exception as e:\n        raise Exception('Input data is not of the correct format. Please enter a list of tuples or a list of dictionaries.')\n    for i, column in enumerate(df.columns):\n        if not isinstance(column, str) and len(df.columns) != len(columns):\n            raise Exception(\n                \"Columns parameter is of wrong type. Please enter a list of strings or a list of the same number of columns as the DataFrame.\")\n        if isinstance(column, str) and column not in columns:\n            raise Exception(f\"{column} is not a valid column name.\")\n        elif isinstance(column, str) and len(df.columns) < len(columns):\n            raise Exception(\"Too few columns in the DataFrame.\")\n        elif isinstance(column, str) and len(df.columns) > len(columns):\n            raise Exception(\"Too many columns in the DataFrame.\")\n        elif isinstance(column, int) and (column < 0 or column", "compilation_passed": false, "time": 0.00026702880859375, "tests_passed": false, "error": "SyntaxError"}
{"code": "pd.set_option('display.width', 1000)\n    pd.set_option('display.max_columns', 500)\n    pd.set_option('display.max_rows', 100)\n    pd.set_option('display.expand_frame_repr', False)\n    pd.set_option('display.max_colwidth', -1)\n    pd.set_option(\"display.float_format\", lambda x: \"%.3f\" % x)\n    pd.set_option('display.width', None)\n\n    if seed is not None:\n        random.seed(seed)\n\n    if isinstance(data, pd.DataFrame):\n        return data\n\n    if isinstance(data, list) and all(isinstance(item, tuple) for item in data):\n        df = pd.DataFrame(data, columns=columns)\n    else:\n        raise TypeError('data must be a list of tuples')\n\n    if fill_missing:\n        num_range = tuple(num_range)\n        for i in", "compilation_passed": false, "time": 0.0002498626708984375, "tests_passed": false, "error": "SyntaxError"}
{"code": "pd.options.mode.chained_assignment = None\n    # Create a DataFrame from the input data using the specified column names\n    df = pd.DataFrame(data, columns=columns)\n\n    # Fill missing values using random numbers if fill_missing is True\n    if fill_missing:\n        random.seed(seed)\n        random_values = [random.uniform(*num_range) for _ in df.columns]\n        for column, value in zip(df.columns, random_values):\n            if df[column].isnull().values.any():\n                df[column] = value\n\n    return df", "compilation_passed": true, "time": 0.002850055694580078, "tests_passed": true, "error": null}
{"code": "if seed:\n        random.seed(seed)\n\n    if columns is None:\n        columns = ['Name', 'Age', 'Occupation']\n\n    df = pd.DataFrame(data, columns=columns)\n\n    if fill_missing:\n        for col in df:\n            if pd.isnull(df[col].mean()):\n                df[col] = random.uniform(*num_range)\n\n    return df", "compilation_passed": true, "time": 0.002874135971069336, "tests_passed": false, "error": "TypeError"}
{"code": "import random\n    import pandas as pd\n\n    data = pd.DataFrame(data=data)\n    num_columns = len(columns)\n    data.columns = columns\n\n    if fill_missing:\n        # Fill missing values with random data\n        for column in data.columns:\n            data[column] = data[column].fillna(random_number(num_range, seed=seed))\n\n    return data", "compilation_passed": true, "time": 0.0021791458129882812, "tests_passed": false, "error": "ValueError"}
{"code": "columns = columns if columns else ['Name', 'Age', 'Occupation']\n    df = pd.DataFrame(data, columns=columns)\n\n    if fill_missing:\n        random.seed(seed)\n        numeric_cols = [col for col in df.columns if df[col].dtype.name in ['int64', 'float64']]\n        for col in numeric_cols:\n            df[col].fillna(random.uniform(*num_range), inplace=True)\n\n    return df", "compilation_passed": true, "time": 0.003567218780517578, "tests_passed": true, "error": null}
{"code": "pd.DataFrame([row for row in data], columns=columns)\n    return pd.DataFrame([row for row in data], columns=columns)", "compilation_passed": true, "time": 0.0031468868255615234, "tests_passed": true, "error": null}
{"code": "# Check for pandas and random imports\n    if pd is None or random is None:\n        raise ImportError(\"Please install pandas and random libraries to use this task.\")\n\n    # Create an empty list to store the rows\n    rows = []\n\n    # For each row in the list\n    for row in data:\n        # Check if the row is a tuple or not\n        if isinstance(row, tuple):\n            # If tuple, extract elements and check length\n            if len(row) == len(columns):\n                # If equal to columns, add it as row to list\n                rows.append(row)\n            else:\n                # If not equal to columns, extend it with None\n                rows.append(list(row) + [None] * (len(columns) - len(row)))\n        else:\n            # If not a tuple, add it as a row with only one element, None\n            rows.append([row])\n\n    # Create a pandas DataFrame with specified columns\n    df = pd.DataFrame(rows, columns=columns)\n\n    # For each column that is numeric and contains None values\n    for column in", "compilation_passed": false, "time": 0.00023031234741210938, "tests_passed": false, "error": "SyntaxError"}
{"code": "df = pd.DataFrame(data, columns=columns)\n\n    if fill_missing:\n        if df.empty:\n            df.columns = columns\n        else:\n            numeric_cols = df.select_dtypes(include=['float', 'int']).columns\n            df.loc[:, numeric_cols] = 0\n\n        numeric_cols = df.select_dtypes(include=['float', 'int']).columns\n        df.loc[:, numeric_cols] = random.Random(seed).randint(\n            num_range[0], num_range[1], size=df.shape[0])\n\n    return df", "compilation_passed": true, "time": 0.002975940704345703, "tests_passed": false, "error": "TypeError"}
{"code": "df = pd.DataFrame(data, columns=columns)\n    if fill_missing:\n        num_cols = [col for col in columns if col != 'Name']\n        num_cols_count = len(num_cols)\n        df[num_cols] = None\n        rng = random.Random(seed)\n        for row_num, row in df.iterrows():\n            missing_count = 0\n            for col_num, val in enumerate(row):\n                if val is None:\n                    missing_count += 1\n                    if missing_count > num_cols_count:\n                        continue\n                    new_val = rng.randint(*num_range)\n                    df.at[row_num, num_cols[missing_count - 1]] = new_val\n    return df", "compilation_passed": true, "time": 0.002833127975463867, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(data, columns=columns)\n\n    if fill_missing:\n        for col in df.columns:\n            if pd.isnull(df[col].iloc[0]):\n                df[col] = random.uniform(*num_range)\n\n    return df", "compilation_passed": true, "time": 0.0026171207427978516, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(data, columns=columns)\n    if fill_missing:\n        random_values = [random.uniform(*num_range) if pd.isnull(row[1]) else row[1] for row in df.iterrows()]\n        for index, column in enumerate(columns):\n            if not pd.isnull(df[column]):\n                df[column] = random_values\n    return df", "compilation_passed": true, "time": 0.0026772022247314453, "tests_passed": false, "error": "ValueError"}
{"code": "if not isinstance(data, list):\n        raise TypeError(\"Expected 'data' to be a list, but got {}\".format(type(data).__name__))\n\n    if not isinstance(columns, list):\n        raise TypeError(\"Expected 'columns' to be a list of strings, but got {}\".format(type(columns).__name__))\n    elif len(columns) == 0:\n        columns = ['Name', 'Age', 'Occupation']\n\n    if not isinstance(fill_missing, bool):\n        raise TypeError(\"Expected 'fill_missing' to be a boolean, but got {}\".format(type(fill_missing).__name__))\n\n    if not isinstance(num_range, tuple):\n        raise TypeError(\"Expected 'num_range' to be a tuple of two elements, but got {}\".format(type(num_range).__name__))\n\n    if len(num_range) != 2:\n        raise TypeError(\"Expected 'num_range' to be a tuple of two elements, but got {}\".", "compilation_passed": false, "time": 0.00023794174194335938, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Check the requirements\n    for req in ['pandas', 'random']:\n        try:\n            __import__(req)\n        except ImportError:\n            raise ImportError(f\"Task requires {req} to run.\")\n\n    # Check seed value\n    if seed is not None:\n        random.seed(seed)\n    else:\n        random.seed(None)\n\n    # Create the columns of the DataFrame\n    if isinstance(columns, str):\n        columns = [columns]\n\n    if len(columns) == 0:\n        columns = ['Name', 'Age', 'Occupation']\n\n    df = pd.DataFrame(columns=columns)\n    for i, row in enumerate(data):\n        # Check if the row has the required number of columns\n        if len(row) < len(columns):\n            row += [None] * (len(columns) - len(row))\n        elif len(row) > len(columns):\n            row = row[:len(columns)]\n\n        # Create a row in the DataFrame\n        df_row = [None] * len(", "compilation_passed": false, "time": 0.0002770423889160156, "tests_passed": false, "error": "SyntaxError"}
{"code": "df = pd.DataFrame(data, columns=columns)\n    if fill_missing:\n        df.loc[:, ['Age', 'Quantity']] = df.loc[:, ['Age', 'Quantity']].fillna(\n            random.randint(*num_range))\n    return df", "compilation_passed": true, "time": 0.002989053726196289, "tests_passed": false, "error": "KeyError"}
{"code": "if not isinstance(data, list):\n        raise TypeError('data must be a list')\n\n    # Check the length of the data list\n    if len(data) == 0:\n        return None\n\n    if seed:\n        random.seed(seed)\n\n    columns = columns or ['Name', 'Age', 'Occupation']\n\n    # Check if all elements in data are tuples or not\n    if all(not isinstance(row, tuple) for row in data):\n        raise ValueError('Elements in data must be tuples')\n\n    # Check the lengths of all tuples in data\n    lengths = [len(row) for row in data]\n\n    if len(set(lengths)) != 1:\n        raise ValueError('All elements in data must be of equal length')\n\n    # Extract the column names\n    col_names = columns[:]\n\n    # Extract the column data from the data\n    col_data = [row[0] for row in data]\n\n    if all(isinstance(row, tuple) for row in data):\n        ", "compilation_passed": false, "time": 0.000244140625, "tests_passed": false, "error": "IndentationError"}
{"code": "if not isinstance(columns, list):\n        raise TypeError(\"'columns' must be a list of strings.\")\n    if not all(isinstance(name, str) for name in columns):\n        raise TypeError(\"'columns' must be a list of strings.\")\n\n    if len(columns) > len(data[0]):\n        data.append([None for _ in range(len(columns) - len(data[0]))])\n    elif len(columns) < len(data[0]):\n        data = [list(data[0]) + [None for _ in range(len(columns) - len(data[0]))]]\n\n    if seed is not None:\n        random.seed(seed)\n\n    for row in data:\n        for i in range(len(row)):\n            if isinstance(row[i], int) or isinstance(row[i], float):\n                if fill_missing and random.random() < 0.5:\n                    row[i] = random.uniform(*num_range)\n\n    return pd.DataFrame(data, columns=columns)<", "compilation_passed": false, "time": 0.00029921531677246094, "tests_passed": false, "error": "SyntaxError"}
{"code": "if seed:\n        random.seed(seed)\n\n    if len(data) == 0:\n        return None\n\n    if len(data) == 1:\n        if len(data[0]) == 0:\n            return pd.DataFrame(columns=columns)\n        else:\n            df = pd.DataFrame([data[0]], columns=columns)\n            for idx, elem in enumerate(data[0]):\n                if not elem:\n                    elem = random.randint(*num_range)\n                df[columns[idx]] = elem\n            return df\n\n    df = pd.DataFrame(data, columns=columns)\n    if fill_missing:\n        for col in df.columns:\n            if df[col].dtype == int or df[col].dtype == float:\n                df[col] = df[col].fillna(random.randint(*num_range))\n            else:\n                df[col] = df[col].fillna(random.choice([\"\", None]))\n    return df", "compilation_passed": true, "time": 0.002273082733154297, "tests_passed": true, "error": null}
{"code": "# create a DataFrame from the data\n    df = pd.DataFrame(data, columns=columns)\n\n    # check if fill_missing is True\n    if fill_missing:\n        # create random numbers within the specified range for numeric values\n        df.loc[df.apply(lambda x: pd.isnull(x).sum() > 0, axis=1), columns] = random.randint(*num_range)\n\n    # set the seed if provided\n    if seed:\n        random.seed(seed)\n\n    return df", "compilation_passed": true, "time": 0.003014802932739258, "tests_passed": true, "error": null}
{"code": "random.seed(seed)\n    if not isinstance(data, list) or len(data) < 1:\n        raise ValueError(\"data must be a non-empty list\")\n\n    if not isinstance(fill_missing, bool):\n        raise TypeError(\"fill_missing must be a boolean value\")\n\n    if not isinstance(seed, int) or seed < 0:\n        raise TypeError(\"seed must be a non-negative integer\")\n\n    df = pd.DataFrame(data=data, columns=columns, dtype=float)\n    if fill_missing:\n        for row in df.iterrows():\n            for col in range(len(row[1])):\n                if isinstance(row[1][col], float):\n                    row[1][col] = random.uniform(*num_range)\n\n    return df", "compilation_passed": true, "time": 0.0011169910430908203, "tests_passed": false, "error": "TypeError"}
{"code": "rnd = random.Random(seed)\n    df = pd.DataFrame(columns=columns)\n\n    for i in range(len(data)):\n        row_data = data[i]\n        missing = [j is None for j in row_data]\n        if sum(missing) == 3:\n            row_data = [rnd.randint(*num_range) for _ in range(len(columns))]\n        df.loc[i] = row_data\n\n    if fill_missing:\n        for i in range(len(df)):\n            for j in range(len(df.columns)):\n                if df.iloc[i, j] is None:\n                    df.iloc[i, j] = rnd.randint(*num_range)\n    return df", "compilation_passed": true, "time": 0.002349853515625, "tests_passed": true, "error": null}
{"code": "if not isinstance(data, list):\n        raise TypeError('Data must be a list')\n\n    # Create a random seed if None is given\n    if seed is None:\n        seed = random.randint(0, 1000000)\n\n    # Create a random seed for the NumPy random number generator\n    random.seed(seed)\n\n    # Create a dictionary for the column names\n    column_names = {}\n    for idx, col in enumerate(columns):\n        column_names[idx] = col\n\n    # Check if data is an empty list\n    if not data:\n        # Create a pandas DataFrame with the specified columns\n        df = pd.DataFrame(columns=column_names)\n        return df\n\n    # Create a DataFrame with the specified columns\n    df = pd.DataFrame(columns=column_names)\n\n    # Loop through each row in data\n    for row in data:\n        # Check if row is a tuple, in which case it's missing values\n        if len(row) < len(columns):\n            missing_values = []\n            for i in range(len", "compilation_passed": false, "time": 0.0002429485321044922, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not isinstance(data, list) or not all(isinstance(row, tuple) for row in data):\n        raise TypeError(\"Invalid data type. Data must be a list of tuples.\")\n\n    if seed is not None and not isinstance(seed, int):\n        raise TypeError(\"Invalid seed type. Seed must be an integer.\")\n\n    # Check the column names\n    if not isinstance(columns, list) or not all(isinstance(col, str) for col in columns):\n        raise TypeError(\"Invalid column names. Column names must be a list of strings.\")\n\n    # Convert data into a Pandas DataFrame\n    df = pd.DataFrame(data, columns=columns)\n\n    # Check the data types\n    if not all(isinstance(col, (int, float, str)) for col in df.columns):\n        raise TypeError(\"Invalid column data types. All columns must be numeric or string.\")\n\n    if not fill_missing:\n        return df\n\n    # Fill missing data with random values\n    # Check that num_range is a tuple containing two numbers", "compilation_passed": true, "time": 0.0026459693908691406, "tests_passed": false, "error": "AttributeError"}
{"code": "if seed is not None:\n        random.seed(seed)\n    try:\n        columns_names = pd.Series(columns)\n    except Exception:\n        return None\n\n    if fill_missing:\n        if columns[0] == columns_names[0]:\n            num = random.random() * num_range[1] + num_range[0]\n            data.append((columns[0], num))\n\n    return pd.DataFrame(data, columns=columns)", "compilation_passed": true, "time": 0.0027370452880859375, "tests_passed": true, "error": null}
{"code": "columns = columns if columns is not None else ['Name', 'Age', 'Occupation']\n    columns = list(columns)\n    random.seed(seed)\n    for row in range(len(data)):\n        row_list = []\n        for i in range(len(columns)):\n            if len(data[row]) < i+1:\n                row_list.append(None)\n            else:\n                row_list.append(data[row][i])\n        data[row] = tuple(row_list)\n    data = pd.DataFrame(data, columns=columns)\n    if fill_missing and data.apply(lambda x: pd.api.types.is_numeric_dtype(x)).any():\n        data.fillna(random.uniform(*num_range), inplace=True)\n    return data", "compilation_passed": true, "time": 0.0029129981994628906, "tests_passed": true, "error": null}
{"code": "random.seed(seed)\n    if len(data) == 0:\n        return pd.DataFrame([], columns=columns)\n    max_col = len(columns)\n    max_row = len(data)\n\n    if max_row == 0:\n        return pd.DataFrame([], columns=columns)\n    if max_col == 0:\n        return pd.DataFrame(data)\n\n    row = len(data[0])\n    if row > 0:\n        if row > max_row:\n            row = max_row\n        if max_col > 0:\n            df = pd.DataFrame(columns=columns)\n            for j in range(row):\n                if j >= max_row:\n                    break\n                if max_col > 0:\n                    df.loc[j, :] = data[j]\n            return df\n        return pd.DataFrame(columns=columns)\n    return pd.DataFrame(data)", "compilation_passed": true, "time": 0.001956939697265625, "tests_passed": true, "error": null}
{"code": "if seed is not None:\n        random.seed(seed)\n\n    if len(data) > 0 and len(data[0]) == 0:\n        return None\n\n    # Convert the data into a Pandas DataFrame\n    df = pd.DataFrame(data)\n\n    if len(columns) > 0:\n        df.columns = columns\n\n    # Fill missing data with random numbers if fill_missing is True\n    if fill_missing:\n        for col_name in df.columns:\n            if df[col_name].dtype == np.number and np.all(pd.isnull(df[col_name])):\n                df.loc[:, col_name] = random.randint(*num_range)\n\n    return df", "compilation_passed": true, "time": 0.0022127628326416016, "tests_passed": false, "error": "ValueError"}
