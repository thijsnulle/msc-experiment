{"code": "if not isinstance(image, np.ndarray):\n        raise TypeError(\"Image must be a numpy array.\")\n    if sigma < 0:\n        raise ValueError(\"Sigma must be positive.\")\n    filtered_image = gaussian_filter(image, sigma=sigma)\n    fig, ax = plt.subplots(1, 2, figsize=(10, 5))\n    ax[0].imshow(image, cmap='gray')\n    ax[1].imshow(filtered_image, cmap='gray')\n    ax[0].set_title('Original')\n    ax[1].set_title('Filtered')\n    return ax, filtered_image", "compilation_passed": true, "time": 0.058348894119262695, "tests_passed": true, "error": null}
{"code": "if sigma < 0:\n        raise ValueError(\"Sigma must be non-negative\")\n    if not isinstance(image, np.ndarray):\n        raise TypeError(\"Input must be a numpy array\")\n    return gaussian_filter(image, sigma)", "compilation_passed": true, "time": 0.012173652648925781, "tests_passed": false, "error": "ValueError"}
{"code": "if not isinstance(image, np.ndarray):\n        raise TypeError\n\n    if sigma <= 0:\n        raise ValueError\n\n    filtered_image = gaussian_filter(image, sigma)\n    fig, (ax1, ax2) = plt.subplots(1, 2)\n    ax1.imshow(image)\n    ax1.set_title('Original')\n    ax2.imshow(filtered_image)\n    ax2.set_title('Filtered')\n    fig.suptitle('Gaussian filter with sigma=%f' % sigma)\n    ax1.axis(\"off\")\n    ax2.axis(\"off\")\n    return ax, filtered_image", "compilation_passed": true, "time": 0.018045902252197266, "tests_passed": false, "error": "NameError"}
{"code": "ax = plt.subplots(1, 2)\n    filtered_image = gaussian_filter(image, sigma)\n    ax[0].imshow(image)\n    ax[1].imshow(filtered_image)\n    ax[0].set_title('Original')\n    ax[1].set_title('Filtered')\n    return ax, filtered_image", "compilation_passed": true, "time": 0.016921043395996094, "tests_passed": false, "error": "AttributeError"}
{"code": "ax = plt.subplots(1, 2)\n\n    # Check the requirements and input parameters\n    if sigma <= 0:\n        raise ValueError('sigma must be non-zero and positive')\n    if not isinstance(image, np.ndarray):\n        raise TypeError('The input is not a numpy array.')\n\n    ax[0].imshow(image)\n    ax[0].set_title('Original')\n\n    # Filtering\n    filtered_image = gaussian_filter(image, sigma=sigma)\n    ax[1].imshow(filtered_image)\n    ax[1].set_title('Filtered')\n\n    return ax, filtered_image", "compilation_passed": true, "time": 0.016291141510009766, "tests_passed": false, "error": "AttributeError"}
{"code": "if sigma < 0:\n        raise ValueError(\"sigma should be non-negative!\")\n    if not isinstance(image, np.ndarray):\n        raise TypeError(\"Input image must be a numpy array.\")\n\n    if sigma > 0:\n        filtered_image = gaussian_filter(image, sigma)\n        return plt.subplots(2, 1), filtered_image\n    else:\n        return plt.subplots(2, 1), image", "compilation_passed": true, "time": 0.05231523513793945, "tests_passed": true, "error": null}
{"code": "try:\n        if isinstance(image, np.ndarray) and not np.issubdtype(image.dtype, np.integer):\n            filtered_image = gaussian_filter(image, sigma)\n            return ax, filtered_image\n    except TypeError:\n        print(\"image is not a valid numpy array\")\n        raise\n    except ValueError:\n        print(\"sigma is a non-positive number.\")\n        raise", "compilation_passed": true, "time": 0.010332822799682617, "tests_passed": false, "error": "TypeError"}
{"code": "# Check the requirements\n    for package in [np, plt, gaussian_filter]:\n        if not hasattr(package, \"__name__\"):\n            raise Exception('You have missed some requirements')\n\n    if type(image).__name__ != 'ndarray':\n        raise TypeError('Wrong type of variable')\n\n    if sigma <= 0:\n        raise ValueError('sigma must be positive')\n\n    fig, axes = plt.subplots(1, 2, figsize=(10, 5))\n\n    axes[0].imshow(image, cmap='gray')\n    axes[0].set_title('Original')\n    filtered_image = gaussian_filter(image, sigma=sigma)\n    axes[1].imshow(filtered_image, cmap='gray')\n    axes[1].set_title('Filtered')\n    return fig, filtered_image", "compilation_passed": true, "time": 0.2930788993835449, "tests_passed": true, "error": null}
{"code": "# TODO: check requirements\n    ax = plt.subplots()\n\n    if not isinstance(image, np.ndarray):\n        raise TypeError(\"Input should be a numpy array.\")\n    if sigma < 0:\n        raise ValueError(\"Sigma cannot be non-positive.\")\n\n    filtered_image = gaussian_filter(image, sigma)\n\n    ax[0] = plt.imshow(image, cmap=plt.cm.gray)\n    ax[1] = plt.imshow(filtered_image, cmap=plt.cm.gray)\n\n    return ax, filtered_image", "compilation_passed": true, "time": 0.015256166458129883, "tests_passed": false, "error": "TypeError"}
{"code": "# Check the requirements and the input data.\n    assert hasattr(image, 'shape') and len(image.shape) == 2, TypeError(f\"The input is not a numpy array.\")\n    assert sigma > 0, ValueError(f\"sigma must be non-zero\")\n    # Apply the Gaussian filter.\n    filtered_image = gaussian_filter(image, sigma)\n\n    # Create the axes object and display the original image.\n    fig, ax = plt.subplots(ncols=2, figsize=(12, 4))\n    ax[0].set_title('Original')\n    ax[0].imshow(image, cmap='gray')\n\n    # Create a new plot and display the filtered image.\n    ax[1].set_title('Filtered')\n    ax[1].imshow(filtered_image, cmap='gray')\n\n    # Show the plots.\n    plt.show()\n\n    # Return the axes and the filtered image.\n    return ax, filtered_image", "compilation_passed": true, "time": 0.026517868041992188, "tests_passed": true, "error": null}
{"code": "if type(image) == np.ndarray:\n        filtered_image = gaussian_filter(image, sigma, mode=\"nearest\")\n        fig, (ax1, ax2) = plt.subplots(ncols=2, figsize=(6, 6))\n        ax1.imshow(image, cmap=\"gray\", interpolation=\"nearest\")\n        ax1.set_title(\"Original\", fontsize=10)\n        ax2.imshow(filtered_image, cmap=\"gray\", interpolation=\"nearest\")\n        ax2.set_title(\"Filtered\", fontsize=10)\n        return ax, filtered_image\n    else:\n        raise TypeError(\"Please input a numpy array.\")", "compilation_passed": true, "time": 0.017616748809814453, "tests_passed": false, "error": "NameError"}
{"code": "if sigma < 0:\n        raise ValueError('sigma must be non-negative.')\n    if type(image) != np.ndarray:\n        raise TypeError('Input image should be a numpy array')\n    filtered_image = gaussian_filter(image, sigma=sigma)\n    fig, ax = plt.subplots(1, 2)\n    ax[0].imshow(image)\n    ax[1].imshow(filtered_image)\n    return ax, filtered_image", "compilation_passed": true, "time": 0.05442309379577637, "tests_passed": true, "error": null}
{"code": "if sigma <= 0:\n        raise ValueError(\"sigma should be a positive number!\")\n    if not isinstance(image, np.ndarray):\n        raise TypeError(\"Input should be a numpy.ndarray!\")\n    filtered_image = gaussian_filter(image, sigma=sigma)\n    return plt.subplots(1,2, figsize=(10,10)),filtered_image", "compilation_passed": true, "time": 0.06653022766113281, "tests_passed": true, "error": null}
{"code": "try:\n        image_array = np.array(image)\n    except:\n        raise TypeError(\"Invalid input for image. Image must be a numpy array\")\n\n    if sigma <= 0:\n        raise ValueError(\"Sigma must be positive!\")\n\n    filtered_image = gaussian_filter(image_array, sigma)\n\n    fig, axes = plt.subplots(2, figsize=(10, 5))\n    axes[0].imshow(image_array)\n    axes[1].imshow(filtered_image)\n    axes[0].set_title(\"Original\")\n    axes[1].set_title(\"Filtered\")\n    fig.suptitle(\"Gaussian filter\")\n    return fig, filtered_image", "compilation_passed": true, "time": 0.0691378116607666, "tests_passed": true, "error": null}
{"code": "if not isinstance(image, np.ndarray):\n        raise TypeError\n    if sigma <= 0:\n        raise ValueError\n    filtered_image = gaussian_filter(image, sigma=sigma)\n    fig, ax = plt.subplots(ncols=2, figsize=(10, 5))\n    ax[0].imshow(image)\n    ax[1].imshow(filtered_image)\n    ax[0].set_title('Original')\n    ax[1].set_title('Filtered')\n    return ax, filtered_image", "compilation_passed": true, "time": 0.09505414962768555, "tests_passed": true, "error": null}
{"code": "# Your code\n    # Raises the following exceptions\n    if not isinstance(image, np.ndarray):\n        raise TypeError(f\"Expected a numpy array, but received {type(image).__name__}.\")\n    if sigma <= 0:\n        raise ValueError(f\"Expected sigma to be non-negative, but received {sigma}.\")\n    filtered_image = gaussian_filter(image, sigma=sigma)\n\n    fig, ax = plt.subplots(1, 2, figsize=(15, 5))\n    ax[0].imshow(image)\n    ax[1].imshow(filtered_image)\n\n    ax[0].set_title(\"Original\")\n    ax[1].set_title(\"Filtered\")\n    return ax, filtered_image", "compilation_passed": true, "time": 0.09518814086914062, "tests_passed": true, "error": null}
{"code": "if type(image) != np.ndarray:\n        raise TypeError\n    if sigma < 1:\n        raise ValueError\n    filtered_image = gaussian_filter(image, sigma)\n    ax = plt.subplots(ncols=2, figsize=(20, 5))[0]\n    ax[0].imshow(image, cmap='gray')\n    ax[1].imshow(filtered_image, cmap='gray')\n    ax[0].set_title('Original')\n    ax[1].set_title('Filtered')\n    return ax, filtered_image", "compilation_passed": true, "time": 0.017554283142089844, "tests_passed": false, "error": "TypeError"}
{"code": "if type(image) != np.ndarray:\n        raise TypeError(\"image should be a numpy array.\")\n\n    if sigma < 1:\n        raise ValueError(\"sigma must be a positive number.\")\n\n    ax = plt.subplots(1, 2)\n    ax[0].imshow(image)\n    filtered_image = gaussian_filter(image, sigma)\n    ax[1].imshow(filtered_image)\n    return ax, filtered_image", "compilation_passed": true, "time": 0.015801191329956055, "tests_passed": false, "error": "AttributeError"}
{"code": "# Checking that input is numpy array\n    if not isinstance(image, np.ndarray):\n        raise TypeError(\"Input must be a numpy array.\")\n\n    # Checking that sigma is positive\n    if sigma <= 0:\n        raise ValueError(\"sigma must be positive.\")\n\n    # Applying Gaussian filter\n    filtered_image = gaussian_filter(image, sigma)\n\n    # Setting up matplotlib figure, axes and subplots\n    fig, axes = plt.subplots(ncols=2)\n    axes[0].set_title('Original')\n    axes[1].set_title('Filtered')\n\n    # Plotting original image\n    axes[0].imshow(image)\n\n    # Plotting filtered image\n    axes[1].imshow(filtered_image)\n\n    # Returning plot\n    return (ax, filtered_image)", "compilation_passed": true, "time": 0.017792224884033203, "tests_passed": false, "error": "NameError"}
{"code": "if sigma <= 0:\n        raise ValueError(\"sigma must be non-negative.\")\n\n    if not isinstance(image, np.ndarray):\n        raise TypeError(\"Input must be a numpy array.\")\n\n    filtered_image = gaussian_filter(image, sigma)\n\n    fig, ax = plt.subplots(ncols=2)\n\n    ax[0].imshow(image, cmap=plt.cm.gray)\n    ax[0].set_title(\"Original\")\n    ax[0].axis(\"off\")\n\n    ax[1].imshow(filtered_image, cmap=plt.cm.gray)\n    ax[1].set_title(\"Filtered\")\n    ax[1].axis(\"off\")\n\n    fig.tight_layout()\n\n    return ax, filtered_image", "compilation_passed": true, "time": 0.16460895538330078, "tests_passed": true, "error": null}
{"code": "if sigma < 0:\n        raise ValueError(\"Sigma must be a positive number.\")\n    if not isinstance(image, np.ndarray):\n        raise TypeError(\"Input must be a numpy array.\")\n\n    # Apply the Gaussian filter on the image\n    filtered_image = gaussian_filter(image, sigma)\n\n    # Create a new axes object and plot the image\n    fig = plt.figure(figsize=(10, 5))\n    ax1 = plt.subplot(2, 1, 1, title=\"Original\")\n    ax1.imshow(image)\n\n    ax2 = plt.subplot(2, 1, 2, title=\"Filtered\")\n    ax2.imshow(filtered_image)\n\n    fig.show()\n\n    # Return the axes object and the filtered image\n    return (ax1, ax2), filtered_image", "compilation_passed": true, "time": 0.05878496170043945, "tests_passed": true, "error": null}
{"code": "if not isinstance(image, np.ndarray):\n        raise TypeError\n    elif sigma <= 0:\n        raise ValueError\n\n    filtered_image = gaussian_filter(image, sigma)\n    return filtered_image, ax", "compilation_passed": true, "time": 0.012077808380126953, "tests_passed": false, "error": "NameError"}
{"code": "ax = plt.subplots(1, 2, figsize=(10, 5))[1]\n    if np.shape(image)[0] == 1 and np.shape(image)[1] == 1:\n        plt.imshow(image, cmap=\"gray\")\n        ax[0].set_title(\"Original\")\n        filtered_image = gaussian_filter(image, sigma)\n        ax[1].set_title(\"Filtered\")\n        ax[1].imshow(filtered_image, cmap=\"gray\")\n    else:\n        raise ValueError(\"Image must be a grayscale image.\")\n    return ax, filtered_image", "compilation_passed": true, "time": 0.01720905303955078, "tests_passed": false, "error": "ValueError"}
{"code": "# TODO\n    if not isinstance(image, np.ndarray):\n        raise TypeError(\"Input must be a numpy array\")\n    if sigma <= 0:\n        raise ValueError(\"sigma must be positive\")\n\n    ax = plt.subplots()[1]\n    ax[0].set_title(\"Original\")\n    ax[1].set_title(\"Filtered\")\n\n    filtered_image = gaussian_filter(image, sigma)\n\n    ax[0].imshow(image, cmap=\"gray\")\n    ax[1].imshow(filtered_image, cmap=\"gray\")\n\n    return ax, filtered_image", "compilation_passed": true, "time": 0.01403188705444336, "tests_passed": false, "error": "TypeError"}
{"code": "if not np.issubdtype(image.dtype, np.number) or not np.issubdtype(image.dtype, np.integer):\n        raise TypeError(\"image is not an integer or floating-point array\")\n    if sigma <= 0:\n        raise ValueError(\"sigma must be a non-negative value\")\n\n    filtered_image = gaussian_filter(image, sigma=sigma)\n\n    ax = plt.subplots()\n    plt.subplots_adjust(wspace=0.3)\n    ax[0].imshow(image, cmap=\"gray\", interpolation='nearest')\n    ax[1].imshow(filtered_image, cmap=\"gray\", interpolation='nearest')\n    ax[0].set_title(\"Original\")\n    ax[1].set_title(\"Filtered\")\n    ax = ax[0]\n\n    return ax, filtered_image", "compilation_passed": true, "time": 0.2862050533294678, "tests_passed": false, "error": "AttributeError"}
{"code": "ax = plt.subplots()[0]\n    if isinstance(image, np.ndarray):\n        ax.imshow(image)\n        ax.set_title('Original')\n        filtered_image = gaussian_filter(image, sigma=sigma)\n        ax = plt.subplots()[0]\n        ax.imshow(filtered_image)\n        ax.set_title('Filtered')\n        return ax\n\n    else:\n        raise TypeError", "compilation_passed": true, "time": 0.0136260986328125, "tests_passed": false, "error": "AttributeError"}
{"code": "try:\n        if sigma <= 0:\n            raise ValueError('Sigma should be a positive number')\n        elif isinstance(image, np.ndarray):\n            return gaussian_filter(image, sigma), gaussian_filter(image, sigma), plt.show()\n        else:\n            raise TypeError('Invalid input')\n    except ValueError:\n        print('Sigma should be a positive number')\n    except TypeError:\n        print('Invalid input')", "compilation_passed": true, "time": 0.012390851974487305, "tests_passed": false, "error": "ValueError"}
{"code": "# Checking type of input image.\n    if not isinstance(image, np.ndarray):\n        raise TypeError\n\n    # Checking sigma is positive value\n    if sigma <= 0:\n        raise ValueError\n\n    # Creating filtered_image with Gaussian filter\n    filtered_image = gaussian_filter(image, sigma=sigma)\n\n    # Creating a matplotlib plot with original image and filtered image\n    fig, ax = plt.subplots(nrows=2, ncols=1, figsize=(15, 5))\n    ax[0].imshow(image, cmap='gray')\n    ax[1].imshow(filtered_image, cmap='gray')\n\n    return ax, filtered_image", "compilation_passed": true, "time": 0.09485292434692383, "tests_passed": true, "error": null}
{"code": "if not isinstance(image, np.ndarray):\n        raise TypeError(f\"Expected image to be a numpy array, got {type(image)}\")\n    if sigma <= 0:\n        raise ValueError(f\"sigma should be positive, got {sigma}\")\n\n    filtered_image = gaussian_filter(image, sigma=sigma, mode='reflect')\n    ax = plt.subplots(1, 2, figsize=(8,4), subplot_kw={'projection': None})[1]\n    ax[0].imshow(image, cmap='gray')\n    ax[0].set_title('Original')\n    ax[1].imshow(filtered_image, cmap='gray')\n    ax[1].set_title('Filtered')\n    return ax, filtered_image", "compilation_passed": true, "time": 0.0957040786743164, "tests_passed": true, "error": null}
{"code": "if not np.issubdtype(image.dtype, np.number):\n        raise TypeError(\"Only numpy array input is accepted, not {}\".format(type(image).__name__))\n    if sigma <= 0:\n        raise ValueError(\"sigma should be positive, not {}\".format(sigma))\n    filtered_image = gaussian_filter(image, sigma)\n    fig, ax = plt.subplots(1, 2, figsize=(6, 3.5))\n    ax[0].set_title('Original')\n    ax[1].set_title('Filtered')\n    ax[0].imshow(image)\n    ax[1].imshow(filtered_image)\n    return ax, filtered_image", "compilation_passed": true, "time": 0.048055171966552734, "tests_passed": false, "error": "AttributeError"}
