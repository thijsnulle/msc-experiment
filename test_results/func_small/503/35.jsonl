{"code": "np.random.seed(random_seed)\n    stock_prices = pd.DataFrame()\n    for stock_name in stock_names:\n        stock_prices[stock_name] = np.random.random((days_in_past))\n    return stock_prices", "compilation_passed": true, "time": 0.0016090869903564453, "tests_passed": false, "error": "AttributeError"}
{"code": "random_state = np.random.RandomState(random_seed)\n    df = pd.DataFrame()\n    for stock_name in stock_names:\n        stock = random_state.uniform()\n        stock_price_list = [stock]\n        for i in range(1, days_in_past + 1):\n            stock = random_state.uniform()\n            stock_price_list.append(stock)\n        df[stock_name] = stock_price_list\n    df = df.loc[pd.to_datetime(\"2024-03-30\", unit=\"s\") :]\n    return df", "compilation_passed": true, "time": 0.0024750232696533203, "tests_passed": false, "error": "ValueError"}
{"code": "np.random.seed(random_seed)\n    prices = np.random.rand(days_in_past, len(stock_names))\n\n    if isinstance(days_in_past, float):\n        days_in_past = int(days_in_past)\n\n    if isinstance(stock_names, (str, int)):\n        stock_names = [stock_names]\n\n    return pd.DataFrame(\n        data=prices, index=pd.date_range(datetime.now() - timedelta(days_in_past), periods=days_in_past),\n        columns=stock_names,\n    )", "compilation_passed": true, "time": 0.0011069774627685547, "tests_passed": false, "error": "NameError"}
{"code": "np.random.seed(random_seed)\n    df = pd.DataFrame()\n    for name in stock_names:\n        df[name] = np.random.rand(days_in_past)\n    return df", "compilation_passed": true, "time": 0.0014460086822509766, "tests_passed": false, "error": "AttributeError"}
{"code": "np.random.seed(random_seed)\n    return pd.DataFrame(\n        data=np.random.rand(days_in_past, len(stock_names)),\n        index=pd.date_range(datetime.now().date() - days_in_past, periods=days_in_past, freq=\"D\"),\n        columns=stock_names,\n    )", "compilation_passed": true, "time": 0.0010399818420410156, "tests_passed": false, "error": "TypeError"}
{"code": "np.random.seed(random_seed)\n\n    df = pd.DataFrame(columns=[\"Timestamp\"] + stock_names)\n\n    today = datetime.today()\n    yesterday = today - pd.Timedelta(days=days_in_past)\n    for stock_name in stock_names:\n        df.loc[0, stock_name] = np.random.rand()\n\n    df.loc[0, \"Timestamp\"] = yesterday\n    for i in range(days_in_past + 1):\n        for stock_name in stock_names:\n            df.loc[i, stock_name] = df.loc[i - 1, stock_name] + np.random.rand()\n\n    df.loc[days_in_past, \"Timestamp\"] = today\n\n    return df", "compilation_passed": true, "time": 0.0018489360809326172, "tests_passed": false, "error": "KeyError"}
{"code": "# Generate a seed if random_seed is None\n    seed = random_seed if random_seed is not None else np.random.randint(0, 2 ** 32 - 1)\n    # Create a random seed\n    np.random.seed(seed)\n\n    # Create a range of dates in the past\n    dates = np.arange(datetime(2019, 1, 1), datetime(2024, 12, 31), np.timedelta64(1, \"D\"))\n    # Get a random subset of dates from the range\n    dates = np.random.choice(dates, size=days_in_past)\n    # Create a random sample of prices for the selected stocks\n    prices = np.random.rand(len(dates), len(stock_names))\n\n    return pd.DataFrame(data=prices, index=pd.to_datetime(dates), columns=stock_names)", "compilation_passed": true, "time": 0.0013349056243896484, "tests_passed": true, "error": null}
{"code": "if days_in_past < 1:\n        raise ValueError(\"days_in_past must be positive\")\n    if len(stock_names) < 1:\n        raise ValueError(\"stock_names must not be empty\")\n    np.random.seed(random_seed)\n    dates = []\n    prices = []\n    for i in range(days_in_past + 1):\n        dates.append(datetime.today() - timedelta(days=i))\n    for _ in stock_names:\n        prices.append(np.random.rand(days_in_past + 1).tolist())\n    df = pd.DataFrame(prices, index=dates, columns=stock_names)\n    return df", "compilation_passed": true, "time": 0.0011029243469238281, "tests_passed": false, "error": "NameError"}
{"code": "if days_in_past < 0:\n        raise ValueError(\n            f\"days_in_past must be positive. Got {days_in_past}.\"\n        )\n\n    random_state = np.random.RandomState(random_seed)\n    return pd.DataFrame(\n        {stock_name: random_state.random_sample(days_in_past) * 10 for stock_name in stock_names},\n        index=pd.date_range(\n            start=\"2024-03-30\", end=datetime.now().strftime(\"%Y-%m-%d\"), periods=days_in_past\n        ),\n    )", "compilation_passed": true, "time": 0.001789093017578125, "tests_passed": true, "error": null}
{"code": "random_state = np.random.RandomState(random_seed)\n    now = datetime.now()\n    start = now - timedelta(days=days_in_past)\n\n    # create a dictionary of columns using the stock names\n    stock_data_dict = dict.fromkeys(stock_names)\n    # fill the dictionary with random values\n    for key, _ in stock_data_dict.items():\n        stock_data_dict[key] = random_state.random(days_in_past)\n\n    # convert the dictionary to a dataframe\n    df = pd.DataFrame(stock_data_dict)\n\n    # add column for day\n    df[\"day\"] = pd.date_range(start=start, periods=days_in_past, freq=\"D\")\n\n    # rename column to \"Date\"\n    df.columns = [\"Date\"]\n\n    # add column for stock name\n    df[\"Stock\"] = stock_names\n\n    # return df\n    return df", "compilation_passed": true, "time": 0.001199960708618164, "tests_passed": false, "error": "NameError"}
{"code": "# if days_in_past < 1:\n    #     raise ValueError(f\"days_in_past must be positive: got {days_in_past}\")\n\n    # if not stock_names:\n    #     raise ValueError(\"stock_names must not be empty\")\n\n    np.random.seed(random_seed)\n\n    start_date = datetime(2021, 10, 2)\n    end_date = datetime.now()\n\n    df = pd.DataFrame(\n        {\"day\": pd.date_range(start_date, end_date, freq=f\"D\").tolist()}\n    )\n\n    for name in stock_names:\n        prices = np.random.random([days_in_past])\n        df[name] = prices\n\n    return df", "compilation_passed": true, "time": 0.003915071487426758, "tests_passed": false, "error": "ValueError"}
{"code": "# Check if days_in_past is positive\n    if days_in_past <= 0:\n        raise ValueError(\"days_in_past must be a positive integer.\")\n\n    # Check that stock names is not empty\n    if not stock_names:\n        raise ValueError(\"stock_names must not be empty.\")\n\n    # Seed the random number generator with the given random_seed value\n    random_state = np.random.RandomState(random_seed)\n\n    # Create a list of days in the past by subtracting days_in_past from the current date\n    today = datetime.today()\n    days_list = [today - timedelta(days=days_in_past)]\n    days = [\n        days_list[i]\n        .strftime(\"%Y-%m-%d\")\n        for i in range(days_in_past)\n    ]\n    print(days)\n    # Create a list of random prices for each stock for each day\n    prices_list = [\n        [random_state.rand() for _ in range(len(stock_names))", "compilation_passed": false, "time": 0.00021982192993164062, "tests_passed": false, "error": "SyntaxError"}
{"code": "# check types\n    if not isinstance(random_seed, int) and random_seed >= 0:\n        raise ValueError(\n            \"random_seed must be an integer >= 0, but got: {}\".format(random_seed)\n        )\n\n    # check length\n    if len(stock_names) < 1:\n        raise ValueError(\n            \"stock_names must not be empty, but got: {}\".format(stock_names)\n        )\n\n    if not isinstance(days_in_past, int) and days_in_past > 0:\n        raise ValueError(\n            \"days_in_past must be an integer > 0, but got: {}\".format(days_in_past)\n        )\n\n    # create numpy arrays of random stock prices\n    stock_prices = np.random.rand(5, days_in_past)\n    stock_prices_df = pd.DataFrame(stock_prices, columns=stock_names)\n    stock_prices_df.index = [datetime.now() - timedelta(days=i) for i in", "compilation_passed": false, "time": 0.00020503997802734375, "tests_passed": false, "error": "SyntaxError"}
{"code": "np.random.seed(random_seed)\n    # Create a DataFrame of stock prices with the specified number of rows and columns.\n    data = [\n        np.random.random((days_in_past, len(stock_names))) * 100\n        for _ in stock_names\n    ]\n    # Stack the data along the rows and convert the resulting array to a DataFrame.\n    df = pd.concat(data, axis=1).stack(\"stocks\")\n    # Convert the resulting DataFrame to a Series and assign the values to the index.\n    df.index = pd.RangeIndex(start=0, stop=days_in_past * len(stock_names), step=1)\n    return df", "compilation_passed": true, "time": 0.0011670589447021484, "tests_passed": false, "error": "TypeError"}
{"code": "if days_in_past < 0 or len(stock_names) == 0:\n        raise ValueError(\"days_in_past must be a positive integer, stock_names cannot be empty\")\n\n    np.random.seed(random_seed)\n\n    start_date = datetime.now() - timedelta(days=days_in_past)\n    end_date = start_date + timedelta(days=1)\n\n    # create a pandas date range\n    dates = pd.date_range(start_date, end_date, freq=\"1D\")\n\n    stocks = {stock: np.random.uniform(0, 1, len(dates)) for stock in stock_names}\n\n    # create a pandas DataFrame\n    return pd.DataFrame(stocks, index=dates)", "compilation_passed": true, "time": 0.0010852813720703125, "tests_passed": false, "error": "NameError"}
{"code": "np.random.seed(random_seed)\n    start = datetime.now()\n    start = datetime(2023, 1, 30)\n    start = start - timedelta(days_in_past)\n    end = datetime.now()\n    end = datetime(2023, 5, 15)\n    df = pd.DataFrame(\n        {\n            \"stock\": stock_names,\n            \"price\": np.random.random(days_in_past),\n            \"date\": pd.date_range(start, end),\n        }\n    )\n    return df.set_index(\"date\")", "compilation_passed": true, "time": 0.0010471343994140625, "tests_passed": false, "error": "NameError"}
{"code": "np.random.seed(random_seed)\n\n    dt = datetime.today().replace(minute=0, second=0, microsecond=0)\n\n    dates = []\n    for _ in range(days_in_past):\n        dates.append(dt)\n        dt = dt - pd.Timedelta(\"1 days\")\n\n    prices = np.random.random((days_in_past, len(stock_names)))\n    data = pd.DataFrame(\n        prices,\n        index=pd.DatetimeIndex(dates),\n        columns=stock_names,\n    )\n\n    return data", "compilation_passed": true, "time": 0.0012230873107910156, "tests_passed": true, "error": null}
{"code": "random.seed(random_seed)\n    dates = [datetime(2024, 3, 1) + timedelta(days=d) for d in range(days_in_past)]\n    prices = [(random.random() / 2) for _ in range(days_in_past)]\n    stock_prices = pd.DataFrame(dict(date=dates, price=prices))\n    stock_prices.set_index(\"date\", inplace=True, drop=True)\n    stock_prices = stock_prices.sort_index()\n    stock_prices = stock_prices.apply(lambda x: round(x, 4))\n    stock_prices[stock_names] = stock_prices[stock_names]\n    return stock_prices", "compilation_passed": true, "time": 0.0011310577392578125, "tests_passed": false, "error": "NameError"}
{"code": "# Your code should produce a DataFrame that is 5 rows and 6 columns with random numbers (floats)\n    # between 0 and 1, inclusive, and all elements are non-negative.\n    np.random.seed(random_seed)\n    # print(\"random seed is\", random_seed)\n    # print(\"days in past\", days_in_past)\n\n    # We need to get datetime for today\n    today = datetime.now()\n    # We need to get date for 7 days ago\n    # 2023-06-23\n    yesterday = today.date() - timedelta(days=days_in_past)\n    print(\"yesterday is\", yesterday)\n\n    stock_df = pd.DataFrame()\n    for stock_name in stock_names:\n        # print(\"stock_name\", stock_name)\n        # print(\"today.date()\", today.date())\n\n        # Create random prices in range [0,1]\n        random_prices = np.random.random(days_in_past)\n        #", "compilation_passed": true, "time": 0.0011391639709472656, "tests_passed": false, "error": "NameError"}
{"code": "# TODO: check if days_in_past >= 0\n    # TODO: check if len(stock_names) > 0\n\n    np.random.seed(random_seed)\n    return pd.DataFrame(\n        {\n            stock_name: 100 + 40 * np.random.randn()\n            for stock_name in stock_names\n        }\n    ).loc[\n        pd.date_range(\n            datetime.now() - timedelta(days=days_in_past),\n            datetime.now() - timedelta(days=0),\n        )\n    )", "compilation_passed": false, "time": 7.081031799316406e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "np.random.seed(random_seed)\n    stocks_df = pd.DataFrame()\n    for name in stock_names:\n        stocks_df[name] = np.random.uniform(0, 1, days_in_past)\n    return stocks_df", "compilation_passed": true, "time": 0.18122601509094238, "tests_passed": false, "error": "AttributeError"}
{"code": "random.seed(random_seed)\n    df = pd.DataFrame(\n        np.random.randn(days_in_past * len(stock_names), 2),\n        columns=[\"AAPL\", \"GOOGL\", \"MSFT\", \"AMZN\", \"FB\"],\n    )\n    df[stock_names] = df[stock_names].round(2)\n    return df", "compilation_passed": true, "time": 0.0010821819305419922, "tests_passed": false, "error": "NameError"}
{"code": "if not isinstance(days_in_past, int) or days_in_past < 0:\n        raise ValueError(\"days_in_past must be a positive integer.\")\n    if not stock_names or not isinstance(stock_names, list):\n        raise ValueError(\"stock_names must be a non-empty list of strings.\")\n    stock_names = [stock_name.upper() for stock_name in stock_names]\n    df = pd.DataFrame(\n        {stock_name: (np.random.random(days_in_past) * 100) for stock_name in stock_names}\n    )\n    df.index = [datetime.now() - datetime.timedelta(days=i + 1) for i in range(days_in_past)]\n    np.random.seed(random_seed)\n    return df", "compilation_passed": true, "time": 0.0012021064758300781, "tests_passed": false, "error": "AttributeError"}
{"code": "random_seed = int(random_seed)\n    np.random.seed(random_seed)\n    df = pd.DataFrame()\n    today = datetime.today()\n    for name in stock_names:\n        prices = np.random.uniform(10, 30, days_in_past)\n        date_range = pd.date_range(today, periods=days_in_past, freq='D')\n        df[name] = prices\n        df.index = date_range\n    return df", "compilation_passed": true, "time": 0.0019390583038330078, "tests_passed": true, "error": null}
{"code": "np.random.seed(random_seed)\n\n    # 1. Get today's date\n    today = datetime.today()\n\n    # 2. Get a date that is days_in_past days before today's date\n    past_date = today - datetime.timedelta(days=days_in_past)\n\n    # 3. Convert the date to a string format\n    date_str = past_date.strftime(\"%Y-%m-%d\")\n\n    # 4. Create a dictionary of stock names and prices\n    stock_prices_dict = {stock_name: np.random.random() for stock_name in stock_names}\n\n    # 5. Use the date as a key for the price dictionary and the random prices as the value\n    stock_prices_dict[date_str] = random_prices\n\n    # 6. Convert the dictionary into a pandas DataFrame\n    stock_data_df = pd.DataFrame(stock_prices_dict, index=[date_str])\n\n    # 7. Sort the DataFrame by the index\n    stock_data", "compilation_passed": true, "time": 0.0010800361633300781, "tests_passed": false, "error": "AttributeError"}
{"code": "np.random.seed(random_seed)\n\n    # Generate random prices for the specified number of days\n    prices = np.random.uniform(0, 1, size=(days_in_past, len(stock_names)))\n    return pd.DataFrame(prices, columns=stock_names)", "compilation_passed": true, "time": 0.0010790824890136719, "tests_passed": false, "error": "AttributeError"}
{"code": "random.seed(random_seed)\n\n    if days_in_past < 1:\n        raise ValueError(\"Number of days must be positive.\")\n\n    if not stock_names:\n        raise ValueError(\"Stock names must not be empty.\")\n\n    stock_prices = []\n    start_date = datetime.today() - timedelta(days=days_in_past)\n\n    for stock_name in stock_names:\n        price = random.random()\n        stock_prices.append((stock_name, price))\n\n    df = pd.DataFrame(stock_prices, columns=[\"Symbol\", \"Price\"])\n    df.set_index(\"Symbol\", inplace=True)\n    df.Price = df.Price.round(5)\n    df.Price = np.clip(df.Price, 0.0, 1.0)\n    return df", "compilation_passed": true, "time": 0.001085042953491211, "tests_passed": false, "error": "NameError"}
{"code": "np.random.seed(random_seed)\n    days = pd.date_range(datetime(2022, 3, 30), periods=days_in_past, freq=\"D\")\n    stocks = pd.DataFrame(\n        np.random.randint(0, 100, (len(days), len(stock_names))),\n        index=days,\n        columns=stock_names,\n    )\n\n    return stocks", "compilation_passed": true, "time": 0.0011568069458007812, "tests_passed": true, "error": null}
{"code": "rng = np.random.default_rng(random_seed)\n    # Check that stock_names is not empty\n    if not stock_names:\n        raise ValueError(\"stock_names cannot be empty\")\n    # Check that days_in_past is positive\n    if days_in_past < 0:\n        raise ValueError(\"days_in_past must be positive\")\n\n    # Generate a date range for the specified number of days in the past\n    date_range = pd.date_range(\n        datetime.today() - timedelta(days=days_in_past), datetime.today() - timedelta(days=1)\n    )\n\n    # Create a column for each stock name and fill it with random prices\n    stock_prices = []\n    for stock_name in stock_names:\n        stock_prices.append(rng.random(date_range.shape[0]))\n    stock_prices = np.stack(stock_prices).T\n    df = pd.DataFrame(\n        stock_prices, index=date_range, columns=stock_names", "compilation_passed": false, "time": 0.00023484230041503906, "tests_passed": false, "error": "SyntaxError"}
{"code": "random.seed(random_seed)\n    today = datetime.today()\n    start_date = today - pd.Timedelta(days_in_past)\n    index = pd.date_range(start_date, periods=days_in_past)\n    data = []\n    for name in stock_names:\n        data.append(np.random.uniform(0.0, 1.0, size=days_in_past))\n    return pd.DataFrame(data, index=index, columns=stock_names)", "compilation_passed": true, "time": 0.0010340213775634766, "tests_passed": false, "error": "NameError"}
