{"code": "data = pd.DataFrame(data, columns=['Hours', 'Scores'])\n    data = data.astype({'Hours': 'int32', 'Scores': 'int32'})\n    model = LinearRegression()\n    X = data['Hours'].to_numpy().reshape(-1, 1)\n    y = data['Scores'].to_numpy().reshape(-1, 1)\n    X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42, test_size=0.2)\n    model.fit(X_train, y_train)\n    return np.mean((model.predict(X_test)-y_test)**2)", "compilation_passed": true, "time": 0.00704193115234375, "tests_passed": true, "error": null}
{"code": "# Your code here\n\n    # Convert the data to DataFrame and drop missing values\n    df = pd.DataFrame(data)\n    df.dropna(inplace=True)\n\n    # Split the data into training and test sets\n    X_train, X_test, y_train, y_test = train_test_split(df['Hours'], df['Scores'], test_size=0.2, random_state=42)\n\n    # Train a linear regression model\n    model = LinearRegression()\n    model.fit(X_train, y_train)\n\n    # Make predictions based on test set\n    y_pred = model.predict(X_test)\n\n    # Calculate the mean squared error\n    mse = np.mean((y_test - y_pred) ** 2)\n\n    return mse", "compilation_passed": true, "time": 0.002481698989868164, "tests_passed": false, "error": "ValueError"}
{"code": "# Your code\n\n    # The code should not contain the \"\"\", '<>', '[', ']', '(', ')', '{', '}', ',' or '=' characters\n    # The code should not use the assert, and it should not call any external libraries or APIs\n    # You must use the provided pandas library for data preprocessing and analysis\n    # You must use the provided sklearn.model_selection.train_test_split for splitting the data\n    # You must use the provided sklearn.linear_model.LinearRegression for creating the model and evaluating it\n    # You must use the provided numpy library for creating arrays, creating functions and performing math operations\n\n    # The code should not contain the \"\"\", '<>', '[', ']', '(', ')', '{', '}', ',' or '=' characters\n    # The code should not use the assert, and it should not call any external libraries or APIs\n    # You must use the provided pandas library for data preprocessing and analysis\n    # You must use the provided sklearn.model_selection.train_test_split for splitting the data\n    #", "compilation_passed": true, "time": 0.0008649826049804688, "tests_passed": true, "error": null}
{"code": "x = np.array(data['Hours']).reshape((-1,1))\n    y = np.array(data['Scores'])\n    train, test = train_test_split(x, y, test_size = 0.2, random_state = 42, shuffle = True)\n    lr = LinearRegression()\n    lr.fit(train,test)\n    error = np.mean((lr.predict(x) - y) ** 2)\n    return error", "compilation_passed": true, "time": 0.0015501976013183594, "tests_passed": false, "error": "ValueError"}
{"code": "# TODO\n    X = np.asarray(data['Hours'], dtype=np.float)\n    y = np.asarray(data['Scores'], dtype=np.float)\n    X_train, X_test, y_train, y_test = train_test_split(\n        X, y, test_size=0.2, random_state=42)\n    model = LinearRegression()\n    model.fit(X_train, y_train)\n    y_pred = model.predict(X_test)\n    error = np.mean((y_test - y_pred) ** 2)\n\n    return error", "compilation_passed": true, "time": 0.0010020732879638672, "tests_passed": false, "error": "    https"}
{"code": "df = pd.DataFrame({'Hours': data['Hours'], 'Scores': data['Scores']})\n    X = df.Hours.values.reshape(-1, 1)\n    y = df.Scores.values\n\n    X_train, X_test, y_train, y_test = train_test_split(\n        X, y, test_size=0.2, random_state=42)\n    model = LinearRegression().fit(X_train, y_train)\n    return mean_squared_error(model.predict(X_test), y_test)", "compilation_passed": true, "time": 0.0018689632415771484, "tests_passed": false, "error": "NameError"}
{"code": "x_data = data['Hours']\n    y_data = data['Scores']\n\n    # Split the data into train and test sets\n    x_train, x_test, y_train, y_test = train_test_split(x_data, y_data, test_size=0.2, random_state=42)\n\n    # Train the linear regression model\n    model = LinearRegression()\n    model.fit(x_train.reshape(-1, 1), y_train)\n\n    # Evaluate the model\n    y_pred = model.predict(x_test.reshape(-1, 1))\n    mean_squared_error = np.mean((y_test - y_pred) ** 2)\n\n    return mean_squared_error", "compilation_passed": true, "time": 0.0015690326690673828, "tests_passed": false, "error": "AttributeError"}
{"code": "# Your code here\n    hours = np.array(data['Hours'],dtype=int)\n    scores = np.array(data['Scores'],dtype=int)\n\n    X,y = train_test_split(hours,scores,random_state=42,test_size=0.2)\n\n    model = LinearRegression().fit(X.reshape(-1,1),y)\n\n    pred_scores = model.predict(X.reshape(-1,1))\n\n    err_scores = (y-pred_scores)**2\n    mse = np.mean(err_scores)\n\n    return mse", "compilation_passed": true, "time": 0.0015087127685546875, "tests_passed": false, "error": "ValueError"}
{"code": "hours = data['Hours']\n    scores = data['Scores']\n\n    X = np.array([hours]).T\n    y = np.array([scores]).T\n\n    model = LinearRegression()\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n    model.fit(X_train, y_train)\n\n    y_pred = model.predict(X_test)\n\n    mse = np.mean((y_pred - y_test) ** 2)\n\n    return mse", "compilation_passed": true, "time": 0.007915973663330078, "tests_passed": true, "error": null}
{"code": "data['Hours'] = pd.DataFrame(data['Hours'])\n    data['Scores'] = pd.DataFrame(data['Scores'])\n    X_train, X_test, y_train, y_test = train_test_split(\n        data['Hours'], data['Scores'], test_size=0.2, random_state=42)\n\n    model = LinearRegression()\n    model.fit(X_train, y_train)\n    y_pred = model.predict(X_test)\n    mse = np.mean((y_pred - y_test) ** 2)\n    return mse", "compilation_passed": true, "time": 0.002975940704345703, "tests_passed": false, "error": "ValueError"}
{"code": "hours = pd.Series(data['Hours'],name='Hours')\n    scores = pd.Series(data['Scores'],name='Scores')\n    X = [hours, scores]\n    Y = scores\n\n    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2)\n\n    linear_model = LinearRegression()\n\n    linear_model.fit(X_train, Y_train)\n\n    y_pred = linear_model.predict(X_test)\n\n    mean_squared_error = np.mean((y_pred - Y_test) ** 2)\n\n    return mean_squared_error", "compilation_passed": true, "time": 0.003380298614501953, "tests_passed": false, "error": "ValueError"}
{"code": "# YOUR CODE GOES HERE\n\n    # data = {'Hours': [10, 20, 40], 'Scores': [90, 80, 70]}\n    x = data['Hours']\n    y = data['Scores']\n    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)\n\n    model = LinearRegression()\n    model.fit(x_train.reshape(-1, 1), y_train)\n\n    y_pred = model.predict(x_test.reshape(-1, 1))\n    return np.mean((y_pred-y_test)**2)", "compilation_passed": true, "time": 0.0015039443969726562, "tests_passed": false, "error": "AttributeError"}
{"code": "Hours = data['Hours']\n    Scores = data['Scores']\n\n    # Divide the data into train and test sets based on the specified random state\n    X_train, X_test, y_train, y_test = train_test_split(\n        Hours, Scores, test_size=0.2, random_state=42)\n\n    # Create a linear regression model\n    model = LinearRegression()\n\n    # Fit the model\n    model.fit(X_train, y_train)\n\n    # Predict the scores for the test data\n    y_pred = model.predict(X_test)\n\n    # Calculate the mean square error\n    mean_squared_error = np.mean((y_test - y_pred) ** 2)\n\n    # Return the mean square error\n    return mean_squared_error", "compilation_passed": true, "time": 0.0018630027770996094, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}
{"code": "data_x = pd.DataFrame(data)\n    train_x, test_x, train_y, test_y = train_test_split(data_x[\"Hours\"],\n                                                        data_x[\"Scores\"],\n                                                        test_size=0.2,\n                                                        random_state=42)\n\n    lr = LinearRegression()\n    lr.fit(train_x.to_numpy().reshape(-1, 1), train_y.to_numpy())\n\n    y_pred = lr.predict(test_x.to_numpy().reshape(-1, 1))\n\n    mean_squared_error = np.mean((test_y.to_numpy()-y_pred)**2)\n\n    return mean_squared_error", "compilation_passed": true, "time": 0.008634090423583984, "tests_passed": true, "error": null}
{"code": "model = LinearRegression()\n    X = data[\"Hours\"]\n    y = data[\"Scores\"]\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n    model.fit(X_train, y_train)\n    y_pred = model.predict(X_test)\n    mean_squared_error = np.mean((y_test - y_pred)**2)\n\n    return mean_squared_error", "compilation_passed": true, "time": 0.0018129348754882812, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}
{"code": "# Split the data into train and test sets\n    hours, scores = data['Hours'], data['Scores']\n    x_train, x_test, y_train, y_test = train_test_split(hours, scores, test_size=0.2, random_state=42)\n\n    # Train the linear regression model\n    model = LinearRegression()\n    model.fit(x_train.reshape(-1, 1), y_train)\n\n    # Evaluate the model\n    predicted_scores = model.predict(x_test.reshape(-1, 1))\n    mean_squared_error = np.mean((predicted_scores - y_test) ** 2)\n\n    return mean_squared_error", "compilation_passed": true, "time": 0.0014789104461669922, "tests_passed": false, "error": "AttributeError"}
{"code": "x = pd.DataFrame(data, columns=['Hours'])\n    y = pd.DataFrame(data, columns=['Scores'])\n    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)\n    lm = LinearRegression()\n    lm.fit(x_train, y_train)\n    y_pred = lm.predict(x_test)\n    score = mean_squared_error(y_test, y_pred)\n    return score", "compilation_passed": true, "time": 0.0034759044647216797, "tests_passed": false, "error": "NameError"}
{"code": "# Divide the data into train and test sets\n    X_train, X_test, y_train, y_test = train_test_split(data['Hours'], data['Scores'],\n                                                    train_size=0.42, test_size=0.2,\n                                                    random_state=42)\n\n    # Create linear regression model\n    model = LinearRegression()\n\n    # Fit the model to the train data\n    model.fit(X_train, y_train)\n\n    # Evaluate the model by predicting scores using the test data\n    y_pred = model.predict(X_test)\n\n    # Calculate the mean square error between actual and predicted scores\n    mean_squared_error = np.mean((y_test - y_pred) ** 2)\n\n    return mean_squared_error", "compilation_passed": true, "time": 0.0014841556549072266, "tests_passed": false, "error": "ValueError"}
{"code": "X = np.asarray(data['Hours'])\n    y = np.asarray(data['Scores'])\n\n    X_train, X_test, y_train, y_test = train_test_split(\n        X, y, test_size=0.2, random_state=42)\n\n    model = LinearRegression()\n    model.fit(X_train, y_train)\n\n    y_pred = model.predict(X_test)\n    mse = np.mean((y_test - y_pred) ** 2)\n\n    return mse", "compilation_passed": true, "time": 0.0017969608306884766, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}
{"code": "data['Hours'] = pd.to_numeric(data['Hours'])\n\n    df = pd.DataFrame(data)\n\n    X = df['Hours'].values.reshape(-1,1)\n    y = df['Scores'].values\n\n    X_train, X_test, y_train, y_test = train_test_split(X,y,test_size=0.2,random_state=42)\n\n    reg = LinearRegression()\n\n    reg.fit(X_train,y_train)\n\n    y_pred = reg.predict(X_test)\n    y_pred = y_pred.flatten()\n    y_test = y_test.flatten()\n\n    mean_squared_error = np.mean((y_test - y_pred)**2)\n\n    return mean_squared_error", "compilation_passed": true, "time": 0.008336067199707031, "tests_passed": true, "error": null}
{"code": "X = data['Hours'].reshape(-1,1)\n    y = data['Scores']\n\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n    model = LinearRegression().fit(X_train, y_train)\n\n    y_pred = model.predict(X_test)\n\n    mse = np.mean((y_test - y_pred)**2)\n    return mse", "compilation_passed": true, "time": 0.0009529590606689453, "tests_passed": false, "error": "AttributeError"}
{"code": "Hours = np.array(list(data.get('Hours', [])))\n    Scores = np.array(list(data.get('Scores', [])))\n    x_train, x_test, y_train, y_test = train_test_split(Hours, Scores, test_size=0.2, random_state=42)\n    model = LinearRegression()\n    model.fit(x_train.reshape(-1, 1), y_train.reshape(-1, 1))\n    predicted_scores = model.predict(x_test.reshape(-1, 1))\n    return (predicted_scores - y_test).mean()", "compilation_passed": true, "time": 0.003053903579711914, "tests_passed": true, "error": null}
{"code": "X = np.array(list(data['Hours'])).reshape(-1, 1)\n    y = np.array(list(data['Scores']))\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n    model = LinearRegression().fit(X_train, y_train)\n    predicted_scores = model.predict(X_test)\n    return np.mean((predicted_scores - y_test) ** 2)", "compilation_passed": true, "time": 0.007831096649169922, "tests_passed": true, "error": null}
{"code": "x = data['Hours'].reshape(-1, 1)\n    y = data['Scores']\n\n    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)\n\n    model = LinearRegression()\n    model.fit(x_train, y_train)\n    predicted = model.predict(x_test)\n\n    mean_squared_error = np.mean((predicted - y_test) ** 2)\n    return mean_squared_error", "compilation_passed": true, "time": 0.0009870529174804688, "tests_passed": false, "error": "AttributeError"}
{"code": "df = pd.DataFrame(data)\n    # 42,0.2\n    train, test = train_test_split(df, test_size=0.2, random_state=42)\n    model = LinearRegression()\n    model.fit(train[['Hours']], train['Scores'])\n    # \u5e73\u5747\u5e73\u65b9\u8bef\u5dee\n    return np.mean((model.predict(test[['Hours']]) - test['Scores']) ** 2)", "compilation_passed": true, "time": 0.011745929718017578, "tests_passed": true, "error": null}
{"code": "hours = np.array(data[\"Hours\"])\n    scores = np.array(data[\"Scores\"])\n    X, y = np.array(data[\"Hours\"]), np.array(data[\"Scores\"])\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n    reg = LinearRegression().fit(X_train.reshape(-1, 1), y_train)\n    y_pred = reg.predict(X_test.reshape(-1, 1))\n\n    mean_sq_error = np.mean((y_pred - y_test) ** 2)\n    return float(mean_sq_error)", "compilation_passed": true, "time": 0.007843017578125, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(data)\n\n    X = df[['Hours']]\n    y = df[['Scores']]\n\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n\n    model = LinearRegression()\n    model.fit(X_train, y_train)\n\n    y_pred = model.predict(X_test)\n\n    mse = np.mean((y_test - y_pred) ** 2)\n\n    return mse", "compilation_passed": true, "time": 0.012824773788452148, "tests_passed": true, "error": null}
{"code": "Hours=data['Hours']\n    Scores=data['Scores']\n\n    train_x,test_x,train_y,test_y = train_test_split(Hours,Scores,random_state=42,test_size=0.2)\n\n    model = LinearRegression()\n\n    model.fit(train_x.reshape(-1,1),train_y.reshape(-1,1))\n    predicted_values = model.predict(test_x.reshape(-1,1))\n\n    print(model.score(test_x.reshape(-1,1),test_y.reshape(-1,1)))\n    print(mean_squared_error(test_y.reshape(-1,1),predicted_values.reshape(-1,1)))\n    # return np.mean(mean_squared_error(test_y,predicted_values))\n    return np.mean(mean_squared_error(test_y.reshape(-1,1),predicted_values.reshape(-1,1)))", "compilation_passed": true, "time": 0.0015797615051269531, "tests_passed": false, "error": "AttributeError"}
{"code": "X = np.array(data['Hours']).reshape(-1, 1)\n    y = np.array(data['Scores'])\n    X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42, test_size=0.2)\n    regression = LinearRegression()\n    regression.fit(X_train, y_train)\n    y_pred = regression.predict(X_test)\n    mse = np.mean((y_test - y_pred)**2)\n    return mse", "compilation_passed": true, "time": 0.007704019546508789, "tests_passed": true, "error": null}
{"code": "# split data into train and test sets\n    X = data['Hours']\n    y = data['Scores']\n    train_X, test_X, train_y, test_y = train_test_split(X, y, test_size=0.2, random_state=42)\n    # train model\n    model = LinearRegression()\n    model.fit(train_X.reshape(-1,1), train_y)\n    # evaluate model\n    y_pred = model.predict(test_X.reshape(-1, 1))\n    mean_squared_error = np.mean((test_y - y_pred)**2)\n    return mean_squared_error", "compilation_passed": true, "time": 0.0015130043029785156, "tests_passed": false, "error": "AttributeError"}
