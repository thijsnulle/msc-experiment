{"code": "# Create a DataFrame with NUM_SAMPLES rows and 2 columns\n    df = pd.DataFrame({'String Field': ['' for _ in range(NUM_SAMPLES)],\n                       'Float Field': [0.0 for _ in range(NUM_SAMPLES)]})\n\n    # Randomly generate strings for the String Field column\n    df['String Field'] = [''.join(random.choice(string.ascii_lowercase)\n                                 for _ in range(10))\n                         for _ in range(NUM_SAMPLES)]\n\n    # Randomly generate floating-point numbers between 0 and 10000\n    df['Float Field'] = np.random.uniform(0, 10000, NUM_SAMPLES)\n\n    # Format the Float Field column using the round() function with 2 digits\n    # and comma as the thousands separator\n    df['Float Field'] = df['Float Field'].map(lambda x: f\"{round(x, 2):,}\")\n\n    return df", "compilation_passed": true, "time": 0.017188072204589844, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame()\n    df[\"String Field\"] = string.ascii_uppercase[:10] + string.ascii_uppercase[:10]\n    df[\"Float Field\"] = (10000 * np.random.rand(1000)).astype(float).map(lambda x: \"{:.2f},{:.2f}\".format(x, (x/1000)%10))\n    return df", "compilation_passed": true, "time": 0.001039743423461914, "tests_passed": false, "error": "AttributeError"}
{"code": "# Generate strings of random letters in the range 'a' to 'z' (ASCII 97 - 122)\n    strings = [\"\".join([random.choice(string.ascii_lowercase) for _ in range(10)]) for _ in range(NUM_SAMPLES)]\n\n    # Generate random floats between 0 and 1, formatted with 2 decimal places\n    floats = [\"{:.2f}\".format(random.random() * 10000) for _ in range(NUM_SAMPLES)]\n\n    # Combine the strings and floats into a DataFrame\n    dataset = pd.DataFrame({'String Field': strings, 'Float Field': floats})\n\n    return dataset", "compilation_passed": true, "time": 0.013314008712768555, "tests_passed": true, "error": null}
{"code": "random.seed(0)\n    np.random.seed(0)\n    string_chars = string.ascii_uppercase + string.ascii_lowercase + string.digits\n\n    df = pd.DataFrame({\n        'String Field': [''.join(random.choice(string_chars) for _ in range(10)) for _ in range(NUM_SAMPLES)],\n        'Float Field': [format(random.uniform(0, 10000), ',.2f') for _ in range(NUM_SAMPLES)],\n    })\n\n    return df", "compilation_passed": true, "time": 0.014477968215942383, "tests_passed": true, "error": null}
{"code": "# Create a random string of length 10\n    random_string = ''.join(random.choice(string.ascii_letters) for _ in range(10))\n\n    # Generate a random float between 0 and 10000\n    random_float = np.random.rand() * 10000\n\n    # Format the random float as a string with two decimal places and comma as thousands separator\n    formatted_float = \"{:,.2f}\".format(random_float)\n\n    # Combine the random string and formatted float to create a row in the DataFrame\n    row = [random_string, formatted_float]\n\n    # Repeat the above process NUM_SAMPLES times to create a DataFrame\n    df = pd.DataFrame([row] * NUM_SAMPLES)\n\n    # Set the index to the column number 'String Field'\n    df.set_index('String Field', inplace=True)\n\n    return df", "compilation_passed": true, "time": 0.0009999275207519531, "tests_passed": false, "error": "KeyError"}
{"code": "# Generate strings\n    strings = [\n        \"\".join(random.choices(string.ascii_lowercase, k=10)) for _ in range(NUM_SAMPLES)\n    ]\n\n    # Generate floats\n    floats = [\n        \"{:,.2f}\".format(random.uniform(0, 10000))\n        for _ in range(NUM_SAMPLES)\n    ]\n\n    return pd.DataFrame({\"String Field\": strings, \"Float Field\": floats})", "compilation_passed": true, "time": 0.008769035339355469, "tests_passed": true, "error": null}
{"code": "# Generate the dataset\n    df = pd.DataFrame()\n    string_field = []\n    float_field = []\n    for _ in range(NUM_SAMPLES):\n        # Generate a random string\n        string_field.append(''.join(random.choices(string.ascii_letters, k=10)))\n\n        # Generate a random float between 0 and 10000, formatted with 2 decimals\n        float_field.append('{:.2f}'.format(random.uniform(0, 10000)))\n\n    df['String Field'] = string_field\n    df['Float Field'] = float_field\n\n    return df", "compilation_passed": true, "time": 0.010022163391113281, "tests_passed": true, "error": null}
{"code": "random.seed(0)\n    np.random.seed(0)\n    data = []\n    letters = string.ascii_lowercase\n\n    for i in range(NUM_SAMPLES):\n        random_string = ''.join(random.choices(letters, k=10))\n        float_value = round(random.random() * 10000, 2)\n        float_value = f\"{float_value:,.2f}\"  # Format with a comma and 2 decimal places\n\n        data.append([random_string, float_value])\n\n    df = pd.DataFrame(data, columns=['String Field', 'Float Field'])\n\n    return df", "compilation_passed": true, "time": 0.010138750076293945, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(columns=['String Field', 'Float Field'])\n    for _ in range(NUM_SAMPLES):\n        random_string = ''.join(random.choices(string.ascii_uppercase, k=10))\n        random_float = '{:.2f}'.format(random.randint(0, 10000))\n        df.loc[_] = [random_string, random_float]\n    return df", "compilation_passed": true, "time": 1.0020928382873535, "tests_passed": false, "error": "TimeoutError"}
{"code": "return pd.DataFrame({'String Field': np.random.choice(string.ascii_letters, size=NUM_SAMPLES),\n                         'Float Field': np.random.uniform(0, 10000, size=NUM_SAMPLES)})", "compilation_passed": true, "time": 0.0007870197296142578, "tests_passed": false, "error": "ValueError"}
{"code": "# Generate random strings of 10 ASCII letters\n    strings = [''.join(random.sample(string.ascii_letters, 10)) for _ in range(NUM_SAMPLES)]\n\n    # Generate random numbers between 0 and 10000\n    floats = [\n        \"{:,.2f}\".format(random.uniform(0, 10000))\n        for _ in range(NUM_SAMPLES)\n    ]\n\n    # Create a pandas DataFrame\n    data = pd.DataFrame(\n        {'String Field': strings, 'Float Field': floats}, index=range(NUM_SAMPLES)\n    )\n\n    return data", "compilation_passed": true, "time": 0.015130996704101562, "tests_passed": true, "error": null}
{"code": "return pd.DataFrame({'String Field': [''.join(random.choice(string.ascii_uppercase)\n                                                for i in range(10)) for i in range(NUM_SAMPLES)],\n                         'Float Field': [\"{0:.2f},\".format(random.randint(0, 10000))[:-1] for i in range(NUM_SAMPLES)]})", "compilation_passed": true, "time": 0.015556097030639648, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(\n        {\n            \"String Field\": [\n                \"\".join(random.choice(string.ascii_letters) for _ in range(10))\n                for _ in range(NUM_SAMPLES)\n            ],\n            \"Float Field\": [\n                format(random.uniform(0, 10000), \",.2f\") for _ in range(NUM_SAMPLES)\n            ],\n        }\n    )\n    return df", "compilation_passed": true, "time": 0.015418291091918945, "tests_passed": true, "error": null}
{"code": "# generate string field\n    char_list = string.ascii_letters\n    string_field = []\n    for _ in range(NUM_SAMPLES):\n        string_field.append(''.join(random.choice(char_list) for _ in range(10)))\n\n    # generate float field\n    float_field = []\n    for _ in range(NUM_SAMPLES):\n        float_field.append(round(random.random() * 10000, 2))\n\n    # concatenate the two fields and create a DataFrame\n    dataset = pd.DataFrame({\n        'String Field': string_field,\n        'Float Field': float_field\n    })\n\n    return dataset", "compilation_passed": true, "time": 0.009090185165405273, "tests_passed": false, "error": "AttributeError"}
{"code": "random.seed(0)\n    np.random.seed(0)\n\n    df = pd.DataFrame({\n        \"String Field\": [\"\".join(random.choice(string.ascii_uppercase) for _ in range(10)) for _ in range(NUM_SAMPLES)],\n        \"Float Field\": [round(random.random() * 10000, 2), 0]\n    })\n\n    return df", "compilation_passed": true, "time": 0.0033316612243652344, "tests_passed": false, "error": "ValueError"}
{"code": "# Generate a list of random ASCII letters\n    letters = [chr(i) for i in range(65, 91)]\n    # Generate a list of random numbers between 0 and 9999\n    numbers = [str(random.randint(0, 9999)).replace(\",\", \"\") for _ in range(NUM_SAMPLES)]\n    # Combine the lists into a DataFrame with the \"String Field\" column and the\n    # \"Float Field\" column\n    data = pd.DataFrame(\n        {\n            \"String Field\": [\"\".join(random.choice(letters) for _ in range(10)) for _ in range(NUM_SAMPLES)],\n            \"Float Field\": numbers,\n        }\n    )\n\n    return data", "compilation_passed": true, "time": 0.01483297348022461, "tests_passed": true, "error": null}
{"code": "strings = [''.join([chr(random.randint(65, 90)) for _ in range(random.randint(1, 10))]) for _ in range(NUM_SAMPLES)]\n    float_field = [str(round(random.uniform(0, 10000), 2)).replace('.', ',') for _ in range(NUM_SAMPLES)]\n    return pd.DataFrame({'String Field': strings, 'Float Field': float_field})", "compilation_passed": true, "time": 0.014714956283569336, "tests_passed": true, "error": null}
{"code": "# Create a random string of 10 ASCII letters using the string module\n    strings = [random.choice(string.ascii_letters) for _ in range(10)]\n\n    # Create a random float between 0 and 10000\n    floats = [random.random() * 10000,] * 100\n\n    # Create a random sample of 1000 rows with a random string and float in each row\n    sample = [tuple([random.choice(strings), f\"{float(float):,.2f}\"]) for _ in range(1000)]\n    return pd.DataFrame(sample, columns=[\"String Field\", \"Float Field\"])", "compilation_passed": true, "time": 0.0009500980377197266, "tests_passed": false, "error": "TypeError"}
{"code": "string_list = [random.choice(string.ascii_letters) for _ in range(10)]\n    float_list = [f\"{round(random.uniform(0, 10000), 2):,.0f}\" for _ in range(10)]\n    dataset = pd.DataFrame(\n        data=[\n            {\n                'String Field': ''.join(string_list),\n                'Float Field': float_list[idx],\n            }\n            for idx in range(NUM_SAMPLES)\n        ]\n    )\n    return dataset", "compilation_passed": true, "time": 0.0006940364837646484, "tests_passed": false, "error": "IndexError"}
{"code": "return pd.DataFrame({\n        'String Field': [''.join(random.choice(string.ascii_lowercase) for _ in range(10))\n                        for _ in range(NUM_SAMPLES)],\n        'Float Field': [round(random.uniform(0, 10000), 2), 0],\n        })", "compilation_passed": true, "time": 0.0031468868255615234, "tests_passed": false, "error": "ValueError"}
{"code": "string_characters = string.ascii_lowercase\n    string_length = 10\n    strings = [''.join(random.choice(string_characters) for i in range(string_length)) for j in range(NUM_SAMPLES)]\n\n    # Random float numbers from 0 to 10000\n    floats = [random.randint(0, 10000) for i in range(NUM_SAMPLES)]\n\n    # Format float numbers with two decimal places and comma as the thousands separator\n    formatted_floats = [f\"{value:,.2f}\" for value in floats]\n\n    # Concatenate strings and formatted floats\n    concat_data = pd.DataFrame(\n        {\n            'String Field': strings,\n            'Float Field': formatted_floats,\n        }\n    )\n    return concat_data", "compilation_passed": true, "time": 0.01623392105102539, "tests_passed": true, "error": null}
{"code": "# Generate random strings of 10 characters\n    strings = [\"\".join(random.choice(string.ascii_letters) for _ in range(10)) for _ in range(NUM_SAMPLES)]\n\n    # Generate random numbers between 0 and 10000\n    floats = [\"{:,.2f}\".format(random.uniform(0, 10000)) for _ in range(NUM_SAMPLES)]\n\n    # Merge the strings and floats into a DataFrame\n    dataset = pd.DataFrame({\n        'String Field': strings,\n        'Float Field': floats\n    })\n\n    return dataset", "compilation_passed": true, "time": 0.014802932739257812, "tests_passed": true, "error": null}
{"code": "# Create the initial DataFrame\n    df = pd.DataFrame(columns=['String Field', 'Float Field'])\n    df['String Field'] = [''.join(random.choice(string.ascii_uppercase) for _ in range(10)) for _ in range(NUM_SAMPLES)]\n    df['Float Field'] = [f\"{np.random.randint(10000):,.2f}\" for _ in range(NUM_SAMPLES)]\n\n    return df", "compilation_passed": true, "time": 0.021748065948486328, "tests_passed": true, "error": null}
{"code": "return pd.DataFrame(\n        data=dict(\n            String_Field=[\n                \"\".join(random.choice(string.ascii_letters) for _ in range(10))\n                for _ in range(NUM_SAMPLES)\n            ],\n            Float_Field=[\n                f\"{np.random.uniform(0, 10000)}\"\n                for _ in range(NUM_SAMPLES)\n            ],\n        ),\n    )", "compilation_passed": true, "time": 0.012079954147338867, "tests_passed": false, "error": "KeyError"}
{"code": "string_data = [''.join(random.choice(string.ascii_letters) for i in range(10)) for j in range(NUM_SAMPLES)]\n    float_data = [f'{round(random.random() * 10000, 2):,.2f}' for i in range(NUM_SAMPLES)]\n    return pd.DataFrame({'String Field': string_data, 'Float Field': float_data})", "compilation_passed": true, "time": 0.015355110168457031, "tests_passed": true, "error": null}
{"code": "data = [\n        (f\"{chr(random.randint(65, 90)) * random.randint(1, 100)}\"\n         f\"{random.randint(1, 999)},{round(random.uniform(0, 1000), 2):,.2f}\",\n         random.uniform(0, 10000)\n        )\n        for _ in range(NUM_SAMPLES)\n    ]\n\n    return pd.DataFrame(data, columns=['String Field', 'Float Field'])", "compilation_passed": true, "time": 0.006051778793334961, "tests_passed": false, "error": "AttributeError"}
{"code": "# Define the alphabet for generating the strings\n    alphabet = string.ascii_uppercase\n\n    # Generate random strings of 10 ASCII letters\n    random_strings = [''.join(random.choice(alphabet) for _ in range(10))\n                      for _ in range(NUM_SAMPLES)]\n\n    # Generate random floats between 0 and 10000 and format them with commas as thousands separators\n    random_floats = ['{:,}'.format(round(random.random() * 10000, 2))\n                     for _ in range(NUM_SAMPLES)]\n\n    # Create a DataFrame with the two columns and generate a random sample\n    df = pd.DataFrame({'String Field': random_strings,\n                       'Float Field': random_floats})\n    return df", "compilation_passed": true, "time": 0.015924930572509766, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(\n        columns=[\n            pd.Series(\n                data=list(\n                    [\n                        f\"{string.ascii_uppercase[random.randint(0, 25)] for i in range(10)]\n                        for _ in range(1)\n                    ]\n                ),\n                name='String Field',\n            ),\n            pd.Series(\n                data=[f\"{random.uniform(0.0, 10000.0):,.2f}\" for _ in range(NUM_SAMPLES)],\n                name='Float Field',\n            ),\n        ]\n    )\n\n    return df", "compilation_passed": false, "time": 4.291534423828125e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "df = pd.DataFrame({'String Field': [\n        ''.join(random.choice(string.ascii_letters) for _ in range(10))\n        for _ in range(NUM_SAMPLES)\n    ],\n        'Float Field': [\n            f'{random.randint(0, 10000)},{random.random():.2f}'\n            for _ in range(NUM_SAMPLES)\n        ],\n    })\n    return df", "compilation_passed": true, "time": 0.015503883361816406, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame()\n\n    df['String Field'] = [\"\".join(random.choice(string.ascii_letters) for _ in range(10)) for _ in range(NUM_SAMPLES)]\n    df['Float Field'] = [\"{:.2f},{:.2f}\".format(random.random(), random.random()) for _ in range(NUM_SAMPLES)]\n\n    return df", "compilation_passed": true, "time": 0.009592771530151367, "tests_passed": false, "error": "ValueError"}
