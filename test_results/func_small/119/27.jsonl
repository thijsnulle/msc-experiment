{"code": "x = np.linspace(-10, 10, 400)\n    y = x ** 2\n    plt.plot(x, y)\n    plt.title('y = x^2')\n    plt.xlabel('x')\n    plt.ylabel('y')\n    plt.grid()\n    plt.show()", "compilation_passed": true, "time": 0.0047130584716796875, "tests_passed": true, "error": null}
{"code": "x = np.linspace(-10, 10, 400)\n    y = x**2\n    plt.plot(x, y)\n    plt.xlabel('x')\n    plt.ylabel('y')\n    plt.grid()\n    plt.title('y = x^2')\n    plt.show()\n    return None", "compilation_passed": true, "time": 0.008220195770263672, "tests_passed": true, "error": null}
{"code": "x = np.linspace(-10,10,400)\n    y = x**2\n\n    plt.plot(x,y)\n    plt.title(\"y = x**2\")\n    plt.xlabel(\"x\")\n    plt.ylabel(\"y\")\n    plt.grid()\n    plt.show()\n    return None", "compilation_passed": true, "time": 0.001888275146484375, "tests_passed": true, "error": null}
{"code": "# Calculate the x values using numpy linspace\n    x_values = np.linspace(-10, 10, 400)\n    y_values = x_values**2  # Calculate the y values by raising x_values to the power of 2\n\n    # Plot the points using matplotlib\n    plt.plot(x_values, y_values)\n    plt.title('y = x^2')  # Add a title to the plot\n    plt.xlabel('x')  # Label the x-axis\n    plt.ylabel('y')  # Label the y-axis\n    plt.grid()  # Enable the grid\n\n    # Display the plot\n    plt.show()", "compilation_passed": true, "time": 0.005770206451416016, "tests_passed": true, "error": null}
{"code": "# Set the limits of x values\n    x_lim = (-10, 10)\n    # Set the range of x values from -10 to 10 in steps of 0.01\n    x_values = np.arange(*x_lim, 0.01)\n    # Calculate y values using the equation y = x^2\n    y_values = x_values**2\n    # Plot the points using matplotlib\n    plt.plot(x_values, y_values)\n    # Set the title of the plot\n    plt.title('y = x^2')\n    # Label x and y axes\n    plt.xlabel('x')\n    plt.ylabel('y')\n    # Enable the grid\n    plt.grid()\n    # Display the plot\n    plt.show()", "compilation_passed": true, "time": 0.0019299983978271484, "tests_passed": true, "error": null}
{"code": "x = np.arange(-10, 11, 0.01)\n    plt.plot(x, x**2)\n    plt.title(\"y = x^2\")\n    plt.xlabel(\"x\")\n    plt.ylabel(\"y\")\n    plt.grid()\n    plt.show()", "compilation_passed": true, "time": 0.005333900451660156, "tests_passed": false, "error": "ValueError"}
{"code": "fig, ax = plt.subplots()\n\n    ax.set_title(\"y = x^2\")\n    ax.set(xlabel=\"x\", ylabel=\"y\")\n    ax.grid(True)\n\n    x_values = np.linspace(-10, 10, 400)\n    y_values = x_values ** 2\n\n    ax.plot(x_values, y_values)\n\n    plt.show()", "compilation_passed": true, "time": 0.01927495002746582, "tests_passed": false, "error": "TypeError"}
{"code": "# Plotting the parabola using matplotlib, setting the title as 'y = x^2',\n    # labelling the axes as 'x' and 'y', and enabling the grid.\n    plt.title('y = x^2')\n    plt.xlabel('x')\n    plt.ylabel('y')\n    plt.grid()\n    x_values = np.linspace(-10, 10, 400)\n    y_values = x_values**2\n    plt.plot(x_values, y_values)\n\n    # Display the plot.\n    plt.show()", "compilation_passed": true, "time": 0.004593849182128906, "tests_passed": true, "error": null}
{"code": "x = np.linspace(-10, 10, 400)\n    y = x ** 2\n    plt.title('y = x^2')\n    plt.xlabel('x')\n    plt.ylabel('y')\n    plt.grid()\n    plt.plot(x, y)\n\n    plt.show()\n\n    assert type(task_func()) is None", "compilation_passed": true, "time": 0.4581317901611328, "tests_passed": false, "error": "RecursionError"}
{"code": "x = np.linspace(-10, 10, 400)\n    y = x**2\n    plt.plot(x, y)\n    plt.grid()\n    plt.title('y = x^2')\n    plt.xlabel('x')\n    plt.ylabel('y')\n    plt.show()", "compilation_passed": true, "time": 0.0031058788299560547, "tests_passed": true, "error": null}
{"code": "x = np.linspace(-10, 10, 400)\n    plt.plot(x, x ** 2)\n    plt.title(\"y = x^2\")\n    plt.xlabel(\"x\")\n    plt.ylabel(\"y\")\n    plt.grid(True)\n    plt.show()", "compilation_passed": true, "time": 0.008215904235839844, "tests_passed": true, "error": null}
{"code": "# Define the x values\n    x_values = np.linspace(-10, 10, 400)\n    # Calculate the corresponding y values\n    y_values = x_values**2\n    # Plot the points\n    plt.plot(x_values, y_values)\n    # Set the title, axes labels, and grid\n    plt.title(\"y = x^2\")\n    plt.xlabel(\"x\")\n    plt.ylabel(\"y\")\n    plt.grid()\n    # Display the plot\n    plt.show()", "compilation_passed": true, "time": 0.00252532958984375, "tests_passed": true, "error": null}
{"code": "x = np.linspace(-10, 10, 400)\n    y = x * x\n    plt.plot(x, y)\n    plt.title('y = x^2')\n    plt.xlabel('x')\n    plt.ylabel('y')\n    plt.grid()\n    plt.show()", "compilation_passed": true, "time": 0.006560087203979492, "tests_passed": true, "error": null}
{"code": "x = np.linspace(-10,10,400)\n    y = x*x\n    plt.plot(x,y)\n    plt.title(\"y = x^2\")\n    plt.xlabel(\"x\")\n    plt.ylabel(\"y\")\n    plt.grid(True)\n    plt.show()\n    return None", "compilation_passed": true, "time": 0.006394863128662109, "tests_passed": true, "error": null}
{"code": "# The equation for the parabola is y = x^2. The function plots the parabola using matplotlib,\n    # sets the title as 'y = x^2', labels the axes as 'x' and 'y', and enables the grid. It uses a\n    # fixed range for x values from -10 to 10 with 400 points.\n    x = np.linspace(-10, 10, 400)\n    y = x ** 2\n    plt.plot(x, y)\n    plt.title(\"y = x^2\")\n    plt.xlabel(\"x\")\n    plt.ylabel(\"y\")\n    plt.grid()\n    plt.show()\n\n    return", "compilation_passed": true, "time": 0.002591848373413086, "tests_passed": true, "error": null}
{"code": "# Set up the figure with a title and grid\n    plt.figure(figsize=(10, 10))\n    plt.title('y = x^2')\n    plt.xlabel('x')\n    plt.ylabel('y')\n    plt.grid()\n\n    # Plot the parabola using matplotlib\n    x = np.linspace(-10, 10, 400)\n    y = x**2\n    plt.plot(x, y)\n\n    # Display the plot\n    plt.show()", "compilation_passed": true, "time": 0.026444196701049805, "tests_passed": true, "error": null}
{"code": "# Create a figure and axis object\n    fig, ax = plt.subplots()\n\n    # Set the title\n    ax.set_title(\"y = x^2\")\n\n    # Label the axes\n    ax.set_xlabel(\"x\")\n    ax.set_ylabel(\"y\")\n\n    # Enable grid\n    ax.grid()\n\n    # Create a list of x values from -10 to 10 with 400 points\n    x = np.linspace(-10, 10, 400)\n\n    # Calculate the corresponding y values using x\n    y = x ** 2\n\n    # Plot the parabola\n    ax.plot(x, y)\n\n    # Display the plot\n    plt.show()", "compilation_passed": true, "time": 0.019916057586669922, "tests_passed": false, "error": "TypeError"}
{"code": "# Create a 400x400 axes with white background and a black grid\n    fig, ax = plt.subplots(figsize=(4, 4), facecolor=\"white\")\n    ax.grid(color='k', linestyle='--', linewidth=0.5, alpha=0.5, zorder=0)\n\n    # Create a list of x values from -10 to 10 with 400 points\n    x = np.linspace(-10, 10, 400)\n\n    # Calculate y values for the x values\n    y = x**2\n\n    # Plot the parabola using matplotlib with the given equation, x axis, y axis, and color\n    ax.plot(x, y, 'k')\n\n    # Set the plot title and axis labels\n    ax.set_title('y = x^2')\n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n\n    # Display the plot\n    plt.show()", "compilation_passed": true, "time": 0.01818990707397461, "tests_passed": false, "error": "TypeError"}
{"code": "pass", "compilation_passed": true, "time": 0.005095958709716797, "tests_passed": false, "error": "TypeError"}
{"code": "x = np.linspace(-10, 10, 400)  # Generate 400 points from -10 to 10\n    y = x ** 2\n\n    plt.plot(x, y)  # Plot the parabola using matplotlib\n    plt.xlabel('x')  # Label x axis\n    plt.ylabel('y')  # Label y axis\n    plt.title('y = x^2')  # Set the title\n    plt.grid(True)  # Enable grid\n    plt.show()  # Display the plot", "compilation_passed": true, "time": 0.005554914474487305, "tests_passed": true, "error": null}
{"code": "x = np.linspace(-10, 10, 400)\n    y = x ** 2\n    plt.plot(x, y)\n    plt.title('y = x^2')\n    plt.xlabel('x')\n    plt.ylabel('y')\n    plt.grid()\n    plt.show()\n    print(type(task_func()) == type(None))", "compilation_passed": true, "time": 0.7159428596496582, "tests_passed": false, "error": "RecursionError"}
{"code": "y = x ** 2\n    plt.plot(x,y)\n    plt.title(\"y = x^2\")\n    plt.xlabel(\"x\")\n    plt.ylabel(\"y\")\n    plt.grid()\n    plt.show()\n    return None", "compilation_passed": true, "time": 0.0011332035064697266, "tests_passed": false, "error": "NameError"}
{"code": "# Create an x-axis from -10 to 10 with 400 evenly-spaced values\n    x = np.linspace(-10, 10, 400)\n    # Plot the function y = x^2 using matplotlib\n    plt.plot(x, x**2)\n    # Set the title of the plot\n    plt.title('y = x^2')\n    # Label the x-axis as 'x' and the y-axis as 'y'\n    plt.xlabel('x')\n    plt.ylabel('y')\n    # Enable the grid on both the x- and y-axes\n    plt.grid(which='both', color='gray', linestyle='--', linewidth=0.5, alpha=0.5)\n    # Display the plot\n    plt.show()", "compilation_passed": true, "time": 0.00767207145690918, "tests_passed": true, "error": null}
{"code": "x_min, x_max = -10, 10\n    x = np.linspace(x_min, x_max, 400)\n    y = x**2\n    plt.plot(x, y)\n    plt.title('y = x^2')\n    plt.xlabel('x')\n    plt.ylabel('y')\n    plt.grid(True)\n    plt.show()", "compilation_passed": true, "time": 0.005789995193481445, "tests_passed": true, "error": null}
{"code": "# Create a parabola using a fixed range of x values from -10 to 10 with 400 points\n    x = np.linspace(-10, 10, 400)\n    y = x**2\n\n    # Set the title and labels for the axes\n    plt.title('y = x^2')\n    plt.xlabel('x')\n    plt.ylabel('y')\n\n    # Display the graph\n    plt.plot(x, y)\n\n    # Enable the grid for the graph\n    plt.grid(True)\n\n    # Show the plot\n    plt.show()", "compilation_passed": true, "time": 0.0057621002197265625, "tests_passed": true, "error": null}
{"code": "# Initialize the plot\n    x = np.linspace(-10, 10, 400)\n    y = x ** 2\n    plt.plot(x, y)\n    plt.title('y = x^2')\n    plt.xlabel('x')\n    plt.ylabel('y')\n    plt.grid()\n    plt.show()\n    # Display the plot\n    return None", "compilation_passed": true, "time": 0.003132343292236328, "tests_passed": true, "error": null}
{"code": "# Create a figure with a width of 8 inches and a height of 6 inches.\n    fig = plt.figure(figsize=(8, 6))\n\n    # Set the title for the plot to 'y = x^2'.\n    plt.title('y = x^2')\n\n    # Label the x-axis 'x' and the y-axis 'y'.\n    plt.xlabel('x')\n    plt.ylabel('y')\n\n    # Create an empty list to store the x values.\n    x = []\n\n    # Calculate the x values and add them to the x list.\n    for i in range(-10, 11):\n        x.append(i)\n\n    # Create an empty list to store the y values.\n    y = []\n\n    # Calculate the y values and add them to the y list.\n    for i in x:\n        y.append(i ** 2)\n\n    # Plot the x and y values as a scatter plot.\n    plt.scatter(x, y)\n\n    # Enable the grid for the plot.\n    plt.grid()\n", "compilation_passed": true, "time": 0.01827406883239746, "tests_passed": false, "error": "TypeError"}
