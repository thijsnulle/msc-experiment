{"code": "prime_numbers = []\n\n    # Filter the prime numbers\n    for num in input_list:\n        if isprime(num):\n            degree = num * math.pi\n            degree_value = (degree / (2 * math.pi)) * 360\n            prime_numbers.append(degree_value)\n    return sorted(prime_numbers)", "compilation_passed": true, "time": 0.0008428096771240234, "tests_passed": true, "error": null}
{"code": "prime_numbers = [num for num in input_list if isprime(num)]\n    radian_degrees = sorted([math.degrees(math.radians(num)) for num in prime_numbers], reverse=True)\n    return [num for num in prime_numbers if math.degrees(math.radians(num)) in radian_degrees]", "compilation_passed": true, "time": 0.0006377696990966797, "tests_passed": true, "error": null}
{"code": "# Write your code here\n    prime_list = []\n\n    for number in input_list:\n        if isprime(number):\n            prime_list.append(number)\n\n    degree_list = []\n    for number in prime_list:\n        degree = math.degrees(math.atan(number))\n        degree_list.append(degree)\n\n    sorted_list = sorted(degree_list)\n\n    return sorted_list", "compilation_passed": true, "time": 0.0006232261657714844, "tests_passed": true, "error": null}
{"code": "filtered = list(filter(isprime, input_list))\n    sorted_prime = [prime for prime in sorted(filtered, key=lambda x: math.degrees(math.atan(1 / x)))]\n    return sorted_prime", "compilation_passed": true, "time": 0.0006291866302490234, "tests_passed": true, "error": null}
{"code": "prime_numbers = []\n    for number in input_list:\n        if isprime(number):\n            degree = degrees(number)\n            prime_numbers.append(degree)\n\n    prime_numbers.sort()\n    return prime_numbers", "compilation_passed": true, "time": 0.0006010532379150391, "tests_passed": false, "error": "NameError"}
{"code": "return sorted(list(filter(lambda x: isprime(x), input_list)), key=lambda x: degrees(math.atan(1/x)))", "compilation_passed": true, "time": 0.0005481243133544922, "tests_passed": false, "error": "NameError"}
{"code": "# Create a list to store the sorted prime numbers.\n    prime_list = []\n\n    # Iterate through each number in the input_list.\n    for num in input_list:\n        # Check if num is a prime number.\n        if isprime(num):\n            # Get the degree value of the number.\n            deg = math.degrees(math.atan(num))\n            # Add the number and its degree value to the prime_list.\n            prime_list.append((num, deg))\n\n    # Sort the prime_list by the degree value in ascending order.\n    prime_list.sort(key=lambda x: x[1])\n\n    # Get the prime numbers from the sorted prime_list.\n    return [prime for prime, deg in prime_list]", "compilation_passed": true, "time": 0.0005929470062255859, "tests_passed": true, "error": null}
{"code": "result = []\n\n    for i in input_list:\n        if isprime(i) is True:\n            degree = math.degrees(math.atan(1 / i))\n            result.append(i)\n\n    return sorted(result)", "compilation_passed": true, "time": 0.0009059906005859375, "tests_passed": true, "error": null}
{"code": "result = []\n\n    for number in input_list:\n        if isprime(number):\n            degree = int(math.degrees(math.pi / number))\n            result.append((degree, number))\n\n    return sorted(result, key=lambda x: x[0])", "compilation_passed": true, "time": 0.0006170272827148438, "tests_passed": true, "error": null}
{"code": "prime_numbers = []\n    non_prime_numbers = []\n\n    for number in input_list:\n        if isprime(number):\n            degree = math.degrees(math.atan(number))\n            prime_numbers.append((number, degree))\n        else:\n            non_prime_numbers.append(number)\n\n    prime_numbers.sort(key=lambda x: x[1])\n\n    return [number for number, _ in prime_numbers] + non_prime_numbers", "compilation_passed": true, "time": 0.0006430149078369141, "tests_passed": true, "error": null}
{"code": "result = []\n    for i in input_list:\n        if isprime(i):\n            result.append(i)\n\n    result.sort(key=lambda x: degrees(atan(1 / x)))\n\n    return result", "compilation_passed": true, "time": 0.0006053447723388672, "tests_passed": false, "error": "NameError"}
{"code": "prime_numbers = []\n    for num in input_list:\n        if isprime(num):\n            prime_numbers.append(num)\n    prime_numbers.sort(key=math.degrees)\n    return prime_numbers", "compilation_passed": true, "time": 0.0005350112915039062, "tests_passed": true, "error": null}
{"code": "return [x for x in sorted([p for p in input_list if isprime(p)], key=lambda x: math.degrees(x))]", "compilation_passed": true, "time": 0.0005500316619873047, "tests_passed": true, "error": null}
{"code": "rad_list = []\n    prime_list = []\n    # Your code goes here\n    # filter prime numbers from the input list\n    for item in input_list:\n        if isprime(item):\n            prime_list.append(item)\n            # calculate radian of the number\n            rad = item * math.pi/180\n            rad_list.append(rad)\n    prime_list = sorted(prime_list, key=math.degrees)\n    return prime_list", "compilation_passed": true, "time": 0.0006117820739746094, "tests_passed": true, "error": null}
{"code": "prime_numbers = [number for number in input_list if isprime(number)]\n    prime_numbers.sort(key=math.degrees)\n    return prime_numbers", "compilation_passed": true, "time": 0.0005218982696533203, "tests_passed": true, "error": null}
{"code": "prime_list = []\n    for number in input_list:\n        if isprime(number):\n            degree = int(math.degrees(math.atan2(number, 1)))\n            prime_list.append(degree)\n    prime_list.sort()\n    return prime_list", "compilation_passed": true, "time": 0.0005831718444824219, "tests_passed": true, "error": null}
{"code": "return sorted(list(filter(isprime, input_list)), key=math.degrees)", "compilation_passed": true, "time": 0.0005083084106445312, "tests_passed": true, "error": null}
{"code": "filtered = list(filter(isprime, input_list))\n    sorted_prime_degrees = sorted(\n        [x for x in filtered if isprime(x)], key=lambda x: math.degrees(math.asin(math.sqrt(x)))\n    )\n    return sorted_prime_degrees", "compilation_passed": true, "time": 0.0006158351898193359, "tests_passed": false, "error": "ValueError"}
{"code": "prime_numbers = [i for i in input_list if isprime(i)]\n\n    radians = [math.degrees(math.pi * (i / 2)) for i in prime_numbers]\n    degrees = [i for i in radians if i % 2 == 0]\n    sorted_primes = [i for i in prime_numbers if i in degrees]\n    return sorted_primes", "compilation_passed": true, "time": 0.00061798095703125, "tests_passed": true, "error": null}
{"code": "return [i for i in input_list if isprime(i)]", "compilation_passed": true, "time": 0.0004980564117431641, "tests_passed": true, "error": null}
{"code": "result = []\n    for number in input_list:\n        if isprime(number):\n            degree = degrees(number)\n            result.append(degree)\n    result = sorted(result)\n    return result", "compilation_passed": true, "time": 0.0005788803100585938, "tests_passed": false, "error": "NameError"}
{"code": "prime_numbers = [number for number in input_list if isprime(number)]\n    prime_numbers_degrees = [math.degrees(math.atan(number)) for number in prime_numbers]\n    prime_numbers_degrees.sort()\n    return prime_numbers_degrees", "compilation_passed": true, "time": 0.0005710124969482422, "tests_passed": true, "error": null}
{"code": "filtered_primes = [x for x in input_list if isprime(x)]\n    sorted_filtered = [x for x in filtered_primes if math.degrees(math.atan(x)) == math.degrees(x)]\n    return sorted_filtered", "compilation_passed": true, "time": 0.0005671977996826172, "tests_passed": true, "error": null}
{"code": "prime_list = list(filter(isprime, input_list))\n    prime_degree_list = []\n    for prime in prime_list:\n        degree = math.degrees(prime)\n        prime_degree_list.append(degree)\n\n    sorted_prime_degree_list = sorted(prime_degree_list)\n\n    return sorted_prime_degree_list", "compilation_passed": true, "time": 0.0006160736083984375, "tests_passed": true, "error": null}
{"code": "prime_list = list()\n    for num in input_list:\n        if isprime(num):\n            prime_list.append(num)\n    prime_list.sort(key=lambda x: math.degrees(math.atan(x)))\n    return prime_list", "compilation_passed": true, "time": 0.0005509853363037109, "tests_passed": true, "error": null}
{"code": "prime_numbers = []\n    for x in input_list:\n        if isprime(x):\n            degree = math.degrees(math.acos(x))\n            prime_numbers.append(degree)\n\n    prime_numbers.sort()\n    return prime_numbers", "compilation_passed": true, "time": 0.0005381107330322266, "tests_passed": false, "error": "ValueError"}
{"code": "primes = []\n    for number in input_list:\n        if isprime(number):\n            degree = math.degrees(math.acos(number))\n            primes.append(number)\n    return sorted(primes)", "compilation_passed": true, "time": 0.0005857944488525391, "tests_passed": false, "error": "ValueError"}
{"code": "prime_list = list()\n    degree_list = list()\n    for i in input_list:\n        if isprime(i):\n            prime_list.append(i)\n            degree_list.append(math.degrees(math.atan(1)))\n    degree_list = sorted(degree_list)\n    prime_list = sorted(prime_list)\n    for i in range(len(degree_list)):\n        prime_list[i] = prime_list[degree_list.index(i)]\n    return prime_list", "compilation_passed": true, "time": 0.0006079673767089844, "tests_passed": false, "error": "ValueError"}
{"code": "# Step 1: Use the isprime function from sympy to determine prime numbers\n    primes = [num for num in input_list if isprime(num)]\n\n    # Step 2: Use the degrees function from math to calculate the degree value\n    #         for each prime number\n    degrees = [math.degrees(math.acos(num / (num ** 2))) for num in primes]\n\n    # Step 3: Sort the degrees list ascending\n    degrees.sort()\n\n    # Step 4: Return the sorted prime numbers\n    return [primes[i] for i in range(len(degrees)) if degrees[i] == min(degrees)]", "compilation_passed": true, "time": 0.0006060600280761719, "tests_passed": true, "error": null}
{"code": "prime_list = []\n    for num in input_list:\n        if isprime(num):\n            prime_list.append(num)\n\n    prime_list.sort(key=lambda x: math.degrees(math.atan2(1, x)))\n\n    return prime_list", "compilation_passed": true, "time": 0.0006420612335205078, "tests_passed": true, "error": null}
