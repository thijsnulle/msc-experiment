{"code": "if df.empty:\n        raise ValueError(\"DataFrame must not be empty.\")\n\n    if df.dtypes.apply(lambda x: pd.isna(x)).any():\n        raise ValueError(\"DataFrame contains NaN data.\")\n\n    cum_sums = df.cumsum()\n    cum_sums.plot.bar()\n    fig = plt.gcf()\n\n    return cum_sums, fig", "compilation_passed": true, "time": 0.026334285736083984, "tests_passed": true, "error": null}
{"code": "if len(df) == 0:\n        raise ValueError(\"The DataFrame must not be empty.\")\n\n    sum_dict = df.sum(skipna=True).to_dict()\n\n    cum_df = df.cumsum()\n    cum_df.plot.bar(y=cum_df.columns)\n    cum_df.plot.bar(y=cum_df.columns, rot=20)\n    cum_df.plot.bar(y=cum_df.columns, rot=20, legend=False)\n    cum_df.plot.bar(y=cum_df.columns, rot=20, title='Cumulative Sum per Column',\n                    xlabel='Index', ylabel='Cumulative Sum', grid=True,\n                    legend=True)\n    plt.show()\n    return cum_df, fig", "compilation_passed": true, "time": 0.03432488441467285, "tests_passed": false, "error": "NameError"}
{"code": "# TODO: Write your code here\n    raise NotImplementedError(\"task_func is not implemented\")", "compilation_passed": true, "time": 0.001318216323852539, "tests_passed": false, "error": "NotImplementedError"}
{"code": "# Check if the DataFrame is empty or contains non-numeric data\n    if df.empty or not df.columns.apply(pd.api.types.is_numeric_dtype).all():\n        raise ValueError(\"DataFrame is empty or contains non-numeric data.\")\n    # Calculate the cumulative sum for each column\n    df_cumulative = df.cumsum()\n    # Plot the results in a bar chart\n    fig = plt.subplots(1, figsize=(10, 5))\n    ax = fig[0]\n    ax.barh(df_cumulative.index, df_cumulative.values, label=\"Cumulative Sum\")\n    ax.set_yticks(df_cumulative.index)\n    ax.set_yticklabels(df_cumulative.columns)\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Cumulative Sum')\n    ax.set_title('Cumulative Sum per Column')\n    ax.legend()\n    return df_cumulative, fig", "compilation_passed": true, "time": 0.0012569427490234375, "tests_passed": false, "error": "AttributeError"}
{"code": "# TODO: implement me\n    # raise NotImplementedError\n    cumsum = df.cumsum()\n\n    fig, ax = plt.subplots()\n    ax.barh(cumsum.index, cumsum)\n\n    ax.set_xlabel(\"Index\")\n    ax.set_ylabel(\"Cumulative Sum\")\n    ax.legend([\"Cumulative Sum\"])\n    ax.set_title(\"Cumulative Sum per Column\")\n    fig.show()\n    return cumsum, fig", "compilation_passed": true, "time": 0.004638195037841797, "tests_passed": false, "error": "ValueError"}
{"code": "if df.empty or (df.isna().values).any():\n        raise ValueError('Empty or non-numeric data in the input DataFrame')\n\n    cumulative_sums = df.cumsum()\n    fig, ax = plt.subplots()\n    ax.bar(cumulative_sums.index, cumulative_sums.values, color='red')\n    ax.set(xlabel='Index', ylabel='Cumulative Sum',\n           title='Cumulative Sum per Column')\n    ax.legend(['Cumulative Sum'])\n    fig.show()\n\n    return (cumulative_sums, fig)", "compilation_passed": true, "time": 0.004581928253173828, "tests_passed": false, "error": "ValueError"}
{"code": "if df.empty:\n        raise ValueError(\"DataFrame is empty\")\n\n    numeric_cols = df.select_dtypes(include=[np.number])\n    if not numeric_cols.empty:\n        numeric_cols.cumsum(axis=0, inplace=True)\n        numeric_cols.plot.bar()\n    else:\n        raise ValueError(\"DataFrame contains non-numeric data\")", "compilation_passed": true, "time": 0.0024378299713134766, "tests_passed": false, "error": "TypeError"}
{"code": "try:\n        if not df.empty and df.columns.isin([*map(str, range(df.shape[1]))]).all():\n            cum_sum = df.cumsum().T\n            return (cum_sum, df.plot.bar())\n        else:\n            raise ValueError(\"Please provide a DataFrame containing numerical data.\")\n    except:\n        print(f\"Please provide a DataFrame containing numerical data.\")\n        return", "compilation_passed": true, "time": 0.0012547969818115234, "tests_passed": false, "error": "TypeError"}
{"code": "if df.empty:\n        raise ValueError(\"DataFrame cannot be empty.\")\n\n    # Check for numeric data\n    try:\n        numeric_data = df.select_dtypes(include=['number'])\n    except AttributeError as e:\n        raise ValueError(\"DataFrame must contain numeric data to plot.\")\n\n    if not numeric_data.empty:\n        df = df[numeric_data.columns]\n        cum_sums = df.cumsum()\n        fig = plt.bar(cum_sums.index, cum_sums, alpha=0.5, color='green')\n    else:\n        raise ValueError(\"DataFrame must contain numeric data to plot.\")\n\n    fig.set_title(\"Cumulative Sum per Column\")\n    fig.set_xlabel(\"Index\")\n    fig.set_ylabel(\"Cumulative Sum\")\n    fig.legend([\"Cumulative Sum\"])\n    return cum_sums, fig", "compilation_passed": true, "time": 0.0018832683563232422, "tests_passed": false, "error": "ValueError"}
{"code": "df.cumsum().plot(kind='bar')\n    return (df, fig)", "compilation_passed": true, "time": 0.010918140411376953, "tests_passed": false, "error": "NameError"}
{"code": "if df.empty:\n        raise ValueError(\"Dataframe is empty\")\n\n    for col in df.columns:\n        df[col] = df[col].cumsum()\n\n    fig, ax = plt.subplots()\n    df.plot(kind='bar', ax=ax)\n    ax.set_title('Cumulative Sum per Column')\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Cumulative Sum')\n    ax.legend()\n    return output_df, fig", "compilation_passed": true, "time": 0.010452985763549805, "tests_passed": false, "error": "NameError"}
{"code": "if len(df) == 0:\n        raise ValueError(\"Dataframe is empty.\")\n    elif not df.dtypes.apply(lambda x: x.kind in \"biufc\").all():\n        raise ValueError(\"Dataframe contains non-numeric data.\")\n    else:\n        df_cumulative_sum = df.cumsum()\n        df_cumulative_sum.plot(kind=\"bar\",\n                               title=\"Cumulative Sum per Column\",\n                               x='Index', y='Cumulative Sum',\n                               legend=True,\n                               xlabel=\"Index\",\n                               ylabel=\"Cumulative Sum\")\n        return df_cumulative_sum, fig", "compilation_passed": true, "time": 0.0018339157104492188, "tests_passed": false, "error": "KeyError"}
{"code": "# Check if the input df is empty\n    if len(df) == 0:\n        raise ValueError(\"Input df is empty.\")\n\n    # Check if all values are numeric\n    try:\n        df.values\n    except ValueError:\n        raise ValueError(\"All values must be numeric.\")\n\n    # Calculate cumulative sum of each column\n    cumsum_df = df.cumsum()\n\n    # Plot the results in a bar chart\n    fig, ax = plt.subplots()\n    ax.bar(df.index, cumsum_df['A'])\n    ax.set_xlabel('Index')\n    ax.set_ylabel('Cumulative Sum')\n    ax.set_title('Cumulative Sum per Column')\n    ax.legend(['A'])\n    plt.show()\n\n    return cumsum_df, fig", "compilation_passed": true, "time": 0.015357017517089844, "tests_passed": true, "error": null}
{"code": "if not df.empty:\n        df_cumsum = df.cumsum()\n        fig = df_cumsum.plot(kind='bar')\n        fig.suptitle('Cumulative Sum per Column')\n        fig.set_xlabel('Index')\n        fig.set_ylabel('Cumulative Sum')\n        fig.legend(loc='lower left')\n        return df_cumsum, fig\n    raise ValueError('Input data frame is empty')", "compilation_passed": true, "time": 0.00943303108215332, "tests_passed": false, "error": "AttributeError"}
{"code": "if df.empty:\n        raise ValueError(\"Input DataFrame is empty.\")\n\n    df_cumsum = df.cumsum()\n\n    if df.isna().any().any():\n        df_cumsum = df_cumsum.fillna(0)\n\n    df_cumsum['A'] = df_cumsum['A'] - df_cumsum['B']\n\n    fig = plt.bar(df_cumsum.index, df_cumsum['A'], color='r', width=0.8)\n    plt.title(\"Cumulative Sum per Column\")\n    plt.xlabel(\"Index\")\n    plt.ylabel(\"Cumulative Sum\")\n    plt.legend(('A'), loc=\"upper left\")\n    return df_cumsum, fig", "compilation_passed": true, "time": 0.003439188003540039, "tests_passed": true, "error": null}
{"code": "if df.empty:\n        raise ValueError(\"Dataframe is empty.\")\n\n    column_names = df.columns\n    cumulative_sums = df.cumsum()\n\n    cumulative_sums.plot.bar()\n    fig = plt.gcf()\n    plt.show()\n    fig.set_figwidth(16)\n    fig.set_figheight(8)\n    plt.title(\"Cumulative Sum per Column\")\n    plt.xlabel('Index')\n    plt.ylabel('Cumulative Sum')\n    plt.legend(column_names)\n\n    return cumulative_sums, fig", "compilation_passed": true, "time": 0.06028008460998535, "tests_passed": true, "error": null}
{"code": "if len(df) == 0:\n        raise ValueError(\"The DataFrame is empty.\")\n\n    if not df.dtypes.apply(lambda x: x.is_numeric()).all():\n        raise ValueError(\"The DataFrame contains non-numeric data.\")\n\n    cumulative_sum = df.cumsum()\n\n    plt.figure(figsize=(8, 4))\n    plt.bar(cumulative_sum.index, cumulative_sum)\n    plt.title(\"Cumulative Sum per Column\")\n    plt.xlabel(\"Index\")\n    plt.ylabel(\"Cumulative Sum\")\n    plt.legend()\n\n    return cumulative_sum, plt.gcf()", "compilation_passed": true, "time": 0.0017516613006591797, "tests_passed": false, "error": "AttributeError"}
{"code": "if not df:\n        raise ValueError('DataFrame is empty')\n    df = df.cumsum()\n    df.plot.bar()\n    return df", "compilation_passed": true, "time": 0.0011780261993408203, "tests_passed": false, "error": "ValueError"}
{"code": "df_cum_sum = df.cumsum()\n    fig, ax = plt.subplots()\n\n    ax.bar(df_cum_sum.index, df_cum_sum.values, width=0.8)\n\n    plt.xlabel(\"Index\")\n    plt.ylabel(\"Cumulative Sum\")\n    plt.title(\"Cumulative Sum per Column\")\n\n    plt.legend()\n\n    return df_cum_sum, fig", "compilation_passed": true, "time": 0.005061149597167969, "tests_passed": false, "error": "ValueError"}
{"code": "if df.empty:\n        raise ValueError(\"DataFrame is empty\")\n\n    columns_with_numeric_data = df.select_dtypes(include=['int64', 'float64']).columns\n    if not columns_with_numeric_data.any():\n        raise ValueError(\"DataFrame does not contain numeric data\")\n\n    df[\"cumsum\"] = df.cumsum()\n\n    fig = plt.figure()\n    df.plot.bar()\n    plt.title('Cumulative Sum per Column')\n    plt.xlabel('Index')\n    plt.ylabel('Cumulative Sum')\n    plt.legend()\n    plt.show()\n    return output_df, fig", "compilation_passed": true, "time": 0.0015878677368164062, "tests_passed": false, "error": "ValueError"}
{"code": "if df.empty or not df.apply(pd.to_numeric, errors='coerce').all():\n        raise ValueError('Input DataFrame contains non-numeric data or is empty')\n    cumulative_sums = df.cumsum()\n    fig = plt.bar(cumulative_sums.index, cumulative_sums.values, width=1, bottom=cumulative_sums.values.shift())\n    plt.title('Cumulative Sum per Column')\n    plt.xlabel('Index')\n    plt.ylabel('Cumulative Sum')\n    plt.legend(fig.axes[0].patches, df.columns.tolist() + ['bottom'], loc='best')\n    return cumulative_sums, fig", "compilation_passed": true, "time": 0.0016200542449951172, "tests_passed": false, "error": "ValueError"}
{"code": "if not df.empty:\n        for column_name, column_values in df.iteritems():\n            column_values = column_values.dropna()  # Remove NaN values\n            df[column_name] = column_values.cumsum()\n    return df", "compilation_passed": true, "time": 0.001210927963256836, "tests_passed": false, "error": "AttributeError"}
{"code": "if not df.empty:\n        if df.dtypes[0].name.startswith('float'):\n            cumulative = df.cumsum()\n            fig = plt.bar(range(len(cumulative)), cumulative.values)\n        else:\n            raise ValueError('DataFrame must contain float data.')\n    else:\n        raise ValueError('DataFrame is empty')\n    return cumulative, fig", "compilation_passed": true, "time": 0.0012240409851074219, "tests_passed": false, "error": "ValueError"}
{"code": "if df.empty:\n        raise ValueError(\"DataFrame must not be empty\")\n\n    numeric_data_cols = df.columns[df.dtypes.map(pd.types.is_numeric_dtype)]\n    if not len(numeric_data_cols):\n        raise ValueError(\"DataFrame must contain at least one numeric column\")\n\n    cumulative_sums = df[numeric_data_cols].cumsum()\n\n    # Plot the cumulative sums as a bar chart\n    fig = plt.figure(figsize=(10, 6))\n    plt.bar(cumulative_sums.index.values, cumulative_sums.values)\n    plt.xlabel(\"Index\")\n    plt.ylabel(\"Cumulative Sum\")\n    plt.title(\"Cumulative Sum per Column\")\n    plt.legend()\n\n    return cumulative_sums, fig", "compilation_passed": true, "time": 0.0012290477752685547, "tests_passed": false, "error": "AttributeError"}
{"code": "# Check if the DataFrame is empty or contains non-numeric data.\n    if df.empty or df.isna().all().all():\n        raise ValueError(\"Input DataFrame is empty or contains non-numeric data.\")\n\n    # Calculate the cumulative sum for each column.\n    cumsum = df.cumsum()\n\n    # Create a bar chart for the cumulative sum values.\n    plt.bar(cumsum.index, cumsum.values, label='Cumulative Sum')\n    plt.title('Cumulative Sum per Column')\n    plt.xlabel('Index')\n    plt.ylabel('Cumulative Sum')\n    plt.legend()\n\n    return cumsum, fig", "compilation_passed": true, "time": 0.0015888214111328125, "tests_passed": false, "error": "ValueError"}
{"code": "if len(df.columns) == 0 or not df.dtypes.apply(lambda x: np.issubdtype(x, np.number)).all():\n        raise ValueError('The dataframe must contain numeric data to plot.')\n    if len(df) == 0:\n        raise ValueError('The DataFrame must not be empty.')\n\n    df = df.cumsum()\n    df.plot.bar()\n    fig = plt.gcf()\n    fig.suptitle('Cumulative Sum per Column')\n    plt.xlabel('Index')\n    plt.ylabel('Cumulative Sum')\n    plt.legend()\n    plt.show()\n    return df, fig", "compilation_passed": true, "time": 0.028890132904052734, "tests_passed": true, "error": null}
{"code": "# Check if the dataframe is empty or has non-numeric data\n    if df.empty or not df.apply(lambda x: x.apply(lambda y: pd.api.types.is_numeric_dtype(y))).all():\n        raise ValueError(\"Empty dataframe or contains non-numeric data\")\n\n    # Calculate cumulative sum\n    cumulative_sum = df.cumsum()\n    # Plot the cumulative sum in a bar chart\n    cumulative_sum.plot(kind='bar', title='Cumulative Sum per Column')\n\n    # Create a legend for the plot\n    plt.legend()\n\n    # Display the plot\n    plt.show()\n    return (cumulative_sum, fig)", "compilation_passed": true, "time": 0.001950979232788086, "tests_passed": false, "error": "ValueError"}
{"code": "if df.empty:\n        raise ValueError(\"Input data frame is empty.\")\n\n    df_cumsum = df.cumsum().cumsum().copy()\n\n    df_cumsum.plot(kind=\"bar\", title=\"Cumulative Sum per Column\")\n    plt.xlabel(\"Index\")\n    plt.ylabel(\"Cumulative Sum\")\n    plt.legend()\n\n    return df_cumsum, fig", "compilation_passed": true, "time": 0.009818077087402344, "tests_passed": false, "error": "NameError"}
{"code": "if len(df) == 0:\n        raise ValueError(\"DataFrame is empty.\")\n\n    for col in df.columns:\n        if not pd.api.types.is_numeric_dtype(df[col]):\n            raise ValueError(f\"{col} is non-numeric.\")\n\n    cumulative_sum = df.cumsum().replace({np.nan: 0})\n\n    fig = plt.bar(\n        df.index,\n        cumulative_sum,\n        color=\"lightblue\",\n        width=0.8,\n        edgecolor=\"black\",\n        linewidth=2,\n        label=\"Cumulative Sum\"\n    )\n    fig.set_title(\"Cumulative Sum per Column\")\n    fig.set_xlabel(\"Index\")\n    fig.set_ylabel(\"Cumulative Sum\")\n    fig.legend()\n\n    return (cumulative_sum, fig)", "compilation_passed": true, "time": 0.001990795135498047, "tests_passed": false, "error": "ValueError"}
{"code": "if df.empty or not df.info()[1].dtypes.is_all_numeric():\n        raise ValueError(\"DataFrame must not be empty and contain numeric data.\")\n    # 1. Get the cumulative sum for each column\n    cumsum = df.cumsum()\n    # 2. Plot the result using matplotlib\n    fig, ax = plt.subplots(figsize=(6, 4))\n    ax.bar(cumsum.index, cumsum)\n    ax.set_title(\"Cumulative Sum per Column\")\n    ax.set_ylabel(\"Cumulative Sum\")\n    ax.set_xlabel(\"Index\")\n    ax.set_legend([\"Cumulative Sum\"])\n    # 3. Return the plot and the dataframe\n    return cumsum, fig", "compilation_passed": true, "time": 0.00315093994140625, "tests_passed": false, "error": "AttributeError"}
