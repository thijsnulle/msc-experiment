{"code": "df = pd.DataFrame()\n    # Your Code Here\n    df['Category'] = [i[0] for i in list_of_pairs]\n    df['Value'] = MinMaxScaler().fit_transform([i[1] for i in list_of_pairs])\n    return df", "compilation_passed": true, "time": 0.0018301010131835938, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}
{"code": "df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    df['Value'] = MinMaxScaler().fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0033347606658935547, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(columns=['Category', 'Value'])\n\n    if len(list_of_pairs) == 0:\n        raise Exception(\"The input array is empty.\")\n\n    try:\n        df['Value'] = MinMaxScaler(feature_range=(-1, 1)).fit_transform(pd.DataFrame([row[1] for row in list_of_pairs], columns=['Value']))\n        df['Category'] = pd.DataFrame(list_of_pairs, columns=['Category'])\n        return df\n    except ValueError:\n        raise ValueError(\"Values are not numeric.\")", "compilation_passed": true, "time": 0.002422809600830078, "tests_passed": false, "error": "ValueError"}
{"code": "if not list_of_pairs:\n        raise Exception(\"List is empty.\")\n    df = pd.DataFrame()\n    df[\"Category\"] = pd.DataFrame([(i[0], i[1]) for i in list_of_pairs])\n    df[\"Value\"] = pd.DataFrame([i[1] for i in list_of_pairs])\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1,1))\n    return df", "compilation_passed": true, "time": 0.0014531612396240234, "tests_passed": false, "error": "ValueError"}
{"code": "# Create a Pandas DataFrame from the given list of pairs\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n\n    # Check if Value column contains numeric values\n    if df['Value'].dtype != 'int' and df['Value'].dtype != 'float':\n        raise ValueError(\"Values are not numeric\")\n\n    # Normalize the values column using MinMaxScaler\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n\n    return df", "compilation_passed": true, "time": 0.003170013427734375, "tests_passed": true, "error": null}
{"code": "if list_of_pairs == []:\n        raise Exception(\"Input array is empty!\")\n\n    df = pd.DataFrame(columns = ['Category','Value'])\n\n    for pair in list_of_pairs:\n        if not isinstance(pair[1], (int, float)):\n            raise ValueError(\"Values must be numeric!\")\n        else:\n            df = df.append({'Category' : pair[0], 'Value': pair[1]}, ignore_index = True)\n\n    df['Value'] = df['Value'].clip(df['Value'].min(), df['Value'].max(), inplace = True)\n\n    df['Value'] = MinMaxScaler().fit_transform(df['Value'].to_numpy().reshape(-1, 1))\n    df.set_index(\"Category\", inplace = True)\n    return df", "compilation_passed": true, "time": 0.001458883285522461, "tests_passed": false, "error": "AttributeError"}
{"code": "if not list_of_pairs:\n        raise Exception(\"Input list is empty.\")\n\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n\n    for column in df.columns:\n        if df[column].dtype == 'object':\n            raise ValueError(f\"Values of {column} column are object types\")\n\n    scaler = MinMaxScaler()\n    scaler.fit(df[['Value']])\n    df['Value'] = scaler.transform(df[['Value']])\n\n    return df", "compilation_passed": true, "time": 0.0012080669403076172, "tests_passed": false, "error": "ValueError"}
{"code": "if len(list_of_pairs) == 0:\n        raise Exception(\"List is empty\")\n\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    df['Value'] = MinMaxScaler().fit_transform(df['Value'].values.reshape(-1,1))\n\n    return df", "compilation_passed": true, "time": 0.0029611587524414062, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(columns=['Category', 'Value'])\n    for row in list_of_pairs:\n        df.at[len(df), 'Category'] = row[0]\n        df.at[len(df), 'Value'] = MinMaxScaler().fit_transform([[row[1]]]).reshape(1, -1)[0][0]\n\n    return df", "compilation_passed": true, "time": 0.0028831958770751953, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(list_of_pairs)\n    df['Value'] = df.iloc[:, 1].apply(\n        lambda x: (x - df['Value'].min()) / (df['Value'].max() - df['Value'].min())\n    )\n    return df", "compilation_passed": true, "time": 0.0014188289642333984, "tests_passed": false, "error": "KeyError"}
{"code": "if not list_of_pairs:\n        raise Exception('The input array is empty.')\n\n    # Check that all the values are numeric\n    for pair in list_of_pairs:\n        if not isinstance(pair[1], (int, float)):\n            raise ValueError('Values are not numeric.')\n\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    scaler = MinMaxScaler()\n    df['Value'] = scaler.fit_transform(df['Value'].to_numpy().reshape(-1, 1))\n    df.set_index('Category', inplace=True)\n    return df", "compilation_passed": true, "time": 0.0016660690307617188, "tests_passed": false, "error": "KeyError"}
{"code": "df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n\n    minmaxscaler = MinMaxScaler()\n    df['Value'] = minmaxscaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0032379627227783203, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(list_of_pairs)\n    if df.empty:\n        raise Exception(\"Empty input array!\")\n\n    try:\n        df[\"Value\"] = pd.Series([float(i[1]) for i in df.values])\n    except ValueError as e:\n        raise ValueError(\"Values are not numeric!\")\n\n    min_max_scaler = MinMaxScaler(feature_range=(0, 1))\n    df[\"Value\"] = min_max_scaler.fit_transform(df.values[:, 1:2])\n    df.reset_index(drop=True), df\n    return df", "compilation_passed": true, "time": 0.0018210411071777344, "tests_passed": false, "error": "KeyError"}
{"code": "# your code goes here\n    list_of_pairs = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    list_of_pairs['Value'] = MinMaxScaler(feature_range=(-1, 1)).fit_transform(list_of_pairs.loc[:, \"Value\"].values.reshape(-1,1))\n    return list_of_pairs", "compilation_passed": true, "time": 0.0015249252319335938, "tests_passed": true, "error": null}
{"code": "if not list_of_pairs:\n        raise Exception('Empty list!')\n\n    df = pd.DataFrame({'Category': [], 'Value': []})\n    df['Category'] = [pair[0] for pair in list_of_pairs]\n    df['Value'] = pd.DataFrame(list_of_pairs).apply(lambda row: row[1])\n\n    if not df['Value'].isin(['int', 'float']).all():\n        raise ValueError('Values are not numeric')\n    else:\n        scaler = MinMaxScaler()\n        df['Value'] = scaler.fit_transform(df['Value'])\n\n    return df", "compilation_passed": true, "time": 0.0017409324645996094, "tests_passed": false, "error": "ValueError"}
{"code": "df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    df['Value'] = MinMaxScaler(feature_range=(0, 1)).fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.003350973129272461, "tests_passed": true, "error": null}
{"code": "list_of_pairs = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n    list_of_pairs.loc[:, 'Value'] = pd.to_numeric(list_of_pairs.loc[:, 'Value'])\n    if pd.isnull(list_of_pairs.loc[:, 'Value']).any():\n        raise ValueError(\"Values are not numeric!\")\n    if len(list_of_pairs.loc[:, 'Value']) == 0:\n        raise Exception(\"Input array is empty!\")\n\n    df_norm = list_of_pairs.copy()\n    df_norm = df_norm.set_index(\"Category\")\n    df_norm = df_norm.rename(columns={\"Value\": \"Value_norm\"})\n    df_norm = MinMaxScaler().fit_transform(df_norm.loc[:, ['Value_norm']])\n    df_norm = df_norm.round(6)\n    df_norm = df_norm.sort_values(by=\"Category\", inplace=False, ascending=", "compilation_passed": false, "time": 0.0002503395080566406, "tests_passed": false, "error": "SyntaxError"}
{"code": "df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    df['Value'] = MinMaxScaler().fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.003257274627685547, "tests_passed": true, "error": null}
{"code": "if list_of_pairs:\n        df = pd.DataFrame(list_of_pairs, columns=[\"Category\", \"Value\"])\n        df['Value'] = pd.to_numeric(df['Value'], downcast='float')\n        scaler = MinMaxScaler()\n        scaler.fit(df.Value.values.reshape(-1, 1))\n        df['Value'] = scaler.transform(df.Value.values.reshape(-1, 1))\n        return df\n    else:\n        raise Exception('List is empty')\n    raise NotImplementedError", "compilation_passed": true, "time": 0.0033521652221679688, "tests_passed": true, "error": null}
{"code": "if not list_of_pairs:\n        raise Exception('The list must contain at least one pair.')\n    if any(map(lambda x: not isinstance(x, tuple), list_of_pairs)):\n        raise ValueError('Values must be numeric')\n    df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    min_max_scaler = MinMaxScaler()\n    df['Value'] = min_max_scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0030570030212402344, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    df[\"Value\"] = pd.to_numeric(df[\"Value\"])\n    df = MinMaxScaler().fit_transform(df[[\"Value\"]])\n    df = pd.DataFrame(df, columns=[\"Value\"])\n    df[\"Category\"] = df.index\n    return df", "compilation_passed": true, "time": 0.0024688243865966797, "tests_passed": false, "error": "ValueError"}
{"code": "df = pd.DataFrame()\n    df['Category'] = [x[0] for x in list_of_pairs]\n\n    arr = np.array([x[1] for x in list_of_pairs])\n    if (np.issubdtype(arr.dtype, np.integer) or np.issubdtype(arr.dtype, np.floating) or np.issubdtype(arr.dtype, np.bool_)):\n        scaler = MinMaxScaler(copy=True, feature_range=(0, 1))\n        scaler.fit(arr)\n        arr_scaled = scaler.transform(arr)\n        df['Value'] = arr_scaled\n\n    else:\n        raise ValueError(\"Values should be numeric\")\n\n    return df", "compilation_passed": true, "time": 0.0014748573303222656, "tests_passed": false, "error": "NameError"}
{"code": "list_of_pairs = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    scaler = MinMaxScaler()\n    scaler.fit(list_of_pairs[['Value']])\n    list_of_pairs['Value'] = scaler.transform(list_of_pairs[['Value']])\n    return list_of_pairs", "compilation_passed": true, "time": 0.0063250064849853516, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame()\n    df[\"Category\"] = [item[0] for item in list_of_pairs]\n\n    if len(list_of_pairs) == 0:\n        raise Exception(\"The input array is empty.\")\n\n    for value in list_of_pairs:\n        if not str(value[1]).isnumeric():\n            raise ValueError(\"The values are not numeric.\")\n\n    df[\"Value\"] = pd.Series(MinMaxScaler().fit_transform([x[1] for x in list_of_pairs]))\n\n    return df", "compilation_passed": true, "time": 0.0014739036560058594, "tests_passed": false, "error": "ValueError"}
{"code": "df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    df['Value'] = df['Value'].astype(float)\n    df['Value'] = MinMaxScaler().fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0034270286560058594, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(list_of_pairs, columns=['Category', 'Value'])\n    scaler = MinMaxScaler(feature_range=(0, 1))\n    df['Value'] = scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.003239154815673828, "tests_passed": true, "error": null}
{"code": "data = []\n    if len(list_of_pairs) == 0:\n        raise Exception(\"Empty array\")\n\n    for pair in list_of_pairs:\n        category, value = pair\n        if not isinstance(value, (int, float)):\n            raise ValueError('Values must be numeric')\n        data.append([category, value])\n\n    df = pd.DataFrame(data=data, columns=['Category', 'Value'])\n    min_max_scaler = MinMaxScaler()\n    df['Value'] = min_max_scaler.fit_transform(df['Value'].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0029060840606689453, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(list_of_pairs)\n    df[\"Value\"] = MinMaxScaler().fit_transform(df.iloc[:, 1:])\n    df.set_index(\"Category\", inplace=True)\n    return df", "compilation_passed": true, "time": 0.00201416015625, "tests_passed": false, "error": "KeyError"}
