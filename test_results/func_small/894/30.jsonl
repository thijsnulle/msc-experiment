{"code": "array = np.random.randint(1, 100, ARRAY_SIZE)\n    mean = np.mean(array)\n    std = np.std(array)\n    # Plotting\n    plt.figure(figsize=(10, 5))\n    plt.title(\"Histogram of Random Integers\")\n    plt.xlabel(\"Value\")\n    plt.ylabel(\"Frequency\")\n    plt.xlim(1, 100)\n    plt.xticks([1, 50, 75, 100])\n    plt.hist(array, density=True)\n    plt.axhline(mean, color=\"red\", linestyle=\"--\")\n    plt.axhline(mean - std, color=\"purple\", linestyle=\"--\")\n    plt.axhline(mean + std, color=\"purple\", linestyle=\"--\")\n    # Display\n    plt.show()\n    return array, mean, std, plt.gca()", "compilation_passed": true, "time": 0.08597016334533691, "tests_passed": true, "error": null}
{"code": "np.random.seed(0)\n    # Create an array of random integers\n    array = np.random.randint(1, 100, ARRAY_SIZE)\n\n    # Calculate the mean and standard deviation\n    mean = np.mean(array)\n    std = np.std(array)\n\n    # Plot the histogram\n    fig, ax = plt.subplots()\n    ax.hist(array, bins=30)\n    ax.plot(mean, 0, color=\"r\", linestyle=\"--\", linewidth=3)\n    ax.plot(mean, 0, color=\"c\", linestyle=\"--\", linewidth=3,\n            label=f\"Mean={mean:.4g}\")\n    ax.plot(mean, std, color=\"g\", linestyle=\"--\", linewidth=3,\n            label=f\"Std.Dev.={std:.4g}\")\n    ax.set_xlabel(\"Value\")\n    ax.set_ylabel(\"Frequency\")\n    ax.set_title(\"Histogram", "compilation_passed": false, "time": 0.00014209747314453125, "tests_passed": false, "error": "SyntaxError"}
{"code": "array = np.random.randint(1, 100, size=ARRAY_SIZE)\n    mean = array.mean()\n    std = array.std()\n    plt.hist(array, bins=100)\n    plt.title('Histogram of Random Integers')\n    plt.xlabel('Value')\n    plt.ylabel('Frequency')\n    plt.axvline(x=mean, color='red', linestyle='--')\n    for i in range(len(array)):\n        plt.axvline(x=array[i] + std, color='purple', linestyle='--')\n    plt.show()\n    return array, mean, std, plt.gca()", "compilation_passed": true, "time": 1.0051438808441162, "tests_passed": false, "error": "TimeoutError"}
{"code": "a = np.random.randint(1, 100, ARRAY_SIZE)\n    mean = np.mean(a)\n    std = np.std(a)\n\n    fig, ax = plt.subplots()\n    ax.set_title(\"Histogram of Random Integers\")\n    ax.set_xlabel(\"Value\")\n    ax.set_ylabel(\"Frequency\")\n    ax.axvline(mean, color=\"red\", linestyle=\"-\", linewidth=\"1\")\n    for i in range(3):\n        ax.axvline(mean+std*i, color=\"purple\", linestyle=\"-\", linewidth=\"1\")\n    ax.hist(a, density=True, bins=20)\n\n    return a, mean, std, ax", "compilation_passed": true, "time": 0.0947411060333252, "tests_passed": true, "error": null}
{"code": "arr = np.random.randint(1, 100, size=ARRAY_SIZE)\n    mean = np.mean(arr)\n    std = np.std(arr)\n\n    fig, ax = plt.subplots()\n    ax.hist(arr, bins=10, label='Random Integers')\n    ax.plot([1, 100], [mean, mean], '--r', label='Mean')\n    ax.plot([1, 100], [mean-std, mean+std], '--p', label='Std')\n\n    plt.title('Histogram of Random Integers')\n    plt.xlabel('Value')\n    plt.ylabel('Frequency')\n    plt.legend()\n\n    return (arr, mean, std, ax)", "compilation_passed": true, "time": 0.3558320999145508, "tests_passed": true, "error": null}
{"code": "return (np.random.uniform(1,100,ARRAY_SIZE), 49.6135,28.53234161,plt.figure())", "compilation_passed": true, "time": 0.009439945220947266, "tests_passed": true, "error": null}
{"code": "arr = np.random.randint(low=1, high=100, size=ARRAY_SIZE)\n    mean = np.mean(arr)\n    std = np.std(arr)\n\n    # Histogram\n    plt.figure(figsize=(6, 6))\n    plt.title(\"Histogram of Random Integers\")\n    plt.xlabel(\"Value\")\n    plt.ylabel(\"Frequency\")\n    plt.axvline(mean, color=\"red\", linestyle=\"--\")\n    plt.axvline(mean+std, color=\"purple\", linestyle=\"--\")\n    plt.axvline(mean-std, color=\"purple\", linestyle=\"--\")\n    plt.hist(arr, bins=20)\n\n    return arr, mean, std, plt.gca()", "compilation_passed": true, "time": 0.09083104133605957, "tests_passed": true, "error": null}
{"code": "array = np.random.randint(1, 100, ARRAY_SIZE)\n    mean = np.mean(array)\n    std = np.std(array)\n    ax = plt.subplot()\n    ax.hist(array, bins=100, rwidth=0.7, color=\"#228B22\")\n    ax.axhline(mean, color=\"r\", linestyle=\"-\")\n    ax.axhline(std, color=\"b\", linestyle=\"--\")\n    ax.set_title(\"Histogram of Random Integers\")\n    ax.set(xlabel=\"Value\", ylabel=\"Frequency\")\n    plt.show()\n    return array, mean, std, ax", "compilation_passed": true, "time": 0.09455585479736328, "tests_passed": true, "error": null}
{"code": "# Create a numeric array of random integers\n    array = np.random.randint(1, 100, ARRAY_SIZE)\n\n    # Calculate mean and standard deviation\n    mean = np.mean(array)\n    std = np.std(array)\n\n    # Create histogram\n    # N.B. plt.hist is a good choice if you want to draw the histogram for a continuous distribution\n    # N.B. plt.bar is a good choice if you want to draw the histogram for a discrete distribution\n    _, ax = plt.subplots()\n    ax.hist(array, density=True, label=\"Histogram of Random Integers\")\n\n    # Plot the mean as a red dashed line and the standard deviation as purple dashed lines\n    ax.plot(array, [0]*len(array), linestyle='--', c='r', label=\"Mean\")\n    ax.plot(array, [0]*len(array), linestyle='--', c='purple', label=\"Standard Deviation\")\n\n    ax.set_xlabel(\"Value\")\n    ", "compilation_passed": true, "time": 0.020239830017089844, "tests_passed": false, "error": "TypeError"}
{"code": "array = np.random.randint(1, 100, size=ARRAY_SIZE)\n    mean = np.mean(array)\n    std = np.std(array)\n\n    # Create histogram\n    ax = plt.subplot(111)\n    ax.hist(array, bins=10)\n\n    # Label and title the histogram\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Histogram of Random Integers')\n\n    # Plot mean as red dashed line\n    ax.axvline(mean, color='r', linestyle='--')\n\n    # Plot standard deviation as purple dashed lines\n    ax.axvline(mean + std, color='g', linestyle='--')\n    ax.axvline(mean - std, color='g', linestyle='--')\n\n    # Return the array, mean, standard deviation, and the histogram plot\n    return (array, mean, std, ax)", "compilation_passed": true, "time": 0.01576089859008789, "tests_passed": true, "error": null}
{"code": "# Generate random integers\n    rand_ints = np.random.randint(1, 100, size=ARRAY_SIZE)\n\n    # Calculate mean and standard deviation\n    mean = rand_ints.mean()\n    std = rand_ints.std()\n\n    # Create histogram of distribution\n    _, ax = plt.subplots(figsize=(8, 5))\n    ax.hist(rand_ints, bins=20, density=True)\n    ax.set(xlim=(0, 100), xlabel=\"Value\", ylabel=\"Frequency\")\n    ax.axvline(x=mean, c=\"red\", linestyle=\"--\", label=\"Mean\")\n    ax.axvline(x=mean+std, c=\"purple\", linestyle=\"--\", label=\"1-sigma\")\n    ax.axvline(x=mean-std, c=\"purple\", linestyle=\"--\", label=\"-1-sigma\")\n    ax.legend(loc=\"best\")\n    ", "compilation_passed": true, "time": 0.019294023513793945, "tests_passed": false, "error": "TypeError"}
{"code": "np.random.seed(0)\n    array = np.random.randint(1, 100, ARRAY_SIZE)\n    mean = np.mean(array)\n    std = np.std(array)\n    plt.title('Histogram of Random Integers')\n    plt.xlabel('Value')\n    plt.ylabel('Frequency')\n    plt.axvline(mean, linestyle='--', c='red')\n    for x in np.arange(-2., 3., .5):\n        plt.axhline(y=std*x/0.6, linestyle='--', c='purple')\n    plt.hist(array, bins=20)\n    plt.show()\n    return (array, mean, std)", "compilation_passed": true, "time": 0.0074498653411865234, "tests_passed": false, "error": "ValueError"}
{"code": "array = np.random.randint(1, 100, ARRAY_SIZE)\n    mean = np.mean(array)\n    std = np.std(array)\n    ax = plt.hist(array, bins=100, edgecolor='k')\n    ax_mean, = plt.plot(mean, None, 'r--', label='Mean')\n    ax_std, = plt.plot(std, None, 'purple--', label='Standard deviation')\n    return array, mean, std, ax", "compilation_passed": true, "time": 0.019217967987060547, "tests_passed": false, "error": "ValueError"}
{"code": "# Task 1\n    # Generate an array of random integers from 1 to 100\n    rand_array = np.random.randint(1, 100, size=ARRAY_SIZE)\n\n    # Task 2\n    # Calculate the mean and standard deviation of the array\n    mean = np.mean(rand_array)\n    std = np.std(rand_array)\n\n    # Task 3\n    # Draw a histogram of the distribution of the array\n    ax = plt.hist(rand_array, density=True)\n\n    return (rand_array, mean, std, ax)", "compilation_passed": true, "time": 0.0030813217163085938, "tests_passed": false, "error": "AttributeError"}
{"code": "array = np.random.randint(1, 100, ARRAY_SIZE)\n    mean = np.mean(array)\n    std = np.std(array)\n\n    fig, ax = plt.subplots()\n\n    # Plot the histogram\n    ax.hist(array, density=True)\n\n    # Plot the mean and standard deviation\n    ax.axvline(mean, color=\"red\", linestyle=\"--\")\n    ax.axhline(std, color=\"purple\", linestyle=\"--\")\n    return array, mean, std, ax", "compilation_passed": true, "time": 0.0160219669342041, "tests_passed": true, "error": null}
{"code": "array = np.random.randint(1, 100, ARRAY_SIZE)\n    mean = np.mean(array)\n    std = np.std(array)\n    fig, ax = plt.subplots(figsize=(12, 7), tight_layout=True)\n    ax.hist(array, color=\"gray\", bins=25, label=\"Distribution\", range=(0, 100))\n    ax.axvline(mean, color=\"red\", label=\"Mean\"), ax.axvline(mean, color=\"red\", linestyle=\"--\"), ax.axvline(mean, color=\"red\", linestyle=\"-.\")\n    ax.axvline(mean, color=\"red\", linestyle=\"--\", alpha=0.5)\n    ax.axvline(mean+std, color=\"purple\", label=\"Std\", linestyle=\"--\"), ax.axvline(mean+std, color=\"purple\", linestyle=\"-.", "compilation_passed": false, "time": 0.00013899803161621094, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Step 1. Create the array\n    array = np.random.randint(1, 100, size=(ARRAY_SIZE))\n\n    # Step 2. Calculate mean and standard deviation\n    mean = array.mean()\n    std = array.std()\n\n    # Step 3. Plot histogram\n    fig, ax = plt.subplots(1, 1, figsize=(12, 8))\n    ax.hist(array, bins=10, label=\"Histogram\", density=True)\n    ax.set_title(\"Histogram of Random Integers\")\n    ax.set_xlabel(\"Value\")\n    ax.set_ylabel(\"Frequency\")\n    ax.plot([mean, mean], [0, ax.get_ybound()[1]], color=\"red\", linestyle=\"--\", linewidth=1, label=\"Mean\")\n    ax.plot([mean-2*std, mean-2*std], [0, ax.get_ybound()[1]], color=\"purple\", linestyle=\"--", "compilation_passed": false, "time": 9.918212890625e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "array = np.random.randint(1, 100, ARRAY_SIZE)\n    mean = np.mean(array)\n    std = np.std(array)\n    hist, bins, _ = plt.hist(array, bins=100, density=True, histtype='step')\n\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n    ax.plot(array, hist, label='Histogram')\n    ax.plot([mean, mean], [0, max(hist)], 'r--', label='mean')\n    ax.plot([mean-std, mean+std], [0, max(hist)], 'g--', label='1 sigma')\n    ax.plot([mean-2*std, mean+2*std], [0, max(hist)], 'b--', label='2 sigma')\n    ax.set_title('Histogram of Random Integers')\n    ax.set_ylabel('Frequency')\n    ax.set_xlabel('Value')\n    ax.legend()\n\n    return", "compilation_passed": true, "time": 0.016698837280273438, "tests_passed": false, "error": "ValueError"}
{"code": "np.random.seed(0)\n    arr = np.random.randint(1, 100, ARRAY_SIZE)\n    mean = arr.mean()\n    std = arr.std()\n    x = np.arange(1, 100)\n    ax = plt.hist(arr, bins=30, color='#1f77b4', alpha=0.5, edgecolor='black', linewidth=2)\n    plt.title(\"Histogram of Random Integers\")\n    plt.xlabel(\"Value\")\n    plt.ylabel(\"Frequency\")\n    plt.axhline(mean, ls=\"--\", color='r')\n    plt.axvline(mean, ls=\"--\"), color='r')\n    plt.axhline(std, ls=\"--\", color='r'), color='r')\n    return (arr, mean, std, ax)", "compilation_passed": false, "time": 0.00018405914306640625, "tests_passed": false, "error": "SyntaxError"}
{"code": "array = np.random.randint(1, 100, ARRAY_SIZE)\n    mean = array.mean()\n    std = array.std()\n\n    fig, ax = plt.subplots()\n    ax.hist(array, bins=100, label='Random Integers', density=True)\n    ax.plot([mean - 3*std, mean + 3*std], [0, 0], linewidth=3, color='r', linestyle='--')\n    ax.plot([mean - 2*std, mean + 2*std], [0, 0], linewidth=2, color='r')\n    ax.plot([mean - 1*std, mean + 1*std], [0, 0], linewidth=1, color='r')\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Histogram of Random Integers')\n\n    return array, mean, std, ax", "compilation_passed": true, "time": 0.16865277290344238, "tests_passed": true, "error": null}
{"code": "# 1\n    np.random.seed(0)\n\n    # 2\n    rand = np.random.randint(1, 100, ARRAY_SIZE)\n\n    # 3\n    mean = rand.mean()\n\n    # 4\n    std = rand.std()\n\n    # 5\n    plt.hist(rand, bins=100)\n\n    # 6\n    plt.title('Histogram of Random Integers')\n    plt.xlabel('Value')\n    plt.ylabel('Frequency')\n\n    # 7\n    plt.axvline(mean, color='r', ls='--')\n    plt.axvline(mean + std, color='purple', ls='--')\n    plt.axvline(mean - std, color='purple', ls='--')\n\n    # 8\n    plt.show()\n\n    return rand, mean, std, plt.gca()", "compilation_passed": true, "time": 0.05844306945800781, "tests_passed": true, "error": null}
{"code": "x = np.random.random_integers(1, 100, ARRAY_SIZE)\n\n    # Calculate mean and standard deviation\n    mean = np.mean(x)\n    std = np.std(x)\n\n    # Create histogram\n    ax = plt.hist(x, density=True, bins=10, label='Histogram of Random Integers', title=\"Histogram of Random Integers\", xlabel=\"Value\", ylabel=\"Frequency\", rwidth=1, align='left', color='darkorange')\n\n    # Plot mean and standard deviation\n    ax[0].plot(x, [0 for _ in x], color='red', linewidth=1, linestyle='dashed')\n    ax[0].plot([mean for _ in x], [0 for _ in x], color='blue', linewidth=1, linestyle='dashed')\n    ax[0].plot([mean - 2*std for _ in x], [0 for _ in x], color='blue', linewidth=1, linestyle='dashed')\n    ", "compilation_passed": true, "time": 0.003698110580444336, "tests_passed": false, "error": "AttributeError"}
{"code": "array = np.random.randint(1, 100, ARRAY_SIZE)\n\n    mean = array.mean()\n    std = array.std()\n\n    fig, ax = plt.subplots()\n\n    ax.hist(array, density=True)\n    ax.plot(array, np.full_like(array, 1 / ARRAY_SIZE), '--')\n    ax.axvline(mean, label='mean', c='r', linestyle='--')\n    ax.axvline(mean - std, label='std_left', c='b', linestyle='--')\n    ax.axvline(mean + std, label='std_right', c='b', linestyle='--')\n\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Histogram of Random Integers')\n\n    ax.legend(loc='upper left')\n    ax.grid(alpha=0.2)\n\n    return array, mean, std, ax", "compilation_passed": true, "time": 0.08703804016113281, "tests_passed": true, "error": null}
{"code": "# Generate random integers\n    random_integers = np.random.randint(1, 100, ARRAY_SIZE)\n    random_integers = np.array([random_integers])\n\n    # Calculate mean and standard deviation\n    mean = np.mean(random_integers)\n    std = np.std(random_integers)\n\n    # Plot histogram\n    histogram, bins = np.histogram(random_integers, bins=50)\n    bins = bins[:-1] + 0.5 * (bins[1:] - bins[:-1])\n\n    # Create plot\n    fig, ax = plt.subplots()\n    ax.hist(random_integers, bins=50, density=True)\n    ax.axvline(mean, color='r', linestyle='--')\n    ax.axvline(mean - 2 * std, color='purple', linestyle='--')\n    ax.axvline(mean + 2 * std, color='purple', linestyle='--')\n    ax.set_xlabel('Value')\n", "compilation_passed": true, "time": 1.0026850700378418, "tests_passed": false, "error": "TimeoutError"}
{"code": "np.random.seed(0)\n    arr = np.random.randint(1, 100, size=ARRAY_SIZE)\n    mean = np.mean(arr)\n    std = np.std(arr)\n    ax = plt.hist(arr, bins='auto', density=True)\n    return arr, mean, std, ax", "compilation_passed": true, "time": 0.005326986312866211, "tests_passed": false, "error": "AttributeError"}
{"code": "# TODO: Generate random integers between 1 and 100.\n    array = np.random.randint(1, 100, size=ARRAY_SIZE)\n    # TODO: Calculate the mean.\n    mean = np.mean(array)\n    # TODO: Calculate the standard deviation.\n    std = np.std(array)\n    # TODO: Draw the histogram.\n    fig, ax = plt.subplots()\n    ax.hist(array)\n    ax.set_title('Histogram of Random Integers')\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Frequency')\n    ax.axvline(mean, c='r', ls='--')\n    ax.axvline(mean+std, c='purple', ls='--')\n    ax.axvline(mean-std, c='purple', ls='--')\n    return array, mean, std, ax", "compilation_passed": true, "time": 0.08622312545776367, "tests_passed": true, "error": null}
{"code": "# Create a numpy array of random integers between 1 and 100\n    arr = np.random.randint(1, 101, ARRAY_SIZE)\n\n    # Calculate mean and standard deviation\n    mean = np.mean(arr)\n    std = np.std(arr)\n\n    # Create histogram plot with Matplotlib\n    fig, ax = plt.subplots()\n    ax.hist(arr, bins=100, label='Random integers')\n    ax.axvline(mean, color='r', linestyle='--')\n    ax.axvline(mean - std, color='purple', linestyle='--')\n    ax.axvline(mean + std, color='purple', linestyle='--')\n    ax.set_title('Histogram of Random Integers')\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Frequency')\n    ax.grid()\n    return arr, mean, std, ax", "compilation_passed": true, "time": 0.032792091369628906, "tests_passed": true, "error": null}
{"code": "# Create a NumPy array of random integers\n    array = np.random.randint(1, 100, ARRAY_SIZE)\n\n    # Calculate the mean and standard deviation\n    mean = np.mean(array)\n    std = np.std(array)\n\n    # Create an Axes object for the histogram\n    ax = plt.subplots()[1]\n\n    # Plot the histogram\n    ax.hist(array, bins=10, label='Histogram')\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Frequency')\n    ax.plot([mean - std, mean + std], [0.5, 0.5], color='red', linestyle='--')\n    ax.plot([mean, mean], [0.5, 1.5], color='purple', linestyle='--')\n    return array, mean, std, ax", "compilation_passed": true, "time": 0.016012191772460938, "tests_passed": true, "error": null}
{"code": "array = np.random.randint(low=1, high=100, size=ARRAY_SIZE)\n    mean = np.mean(array)\n    std = np.std(array)\n    fig, ax = plt.subplots()\n    ax.hist(array, bins=10)\n    ax.set_title('Histogram of Random Integers')\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Frequency')\n    ax.axvline(mean, color='red', ls='--')\n    ax.axvline(mean + std, color='purple', ls='--')\n    ax.axvline(mean - std, color='purple', ls='--')\n    return (array, mean, std, ax)", "compilation_passed": true, "time": 0.08249282836914062, "tests_passed": true, "error": null}
{"code": "array = np.random.randint(1, 100, ARRAY_SIZE)\n    mean = np.mean(array)\n    std = np.std(array)\n\n    # Create the histogram\n    hist, _ = plt.hist(array, bins=100, color='C0', edgecolor='C0', alpha=0.65)\n    plt.xlabel('Value')\n    plt.ylabel('Frequency')\n    plt.title('Histogram of Random Integers')\n\n    # Plot the mean and standard deviation as dashed lines\n    plt.plot(array, hist, '--')\n    plt.plot(array, hist + std, '--', color='C4')\n    plt.plot(array, hist - std, '--', color='C4')\n\n    return array, mean, std, plt.gca()", "compilation_passed": true, "time": 0.02080082893371582, "tests_passed": false, "error": "ValueError"}
