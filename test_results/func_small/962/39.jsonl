{"code": "# Create Path objects from the input strings\n    source_directory_path = Path(source_directory)\n    target_directory_path = Path(target_directory)\n\n    # Check that source directory exists\n    if not source_directory_path.is_dir():\n        raise FileNotFoundError(f\"Source directory '{source_directory}' does not exist.\")\n\n    # Create the target directory if it does not exist\n    if not target_directory_path.exists():\n        target_directory_path.mkdir(parents=True)\n\n    # Initialize counters\n    number_of_moves = 0\n    number_of_failed_moves = 0\n\n    # Find all files matching the specified extensions\n    for file_path in source_directory_path.rglob('*.txt'):\n        if file_path.is_file():\n            # Get the file name and extension\n            file_name = file_path.name.lower()\n            file_extension = os.path.splitext(file_path)[1].lower()\n\n            # Construct the target file name\n            target_name =", "compilation_passed": false, "time": 0.00022912025451660156, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Check that source_directory exists and is a valid directory\n    source_path = Path(source_directory)\n    if not source_path.exists():\n        raise FileNotFoundError(f\"Source directory '{source_directory}' does not exist.\")\n\n    # Check that target_directory exists and create it if it doesn't\n    target_path = Path(target_directory)\n    if not target_path.exists():\n        target_path.mkdir(parents=True, exist_ok=True)\n\n    # Initialize variable for counting files moved successfully\n    success_count = 0\n\n    # Iterate through files in source directory\n    for file_path in source_path.rglob('*'):\n        if file_path.is_file() and file_path.suffix in ('.txt', '.docx', '.xlsx', '.csv'):\n            # Construct target file path from original path\n            target_file_path = Path(target_path, file_path.name)\n\n            # Check if file already exists and rename if necessary\n            if target_file_path", "compilation_passed": false, "time": 0.0002219676971435547, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Get a list of source files\n    source_files = glob.glob(os.path.join(source_directory, '**/*.txt', '**/*.docx', '**/*.xlsx', '**/*.csv'), recursive=True)\n\n    # Create target directory if it doesn't exist\n    Path(target_directory).mkdir(parents=True, exist_ok=True)\n\n    # Move files to target directory\n    num_moved = 0\n    for source_file in source_files:\n        basename, extension = os.path.splitext(os.path.basename(source_file))\n        destination = os.path.join(target_directory, f'{basename}-{num_moved + 1}{extension}')\n        if os.path.exists(destination):\n            # Rename if a file with same name already exists\n            destination = os.path.join(target_directory, f'{basename}-{num_moved + 2}{extension}')\n        num_moved += 1\n        shutil.move(source_", "compilation_passed": false, "time": 0.00023984909057617188, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not os.path.isdir(source_directory):\n        raise FileNotFoundError(f\"Source directory '{source_directory}' not found.\")\n\n    source_directory = Path(source_directory)\n    target_directory = Path(target_directory)\n\n    if not target_directory.exists():\n        target_directory.mkdir(parents=True)\n\n    def is_valid_file(path: Path):\n        return (path.is_file() and\n                path.suffix in ['.txt', '.docx', '.xlsx', '.csv'])\n\n    def rename(path: Path, extension_index: int) -> Path:\n        original_name, extension = path.stem, path.suffix\n        new_name = f'{original_name}-{extension_index}{extension}'\n        new_path = Path(os.path.join(target_directory, new_name))\n        return new_path if is_valid_file(new_path) else new_path.with_name(new_name)\n\n    def move_files() -> int:\n", "compilation_passed": false, "time": 0.00025963783264160156, "tests_passed": false, "error": "IndentationError"}
{"code": "def find_files(src: Path, extensions: tuple) -> list:\n        return [x for x in src.glob(f\"*.{'|'.join(extensions)}\") if x.is_file()]\n\n    source_directory_path = Path(source_directory)\n    if not source_directory_path.exists():\n        raise FileNotFoundError(f\"{source_directory_path.name} does not exist\")\n\n    target_directory_path = Path(target_directory)\n    if not target_directory_path.exists():\n        target_directory_path.mkdir()\n\n    # get all files in the source directory\n    file_paths = find_files(source_directory_path, extensions=('.txt', '.docx', '.xlsx', '.csv'))\n\n    # move all files to target directory, handling naming conflicts by renaming duplicate files\n    counter = 0\n    for file_path in file_paths:\n        # get the filename and extension\n        filename = file_path.stem\n        extension = file_path.suffix\n\n        #", "compilation_passed": true, "time": 0.002167940139770508, "tests_passed": true, "error": null}
{"code": "# Create a Path object for source_directory\n    source_directory_path = Path(source_directory)\n    # Check if the source_directory exists\n    if source_directory_path.exists():\n        # Create a Path object for the target_directory\n        target_directory_path = Path(target_directory)\n\n        if not target_directory_path.exists():\n            # If the target_directory does not exist, create it\n            target_directory_path.mkdir()\n\n        # Create a list to store filenames that have been processed\n        processed_filenames = []\n\n        # Iterate over all the files in source_directory\n        for filename in source_directory_path.iterdir():\n            # Get the file extension\n            extension = filename.suffix.lower()\n            # Skip if extension is not a supported file type\n            if extension not in ['.txt', '.docx', '.xlsx', '.csv']:\n                continue\n\n            # Get the filename without extension\n            base_name = filename.stem.lower()\n            # Get a list of files with the same base", "compilation_passed": true, "time": 0.0019750595092773438, "tests_passed": true, "error": null}
{"code": "source_directory = Path(source_directory)\n    if not source_directory.exists():\n        raise FileNotFoundError(f\"{source_directory} does not exist.\")\n\n    # Filter files by extensions\n    file_extensions = [\".txt\", \".docx\", \".xlsx\", \".csv\"]\n    files = [f for f in source_directory.iterdir() if f.suffix in file_extensions]\n\n    # Get number of files to move\n    n_files = len(files)\n\n    # Create target directory if it doesn't exist\n    target_directory = Path(target_directory).resolve()\n    target_directory.mkdir(parents=True, exist_ok=True)\n\n    # Move files to target directory\n    counter = 0\n    for file in files:\n        file = Path(file)\n        new_name = f\"{file.stem}-{counter + 1}{file.suffix}\"\n        new_file = Path(target_directory, new_name)\n        if new_file.exists():\n            new_file =", "compilation_passed": false, "time": 0.0002601146697998047, "tests_passed": false, "error": "SyntaxError"}
{"code": "source_directory_path = Path(source_directory)\n    if not source_directory_path.exists():\n        raise FileNotFoundError(f'Source directory {source_directory} does not exist')\n\n    file_extensions = ['.txt', '.docx', '.xlsx', '.csv']\n\n    file_count = 0\n    for source_path in source_directory_path.rglob('*'):\n        if source_path.is_file() and source_path.suffix in file_extensions:\n            original_file_name = source_path.name\n            original_file_name_without_extension = os.path.splitext(original_file_name)[0]\n            if os.path.exists(\n                os.path.join(\n                    target_directory,\n                    f'{original_file_name_without_extension}-{file_count + 1}{source_path.suffix}'\n                )\n            ):\n                file_count += 1\n            else:\n                shutil.move(\n                    source_path,\n                    os.", "compilation_passed": false, "time": 0.00023508071899414062, "tests_passed": false, "error": "SyntaxError"}
{"code": "file_list = glob.glob(source_directory + \"/*.txt*\")\n    file_list += glob.glob(source_directory + \"/*.docx*\")\n    file_list += glob.glob(source_directory + \"/*.xlsx*\")\n    file_list += glob.glob(source_directory + \"/*.csv*\")\n\n    if len(file_list) == 0:\n        print(\"No files found.\")\n        return 0\n\n    # Iterate through each file in the source directory\n    num_files = 0\n    for file in file_list:\n\n        # Extract the original file name\n        original_name = Path(file).stem\n        # Convert the name to a Path object\n        path = Path(file)\n        # Split the path into path components\n        path_components = path.parts\n        # Remove the source directory from the path components\n        path_components = path_components[1:]\n        # Join the path components to form the new path\n        new_path = Path(os.path.join(*path_components))", "compilation_passed": true, "time": 0.0048961639404296875, "tests_passed": true, "error": null}
{"code": "# Check if source_directory exists.\n    source_directory_path = Path(source_directory)\n    if not source_directory_path.is_dir():\n        raise FileNotFoundError(f\"Source directory '{source_directory}' does not exist.\")\n\n    # Create target directory if it does not exist.\n    target_directory_path = Path(target_directory)\n    target_directory_path.mkdir(exist_ok=True, parents=True)\n\n    # Iterate through files in source directory\n    file_counter = 0\n    for source_file in source_directory_path.glob('*'):\n        # Only process files that match the extensions\n        if source_file.is_file() and source_file.suffix in {'.txt', '.docx', '.xlsx', '.csv'}:\n            # Get the source file path\n            source_path = Path(source_file)\n\n            # Get target directory name from the source file name\n            target_directory_name = source_path.name.split('.')[0]\n\n            # Create a", "compilation_passed": true, "time": 0.001911163330078125, "tests_passed": true, "error": null}
{"code": "# Check if source_directory exists\n    if not os.path.exists(source_directory):\n        raise FileNotFoundError(f\"Source directory {source_directory} does not exist.\")\n\n    # Create target directory if it doesn't exist\n    if not os.path.exists(target_directory):\n        os.makedirs(target_directory)\n\n    # Define the list of files to move\n    files_to_move = glob.glob(f\"{source_directory}/**/*.txt\", recursive=True) + \\\n                    glob.glob(f\"{source_directory}/**/*.docx\", recursive=True) + \\\n                    glob.glob(f\"{source_directory}/**/*.xlsx\", recursive=True) + \\\n                    glob.glob(f\"{source_directory}/**/*.csv\", recursive=True)\n\n    # Iterate through the files to move\n    num_files_moved = 0\n    for file in files_to_move:\n        try:\n            # Get the name of the original file\n            original_file_", "compilation_passed": false, "time": 0.00021576881408691406, "tests_passed": false, "error": "SyntaxError"}
{"code": "source_directory = Path(source_directory)\n    target_directory = Path(target_directory)\n\n    # Check if source directory exists\n    if not source_directory.exists():\n        raise FileNotFoundError(f\"{source_directory.name} does not exist.\")\n\n    # Get all files with specific extensions in source directory\n    files = glob.glob(\n        os.path.join(\n            source_directory,\n            \"*.txt\"\n        )\n    )\n    files.extend(\n        glob.glob(\n            os.path.join(\n                source_directory,\n                \"*.docx\"\n            )\n        )\n    )\n    files.extend(\n        glob.glob(\n            os.path.join(\n                source_directory,\n                \"*.xlsx\"\n            )\n        )\n    )\n    files.extend(\n        glob.glob(\n            os.path.join(\n                source_directory,\n                \"*.csv\"\n            )\n        )\n    )\n\n    # Check if target directory exists\n    if not target_directory", "compilation_passed": false, "time": 0.00019884109497070312, "tests_passed": false, "error": "SyntaxError"}
{"code": "try:\n        source_directory = Path(source_directory).resolve().absolute()\n        target_directory = Path(target_directory).resolve().absolute()\n    except FileNotFoundError:\n        return 0\n\n    files = []\n    for file in glob.glob(f\"{source_directory}/**/*.{['txt', 'docx', 'xlsx', 'csv']}\", recursive=True):\n        if not os.path.isfile(file):\n            continue\n        files.append(file)\n\n    if not files:\n        return 0\n\n    for file in files:\n        filename = file.name\n        file_extension = os.path.splitext(filename)[-1]\n        basename = os.path.splitext(filename)[0]\n        basename = os.path.splitext(basename)[0]\n\n        file_path = Path(file)\n        destination = target_directory / file_path.parent\n        destination.mkdir(exist_ok=True, parents=True)\n\n        target_file = destination / f", "compilation_passed": true, "time": 0.004513978958129883, "tests_passed": true, "error": null}
{"code": "# Validate source and target directories\n    source_directory_path = Path(source_directory).resolve()\n    target_directory_path = Path(target_directory)\n\n    if not source_directory_path.exists():\n        raise FileNotFoundError(f\"Source directory {source_directory} not found.\")\n    if not target_directory_path.is_dir():\n        target_directory_path.mkdir()\n\n    # Get file paths recursively matching the specified extensions\n    extensions = ['.txt', '.docx', '.xlsx', '.csv']\n    file_paths = glob.glob(source_directory_path / '**/*.txt', recursive=True) + \\\n        glob.glob(source_directory_path / '**/*.docx', recursive=True) + \\\n        glob.glob(source_directory_path / '**/*.xlsx', recursive=True) + \\\n        glob.glob(source_directory_path / '**/*.csv', recursive=True)\n\n    # Get file names without extensions\n    original_file_", "compilation_passed": true, "time": 0.002445220947265625, "tests_passed": false, "error": "TypeError"}
{"code": "source_directory = Path(source_directory)\n    target_directory = Path(target_directory)\n\n    if not source_directory.exists():\n        raise FileNotFoundError(f\"Source directory '{source_directory}' does not exist.\")\n\n    if target_directory.exists():\n        print(f\"Target directory '{target_directory}' already exists.\")\n        print(\"Use `task_func('./source_folder', './target_folder')` to copy.\")\n        return 0\n\n    files_moved = 0\n\n    for path in source_directory.rglob(\"*.txt\"):\n        destination = target_directory / path.name\n\n        if destination.exists():\n            # If a file with the same name already exists, rename it.\n            base, ext = os.path.splitext(path.name)\n            destination = target_directory / f\"{base}-{files_moved}{ext}\"\n\n            while destination.exists():\n                base, ext = os.path.splitext(destination.name)\n                base, ext =", "compilation_passed": false, "time": 0.00026488304138183594, "tests_passed": false, "error": "SyntaxError"}
{"code": "counter = 0\n    source_directory = Path(source_directory)\n\n    # Check that source directory exists.\n    if not source_directory.exists():\n        raise FileNotFoundError(\n            f\"Source directory not found: {source_directory}.\")\n\n    # Check that target directory exists and create if it doesn't.\n    target_directory = Path(target_directory).resolve()\n    os.makedirs(target_directory, exist_ok=True)\n\n    # Scan files in source directory recursively and move them to target directory.\n    for root, _, files in os.walk(source_directory):\n        for file in files:\n            if file.endswith(\".txt\") or file.endswith(\".docx\") or file.endswith(\".xlsx\") or file.endswith(\".csv\"):\n                filepath = Path(root) / file\n                target_path = target_directory / f\"{filepath.stem}-{counter}.{filepath.suffix}\"\n                if target_path.exists():\n                ", "compilation_passed": false, "time": 0.00022077560424804688, "tests_passed": false, "error": "IndentationError"}
{"code": "source_directory = Path(source_directory)\n    target_directory = Path(target_directory)\n    if not source_directory.exists():\n        raise FileNotFoundError(f\"Source directory {source_directory.absolute()} does not exist.\")\n    if not target_directory.exists():\n        target_directory.mkdir(parents=True, exist_ok=True)\n    file_extensions = ['txt', 'docx', 'xlsx', 'csv']\n    for file in source_directory.rglob('*.*'):\n        if file.suffix.lower() in file_extensions:\n            target_path = target_directory / file.name\n            if target_path.exists():\n                target_path = target_path.with_name(f\"{file.name}-{str(target_path.stat().st_nlink).zfill(2)}.{file.suffix}\")\n            file.replace(target_path)", "compilation_passed": true, "time": 0.0020079612731933594, "tests_passed": true, "error": null}
{"code": "# Check if source directory exists\n    if not os.path.exists(source_directory):\n        raise FileNotFoundError(f\"Source directory not found: {source_directory}\")\n\n    # Get all file paths in source directory\n    files = []\n    for root, dirs, filenames in os.walk(source_directory):\n        for filename in filenames:\n            if filename.endswith(('.txt', '.docx', '.xlsx', '.csv')):\n                files.append(os.path.join(root, filename))\n\n    # Create target directory if it doesn't exist\n    if not os.path.exists(target_directory):\n        os.makedirs(target_directory)\n\n    # Move files to target directory, renaming if necessary\n    count = 0\n    for filepath in files:\n        base, ext = os.path.splitext(os.path.basename(filepath))\n        new_filename = f\"{base}-{count}{ext}\"\n        new_filepath = os.path.join(target_directory", "compilation_passed": false, "time": 0.0002570152282714844, "tests_passed": false, "error": "SyntaxError"}
{"code": "try:\n        source_directory = Path(source_directory).resolve()\n        target_directory = Path(target_directory)\n    except FileNotFoundError as e:\n        print(\"Source directory not found\", source_directory)\n        return 0\n\n    if not source_directory.is_dir():\n        print(\"Source directory is not a directory\", source_directory)\n        return 0\n\n    if not target_directory.is_dir():\n        target_directory.mkdir(parents=True, exist_ok=True)\n\n    file_names = []\n\n    for root, directories, files in os.walk(source_directory):\n        for file in files:\n            if file.endswith(('.txt', '.docx', '.xlsx', '.csv')):\n                file_names.append(file)\n\n    # Create a list of unique file names from the source directory\n    unique_file_names = [file for file in file_names if file not in file_names[:file_names.index(file)]]\n\n    # Get the name of", "compilation_passed": true, "time": 0.001977205276489258, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(source_directory):\n        raise FileNotFoundError(f\"Source folder not found: {source_directory}\")\n\n    # Create a target folder if it doesn't exist\n    if not os.path.isdir(target_directory):\n        os.makedirs(target_directory)\n\n    # Find files with the desired extensions\n    files = glob.glob(f\"{source_directory}/**/*.{('txt', 'docx', 'xlsx', 'csv')}\", recursive=True)\n    for file_path in files:\n        file_name = Path(file_path).stem\n        extension = Path(file_path).suffix\n\n        # Create a new file name based on the original name\n        new_file_name = f\"{file_name}-{next_file_index}{extension}\"\n\n        # Move the file to the target folder\n        target_file_path = os.path.join(target_directory, new_file_name)\n        shutil.move(file_path, target_file_path)\n\n        #", "compilation_passed": true, "time": 0.002064943313598633, "tests_passed": true, "error": null}
{"code": "def clean_name(original_name: str, extension: str, file_names: list):\n        if len(file_names) > 1:\n            for i, name in enumerate(file_names):\n                if not name.lower().startswith(original_name.lower()):\n                    continue\n                file_name = name.split(\"-\")[-1].split(\".\")[-1]\n                if file_name.lower() != extension.lower():\n                    continue\n                new_name = original_name + \"-\" + str(i+1)\n                file_names[file_names.index(name)] = new_name\n                return new_name\n        return original_name\n\n    if not os.path.exists(source_directory):\n        raise FileNotFoundError(f\"Directory {source_directory} not found\")\n    source_directory = Path(source_directory).resolve().absolute()\n    target_directory = Path(target_directory).resolve().absolute()\n\n    if not target_directory.exists():\n        target_directory.mk", "compilation_passed": true, "time": 0.0019538402557373047, "tests_passed": true, "error": null}
{"code": "# Create the target directory if it does not exist\n    Path(target_directory).mkdir(parents=True, exist_ok=True)\n\n    # List all files in the source directory\n    source_files = glob.glob(f\"{source_directory}/*.txt*\") + glob.glob(f\"{source_directory}/*.docx*\") + glob.glob(f\"{source_directory}/*.xlsx*\") + glob.glob(f\"{source_directory}/*.csv*\")\n\n    # Check if source_directory exists\n    if not os.path.isdir(source_directory):\n        raise FileNotFoundError(f\"{source_directory} is not a directory\")\n\n    # Move files to target directory\n    moved_count = 0\n    for source_file in source_files:\n        # Get the destination path\n        destination_path = Path(target_directory, Path(source_file).name)\n\n        # Check if there is a duplicate\n        if os.path.isfile(destination_path):\n            # Get the extension\n", "compilation_passed": false, "time": 0.00021600723266601562, "tests_passed": false, "error": "IndentationError"}
{"code": "# Ensure source directory exists\n    source_directory_path = Path(source_directory)\n    if not source_directory_path.is_dir():\n        raise FileNotFoundError(f\"{source_directory} is not a valid directory.\")\n\n    # Find all files matching the extension criteria in the source directory\n    files = glob.glob(str(source_directory_path / '**/*.txt'), recursive=True)\n    files.extend(glob.glob(str(source_directory_path / '**/*.docx'), recursive=True))\n    files.extend(glob.glob(str(source_directory_path / '**/*.xlsx'), recursive=True))\n    files.extend(glob.glob(str(source_directory_path / '**/*.csv'), recursive=True))\n\n    # Calculate the number of files to move and the next available index to avoid naming conflicts\n    total_files = len(files)\n    target_directory_path = Path(target_directory)\n\n    if not target_directory_path.exists():\n        target_directory_path.mkdir(parents", "compilation_passed": false, "time": 0.00023293495178222656, "tests_passed": false, "error": "SyntaxError"}
{"code": "def __find_files(src_dir):\n        for file_path in Path(src_dir).rglob(\"*\"):\n            if file_path.is_file() and \\\n               any(extension in file_path.suffix for extension in ['.txt', '.docx', '.xlsx', '.csv']):\n                yield file_path\n\n    try:\n        files = __find_files(source_directory)\n    except FileNotFoundError:\n        print(f'Error: Directory \"{source_directory}\" does not exist.')\n        return 0\n\n    src_dir = os.path.abspath(source_directory)\n    target_dir = os.path.abspath(target_directory)\n\n    try:\n        os.makedirs(target_dir, exist_ok=True)\n    except FileExistsError:\n        pass\n\n    count = 0\n\n    for file in files:\n        src_path = file.relative_to(src_dir)\n        dst_path = Path(target_dir) / src_path.", "compilation_passed": false, "time": 0.00024008750915527344, "tests_passed": false, "error": "SyntaxError"}
{"code": "source_directory = Path(source_directory)\n    if not source_directory.exists():\n        raise FileNotFoundError(f\"Source directory {source_directory} not found.\")\n\n    source_directory = source_directory.resolve()\n    target_directory = Path(target_directory).resolve()\n    target_directory.mkdir(parents=True, exist_ok=True)\n\n    extensions_to_copy = [\".txt\", \".docx\", \".xlsx\", \".csv\"]\n\n    moved_count = 0\n    for file_path in source_directory.rglob(\"*\"):\n        if file_path.is_file() and file_path.suffix in extensions_to_copy:\n            relative_file_path = file_path.relative_to(source_directory)\n            target_path = target_directory / relative_file_path\n\n            if target_path.exists():\n                target_filename = file_path.stem + \"-\" + str(moved_count) + file_path.suffix\n                target_path = target", "compilation_passed": true, "time": 0.0019321441650390625, "tests_passed": true, "error": null}
{"code": "# Check if source directory exists.\n    if not Path(source_directory).is_dir():\n        raise FileNotFoundError(f\"{source_directory} is not a directory\")\n\n    # Create target directory if it does not exist.\n    target_dir = Path(target_directory)\n    target_dir.mkdir(parents=True, exist_ok=True)\n\n    # Find all files with specific extensions in source directory\n    files_to_move: list[Path] = []\n    for extension in [\".txt\", \".docx\", \".xlsx\", \".csv\"]:\n        files_to_move.extend(Path(source_directory).rglob(f\"*.{extension}\"))\n\n    # Move files to target directory, renaming if necessary\n    moved_files = 0\n    for file in files_to_move:\n        destination = target_dir / file.name\n        if destination.exists():\n            destination_name, extension = os.path.splitext(destination.name)\n            for i in range(1, 100):", "compilation_passed": false, "time": 0.0002281665802001953, "tests_passed": false, "error": "IndentationError"}
{"code": "source_path = Path(source_directory)\n    if not source_path.exists():\n        raise FileNotFoundError(f\"Source directory {source_directory} not found.\")\n    target_path = Path(target_directory)\n    if not target_path.is_dir():\n        target_path.mkdir(parents=True)\n    source_extensions = ['.txt', '.docx', '.xlsx', '.csv']\n\n    counter = 0\n\n    for root, dirs, files in os.walk(source_path):\n        for filename in files:\n            if any(filename.endswith(ext) for ext in source_extensions):\n                file_path = Path(root, filename)\n                if target_path.joinpath(filename).exists():\n                    new_filename = f\"{filename}-{counter}.{file_path.suffix}\"\n                    new_file_path = Path(root, new_filename)\n                    target_path.joinpath(new_filename).unlink()\n                    shutil.move(file_path", "compilation_passed": false, "time": 0.0002639293670654297, "tests_passed": false, "error": "SyntaxError"}
{"code": "source_directory = Path(source_directory).resolve()\n    target_directory = Path(target_directory)\n    if not source_directory.exists():\n        raise FileNotFoundError(f\"Source directory not found: {source_directory}\")\n\n    # Scan the source directory\n    file_count = 0\n    for root, directories, files in os.walk(source_directory):\n        for filename in glob.iglob(os.path.join(root, '**', '*.txt', '*.docx', '*.xlsx', '*.csv'), recursive=True):\n            basename = os.path.basename(filename)\n            extension = os.path.splitext(basename)[1]\n            file_path = Path(filename)\n            if file_path.is_file():\n                # Check if a file with the same name already exists in the target directory\n                target_path = target_directory / basename\n                if target_path.exists():\n                    # Get the name of the file to be moved\n                    target_basename = str(file_", "compilation_passed": false, "time": 0.00022983551025390625, "tests_passed": false, "error": "SyntaxError"}
{"code": "files_moved = 0\n\n    if not os.path.exists(source_directory):\n        raise FileNotFoundError(\"Source folder not found.\")\n\n    for source_file in Path(source_directory).rglob(\"*.txt\"):\n\n        original_name = source_file.name.split(\".\")[0]\n\n        for target_file in Path(target_directory).glob(original_name + \"*.txt\"):\n            if target_file.is_file():\n                filename_parts = target_file.name.split(\"-\")\n                if len(filename_parts) > 1:\n                    if filename_parts[-1].isnumeric():\n                        suffix = int(filename_parts[-1]) + 1\n                        new_name = f\"{filename_parts[0]}-{suffix}.txt\"\n                        target_file.rename(Path(target_file).parent / new_name)\n\n        # Move the file to the target directory\n        shutil.move(source_file, Path(target_directory)", "compilation_passed": false, "time": 0.0002372264862060547, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Check if source_directory exists and is a directory.\n    if not os.path.isdir(source_directory):\n        raise FileNotFoundError(f\"{source_directory} is not a directory.\")\n\n    # Get a list of files with the specified extensions.\n    file_list = [file for file in glob.glob(os.path.join(source_directory, '**', '*.txt'))\n                    | glob.glob(os.path.join(source_directory, '**', '*.docx'))\n                    | glob.glob(os.path.join(source_directory, '**', '*.xlsx'))\n                    | glob.glob(os.path.join(source_directory, '**', '*.csv'))]\n\n    # Get the absolute paths of the files.\n    file_paths = [os.path.abspath(file) for file in file_list]\n\n    # Check if the target directory exists.\n    # If it does not exist, create it.\n    if not os.path.isdir(target_directory):\n", "compilation_passed": false, "time": 0.00019025802612304688, "tests_passed": false, "error": "IndentationError"}
