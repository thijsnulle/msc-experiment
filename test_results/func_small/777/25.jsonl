{"code": "dirs = []\n    for root, _, files in os.walk(directory):\n        for name in files:\n            match = re.match(pattern, name)\n            if match:\n                prefix, suffix = match.group(1, 2)\n                if not os.path.exists(os.path.join(root, prefix)):\n                    os.mkdir(os.path.join(root, prefix))\n                zip_path = os.path.join(root, name)\n                with zipfile.ZipFile(zip_path) as zf:\n                    zf.extractall(prefix)\n                dirs.append(prefix)\n\n    return dirs", "compilation_passed": true, "time": 0.0019030570983886719, "tests_passed": true, "error": null}
{"code": "directories = []\n    pattern = re.compile(pattern)\n    for root, dirs, files in os.walk(directory):\n        for file in files:\n            match = pattern.match(file)\n            if match is not None:\n                file_path = os.path.join(root, file)\n                directory_name = match.group(1)\n                directory_path = os.path.join(directory, directory_name)\n                if not os.path.exists(directory_path):\n                    os.makedirs(directory_path)\n                with zipfile.ZipFile(file_path, 'r') as zip_ref:\n                    zip_ref.extractall(directory_path)\n                directories.append(directory_name)\n    return directories", "compilation_passed": true, "time": 0.0018320083618164062, "tests_passed": true, "error": null}
{"code": "files = os.listdir(directory)\n    dirs = []\n    for f in files:\n        if re.search(pattern, f) and not re.search(pattern, directory):\n            zip_name = os.path.join(directory, f)\n            zip_file = zipfile.ZipFile(zip_name, 'r')\n            zip_file.extractall(directory)\n            zip_file.close()\n            dirs.append(directory)\n            os.remove(zip_name)\n    return dirs", "compilation_passed": true, "time": 0.0020270347595214844, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "dirs_to_extract = []\n\n    for filename in os.listdir(directory):\n        if re.match(pattern, filename):\n            prefix, suffix = filename.rsplit('-', 1)\n            dirname = f'{directory}/{prefix}'\n            if not os.path.exists(dirname):\n                os.makedirs(dirname)\n            with zipfile.ZipFile(f'{directory}/{filename}', 'r') as zf:\n                zf.extractall(dirname)\n            dirs_to_extract.append(dirname)\n\n    return dirs_to_extract, dirs_to_extract", "compilation_passed": true, "time": 0.0020890235900878906, "tests_passed": false, "error": "TypeError"}
{"code": "directories = []\n    for filename in os.listdir(directory):\n        if re.search(pattern, filename):\n            prefix, ext = os.path.splitext(filename)\n            dirname = os.path.join(directory, prefix)\n            directories.append(dirname)\n            with zipfile.ZipFile(os.path.join(directory, filename)) as zip_file:\n                zip_file.extractall(dirname)\n    return directories", "compilation_passed": true, "time": 0.002526998519897461, "tests_passed": true, "error": null}
{"code": "files = [f for f in os.listdir(directory) if re.match(pattern, f)]\n    dirs = []\n\n    for f in files:\n        name, ext = os.path.splitext(f)\n        prefix, suffix = os.path.split(name)\n\n        # Check if the extracted directory already exists\n        if not os.path.isdir(f\"{directory}/{prefix}\"):\n            os.makedirs(f\"{directory}/{prefix}\")\n\n        # Extract the file\n        with zipfile.ZipFile(f\"{directory}/{f}\", 'r') as zf:\n            zf.extractall(f\"{directory}/{prefix}\")\n            dirs.append(prefix)\n\n    return (dirs, files)", "compilation_passed": true, "time": 0.002138853073120117, "tests_passed": false, "error": "TypeError"}
{"code": "match = re.search(pattern, directory)\n    prefix = directory if match is None else match.group(1)\n    if not os.path.isdir(prefix):\n        os.makedirs(prefix)\n    for fname in os.listdir(directory):\n        if re.search(pattern, fname):\n            print(f\"Unzip file: {fname} to directory: {prefix}\")\n            with zipfile.ZipFile(fname, 'r') as zf:\n                zf.extractall(prefix)\n    return prefix, [fname for fname in os.listdir(prefix) if re.search(pattern, fname)]", "compilation_passed": true, "time": 0.002105712890625, "tests_passed": false, "error": "TypeError"}
{"code": "list_of_extracted_dirs = []\n    list_of_zipfiles = []\n    for filename in os.listdir(directory):\n        if re.match(pattern, filename) and filename.endswith(\".zip\"):\n            zip_ref = zipfile.ZipFile(os.path.join(directory, filename))\n            zip_ref.extractall(directory)\n            list_of_extracted_dirs.append(os.path.splitext(filename)[0])\n            list_of_zipfiles.append(filename)\n    return list_of_extracted_dirs, list_of_zipfiles", "compilation_passed": true, "time": 0.0019309520721435547, "tests_passed": false, "error": "TypeError"}
{"code": "result = []\n\n    if not os.path.isdir(directory):\n        raise NotADirectoryError(\"Directory does not exist: {}\".format(directory))\n\n    regex = re.compile(pattern)\n\n    for filename in os.listdir(directory):\n        match = regex.search(filename)\n\n        if match and match.group(1):\n            directory_name = match.group(1)\n            filepath = os.path.join(directory, filename)\n\n            if not os.path.exists(directory_name):\n                os.makedirs(directory_name)\n\n            with zipfile.ZipFile(filepath, 'r') as zip_file:\n                zip_file.extractall(directory_name)\n\n            result.append(directory_name)\n\n    return result", "compilation_passed": true, "time": 0.002221822738647461, "tests_passed": false, "error": "NotADirectoryError"}
{"code": "directories = []\n    pattern = re.compile(pattern)\n    for filename in os.listdir(directory):\n        if pattern.match(filename):\n            dirname = os.path.splitext(filename)[0].rsplit('-', 1)[0]\n            directories.append(dirname)\n            with zipfile.ZipFile(os.path.join(directory, filename)) as zf:\n                zf.extractall(os.path.join(directory, dirname))\n\n    return directories", "compilation_passed": true, "time": 0.0019648075103759766, "tests_passed": true, "error": null}
{"code": "filenames = []\n    for filename in os.listdir(directory):\n        if re.search(pattern, filename):\n            prefix = re.split(pattern, filename)[0]\n            if os.path.isdir(os.path.join(directory, prefix)):\n                continue\n            zip_filepath = os.path.join(directory, filename)\n            zip_file = zipfile.ZipFile(zip_filepath)\n            zip_file.extractall(os.path.join(directory, prefix))\n            filenames.append(prefix)\n            zip_file.close()\n    return filenames", "compilation_passed": true, "time": 0.002137899398803711, "tests_passed": true, "error": null}
{"code": "if not os.path.isdir(directory):\n        return\n    result = []\n    for filename in os.listdir(directory):\n        match = re.search(pattern, filename)\n        if match:\n            dirname = match.group(1)\n            full_path = os.path.join(directory, filename)\n            with zipfile.ZipFile(full_path, 'r') as zip_ref:\n                zip_ref.extractall(os.path.join(directory, dirname))\n            result.append(dirname)\n    return result", "compilation_passed": true, "time": 0.0017189979553222656, "tests_passed": false, "error": "TypeError"}
{"code": "zips = []\n\n    for filename in os.listdir(directory):\n        if re.match(pattern, filename):\n            prefix = os.path.splitext(os.path.basename(filename))[0]\n            zips.append((filename, prefix))\n\n    result = []\n\n    for filename, prefix in zips:\n        path = f'{directory}/{filename}'\n        if zipfile.is_zipfile(path):\n            zip_ref = zipfile.ZipFile(path)\n            try:\n                zip_ref.extractall(f'{directory}/{prefix}')\n                result.append(f'{directory}/{prefix}')\n            except zipfile.BadZipFile:\n                pass\n\n    return result", "compilation_passed": true, "time": 0.0018658638000488281, "tests_passed": true, "error": null}
{"code": "results = []\n\n    # Check if directory exists and is a directory\n    if not os.path.isdir(directory):\n        raise ValueError(f\"Directory {directory} does not exist or is not a directory.\")\n\n    for filename in os.listdir(directory):\n        # Check if filename matches the pattern\n        if re.search(pattern, filename):\n            # Split the filename using \"-\" as the separator\n            prefix, suffix = filename.rsplit(\"-\", 1)\n            directory_name = os.path.join(directory, prefix)\n\n            # Create the directory if it doesn't exist\n            if not os.path.isdir(directory_name):\n                try:\n                    os.makedirs(directory_name)\n                except OSError as e:\n                    print(f\"Failed to create directory {directory_name}: {e}\")\n\n            # Extract the zip file into the directory\n            zip_filename = os.path.join(directory, filename)\n            try:\n                zip_ref = zipfile.ZipFile(zip_filename)\n", "compilation_passed": false, "time": 0.00022602081298828125, "tests_passed": false, "error": "SyntaxError"}
{"code": "matches = []\n    # find all files that match the pattern\n    for file in os.listdir(directory):\n        if re.match(pattern, file):\n            matches.append(file)\n    # unzip the files\n    for match in matches:\n        directory = match.split(\"-\", 1)[0]\n        with zipfile.ZipFile(os.path.join(directory, match)) as zf:\n            zf.extractall(directory)\n    return matches", "compilation_passed": true, "time": 0.0024907588958740234, "tests_passed": true, "error": null}
{"code": "file_names = [os.path.join(directory, name) for name in os.listdir(directory)]\n    pattern_regex = re.compile(pattern)\n\n    directories = []\n    for file_name in file_names:\n        if not os.path.isfile(file_name):\n            continue\n\n        match = pattern_regex.search(os.path.basename(file_name))\n        if not match:\n            continue\n\n        directory = os.path.dirname(os.path.dirname(file_name))\n        directories.append(directory)\n\n        with zipfile.ZipFile(file_name, 'r') as zip_ref:\n            zip_ref.extractall(directory)\n\n    return directories", "compilation_passed": true, "time": 0.0018229484558105469, "tests_passed": true, "error": null}
{"code": "unzipped_directories = []\n    for file in os.listdir(directory):\n        match = re.search(pattern, file)\n        if match:\n            prefix = match.group(1)\n            if not os.path.exists(prefix):\n                os.makedirs(prefix)\n            with zipfile.ZipFile(os.path.join(directory, file)) as z:\n                z.extractall(prefix)\n            unzipped_directories.append(prefix)\n    return unzipped_directories, []", "compilation_passed": true, "time": 0.0020208358764648438, "tests_passed": false, "error": "TypeError"}
{"code": "dir_list = []\n    for zip_file in os.listdir(directory):\n        if re.search(pattern, zip_file):\n            base_dir, ext = os.path.splitext(zip_file)\n            dirname = base_dir.split('-')[0]\n            dir_list.append(dirname)\n            zip_ref = zipfile.ZipFile(os.path.join(directory, zip_file))\n            zip_ref.extractall(directory)\n    return dir_list", "compilation_passed": true, "time": 0.0019450187683105469, "tests_passed": true, "error": null}
{"code": "pattern_match = re.compile(pattern)\n    zip_dirs = []\n\n    for root, dirs, files in os.walk(directory):\n        for file in files:\n            match = pattern_match.match(file)\n\n            if match:\n                zip_dir = match.group(1)\n\n                if not zip_dirs.__contains__(zip_dir):\n                    zip_dirs.append(zip_dir)\n\n                os.makedirs(os.path.join(root, zip_dir), exist_ok=True)\n                with zipfile.ZipFile(os.path.join(root, file)) as zf:\n                    zf.extractall(os.path.join(root, zip_dir))\n\n    return zip_dirs, []", "compilation_passed": true, "time": 0.0023140907287597656, "tests_passed": false, "error": "TypeError"}
{"code": "matches = []\n    for filename in os.listdir(directory):\n        match = re.search(pattern, filename)\n        if match:\n            dirname = os.path.join(directory, match[1])\n            if not os.path.exists(dirname):\n                os.makedirs(dirname)\n            with zipfile.ZipFile(os.path.join(directory, filename), 'r') as zip_file:\n                zip_file.extractall(os.path.join(directory, match[1]))\n            matches.append(dirname)\n\n    return (directory, matches)", "compilation_passed": true, "time": 0.0020341873168945312, "tests_passed": false, "error": "TypeError"}
{"code": "dirs_to_extract = []\n    zipfiles = []\n    zip_members = []\n    for path, dirs, files in os.walk(directory):\n        for file in files:\n            if re.match(pattern, file):\n                zipfiles.append(os.path.join(path, file))\n\n    for file in zipfiles:\n        with zipfile.ZipFile(file) as zip_file:\n            zip_members.append(zip_file.namelist()[0])\n\n    for filename in zip_members:\n        dirname = os.path.dirname(filename)\n        if dirname not in dirs_to_extract:\n            dirs_to_extract.append(dirname)\n\n    return dirs_to_extract", "compilation_passed": true, "time": 0.0017719268798828125, "tests_passed": true, "error": null}
{"code": "paths_to_extract = []\n    for path, dirs, files in os.walk(directory):\n        for filename in files:\n            match = re.match(pattern, filename)\n            if match:\n                dirname = os.path.join(path, match.group(1))\n                paths_to_extract.append(dirname)\n                zipfile.ZipFile(os.path.join(path, filename)).extractall(path=dirname)\n    return paths_to_extract", "compilation_passed": true, "time": 0.00168609619140625, "tests_passed": true, "error": null}
{"code": "result_dirs = []\n    for root, dirs, files in os.walk(directory, topdown=False):\n        for file in files:\n            if re.match(pattern, file):\n                # Split the filename using \"-\" as the delimiter\n                name, number = file.split(\"-\", 1)\n\n                # Use the prefix part of the filename as the directory to extract the file\n                result_dirs.append(os.path.join(root, name))\n\n                # Extract the file into the directory using the unzip method\n                with zipfile.ZipFile(os.path.join(root, file), 'r') as zip_ref:\n                    zip_ref.extractall(os.path.join(root, name))\n\n                # Remove the extracted files\n                os.remove(os.path.join(root, file))\n    return result_dirs", "compilation_passed": true, "time": 0.001772165298461914, "tests_passed": true, "error": null}
{"code": "zip_files = []\n    for file_name in os.listdir(directory):\n        if re.match(pattern, file_name):\n            zip_files.append(os.path.join(directory, file_name))\n\n    unzipped_directories = []\n    for file_name in zip_files:\n        zip_ref = zipfile.ZipFile(file_name)\n        zip_ref.extractall(directory)\n        unzipped_directories.append(os.path.splitext(file_name)[0])\n\n    return unzipped_directories, zip_files", "compilation_passed": true, "time": 0.0018908977508544922, "tests_passed": false, "error": "TypeError"}
{"code": "# Find all zip files in the directory\n    zip_files = [f for f in os.listdir(directory) if f.endswith(\".zip\")]\n    dirs = []\n\n    # Unzip each zip file and return a list of the directories extracted\n    for f in zip_files:\n        match = re.match(pattern, f)\n        if match is not None:\n            zip_file = os.path.join(directory, f)\n            dirname = match.group(1)\n            zipfile.ZipFile(zip_file).extractall(dirname)\n            dirs.append(dirname)\n\n    return dirs", "compilation_passed": true, "time": 0.002456188201904297, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(directory):\n        return (None, [])\n    dirs = []\n    for filepath in os.listdir(directory):\n        match = re.search(pattern, filepath)\n        if match:\n            prefix = match.group(1)\n            dirs.append(prefix)\n            zipfile.ZipFile(filepath, 'r').extractall(prefix)\n    return (directory, dirs)", "compilation_passed": true, "time": 0.0016970634460449219, "tests_passed": false, "error": "TypeError"}
{"code": "res = []\n    files = os.listdir(directory)\n    for file in files:\n        if re.match(pattern, file):\n            split_filename = file.rsplit('-', 1)\n            prefix = split_filename[0]\n            if not os.path.exists(prefix):\n                os.makedirs(prefix)\n            with zipfile.ZipFile(directory + '/' + file, 'r') as zip_ref:\n                zip_ref.extractall(prefix)\n                res.append(prefix)\n    return res", "compilation_passed": true, "time": 0.0020449161529541016, "tests_passed": true, "error": null}
{"code": "# Find all zip files in the directory with the specified pattern.\n    zip_files = [f for f in os.listdir(directory) if re.search(pattern, f)]\n\n    # For each zip file, extract it to a new directory with the same prefix as the zip file name.\n    result = []\n    for file in zip_files:\n        prefix = file.rsplit(\"-\", 1)[0]\n        directory = f\"{directory}/{prefix}\"\n        if not os.path.exists(directory):\n            os.mkdir(directory)\n\n        with zipfile.ZipFile(f\"{directory}/{file}\")\n        result.append(directory)\n    return result", "compilation_passed": false, "time": 0.00018405914306640625, "tests_passed": false, "error": "SyntaxError"}
{"code": "pattern = re.compile(pattern)\n    zip_dirs = []\n\n    for root, _, files in os.walk(directory):\n        for f in files:\n            match = pattern.match(f)\n            if not match:\n                continue\n            zip_name = os.path.join(root, f)\n            dirname = match.group(1)\n            dirname = os.path.join(directory, dirname)\n            dirname = os.path.normpath(dirname)\n            dirname = os.path.realpath(dirname)\n            dirname = os.path.normpath(dirname)\n            dirname = os.path.realpath(dirname)\n            dirname = os.path.normpath(dirname)\n\n            if not os.path.exists(dirname):\n                os.makedirs(dirname)\n\n            with zipfile.ZipFile(zip_name) as zf:\n                zf.extractall(path=dirname)\n\n            zip_dirs.append(dirname)\n\n    return zip_dirs", "compilation_passed": true, "time": 0.0018870830535888672, "tests_passed": true, "error": null}
{"code": "pattern = re.compile(pattern)\n    dirs = []\n\n    for filename in os.listdir(directory):\n        match = pattern.search(filename)\n        if match:\n            prefix = match.group(1)\n            zip_path = os.path.join(directory, filename)\n            dirs.append(prefix)\n            with zipfile.ZipFile(zip_path, 'r') as zip_file:\n                zip_file.extractall(prefix)\n\n    return dirs", "compilation_passed": true, "time": 0.0018918514251708984, "tests_passed": true, "error": null}
