{"code": "# generate a normal distribution using numpy's random normal function\n    samples = np.random.normal(mu, sigma, num_samples)\n\n    # plot a histogram and Q-Q plot using matplotlib and scipy's stats\n    plt.subplots(figsize=(8, 8))\n    plt.hist(samples, bins=30, density=True, color='#393b79')\n    x = np.linspace(samples.min(), samples.max(), num=1000)\n    q = stats.kstest(samples, 'norm', args=(mu, sigma))[1]\n    plt.plot(x, stats.probplot(samples, fit=True, plot=\"scatter\"))\n    plt.title(r'$Q^2 = $ %.2f' % q)\n\n    return plt.gcf()", "compilation_passed": true, "time": 0.011613845825195312, "tests_passed": false, "error": "AttributeError"}
{"code": "fig, ax = plt.subplots(1)\n\n    # Sample from the distribution\n    x = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples, random_state=seed)\n    ax.hist(x, bins=100)\n    ax.plot(x, x, color='red', alpha=0.5)\n\n    return fig", "compilation_passed": true, "time": 0.022716045379638672, "tests_passed": true, "error": null}
{"code": "rng = np.random.RandomState(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples, random_state=seed)\n    fig, ax = plt.subplots()\n    ax.hist(samples, bins=30, density=True)\n    ax.plot(stats.uniform.ppf(0.01, 0, 1), stats.uniform.pdf(stats.uniform.ppf(0.01, 0, 1), 0, 1),\n            color='red', lw=2, alpha=0.6, label='Uniform')\n    ax.legend(loc='best')\n    ax.vlines(x=mu, ymin=0, ymax=stats.norm.pdf(mu, loc=mu, scale=sigma),\n              color='#4292c6', lw=3, label='Mu')\n    ax.vlines(x=mu, ymin=0, ymax=stats.norm.pdf(mu, loc=mu, scale=sigma), lin", "compilation_passed": false, "time": 0.0003211498260498047, "tests_passed": false, "error": "SyntaxError"}
{"code": "fig = plt.figure()\n    # Draw normal samples\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n\n    # Create histogram\n    ax = fig.add_subplot(2, 1, 1)\n    ax.hist(samples, density=True, bins=30, histtype='bar', alpha=0.75)\n    ax.grid(True)\n\n    # Q-Q plot\n    # ax = fig.add_subplot(2, 1, 2)\n    # qdata = stats.norm.ppf(np.arange(0.01, 1.01, 0.01))\n    # ax.plot(qdata, stats.norm.pdf(qdata, mu, sigma), 'r-')\n    # ax.plot(samples, stats.norm.pdf(samples, mu, sigma), 'bo')\n\n    # Show the plot\n    plt.show()\n    return fig", "compilation_passed": true, "time": 0.010241031646728516, "tests_passed": true, "error": null}
{"code": "# TODO: Implement the function\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n\n    fig, (ax_hist, ax_qq) = plt.subplots(2, figsize=(8, 6))\n    ax_hist.hist(samples, bins=30, density=True)\n    ax_hist.axvline(mu, color='red')\n    ax_hist.axvline(0, color='black')\n    ax_hist.set_xlabel('x')\n    ax_hist.set_ylabel('PDF')\n    ax_hist.set_title('Histogram and PDF of the samples')\n\n    ordered_samples = np.sort(samples)\n    ax_qq.plot(ordered_samples, stats.norm.pdf(ordered_samples),\n               label='PDF: theoretical pdf')\n    ax_qq.plot(ordered_samples, stats.norm.pdf(ordered_samples, mu, sigma),\n               label='PDF: simulated pdf')\n    ax_qq.plot(ordered_samples, stats.norm.", "compilation_passed": false, "time": 0.0005900859832763672, "tests_passed": false, "error": "SyntaxError"}
{"code": "rng = np.random.default_rng(seed)\n    samples = stats.norm(mu, sigma).rvs(num_samples)\n\n    fig, ax = plt.subplots()\n\n    # Histogram\n    ax.hist(samples, bins=20, density=True, edgecolor='black', label='Histogram')\n    ax.set_xlabel('Samples')\n    ax.set_ylabel('Probability')\n\n    # Q-Q plot\n    stats.probplot(samples, dist='norm', plot=ax)\n    ax.set_title('Q-Q plot')\n    ax.set_xlabel('Sorted samples')\n    ax.set_ylabel('Cumulative distribution')\n\n    return fig", "compilation_passed": true, "time": 0.009604930877685547, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, size=num_samples)\n    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(8, 6))\n    ax1.hist(samples, density=True)\n    ax1.set_title('Histogram')\n    ax1.set_xlabel('x')\n    ax1.set_ylabel('PDF')\n    ax2.hist(samples, density=True)\n    ax2.set_title('Q-Q plot')\n    ax2.set_xlabel('Q')\n    ax2.set_ylabel('Frequency')\n    return fig", "compilation_passed": true, "time": 0.23931598663330078, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n    fig, (ax1, ax2) = plt.subplots(2, figsize=(12, 6))\n    ax1.hist(samples, density=True, bins=30)\n    ax1.axvline(mu, color='red', label='Mean')\n    ax1.axvspan(mu - 1.5 * sigma, mu + 1.5 * sigma, alpha=0.25, color='blue')\n    ax2.plot(*stats.probplot(samples, dist=\"norm\", plotargs={'marker':'x', 'linestyle': ''}))\n    return fig", "compilation_passed": true, "time": 0.013387918472290039, "tests_passed": false, "error": "TypeError"}
{"code": "np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n\n    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(8, 6))\n    ax1.hist(samples, density=True, bins=50, histtype=\"stepfilled\", alpha=0.5, label=\"Histogram\")\n    ax2.plot(samples, stats.norm.pdf(samples, mu, sigma), label=\"Q-Q plot\")\n\n    ax1.set_title(\"Histogram\")\n    ax2.set_title(\"Q-Q plot\")\n\n    return fig", "compilation_passed": true, "time": 0.07258987426757812, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n\n    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 8))\n    ax1.hist(samples, bins=30, density=True)\n    ax2.hist(np.sort(samples), density=True, bins=15)\n    ax2.plot(stats.norm.ppf(np.arange(0, 1, 0.0001), loc=mu, scale=sigma), 'r', label='Q-Q plot')\n\n    return fig", "compilation_passed": true, "time": 0.10470700263977051, "tests_passed": true, "error": null}
{"code": "# Generating samples\n    random_samples = np.random.normal(mu, sigma, num_samples)\n\n    # Plotting histograms\n    fig, (ax1, ax2) = plt.subplots(2, 1, sharex=True)\n    ax1.set_ylabel(\"Frequency\")\n    ax2.set_ylabel(\"CDF\")\n    ax1.hist(random_samples, bins=\"auto\")\n    cdf = stats.kstest(random_samples, stats.norm(mu, sigma).cdf)\n    ax2.plot(random_samples, stats.norm(mu, sigma).cdf(random_samples), 'k-')\n    ax2.set_xlabel(\"Sample\")\n    plt.show()\n\n    return fig", "compilation_passed": true, "time": 0.09100794792175293, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig, (ax1, ax2) = plt.subplots(1, 2)\n    ax1.hist(samples, density=True)\n    x = np.linspace(-4*sigma, 4*sigma, 200)\n    ax2.plot(x, stats.norm.pdf(x, loc=mu, scale=sigma))\n    ax1.set_title('Histogram')\n    ax2.set_title('PDF')\n    fig.tight_layout()\n    return fig", "compilation_passed": true, "time": 0.21665501594543457, "tests_passed": true, "error": null}
{"code": "# Generate the samples with a seed value to ensure consistency\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n\n    # Create a figure and axis for the histogram and Q-Q plot\n    fig, axs = plt.subplots(1, 2, figsize=(12, 6))\n    axs[0].hist(samples, density=True, histtype='step', color='red', alpha=0.5)\n    axs[1].plot([-10, 10], [0, 0], '-k')\n    axs[1].plot([0, 0], [-10, 10], '-k')\n\n    # Calculate the quantiles of the sample for the Q-Q plot\n    q_vals = np.linspace(0, 1, 100)\n    quantiles = np.percentile(samples, q_vals*100)\n\n    # Plot the Q-Q plot\n    axs[1].step(q_vals, quantiles", "compilation_passed": false, "time": 0.00034117698669433594, "tests_passed": false, "error": "SyntaxError"}
{"code": "rng = np.random.default_rng(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples, random_state=seed)\n\n    fig, axes = plt.subplots(2)\n    ax = axes[0]\n    ax.hist(samples, bins=10, density=True)\n    ax = axes[1]\n    ax.hist(samples, density=True),\n    ax.plot(samples, samples, 'g-', linewidth=2, label='Sample')\n    ax.plot(np.sort(samples), stats.norm(mu, sigma).pdf(np.sort(samples)), 'r-', linewidth=2, label='PDF')\n    ax.legend()\n    fig.tight_layout()\n\n    return fig", "compilation_passed": true, "time": 0.2244110107421875, "tests_passed": true, "error": null}
{"code": "# Generate samples\n    random_state = np.random.RandomState(seed)\n    samples = random_state.normal(mu, sigma, num_samples)\n\n    # Plot histogram and Q-Q plot\n    fig = plt.figure()\n\n    # Create the histogram\n    plt.subplot(2, 1, 1)\n    plt.hist(samples, bins=40)\n    plt.title('Histogram of Generated Samples')\n    plt.xlabel('Sample Value')\n    plt.ylabel('Frequency')\n    plt.grid(True)\n\n    # Plot the Q-Q plot\n    x = np.linspace(samples.min(), samples.max(), 100)\n    y = stats.probplot(samples, dist=\"norm\", plot=None)\n    plt.subplot(2, 1, 2)\n    plt.scatter(x, y.plot)\n    plt.plot(x, y.ppf(x), 'r-')  # Plot the Q-Q line\n    plt.axhline(y=0, color='k')", "compilation_passed": true, "time": 0.015426874160766602, "tests_passed": false, "error": "AttributeError"}
{"code": "np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n\n    fig, axes = plt.subplots(2, figsize=(8, 6), sharex=True, sharey=True)\n\n    axes[0].hist(samples, density=True, bins=30)\n    axes[0].set_title('Histogram')\n\n    samples.sort()\n    q = np.arange(1, num_samples + 1) / num_samples\n    axes[1].plot(q, q, 'k--', linewidth=1.5, label='y=x')\n    axes[1].plot(q, stats.kde.gaussian_kde(samples)(q), 'k-', linewidth=2, label='Kernel Density Estimation')\n    axes[1].plot(q, stats.norm(mu, sigma).cdf(q), 'b-', linewidth=2, label='Theoretical CDF')\n    axes[1].set_title('Q-Q Plot')\n", "compilation_passed": true, "time": 0.2986409664154053, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, size=num_samples)\n\n    fig, ax = plt.subplots()\n    ax.hist(samples, bins=40, density=True)\n\n    q = np.arange(0.01, 1.0, 0.01)\n    qq = stats.norm.cdf(q, mu, sigma)\n    ax.plot(q, qq, '--r', linewidth=1.5)\n\n    fig.show()\n    return fig", "compilation_passed": true, "time": 0.012504100799560547, "tests_passed": true, "error": null}
{"code": "# Initialize the random number generator\n    np.random.seed(seed)\n\n    # Generate the samples\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n\n    # Create a histogram\n    fig, ax = plt.subplots()\n    ax.hist(samples, bins=20, density=True, label='Histogram')\n    ax.legend(loc='upper right')\n\n    # Create a Q-Q plot\n    fig, ax = plt.subplots()\n    stats.probplot(samples, fit=True, plot=ax, rkws={'dist': 'norm'})\n    ax.set_title('Q-Q plot')\n    ax.set_xlabel('Sample Order')\n    ax.set_ylabel('Empirical CDF')\n\n    return fig", "compilation_passed": true, "time": 0.011539936065673828, "tests_passed": false, "error": "TypeError"}
{"code": "# Create a random generator with a seed value.\n    rng = np.random.RandomState(seed)\n\n    # Generate a sample from a normal distribution.\n    samples = rng.normal(mu, sigma, num_samples)\n\n    # Create histogram and QQ plot.\n    fig = plt.figure()\n    ax_hist, ax_qq = plt.subplots(2, 1, sharex=True)\n    ax_hist.set_title(r'Histogram of $X$')\n    ax_qq.set_title(r'QQ plot of $X$ vs. Standard Normal')\n    ax_hist.hist(samples, 100, density=True)\n    ppm = stats.probplot(samples, dist=\"norm\", plot=ax_qq)\n    return fig", "compilation_passed": true, "time": 0.007887125015258789, "tests_passed": false, "error": "AttributeError"}
{"code": "np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, size=num_samples)\n    hist, bin_edges = np.histogram(samples, bins=30)\n    x = np.sort(samples)\n    y = np.sort(stats.norm.cdf(x, loc=mu, scale=sigma))\n    fig, axs = plt.subplots(ncols=2, figsize=(12, 4))\n    axs[0].bar(bin_edges[:-1], hist, width=bin_edges[1] - bin_edges[0],\n               label='histogram')\n    axs[1].plot(x, y, label='Q-Q plot')\n    axs[0].legend()\n    axs[1].legend()\n    plt.tight_layout()\n    return fig", "compilation_passed": true, "time": 0.24484610557556152, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n\n    fig, (ax1, ax2) = plt.subplots(2, figsize=(16, 9))\n\n    ax1.hist(samples, bins=50, density=True)\n    ax1.set_title(f\"Histogram of {num_samples} samples with mean = {mu}, sigma = {sigma}\")\n\n    # Plot QQ plot\n    qq_points = stats.probplot(samples, plot=ax2)\n    ax2.set_title(\"Q-Q Plot\")\n\n    return fig", "compilation_passed": true, "time": 0.10782313346862793, "tests_passed": true, "error": null}
{"code": "random_state = np.random.RandomState(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples, random_state=random_state)\n    fig, (ax1, ax2) = plt.subplots(2)\n    ax1.hist(samples, bins=25, density=True)\n    ax1.set_xlabel('Samples')\n    ax1.set_ylabel('Probability')\n    ax2.plot([0, samples.max()], [0, samples.max()], 'k')\n    ax2.plot(samples, samples, '*')\n    ax2.set_xlabel('Samples')\n    ax2.set_ylabel('Samples')\n    return fig", "compilation_passed": true, "time": 0.08536911010742188, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n\n    fig = plt.figure()\n    ax_hist = fig.add_subplot(2, 1, 1)\n    ax_qq = fig.add_subplot(2, 1, 2)\n    ax_hist.hist(samples, bins=50)\n    x = stats.scoreatpercentile(samples, np.arange(1000) * 0.1)\n    y = np.sort(samples)\n    ax_qq.plot(x, y, 'k.-')\n\n    return fig", "compilation_passed": true, "time": 0.11813712120056152, "tests_passed": true, "error": null}
{"code": "rng = np.random.default_rng(seed=seed)\n    samples = rng.normal(mu, sigma, num_samples)\n\n    # Plot histogram and Q-Q plot\n    fig, (ax1, ax2) = plt.subplots(nrows=2, sharex=True)\n    ax1.hist(samples, density=True, bins='auto', label='Histogram')\n    ax1.legend()\n\n    x_norm = np.linspace(stats.t.ppf(0.01, num_samples), stats.t.ppf(0.99, num_samples), 1000)\n    ax2.plot(x_norm, stats.t.pdf(x_norm, num_samples, mu=mu, sigma=sigma),\n             'r-', lw=5, alpha=0.6, label='PDF')\n    ax2.plot(x_norm, stats.t.cdf(x_norm, num_samples, mu=mu, sigma=sigma),\n             'r-', lw=5, alpha=", "compilation_passed": false, "time": 0.0003311634063720703, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Generate a random sample of normal distribution\n    x = stats.norm.rvs(mu, sigma, size=num_samples, random_state=seed)\n\n    # Plot histogram and Q-Q plot\n    plt.hist(x, bins=int(num_samples**(1 / 3)))\n    stats.probplot(x, plot=plt.xlabel('Sample values'), plot=plt.ylabel('Q-Q'), line='')\n\n    # Display the figure\n    plt.show()\n\n    # Return the figure\n    return plt.gcf()", "compilation_passed": false, "time": 0.0007500648498535156, "tests_passed": false, "error": "SyntaxError"}
{"code": "np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, size=num_samples)\n    fig, (ax_hist, ax_qq) = plt.subplots(2, figsize=(6, 4))\n\n    ax_hist.hist(samples, density=True, label='Histogram')\n    ax_hist.legend(loc='best')\n    ax_hist.axvline(samples.mean(), color='k', label='Mean')\n    ax_hist.axvline(mu, color='C0', linestyle='--')\n    ax_hist.axvspan(mu - sigma, mu + sigma, alpha=0.25, color='C0', linestyle='--')\n    ax_hist.axvline(np.percentile(samples, 25), color='C1', linestyle='--')\n    ax_hist.axvline(np.median(samples), color='C2', linestyle='--')\n    ax_hist.axvline(np.percentile(samples, 75", "compilation_passed": false, "time": 0.00026702880859375, "tests_passed": false, "error": "SyntaxError"}
{"code": "np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, num_samples)\n\n    fig, ax = plt.subplots(1, 2)\n\n    ax[0].hist(samples, bins=30, density=True, label=f'Histogram, mu={mu}, sigma={sigma}')\n    ax[0].set_xlabel('x')\n    ax[0].set_ylabel('y')\n    ax[0].set_title('Histogram')\n\n    # Compute the probability density function for the samples\n    pdf = stats.norm(mu, sigma).pdf(samples)\n\n    # Plot the Q-Q plot\n    ax[1].plot(samples, pdf, color='blue', linewidth=2, label=f'Q-Q plot, mu={mu}, sigma={sigma}')\n    ax[1].set_xlabel('x')\n    ax[1].set_ylabel('PDF')\n    ax[1].set_title('Q-Q plot')\n\n    fig.suptitle(f'Mean", "compilation_passed": false, "time": 0.00010704994201660156, "tests_passed": false, "error": "SyntaxError"}
{"code": "np.random.seed(seed)\n    samples = stats.norm(mu, sigma).rvs(num_samples)\n\n    fig, axs = plt.subplots(1, 2)\n    axs[0].hist(samples)\n    axs[1].plot(samples, samples, 'b')\n    axs[1].plot([samples.min(), samples.max()], [samples.min(), samples.max()], 'r')\n    return fig", "compilation_passed": true, "time": 0.06868624687194824, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig = plt.figure()\n    hist, bins, _ = plt.hist(samples, bins=100, density=True, label='hist')\n    plt.axvline(x=mu, label='mu', color='r')\n    plt.axvline(x=mu + sigma, label='mu + sigma', color='g')\n    plt.axvline(x=mu - sigma, label='mu - sigma', color='g')\n    plt.legend()\n    plt.title('Histogram and Q-Q plot')\n    plt.show()\n    stats.probplot(samples, dist='norm', plot=fig)\n    return fig", "compilation_passed": true, "time": 0.023795366287231445, "tests_passed": false, "error": "AttributeError"}
{"code": "# Generate the samples\n    np.random.seed(seed)\n    samples = stats.norm.rvs(mu, sigma, size=num_samples)\n\n    # Plot the histogram and Q-Q plot\n    fig, (ax1, ax2) = plt.subplots(1, 2)\n\n    ax1.hist(samples, density=True, label='Histogram')\n    ax1.plot(np.linspace(-4, 4, 100), stats.norm.pdf(np.linspace(-4, 4, 100), mu, sigma), label='PDF')\n    ax1.set_title('Histogram and Q-Q plot')\n    ax1.legend()\n\n    ax2.plot(samples, stats.norm.cdf(samples, mu, sigma), label='CDF')\n    ax2.plot(samples, np.linspace(0, 1, num_samples), label='Quantile')\n    ax2.set_title('Q-Q plot')\n    ax2.legend()\n\n    return fig", "compilation_passed": true, "time": 0.4348881244659424, "tests_passed": true, "error": null}
