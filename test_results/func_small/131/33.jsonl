{"code": "# Generate a random salt of the specified size\n    salt = os.urandom(salt_size)\n\n    # Append the salt to the byte representation of the hex string\n    salted_str = salt + bytes.fromhex(hex_str)\n\n    # Compute the SHA256 hash of the salted data\n    hash_value = hashlib.sha256(salted_str).digest()\n\n    # Encode the salt and hash values as base64 strings\n    encoded_salt = base64.b64encode(salt).decode()\n    encoded_hash = base64.b64encode(hash_value).decode()\n\n    # Return the salt and hash values as a tuple\n    return encoded_salt, encoded_hash", "compilation_passed": true, "time": 0.0008380413055419922, "tests_passed": true, "error": null}
{"code": "salt = os.urandom(salt_size)\n    salt_str = salt.decode(\"utf-8\")\n    salted_data = hex_str.encode(\"ascii\") + salt\n\n    hash_obj = hashlib.sha256(salted_data)\n    hash = hash_obj.digest()\n\n    return (base64.b64encode(salt).decode(\"ascii\"), hash.decode(\"ascii\"))", "compilation_passed": true, "time": 0.0007231235504150391, "tests_passed": false, "error": "UnicodeDecodeError"}
{"code": "salt = os.urandom(salt_size)\n    return salt + base64.b64encode(\n        binascii.unhexlify(hex_str)\n    )", "compilation_passed": true, "time": 0.0007140636444091797, "tests_passed": false, "error": "ValueError"}
{"code": "salt = os.urandom(salt_size)\n    bytes_ = binascii.unhexlify(hex_str)\n    salted_bytes = salt + bytes_\n    hash_ = hashlib.sha256(salted_bytes)\n    return base64.b64encode(salt), hash_.hexdigest()", "compilation_passed": true, "time": 0.0011229515075683594, "tests_passed": true, "error": null}
{"code": "random_bytes = os.urandom(salt_size)\n    salted_data = hex_str.encode() + random_bytes\n    hash_result = hashlib.sha256(salted_data)\n    salted_hex = base64.b64encode(random_bytes).decode()\n    return salted_hex, hash_result.hexdigest()", "compilation_passed": true, "time": 0.0008797645568847656, "tests_passed": true, "error": null}
{"code": "if not isinstance(hex_str, str):\n        raise TypeError(\"hex_str must be a string\")\n    if not isinstance(salt_size, int):\n        raise TypeError(\"salt_size must be an integer\")\n    if salt_size < 0:\n        raise ValueError(\"salt_size must be non-negative\")\n\n    random_salt = os.urandom(salt_size)\n    hex_bytes = bytes(hex_str, encoding='utf-8')\n    salted_data = random_salt + hex_bytes\n    hash_value = hashlib.sha256(salted_data).digest()\n    base64_hash = base64.b64encode(hash_value)\n    return (random_salt.decode('utf-8'), base64_hash.decode('ascii'))", "compilation_passed": true, "time": 0.0008211135864257812, "tests_passed": false, "error": "UnicodeDecodeError"}
{"code": "# generate salt\n    salt = os.urandom(salt_size)\n    # salt data\n    hex_str_bytes = binascii.unhexlify(hex_str)\n    salted_data = salt + hex_str_bytes\n    # compute SHA256 hash\n    hash_result = hashlib.sha256(salted_data).digest()\n    return base64.b64encode(salt).decode('utf-8'), hash_result", "compilation_passed": true, "time": 0.0006918907165527344, "tests_passed": true, "error": null}
{"code": "salt = os.urandom(salt_size)\n    salted_data = hex_str.encode() + salt\n    hash_obj = hashlib.sha256(salted_data)\n    hash_value = binascii.b2a_base64(hash_obj.digest()).decode()\n    return salt, hash_value", "compilation_passed": true, "time": 0.0007350444793701172, "tests_passed": true, "error": null}
{"code": "salt = os.urandom(salt_size)\n    salted_data = salt + bytes.fromhex(hex_str)\n    hash_value = hashlib.sha256(salted_data).digest()\n    base64_salt = base64.b64encode(salt).decode()\n    return (base64_salt, hashlib.sha256(salted_data).hexdigest())", "compilation_passed": true, "time": 0.0008478164672851562, "tests_passed": false, "error": "ValueError"}
{"code": "salt = os.urandom(salt_size)\n    hash_data = hex_str.encode() + salt\n    return base64.b64encode(hashlib.sha256(hash_data).digest()), salt", "compilation_passed": true, "time": 0.0007328987121582031, "tests_passed": true, "error": null}
{"code": "salt = base64.b64encode(os.urandom(salt_size)).decode()\n    data = hex_str + salt\n    hash_data = hashlib.sha256(data.encode())\n    return (salt, hash_data.hexdigest())", "compilation_passed": true, "time": 0.0007710456848144531, "tests_passed": true, "error": null}
{"code": "salt = binascii.unhexlify(os.urandom(salt_size)).decode()\n    data = salt + hex_str\n    hash_result = hashlib.sha256(data.encode()).hexdigest()\n    return salt, hash_result", "compilation_passed": true, "time": 0.0007171630859375, "tests_passed": false, "error": "binascii.Error"}
{"code": "salt = os.urandom(salt_size)\n    byte_str = base64.b64encode(hex_str.encode(\"ascii\"))\n    hash_obj = hashlib.sha256(byte_str + salt)\n    return salt.decode(\"ascii\"), hash_obj.digest().hex()", "compilation_passed": true, "time": 0.0006639957427978516, "tests_passed": false, "error": "UnicodeDecodeError"}
{"code": "random_salt = os.urandom(salt_size)\n    salted_str = hex_str + base64.b64encode(random_salt).decode()\n\n    sha256_hash = hashlib.sha256(salted_str.encode()).hexdigest()\n\n    return base64.b64encode(random_salt).decode(), sha256_hash", "compilation_passed": true, "time": 0.0008382797241210938, "tests_passed": true, "error": null}
{"code": "# Generate a random salt of the specified size\n    salt = os.urandom(salt_size)\n\n    # Append the salt to the hex string\n    data = binascii.unhexlify(hex_str) + salt\n\n    # Compute the SHA256 hash of the salted data\n    hash_val = hashlib.sha256(data).hexdigest()\n\n    # Return the base64-encoded salt and the hash\n    return (base64.b64encode(salt).decode(), hash_val)", "compilation_passed": true, "time": 0.0008730888366699219, "tests_passed": false, "error": "binascii.Error"}
{"code": "# Generate random salt\n    salt = base64.b64encode(os.urandom(salt_size))\n\n    # Append salt to hex string and convert to bytes\n    salted = salt + hex_str.encode('ascii')\n    hash_value = hashlib.sha256(salted).digest()\n\n    # Encode salt and hash to base64, convert to bytes, and return as a tuple\n    return salt.decode('ascii'), binascii.b2a_base64(hash_value).decode('ascii')", "compilation_passed": true, "time": 0.0007410049438476562, "tests_passed": true, "error": null}
{"code": "salt = os.urandom(salt_size)\n    salted_str = salt + bytes.fromhex(hex_str)\n    hash_ = hashlib.sha256(salted_str).hexdigest()\n    base64_hash = base64.b64encode(hash_).decode()\n    return (base64_hash, hash_)", "compilation_passed": true, "time": 0.0008108615875244141, "tests_passed": false, "error": "TypeError"}
{"code": "salt = os.urandom(salt_size)\n    salted_str = salt + bytes(hex_str, \"utf-8\")\n    return base64.b64encode(salted_str).decode(\"utf-8\"), hashlib.sha256(salted_str).hexdigest()", "compilation_passed": true, "time": 0.0009219646453857422, "tests_passed": true, "error": null}
{"code": "salt = base64.b16encode(os.urandom(salt_size)).decode(\"utf-8\")\n    hex_str_bytes = binascii.unhexlify(hex_str)\n    salted_data = salt + hex_str_bytes\n    hash_result = hashlib.sha256(salted_data).digest()\n    return salt, base64.b64encode(hash_result).decode(\"utf-8\")", "compilation_passed": true, "time": 0.0006680488586425781, "tests_passed": false, "error": "TypeError"}
{"code": "# Generate a random salt of the given size\n    salt = os.urandom(salt_size)\n\n    # Convert the hex string to bytes and concatenate with the salt\n    data = binascii.unhexlify(hex_str) + salt\n\n    # Compute the SHA256 hash of the salted data\n    hash_obj = hashlib.sha256()\n    hash_obj.update(data)\n    hash_value = hash_obj.digest()\n\n    # Encode the salt as base64\n    encoded_salt = base64.b64encode(salt).decode()\n\n    return encoded_salt, hash_value", "compilation_passed": true, "time": 0.0007469654083251953, "tests_passed": true, "error": null}
{"code": "# Generate random salt\n    salt = base64.b64encode(os.urandom(salt_size)).decode('utf-8')\n\n    # Convert hex string to bytes and append salt\n    data = hex_str.encode('utf-8') + salt.encode('utf-8')\n\n    # Compute SHA256 hash\n    hash_obj = hashlib.sha256(data)\n    hash_value = hash_obj.digest()\n\n    # Return salt and hash as a tuple\n    return salt, hashlib.sha256(data + salt).hexdigest()", "compilation_passed": true, "time": 0.0006787776947021484, "tests_passed": false, "error": "TypeError"}
{"code": "salt = os.urandom(salt_size).hex()\n    return (base64.b64encode(salt.encode()).decode(), hashlib.sha256(hex_str.encode() + salt).hexdigest())", "compilation_passed": true, "time": 0.0007007122039794922, "tests_passed": false, "error": "TypeError"}
{"code": "salt = os.urandom(salt_size)\n    salted_data = salt + binascii.a2b_hex(hex_str)\n    hash_value = hashlib.sha256(salted_data).hexdigest()\n\n    return (base64.b64encode(salt).decode(), hash_value)", "compilation_passed": true, "time": 0.0008170604705810547, "tests_passed": false, "error": "binascii.Error"}
{"code": "salt = binascii.unhexlify(os.urandom(salt_size))\n    return base64.b64encode(salt + b\"%s\" % hex_str), hashlib.sha256(salt + b\"%s\" % hex_str).hexdigest()", "compilation_passed": true, "time": 0.0007092952728271484, "tests_passed": false, "error": "binascii.Error"}
{"code": "salt = base64.b64encode(os.urandom(salt_size))\n    salted_data = salt + binascii.unhexlify(hex_str.lower())\n    return salt, hashlib.sha256(salted_data).hexdigest()", "compilation_passed": true, "time": 0.0008161067962646484, "tests_passed": true, "error": null}
{"code": "salt = os.urandom(salt_size)\n    salted_data = salt + binascii.unhexlify(hex_str)\n    return (base64.b64encode(salted_data).decode(\"utf-8\"), hashlib.sha256(salted_data).hexdigest())", "compilation_passed": true, "time": 0.0007350444793701172, "tests_passed": true, "error": null}
{"code": "# Generate random salt of given size\n    salt = os.urandom(salt_size)\n\n    # Append salt to hex string\n    hex_str_with_salt = salt + hex_str\n\n    # Compute SHA256 hash\n    hash_digest = hashlib.sha256(hex_str_with_salt).digest()\n\n    # Base64 encode hash\n    hash_base64 = base64.b64encode(hash_digest).decode()\n\n    # Return tuple of salt and hash\n    return salt_size, hash_base64", "compilation_passed": true, "time": 0.0006537437438964844, "tests_passed": false, "error": "TypeError"}
{"code": "salt = base64.b64encode(os.urandom(salt_size))\n    return salt, hashlib.sha256(salt + bytes(hex_str, 'utf-8')).hexdigest()", "compilation_passed": true, "time": 0.0008647441864013672, "tests_passed": true, "error": null}
{"code": "salt = os.urandom(salt_size)\n    base64_salt = base64.b64encode(salt).decode()\n    hash_data = salt + hex_str.encode()\n    sha256 = hashlib.sha256(hash_data).digest()\n\n    return base64_salt, binascii.hexlify(sha256).decode()", "compilation_passed": true, "time": 0.0008361339569091797, "tests_passed": true, "error": null}
{"code": "if not isinstance(hex_str, str) or not isinstance(salt_size, int):\n        return None\n    if salt_size < 1:\n        return None\n    if not hex_str.islower():\n        hex_str = hex_str.lower()\n\n    random_salt = os.urandom(salt_size)\n    salted_data = hex_str.encode() + random_salt\n    hash_value = hashlib.sha256(salted_data).digest()\n    encoded_salt = base64.b64encode(random_salt).decode()\n    return encoded_salt, hashlib.sha256(random_salt + salted_data).hexdigest()", "compilation_passed": true, "time": 0.0009081363677978516, "tests_passed": true, "error": null}
