{"code": "x = np.linspace(mu-4*sigma, mu+4*sigma, 1000)\n    y = 1/(sigma * np.sqrt(2*np.pi)) * np.exp(-(x-mu)**2/(2*sigma**2))\n    fig, ax = plt.subplots()\n    ax.plot(x, y, label='1000 samples')\n    ax.axhline(1/2, label='mean = 0.5')\n    ax.axhline(1/2**2, label='std = 0.5')\n    ax.set_xlabel('x')\n    ax.set_ylabel('probability')\n    ax.set_xlim(left=-3, right=3)\n    ax.set_ylim(bottom=0, top=1)\n    ax.legend()\n    return ax", "compilation_passed": true, "time": 0.006075143814086914, "tests_passed": true, "error": null}
{"code": "# https://matplotlib.org/3.2.2/gallery/color/color_demo.html\n    # https://seaborn.pydata.org/tutorial/color_palettes.html\n    # https://matplotlib.org/3.2.2/gallery/color/color_demo.html\n    # https://seaborn.pydata.org/generated/seaborn.color_palettes.hls.html\n\n    # generate random samples\n    random_samples = np.random.normal(mu, sigma, 1000)\n    # count samples of each color\n    counts, bins, _ = plt.hist(random_samples, bins=50, range=(0, 5))\n    # plot sample count histogram\n    plt.bar(bins[:-1] + np.diff(bins) / 2, counts, width=bins[1]-bins[0])\n    # set color bar limits\n    plt.xlim(0, 1)\n    plt.ylim(0, max(counts))\n    # color bar\n    ax = plt.gca()\n    ax.y", "compilation_passed": true, "time": 0.01948070526123047, "tests_passed": false, "error": "AttributeError"}
{"code": "x = np.random.normal(mu, sigma, 1000)\n    plt.plot(x, np.ones(len(x)), 'k')\n    ax = sns.kdeplot(x, color='k')\n    ax.set(xlim=[0, 1], ylim=[0, 1],\n           xlabel='Normal', ylabel='Frequency')\n    return ax", "compilation_passed": true, "time": 0.014983892440795898, "tests_passed": true, "error": null}
{"code": "# TODO 1: Draw a 1000 samples using the normal distribution function with the given mean and standard deviation\n    # TODO 2: Indicate the mean and standard deviation with a color bar\n\n    # You can use this code as a template for the plot\n    fig, ax = plt.subplots()\n    sns.distplot(np.random.normal(mu, sigma, 1000), ax=ax, hist=False)\n    ax.axvline(mu, color='r')\n    ax.axvline(mu + sigma, color='r')\n    ax.axvline(mu - sigma, color='r')\n    ax.set(xlabel=f\"X mean: {mu}, X std: {sigma}\", ylabel=\"Frequency\")\n    ax.set_title(\"Normal Distribution\")\n    return ax", "compilation_passed": true, "time": 0.025149106979370117, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    normal_values = np.random.normal(mu, sigma, size=1000)\n    plot = sns.distplot(normal_values)\n    return plot", "compilation_passed": true, "time": 0.009132146835327148, "tests_passed": true, "error": null}
{"code": "random.seed(seed)\n    x = random.normal(mu, sigma, 1000)\n    plt.plot(x, color=\"red\")\n    sns.distplot(x, color=\"red\", hist=False, kde_kws={\"linewidth\": 5})\n    return plt.gca()", "compilation_passed": true, "time": 0.0008187294006347656, "tests_passed": false, "error": "NameError"}
{"code": "np.random.seed(seed)\n    dist = np.random.normal(mu, sigma, size=1000)\n    ax = sns.distplot(dist, bins=30, kde=True, color='#337ab7', hist_kws={'alpha':1},\n                      label='Normal')\n    ax.grid(False)\n    ax.set_yticks([])\n    ax.set_xticks([0, mu, sigma, mu + sigma, 1])\n    return ax", "compilation_passed": true, "time": 0.02378678321838379, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    norm = np.random.normal(mu, sigma, size=1000)\n\n    ax = sns.distplot(\n        norm,\n        bins=50,\n        kde=True,\n        color=\"skyblue\",\n        hist_kws={\"edgecolor\": \"black\"},\n        label=\"Random normal distribution\",\n    )\n    ax.axvline(mu, color=\"r\", linestyle=\"--\", label=\"mu\")\n    ax.axvline(mu + 2 * sigma, color=\"r\", linestyle=\"--\", label=\"sigma\")\n\n    plt.show()\n    return ax", "compilation_passed": true, "time": 0.02660202980041504, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    x = np.linspace(mu - 3 * sigma, mu + 3 * sigma, 1000)\n    y = 1 / (np.sqrt(2 * np.pi) * sigma) * np.exp(-(x - mu)**2 / (2 * sigma**2))\n\n    fig, ax = plt.subplots()\n    ax.plot(x, y)\n    ax.axvline(x=mu, color='r')\n    ax.axhline(y=1 / np.sqrt(2 * np.pi), color='k')\n\n    return ax", "compilation_passed": true, "time": 0.009660005569458008, "tests_passed": true, "error": null}
{"code": "r = np.random.normal(mu, sigma, 1000)\n    return plt.hist(r, bins=100)", "compilation_passed": true, "time": 0.01950693130493164, "tests_passed": true, "error": null}
{"code": "# Setting the random seed for reproducible results\n    np.random.seed(seed)\n\n    # Draw a sample from a normal distribution with the given mean and standard deviation\n    samples = np.random.normal(mu, sigma, 1000)\n\n    # Plot the distribution\n    fig, ax = plt.subplots(figsize=(6, 3))\n    ax.set_title(\"Normal distribution\")\n    sns.distplot(samples, ax=ax, kde=True, hist_kws={'alpha': 0.5})\n    ax.set_xlabel(\"x\")\n    ax.set_ylabel(\"PDF\")\n    return ax", "compilation_passed": true, "time": 0.02677130699157715, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    x = np.linspace(-10, 10, 1000)\n    y = np.random.normal(mu, sigma, len(x))\n    ax = plt.axvline(0, color='black')\n    ax = plt.axhline(0, color='black')\n    ax = sns.lineplot(x, y)\n    return ax", "compilation_passed": true, "time": 0.0013959407806396484, "tests_passed": false, "error": "TypeError"}
{"code": "np.random.seed(seed)\n    x = np.linspace(mu - 10*sigma, mu + 10*sigma, 1000)\n    plt.plot(x, np.exp(-0.5*((x-mu)/sigma)**2), label='Task 1')\n\n    return plt", "compilation_passed": true, "time": 0.0009379386901855469, "tests_passed": true, "error": null}
{"code": "# *******************************************************************************************************************\n    # This is an implementation of a random distribution using a normal distribution function.\n    # The plot is generated using the random samples and the parameters provided are the mean and the standard\n    # deviation of the normal distribution.\n    #\n    # The distribution is obtained using the function:\n    #   numpy.random.normal(mu, sigma, samples)\n    #\n    # The function is called with the parameters provided as the mean and the standard deviation of the normal\n    # distribution. The function returns the distribution.\n    #\n    # The distribution is obtained using the samples parameter as the number of samples to generate.\n    # *******************************************************************************************************************\n\n    # This is an implementation of a random distribution using a normal distribution function.\n    # The plot is generated using the random samples and the parameters provided are the mean and the standard\n    # deviation of the normal distribution.\n    #\n    # The distribution is obtained using the function:\n    #   numpy.random.normal(mu, sigma, samples)\n    #\n    # The function is called with the parameters provided as the mean and the standard deviation of", "compilation_passed": true, "time": 0.0006539821624755859, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    return sns.distplot(np.random.normal(mu, sigma, 1000), color=\"#1f77b4\", hist_kws={\"linewidth\": 35, \"alpha\": 1})", "compilation_passed": true, "time": 0.028834104537963867, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    normal_dist = np.random.normal(mu, sigma, 1000)\n    ax = sns.distplot(normal_dist,\n                      bins=10,\n                      kde=True,\n                      color='darkblue',\n                      hist_kws={\"linewidth\": 15, 'edgecolor': 'white'})\n    return ax", "compilation_passed": true, "time": 0.01445770263671875, "tests_passed": true, "error": null}
{"code": "# Draw random normal samples\n    random.seed(seed)\n    x = random.normal(mu, sigma, 1000)\n    sns.set_theme()\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_axes([0, 0.2, 1, 0.8])\n    ax.set_xlabel(\"x\")\n    ax.set_ylabel(\"Frequency\")\n    ax.set_title(f\"Normal Distribution (mu = {mu:.1f}, sigma = {sigma:.1f})\")\n    ax.hist(x, density=True)\n    return ax", "compilation_passed": true, "time": 0.0008680820465087891, "tests_passed": false, "error": "NameError"}
{"code": "np.random.seed(seed)\n    x = np.linspace(-sigma, sigma, 1000)\n    y = np.random.normal(mu, sigma, 1000)\n    plot = plt.plot(x, y)\n    plt.show()\n    return plot", "compilation_passed": true, "time": 0.0010271072387695312, "tests_passed": true, "error": null}
{"code": "fig, ax = plt.subplots(figsize=(8, 4))\n    x = np.linspace(0, 10, 1000)\n    y = 1.0 / (np.sqrt(2.0 * np.pi) * sigma) * np.exp(-(x-mu)**2 / (2.0 * sigma**2))\n    ax.plot(x, y, linewidth=2.0, color='red')\n    ax.axvline(x=0, color='gray', linestyle='-', linewidth=1.0)\n    ax.axvline(x=10, color='gray', linestyle='-', linewidth=1.0)\n    ax.set_title('Normal Distribution')\n    ax.set_ylabel('Probability Density', fontsize=16)\n    return ax", "compilation_passed": true, "time": 0.007699012756347656, "tests_passed": true, "error": null}
{"code": "# Generate a random normal distribution using the given mean and standard deviation\n    np.random.seed(seed)\n    x = np.random.normal(mu, sigma, 1000)\n\n    # Create a figure with two subplots\n    fig, ax = plt.subplots(nrows=2, ncols=1, figsize=(16, 8))\n\n    # Plot the random normal distribution in the first subplot\n    sns.distplot(x, ax=ax[0], kde=True, hist=False, color='blue', label='Normal distribution')\n    ax[0].axvline(x=mu, color='red', linestyle='dashed', linewidth=2)\n\n    # Create a color bar for the second subplot\n    cax = fig.add_axes([0.95, 0.05, 0.05, 0.9])\n    cbar = fig.colorbar(sns.color_palette('hls')[1], cax=cax)\n    cbar.set_ticks(np.linspace(", "compilation_passed": false, "time": 0.00024700164794921875, "tests_passed": false, "error": "SyntaxError"}
{"code": "# This is not your answer, so you will not know the answer until you have\n    # added a plot yourself.\n    np.random.seed(seed)\n    x = np.linspace(mu-3*sigma, mu+3*sigma, 1000)\n    return plt.plot(x, 1/np.sqrt(2*np.pi)*np.exp(-(x-mu)**2/2),\n                   color='b')\n    # This is not your answer, so you will not know the answer until you have\n    # added a plot yourself.\n    # return plt.bar(np.arange(len(x)), x, align='center', width=20, color='b')\n    # This is not your answer, so you will not know the answer until you have\n    # added a plot yourself.\n    # return plt.axvline(x=mu, linewidth=3)", "compilation_passed": true, "time": 0.0009438991546630859, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    plot = sns.distplot(np.random.normal(mu, sigma, size=1000), hist=True,\n                        color='blue',\n                        kde=True,\n                        fit=norm,  # set the distribution of interest as the\n                        # PDF of the plot to see how close it is to norm\n                        label='actual pdf')\n    return plot", "compilation_passed": true, "time": 0.0006740093231201172, "tests_passed": false, "error": "NameError"}
{"code": "# YOUR CODE GOES HERE\n\n    # Use the seed to generate the random samples\n    np.random.seed(seed)\n    samples = np.random.normal(mu, sigma, 1000)\n\n    # Plot the distribution using matplotlib\n    fig, ax = plt.subplots()\n    ax.hist(samples, bins=20, density=True)\n    ax.set_title('Normal Distribution')\n    ax.set_xlabel('Sample')\n    ax.set_ylabel('Probability Density')\n    return ax", "compilation_passed": true, "time": 0.007785797119140625, "tests_passed": true, "error": null}
{"code": "random.seed(seed)\n    random.normalvariate(mu, sigma)\n    fig, ax = plt.subplots()\n    ax.hist(random.normalvariate(mu, sigma), bins=1000)\n    ax.axvline(mu, c='r')\n    ax.set_title(\"Normal Distribution\")\n    ax.set_xlabel(\"x\")\n    ax.set_ylabel(\"Frequency\")\n    return ax", "compilation_passed": true, "time": 0.0007770061492919922, "tests_passed": false, "error": "NameError"}
{"code": "random.seed(seed)\n    x = np.linspace(mu - 3 * sigma, mu + 3 * sigma, 1000)\n    y = np.random.normal(mu, sigma, 1000)\n    plot = sns.distplot(\n        y,\n        kde=True,\n        bins=x,\n        color='skyblue',\n        hist_kws=dict(\n            linewidth=2,\n            alpha=1\n        ),\n    )\n    return plot", "compilation_passed": true, "time": 0.0006680488586425781, "tests_passed": false, "error": "NameError"}
{"code": "# Your code here...\n    rng = np.random.default_rng(seed)\n    samples = rng.normal(mu, sigma, 1000)\n    fig, ax = plt.subplots()\n    sns.distplot(samples, ax=ax, bins=100, hist=True, kde=True, rug=True,\n                 rug_kwargs={'alpha': 1},\n                 label='Normal', color='#3399FF')\n    ax.set_title('Normal Distribution')\n    ax.set_xlim(-3, 3)\n    ax.set_xlabel('Value')\n    ax.set_ylabel('Probability')\n    ax.set_yticks([])\n    ax.set_yticks(np.arange(0, 0.6, 0.1), minor=True)\n    ax.set_yticks(np.arange(0, 1, 0.1), minor=False)\n    ax.yaxis.set_major_formatter(plt.FormatStrFormatter('%.2f'))", "compilation_passed": true, "time": 0.0044629573822021484, "tests_passed": false, "error": "TypeError"}
{"code": "# Set the seed\n    np.random.seed(seed)\n\n    # Generate a normal distribution\n    samples = np.random.normal(mu, sigma, 1000)\n\n    # Plot the distribution\n    ax = sns.distplot(samples)\n\n    # Add the title, mean, and standard deviation to the plot\n    ax.set_title(f'Normal distribution with mu={mu:.2f}, sigma={sigma:.2f}')\n    ax.axvline(mu, color='r')\n    ax.axvline(mu + sigma, color='r', linestyle='dashed')\n    ax.axvline(mu - sigma, color='r', linestyle='dashed')\n\n    return ax", "compilation_passed": true, "time": 0.019863128662109375, "tests_passed": true, "error": null}
{"code": "# TODO: use the seed to obtain reproducible results\n    # TODO: draw a random normal distribution using the mu, sigma, and seed parameters\n    # TODO: plot the distribution using matplotlib\n    # TODO: return the Axes object\n    pass", "compilation_passed": true, "time": 0.0007750988006591797, "tests_passed": true, "error": null}
{"code": "# TODO: Implement task 2\n    pass", "compilation_passed": true, "time": 0.0006039142608642578, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    x = np.linspace(mu-3*sigma,mu+3*sigma,1000)\n    y = np.random.normal(mu, sigma, 1000)\n    fig = plt.figure()\n    ax = sns.scatterplot(x, y, hue=x)\n    return ax", "compilation_passed": true, "time": 0.0009407997131347656, "tests_passed": false, "error": "TypeError"}
