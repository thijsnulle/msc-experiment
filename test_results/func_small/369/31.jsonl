{"code": "fig = plt.figure()\n    ax = fig.add_subplot(111)\n    ax.hist(l, 25, density = True)\n    mu = np.mean(l)\n    std = np.std(l)\n    print(f'Fit results: mu = {round(mu,2)}, std = {round(std,2)}')\n    return ax", "compilation_passed": true, "time": 0.01871800422668457, "tests_passed": true, "error": null}
{"code": "ax = plt.subplot()\n    ax.hist(l)\n    mu = np.mean(l)\n    std = np.std(l)\n    ax.set_title('Fit results: mu = ' + '{0:.2f}'.format(mu) +\n                 ',  std = ' + '{0:.2f}'.format(std))\n\n    return ax", "compilation_passed": true, "time": 0.01120615005493164, "tests_passed": true, "error": null}
{"code": "fig, ax = plt.subplots()\n    ax.hist(l)\n    ax.set_title('Fit results: mu = %.2f,  std = %.2f' % stats.describe(l)[2:4])\n\n    return ax", "compilation_passed": true, "time": 0.016470909118652344, "tests_passed": true, "error": null}
{"code": "ax = plt.subplot(111)\n    plt.hist(l)\n    ax.set_title('Fit results: mu = %.2f,  std = %.2f' % (l.mean(), l.std()))\n    return ax", "compilation_passed": true, "time": 0.011409997940063477, "tests_passed": true, "error": null}
{"code": "ax = plt.subplot()\n    ax.hist(l, density=True)\n    mu = np.mean(l)\n    std = np.std(l)\n    ax.set_title(f\"Fit results: mu = {np.round(mu, 2)}, std = {np.round(std, 2)}\")\n    return ax", "compilation_passed": true, "time": 0.0032172203063964844, "tests_passed": true, "error": null}
{"code": "# TODO: Write your code here.\n    plt.hist(l, normed = True)\n\n    # find parameters for Gaussian function\n    mean, std = stats.norm.fit(l)\n    # print the parameters\n    print(f\"Fit results: mu = {round(mean,2)}, std = {round(std,2)}\")\n    return plt.gca()", "compilation_passed": true, "time": 0.003287076950073242, "tests_passed": false, "error": "AttributeError"}
{"code": "ax = plt.figure().add_axes((0.1, 0.1, 0.8, 0.8))\n    plt.hist(l, 10)\n    x = l.mean(), l.std()\n    ax.set_title(f'Fit results: mu = {x[0]:.2f},  std = {x[1]:.2f}')\n    return ax", "compilation_passed": true, "time": 0.36803197860717773, "tests_passed": true, "error": null}
{"code": "plt.title(f\"Fit results: mu = {np.mean(l):.2f}, std = {stats.stdev(l):.2f}\")\n    plt.hist(l)\n    plt.show()\n    return plt.gca()", "compilation_passed": true, "time": 0.0010819435119628906, "tests_passed": false, "error": "AttributeError"}
{"code": "ax = plt.subplot()\n\n    ax.hist(l)\n    ax.set_title(f'Fit results: mu = {stats.norm(np.mean(l), np.std(l)).mean:.2f},  std = {stats.norm(np.mean(l), np.std(l)).std:.2f}')\n\n    return ax", "compilation_passed": true, "time": 0.006074666976928711, "tests_passed": false, "error": "TypeError"}
{"code": "# TODO: Your code here\n    ax = plt.axes()\n    x = np.arange(min(l),max(l),0.001)\n    ax.hist(l,bins=x,color='c',edgecolor='r')\n    ax.set_title('Fit results: mu = {:.2f},  std = {:.2f}'.format(stats.trim_mean(l,4), stats.sem(l,0)))\n\n    return ax", "compilation_passed": true, "time": 0.5113718509674072, "tests_passed": false, "error": "ValueError"}
{"code": "mean = np.mean(l)\n    std = np.std(l)\n    return plt.hist(l, bins=30)", "compilation_passed": true, "time": 0.006762027740478516, "tests_passed": true, "error": null}
{"code": "fig = plt.figure()\n    fig.subplots_adjust(bottom=0, top=1, left=0, right=1)\n\n    ax = fig.add_subplot(111)\n\n    ax.set_title('Fit results: mu = {:.2f},  std = {:.2f}'.format(stats.mean(l), stats.stdev(l)))\n    ax.hist(l)\n\n    return ax", "compilation_passed": true, "time": 0.012510061264038086, "tests_passed": false, "error": "AttributeError"}
{"code": "# =========== DO NOT EDIT =============================================\n    # You can define additional function to make your implementation cleaner,\n    # but it is not required.\n\n    ax = plt.subplots()[1]\n\n    ax.hist(l)\n\n    xmin = 2 * np.min(l) - 1\n    xmax = 2 * np.max(l) + 1\n    x = np.linspace(xmin, xmax, 100000)\n    ax.plot(x, stats.norm.pdf(x, l.mean(), l.std()))\n\n    ax.set_title(f\"Fit results: mu = {round(l.mean(),2)}, std = {round(l.std(),2)}\")\n\n    ax.grid(True)\n\n    return ax", "compilation_passed": true, "time": 0.019125938415527344, "tests_passed": true, "error": null}
{"code": "mean = np.mean(l)\n    std = np.std(l)\n    ax = plt.hist(l, bins=10, normed=True, alpha=0.5,\n                  color='blue', label='non-normalized histogram')\n    x = np.linspace(np.min(l), np.max(l), 100)\n    y = stats.norm.pdf(x, mean, std)\n    plt.plot(x, y, label='Normal Distribution')\n    ax[0].set_title(f\"Fit results: mu = {mean:.2f},  std = {std:.2f}\")\n    return ax[0]", "compilation_passed": true, "time": 0.0035309791564941406, "tests_passed": false, "error": "AttributeError"}
{"code": "ax = plt.hist(l, bins=100, density=True)[0]\n\n    mu = np.round(l.mean(), 2)\n    std = np.round(l.std(), 2)\n    ax.set_title(f'Fit results: mu = {mu},  std = {std}')\n\n    return ax", "compilation_passed": true, "time": 0.017721176147460938, "tests_passed": false, "error": "AttributeError"}
{"code": "ax = plt.subplot()\n    ax.hist(l,bins=100,density=True,histtype='step',color='k')\n    mu = np.mean(l)\n    sigma = stats.sem(l)\n    ax.set_title(f'Fit results: mu = {mu:.2f},  std = {sigma:.2f}')\n    return ax", "compilation_passed": true, "time": 0.0038809776306152344, "tests_passed": true, "error": null}
{"code": "fig,ax=plt.subplots(1,1)\n    ax.set_title('Fit results: mu = '+str(round(stats.mean(l),2))+', std = '+str(round(stats.std(l),2)))\n    ax.hist(l,bins=40,density=True)\n    return ax", "compilation_passed": true, "time": 0.013003826141357422, "tests_passed": false, "error": "AttributeError"}
{"code": "fig, ax = plt.subplots()\n    ax.hist(l, density=True, bins=5, edgecolor='black')\n    ax.set_xlim(-1.5, 11.5)\n    ax.set_title(f'Fit results: mu = {l.mean():.2f},  std = {l.std():.2f}')\n    return ax", "compilation_passed": true, "time": 0.06863117218017578, "tests_passed": true, "error": null}
{"code": "ax = plt.hist(l, normed=True, color='g', bins=1000, edgecolor='black')\n    ax[0].set_xlabel('Value')\n    ax[0].set_ylabel('Probability')\n    ax[0].set_title(f'Fit results: mu = {np.round(np.mean(l),2)}, std = {np.round(np.std(l),2)}')\n    return ax[0]", "compilation_passed": true, "time": 0.16350078582763672, "tests_passed": false, "error": "AttributeError"}
{"code": "from numpy import array, median\n    from scipy import stats\n    from matplotlib.pyplot import figure, gcf, close\n    fig = figure(gcf(), 1, 1, figsize = (8, 8))\n    fig.clf()\n    ax = fig.add_subplot(111)\n    ax.hist(l, bins = 10)\n    ax.set_title('Fit results: mu = {:.2f},  std = {:.2f}'.format(median(l), stats.sem(l)))\n    close(fig)\n    return ax", "compilation_passed": true, "time": 0.0010821819305419922, "tests_passed": false, "error": "TypeError"}
{"code": "ax = plt.subplot()\n    ax.hist(l)\n    stats.gaussian_kde(l)(np.linspace(min(l),max(l),len(l))).plot(ax,l)\n    ax.set_title(f'Fit results: mu = {round(np.mean(l), 2)},  std = {round(stats.gaussian_kde(l).std(), 2)}')\n    return ax", "compilation_passed": true, "time": 0.016843795776367188, "tests_passed": false, "error": "AttributeError"}
{"code": "ax = plt.subplot(1,1,1)\n\n    # YOUR CODE HERE\n    n, bins, patches = ax.hist(l, bins=20, normed=True)\n    mu, sigma = stats.norm.pdf(bins, l.mean(), l.std()/np.sqrt(len(l)))\n    ax.plot(bins, mu, linewidth=1, color='r', label='mu = %1.2f, sigma = %1.2f'%(l.mean(), l.std()/np.sqrt(len(l))))\n    ax.legend(loc='best')\n\n    plt.close('all')\n    return ax", "compilation_passed": true, "time": 0.005193948745727539, "tests_passed": false, "error": "AttributeError"}
{"code": "n, bins, patches = plt.hist(l, normed = True)\n    y = stats.norm.pdf(bins, np.mean(l), np.std(l))\n    ax = plt.subplot(111)\n    ax.plot(bins, y)\n    ax.set_title(f\"Fit results: mu = {round(np.mean(l), 2)},  std = {round(np.std(l), 2)}\", loc = 'right')\n    ax.set_ylabel(f'Probability (pdf)')\n    ax.set_xlabel('Value')\n    ax.set_yticks(())\n    return ax", "compilation_passed": true, "time": 0.0033500194549560547, "tests_passed": false, "error": "AttributeError"}
{"code": "fig = plt.figure()\n    ax = plt.subplot()\n    ax.hist(l)\n    ax.set_title(\"Fit results: mu = {}, std = {:.2f}\".format(stats.mean(l), stats.std(l)))\n    ax.grid(True)\n    return ax", "compilation_passed": true, "time": 0.015538930892944336, "tests_passed": false, "error": "AttributeError"}
{"code": "ax=plt.subplots()\n    stats.norm.pdf(np.linspace(l.min(),l.max(),100),l.mean(),l.std())\n    ax.hist(l,normed=1)\n    plt.title(f'Fit results: mu = {round(l.mean(),2)}, std = {round(l.std(),2)}')\n    plt.show()\n    return ax", "compilation_passed": true, "time": 0.01314091682434082, "tests_passed": false, "error": "AttributeError"}
{"code": "plt.hist(l, bins=30, normed=True)\n    ax=plt.gca()\n    # TODO: fit a gaussian to the histogram with the default parameters\n    x_, y_ = stats.norm.pdf(l, 1, 0.01)\n    ax.plot(x_, y_)\n\n    # TODO: compute the mean and standard deviation\n    m, std = np.mean(l), np.std(l)\n\n    ax.set_title('Fit results: mu = {:.2f},  std = {:.2f}'.format(m, std))\n\n    return ax", "compilation_passed": true, "time": 0.007061958312988281, "tests_passed": false, "error": "AttributeError"}
{"code": "plt.hist(l,bins=100)\n    plt.title(f'Fit results: mu = {round(np.mean(l),2)},  std = {round(np.std(l),2)}')\n    ax=plt.gca()\n    return ax", "compilation_passed": true, "time": 0.019002199172973633, "tests_passed": true, "error": null}
{"code": "# TODO: Implement this function.\n\n    # Hint: https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.fit.html#scipy.stats.fit\n    # Note that you will have to import the scipy.stats function at the top of the code.\n    #\n    # Note that the returned value is an array of 2 values, mu and std. You need to format them with the {mean} and\n    # {standard deviation} as the title of the plot, and then set the title of the plot as\n    # \"Fit results: {mean}, {standard deviation}\".\n    #\n    # You can find the source code for the \"format\" method on the link below.\n    #\n    # Example:\n    #\n    #     fmt = '{mean}, {std}'\n    #     formatted = fmt.format(mean=5.0, std=0.0)\n    #     ax.set_title(formatted)\n\n    plt.hist(l)\n    mu, std = stats.norm.fit(l)\n    plt.title", "compilation_passed": true, "time": 0.0030221939086914062, "tests_passed": true, "error": null}
{"code": "import numpy as np\n    import matplotlib.pyplot as plt\n    import scipy.stats as stats\n    ax = plt.gca()\n\n    #\n    # Your code\n    #\n    ax.set_title(f'Fit results: mu = {round(np.mean(l),2)}, std = {round(np.std(l),2)}')\n    return ax", "compilation_passed": true, "time": 0.0010921955108642578, "tests_passed": true, "error": null}
{"code": "ax = plt.subplots()[1]\n    ax.hist(l)\n    ax.set_title(f'Fit results: mu = {stats.normaltest(l)[0].__round__(2)},  std = {stats.normaltest(l)[1].__round__(2)}')\n    return ax", "compilation_passed": true, "time": 0.019891977310180664, "tests_passed": true, "error": null}
