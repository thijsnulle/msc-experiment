{"code": "for d in data:\n        for fruit in d.keys():\n            if d[fruit] == 0:\n                d[fruit] = pd.NA\n\n    df = pd.DataFrame(data, index=range(0, len(data)))\n    ax = df.plot.line(title='Fruit Sales over Time', x='Time', y='Sales Quantity', style='-', marker='', color='black', lw=2, figsize=(15,5))\n    return ax", "compilation_passed": true, "time": 0.0018749237060546875, "tests_passed": false, "error": "KeyError"}
{"code": "# YOUR CODE GOES HERE\n    data = [{'apple': 10, 'banana': 15, 'cherry': 12, 'durian': 0}]\n\n    df = pd.DataFrame(data)\n\n    df = df.fillna(0)\n\n    ax = df.plot(\n        title={'center': 'Fruit Sales over Time'},\n        xlabel='Time',\n        ylabel='Sales Quantity'\n    )\n\n    return ax", "compilation_passed": true, "time": 0.020509004592895508, "tests_passed": false, "error": "ValueError"}
{"code": "data_df = pd.DataFrame(data)\n    for fruit, quantity in data_df.iterrows():\n        for value in quantity.values:\n            if type(value) != int:\n                raise TypeError(\"Value is not int.\")\n        data_df[fruit] = quantity\n    ax = data_df.plot(kind=\"line\", x=\"Time\", y=fruit, label=fruit, title=\"Fruit Sales over Time\", xlabel=\"Time\", ylabel=\"Sales Quantity\")\n\n    return ax", "compilation_passed": true, "time": 0.0015077590942382812, "tests_passed": false, "error": "TypeError"}
{"code": "# Your code goes here\n    df = pd.DataFrame(data=data)\n    df = df.fillna(0)\n    df = df.set_index('Time')\n    return df.plot()", "compilation_passed": true, "time": 0.001313924789428711, "tests_passed": false, "error": "KeyError"}
{"code": "if not isinstance(data, list):\n        raise TypeError(\"The data should be a list\")\n    if not all(isinstance(x, dict) for x in data):\n        raise TypeError(\"The data should be a list of dictionaries\")\n\n    fruit = {}\n    for x in data:\n        fruit.update(x)\n    df = pd.DataFrame(fruit)\n    df.fillna(0, inplace=True)\n    return df.plot(title='Fruit Sales over Time', xlabel='Time', ylabel='Sales Quantity')", "compilation_passed": true, "time": 0.0014307498931884766, "tests_passed": false, "error": "ValueError"}
{"code": "try:\n        for data_entry in data:\n            if not isinstance(data_entry, dict):\n                raise TypeError\n        data = pd.DataFrame(data)\n    except TypeError:\n        print(\"Invalid data type!\")\n        sys.exit()\n    else:\n        for key in data:\n            data[key] = data[key].fillna(0)\n        fig, ax = plt.subplots()\n        ax.set(\n            title={'center': \"Fruit Sales over Time\"},\n            xlabel=\"Time\",\n            ylabel=\"Sales Quantity\",\n        )\n        data.plot(ax=ax)\n        return ax", "compilation_passed": true, "time": 0.021513938903808594, "tests_passed": true, "error": null}
{"code": "data_type_error = (\n        f\"The input should be a list of dictionaries whose values are of the type {int}.\"\n    )\n\n    for i, element in enumerate(data):\n        for key, val in element.items():\n            if not isinstance(val, int):\n                raise TypeError(data_type_error)\n\n    result_dict = {}\n\n    for d in data:\n        for k, v in d.items():\n            result_dict.setdefault(k, []).append(v)\n\n    result_df = pd.DataFrame(\n        result_dict, columns=result_dict.keys(), index=list(range(0, len(data)))\n    )\n\n    plt.figure(dpi=300)\n    plt.title({\"center\": \"Fruit Sales over Time\"})\n    plt.xlabel(\"Time\")\n    plt.ylabel(\"Sales Quantity\")\n    plt.plot(result_df.index, result_df.T, label=\"Fruit Sales over Time\")\n    plt.show()\n\n    ", "compilation_passed": true, "time": 0.023993730545043945, "tests_passed": false, "error": "ValueError"}
{"code": "data = [pd.Series(row).fillna(0).to_dict() for row in data]\n    data = [{k: v for k, v in row.items() if not isinstance(v, pd._libs.missing.NaN)} for row in data]\n\n    df = pd.DataFrame(data)\n    df = df.astype(int)\n    df.plot(kind=\"line\", title=\"Fruit Sales over Time\")\n\n    return plt.gca()", "compilation_passed": true, "time": 0.0015628337860107422, "tests_passed": false, "error": "AttributeError"}
{"code": "raise NotImplementedError()", "compilation_passed": true, "time": 0.0010139942169189453, "tests_passed": false, "error": "NotImplementedError"}
{"code": "if len(data) == 0:\n        raise TypeError(\"Input data is empty.\")\n    if not (all(isinstance(d, dict) for d in data)):\n        raise TypeError(\"Input data is not a list of dictionaries.\")\n    if not (all(all(isinstance(val, int) or pd.isna(val) for val in d.values()) for d in data)):\n        raise TypeError(\"Values are not integers or NA/NaN.\")\n\n    return pd.DataFrame(data).fillna(0).plot()", "compilation_passed": true, "time": 0.020097970962524414, "tests_passed": true, "error": null}
{"code": "data = pd.DataFrame(data)\n    data = pd.DataFrame(data.fillna(0))\n    data = data.plot(kind=\"line\")\n    plt.title({\"center\": 'Fruit Sales over Time'})\n    plt.xlabel('Time')\n    plt.ylabel('Sales Quantity')\n    return data", "compilation_passed": true, "time": 0.021117210388183594, "tests_passed": true, "error": null}
{"code": "if type(data) is not list:\n        raise TypeError(\"`data` is expected to be a list, got {type}\".format(type=type(data)))\n    for d in data:\n        if type(d) is not dict:\n            raise TypeError(\"Each element of the `data` list must be a dict, got {type}\".format(type=type(d)))\n        for k, v in d.items():\n            if type(k) is not str or type(v) is not int:\n                raise TypeError(\"Each key and value of a dict in the `data` list must be str and int, got {key} = {value}, where {key} is a string and {value} is an integer\".format(key=k, value=v))\n\n    data_df = pd.DataFrame(data, index=['Time'])\n\n    for f in data_df.columns:\n        data_df[f] = data_df[f].fillna(0)\n\n    data_df.plot(title='Fruit Sales over Time', xlabel='Time', y", "compilation_passed": false, "time": 0.00028014183044433594, "tests_passed": false, "error": "SyntaxError"}
{"code": "raise NotImplementedError", "compilation_passed": true, "time": 0.0012371540069580078, "tests_passed": false, "error": "NotImplementedError"}
{"code": "# Your code here.\n    df = pd.DataFrame(data)\n    df.fillna(0, inplace=True)\n    df.plot(kind='line', title='Fruit Sales over Time', xlabel='Time', ylabel='Sales Quantity')\n    return df.axes", "compilation_passed": true, "time": 0.020216941833496094, "tests_passed": true, "error": null}
{"code": "# Your code starts here!\n    raise NotImplementedError", "compilation_passed": true, "time": 0.0012249946594238281, "tests_passed": false, "error": "NotImplementedError"}
{"code": "pd.options.display.max_columns = 50\n    pd.options.display.max_rows = 50\n\n    try:\n        data_frame = pd.DataFrame(data)\n        return data_frame.plot()\n    except TypeError:\n        print(\"Data must be a list of dictionaries, each element containing fruit name and quantity\")", "compilation_passed": true, "time": 0.02307295799255371, "tests_passed": true, "error": null}
{"code": "data = pd.DataFrame(data)\n    for col in data.columns:\n        if type(data[col][0]) not in [int, float]:\n            raise TypeError\n    data['Time'] = range(1, data.shape[0]+1)\n    data.set_index('Time', inplace=True)\n    plt.title('Fruit Sales over Time')\n    plt.xlabel('Time')\n    plt.ylabel('Sales Quantity')\n    return plt.plot(data, linewidth=4)", "compilation_passed": true, "time": 0.0015017986297607422, "tests_passed": false, "error": "TypeError"}
{"code": "# TODO: Implement\n    if not isinstance(data, list):\n        raise TypeError\n\n    if len(data) == 0:\n        return None\n\n    new_data = []\n    for i in range(len(data)):\n        if data[i] is None:\n            new_data.append({\"apple\": 0, \"banana\": 0, \"cherry\": 0, \"durian\": 0})\n        elif not isinstance(data[i], dict):\n            raise TypeError\n        else:\n            new_data.append(data[i])\n\n    data = pd.DataFrame.from_dict(new_data)\n\n    # Fill NA/NaN values with 0\n    data = data.fillna(0)\n\n    return pd.Series(data, index=pd.date_range(\"2020-01-01\", periods=len(data))).plot(\n        title=\"Fruit Sales over Time\", xlabel=\"Time\", ylabel=\"Sales Quantity\"\n    )", "compilation_passed": true, "time": 0.0017819404602050781, "tests_passed": false, "error": "ValueError"}
{"code": "# your code goes here", "compilation_passed": true, "time": 0.0010340213775634766, "tests_passed": true, "error": null}
{"code": "if not isinstance(data, list):\n        raise TypeError(\"Input should be a list.\")\n    for item in data:\n        if not isinstance(item, dict):\n            raise TypeError(\"All elements in list should be dictionaries.\")\n\n    # create empty dataframe\n    df = pd.DataFrame(columns=[])\n\n    for index, item in enumerate(data):\n        for fruit in item:\n            df[fruit] = pd.Series([item[fruit]]*index, dtype=\"float64\")\n        df = df.fillna(0)\n        df.plot(title=\"Fruit Sales over Time\")\n        plt.show()", "compilation_passed": true, "time": 0.039652109146118164, "tests_passed": true, "error": null}
{"code": "pd.set_option('display.max_rows', None)\n    if not isinstance(data, list):\n        raise TypeError(\"data should be a list\")\n    for i in range(len(data)):\n        if not isinstance(data[i], dict):\n            raise TypeError(\"data should be a list of dictionaries\")\n        for fruit, quantity in data[i].items():\n            if not isinstance(fruit, str) or not isinstance(quantity, int):\n                raise TypeError(\"data should be a list of dictionaries with str keys and int values\")\n\n    new_df = pd.DataFrame(data, index=range(1, len(data) + 1))\n    return new_df.plot(title=\"Fruit Sales over Time\", xlabel=\"Time\", ylabel=\"Sales Quantity\")", "compilation_passed": true, "time": 0.06343388557434082, "tests_passed": true, "error": null}
{"code": "data_pd = pd.DataFrame()\n    for i in data:\n        if not isinstance(i, dict):\n            raise TypeError(\"The input data should be a list of dictionaries\")\n    data_pd = pd.DataFrame(data)\n    data_pd.fillna(0, inplace=True)\n    return data_pd.plot(kind=\"line\", title=\"Fruit Sales over Time\", x_label=\"Time\", y_label=\"Sales Quantity\")", "compilation_passed": true, "time": 0.02066206932067871, "tests_passed": false, "error": "AttributeError"}
{"code": "# TODO: implement this\n    df = pd.DataFrame()\n    for i in data:\n        df = df.append(i, ignore_index=True)\n    print(df)\n    df = df.fillna(0)\n    df = df.sort_index()\n    df.plot(kind='line', legend=True)", "compilation_passed": true, "time": 0.0014641284942626953, "tests_passed": false, "error": "AttributeError"}
{"code": "try:\n        data = [pd.Series(i) for i in data]\n        data = pd.concat(data, axis=1)\n        df = pd.DataFrame(data.fillna(0))\n        df.plot(kind='line', title='Fruit Sales over Time')\n        return df\n    except TypeError:\n        raise TypeError", "compilation_passed": true, "time": 0.022318124771118164, "tests_passed": true, "error": null}
{"code": "# Make sure that data is of expected type:\n    if not isinstance(data, list) or any(not isinstance(x, dict) for x in data):\n        raise TypeError('Input data is not a list of dictionaries!')\n\n    if any(not isinstance(x, dict) for x in data):\n        raise TypeError('Data contains non-dictionaries!')\n\n    if any(key not in data[0] for key in data[0]):\n        raise TypeError(\n            'Data contains non-common keys!')\n\n    # Make sure that data contains all the same keys, so they can be used as columns\n    # in the dataframe:\n    common_keys = list(data[0].keys())\n\n    if not all(key in data[0] for key in common_keys):\n        raise TypeError(\n            'Data does not contain same keys!')\n\n    # Fill the dataframe with zeros:\n    data_df = pd.DataFrame(0, index=range(len(data)), columns=common_keys)\n\n    for row in range(len(data)):\n        ", "compilation_passed": false, "time": 0.000263214111328125, "tests_passed": false, "error": "IndentationError"}
{"code": "# TODO: Write your code here\n    raise NotImplementedError(\"Not implemented yet\")", "compilation_passed": true, "time": 0.001264810562133789, "tests_passed": false, "error": "NotImplementedError"}
{"code": "try:\n        for d in data:\n            for v in d.values():\n                assert isinstance(v, (int, float, np.int, np.int64)), f'{v} is not numeric!'\n            assert all(isinstance(k, str) for k in d), f'{k} is not a string!'\n\n        df = pd.DataFrame(data, index=[pd.to_datetime(t).to_numpy() for t in data[0].keys()])\n        df.fillna(0, inplace=True)\n        return df.plot(title=\"Fruit Sales over Time\", xlabel='Time', ylabel='Sales Quantity', grid=True)\n\n    except AssertionError as e:\n        raise TypeError from e", "compilation_passed": true, "time": 0.0012469291687011719, "tests_passed": false, "error": "NameError"}
{"code": "try:\n        if data is not None:\n            for i in data:\n                if len(i.keys()) != 3:\n                    raise ValueError\n                else:\n                    for k in i.keys():\n                        if type(i[k]) != int:\n                            raise ValueError\n        else:\n            raise ValueError\n    except TypeError:\n        raise TypeError\n    except ValueError:\n        raise ValueError\n\n    try:\n        data = pd.DataFrame(data)\n    except TypeError:\n        raise TypeError\n\n    for col in data:\n        data[col].fillna(0, inplace=True)\n\n    return data.plot.line(title='Fruit Sales over Time', xlabel='Time', ylabel='Sales Quantity')", "compilation_passed": true, "time": 0.0012068748474121094, "tests_passed": false, "error": "ValueError"}
{"code": "df = pd.DataFrame()\n    for row in data:\n        if not isinstance(row, dict):\n            raise TypeError(\"Input list must consist of dictionaries\")\n        df.loc[df.index.max() + 1] = pd.Series(row)\n    return plt.Axes.plot(df.index, df, linewidth=0)[0]", "compilation_passed": true, "time": 0.002213001251220703, "tests_passed": false, "error": "ValueError"}
