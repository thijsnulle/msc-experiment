{"code": "# Generate random data with the given size\n    data = np.random.rand(data_size)\n    # Select a random color for the histogram bars\n    color = np.random.choice(BAR_COLOR)\n\n    return data, color", "compilation_passed": true, "time": 0.00080108642578125, "tests_passed": true, "error": null}
{"code": "# Generate a random numeric data set of data_size elements\n    data = np.random.randint(0, 1000, data_size)\n\n    # Select a random color from the list of colors\n    color = np.random.choice(BAR_COLOR)\n\n    return data, color", "compilation_passed": true, "time": 0.00067901611328125, "tests_passed": true, "error": null}
{"code": "data = np.random.rand(data_size)\n    color = BAR_COLOR[np.random.choice(7, 1)[0]]\n    return data, color", "compilation_passed": true, "time": 0.0006630420684814453, "tests_passed": true, "error": null}
{"code": "random_data = np.random.randint(0, 100, data_size)\n    color = BAR_COLOR[np.random.randint(0, 7)]\n    return random_data, color", "compilation_passed": true, "time": 0.0007288455963134766, "tests_passed": true, "error": null}
{"code": "data = np.random.random(data_size)\n    return data, np.random.choice(BAR_COLOR)", "compilation_passed": true, "time": 0.0006592273712158203, "tests_passed": true, "error": null}
{"code": "rand_data = np.random.rand(data_size)\n    color = np.random.choice(BAR_COLOR)\n    return (rand_data, color)", "compilation_passed": true, "time": 0.0006430149078369141, "tests_passed": true, "error": null}
{"code": "data = np.random.uniform(size=data_size)\n    color = BAR_COLOR[np.random.randint(len(BAR_COLOR))]\n\n    return data, color", "compilation_passed": true, "time": 0.0006711483001708984, "tests_passed": true, "error": null}
{"code": "# Create random numeric data\n    data = np.random.random(data_size)\n    # Select a random color for the bars\n    color = BAR_COLOR[np.random.randint(0, len(BAR_COLOR) - 1)]\n    return data, color", "compilation_passed": true, "time": 0.0006079673767089844, "tests_passed": true, "error": null}
{"code": "# Generate random numbers between 0 and 100\n    data = np.random.randint(low=0, high=100, size=data_size)\n    # Generate random color using list comprehension\n    color = BAR_COLOR[np.random.randint(low=0, high=len(BAR_COLOR), size=1)]\n    return data, color", "compilation_passed": true, "time": 0.0007059574127197266, "tests_passed": false, "error": "TypeError"}
{"code": "if data_size < 1:\n        raise ValueError(f\"data_size ({data_size}) must be >= 1\")\n\n    data = np.random.rand(data_size)\n    color = BAR_COLOR[np.random.randint(0, len(BAR_COLOR) - 1)]\n    return data, color", "compilation_passed": true, "time": 0.000659942626953125, "tests_passed": true, "error": null}
{"code": "return (np.random.rand(data_size), np.random.choice(BAR_COLOR))", "compilation_passed": true, "time": 0.0006229877471923828, "tests_passed": true, "error": null}
{"code": "# Generate random numeric data\n    data = np.random.rand(data_size)\n\n    # Choose a random color from the list\n    color = np.random.choice(BAR_COLOR)\n\n    return data, color", "compilation_passed": true, "time": 0.0006649494171142578, "tests_passed": true, "error": null}
{"code": "data = np.random.rand(data_size)\n    color = np.random.choice(BAR_COLOR)\n    return data, color", "compilation_passed": true, "time": 0.0006160736083984375, "tests_passed": true, "error": null}
{"code": "data = np.random.random(data_size) * 1000\n    color = np.random.choice(BAR_COLOR)\n    return data, color", "compilation_passed": true, "time": 0.0006210803985595703, "tests_passed": true, "error": null}
{"code": "data = np.random.random((data_size,))\n    return data, BAR_COLOR[np.random.randint(len(BAR_COLOR))]", "compilation_passed": true, "time": 0.0006551742553710938, "tests_passed": true, "error": null}
{"code": "data = np.random.randint(100, size=data_size)\n    color = np.random.choice(BAR_COLOR)\n\n    return data, color", "compilation_passed": true, "time": 0.0006418228149414062, "tests_passed": true, "error": null}
{"code": "np.random.seed(0)\n    x = np.random.randint(0, 10, data_size)\n    color = np.random.choice(BAR_COLOR, data_size)\n    return x, color", "compilation_passed": true, "time": 0.0006301403045654297, "tests_passed": false, "error": "ValueError"}
{"code": "# Generate random data with specified data size\n    data = np.random.randint(-10, 10, size=data_size)\n\n    # Select a random color\n    color = BAR_COLOR[np.random.randint(0, len(BAR_COLOR))]\n\n    return data, color", "compilation_passed": true, "time": 0.0006968975067138672, "tests_passed": true, "error": null}
{"code": "data = np.random.random(data_size)\n    color = BAR_COLOR[np.random.choice(len(BAR_COLOR))]\n    return data, color", "compilation_passed": true, "time": 0.000614166259765625, "tests_passed": true, "error": null}
{"code": "return (np.random.rand(data_size) * 10, np.random.choice(BAR_COLOR))", "compilation_passed": true, "time": 0.0006210803985595703, "tests_passed": true, "error": null}
{"code": "x = np.random.randn(data_size)\n    color = np.random.choice(BAR_COLOR)\n    return x, color", "compilation_passed": true, "time": 0.0009610652923583984, "tests_passed": true, "error": null}
{"code": "data = np.random.random(data_size)\n    color = np.random.choice(BAR_COLOR)\n    return data, color", "compilation_passed": true, "time": 0.0006248950958251953, "tests_passed": true, "error": null}
{"code": "np.random.seed(42)\n    data = np.random.rand(data_size) * 100\n    color = BAR_COLOR[np.random.randint(0, len(BAR_COLOR))]\n\n    return data, color", "compilation_passed": true, "time": 0.0006911754608154297, "tests_passed": true, "error": null}
{"code": "data = np.random.randn(data_size)\n    color = np.random.choice(BAR_COLOR)\n    return data, color", "compilation_passed": true, "time": 0.0006220340728759766, "tests_passed": true, "error": null}
{"code": "data = np.random.randint(0, 10, data_size)\n    color = random.choice(BAR_COLOR)\n    return data, color", "compilation_passed": true, "time": 0.0006029605865478516, "tests_passed": false, "error": "NameError"}
{"code": "data = np.random.randint(5, 25, data_size)\n    color = BAR_COLOR[np.random.randint(0, len(BAR_COLOR))]\n    return (data, color)", "compilation_passed": true, "time": 0.000682830810546875, "tests_passed": true, "error": null}
{"code": "x = np.random.random(data_size)\n    y = np.random.random(data_size)\n\n    return np.random.uniform(low=0, high=1, size=data_size), np.random.choice(BAR_COLOR, data_size)", "compilation_passed": true, "time": 0.0006310939788818359, "tests_passed": false, "error": "ValueError"}
{"code": "data = np.random.random((data_size))\n    color = BAR_COLOR[np.random.randint(0, len(BAR_COLOR))]\n\n    return data, color", "compilation_passed": true, "time": 0.0005939006805419922, "tests_passed": true, "error": null}
{"code": "data = np.random.normal(size=data_size)\n    color = BAR_COLOR[np.random.randint(0, len(BAR_COLOR))]\n    return data, color", "compilation_passed": true, "time": 0.00066375732421875, "tests_passed": true, "error": null}
{"code": "random_data = np.random.random(data_size)\n    color = BAR_COLOR[np.random.randint(0, len(BAR_COLOR))]\n    return random_data, color", "compilation_passed": true, "time": 0.0005948543548583984, "tests_passed": true, "error": null}
