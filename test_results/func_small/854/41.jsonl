{"code": "def fac(x):\n        return reduce(lambda x, y: x*y, range(1, x+1))\n\n    if not isinstance(numbers, list):\n        raise TypeError('Input must be list of ints.')\n    elif any([x<0 for x in numbers]):\n        raise ValueError('Negative numbers are not allowed')\n    else:\n        return list(map(fac, numbers)), list(permutations(numbers))", "compilation_passed": true, "time": 0.0009291172027587891, "tests_passed": true, "error": null}
{"code": "if not isinstance(numbers, list):\n        raise TypeError('numbers must be a list')\n    if any(not isinstance(num, int) for num in numbers):\n        raise TypeError('numbers must contain only integers')\n    if any(num < 0 for num in numbers):\n        raise ValueError('numbers must be non-negative')\n    return (list(map(math.factorial, numbers)), list(permutations(numbers)))", "compilation_passed": true, "time": 0.0009090900421142578, "tests_passed": true, "error": null}
{"code": "if not isinstance(numbers, list) or not all(isinstance(num, int) for num in numbers):\n        raise TypeError(\"Numbers must be a list of integers.\")\n\n    if any(num < 0 for num in numbers):\n        raise ValueError(\"Negative numbers are not allowed.\")\n\n    factorials = list(map(math.factorial, numbers))\n    factorial_sums = map(sum, permutations(numbers))\n\n    return list(factorials), list(factorial_sums)", "compilation_passed": true, "time": 0.0009012222290039062, "tests_passed": true, "error": null}
{"code": "if not isinstance(numbers, list) or len(numbers) < 1:\n        raise TypeError(\"numbers is not a list of integers.\")\n    if any(n < 0 for n in numbers):\n        raise ValueError(\"input numbers are negative.\")\n\n    perm_list = [x for x in permutations(numbers)]\n    fac_list = [math.factorial(n) for n in numbers]\n\n    return fac_list, perm_list", "compilation_passed": true, "time": 0.0010018348693847656, "tests_passed": true, "error": null}
{"code": "# Your code starts here\n    # raise NotImplementedError(\"Your code starts here\")\n    try:\n        if not isinstance(numbers, list):\n            raise TypeError\n        elif reduce(lambda x, y: x + y, numbers) < 0:\n            raise ValueError\n    except TypeError as e:\n        print(e)\n    else:\n        fac = map(lambda x: math.factorial(x), numbers)\n        perm = permutations(numbers)\n    finally:\n        return fac, list(perm)", "compilation_passed": true, "time": 0.0008678436279296875, "tests_passed": true, "error": null}
{"code": "# if the input numbers is not a list or contains non-integer values raise error\n    try:\n        if not isinstance(numbers, list):\n            raise TypeError\n        for number in numbers:\n            if not isinstance(number, int):\n                raise TypeError\n    except TypeError:\n        raise TypeError(\n            f\"Input number {numbers} is not of type list.\"\n        )\n\n    # if there are no input numbers return empty lists\n    if len(numbers) == 0:\n        return [], []\n\n    # if the input numbers are negative raise error\n    for number in numbers:\n        if number < 0:\n            raise ValueError\n\n    # calculate factorial of each number using a generator\n    factorial = (math.factorial(number) for number in numbers)\n\n    # calculate factorial sum using the reduce function and the operator lambda\n    sum_factorial = reduce(lambda x, y: x + y, factorial)\n\n    # generate permutations using the itertools.permutations\n    perm = permutations(numbers)\n\n    return sum_factorial, list(perm)\n\n", "compilation_passed": true, "time": 0.0009217262268066406, "tests_passed": true, "error": null}
{"code": "# TODO: write code\n    try:\n        if not isinstance(numbers, list) or any(not isinstance(num, int) for num in numbers):\n            raise TypeError('Input is not a list of integers')\n        if any(num < 0 for num in numbers):\n            raise ValueError('Negative numbers are not allowed')\n    except TypeError:\n        raise\n\n    def factorial(n):\n        return math.factorial(n)\n\n    permutation = list(permutations(numbers))\n    return [reduce(lambda a, b: a * b, numbers)] * len(permutation), permutation", "compilation_passed": true, "time": 0.0009179115295410156, "tests_passed": true, "error": null}
{"code": "if type(numbers) != list:\n        raise TypeError('The input must be a list.')\n    if any(not isinstance(n, int) or n < 0 for n in numbers):\n        raise ValueError('The input must contain only positive integers.')\n    numbers = [math.factorial(n) for n in numbers]\n    return numbers, [list(p) for p in permutations(numbers)]", "compilation_passed": true, "time": 0.0008792877197265625, "tests_passed": true, "error": null}
{"code": "if isinstance(numbers, list) and all(isinstance(x, int) for x in numbers):\n        numbers = [abs(x) for x in numbers]\n        if not numbers:\n            return [[], []]\n\n        elif len(numbers) < 2:\n            return [[], [numbers]]\n\n        # sort list in decreasing order\n        numbers.sort(key=lambda x: -x)\n\n        # calculate sum of factorial\n        fac = [math.factorial(x) for x in numbers]\n        perm = permutations(numbers)\n\n    else:\n        raise TypeError('Please input numbers as a list of integers.')\n\n    if all(x >= 0 for x in numbers):\n        return fac, list(perm)\n\n    else:\n        raise ValueError('Please input positive numbers only.')", "compilation_passed": true, "time": 0.0010080337524414062, "tests_passed": true, "error": null}
{"code": "if not isinstance(numbers, list):\n        raise TypeError(\"Input numbers must be a list of integers.\")\n\n    if len(numbers) == 0:\n        return [], []\n\n    numbers = [num for num in numbers if num >= 0]\n\n    if len(numbers) == 0:\n        return [], []\n\n    perm = permutations(numbers)\n    fac_sum = list(map(lambda x: reduce(lambda a, b: a * b, x), perm))\n\n    return fac_sum, list(perm)", "compilation_passed": true, "time": 0.0009453296661376953, "tests_passed": true, "error": null}
{"code": "numbers = [int(x) for x in numbers]\n\n    if all(isinstance(x, int) for x in numbers) and all(x >= 0 for x in numbers):\n        perm = permutations(numbers)\n        perm = [list(x) for x in perm]\n\n        res = []\n        for x in perm:\n            fact_sum = sum([math.factorial(i) for i in x])\n            res.append(fact_sum)\n        return res, perm\n    else:\n        raise TypeError('Input must be a list of integers')", "compilation_passed": true, "time": 0.0009188652038574219, "tests_passed": true, "error": null}
{"code": "if not isinstance(numbers, list) or len(numbers) == 0:\n        return [[]], [[]]\n\n    numbers = list(map(int, numbers))\n\n    if min(numbers) < 0:\n        raise ValueError(\"Negative numbers not allowed.\")\n\n    return [reduce(math.factorial, nums, 1) for nums in permutations(numbers, len(numbers))], \\\n           list(permutations(numbers, len(numbers)))", "compilation_passed": true, "time": 0.0008761882781982422, "tests_passed": false, "error": "TypeError"}
{"code": "if not isinstance(numbers, list):\n        raise TypeError('numbers must be a list of integers')\n    if not numbers:\n        return [], []\n    if any(n < 0 for n in numbers):\n        raise ValueError('Input numbers must be positive')\n    nums = tuple(sorted(numbers))\n    facs = []\n    perms = list(permutations(nums))\n    for perm in perms:\n        fac = reduce(lambda x, y: math.factorial(x) + math.factorial(y), perm, 1)\n        facs.append(fac)\n    return facs, perms", "compilation_passed": true, "time": 0.0009191036224365234, "tests_passed": true, "error": null}
{"code": "def fac(x):\n        if x == 0:\n            return 1\n        else:\n            return x*fac(x-1)\n\n    if numbers == []:\n        return [[], []]\n    elif numbers[0] < 0:\n        raise ValueError('Negative number!')\n    else:\n        list_numbers = []\n        list_sums = []\n        for i in range(len(numbers)):\n            list_numbers.append(i)\n            list_sums.append(reduce(lambda x, y: fac(numbers[i]), list_numbers, 1))\n            list_numbers = []\n        list_perms = list(permutations(numbers))\n        return list_sums, list_perms", "compilation_passed": true, "time": 0.0009400844573974609, "tests_passed": true, "error": null}
{"code": "if len(numbers) == 0:\n        return [], []\n\n    for number in numbers:\n        if isinstance(number, int) and number >= 0:\n            continue\n        else:\n            raise TypeError(\"Input must be a list of non-negative integers.\")\n    return reduce(lambda x, y: x*y, map(math.factorial, numbers)), [list(x) for x in permutations(numbers)]", "compilation_passed": true, "time": 0.000865936279296875, "tests_passed": true, "error": null}
{"code": "try:\n        numbers = list(numbers)\n    except:\n        raise TypeError('numbers is not a list of integers')\n    if numbers and any(x < 0 for x in numbers):\n        raise ValueError('numbers cannot contain negative numbers')\n    if len(numbers) == 0:\n        return [], []\n    numbers.sort()\n    perms = list(permutations(numbers, len(numbers)))\n    perms_sum = [reduce(lambda x, y: x*math.factorial(y), p, 1) for p in perms]\n    return perms_sum, perms", "compilation_passed": true, "time": 0.001009225845336914, "tests_passed": true, "error": null}
{"code": "try:\n        if len(numbers) > 0 and all(type(i) == int for i in numbers):\n            factorials = [math.factorial(n) for n in numbers]\n            permutations_list = permutations(numbers)\n            return factorials, list(permutations_list)\n        else:\n            raise TypeError\n    except TypeError:\n        raise\n\n    return 0, 0", "compilation_passed": true, "time": 0.0008680820465087891, "tests_passed": true, "error": null}
{"code": "if len(numbers) < 2:\n        return [0, []]\n    return [sum(list(map(math.factorial, numbers))),\n            list(permutations(numbers))]", "compilation_passed": true, "time": 0.0007779598236083984, "tests_passed": true, "error": null}
{"code": "if not isinstance(numbers, list):\n        raise TypeError('Numbers should be a list of int.')\n    if any(i < 0 for i in numbers):\n        raise ValueError('Negative number found.')\n    permutations_list = []\n    for num in list(permutations(numbers)):\n        permutations_list.append(num)\n    fact_list = [math.factorial(i) for i in numbers]\n    return reduce(lambda x, y: x * y, fact_list), permutations_list", "compilation_passed": true, "time": 0.000885009765625, "tests_passed": true, "error": null}
{"code": "if isinstance(numbers, list) and numbers and all(\n            isinstance(num, int) for num in numbers):\n        # Calculate factorials of numbers\n        fac = [math.factorial(num) for num in numbers]\n\n        # Generate permutations of numbers\n        perms = permutations(numbers)\n\n        return fac, list(perms)\n    else:\n        raise TypeError(\"Input numbers must be a list of integers.\")\n        raise ValueError(\"Input numbers must be positive integers.\")", "compilation_passed": true, "time": 0.0008571147918701172, "tests_passed": true, "error": null}
{"code": "if numbers:\n        if not all([type(number) == int for number in numbers]):\n            raise TypeError('List should contain integers')\n\n        if any([number < 0 for number in numbers]):\n            raise ValueError('Negative numbers not allowed')\n\n        numbers = list(map(math.factorial, numbers))\n\n        perms = [perm for perm in permutations(numbers)]\n        factorial_sums = [reduce((lambda x, y: x + y), perm) for perm in perms]\n\n        return factorial_sums, perms\n\n    return [], []", "compilation_passed": true, "time": 0.0009400844573974609, "tests_passed": true, "error": null}
{"code": "if type(numbers) != list:\n        raise TypeError('numbers is not a list of integers.')\n    if any(number < 0 for number in numbers):\n        raise ValueError('Input numbers must be positive.')\n\n    if not numbers:\n        return [], []\n\n    factorials = list(map(math.factorial, numbers))\n    all_permutations = list(permutations(numbers))\n\n    return factorials, all_permutations", "compilation_passed": true, "time": 0.0008678436279296875, "tests_passed": true, "error": null}
{"code": "try:\n        if numbers == []:\n            return [], []\n        if len(numbers) != 0:\n            for elem in numbers:\n                if isinstance(elem, int) and elem >= 0:\n                    pass\n                else:\n                    raise TypeError\n        else:\n            raise ValueError\n    except TypeError:\n        print('The input is not a list of integers.')\n        return None, None\n    except ValueError:\n        print('The input contains negative numbers.')\n        return None, None\n\n    # generate all permutations\n    perm = list(permutations(numbers))\n\n    # calculate the factorial sums\n    fac = []\n    for i in range(len(perm)):\n        fac.append(math.factorial(perm[i][0] + perm[i][1] + perm[i][2]))\n\n    return fac, perm", "compilation_passed": true, "time": 0.0009579658508300781, "tests_passed": false, "error": "IndexError"}
{"code": "# Raise TypeError if numbers is not a list of integers\n    if not all(isinstance(x, int) for x in numbers):\n        raise TypeError(\"numbers must be a list of integers\")\n\n    # Raise ValueError if input numbers are negative\n    if any(x < 0 for x in numbers):\n        raise ValueError(\"input numbers must not contain negative numbers\")\n\n    # Calculate factorials\n    factorials = [math.factorial(x) for x in numbers]\n\n    # Calculate all permutations\n    perms = permutations(numbers)\n\n    return factorials, list(perms)", "compilation_passed": true, "time": 0.0008769035339355469, "tests_passed": true, "error": null}
{"code": "try:\n        for i in numbers:\n            if i < 0:\n                raise ValueError\n        return reduce(math.factorial, numbers), list(permutations(numbers))\n    except TypeError:\n        return [], []\n    except ValueError:\n        return [], []", "compilation_passed": true, "time": 0.0008678436279296875, "tests_passed": true, "error": null}
{"code": "if isinstance(numbers, list) == False:\n        raise TypeError('Numbers is not a list')\n    elif numbers == []:\n        return [], []\n\n    # 1. Calculate factorial of all elements in the input list\n    # 2. Create an empty list to store the factorial sum\n    # 3. Create an empty list to store all permutations\n\n    # 1.\n    def fact(x):\n        if x <= 1:\n            return 1\n        return fact(x - 1) * x\n\n    # 2.\n    fact_list = [fact(x) for x in numbers]\n\n    # 3.\n    perm = list(permutations(numbers, len(numbers)))\n    perm_list = []\n\n    # 4.\n    for i in perm:\n        perm_list.append(list(i))\n\n    # 5.\n    perm = list(perm)\n    return fact_list, perm_list", "compilation_passed": true, "time": 0.0009288787841796875, "tests_passed": true, "error": null}
{"code": "# check for empty list\n    if numbers == []:\n        return [], []\n    # check for negative numbers\n    if len([i for i in numbers if i < 0]):\n        raise ValueError('Input numbers are negative')\n    # get permutations of numbers\n    perm = list(permutations(numbers))\n    # get the sum of the factorial of each number in each permutation\n    fac = [reduce(lambda a, b: a*b, numbers) for numbers in perm]\n\n    return fac, perm", "compilation_passed": true, "time": 0.0008871555328369141, "tests_passed": true, "error": null}
{"code": "if isinstance(numbers, list) is False:\n        raise TypeError(\"Input is not a list of integers\")\n\n    for number in numbers:\n        if number < 0:\n            raise ValueError(\"Input is not a list of positive integers\")\n\n    factorial = [math.factorial(x) for x in numbers]\n    permutation = permutations(numbers)\n\n    return factorial, list(permutation)", "compilation_passed": true, "time": 0.0009701251983642578, "tests_passed": true, "error": null}
{"code": "if type(numbers) == list and not numbers:\n        return [], []\n    elif type(numbers) != list:\n        raise TypeError('Input is not a list or it is empty')\n    elif type(numbers[0]) != int:\n        raise TypeError('Input is not a list of integers')\n    elif len(numbers) < 2:\n        raise ValueError('Input is less than 2')\n    else:\n        try:\n            sum(numbers)\n            for num in numbers:\n                if num < 0:\n                    raise ValueError('Negative input')\n        except TypeError:\n            raise TypeError('Input is not a list of integers')\n\n    sum_fac = []\n    perm_list = list(permutations(numbers))\n\n    for perm in perm_list:\n        sum_fac.append(reduce(lambda x, y: x * y, map(math.factorial, perm)))\n\n    return sum_fac, perm_list", "compilation_passed": true, "time": 0.0010077953338623047, "tests_passed": true, "error": null}
{"code": "if not isinstance(numbers, list):\n        raise TypeError('numbers is not a list of integers')\n    for num in numbers:\n        if num < 0:\n            raise ValueError('number cannot be negative')\n    factorials = [math.factorial(x) for x in numbers]\n    perms = permutations(numbers)\n    perm = list(perms)\n    return factorials, perm", "compilation_passed": true, "time": 0.0008630752563476562, "tests_passed": true, "error": null}
