{"code": "file_list = glob.glob(os.path.join(ROOT_DIR, '*'))\n\n    moved_files = 0\n\n    for filename in file_list:\n        if os.path.isfile(filename):\n            with open(filename, 'rb') as f:\n                md5_hash = hashlib.md5(f.read()).hexdigest()\n\n                if md5_hash == SPECIFIC_HASH:\n                    shutil.move(filename, DEST_DIR)\n                    moved_files += 1\n\n    return moved_files", "compilation_passed": true, "time": 0.0016198158264160156, "tests_passed": true, "error": null}
{"code": "file_list = glob.glob(ROOT_DIR + '/*')\n    files_moved = 0\n    for file in file_list:\n        if not file.endswith('.py'):\n            continue\n        with open(file, 'rb') as f:\n            file_hash = hashlib.md5(f.read()).hexdigest()\n        if SPECIFIC_HASH == file_hash:\n            shutil.move(file, DEST_DIR)\n            files_moved += 1\n    return files_moved", "compilation_passed": true, "time": 0.0014393329620361328, "tests_passed": true, "error": null}
{"code": "count = 0\n    for path in glob.glob(os.path.join(ROOT_DIR, '*')):\n        # Check if the path is a file\n        if os.path.isfile(path):\n            # Calculate MD5 hash of the file\n            with open(path, 'rb') as f:\n                md5 = hashlib.md5(f.read()).hexdigest()\n\n            # Move the file to the destination directory if hash matches SPECIFIC_HASH\n            if md5 == SPECIFIC_HASH:\n                shutil.move(path, DEST_DIR)\n                count += 1\n    return count", "compilation_passed": true, "time": 0.0014891624450683594, "tests_passed": true, "error": null}
{"code": "# Check if the destination directory exists\n    if os.path.isdir(DEST_DIR):\n        # Create a new list to store the files\n        files_list = []\n\n        # Loop through all the files in the root directory\n        for root, dirnames, filenames in os.walk(ROOT_DIR):\n            # Loop through the files in the current directory\n            for filename in filenames:\n                # Compute the hash of the file\n                with open(os.path.join(root, filename), 'rb') as file:\n                    hash_value = hashlib.md5(file.read()).hexdigest()\n\n                # Check if the hash matches SPECIFIC_HASH\n                if hash_value == SPECIFIC_HASH:\n                    # Add the file to the list of files\n                    files_list.append(os.path.join(root, filename))\n\n                # Check if the file is a file\n                if os.path.isfile(os.path.join(root, filename)):\n                    # Move the file to the destination directory\n                    shutil.move(os", "compilation_passed": false, "time": 0.0002009868621826172, "tests_passed": false, "error": "SyntaxError"}
{"code": "md5sum = hashlib.md5()\n    count = 0\n    for filename in glob.glob(f\"{ROOT_DIR}/*.png\"):\n        md5sum.update(open(filename, 'rb').read())\n        if md5sum.hexdigest() == SPECIFIC_HASH:\n            count += 1\n            shutil.move(filename, DEST_DIR)\n            md5sum = hashlib.md5()\n    return count", "compilation_passed": true, "time": 0.0015208721160888672, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(ROOT_DIR):\n        raise Exception(f\"{ROOT_DIR} is not an existing directory.\")\n    if not os.path.isdir(ROOT_DIR):\n        raise Exception(f\"{ROOT_DIR} is not a directory.\")\n\n    # Calculate the MD5 hash of each file in the specified directory\n    hashes = {}\n    for filename in glob.glob(os.path.join(ROOT_DIR, \"*\")):\n        hash_value = hashlib.md5()\n        with open(filename, \"rb\") as f:\n            chunk_size = 1024  # Set the chunk size as needed\n            while chunk := f.read(chunk_size):\n                hash_value.update(chunk)\n        hashes[hash_value.hexdigest()] = filename\n\n    # Move all files that match the specific hash to the target directory\n    num_moves = 0\n    for hash_value in hashes:\n        if hash_value == SPECIFIC_HASH:\n            shutil.move(hashes[hash_", "compilation_passed": false, "time": 0.0002219676971435547, "tests_passed": false, "error": "SyntaxError"}
{"code": "file_count = 0\n    for filename in glob.glob(os.path.join(ROOT_DIR, '**/*.{0}'.format(SPECIFIC_HASH.upper())), recursive=True):\n        with open(filename, 'rb') as f:\n            hash_value = hashlib.md5(f.read()).hexdigest()\n        if hash_value == SPECIFIC_HASH:\n            shutil.move(filename, DEST_DIR)\n            file_count += 1\n    return file_count", "compilation_passed": true, "time": 0.0017201900482177734, "tests_passed": true, "error": null}
{"code": "count = 0\n    for path in glob.iglob(ROOT_DIR + \"/**\", recursive=True):\n        with open(path, \"rb\") as f:\n            md5_hash = hashlib.md5(f.read()).hexdigest()\n            if SPECIFIC_HASH == md5_hash:\n                shutil.copy2(path, DEST_DIR)\n                count += 1\n    return count", "compilation_passed": true, "time": 0.0014226436614990234, "tests_passed": false, "error": "IsADirectoryError"}
{"code": "print('Running task func')\n    print('Parameters: ', locals().items())\n\n    num_files_moved = 0\n\n    for file_path in glob.glob(os.path.join(ROOT_DIR, '**', '*')):\n        if not os.path.isfile(file_path):\n            continue\n\n        with open(file_path, 'rb') as file:\n            md5_hash = hashlib.md5()\n            md5_hash.update(file.read())\n\n            if md5_hash.hexdigest() == SPECIFIC_HASH:\n                try:\n                    os.makedirs(os.path.dirname(DEST_DIR), exist_ok=True)\n                except:\n                    pass\n                shutil.move(file_path, DEST_DIR)\n                num_files_moved += 1\n\n    print(\"Files moved:\", num_files_moved)\n\n    return num_files_moved", "compilation_passed": true, "time": 0.0015211105346679688, "tests_passed": true, "error": null}
{"code": "file_list = glob.glob(ROOT_DIR + '/*')\n\n    for file in file_list:\n        try:\n            with open(file, 'rb') as f:\n                file_hash = hashlib.md5(f.read()).hexdigest()\n                if file_hash == SPECIFIC_HASH:\n                    shutil.move(file, DEST_DIR)\n                    print(f\"File {file} moved to {DEST_DIR}\")\n        except FileNotFoundError:\n            continue", "compilation_passed": true, "time": 0.001466989517211914, "tests_passed": true, "error": null}
{"code": "n_files_moved = 0\n    for root, _, files in os.walk(ROOT_DIR, topdown=True):\n        for file_path in files:\n            file_path = os.path.join(root, file_path)\n            # Move file only if it is a non-empty file\n            if os.path.getsize(file_path) > 0:\n                hash_value = hashlib.md5(\n                    open(file_path, \"rb\").read()).hexdigest()\n                if hash_value == SPECIFIC_HASH:\n                    shutil.move(file_path, DEST_DIR)\n                    n_files_moved += 1\n    return n_files_moved", "compilation_passed": true, "time": 0.001477956771850586, "tests_passed": true, "error": null}
{"code": "count = 0\n    for f in glob.glob(os.path.join(ROOT_DIR, '*')):\n        file_hash = hashlib.md5(open(f, \"rb\").read()).hexdigest()\n        if file_hash == SPECIFIC_HASH:\n            shutil.move(f, DEST_DIR)\n            count += 1\n    return count", "compilation_passed": true, "time": 0.0014171600341796875, "tests_passed": true, "error": null}
{"code": "# Move files\n    files_moved = 0\n    for file_path in glob.glob(f\"{ROOT_DIR}/*\"):\n        with open(file_path, 'rb') as f:\n            file_hash = hashlib.md5()\n            file_hash.update(f.read())\n            file_hash_value = file_hash.hexdigest()\n\n            if file_hash_value == SPECIFIC_HASH:\n                shutil.move(file_path, DEST_DIR)\n                files_moved += 1\n    return files_moved", "compilation_passed": true, "time": 0.0015060901641845703, "tests_passed": true, "error": null}
{"code": "md5_hashes = {}\n    for root, _, filenames in os.walk(ROOT_DIR):\n        for filename in filenames:\n            path = os.path.join(root, filename)\n            if os.path.isfile(path):\n                with open(path, \"rb\") as f:\n                    md5_hash = hashlib.md5(f.read()).hexdigest()\n                    if md5_hash not in md5_hashes:\n                        md5_hashes[md5_hash] = []\n                    md5_hashes[md5_hash].append(filename)\n    moved_files = 0\n    for hash_value, filenames in md5_hashes.items():\n        if hash_value == SPECIFIC_HASH:\n            for filename in filenames:\n                source_path = os.path.join(ROOT_DIR, filename)\n                destination_path = os.path.join(DEST_DIR, filename)\n                shutil.move(source_path, destination_path)\n                moved_", "compilation_passed": true, "time": 0.001506805419921875, "tests_passed": true, "error": null}
{"code": "files_moved = 0\n\n    for root, dirs, files in os.walk(ROOT_DIR):\n        for file in files:\n            file_path = os.path.join(root, file)\n            file_md5 = hashlib.md5()\n            with open(file_path, 'rb') as f:\n                file_md5.update(f.read())\n            file_hash = file_md5.hexdigest()\n\n            if file_hash == SPECIFIC_HASH:\n                shutil.move(file_path, DEST_DIR)\n                files_moved += 1\n\n    return files_moved", "compilation_passed": true, "time": 0.0014209747314453125, "tests_passed": true, "error": null}
{"code": "# Ensure that the destination directory exists.\n    if not os.path.isdir(DEST_DIR):\n        os.makedirs(DEST_DIR)\n    else:\n        print(f\"ERROR: Destination directory already exists: {DEST_DIR}\")\n        return 0\n\n    # Initialize a counter for the number of files moved.\n    num_files_moved = 0\n\n    # Iterate over the files in ROOT_DIR\n    for file in glob.glob(os.path.join(ROOT_DIR, '*')):\n        # Calculate the MD5 hash of the file\n        md5_hash = hashlib.md5()\n        with open(file, 'rb') as f:\n            # Read the file in chunks\n            chunk_size = 1024 * 1024  # 1 MB\n            while chunk := f.read(chunk_size):\n                md5_hash.update(chunk)\n        file_hash = md5_hash.hexdigest()\n\n        # Move the file to DEST_DIR if it matches the specified hash\n        if", "compilation_passed": false, "time": 0.00018668174743652344, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not os.path.exists(ROOT_DIR):\n        print(\"ERROR: The root directory does not exist\")\n        return 0\n\n    if not os.path.exists(DEST_DIR):\n        os.makedirs(DEST_DIR)\n\n    files = glob.glob(os.path.join(ROOT_DIR, \"*\"))\n    num_files_moved = 0\n\n    for file in files:\n        with open(file, \"rb\") as f:\n            md5 = hashlib.md5()\n            md5.update(f.read())\n            hash_str = md5.hexdigest()\n\n            if hash_str == SPECIFIC_HASH:\n                shutil.move(file, os.path.join(DEST_DIR, os.path.basename(file)))\n                num_files_moved += 1\n\n    return num_files_moved", "compilation_passed": true, "time": 0.0036249160766601562, "tests_passed": true, "error": null}
{"code": "count = 0\n    if not os.path.exists(ROOT_DIR):\n        return 0\n    if not os.path.exists(DEST_DIR):\n        os.makedirs(DEST_DIR)\n    for root, dirs, files in os.walk(ROOT_DIR):\n        for file in files:\n            path = os.path.join(root, file)\n            if SPECIFIC_HASH == hashlib.md5(open(path, 'rb').read()).hexdigest():\n                count += 1\n                dest_path = os.path.join(DEST_DIR, file)\n                shutil.move(path, dest_path)\n    return count", "compilation_passed": true, "time": 0.0035169124603271484, "tests_passed": true, "error": null}
{"code": "num_files = 0\n    for root, dirs, files in os.walk(ROOT_DIR):\n        for f in files:\n            filepath = os.path.join(root, f)\n            md5_hash = hashlib.md5()\n            with open(filepath, 'rb') as fh:\n                while True:\n                    data = fh.read(8192)\n                    if not data:\n                        break\n                    md5_hash.update(data)\n            md5_hash = md5_hash.hexdigest()\n            if md5_hash == SPECIFIC_HASH:\n                shutil.move(filepath, DEST_DIR)\n                num_files += 1\n    return num_files", "compilation_passed": true, "time": 0.0015366077423095703, "tests_passed": true, "error": null}
{"code": "counter = 0\n    for filepath in glob.glob(f\"{ROOT_DIR}/**\", recursive=True):\n        if os.path.isfile(filepath):\n            with open(filepath, 'rb') as f:\n                data = f.read()\n                md5 = hashlib.md5(data).hexdigest()\n                if SPECIFIC_HASH == md5:\n                    shutil.move(filepath, DEST_DIR)\n                    counter += 1\n    return counter", "compilation_passed": true, "time": 0.0015816688537597656, "tests_passed": true, "error": null}
{"code": "files_to_move = glob.glob(os.path.join(ROOT_DIR, '*'))\n    counter = 0\n    for file in files_to_move:\n        if file.find('.txt') != -1:\n            continue\n        hash_md5 = hashlib.md5(file).hexdigest()\n        if SPECIFIC_HASH == hash_md5:\n            counter += 1\n            shutil.move(file, os.path.join(DEST_DIR, os.path.basename(file)))\n    return counter", "compilation_passed": true, "time": 0.0014300346374511719, "tests_passed": true, "error": null}
{"code": "# Assertions\n    assert isinstance(SPECIFIC_HASH, str)\n\n    # Get the files matching the specified hash\n    files_to_move = glob.glob(os.path.join(ROOT_DIR, '**', '*.*'))\n\n    # Filter files based on specific hash\n    files_to_move = [f for f in files_to_move if hashlib.md5(open(f, 'rb').read()).hexdigest() == SPECIFIC_HASH]\n\n    # Move files to target directory\n    shutil.move(files_to_move, DEST_DIR)\n\n    # Return number of files moved\n    return len(files_to_move)", "compilation_passed": true, "time": 0.0014710426330566406, "tests_passed": false, "error": "TypeError"}
{"code": "num_files_moved = 0\n    for root, dirs, files in os.walk(ROOT_DIR):\n        for file in files:\n            if file.endswith('.sh'):\n                continue\n            full_path = os.path.join(root, file)\n            if hashlib.md5(open(full_path, 'rb').read()).hexdigest() == SPECIFIC_HASH:\n                shutil.move(full_path, os.path.join(DEST_DIR, file))\n                num_files_moved += 1\n    return num_files_moved", "compilation_passed": true, "time": 0.001425027847290039, "tests_passed": true, "error": null}
{"code": "moved_files = 0\n    for file_path in glob.glob(os.path.join(ROOT_DIR, '*')):\n        with open(file_path, 'rb') as f:\n            data = f.read()\n            md5_hash = hashlib.md5(data).hexdigest()\n            if md5_hash == SPECIFIC_HASH:\n                shutil.move(file_path, os.path.join(DEST_DIR, os.path.basename(file_path)))\n                moved_files += 1\n    return moved_files", "compilation_passed": true, "time": 0.001627206802368164, "tests_passed": true, "error": null}
{"code": "# Create a list to store the files that match SPECIFIC_HASH\n    files_matching_hash = []\n\n    # Create a list to store the files that do not match SPECIFIC_HASH\n    files_not_matching_hash = []\n\n    # Iterate through all files in the ROOT_DIR\n    for file_path in glob.glob(f'{ROOT_DIR}/*'):\n        # Calculate the MD5 hash for each file in ROOT_DIR\n        with open(file_path, 'rb') as file:\n            file_hash = hashlib.md5(file.read()).hexdigest()\n\n        # Check if file_hash matches SPECIFIC_HASH\n        if file_hash == SPECIFIC_HASH:\n            # Move the file to the DEST_DIR if it matches SPECIFIC_HASH\n            shutil.move(file_path, f'{DEST_DIR}/{os.path.basename(file_path)}')\n            files_matching_hash.append(os.path.basename(file_path))\n        else:\n            # Add the file to the files_not", "compilation_passed": false, "time": 0.00018906593322753906, "tests_passed": false, "error": "IndentationError"}
{"code": "print(f'Checking MD5 of files under {ROOT_DIR} for {SPECIFIC_HASH}')\n    moved_files = 0\n    for filepath in glob.glob(os.path.join(ROOT_DIR, '*')):\n        with open(filepath, 'rb') as file:\n            file_md5 = hashlib.md5(file.read()).hexdigest()\n        if file_md5 == SPECIFIC_HASH:\n            shutil.move(filepath, DEST_DIR)\n            moved_files += 1\n            print(f'Move {filepath} to {DEST_DIR}')\n    return moved_files", "compilation_passed": true, "time": 0.00156402587890625, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(ROOT_DIR):\n        raise Exception(\"%s does not exist\" % ROOT_DIR)\n\n    if os.path.exists(DEST_DIR):\n        shutil.rmtree(DEST_DIR, ignore_errors=True)\n    os.makedirs(DEST_DIR)\n\n    hash_map = {}\n    for root, dirs, files in os.walk(ROOT_DIR):\n        for file in files:\n            file_path = os.path.join(root, file)\n            if not os.path.islink(file_path):\n                file_hash = hashlib.md5(\n                    open(file_path, \"rb\").read()).hexdigest()\n                if file_hash in hash_map:\n                    hash_map[file_hash].append(file_path)\n                else:\n                    hash_map[file_hash] = [file_path]\n\n    for hash_value, files in hash_map.items():\n        if hash_value == SPECIFIC_HASH:\n            for", "compilation_passed": false, "time": 0.0002391338348388672, "tests_passed": false, "error": "SyntaxError"}
{"code": "try:\n        # Calculate MD5 hash of all files in ROOT_DIR\n        files_hash = {}\n        for root, _, files in os.walk(ROOT_DIR):\n            for file_name in glob.iglob(os.path.join(root, '**', '*.*')):\n                if file_name.endswith('.py') or file_name.endswith('.ipynb'):\n                    continue\n                if file_name.endswith('.md'):\n                    continue\n                with open(file_name, 'rb') as file:\n                    hash_value = hashlib.md5(file.read()).hexdigest()\n                    if hash_value not in files_hash:\n                        files_hash[hash_value] = file_name\n                    elif files_hash[hash_value] != file_name:\n                        files_hash[hash_value] = file_name\n\n        # Move files that match the specific hash value to DEST_DIR\n        moved_count = 0\n        for hash_value, file", "compilation_passed": false, "time": 0.0001990795135498047, "tests_passed": false, "error": "SyntaxError"}
{"code": "count = 0\n    for dirpath, _, filenames in os.walk(ROOT_DIR):\n        for filename in filenames:\n            path = os.path.join(dirpath, filename)\n            if SPECIFIC_HASH == hashlib.md5(open(path, 'rb').read()).hexdigest():\n                dest_path = os.path.join(DEST_DIR, filename)\n                shutil.move(path, dest_path)\n                count += 1\n    return count", "compilation_passed": true, "time": 0.001641988754272461, "tests_passed": true, "error": null}
{"code": "# check that the root directory exists\n    if not os.path.exists(ROOT_DIR):\n        raise Exception(f\"The given root directory {ROOT_DIR} does not exist.\")\n    # check if the given target directory exists\n    if not os.path.exists(DEST_DIR):\n        os.makedirs(DEST_DIR)\n    else:\n        for filename in glob.iglob(f\"{DEST_DIR}/*\", recursive=True):\n            os.remove(filename)\n    # calculate the MD5 hash of all files in the root directory\n    with open(os.devnull, 'wb') as devnull:\n        for root, _, filenames in os.walk(ROOT_DIR, topdown=True):\n            for filename in filenames:\n                # calculate the MD5 hash of the file and compare to the specified hash\n                with open(os.path.join(root, filename), 'rb') as f:\n                    if SPECIFIC_HASH == hashlib.md5(f.read()).hexdigest():\n                        # move the file to the", "compilation_passed": false, "time": 0.00019884109497070312, "tests_passed": false, "error": "IndentationError"}
