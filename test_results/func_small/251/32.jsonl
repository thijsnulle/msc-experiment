{"code": "# check data type\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError\n\n    # check the columns\n    if 'Name' not in data.columns or 'Date' not in data.columns or 'Job' not in data.columns:\n        raise ValueError\n\n    # check the dates\n    try:\n        data['Date'] = pd.to_datetime(data['Date'])\n    except Exception as e:\n        raise ValueError from e\n\n    # check the job\n    job_counter = pd.Series(data['Job']).value_counts()\n    total_job = job_counter.sum()\n    job_counter = (100 * job_counter / total_job).astype(int)\n\n    fig, ax = plt.subplots(1, 1, figsize=(8, 8))\n    plt.pie(x=job_counter, autopct='%.1f%%', labels=job_counter.index)\n    fig.add_subplot(ax)\n    plt.show()\n    return fig", "compilation_passed": true, "time": 0.07050085067749023, "tests_passed": true, "error": null}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError('input is not a DataFrame')\n    data['Date'] = pd.to_datetime(data['Date'])\n    data['Year'] = data['Date'].dt.year\n    data.loc[data['Job'] == 'Lawyer', 'Job'] = 'Lawyer'\n    fig, ax = plt.subplots(1, figsize=(15, 15))\n    fig.set_facecolor((0.2, 0.3, 0.2))\n    ax.pie(data.groupby('Job')['Job'].size(), labels=None, autopct='%1.1f%%',\n           colors=['#D424F6', '#664AFF', '#4B99FF', '#02A1FF', '#04FF59'], startangle=90)\n    ax.axis('equal')\n    return fig", "compilation_passed": true, "time": 0.07584881782531738, "tests_passed": true, "error": null}
{"code": "fig = plt.figure()\n    ax = fig.add_subplot(111)\n    ax.pie(data.groupby(\"Job\").size().values)\n    ax.set_title(\"Distribution\")\n    return fig", "compilation_passed": true, "time": 0.06818103790283203, "tests_passed": true, "error": null}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"The input data should be a DataFrame.\")\n    data.drop_duplicates()\n    data.groupby(by='Job').size().plot(kind='pie', autopct='%1.2f%%')\n    plt.show()\n    return fig", "compilation_passed": true, "time": 0.007345914840698242, "tests_passed": false, "error": "NameError"}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError('Input data should be a pandas DataFrame.')\n\n    fig = plt.figure(figsize=(8, 6))\n    ax = fig.add_subplot(111)\n\n    # Group the data by job, extract the values and sort them in descending order\n    sorted_data = data.groupby('Job')['Job'].count().sort_values(ascending=False)\n\n    # Define the pie chart colors and labels\n    colors = ['gold', 'red', 'cyan', 'green', 'blue', 'purple', 'magenta', 'olive', 'teal', 'orange']\n    labels = sorted_data.index.tolist()\n\n    # Draw the pie chart\n    ax.pie(sorted_data.values, labels=labels, colors=colors)\n    plt.legend(labels, loc='upper left', bbox_to_anchor=(1, 1))\n    plt.title(\"Distribution of jobs\")\n    return fig", "compilation_passed": true, "time": 0.06702804565429688, "tests_passed": true, "error": null}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"Input data must be a pandas DataFrame.\")\n\n    job_counts = data['Job'].value_counts()\n    job_proportions = job_counts / len(data)\n    fig, ax = plt.subplots()\n    ax.pie(job_proportions, autopct='%1.2f%%', startangle=90, labels=job_proportions.index)\n    ax.set_title('Job Distribution')\n    plt.show()\n    return fig", "compilation_passed": true, "time": 0.06484675407409668, "tests_passed": true, "error": null}
{"code": "# TODO: write your code here\n    raise NotImplementedError", "compilation_passed": true, "time": 0.0011968612670898438, "tests_passed": false, "error": "NotImplementedError"}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"Input data must be a pandas DataFrame.\")\n    x = data['Job'].value_counts().index.tolist()\n    y = data['Job'].value_counts().tolist()\n    fig, ax = plt.subplots(figsize=(10, 7))\n    ax.pie(y, labels=x, autopct='%1.1f%%', shadow=True,\n           explode=[0, 0.1, 0.2], startangle=90, pctdistance=0.55,\n           autoremove=True)\n    ax.set_title('Distribution of job')\n    return fig", "compilation_passed": true, "time": 0.012335777282714844, "tests_passed": false, "error": "TypeError"}
{"code": "job_counts = data['Job'].value_counts()\n    plt.pie(job_counts, labels=job_counts.index, autopct='%1.1f%%')\n    return fig", "compilation_passed": true, "time": 0.0014529228210449219, "tests_passed": false, "error": "NameError"}
{"code": "fig, ax = plt.subplots()\n    ax.pie(data.groupby('Job')['Name'].count(),\n           labels=data.Job.unique(),\n           autopct='%1.1f%%', autoremove=True,\n           startangle=90,\n           shadow=True)\n    return fig", "compilation_passed": true, "time": 0.014496088027954102, "tests_passed": false, "error": "TypeError"}
{"code": "fig, ax = plt.subplots()\n\n    # Check if the input data is a pandas DataFrame\n    if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"Input data is not a pandas DataFrame.\")\n\n    # Set the color map\n    cmap = plt.get_cmap('tab10')\n\n    # Convert the job column to a list of strings\n    job_list = data['Job'].tolist()\n\n    # Create a list of labels for the pie chart\n    labels = [\"Engineer\", \"Doctor\", \"Lawyer\"]\n\n    # Create a pie chart with the job distribution\n    plt.pie(job_list.count(\"Engineer\"), labels=labels, colors=[cmap(0.2), cmap(0.4), cmap(0.6)], startangle=90, shadow=True)\n\n    # Remove the borders\n    for p in ax.patches:\n        p.set_linewidth(0.0)\n        p.set_edgecolor('w')\n\n    plt.axis('equal')", "compilation_passed": true, "time": 0.013536930084228516, "tests_passed": false, "error": "TypeError"}
{"code": "plt.figure(figsize = (8, 6))\n    labels = data['Job'].value_counts().index\n    values = data['Job'].value_counts().values\n\n    plt.pie(values, labels=labels, autopct='%1.1f%%',\n            shadow=True, startangle=90, labeldistance=1.2,\n            pctdistance=0.55)\n    plt.show()\n    return plt.gcf()", "compilation_passed": true, "time": 0.04075479507446289, "tests_passed": true, "error": null}
{"code": "data[\"Date\"] = pd.to_datetime(data[\"Date\"])\n    # Convert the data to a list of lists\n    data_list = data.to_records(index=False)\n    job_list = [row.Job for row in data_list]\n\n    # Count the number of occurrences of each job\n    job_counts = {}\n    for job in job_list:\n        if job in job_counts:\n            job_counts[job] += 1\n        else:\n            job_counts[job] = 1\n\n    # Draw the pie chart and return the figure\n    plt.figure(figsize=(10, 10))\n    plt.pie(job_counts.values(), labels=job_counts.keys(), autopct='%1.1f%%')\n    plt.legend(job_counts.keys(), loc='lower right')\n    return plt.gcf()", "compilation_passed": true, "time": 0.06946396827697754, "tests_passed": true, "error": null}
{"code": "fig = plt.figure()\n    ax = fig.add_subplot(111)\n    ax.pie(\n        [\n            len(data[data['Job'] == job])\n            for job in [\"Engineer\", \"Doctor\", \"Lawyer\"]\n        ],\n        labels=[\"Engineer\", \"Doctor\", \"Lawyer\"]\n    )\n\n    ax.legend()\n\n    return fig", "compilation_passed": true, "time": 0.014794111251831055, "tests_passed": false, "error": "ValueError"}
{"code": "try:\n        fig = plt.figure(figsize=(7, 7))\n        ax = fig.add_subplot(111, projection='polar')\n        ax.pie(\n            [len(data[data['Job'] == value]) for value in set(data['Job'])],\n            labels=list(set(data['Job'])),\n            autopct='%1.1f%%',\n            colors=['r', 'g', 'b', 'y', 'c', 'm', 'violet', 'brown', 'grey'],\n            shadow=True,\n            wedgeprops={'edgecolor': 'k', 'linewidth': 2}\n        )\n        return fig\n    except:\n        raise ValueError(\"This is not valid data.\")", "compilation_passed": true, "time": 0.05205893516540527, "tests_passed": true, "error": null}
{"code": "return pd.plotting._draw_pie_chart(pd.plotting._split_categorical_colors(data, [data['Job']]), figsize=(5, 5))", "compilation_passed": true, "time": 0.0011730194091796875, "tests_passed": false, "error": "AttributeError"}
{"code": "# TODO: Complete the task function.\n    pass", "compilation_passed": true, "time": 0.0018198490142822266, "tests_passed": true, "error": null}
{"code": "if isinstance(data, pd.core.frame.DataFrame) == False:\n        raise ValueError\n    return data['Job'].value_counts().plot(kind='pie', figsize=(15, 10))", "compilation_passed": true, "time": 0.010518074035644531, "tests_passed": true, "error": null}
{"code": "# Write your code here", "compilation_passed": true, "time": 0.0013530254364013672, "tests_passed": true, "error": null}
{"code": "fig = plt.figure()\n    ax = fig.add_subplot(111)\n    data['Date'] = pd.to_datetime(data['Date'], format='%d/%m/%Y')\n    data['Month'] = pd.to_datetime(data['Date'], format='%Y-%m-%d').dt.month\n    data['Month_str'] = pd.Categorical(data['Month'], categories=[\n                                    \"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\",\n                                    \"November\", \"December\"])\n    p = ax.pie(data.groupby('Month_str')['Name'].count(),\n               labels=data['Month_str'].cat.categories,\n               wedgeprops={'alpha': .3}, autopct='%1.1f%%',\n               textprops={'color': 'white', 'size': 'small'})\n    ax.legend(p, data['Month_str'].cat.", "compilation_passed": false, "time": 0.00025391578674316406, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"Input data must be a pandas DataFrame\")\n\n    # calculate pie chart slices\n    slices = data['Job'].value_counts().tolist()\n\n    # create pie chart\n    fig = plt.figure()\n    ax = fig.add_axes([0, 0, 1, 1])\n    ax.pie(slices, labels=data['Job'].value_counts().index.tolist())\n    return fig", "compilation_passed": true, "time": 0.06908273696899414, "tests_passed": true, "error": null}
{"code": "# TODO: write code here\n    # raise NotImplementedError('Please implement your code here!')\n    if not isinstance(data, pd.core.frame.DataFrame):\n        raise ValueError('Input data should be a pandas DataFrame.')\n    pie_data = data.groupby('Job').size()\n    fig = plt.pie(pie_data.values,\n                  labels=pie_data.index,\n                  autopct='%.0f%%',\n                  )\n    return fig", "compilation_passed": true, "time": 0.0017120838165283203, "tests_passed": true, "error": null}
{"code": "try:\n        # your code here\n        return data.pivot_table(values='Job',\n                               columns='Date',\n                               aggfunc=lambda x: pd.Series(list(x.dropna().unique())).value_counts().plot.pie(\n                                   subplot=True,\n                                   autopct=lambda x: \"{:.2f}%\".format(\n                                       100 * x / len(x.dropna().unique())),\n                                   label='',\n                                   shadow=True,\n                                   legend=False,\n                                   frame=False,\n                                   fontsize=7\n                               ).figure\n                               )\n    except:\n        raise ValueError", "compilation_passed": true, "time": 0.0026378631591796875, "tests_passed": true, "error": null}
{"code": "if not isinstance(data, pd.DataFrame):\n        raise ValueError(\"The input data is not a DataFrame\")\n\n    # Create a DataFrame with job counts\n    job_counts = data.groupby(\"Job\").agg({\"Job\": \"count\"}).reset_index()\n    job_counts[\"Job\"] = job_counts[\"Job\"].astype(\"str\")\n\n    # Create the pie chart\n    fig = plt.figure(figsize=(6, 6))\n    ax = fig.add_subplot(111)\n    ax.pie(job_counts[\"Job\"], labels=job_counts[\"Job\"], autopct='%1.2f%%', shadow=True,\n           explode=[0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],\n           textprops={'fontsize': 10},\n           wedgeprops={'linewidth': 3, 'edgecolor': 'black'}\n", "compilation_passed": false, "time": 0.0002300739288330078, "tests_passed": false, "error": "SyntaxError"}
{"code": "fig, ax = plt.subplots(figsize=(8, 8), subplot_kw=dict(aspect=1.))\n    data = pd.read_csv(data)\n    data.dropna(inplace=True)\n    df = pd.DataFrame()\n    df['Name'] = data['Name']\n    df['Job'] = data['Job']\n    df['Date'] = pd.to_datetime(data['Date'], format='%d/%m/%Y', errors='ignore')\n    df.set_index('Name', inplace=True)\n    df.to_csv(df.index.name, sep=',', index=False, encoding='utf-8', mode='w')\n    df['Job'] = df['Job'].str.replace('-', '')\n    df['Job'] = df['Job'].str.replace(' ', '')\n    df.to_csv('Job_List', sep=',', index=False, encoding='utf-8', mode='w')\n    with open('Job_List', 'r') as file:\n", "compilation_passed": false, "time": 0.00024509429931640625, "tests_passed": false, "error": "IndentationError"}
{"code": "fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    ax.pie(data.groupby('Job').size().values, autopct='%1.1f%%', labels=data['Job'].unique())\n    return fig", "compilation_passed": true, "time": 0.06566691398620605, "tests_passed": true, "error": null}
{"code": "fig = plt.figure()\n    ax = fig.add_subplot(1,1,1)\n    ax.pie(data.groupby(\"Job\").size().values, labels=list(data.Job.unique()), autopct=lambda x: '%.1f%%' % round(x,2),\n            shadow=True, startangle=90, explode=[0.1,0.1,0.1], linewidth=2, counterclock=False,\n            wedgeprops={'edgecolor': 'black', 'linewidth':2, 'linestyle':'solid'}, autoremove=True, pctdistance=0.93)\n    return fig", "compilation_passed": true, "time": 0.014034032821655273, "tests_passed": false, "error": "TypeError"}
{"code": "return plt.pie(data['Job'].value_counts(), labels=data['Job'].value_counts().index)", "compilation_passed": true, "time": 0.0015590190887451172, "tests_passed": true, "error": null}
{"code": "fig, ax = plt.subplots(figsize=(15,15))\n    ax.pie(\n        [4,7,10],\n        labels=['Engineer','Doctor','Lawyer'],\n        autopct='%1.1f%%'\n    )\n    return fig", "compilation_passed": true, "time": 0.044450998306274414, "tests_passed": true, "error": null}
{"code": "fig = plt.figure(figsize=(6, 6))\n    fig.canvas.set_window_title(\"Pie chart\")\n    plt.pie(data['Job'].value_counts().values, labels=data['Job'].unique(),\n            autopct='%1.2f%%')\n    return fig", "compilation_passed": true, "time": 0.009054899215698242, "tests_passed": false, "error": "AttributeError"}
