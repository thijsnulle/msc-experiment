{"code": "# Convert dictionary df to DataFrame and filter 'Word' column values starting with the specified letter\n    df = pd.DataFrame(df)\n    df = df[df['Word'].str.startswith(letter)]\n\n    # Calculate basic statistics (mean, median, mode) of the 'length' column\n    lengths = df['Word'].str.len()\n    stats = lengths.describe()\n\n    return stats", "compilation_passed": true, "time": 0.0007810592651367188, "tests_passed": false, "error": "StopIteration"}
{"code": "words = df['Word']\n    word_len = pd.Series(map(len, words))\n    return {\n        'mean': np.mean(word_len),\n        'median': np.median(word_len),\n        'mode': np.mode(word_len),\n        'min': word_len.min(),\n        'max': word_len.max(),\n        'quantile': np.quantile(word_len, 0.5),\n        'count': len(words),\n    }", "compilation_passed": true, "time": 0.0008959770202636719, "tests_passed": false, "error": "StopIteration"}
{"code": "df_new = pd.DataFrame(df)\n    df_new[\"Word\"] = df_new[\"Word\"].str.lower()\n    df_new[\"Word\"] = df_new[\"Word\"].apply(lambda x: len(x))\n    df_new[\"Word\"] = df_new[\"Word\"].apply(lambda x: x)\n    df_new[\"Word\"] = df_new[\"Word\"].apply(lambda x: x)\n\n    # Apply the 'startswith' filter to the 'Word' column\n    filtered_df = df_new[df_new['Word'].str.startswith(letter)]\n\n    # Calculate the word lengths\n    filtered_df[\"Word\"] = filtered_df[\"Word\"].apply(lambda x: len(x))\n\n    # Calculate statistics\n    mean = filtered_df[\"Word\"].mean()\n    median = filtered_df[\"Word\"].median()\n    mode = filtered_df[\"Word\"].mode().values[0]\n", "compilation_passed": true, "time": 0.0009250640869140625, "tests_passed": false, "error": "StopIteration"}
{"code": "# convert input dictionary to DataFrame\n    df = pd.DataFrame.from_dict(df)\n    # filter rows where 'Word' column values start with the specified letter\n    df = df[df['Word'].str.startswith(letter)]\n    # calculate the lengths of the filtered words\n    word_lengths = df['Word'].apply(len)\n    # calculate basic statistics (mean, median, mode) of the word lengths\n    stats = {'mean': word_lengths.mean(),\n             'median': word_lengths.median(),\n             'mode': word_lengths.mode()}\n    return stats", "compilation_passed": true, "time": 0.0007350444793701172, "tests_passed": false, "error": "StopIteration"}
{"code": "df = pd.DataFrame(df)\n    word_list = [word for word in df['Word'] if word.startswith(letter)]\n    word_lengths = [len(word) for word in word_list]\n    mean = np.mean(word_lengths)\n    median = np.median(word_lengths)\n    mode = np.bincount(word_lengths).argmax()\n    stats = {'mean': mean, 'median': median, 'mode': mode}\n    return stats", "compilation_passed": true, "time": 0.0008401870727539062, "tests_passed": false, "error": "StopIteration"}
{"code": "df = pd.DataFrame.from_dict(df)\n    df.loc[df[\"Word\"].str.startswith(letter), \"Length\"] = \\\n        df[\"Word\"].apply(lambda x: len(x))\n    stats = df.groupby(\"Length\").mean().to_dict()\n    stats[\"median\"] = df.groupby(\"Length\").median()[\"Length\"].values\n    mode = stats[\"median\"].mode().values[0]\n    stats.update({'mode': mode})\n    return stats", "compilation_passed": true, "time": 0.0008308887481689453, "tests_passed": false, "error": "StopIteration"}
{"code": "stats = {'mean': 0, 'median': 0, 'mode': 0}\n    df = pd.DataFrame(df)\n    df.loc[df['Word'].str.startswith(letter), 'Word'] = df['Word'].str.replace(letter, '')\n    df['WordLength'] = df['Word'].apply(len)\n\n    # Find the mode\n    df['WordLength'] = df['WordLength'].astype(int)\n    mode_counts = df['WordLength'].value_counts()\n    mode = mode_counts.idxmax()\n    if mode == 1:\n        mode = 0\n    else:\n        mode = mode_counts[mode]\n\n    # Calculate statistics\n    stats['mean'] = df['WordLength'].mean()\n    stats['median'] = df['WordLength'].median()\n    stats['mode'] = mode\n\n    return stats", "compilation_passed": true, "time": 0.0008933544158935547, "tests_passed": false, "error": "StopIteration"}
{"code": "df = pd.DataFrame.from_dict(df, orient='index')\n    filtered = df[df['Word'].str.startswith(letter)]\n    lengths = [len(word) for word in filtered['Word']]\n    result = {}\n    result['mean'] = np.mean(lengths)\n    result['median'] = np.median(lengths)\n    result['mode'] = np.bincount(lengths).argmax()\n    return result", "compilation_passed": true, "time": 0.0008168220520019531, "tests_passed": false, "error": "StopIteration"}
{"code": "stats = {}\n    df['Word'] = np.array(df['Word'])\n    filtered = df['Word'][df['Word'].str[0] == letter]\n    stats['lengths'] = filtered.str.len()\n    stats['mean'] = stats['lengths'].mean()\n    stats['median'] = stats['lengths'].median()\n    stats['mode'] = stats['lengths'].mode()\n    return stats", "compilation_passed": true, "time": 0.0008039474487304688, "tests_passed": false, "error": "StopIteration"}
{"code": "df = pd.DataFrame(df)\n    df['Word'] = df['Word'].apply(lambda x: x.lower())\n    df = df[df['Word'].str.startswith(letter)]\n    df['WordLength'] = df['Word'].apply(len)\n    return df.groupby('Word').agg({'WordLength': ['mean', 'median', 'mode']}).to_dict(orient='list')[letter]", "compilation_passed": true, "time": 0.0008172988891601562, "tests_passed": false, "error": "StopIteration"}
{"code": "words = [word for word in df['Word'] if word.startswith(letter)]\n    word_lengths = [len(word) for word in words]\n    return {'mean': np.mean(word_lengths),\n            'median': np.median(word_lengths),\n            'mode': np.bincount(word_lengths).argmax()}", "compilation_passed": true, "time": 0.0007450580596923828, "tests_passed": false, "error": "StopIteration"}
{"code": "if not isinstance(df, dict):\n        return False\n\n    if 'Word' not in df.keys():\n        return False\n\n    df['Length'] = pd.Series([len(x) for x in df['Word']])\n\n    stats = {\n        'mean': np.mean(df['Length']),\n        'median': np.median(df['Length']),\n        'mode': stats_mode(df['Length'])\n    }\n\n    return stats", "compilation_passed": true, "time": 0.0008211135864257812, "tests_passed": false, "error": "StopIteration"}
{"code": "stats = {'mean': 0, 'median': 0, 'mode': 0, 'stddev': 0}\n\n    # Convert dict to DataFrame\n    df = pd.DataFrame(df)\n\n    # Filter rows where 'Word' starts with specified letter\n    df = df[df['Word'].str.startswith(letter)]\n\n    # Calculate mean, median, mode\n    stats['mean'] = df['Word'].str.len().mean()\n    stats['median'] = df['Word'].str.len().median()\n    stats['mode'] = df['Word'].str.len().mode()\n    stats['stddev'] = df['Word'].apply(lambda x: len(x)).std()\n\n    return stats", "compilation_passed": true, "time": 0.0008521080017089844, "tests_passed": false, "error": "StopIteration"}
{"code": "df = pd.DataFrame(df)\n    df_filtered = df.loc[df['Word'].str.startswith(letter)]\n    word_lengths = df_filtered['Word'].str.len()\n    return dict(mean=np.mean(word_lengths), median=np.median(word_lengths), mode=np.bincount(word_lengths).argmax())", "compilation_passed": true, "time": 0.0007376670837402344, "tests_passed": false, "error": "StopIteration"}
{"code": "word_list = df['Word']\n\n    # Convert the dictionary to a DataFrame\n    df = pd.DataFrame({'Word': word_list})\n\n    # Filter out words that don't start with the specified letter\n    df = df[df['Word'].str.startswith(letter)]\n\n    # Calculate the length of each word in the filtered DataFrame\n    lengths = df['Word'].map(lambda w: len(w))\n\n    # Calculate statistics on the word lengths\n    stats = {}\n    stats['mean'] = lengths.mean()\n    stats['median'] = lengths.median()\n    stats['mode'] = lengths.mode()[0]\n\n    return stats", "compilation_passed": true, "time": 0.0008246898651123047, "tests_passed": false, "error": "StopIteration"}
{"code": "stats = {}\n    filtered_df = df.loc[df['Word'].str.lower().str.startswith(letter)]\n\n    word_lengths = np.array(filtered_df['Word'].str.len())\n    stats['mean'] = np.mean(word_lengths)\n    stats['median'] = np.median(word_lengths)\n    stats['mode'] = stats['median'] = max(stats['median'])\n    stats['std'] = np.std(word_lengths)\n    stats['min'] = np.min(word_lengths)\n    stats['max'] = np.max(word_lengths)\n\n    return stats", "compilation_passed": true, "time": 0.0008361339569091797, "tests_passed": false, "error": "StopIteration"}
{"code": "df_ = pd.DataFrame(df)\n    df_['Word'] = df['Word'].str.lower()\n    df_ = df_[df_['Word'].str.startswith(letter)]\n    return {'mean': np.mean(df_['Word'].map(len)),\n            'median': np.median(df_['Word'].map(len)),\n            'mode': np.bincount(df_['Word'].map(len)).argmax()}", "compilation_passed": true, "time": 0.0009107589721679688, "tests_passed": false, "error": "StopIteration"}
{"code": "df = pd.DataFrame(df, index=[0])\n    df['Word'] = df['Word'].str.lower()\n    df = df[df['Word'].str.startswith(letter)]\n    df['Word'] = df['Word'].str.len()\n    stats = df.describe()\n    stats.pop('count')\n    stats.pop('index')\n    return {key: val for key, val in stats.to_dict().items() if val > 0}", "compilation_passed": true, "time": 0.0008389949798583984, "tests_passed": false, "error": "StopIteration"}
{"code": "df = pd.DataFrame(df)\n    df = df[df.Word.str.startswith(letter)]\n    word_lengths = df.Word.apply(len)\n    stats = dict(mean=np.mean(word_lengths),\n                 median=np.median(word_lengths),\n                 mode=np.mode(word_lengths))\n    return stats", "compilation_passed": true, "time": 0.0007350444793701172, "tests_passed": false, "error": "StopIteration"}
{"code": "# Convert the input dictionary df to a Pandas DataFrame and filter rows where the 'Word' column starts with letter\n    df = pd.DataFrame(df)\n    df_letter = df[df['Word'].str.startswith(letter)]\n\n    # Calculate the word length statistics for each row\n    word_lengths = []\n    for word in df_letter['Word']:\n        word_len = len(word)\n        word_lengths.append(word_len)\n\n    # Calculate mean, median, and mode of word lengths\n    mean_len = np.mean(word_lengths)\n    median_len = np.median(word_lengths)\n    mode_len = np.bincount(word_lengths).argmax()\n\n    return {\n        'mean': mean_len,\n        'median': median_len,\n        'mode': mode_len,\n    }", "compilation_passed": true, "time": 0.0008342266082763672, "tests_passed": false, "error": "StopIteration"}
{"code": "df = pd.DataFrame(df)\n    filtered = df[df[\"Word\"].str.startswith(letter)]\n    word_lengths = filtered[\"Word\"].apply(len)\n    mean, median, mode = np.mean(word_lengths), np.median(word_lengths), np.bincount(word_lengths).max()\n    return {\"mean\": mean, \"median\": median, \"mode\": mode}", "compilation_passed": true, "time": 0.000797271728515625, "tests_passed": false, "error": "StopIteration"}
{"code": "# Convert input dictionary into a DataFrame\n    df = pd.DataFrame(df, index=None)\n\n    # Filter rows where 'Word' column values start with a specified letter\n    df['Word'] = df['Word'].apply(lambda x: x.startswith(letter))\n\n    # Calculate the lengths of filtered words and calculate basic statistics (mean, median, mode)\n    word_lengths = df[df['Word']].Word.str.len()\n    stats = {\n        'mean': word_lengths.mean(),\n        'median': word_lengths.median(),\n        'mode': word_lengths.mode()[0]\n    }\n\n    # Return the basic statistics\n    return stats", "compilation_passed": true, "time": 0.0008251667022705078, "tests_passed": false, "error": "StopIteration"}
{"code": "df = pd.DataFrame.from_dict(df, orient=\"index\")\n    df.columns = [\"Word\"]\n    df = df[df[\"Word\"].str.startswith(letter)]\n    df[\"Length\"] = df[\"Word\"].str.len()\n    stats = df[\"Length\"].describe()\n    return stats.to_dict()", "compilation_passed": true, "time": 0.0007538795471191406, "tests_passed": false, "error": "StopIteration"}
{"code": "# Convert the dictionary to a DataFrame\n    df = pd.DataFrame.from_dict(df)\n    # Filter for rows where 'Word' starts with the specified letter\n    df = df[df['Word'].str.startswith(letter)]\n    # Calculate word lengths\n    df['Length'] = df['Word'].apply(len)\n    # Calculate basic statistics\n    mean = df['Length'].mean()\n    median = df['Length'].median()\n    mode = df['Length'].mode()[0]\n    return {'mean': mean, 'median': median, 'mode': mode}", "compilation_passed": true, "time": 0.0008029937744140625, "tests_passed": false, "error": "StopIteration"}
{"code": "if not isinstance(df, dict):\n        raise TypeError(\"'df' must be a dict.\")\n    if letter not in [chr(i) for i in range(97, 123)]:\n        raise ValueError(\"'letter' must be a letter from the alphabet.\")\n    df_ = pd.DataFrame.from_dict(df, orient='index')\n    df_['Length'] = df_.apply(lambda row: len(row['Word']), axis=1)\n    df_filtered = df_.query('Word.str.startswith(@letter)')\n    stats = df_filtered.groupby('Length').agg({'Length': ['mean', 'median', 'mode']})\n    return dict(stats)", "compilation_passed": true, "time": 0.0008509159088134766, "tests_passed": false, "error": "StopIteration"}
{"code": "# Convert the input dictionary into a Pandas DataFrame\n    df = pd.DataFrame(df)\n\n    # Filter out words that do not start with the letter\n    df = df[df['Word'].str.startswith(letter)]\n\n    # Calculate the lengths of the filtered words\n    word_lengths = df['Word'].str.len()\n\n    # Compute basic statistics of word lengths\n    stats = {'mean': word_lengths.mean(),\n             'median': word_lengths.median(),\n             'mode': word_lengths.mode()[0]}\n\n    return stats", "compilation_passed": true, "time": 0.0007388591766357422, "tests_passed": false, "error": "StopIteration"}
{"code": "words = df['Word']\n    word_len = [len(word) for word in words]\n    word_stats = {'mean': np.mean(word_len),\n                  'median': np.median(word_len),\n                  'mode': stats.mode(word_len)}\n    return word_stats", "compilation_passed": true, "time": 0.0007741451263427734, "tests_passed": false, "error": "StopIteration"}
{"code": "df_dict = pd.DataFrame.from_dict(df)\n    filtered_df = df_dict[df_dict['Word'].str.lower().str.startswith(letter)]\n    word_lengths = filtered_df['Word'].str.len().values\n\n    return {\n        'mean': np.mean(word_lengths),\n        'median': np.median(word_lengths),\n        'mode': np.bincount(word_lengths).argmax()\n    }", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": false, "error": "StopIteration"}
{"code": "df = pd.DataFrame.from_dict(df)\n    df = df[df['Word'].str.startswith(letter)]\n    df['Length'] = df['Word'].str.len()\n    stats = df.groupby('Length').agg({'Word': ['mean', 'median', 'mode']})\n    return stats[\"Word\"].agg(\"nunique\").to_dict(\"dict\")", "compilation_passed": true, "time": 0.0007910728454589844, "tests_passed": false, "error": "StopIteration"}
{"code": "return pd.Series(\n        [mean, median, mode],\n        index=['mean', 'median', 'mode'],\n    ).astype('float')", "compilation_passed": true, "time": 0.0006971359252929688, "tests_passed": false, "error": "StopIteration"}
