{"code": "try:\n        data = json.loads(json_string)\n        text = data.get(\"text\", None)\n        if text is None:\n            return {}\n        text = text.lower()\n        for p in string.punctuation:\n            text = text.replace(p, \"\")\n        text = re.sub(r\"[^a-z ]+\", \"\", text)\n        words = text.split()\n        return defaultdict(int, [(w, words.count(w)) for w in set(words)])\n    except json.JSONDecodeError as err:\n        return {}", "compilation_passed": true, "time": 0.0009388923645019531, "tests_passed": true, "error": null}
{"code": "try:\n        data = json.loads(json_string)\n    except json.JSONDecodeError:\n        return {}\n\n    text = data.get(\"text\", None)\n    if text is None:\n        return {}\n\n    text = text.lower().translate(str.maketrans(\"\", \"\", string.punctuation)).strip()\n    word_counts = defaultdict(int)\n\n    for word in text.split():\n        word = re.sub(r\"\\W+\", \"\", word)\n        word_counts[word] += 1\n\n    return word_counts", "compilation_passed": true, "time": 0.0011668205261230469, "tests_passed": true, "error": null}
{"code": "try:\n        json_dict = json.loads(json_string)\n        text = json_dict[\"text\"].lower()\n    except (json.decoder.JSONDecodeError, KeyError):\n        return {}\n\n    text = \"\".join(c for c in text if c.isalnum() or c.isspace())\n    text = text.strip(string.punctuation)\n\n    word_counts = defaultdict(int)\n    for word in text.split():\n        word_counts[word] += 1\n\n    return dict(word_counts)", "compilation_passed": true, "time": 0.00096893310546875, "tests_passed": true, "error": null}
{"code": "# remove all punctuation and non-alphanumeric characters\n    text = json.loads(json_string).get('text', None)\n    if text:\n        text = text.lower()\n        words = text.translate(str.maketrans(string.punctuation, ' ' * len(string.punctuation)))\n        words = re.findall(r'\\b[\\w\\']+\\b', words)\n        counts = defaultdict(int)\n        for word in words:\n            counts[word] += 1\n        return dict(counts)\n    else:\n        return dict()", "compilation_passed": true, "time": 0.0009899139404296875, "tests_passed": false, "error": "json.decoder.JSONDecodeError"}
{"code": "# Convert the JSON string to a dictionary\n    data = json.loads(json_string)\n\n    # Check if the JSON contains a \"text\" field\n    if \"text\" not in data:\n        return {}\n\n    # Get the text from the dictionary\n    text = data[\"text\"]\n\n    # Convert all text to lowercase\n    text = text.lower()\n\n    # Remove punctuation and non-alphanumeric characters\n    text = \" \".join(re.findall(r'\\w+', text))\n\n    # Remove all whitespaces and join the words\n    text = text.replace(\" \", \"\")\n\n    # Create a dictionary with words as keys and counts as values\n    word_counts = defaultdict(int)\n\n    # Count the occurrences of each word\n    for word in text.split():\n        word_counts[word] += 1\n\n    return dict(word_counts)", "compilation_passed": true, "time": 0.0009281635284423828, "tests_passed": true, "error": null}
{"code": "result = defaultdict(int)\n\n    try:\n        json_obj = json.loads(json_string)\n        text = json_obj['text'].lower()\n        text = re.sub(r'[^\\w\\s]', '', text).split()\n        for word in text:\n            result[word] += 1\n    except (KeyError, json.JSONDecodeError):\n        return result\n\n    return result", "compilation_passed": true, "time": 0.0007898807525634766, "tests_passed": true, "error": null}
{"code": "# Check if JSON is valid\n    try:\n        json_obj = json.loads(json_string)\n    except json.JSONDecodeError:\n        return {}\n\n    # Check if \"text\" field exists\n    if \"text\" not in json_obj:\n        return {}\n\n    # Convert JSON string to text\n    text = json_obj[\"text\"]\n\n    # Remove punctuation and non-alphanumeric characters\n    text = \" \".join([word.lower() for word in re.findall(r'\\w+', text)])\n\n    # Count word frequency\n    words = defaultdict(int)\n    for word in text.split():\n        words[word] += 1\n\n    return dict(words)", "compilation_passed": true, "time": 0.0008959770202636719, "tests_passed": true, "error": null}
{"code": "try:\n        data = json.loads(json_string)\n    except json.JSONDecodeError:\n        return {}\n\n    if not data or 'text' not in data:\n        return {}\n\n    text = data['text']\n\n    # Process the text string\n    text = re.sub(r'[^\\w\\s]+', '', text)\n    text = text.lower()\n\n    # Count word frequency\n    word_counts = defaultdict(int)\n    for word in text.split():\n        word_counts[word] += 1\n\n    return word_counts", "compilation_passed": true, "time": 0.0009000301361083984, "tests_passed": true, "error": null}
{"code": "data = json.loads(json_string)\n    try:\n        text = data[\"text\"]\n    except KeyError:\n        return {}\n    words = re.findall(r'\\w+', text.lower())\n    count = defaultdict(int)\n    for word in words:\n        count[word] += 1\n    return count", "compilation_passed": true, "time": 0.0008730888366699219, "tests_passed": false, "error": "json.decoder.JSONDecodeError"}
{"code": "result_dict = defaultdict(int)\n\n    try:\n        json_data = json.loads(json_string)\n        text = json_data[\"text\"]\n        for word in text.split():\n            word_clean = word.lower().strip(string.punctuation)\n            result_dict[word_clean] += 1\n    except (KeyError, TypeError, json.JSONDecodeError):\n        return {}\n\n    return result_dict", "compilation_passed": true, "time": 0.000743865966796875, "tests_passed": true, "error": null}
{"code": "# Extract the text field from the JSON string\n    try:\n        data = json.loads(json_string)\n        text = data.get(\"text\", \"\")\n    except (ValueError, json.JSONDecodeError) as e:\n        return {}\n\n    # Convert the text to lowercase\n    text = text.lower()\n\n    # Remove punctuation\n    for char in string.punctuation:\n        text = text.replace(char, \" \")\n\n    # Remove all non-alphanumeric characters except spaces\n    text = re.sub(r\"[^\\w\\s]+\", \" \", text)\n\n    # Split the text into a list of words\n    words = text.split()\n\n    # Count the frequency of each word and return as a dictionary\n    word_freq = defaultdict(int)\n    for word in words:\n        word_freq[word] += 1\n\n    return word_freq", "compilation_passed": true, "time": 0.0008797645568847656, "tests_passed": true, "error": null}
{"code": "try:\n        input_data = json.loads(json_string)\n        if \"text\" not in input_data:\n            return {}\n        text = input_data[\"text\"]\n        cleaned_text = ''.join(char.lower() if char.isalnum() or char.isspace() else ' ' for char in text if char.isalnum() or char.isspace())\n        word_counts = defaultdict(int)\n        for word in cleaned_text.split():\n            word = ''.join(char for char in word if char.isalnum() or char.isspace())\n            if word:\n                word_counts[word] += 1\n        return word_counts\n    except json.JSONDecodeError:\n        return {}", "compilation_passed": true, "time": 0.0015060901641845703, "tests_passed": true, "error": null}
{"code": "try:\n        text_dict = json.loads(json_string)\n\n        if \"text\" not in text_dict:\n            return {}\n\n        text = text_dict[\"text\"]\n\n        if not isinstance(text, str):\n            raise TypeError(\"The 'text' field should be a string.\")\n\n        # convert to lowercase, remove punctuation, and count word frequency\n        text = text.lower()\n        for punct in string.punctuation:\n            text = text.replace(punct, \" \")\n\n        word_counts = defaultdict(int)\n        for word in re.split(r'\\s+', text):\n            word_counts[word] += 1\n\n        return word_counts\n    except json.JSONDecodeError as e:\n        raise TypeError(f\"JSON string is malformed or text field is missing: {e}\")\n    except TypeError as e:\n        raise TypeError(f\"The 'text' field should be a string: {e}\")", "compilation_passed": true, "time": 0.0010781288146972656, "tests_passed": false, "error": "TypeError"}
{"code": "try:\n        data = json.loads(json_string)\n        text = data['text']\n        lower_text = text.lower()\n        punctuation = re.sub(r'[^\\w\\s]', '', lower_text)\n        words = punctuation.split()\n        word_counts = defaultdict(int)\n        for word in words:\n            word_counts[word] += 1\n        return word_counts\n\n    except json.JSONDecodeError:\n        return {}\n\n    except KeyError:\n        return {}", "compilation_passed": true, "time": 0.0007851123809814453, "tests_passed": true, "error": null}
{"code": "# TODO\n    result = defaultdict(int)\n    try:\n        json_data = json.loads(json_string)\n        text = json_data['text'].lower().translate(str.maketrans('', '', string.punctuation))\n        words = text.split()\n        for word in words:\n            result[word] += 1\n\n    except:\n        return {}\n    return result", "compilation_passed": true, "time": 0.0007121562957763672, "tests_passed": true, "error": null}
{"code": "try:\n        text = json.loads(json_string)[\"text\"]\n        if not isinstance(text, str):\n            raise TypeError\n        cleaned_text = \" \".join([word for word in re.sub(r\"\\W+\", \" \", text.lower()).split()])\n        word_counts = defaultdict(int)\n        for word in cleaned_text.split():\n            word_counts[word] += 1\n    except (KeyError, TypeError, json.JSONDecodeError):\n        return {}\n    else:\n        return dict(word_counts)", "compilation_passed": true, "time": 0.0009891986846923828, "tests_passed": true, "error": null}
{"code": "try:\n        input_data = json.loads(json_string)\n    except json.JSONDecodeError:\n        return {}\n    text = input_data['text'] if 'text' in input_data else ''\n    text = text.lower()\n    for c in string.punctuation:\n        text = text.replace(c, \" \")\n    for c in string.ascii_lowercase:\n        text = text.replace(c + c, \" \")\n        text = text.replace(c + c.upper(), \" \")\n        text = text.replace(c.upper() + c, \" \")\n    text = text.split()\n    return defaultdict(int, [ (word, text.count(word)) for word in text ])", "compilation_passed": true, "time": 0.009196043014526367, "tests_passed": true, "error": null}
{"code": "if not json_string:\n        return {}\n    try:\n        json_object = json.loads(json_string)\n        text = json_object['text']\n        text = text.lower()\n        text = re.sub(r\"[^\\w\\s]+\", \" \", text)\n        text = text.split()\n        word_counts = defaultdict(int)\n        for word in text:\n            word_counts[word] += 1\n    except json.JSONDecodeError as e:\n        print(f\"Error decoding JSON: {e}\")\n        return {}\n    return word_counts", "compilation_passed": true, "time": 0.0008552074432373047, "tests_passed": false, "error": "KeyError"}
{"code": "# Ensure valid input\n    try:\n        data = json.loads(json_string)\n        text = data[\"text\"]\n        if not text:\n            return {}\n    except (json.decoder.JSONDecodeError, KeyError, TypeError):\n        return {}\n\n    # Convert the text to lowercase and remove punctuation and non-alphanumeric characters\n    text_lower = text.lower()\n    for punctuation in string.punctuation:\n        text_lower = text_lower.replace(punctuation, \" \")\n    for char in string.whitespace:\n        text_lower = text_lower.replace(char, \" \")\n    words = text_lower.split()\n\n    # Count the frequency of each word\n    word_count = defaultdict(int)\n    for word in words:\n        word_count[word] += 1\n\n    return word_count", "compilation_passed": true, "time": 0.0007579326629638672, "tests_passed": true, "error": null}
{"code": "try:\n        json_data = json.loads(json_string)\n    except json.JSONDecodeError:\n        return {}\n\n    text = json_data.get(\"text\")\n    if not text:\n        return {}\n\n    text = text.lower()\n    words = text.replace(\"'\", \" \").replace(\",\", \" \").replace(\"\\n\", \" \").split(\" \")\n\n    word_counts = defaultdict(int)\n    for word in words:\n        word = ''.join([letter for letter in word if letter in string.ascii_letters + \" \"])\n        word_counts[word] += 1\n\n    return dict(word_counts)", "compilation_passed": true, "time": 0.0014500617980957031, "tests_passed": true, "error": null}
{"code": "try:\n        data = json.loads(json_string)\n        if 'text' in data:\n            text = data['text']\n        else:\n            return {}\n        # remove punctuation and convert to lowercase\n        text = re.sub(r\"[^\\w\\s]+\", \"\", text.lower())\n        # count frequency of each word\n        freq = defaultdict(int)\n        for word in text.split():\n            freq[word] += 1\n        return dict(freq)\n    except json.JSONDecodeError:\n        return {}", "compilation_passed": true, "time": 0.0008089542388916016, "tests_passed": true, "error": null}
{"code": "# Convert the JSON string to a Python object.\n    try:\n        python_object = json.loads(json_string)\n    except json.JSONDecodeError:\n        return {}\n\n    # Get the \"text\" field from the Python object.\n    text = python_object.get('text')\n    if text is None:\n        return {}\n\n    # Convert the text to lowercase.\n    text = text.lower()\n\n    # Remove all punctuation and non-alphanumeric characters except for spaces.\n    text = re.sub(r\"[^\\w\\s]+\", '', text)\n\n    # Split the text into words and count their frequency.\n    words = text.split()\n    word_count = defaultdict(int)\n    for word in words:\n        word_count[word] += 1\n\n    # Return the word count as a dictionary.\n    return word_count", "compilation_passed": true, "time": 0.0008070468902587891, "tests_passed": true, "error": null}
{"code": "# Convert JSON string to a Python object\n    json_data = json.loads(json_string)\n\n    # Get the text field from the JSON object\n    text = json_data['text']\n\n    # Convert text to lowercase, remove punctuation, and count word frequencies\n    text = text.lower()\n    text = re.sub('[' + re.escape(string.punctuation) + ']', ' ', text)\n    text = text.strip()\n    text = text.split()\n    word_freq = defaultdict(int)\n    for word in text:\n        word_freq[word] += 1\n\n    # Return word frequencies as a dictionary\n    return word_freq", "compilation_passed": true, "time": 0.0009050369262695312, "tests_passed": false, "error": "json.decoder.JSONDecodeError"}
{"code": "data = json.loads(json_string)\n    text = data.get('text')\n    if not text:\n        return {}\n\n    # Convert to lowercase\n    text = text.lower()\n\n    # Remove punctuation and non-alphanumeric characters except spaces\n    words = re.findall(r'\\w+', text)\n    text_no_punct = ''.join(c for c in text if c.isalnum() or c.isspace())\n\n    # Count frequency of each word\n    word_counts = defaultdict(int)\n    for word in words:\n        word_counts[word] += 1\n    word_counts['text_no_punct'] = text_no_punct\n\n    return dict(word_counts)", "compilation_passed": true, "time": 0.001561880111694336, "tests_passed": true, "error": null}
{"code": "# Parse the JSON string\n    try:\n        data = json.loads(json_string)\n    except json.JSONDecodeError:\n        return {}\n\n    # Check if the JSON contains a \"text\" field\n    if not data.get(\"text\"):\n        return {}\n\n    # Process the text\n    text = data[\"text\"]\n\n    # Convert to lowercase and remove punctuation and non-alphanumeric characters\n    text = re.sub('[^a-z0-9 \\-]+', '', text.lower())\n\n    # Split the text into words and count the frequency\n    word_counts = defaultdict(int)\n    for word in text.split():\n        word_counts[word] += 1\n\n    return word_counts", "compilation_passed": true, "time": 0.0008411407470703125, "tests_passed": true, "error": null}
{"code": "try:\n        json_data = json.loads(json_string)\n    except json.JSONDecodeError:\n        return {}\n\n    text = json_data.get(\"text\")\n    if not text:\n        return {}\n\n    text = text.lower()\n    text = re.sub(r'[^a-z\\s]+', \"\", text)\n    text = \" \".join(text.split())\n\n    word_counts = defaultdict(int)\n    for word in text.split():\n        word_counts[word] += 1\n\n    return dict(word_counts)", "compilation_passed": true, "time": 0.0010280609130859375, "tests_passed": true, "error": null}
{"code": "json_obj = json.loads(json_string)\n    if 'text' in json_obj:\n        text = json_obj['text']\n        lower_text = text.lower()\n        remove_punct_text = re.sub(r'[^\\w\\s]', '', lower_text)\n        word_freq = defaultdict(int)\n        for word in remove_punct_text.split():\n            word_freq[word] += 1\n        return dict(word_freq)\n    else:\n        return {}", "compilation_passed": true, "time": 0.0008480548858642578, "tests_passed": false, "error": "json.decoder.JSONDecodeError"}
{"code": "try:\n        data = json.loads(json_string)\n        if 'text' not in data:\n            return {}\n        text = data['text'].lower()\n        word_counts = defaultdict(int)\n        for word in re.findall(r'\\w+', text):\n            word_counts[word] += 1\n        return dict(word_counts)\n    except json.JSONDecodeError as e:\n        print(f\"Error parsing JSON: {e}\")\n        return {}", "compilation_passed": true, "time": 0.0008211135864257812, "tests_passed": true, "error": null}
{"code": "try:\n        json_data = json.loads(json_string)\n        text = json_data.get('text', \"\").lower()\n        clean_text = \" \".join(\n            [s for s in re.findall(r'\\w+', text) if s not in string.punctuation + string.whitespace]\n        )\n        words = clean_text.split()\n        counts = defaultdict(int)\n        for word in words:\n            counts[word] += 1\n        return dict(counts)\n    except Exception as e:\n        return {}", "compilation_passed": true, "time": 0.0009829998016357422, "tests_passed": true, "error": null}
{"code": "# Read the JSON string\n    try:\n        data = json.loads(json_string)\n    except json.JSONDecodeError:\n        return {}\n\n    # Extract the text field\n    if \"text\" not in data:\n        return {}\n\n    text = data[\"text\"]\n\n    # Process the text\n    words = text.lower()\n    words = re.sub(r'[^\\w\\s]', '', words)  # remove punctuation\n    words = re.sub(r'\\s+', ' ', words)  # replace multiple spaces with a single space\n    words = words.split()\n\n    # Count the frequency of each word\n    word_freqs = defaultdict(int)\n    for word in words:\n        word_freqs[word] += 1\n\n    return word_freqs", "compilation_passed": true, "time": 0.0009179115295410156, "tests_passed": true, "error": null}
