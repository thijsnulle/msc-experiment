{"code": "try:\n        if not os.path.isdir(directory):\n            raise FileNotFoundError(directory)\n    except FileNotFoundError as e:\n        print('Error: ', str(e))\n        return 'No logs found to backup'\n\n    backup_file = os.path.join(backup_dir, 'logs_backup.tar.gz')\n\n    # glob() to match all '.log' files in the directory\n    files = glob.glob(os.path.join(directory, '*.log'))\n\n    # Check if files are found in the directory\n    if files:\n        # Create backup using the 'tar' command with gzip compression\n        cmd = f'tar czf {backup_file} {\" \".join(files)}'\n        subprocess.check_output(cmd, shell=True, stderr=subprocess.STDOUT)\n        # Delete the original files\n        for file in files:\n            os.remove(file)\n        print(f'Backup file created: {backup_file}')\n    else:\n        print('No logs found to backup')\n\n    return", "compilation_passed": true, "time": 0.0312960147857666, "tests_passed": false, "error": "TypeError"}
{"code": "log_files = glob.glob(os.path.join(directory, '*.log'))\n\n    if not log_files:\n        return 'No logs found to backup'\n\n    tar_file = os.path.join(backup_dir, 'logs_backup.tar.gz')\n    with tarfile.open(tar_file, 'w:gz') as tar:\n        for log_file in log_files:\n            tar.add(log_file)\n\n    for log_file in log_files:\n        os.remove(log_file)\n\n    return tar_file", "compilation_passed": true, "time": 0.002866029739379883, "tests_passed": false, "error": "NameError"}
{"code": "try:\n        # Get all log files in the specified directory\n        log_files = glob.glob(os.path.join(directory, '*.log'))\n\n        if not log_files:\n            raise FileNotFoundError('No logs found to backup')\n\n        # Create the backup file\n        backup_file = os.path.join(backup_dir, 'logs_backup.tar.gz')\n        subprocess.check_call(['tar', 'czf', backup_file, *log_files])\n\n        # Delete original files\n        for file_path in log_files:\n            os.remove(file_path)\n\n    except FileNotFoundError as e:\n        print(f\"Error: {e}\")", "compilation_passed": true, "time": 0.025701045989990234, "tests_passed": false, "error": "TypeError"}
{"code": "if not os.path.isdir(directory):\n        raise FileNotFoundError(\"The specified directory does not exist.\")\n\n    logs_list = glob.glob(os.path.join(directory, '*.log'))\n    if not logs_list:\n        return 'No logs found to backup.'\n\n    backup_path = os.path.join(backup_dir, 'logs_backup.tar.gz')\n    subprocess.run(['tar', '-czf', backup_path, *logs_list], check=True)\n\n    for log_file in logs_list:\n        os.remove(log_file)\n\n    return backup_path", "compilation_passed": true, "time": 0.029841184616088867, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n\n    backup_file = os.path.join(backup_dir, 'logs_backup.tar.gz')\n    files = glob.glob(directory + '/*.log')\n\n    if not files:\n        return \"No logs found to backup.\"\n\n    tar_args = [\"tar\", \"czf\", backup_file] + files\n    try:\n        subprocess.run(tar_args, check=True)\n    except subprocess.CalledProcessError as e:\n        return f\"tar process returned {e.returncode} with output: {e.output}\"\n\n    os.remove(files)\n    return backup_file", "compilation_passed": true, "time": 0.025968074798583984, "tests_passed": false, "error": "TypeError"}
{"code": "backup_file = 'logs_backup.tar.gz'\n\n    try:\n        backup_dir = os.path.abspath(backup_dir)\n        os.makedirs(backup_dir, exist_ok=True)\n\n        # Find all .log files in the specified directory\n        files = glob.glob(os.path.join(directory, '*.log'))\n\n        # Check if any .log files are found\n        if files:\n            # Create a tar archive of the .log files in the directory\n            with tarfile.open(os.path.join(backup_dir, backup_file), 'w') as tar:\n                for file in files:\n                    tar.add(file)\n\n                os.remove(files)\n\n        else:\n            raise FileNotFoundError('No logs found to backup.')\n\n    except FileNotFoundError as e:\n        print(\"Error:\", e)\n        return 'No logs found to backup.'\n    except Exception as e:\n        print(\"Error:\", e)\n        return 'No logs found to backup.'\n", "compilation_passed": true, "time": 0.0030357837677001953, "tests_passed": true, "error": null}
{"code": "logs = glob.glob(directory + '/*.log')\n    if logs:\n        subprocess.run(['tar', 'czf', backup_dir + '/logs_backup.tar.gz', '-C', directory, '--', '*.log'],\n                       shell=True)\n        os.remove(logs)\n        return backup_dir + '/logs_backup.tar.gz'\n    else:\n        raise FileNotFoundError('No logs found to backup')", "compilation_passed": true, "time": 0.027951955795288086, "tests_passed": false, "error": "TypeError"}
{"code": "# Check if directory exists\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n\n    # Get all '.log' files in the directory\n    log_files = glob.glob(os.path.join(directory, '*.log'))\n\n    # Check if any '.log' files are found\n    if not log_files:\n        return \"No logs found to backup\"\n\n    # Create a tarball of all log files and name it 'logs_backup.tar.gz'\n    command = f'tar -czvf {os.path.join(backup_dir, \"logs_backup.tar.gz\")} {\" \".join(log_files)}'\n    process = subprocess.Popen(command.split(), stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n\n    # Wait for the command to complete\n    stdout, stderr = process.communicate()\n\n    # Check if there was any error while creating the tarball\n    if stderr.strip():\n        return f\"", "compilation_passed": false, "time": 0.0001690387725830078, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not os.path.exists(directory):\n        raise FileNotFoundError(f'Error: No logs found to backup, path: {directory}')\n\n    files = glob.glob(f'{directory}/*.log')\n    if not files:\n        print(f'Error: No logs found to backup, path: {directory}')\n\n    with tarfile.open(os.path.join(backup_dir, 'logs_backup.tar.gz'), 'w') as tar:\n        for file in files:\n            tar.add(file)\n\n    for file in files:\n        os.remove(file)", "compilation_passed": true, "time": 0.0028638839721679688, "tests_passed": false, "error": "NameError"}
{"code": "if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory {} does not exist.\".format(directory))\n\n    log_files = glob.glob(os.path.join(directory, '*.log'))\n    if log_files:\n        backup_file = os.path.join(backup_dir, 'logs_backup.tar.gz')\n        subprocess.check_call(['tar', '-czf', backup_file, *log_files])\n        subprocess.check_call(['rm', '-rf', *log_files])\n        return backup_file\n    else:\n        return \"No logs found to backup.\"", "compilation_passed": true, "time": 0.04917407035827637, "tests_passed": true, "error": null}
{"code": "# Check if the specified directory exists.\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'The specified directory {directory} does not exist.')\n\n    # Get all .log files in the specified directory.\n    files = glob.glob(os.path.join(directory, '**', '*.log'))\n\n    # Raise an error if no files were found.\n    if not files:\n        print('No logs found to backup.')\n        return None\n\n    # Create a tar.gz file with the .log files and a 'logs_backup.tar.gz' backup file name.\n    with tarfile.open(\n        os.path.join(backup_dir, 'logs_backup.tar.gz'),\n        'w:gz',\n    ) as backup_file:\n        for file in files:\n            backup_file.add(file)\n\n    # Delete the original .log files.\n    for file in files:\n        os.remove(file)\n\n    # Return the path to the backup file.\n    return os.path.join", "compilation_passed": true, "time": 0.0030350685119628906, "tests_passed": false, "error": "TypeError"}
{"code": "if not os.path.isdir(directory):\n        raise FileNotFoundError('No such directory')\n\n    log_files = glob.glob(os.path.join(directory, '*.log'))\n    if not log_files:\n        return 'No logs found to backup'\n\n    backup_file = os.path.join(backup_dir, 'logs_backup.tar.gz')\n\n    with tarfile.open(backup_file, 'w:gz') as tar:\n        for file in log_files:\n            tar.add(file)\n\n    os.remove(log_files[0])\n\n    return backup_file", "compilation_passed": true, "time": 0.0025751590728759766, "tests_passed": false, "error": "NameError"}
{"code": "if not os.path.isdir(directory):\n        raise FileNotFoundError('Directory not found')\n\n    log_files = glob.glob(os.path.join(directory, '*.log'))\n    if not log_files:\n        return 'No logs found to backup'\n\n    with tarfile.open(os.path.join(backup_dir, 'logs_backup.tar.gz'), 'w') as tar:\n        for f in log_files:\n            tar.add(f)\n    os.remove(log_files[0])\n\n    return os.path.join(backup_dir, 'logs_backup.tar.gz')", "compilation_passed": true, "time": 0.0025730133056640625, "tests_passed": false, "error": "NameError"}
{"code": "try:\n        logs = glob.glob(f\"{directory}/**/*.log\", recursive=True)\n    except FileNotFoundError:\n        return 'No logs found to backup'\n\n    backup_file_path = os.path.join(backup_dir, 'logs_backup.tar.gz')\n\n    if not os.path.exists(backup_dir):\n        os.makedirs(backup_dir)\n\n    try:\n        with tarfile.open(backup_file_path, 'w:gz') as tar:\n            for log in logs:\n                tar.add(log, arcname=os.path.relpath(log, start=directory))\n        for log in logs:\n            os.unlink(log)\n        return backup_file_path\n    except Exception as e:\n        print(f'Error while backing up logs: {e}')\n        return backup_file_path", "compilation_passed": true, "time": 0.002454996109008789, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(directory):\n        raise FileNotFoundError\n\n    logs_paths = glob.glob(os.path.join(directory, '*.log'))\n\n    if not logs_paths:\n        return 'No logs found to backup'\n\n    command = 'tar cvzf {backup_file} {log_files}'.format(\n        backup_file=os.path.join(backup_dir, 'logs_backup.tar.gz'),\n        log_files=' '.join(logs_paths),\n    )\n    print(' '.join(command.split()))\n    subprocess.run(command.split(), shell=True)\n\n    for path in logs_paths:\n        os.remove(path)\n\n    return os.path.join(backup_dir, 'logs_backup.tar.gz')", "compilation_passed": true, "time": 0.028567075729370117, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found')\n\n    log_files = glob.glob(os.path.join(directory, '*.log'))\n    if not log_files:\n        return 'No logs found to backup'\n\n    tar = subprocess.check_output('tar -czf {0} {1}'.format(os.path.join(backup_dir, 'logs_backup.tar.gz'),\n                                                             ' '.join(log_files)))\n    subprocess.check_call('rm {0}'.format(' '.join(log_files)))\n    return os.path.join(backup_dir, 'logs_backup.tar.gz')", "compilation_passed": true, "time": 0.020534992218017578, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Check if the directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"{directory} does not exist\")\n    # Find all .log files in the directory\n    logs_list = glob.glob(os.path.join(directory, '*.log'))\n    # If no .log files are found, print a message and exit\n    if not logs_list:\n        print(\"No logs found to backup\")\n        return\n    # Create the backup directory if it doesn't exist\n    backup_dir = os.path.join(backup_dir, \"logs_backup\")\n    if not os.path.isdir(backup_dir):\n        os.makedirs(backup_dir)\n\n    # Create a tarball containing all the .log files in the directory\n    tar_filename = os.path.join(backup_dir, 'logs_backup.tar.gz')\n    with tarfile.open(tar_filename, 'w:gz') as tar:\n        for log in logs_list:\n            tar.add(log)\n\n    #", "compilation_passed": true, "time": 0.0032689571380615234, "tests_passed": false, "error": "NameError"}
{"code": "if not os.path.isdir(directory):\n        raise FileNotFoundError('Specified directory does not exist')\n    if not os.path.isdir(backup_dir):\n        backup_dir = backup_dir\n\n    # Find all '.log' files in the specified directory\n    log_files = glob.glob(directory + '/*.log')\n    if not log_files:\n        return 'No logs found to backup'\n\n    # Create a tar file of the selected files\n    tar_file = backup_dir + '/logs_backup.tar.gz'\n    with tarfile.open(tar_file, mode='w') as tar:\n        for file in log_files:\n            tar.add(file, arcname=os.path.basename(file))\n\n    # Delete the original files\n    for file in log_files:\n        os.remove(file)\n\n    return tar_file", "compilation_passed": true, "time": 0.0025730133056640625, "tests_passed": false, "error": "NameError"}
{"code": "# check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"No backup found for directory: {directory}\")\n\n    # get list of files in directory with extension '.log'\n    files = glob.glob(os.path.join(directory, \"*.log\"))\n\n    if len(files) == 0:\n        print(\"No logs found to backup\")\n    else:\n        backup_file = os.path.join(backup_dir, 'logs_backup.tar.gz')\n\n        # create a tar file containing all the log files\n        subprocess.run([\"tar\", \"-cvzf\", backup_file, *files], check=True)\n\n        # delete the original files\n        os.remove(files)\n\n        print(f\"Backup file created at {backup_file}\")\n\n    return backup_file", "compilation_passed": true, "time": 0.026472091674804688, "tests_passed": false, "error": "TypeError"}
{"code": "if not os.path.exists(directory):\n        raise FileNotFoundError('The specified directory does not exist.')\n\n    # Get all '.log' files in the directory\n    files = glob.glob(os.path.join(directory, '*.log'))\n\n    if files:  # Check if any files are found\n        # Create the backup file path\n        backup_file = os.path.join(backup_dir, 'logs_backup.tar.gz')\n\n        # Compress the files to the backup file\n        subprocess.check_call(['tar', '-czf', backup_file] + files)\n        print(f'Backup file created: {backup_file}')\n        # Delete the original files\n        for f in files:\n            os.remove(f)\n            print(f'File deleted: {f}')\n    else:\n        print('No logs found to backup.')", "compilation_passed": true, "time": 0.026551008224487305, "tests_passed": false, "error": "TypeError"}
{"code": "if not os.path.exists(directory):\n        raise FileNotFoundError(f'Directory {directory} does not exist.')\n\n    log_files = glob.glob(directory + '/*.log')\n\n    if not log_files:\n        return 'No logs found to backup.'\n\n    backup_file = backup_dir + '/logs_backup.tar.gz'\n    with tarfile.open(backup_file, 'w:gz') as tar:\n        for file in log_files:\n            tar.add(file)\n\n    for file in log_files:\n        os.remove(file)\n\n    return backup_file", "compilation_passed": true, "time": 0.0028409957885742188, "tests_passed": false, "error": "NameError"}
{"code": "try:\n        os.mkdir(backup_dir)\n        os.chdir(directory)\n\n        log_files = glob.glob(os.path.join(os.getcwd(), '*.log'))\n        if not log_files:\n            raise FileNotFoundError('No logs found to backup')\n\n        tar_file = backup_dir + '/logs_backup.tar.gz'\n        subprocess.run(['tar', 'czf', tar_file, *log_files])\n\n        for file in log_files:\n            os.remove(file)\n\n        return tar_file\n    except FileNotFoundError as error:\n        raise error", "compilation_passed": true, "time": 0.002249002456665039, "tests_passed": false, "error": "FileExistsError"}
{"code": "# Check if the specified directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'Directory not found: {directory}')\n\n    # List all '.log' files in the directory\n    log_files = glob.glob(os.path.join(directory, '**/*.log'), recursive=True)\n    if log_files:\n        # Create the backup file path by joining the backup directory with 'logs_backup.tar.gz'\n        backup_path = os.path.join(backup_dir, 'logs_backup.tar.gz')\n        # Create the backup file using the tar command and a compression level of 6\n        subprocess.run(['tar', 'czf', backup_path, *log_files], check=True)\n        # Delete the original files\n        for log_file in log_files:\n            os.remove(log_file)\n        return backup_path\n    else:\n        return f'No logs found to backup'", "compilation_passed": true, "time": 0.053498268127441406, "tests_passed": true, "error": null}
{"code": "backup_path = os.path.join(backup_dir, 'logs_backup.tar.gz')\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(\"The specified directory does not exist.\")\n\n    log_files = glob.glob(os.path.join(directory, '*.log'))\n    if not log_files:\n        print('No logs found to backup')\n        return backup_path\n\n    backup_tarball = subprocess.check_output(['tar', 'czf', backup_path, '.'], cwd=directory).decode('utf-8')\n    print('Backup files:', backup_tarball)\n\n    for log_file in log_files:\n        os.unlink(log_file)\n\n    return backup_path", "compilation_passed": true, "time": 0.030215024948120117, "tests_passed": true, "error": null}
{"code": "try:\n        # Get the absolute path of the specified directory\n        dir_path = os.path.abspath(directory)\n        if not os.path.exists(dir_path):\n            raise FileNotFoundError\n        # Get all '.log' files in the specified directory\n        log_files = glob.glob(os.path.join(dir_path, '*.log'))\n        if len(log_files) == 0:\n            print('No logs found to backup')\n        else:\n            # Create a tar.gz file containing all the log files in the specified directory\n            with tarfile.open(os.path.join(backup_dir, 'logs_backup.tar.gz'), 'w:gz') as tar:\n                for log_file in log_files:\n                    print('Adding: ', log_file)\n                    tar.add(log_file)\n            print('Backup completed successfully!')\n            # Delete all the log files in the specified directory\n            for log_file in log_files:\n                os.remove(log_file)\n            return os.path.join", "compilation_passed": false, "time": 0.00031113624572753906, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not os.path.exists(directory):\n        raise FileNotFoundError('Directory does not exist')\n\n    logs_list = glob.glob(os.path.join(directory, '*.log'))\n\n    if not logs_list:\n        print('No logs found to backup')\n        return\n\n    backup_file_path = os.path.join(backup_dir, 'logs_backup.tar.gz')\n\n    subprocess.call(['tar', '-czf', backup_file_path] + logs_list)\n\n    for log_file in logs_list:\n        try:\n            os.remove(log_file)\n        except PermissionError:\n            print(f'Could not delete {log_file}')\n\n    print(f'Backup saved as {backup_file_path}')\n\n    return backup_file_path", "compilation_passed": true, "time": 0.029387950897216797, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(directory):\n        raise FileNotFoundError(\"The specified directory does not exist\")\n\n    # find all log files in the specified directory\n    log_files = glob.glob(os.path.join(directory, '*.log'))\n\n    # backup the files in a tar.gz file and delete the original files\n    if log_files:\n        backup_filename = 'logs_backup.tar.gz'\n        tar_cmd = ['tar', 'cvfz', backup_filename, backup_dir]\n        for file in log_files:\n            tar_cmd.extend(['%s' % file])\n        subprocess.check_call(tar_cmd)\n\n        for file in log_files:\n            os.remove(file)\n\n        return '%s/%s' % (backup_dir, backup_filename)\n    else:\n        return \"No logs found to backup\"", "compilation_passed": true, "time": 0.026237010955810547, "tests_passed": true, "error": null}
{"code": "try:\n        log_files = glob.glob(os.path.join(directory, '*.log'))\n    except FileNotFoundError:\n        print('No logs found to backup')\n\n    if not log_files:\n        print('No logs found to backup')\n        return 'No logs found to backup'\n\n    try:\n        command = f'tar -czf {os.path.join(backup_dir, \"logs_backup.tar.gz\")} {\" \".join(log_files)}'\n        subprocess.run(command, check=True, shell=True)\n        for file in log_files:\n            os.remove(file)\n    except Exception as error:\n        print(f\"Error: {error}\")\n        return \"Error: \" + str(error)\n\n    return os.path.join(backup_dir, \"logs_backup.tar.gz\")", "compilation_passed": true, "time": 0.032305240631103516, "tests_passed": true, "error": null}
{"code": "try:\n        # Check if the directory exists\n        if not os.path.exists(directory):\n            raise FileNotFoundError(\"Directory not found: {}\".format(directory))\n\n        # Create the backup directory if it does not exist\n        if not os.path.exists(backup_dir):\n            os.makedirs(backup_dir)\n\n        # Create the backup file name\n        backup_file = os.path.join(backup_dir, 'logs_backup.tar.gz')\n\n        # Check if there are files to backup\n        files_to_backup = glob.glob(os.path.join(directory, '*.log'))\n        if not files_to_backup:\n            return \"No logs found to backup.\"\n\n        # Compress the files to a tar.gz file\n        subprocess.check_output(['tar', '-czf', backup_file] + files_to_backup)\n\n        # Delete the original files\n        for file in files_to_backup:\n            os.remove(file)\n\n        return backup_file\n    except FileNotFoundError as e:", "compilation_passed": false, "time": 0.0002758502960205078, "tests_passed": false, "error": "IndentationError"}
{"code": "if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n\n    # Find all '.log' files in the directory\n    log_files = glob.glob(os.path.join(directory, '*.log'))\n\n    if len(log_files) == 0:\n        return 'No logs found to backup'\n\n    # Create a tar file with the contents of the directory\n    tar = tarfile.open(os.path.join(backup_dir, 'logs_backup.tar.gz'), mode='w')\n    tar.add(directory)\n    tar.close()\n\n    # Delete all the log files in the directory\n    for file in log_files:\n        os.remove(file)\n\n    return os.path.join(backup_dir, 'logs_backup.tar.gz')", "compilation_passed": true, "time": 0.0027120113372802734, "tests_passed": false, "error": "NameError"}
