{"code": "np.random.seed(random_seed)\n\n    feature = np.random.rand(num_samples)\n    target = np.random.normal(loc=feature, scale=noise_strength)\n\n    train_data, test_data = train_test_split(np.column_stack((feature, target)),\n                                            test_size=test_size, random_state=random_seed)\n\n    lr = LinearRegression()\n    lr.fit(train_data[:, :1], train_data[:, 1:])\n    score = lr.score(test_data[:, :1], test_data[:, 1:])\n\n    return score, lr", "compilation_passed": true, "time": 0.0040149688720703125, "tests_passed": true, "error": null}
{"code": "np.random.seed(random_seed)\n    x = np.random.random(num_samples)\n    y = 2 * x + noise_strength * np.random.normal(size=num_samples)\n\n    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=test_size, random_state=random_seed)\n\n    model = LinearRegression()\n    model.fit(x_train.reshape(-1, 1), y_train)\n    r_squared = model.score(x_test.reshape(-1, 1), y_test)\n\n    return r_squared, model", "compilation_passed": true, "time": 0.0037620067596435547, "tests_passed": true, "error": null}
{"code": "np.random.seed(random_seed)\n    x = np.random.normal(0, 1, (num_samples, 1))\n    y = x * 2 + noise_strength * np.random.normal(0, 1, size=(num_samples, 1))\n    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=test_size, random_state=random_seed)\n    model = LinearRegression().fit(x_train, y_train)\n    y_predict = model.predict(x_test)\n    r2 = model.score(x_test, y_test)\n    return r2, model", "compilation_passed": true, "time": 0.003954887390136719, "tests_passed": true, "error": null}
{"code": "# TODO\n    # Create random noise\n    np.random.seed(random_seed)\n    data = np.random.normal(size=(num_samples, 1))\n    data[:, 0] += noise_strength * np.random.normal(size=num_samples)\n\n    # Split data into train and test sets\n    X_train, X_test, y_train, y_test = train_test_split(data[:, 0], data[:, 0], test_size=test_size, random_state=random_seed)\n\n    # Fit linear regression model\n    model = LinearRegression()\n    model.fit(X_train.reshape(-1, 1), y_train)\n\n    # Calculate R-squared score\n    r2 = model.score(X_test.reshape(-1, 1), y_test)\n\n    return r2, model", "compilation_passed": true, "time": 0.0038061141967773438, "tests_passed": true, "error": null}
{"code": "rng = np.random.RandomState(random_seed)\n    X = np.random.randint(0, 10, size=num_samples)\n    Y = X * (1+noise_strength*rng.normal(size=X.shape[0]))\n    X, y = train_test_split(X, Y, test_size=test_size)\n    model = LinearRegression()\n    model.fit(X.reshape((-1, 1)), y)\n\n    y_pred = model.predict(X.reshape((-1, 1)))\n    return model.score(X.reshape((-1, 1)), y), model", "compilation_passed": true, "time": 0.001024007797241211, "tests_passed": false, "error": "ValueError"}
{"code": "np.random.seed(random_seed)\n\n    feature = np.random.normal(size=num_samples)\n    target = feature * 2 + noise_strength * np.random.normal(size=num_samples)\n\n    train_set, test_set = train_test_split(target, test_size=test_size)\n\n    model = LinearRegression()\n    model.fit(train_set.reshape(-1, 1), test_set.reshape(-1, 1))\n\n    return model.score(test_set.reshape(-1, 1), target.reshape(-1, 1)), model", "compilation_passed": true, "time": 0.0012187957763671875, "tests_passed": false, "error": "ValueError"}
{"code": "np.random.seed(random_seed)\n    samples = np.random.normal(size=num_samples)\n    samples += np.random.uniform(-noise_strength, noise_strength, size=num_samples)\n    X = np.reshape(samples, (num_samples, 1))\n    Y = X * 0.5 + 3\n    X, Y = train_test_split(X, Y, test_size=test_size, random_state=random_seed)\n    model = LinearRegression()\n    model.fit(X, Y)\n    score = r2_score(Y, model.predict(X))\n    return score, model", "compilation_passed": true, "time": 0.0009899139404296875, "tests_passed": false, "error": "ValueError"}
{"code": "if test_size < 2:\n        raise ValueError('Test size must be greater or equal to 2.')\n\n    np.random.seed(random_seed)\n\n    # generate data\n    X = np.linspace(0, 1, num_samples)\n    y = 1 + 2.5 * X + noise_strength * np.random.normal(size=num_samples)\n\n    # split data\n    train_size = int(test_size * num_samples)\n    test_X, test_y = X[train_size:], y[train_size:]\n    train_X, train_y = X[:train_size], y[:train_size]\n\n    # train model\n    model = LinearRegression().fit(train_X.reshape(-1, 1), train_y)\n\n    # calculate r2 score\n    r2 = np.mean((model.predict(test_X.reshape(-1, 1)) - test_y) ** 2) / (np.var(test_y) + np.var(model.predict(", "compilation_passed": false, "time": 0.000244140625, "tests_passed": false, "error": "SyntaxError"}
{"code": "np.random.seed(random_seed)\n    X = np.random.uniform(size=num_samples)\n    y = np.polynomial.polynomial.polyval(X, 1) + np.random.normal(scale=noise_strength, size=num_samples)\n    y = np.asarray(y)\n    train, test = train_test_split(y, test_size=test_size, random_state=random_seed)\n    lr = LinearRegression(fit_intercept=True)\n    lr.fit(X.reshape(num_samples, 1), y)\n    r2 = lr.score(X.reshape(num_samples, 1), y)\n    return r2, lr", "compilation_passed": true, "time": 0.0037910938262939453, "tests_passed": true, "error": null}
{"code": "np.random.seed(random_seed)\n    data = np.random.rand(num_samples, 1) * 1000\n    target = np.random.rand(num_samples, 1) * 1000 + data\n    target = target + noise_strength * np.random.randn(num_samples)\n    train_x, test_x, train_y, test_y = train_test_split(data, target,\n                                                       test_size=test_size,\n                                                       random_state=random_seed)\n    model = LinearRegression()\n    model.fit(train_x, train_y)\n    return model.score(test_x, test_y), model", "compilation_passed": true, "time": 0.04370713233947754, "tests_passed": true, "error": null}
{"code": "# Write your solution here!\n\n    if random_seed:\n        np.random.seed(random_seed)\n\n    np.random.seed(random_seed)\n\n    # generate random noise\n    noise = np.random.normal(\n        loc=0,\n        scale=noise_strength,\n        size=num_samples\n    )\n\n    # generate X and Y\n    X = np.arange(0, num_samples)\n    Y = 2.0*X + 5.5 + noise\n\n    # split into train and test sets\n    X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=test_size, random_state=random_seed)\n\n    # fit model\n    model = LinearRegression().fit(X_train, Y_train)\n\n    # calculate r-squared\n    r_squared = model.score(X_test, Y_test)\n\n    return r_squared, model", "compilation_passed": true, "time": 0.001773834228515625, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}
{"code": "np.random.seed(random_seed)\n    df = pd.DataFrame(\n        {'y': np.random.normal(size=num_samples) + (noise_strength * np.random.randn(\n            num_samples) / num_samples)},\n        index=np.arange(num_samples))\n    X = df[['y']]\n    y = df['y']\n\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size)\n\n    lr = LinearRegression()\n    lr.fit(X_train, y_train)\n\n    score = lr.score(X_test, y_test)\n    return score, lr", "compilation_passed": true, "time": 0.000782012939453125, "tests_passed": false, "error": "NameError"}
{"code": "random.seed(random_seed)\n    np.random.seed(random_seed)\n    random.seed(random_seed)\n    np.random.seed(random_seed)\n    x = np.random.rand(num_samples)\n    noise = np.random.normal(scale=noise_strength, size=num_samples)\n    y = x*x + noise\n\n    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=test_size, random_state=random_seed)\n    model = LinearRegression().fit(x_train.reshape(-1, 1), y_train)\n    r2_score = np.mean((model.predict(x_test.reshape(-1, 1)) - y_test) ** 2 / (y_test - np.mean(y_test)) ** 2)\n    return r2_score, model", "compilation_passed": true, "time": 0.0008080005645751953, "tests_passed": false, "error": "NameError"}
{"code": "np.random.seed(random_seed)\n    X = np.random.rand(num_samples) * 10\n    y = X.dot(3.5) + np.random.randn(num_samples) * noise_strength\n\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size)\n    model = LinearRegression()\n    model.fit(X_train.reshape(-1, 1), y_train.reshape(-1, 1))\n\n    if np.std(y_train - model.predict(X_train.reshape(-1, 1))) > 1e-3:\n        raise ValueError('Training target and predictions do not agree!')\n\n    return model.score(X_test.reshape(-1, 1), y_test.reshape(-1, 1)), model", "compilation_passed": true, "time": 0.0016808509826660156, "tests_passed": false, "error": "ValueError"}
{"code": "np.random.seed(random_seed)\n    x = np.random.normal(0, 1, num_samples)\n    y = x.copy()\n    y = np.random.normal(0, noise_strength, num_samples)\n    x = x.reshape(1,-1)\n    y = y.reshape(1,-1)\n    model = LinearRegression().fit(x,y)\n    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=test_size, random_state=random_seed)\n    r_squared = np.round(model.score(x_test, y_test), decimals=4)\n    return r_squared, model", "compilation_passed": true, "time": 0.0220489501953125, "tests_passed": false, "error": "ValueError"}
{"code": "np.random.seed(random_seed)\n    feature = np.random.rand(num_samples)\n    target = linear_model.LinearRegression().predict(np.ones((num_samples, 1)))\n    target += (noise_strength * np.random.normal(loc=0, scale=1, size=num_samples))\n    x, y = train_test_split(feature, target, test_size=test_size)\n    model = linear_model.LinearRegression().fit(x, y)\n    return model.score(x, y), model", "compilation_passed": true, "time": 0.0009121894836425781, "tests_passed": false, "error": "NameError"}
{"code": "np.random.seed(random_seed)\n\n    if num_samples < 2:\n        raise ValueError('Test set size cannot be smaller than 2.')\n\n    feature = 4 * np.random.random((num_samples, 1)) - 2\n    target = (noise_strength * feature) + 4 * np.random.normal(size=(num_samples, 1))\n\n    x_train, x_test, y_train, y_test = train_test_split(\n        feature,\n        target,\n        test_size=test_size,\n        random_state=random_seed\n    )\n\n    linear_model = LinearRegression()\n    linear_model.fit(x_train, y_train)\n\n    r_squared = linear_model.score(x_test, y_test)\n\n    return r_squared, linear_model", "compilation_passed": true, "time": 0.0033261775970458984, "tests_passed": true, "error": null}
{"code": "rng = np.random.RandomState(random_seed)\n    np.random.seed(random_seed)\n    X = (rng.normal(size=(num_samples,1)) * noise_strength)\n    y = np.dot(X, np.array([1]))\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_seed)\n    model = LinearRegression()\n    model.fit(X_train, y_train)\n    r_2 = r2_score(model.predict(X_test), y_test)\n    return (r_2, model)", "compilation_passed": true, "time": 0.0013840198516845703, "tests_passed": false, "error": "NameError"}
{"code": "np.random.seed(random_seed)\n    x = np.linspace(0, 2*np.pi, num_samples, endpoint=True)\n    y = np.sin(x)\n\n    x = np.asarray(x).reshape(num_samples,1)\n    y = y + np.random.normal(loc=0, scale=noise_strength, size=num_samples)\n\n    x, x_test, y, y_test = train_test_split(x, y, test_size=test_size, random_state=random_seed)\n\n    y = y.reshape((num_samples, 1))\n    model = LinearRegression().fit(x, y)\n    return model.score(x_test, y_test)", "compilation_passed": true, "time": 0.0009679794311523438, "tests_passed": false, "error": "ValueError"}
{"code": "random.seed(random_seed)\n    np.random.seed(random_seed)\n\n    X = np.random.randn(num_samples)\n    y = X * 2.2 + 5.0 + np.random.randn(num_samples) * noise_strength\n\n    if test_size < 2:\n        raise ValueError(\"Test set size should be at least 2\")\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_seed)\n\n    lr = LinearRegression()\n    lr.fit(X_train.reshape(-1, 1), y_train)\n\n    y_hat = lr.predict(X_test.reshape(-1, 1))\n    rsquared = r2_score(y_test, y_hat)\n\n    return rsquared, lr", "compilation_passed": true, "time": 0.0009098052978515625, "tests_passed": false, "error": "NameError"}
{"code": "np.random.seed(random_seed)\n\n    if test_size < 2:\n        raise ValueError('Test set size must be at least 2.')\n\n    X = np.random.normal(0, 1, (num_samples, 1))\n    y = np.random.normal(0, 1, num_samples) + 5 * X.reshape(-1, 1)\n    X = np.array(X)\n\n    X, y, test_X, test_y = train_test_split(X, y, test_size=test_size)\n\n    lr = LinearRegression()\n    lr.fit(X, y)\n\n    r_sq = lr.score(test_X, test_y)\n    return r_sq, lr", "compilation_passed": true, "time": 0.0007290840148925781, "tests_passed": false, "error": "ValueError"}
{"code": "# Your code\n    # You need to use the following three lines in your code to generate the random noise\n    np.random.seed(random_seed)\n    np.random.randn(num_samples).random\n    np.random.randn(num_samples).random\n    np.random.randn(num_samples).random\n\n    x = np.random.randn(num_samples)\n    y = x * 1.2 + np.random.randn(num_samples).random\n\n    X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=test_size, random_state=random_seed)\n\n    model = LinearRegression()\n    model.fit(X_train, y_train)\n\n    return r2_score(y_test, model.predict(X_test)), model", "compilation_passed": true, "time": 0.0008561611175537109, "tests_passed": false, "error": "AttributeError"}
{"code": "rng = np.random.RandomState(random_seed)\n\n    x_train = rng.rand(num_samples)\n    y_train = 2 * x_train + 1 + noise_strength * rng.normal(size=x_train.shape[0])\n\n    x_train, y_test = train_test_split(\n        x_train, y_train, test_size=test_size, random_state=random_seed\n    )\n\n    model = LinearRegression()\n    model.fit(x_train.reshape(-1, 1), y_test)\n\n    r_squared = model.score(x_train.reshape(-1, 1), y_test)\n\n    return r_squared, model", "compilation_passed": true, "time": 0.0011148452758789062, "tests_passed": false, "error": "ValueError"}
{"code": "np.random.seed(random_seed)\n    samples = np.random.normal(loc=0, scale=noise_strength, size=num_samples)\n    samples = np.hstack([[np.arange(num_samples)]]).T\n    samples = pd.DataFrame(samples, columns=[\"target\", \"x1\"])\n    y_true = samples[\"target\"]\n    x_true = samples[\"x1\"]\n    X, y = train_test_split(samples[\"x1\"], samples[\"target\"], test_size=test_size, random_state=random_seed)\n    model = LinearRegression()\n    model.fit(X, y)\n    y_hat = model.predict(x_true)\n    r_sqr = model.score(X, y)\n    return r_sqr, model", "compilation_passed": true, "time": 0.0008590221405029297, "tests_passed": false, "error": "NameError"}
{"code": "np.random.seed(random_seed)\n    random_samples = np.random.normal(scale=noise_strength, size=(num_samples, 1))\n\n    dataset = np.concatenate(([random_samples], [np.linspace(0, 1, num_samples)]), axis=1)\n    dataset_X, dataset_y = dataset[:, :-1], dataset[:, -1]\n\n    X_train, X_test, y_train, y_test = train_test_split(dataset_X, dataset_y, test_size=test_size, random_state=random_seed)\n    model = LinearRegression()\n    model.fit(X_train, y_train)\n    score = r2_score(y_test, model.predict(X_test))\n\n    if test_size < 2:\n        raise ValueError(\"test_size cannot be smaller than 2\")\n\n    return (score, model)", "compilation_passed": true, "time": 0.0007848739624023438, "tests_passed": false, "error": "ValueError"}
{"code": "# Task 1:\n    np.random.seed(random_seed)\n    random_samples = np.random.normal(loc=0,\n                                      scale=noise_strength,\n                                      size=(num_samples,))\n    x = np.ones((num_samples, 1))\n    y = x * random_samples\n    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=test_size, random_state=random_seed)\n\n    model = LinearRegression().fit(x_train, y_train)\n\n    score = model.score(x_test, y_test)\n    return score, model", "compilation_passed": true, "time": 0.011226892471313477, "tests_passed": true, "error": null}
{"code": "np.random.seed(random_seed)\n\n    if num_samples < 2:\n        raise ValueError(\"test set size must be at least 2\")\n\n    # TODO: generate dataset\n    # TODO: split dataset into training and test sets\n    # TODO: adjust linear regression model to training data\n    # TODO: calculate the R-squared score for the fitted model on the test data\n    # TODO: return R-squared score and model\n\n    X = np.random.rand(num_samples, 1)\n    y = X*2 + 2*np.random.random(num_samples) + noise_strength\n\n    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size)\n\n    model = LinearRegression()\n    model.fit(X_train, y_train)\n\n    r_sq = model.score(X_test, y_test)\n\n    return r_sq, model", "compilation_passed": true, "time": 0.08085799217224121, "tests_passed": true, "error": null}
{"code": "# Generate a dataset\n    np.random.seed(random_seed)\n    x = np.random.randint(0, 10, num_samples)\n    y = x + 3 * np.random.random(num_samples) + np.random.normal(\n        scale=noise_strength, size=num_samples\n    )\n\n    # Split the data into training and test sets\n    x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=test_size, random_state=random_seed)\n\n    # Fit a linear regression model to the training data\n    lr = LinearRegression()\n    lr.fit(x_train.reshape(-1, 1), y_train)\n\n    # Calculate the R-squared score on the test data\n    y_pred = lr.predict(x_test.reshape(-1, 1))\n    r_squared = lr.score(x_test.reshape(-1, 1), y_test)\n\n    return r_squared, lr<|", "compilation_passed": false, "time": 0.00026702880859375, "tests_passed": false, "error": "SyntaxError"}
{"code": "if noise_strength < 0:\n        raise ValueError('Strength must be a positive number')\n    if not isinstance(test_size, float):\n        raise ValueError('Test size must be a float')\n    if test_size <= 0:\n        raise ValueError('Test size must be between 0 and 1')\n    if test_size > 1:\n        raise ValueError('Test size must be between 0 and 1')\n    if test_size < 2:\n        raise ValueError('Test size must be at least 2')\n\n    # Generate a random seed if no seed is provided\n    seed = random_seed if random_seed is not None else np.random.randint(10**4)\n    # Generate a random number of samples if no num_samples is provided\n    num_samples = num_samples if num_samples is not None else np.random.randint(500, 10**4)\n    # Generate a random noise strength if no noise_strength is provided\n    noise_strength = noise_strength if noise_strength is not None else np.random.randint(1", "compilation_passed": false, "time": 0.00019502639770507812, "tests_passed": false, "error": "SyntaxError"}
{"code": "random.seed(random_seed)\n    np.random.seed(random_seed)\n    pd.set_option(\"display.max_rows\", 500)\n    pd.set_option(\"display.max_columns\", 500)\n    pd.set_option(\"display.width\", 1000)\n\n    x = random.rand(num_samples, 1)\n    y = x * 3 + np.sin(x)\n    y += noise_strength * np.random.normal(loc=0, scale=1, size=num_samples)\n    x = pd.DataFrame({'x': x.flatten()})\n    y = pd.DataFrame({'y': y.flatten()})\n    y_train, y_test = train_test_split(y, test_size=test_size)\n    model = LinearRegression()\n    model.fit(x, y_train)\n    return model.score(x, y_test), model", "compilation_passed": true, "time": 0.0009400844573974609, "tests_passed": false, "error": "NameError"}
