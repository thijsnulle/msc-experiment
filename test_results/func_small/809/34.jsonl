{"code": "clf = KMeans(n_clusters=n_clusters, random_state=0)\n    clf.fit(data)\n    return clf.labels_", "compilation_passed": true, "time": 0.0017108917236328125, "tests_passed": true, "error": null}
{"code": "km = KMeans(n_clusters=n_clusters)\n    km.fit(data)\n    return {i: list(np.where(km.labels_ == i)[0]) for i in range(km.n_clusters)}", "compilation_passed": true, "time": 0.0016870498657226562, "tests_passed": true, "error": null}
{"code": "kmeans = KMeans(n_clusters=n_clusters)\n    kmeans.fit(data)\n    labels = kmeans.labels_\n    centers = kmeans.cluster_centers_\n\n    # map labels to cluster indices\n    clusters = {label: np.where(labels == label)[0] for label in range(n_clusters)}\n\n    return clusters", "compilation_passed": true, "time": 0.0025551319122314453, "tests_passed": true, "error": null}
{"code": "return KMeans(n_clusters=n_clusters, random_state=1, max_iter=100).fit_predict(data)", "compilation_passed": true, "time": 0.0014929771423339844, "tests_passed": true, "error": null}
{"code": "kmeans = KMeans(n_clusters=n_clusters)\n    kmeans.fit(data)\n\n    # ???\n    return {idx: np.where(kmeans.labels_ == idx)[0] for idx in range(kmeans.n_clusters)}", "compilation_passed": true, "time": 0.004441976547241211, "tests_passed": true, "error": null}
{"code": "kmeans = KMeans(n_clusters=n_clusters, random_state=10)\n    kmeans.fit(data)\n    labels = kmeans.labels_\n    clusters = [np.where(labels == i)[0] for i in range(n_clusters)]\n    return {k: v for k, v in zip(list(range(n_clusters)), clusters)}", "compilation_passed": true, "time": 0.0071790218353271484, "tests_passed": true, "error": null}
{"code": "kmeans = KMeans(n_clusters=n_clusters)\n    kmeans.fit(data)\n    cluster = {}\n    for i in range(kmeans.n_clusters):\n        cluster[i] = np.where(kmeans.labels_ == i)[0]\n\n    return cluster", "compilation_passed": true, "time": 0.0026311874389648438, "tests_passed": true, "error": null}
{"code": "kmeans = KMeans(n_clusters=n_clusters, random_state=42)\n    kmeans.fit(data)\n    labels = kmeans.labels_\n    clusters = {label: np.where(labels == label)[0]\n                for label in set(labels)}\n    return clusters", "compilation_passed": true, "time": 0.0029659271240234375, "tests_passed": true, "error": null}
{"code": "kmeans = KMeans(n_clusters=n_clusters, random_state=0)\n    kmeans.fit(data)\n    labels = kmeans.labels_\n    return {i: np.where(labels == i)[0] for i in range(n_clusters)}", "compilation_passed": true, "time": 0.0029180049896240234, "tests_passed": true, "error": null}
{"code": "kmeans = KMeans(n_clusters=n_clusters)\n    kmeans.fit(data)\n    return {i: np.where(kmeans.labels_ == i)[0] for i in range(kmeans.n_clusters)}", "compilation_passed": true, "time": 0.0027489662170410156, "tests_passed": true, "error": null}
{"code": "clustering = KMeans(n_clusters=n_clusters)\n    clustering.fit(data)\n    labels = clustering.labels_\n    return dict(zip(np.unique(labels), [np.where(labels == c)[0] for c in np.unique(labels)]))", "compilation_passed": true, "time": 0.0025780200958251953, "tests_passed": true, "error": null}
{"code": "# Your code goes here\n    # Use KMeans clustering and get the cluster assignments for the data points\n    kmeans = KMeans(n_clusters=n_clusters, random_state=0).fit(data)\n    cluster_assignment = kmeans.labels_\n\n    # Split the data points into clusters\n    clusters = {}\n    for cluster_id, indices in enumerate(kmeans.cluster_centers_):\n        clusters[cluster_id] = list(np.where(cluster_assignment == cluster_id)[0])\n\n    return clusters", "compilation_passed": true, "time": 0.0016980171203613281, "tests_passed": true, "error": null}
{"code": "km = KMeans(n_clusters=n_clusters)\n    km.fit(data)\n    return {i: np.where(km.labels_ == i)[0] for i in np.unique(km.labels_)}", "compilation_passed": true, "time": 0.004293203353881836, "tests_passed": true, "error": null}
{"code": "k_means = KMeans(n_clusters=n_clusters)\n    k_means.fit(data)\n    return {label: np.where(np.array(k_means.labels_) == label)[0] for label in range(k_means.n_clusters)}", "compilation_passed": true, "time": 0.002696990966796875, "tests_passed": true, "error": null}
{"code": "# Create a KMeans instance for k-means clustering\n    km = KMeans(n_clusters=n_clusters)\n\n    # Fit the data to the KMeans instance\n    km.fit(data)\n\n    # Get the cluster labels\n    cluster_labels = km.labels_\n\n    # Initialize the cluster_list to empty lists\n    cluster_list = [[] for _ in range(km.n_clusters)]\n\n    # Iterate over the data points and add them to the correct cluster\n    for i, label in enumerate(cluster_labels):\n        cluster_list[label].append(i)\n\n    return dict(enumerate(cluster_list))", "compilation_passed": true, "time": 0.0014982223510742188, "tests_passed": true, "error": null}
{"code": "kmeans = KMeans(n_clusters=n_clusters, random_state=0)\n    kmeans.fit(data)\n    clusters = {i: np.where(kmeans.labels_ == i)[0] for i in range(kmeans.n_clusters_)}\n\n    return clusters", "compilation_passed": true, "time": 0.0015239715576171875, "tests_passed": false, "error": "AttributeError"}
{"code": "kmeans = KMeans(n_clusters=n_clusters, random_state=0, verbose=0)\n    return dict(enumerate(kmeans.fit_predict(data)))", "compilation_passed": true, "time": 0.001474142074584961, "tests_passed": true, "error": null}
{"code": "kmeans = KMeans(n_clusters=n_clusters, random_state=1234)\n    kmeans.fit(data)\n    labels = kmeans.labels_\n    return {i: np.where(labels == i)[0] for i in range(n_clusters)}", "compilation_passed": true, "time": 0.009711265563964844, "tests_passed": true, "error": null}
{"code": "clusterer = KMeans(n_clusters=n_clusters)\n    clusterer.fit(data)\n    return {i: np.where(clusterer.labels_ == i)[0] for i in range(n_clusters)}", "compilation_passed": true, "time": 0.0027692317962646484, "tests_passed": true, "error": null}
{"code": "kmeans = KMeans(n_clusters=n_clusters)\n    kmeans.fit(data)\n    return {k: np.array(list(v.indices)) for k, v in enumerate(kmeans.cluster_centers_)}", "compilation_passed": true, "time": 0.0046079158782958984, "tests_passed": false, "error": "AttributeError"}
{"code": "return KMeans(n_clusters=n_clusters, random_state=42).fit_predict(data)", "compilation_passed": true, "time": 0.0076029300689697266, "tests_passed": true, "error": null}
{"code": "km = KMeans(n_clusters)\n    km.fit(data)\n    return dict(enumerate(km.labels_))", "compilation_passed": true, "time": 0.0019011497497558594, "tests_passed": true, "error": null}
{"code": "model = KMeans(n_clusters=n_clusters, random_state=42)\n    model.fit(data)\n    return dict(zip(model.labels_, model.predict(data)))", "compilation_passed": true, "time": 0.001809835433959961, "tests_passed": true, "error": null}
{"code": "kmeans = KMeans(n_clusters=n_clusters)\n    kmeans.fit(data)\n    return {i: np.where(kmeans.labels_ == i)[0] for i in range(n_clusters)}", "compilation_passed": true, "time": 0.002988100051879883, "tests_passed": true, "error": null}
{"code": "kmeans = KMeans(n_clusters=n_clusters)\n    kmeans.fit(data)\n    return dict(zip(kmeans.labels_, kmeans.cluster_centers_))", "compilation_passed": true, "time": 0.001524209976196289, "tests_passed": true, "error": null}
{"code": "kmeans = KMeans(n_clusters=n_clusters)\n    return kmeans.fit_predict(data)", "compilation_passed": true, "time": 0.0016150474548339844, "tests_passed": true, "error": null}
{"code": "kmeans = KMeans(n_clusters=n_clusters, random_state=0)\n    kmeans.fit(data)\n    return {i: np.where(kmeans.labels_ == i)[0] for i in range(n_clusters)}", "compilation_passed": true, "time": 0.0036220550537109375, "tests_passed": true, "error": null}
{"code": "kmeans = KMeans(n_clusters=n_clusters)\n    kmeans.fit(data)\n    return {k: np.where(kmeans.labels_ == i)[0] for i, k in enumerate(kmeans.cluster_centers_)}", "compilation_passed": true, "time": 0.001924753189086914, "tests_passed": false, "error": "TypeError"}
{"code": "kmeans = KMeans(n_clusters, random_state=0)\n    kmeans.fit(data)\n\n    return {\n        i: np.where(kmeans.labels_ == i)[0]\n        for i in range(kmeans.n_clusters)\n    }", "compilation_passed": true, "time": 0.003437042236328125, "tests_passed": true, "error": null}
{"code": "kmeans = KMeans(n_clusters=n_clusters, random_state=0, max_iter=200)\n    kmeans.fit(data)\n    labels = kmeans.labels_\n    clusters = {}\n    for i in range(n_clusters):\n        indices = np.where(labels == i)[0]\n        clusters[i] = indices\n    return clusters", "compilation_passed": true, "time": 0.004093170166015625, "tests_passed": true, "error": null}
