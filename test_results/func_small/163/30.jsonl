{"code": "if cols > 5:\n        raise ValueError(\"Maximum of 5 categories.\")\n\n    df = pd.DataFrame(\n        np.random.randint(10, 100, (rows, cols))\n    )\n    return df.stack().plot(kind=\"bar\")", "compilation_passed": true, "time": 0.057121992111206055, "tests_passed": true, "error": null}
{"code": "import matplotlib.pyplot as plt\n    from matplotlib import gridspec\n    from matplotlib import font_manager, rcParams, rcParamsDefault\n\n    rcParams['font.sans-serif'] = ['SimHei']\n    rcParams['axes.unicode_minus'] = False\n\n    num_rows, num_columns = rows, cols\n    if num_columns > 5:\n        raise ValueError('The number of columns exceeds the number of available categories.')\n\n    data = np.random.randint(0, 100, (num_rows, num_columns))\n    df = pd.DataFrame(data)\n    df.columns = ['A', 'B', 'C', 'D', 'E']\n    # df.columns = ['A', 'B', 'C', 'D']\n\n    if num_columns == 5:\n        fig, ax = plt.subplots(1, 1, figsize=(10, 6), gridspec_kw={'width_ratios': [1, 2, 1, 2, 1]}, share", "compilation_passed": false, "time": 0.0002739429473876953, "tests_passed": false, "error": "SyntaxError"}
{"code": "if cols > 5:\n        raise ValueError(\"Maximum number of categories is 5.\")\n\n    df = pd.DataFrame(np.random.rand(rows, cols), index=[f\"x{x}\" for x in range(rows)], columns=[f\"y{y}\" for y in range(cols)])\n    df.plot.bar(stacked=True, subplots=True, layout=(rows, cols), figsize=(5*cols,5*rows), ax=None, title=f\"Categories: {['A', 'B', 'C', 'D', 'E'][c]}\")\n    return df.axes.values[-1]", "compilation_passed": true, "time": 0.0009579658508300781, "tests_passed": false, "error": "NameError"}
{"code": "if cols > 5:\n        raise ValueError(\"Maximum number of columns is 5.\")\n    df = pd.DataFrame({c: np.random.random(rows) for c in [\"A\", \"B\", \"C\", \"D\", \"E\"][:cols]})\n    ax = df.plot.bar(stacked=True)\n    ax.set_title(f\"Stacked bar chart for {cols} categories\")\n    return ax", "compilation_passed": true, "time": 0.04419684410095215, "tests_passed": true, "error": null}
{"code": "categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"Maximum number of categories is 5\")\n    df = pd.DataFrame(np.random.rand(rows, cols),\n                      index=[\"x\", \"y\", \"z\", \"q\", \"r\"])\n    df.set_index(\"x\")\n    df = df.T\n    df.columns = categories\n    ax = df.plot.bar()\n    return ax", "compilation_passed": true, "time": 0.00096893310546875, "tests_passed": false, "error": "KeyError"}
{"code": "try:\n        df = pd.DataFrame(\n            np.random.rand(rows, cols),\n            index=[\"A\", \"B\", \"C\", \"D\", \"E\"],\n            columns=[\n                \"A\",\n                \"B\",\n                \"C\",\n                \"D\",\n                \"E\",\n            ],\n        )\n        df.plot.bar()\n        return df.axes[0]\n    except ModuleNotFoundError:\n        print(\n            \"One of the required packages (pandas and/or numpy) is not installed. Please install them and try again.\"\n        )", "compilation_passed": true, "time": 0.013414859771728516, "tests_passed": false, "error": "AttributeError"}
{"code": "categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    data = np.random.randint(0, 5, size=(rows, cols))\n    df = pd.DataFrame(data, columns=categories)\n    ax = df.plot.bar()\n    return ax", "compilation_passed": true, "time": 0.013745784759521484, "tests_passed": false, "error": "ValueError"}
{"code": "categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if len(categories) < cols:\n        raise ValueError(\"Number of categories exceeds maximum\")\n    np.random.seed(0)\n    df = pd.DataFrame(np.random.randint(0, 50, size=(rows, cols)), index=range(1, rows+1))\n    df.plot.bar(stacked=True, subplots=False, logy=True, rot=0, title=\"Stacked bar chart\",\n                grid=True, legend=False)\n    ax = df.plot.bar(stacked=True, subplots=False, logy=True, rot=0, title=\"Stacked bar chart\",\n                     grid=True, legend=False)\n    return ax", "compilation_passed": true, "time": 0.08187580108642578, "tests_passed": true, "error": null}
{"code": "# Generate random data\n    rand_df = pd.DataFrame(np.random.random([rows, cols]), columns=[f\"A{i}\" for i in range(cols)])\n\n    # Create a list of categories to plot\n    categories = [f\"B{i}\" for i in range(cols)]\n\n    # If there are more categories than available columns, raise an error\n    if len(categories) > cols:\n        raise ValueError(\"Cannot plot more categories than the number of columns\")\n\n    # Plot the data using Matplotlib\n    ax = rand_df.plot.bar(category_name=\" \".join(categories), stacked=True)\n\n    # Return the Axes object\n    return ax", "compilation_passed": true, "time": 0.0059511661529541016, "tests_passed": false, "error": "AttributeError"}
{"code": "df = pd.DataFrame(np.random.rand(rows, cols), columns=list('ABCDE'))\n    ax = df.plot(kind='bar', stacked=True)\n    return ax", "compilation_passed": true, "time": 0.01290130615234375, "tests_passed": false, "error": "ValueError"}
{"code": "# raise ValueError if the number of columns exceeds the number of available categories\n    if cols > 5:\n        raise ValueError('Maximum number of categories exceeded.')\n\n    # generate a random DataFrame with rows and columns of specified lengths\n    df = pd.DataFrame(\n        {\n            'A': np.random.randint(low=0, high=10, size=(rows, cols)),\n            'B': np.random.randint(low=0, high=10, size=(rows, cols)),\n            'C': np.random.randint(low=0, high=10, size=(rows, cols)),\n            'D': np.random.randint(low=0, high=10, size=(rows, cols)),\n            'E': np.random.randint(low=0, high=10, size=(rows, cols)),\n        }\n    )\n\n    # generate the labels for the categories\n    categories = [str(i) for i in range(cols)]\n\n    # create the stacked bar chart with specified categories\n    ax", "compilation_passed": true, "time": 0.0011510848999023438, "tests_passed": false, "error": "ValueError"}
{"code": "x = np.random.uniform(low=0, high=1, size=(rows, cols))\n    y = np.random.uniform(low=0, high=1, size=(rows, cols))\n    cats = ['A', 'B', 'C', 'D', 'E']\n    df = pd.DataFrame(x, columns=cats)\n    ax = df.plot.bar(stacked=True, alpha=0.5, rot=45)\n    ax.set_ylabel(\"Probability\")\n    ax.set_title(\"Stacked bar chart\")\n    ax.set_xticks(range(1, 6), [\"1\", \"2\", \"3\", \"4\", \"5\"])\n    return ax", "compilation_passed": true, "time": 0.014250040054321289, "tests_passed": false, "error": "ValueError"}
{"code": "try:\n        data = pd.DataFrame(np.random.rand(rows, cols), columns=list(\"ABCDE\"[:cols]))\n        ax = data.plot.bar(stacked=True, color=[\"C0\", \"C1\", \"C2\", \"C3\", \"C4\"])\n    except Exception as err:\n        raise ValueError(\"Number of columns must be less than the number of available categories\") from err\n    return ax", "compilation_passed": true, "time": 0.04426097869873047, "tests_passed": true, "error": null}
{"code": "if rows < 1:\n        raise ValueError(\"Number of rows must be positive\")\n\n    if cols > len(list(\"ABCDE\")):\n        raise ValueError(\"Number of columns cannot exceed the number of available categories\")\n    # Generate random values\n    random_values = pd.DataFrame(np.random.randint(0, 5, (rows, cols)),\n                                 columns=[f\"C{c}\" for c in range(cols)],\n                                 index=[f\"R{r}\" for r in range(rows)])\n    # Set the values to the DataFrame\n    random_values[\"C0\"] = np.random.randint(0, 5, (rows,))\n    random_values[\"C1\"] = np.random.randint(0, 5, (rows,))\n    random_values[\"C2\"] = np.random.randint(0, 5, (rows,))\n    random_values[\"C3\"] = np.random.randint(0, 5, (rows,))\n    random_", "compilation_passed": true, "time": 0.0012509822845458984, "tests_passed": false, "error": "NameError"}
{"code": "# raise error if there are more columns than categories\n    if cols > 5:\n        raise ValueError(\"The number of columns is too large.\")\n    # set categories\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    # generate numerical data\n    df = pd.DataFrame(np.random.rand(rows, cols))\n    # sort numerical data by the row\n    df = df.sort_values(axis=0, ascending=True)\n    # plot\n    ax = df.cumsum().cumsum().plot(kind='bar')\n    ax.set_title('Bar chart of the cumulative sum')\n    return ax", "compilation_passed": true, "time": 0.0006799697875976562, "tests_passed": false, "error": "TypeError"}
{"code": "# Define available categories\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n    if cols > len(categories):\n        raise ValueError(\"Maximum number of columns is 5\")\n\n    # Create an empty DataFrame\n    df = pd.DataFrame(columns=categories)\n    for i in range(rows):\n        df.loc[i] = np.random.randint(0, 100, len(categories))\n\n    # Plot the DataFrame using the matplotlib.pyplot library\n    fig, ax = plt.subplots()\n    for i in range(cols):\n        ax.bar(categories, df[categories[i]])\n    return ax", "compilation_passed": true, "time": 0.01568007469177246, "tests_passed": false, "error": "ValueError"}
{"code": "x = np.random.randint(low=0, high=1000, size=(rows, cols))\n    df = pd.DataFrame(x)\n\n    categories = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n\n    # If there are more categories than columns, raise an error\n    if len(categories) > cols:\n        raise ValueError(\"There are too many categories\")\n\n    # Create the stacked bar chart\n    ax = df.stack().plot.barh(color=categories, rot=0)\n\n    return ax", "compilation_passed": true, "time": 0.00592494010925293, "tests_passed": false, "error": "ValueError"}
{"code": "# Generate random data using randn\n    rng = np.random.default_rng()\n    randn_data = rng.normal(size=(rows, cols))\n\n    # Create a dictionary mapping column indices to category names\n    columns = ['A', 'B', 'C', 'D', 'E']\n    col_dict = dict(zip(range(cols), columns))\n\n    # Create a DataFrame from the random data and column dictionary\n    df = pd.DataFrame(randn_data, columns=columns)\n\n    # Plot the stacked bar chart\n    ax = df.stack().plot.bar(stacked=True)\n    ax.set_ylabel('Value')\n    return ax", "compilation_passed": true, "time": 0.01873302459716797, "tests_passed": false, "error": "ValueError"}
{"code": "import numpy as np\n    import pandas as pd\n    if cols > 5:\n        raise ValueError(\"Maximum number of categories is 5.\")\n    data = pd.DataFrame(np.random.randint(1, 10, rows * cols).reshape(rows, cols), index=range(1, rows + 1),\n                        columns=[str(i + 1) for i in range(cols)])\n    data = data.stack()\n    ax = data.plot.bar(stacked=True, color=[\"green\"] * cols)\n    return ax", "compilation_passed": true, "time": 0.05792999267578125, "tests_passed": true, "error": null}
{"code": "available_cats = ['A', 'B', 'C', 'D', 'E']\n    cols = min(cols, len(available_cats))\n    cats_count = len(available_cats)\n    data = np.random.rand(rows, cols) * 100\n    data = pd.DataFrame(data, columns=available_cats)\n    data['total'] = data.sum(axis=1)\n    data.plot.barh(stacked=True)\n    return plt.gca()", "compilation_passed": true, "time": 0.01431894302368164, "tests_passed": true, "error": null}
{"code": "# Check if the number of columns is too high\n    if cols > 5:\n        raise ValueError(\"The number of categories exceeds the limit (max=5)\")\n\n    df = pd.DataFrame()\n    for i in range(rows):\n        for j in range(cols):\n            df.loc[i, j] = np.random.randint(1, 101)\n\n    df.set_index(pd.Index(\"ABCDE\"[:cols]), inplace=True)\n\n    ax = df.plot(kind=\"bar\")\n    return ax", "compilation_passed": true, "time": 0.0024840831756591797, "tests_passed": false, "error": "TypeError"}
{"code": "if cols > 5:\n        raise ValueError(\"Maximum number of categories is 5.\")\n    df = pd.DataFrame(np.random.randint(1, 10, (rows, cols)), index=range(rows))\n    ax = df.plot.bar(stacked=True)\n    return ax", "compilation_passed": true, "time": 0.04415631294250488, "tests_passed": true, "error": null}
{"code": "from pandas import DataFrame\n    df = DataFrame(np.random.randint(1, 10, (rows, cols)), columns=list(\"ABCDE\"))\n    return df.plot.bar(stacked=True)", "compilation_passed": true, "time": 0.013813257217407227, "tests_passed": false, "error": "ValueError"}
{"code": "# Create an empty DataFrame with the specified number of rows and columns\n    df = pd.DataFrame(0, index=range(rows), columns=range(cols))\n    df.columns = pd.MultiIndex.from_product([[\"A\", \"B\", \"C\", \"D\", \"E\"]],\n                                           names=[\"Cat\"])\n\n    # Generate random numerical data for each column (corresponding to the categories)\n    for i in range(cols):\n        df.iloc[:, i] = np.random.randint(0, 100, size=(rows,))\n    # Plot the data in a stacked bar chart for the specified categories\n    ax = df.plot.bar(stacked=True)\n\n    return ax", "compilation_passed": true, "time": 0.016208887100219727, "tests_passed": false, "error": "ValueError"}
{"code": "# TODO 1: Use pandas and generate a dataframe with random data.\n    # TODO 2: Use matplotlib to display the stacked bar chart.\n    pass", "compilation_passed": true, "time": 0.0006339550018310547, "tests_passed": false, "error": "AttributeError"}
{"code": "available_categories = ['A', 'B', 'C', 'D', 'E']\n    if cols > len(available_categories):\n        raise ValueError(\"Number of columns must be less than or equal to the number of available categories.\")\n\n    df = pd.DataFrame(\n        np.random.normal(100, 10, (rows, cols)),\n        columns=available_categories\n    )\n    ax = df.plot.barh()\n    return ax", "compilation_passed": true, "time": 0.01318812370300293, "tests_passed": false, "error": "ValueError"}
{"code": "# Validate the number of columns\n    if cols < 1 or cols > 5:\n        raise ValueError(f'Invalid number of columns: {cols}')\n\n    # Create a list of categories and generate random data for each category\n    categories = ['A', 'B', 'C', 'D', 'E']\n    data = pd.DataFrame({'category': [random.choice(categories) for _ in range(cols)],\n                         'value': [random.randint(0, 10) for _ in range(cols)]},\n                        index=pd.Series(data=np.arange(1, rows + 1, 1), name='ID'))\n\n    # Create a list of categories to use as the columns of the DataFrame\n    col_categories = [f'col{i}' for i in range(1, cols + 1)]\n\n    # Add a column for each category\n    data.columns = col_categories\n\n    # Display the data in a stacked bar chart\n    ax = data.plot(kind='bar', stacked=True)\n    ", "compilation_passed": true, "time": 0.0009000301361083984, "tests_passed": false, "error": "NameError"}
{"code": "import matplotlib.pyplot as plt\n    import numpy as np\n    import pandas as pd\n\n    # Check if the number of columns exceeds the number of available categories\n    if cols > 5:\n        raise ValueError('Number of columns must be less than or equal to 5')\n\n    # Generate a DataFrame with random numerical data\n    df = pd.DataFrame({cat: np.random.randint(0, 10, (rows, cols)) for cat in ['A', 'B', 'C', 'D', 'E']})\n    df.index = pd.date_range(pd.Timestamp('2013-01-01'), periods=rows)\n    df.columns = ['C1', 'C2', 'C3', 'C4', 'C5']\n\n    # Plot the DataFrame in a stacked bar chart with the specified categories\n    ax = df.groupby(level=0).plot.bar(stacked=True, color=['red', 'green', 'blue', 'yellow', 'black'])\n\n    return ax\n\n", "compilation_passed": true, "time": 0.0009708404541015625, "tests_passed": false, "error": "ValueError"}
{"code": "import matplotlib.pyplot as plt\n    import matplotlib\n\n    max_cols = cols\n    if max_cols > 5:\n        raise ValueError(\"Maximum number of categories exceeded\")\n\n    df = pd.DataFrame({\n        f'Category {i}': np.random.randint(1, 5, rows)\n        for i in range(1, max_cols + 1)\n    })\n\n    df['Total'] = df.sum(axis=1)\n\n    categories = df.columns[:-1]\n\n    ax = plt.figure().add_subplot(111)\n\n    ax.set_xticklabels(categories)\n    ax.set_ylabel(\"Total\")\n\n    for cat in categories:\n        ax.bar(cat, df[cat])\n\n    return ax", "compilation_passed": true, "time": 0.03647613525390625, "tests_passed": true, "error": null}
{"code": "# Initialize an empty DataFrame\n    df = pd.DataFrame()\n\n    # Generate random data for each column\n    for i in range(cols):\n        col_name = chr(ord('A') + i)\n        df[col_name] = np.random.randint(0, 100, size=(rows,))\n\n    # Visualize the data with a stacked bar chart\n    ax = df.plot(kind='bar', stacked=True)\n\n    # Return the Axes object\n    return ax", "compilation_passed": true, "time": 0.30242204666137695, "tests_passed": true, "error": null}
