{"code": "# Check the directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n\n    # Extract all file paths matching the file_pattern\n    file_paths = glob.glob(f'{directory}/*.txt', recursive=True)\n\n    # Check if any files were found\n    if not file_paths:\n        raise ValueError('No files matching the pattern were found.')\n\n    # Create a list of file paths as strings, in natural order\n    sorted_file_paths = [file_path for file_path in natsort.natsorted(file_paths)]\n\n    # Create an empty list to store all the extracted numeric data\n    numeric_data = []\n\n    # Extract the numeric data from each file and append it to the list\n    for file_path in sorted_file_paths:\n        # Read the file contents\n        file_data = open(file_path, 'r').read()\n        # Search for the numeric data using the regular expression\n        numeric_matches = re.findall(regex, file", "compilation_passed": false, "time": 0.00023508071899414062, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found: {}'.format(directory))\n\n    files = glob.glob(os.path.join(directory, file_pattern))\n\n    if not files:\n        raise ValueError('No files matching the pattern: {}'.format(file_pattern))\n\n    files.sort(key=natsort.nsorted)  # Sort files by name\n\n    # Read each file, find numeric data, and append to a list\n    numeric_data_list = []\n    for file in files:\n        with open(file, 'r') as f:\n            numeric_data = extract_numeric_data(f, regex)\n            numeric_data_list.append(numeric_data)\n\n    # Compile numeric data into a pandas DataFrame\n    df = pd.DataFrame({'Filename': files, 'Numeric Data': numeric_data_list})\n\n    return df", "compilation_passed": true, "time": 0.0012249946594238281, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Check if directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} not found.\")\n\n    # Get a list of files matching the pattern\n    files = glob.glob(os.path.join(directory, file_pattern))\n\n    # Check if any files matched the pattern\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern {file_pattern}.\")\n\n    # Sort files alphabetically\n    files.sort()\n\n    # Create a DataFrame of the files and their data\n    file_names = []\n    numeric_data = []\n    for file in files:\n        with open(file, 'r') as f:\n            # Get the numeric data from the file\n            match = re.findall(regex, f.read())\n\n            # Check if any data was extracted from the file\n            if match:\n                file_names.append(os.path.basename(file))\n                numeric_data.append(match)\n            else:\n                file_names.append(os.", "compilation_passed": false, "time": 0.0002460479736328125, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Create a list of matching files in the directory\n    matching_files = glob.glob(os.path.join(directory, file_pattern))\n    if len(matching_files) == 0:\n        raise ValueError(f'No matching files found for the pattern {file_pattern}.')\n\n    # Extract numeric data from each file and store them in a list\n    numeric_data = []\n    for matching_file in matching_files:\n        with open(matching_file, 'r') as f:\n            file_data = f.read()\n            numeric_data.append(re.findall(regex, file_data))\n\n    # Create a Pandas DataFrame with two columns: 'Filename' and 'Numeric Data'\n    df = pd.DataFrame({\n        'Filename': os.path.basename(matching_files),\n        'Numeric Data': numeric_data\n    })\n\n    return df", "compilation_passed": true, "time": 0.001123189926147461, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "all_text_files = glob.glob(os.path.join(directory, file_pattern))\n    if not all_text_files:\n        raise ValueError('No matching files found')\n\n    df = pd.DataFrame(columns=['Filename', 'Numeric Data'])\n\n    for f in natsort.natsorted(all_text_files):\n        with open(f) as file:\n            contents = file.read()\n        if regex:\n            matches = re.findall(regex, contents)\n            numeric_data = [int(m) for m in matches]\n            df = df.append({'Filename': f, 'Numeric Data': numeric_data}, ignore_index=True)\n        else:\n            df = df.append({'Filename': f, 'Numeric Data': contents.split()}, ignore_index=True)\n\n    return df", "compilation_passed": true, "time": 0.0011610984802246094, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found: {}'.format(directory))\n\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError('No files found matching the pattern: {}'.format(file_pattern))\n\n    files = sorted(files, key=natsort.nsorted)\n    df = pd.DataFrame(index=pd.Index(files), columns=['Filename', 'Numeric Data'])\n    for file_index, file_path in df.index:\n        with open(file_path, 'r') as f:\n            for line in f:\n                matches = re.findall(regex, line)\n                if matches:\n                    df.loc[file_index, 'Numeric Data'].append(matches)\n\n    return df", "compilation_passed": true, "time": 0.0011341571807861328, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "files = glob.glob(os.path.join(directory, file_pattern))\n    files.sort(key=lambda x: natsort.nsorted(os.path.basename(x)))\n    if len(files) == 0:\n        raise FileNotFoundError(f'No files matching {file_pattern} found in directory {directory}')\n    data_list = []\n    for file_name in files:\n        data_list.append([file_name, pd.Series(map(int, re.findall(regex, open(file_name).read())))])\n    return pd.DataFrame(data_list, columns=['Filename', 'Numeric Data'])", "compilation_passed": true, "time": 0.001094818115234375, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Check the directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n\n    # Combine the glob pattern with the regex\n    pattern = os.path.join(directory, file_pattern)\n\n    # Find all text files matching the pattern\n    files = glob.glob(pattern)\n    if not files:\n        raise ValueError(f\"No files matching pattern {pattern} were found in {directory}.\")\n\n    # Extract the numeric data from each file using regular expressions\n    data = []\n    for file in natsort.natsorted(files):\n        with open(file) as f:\n            numeric_data = re.findall(regex, f.read())\n        data.append([file, numeric_data])\n\n    # Compile the data into a pandas DataFrame\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n\n    return df", "compilation_passed": true, "time": 0.0011179447174072266, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist\")\n\n    files = glob.glob(os.path.join(directory, file_pattern))\n    files.sort(key=natsort.nsorted)\n    if not files:\n        raise ValueError(\"No files matching the pattern found\")\n\n    numeric_data = []\n    for file in files:\n        with open(file, 'r') as f:\n            numeric_data_list = extract_numeric_data(f.read())\n            numeric_data.append(numeric_data_list)\n\n    df = pd.DataFrame(numeric_data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0011053085327148438, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "df = pd.DataFrame()\n    for filename in glob.glob(os.path.join(directory, file_pattern)):\n        file_data = []\n        try:\n            with open(filename, 'r') as file:\n                for line in file:\n                    match = re.search(regex, line)\n                    if match:\n                        file_data.append(match.group(1))\n        except (FileNotFoundError, PermissionError):\n            continue\n        else:\n            df = df.append({'Filename': filename, 'Numeric Data': file_data}, ignore_index=True)\n    return df", "compilation_passed": true, "time": 0.0010790824890136719, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "files = glob.glob(os.path.join(directory, file_pattern))\n\n    if not files:\n        raise ValueError('No files matching the pattern')\n\n    filenames = []\n    numeric_data = []\n\n    for file in files:\n        with open(file, 'r') as f:\n            lines = f.readlines()\n            numeric = False\n            for line in lines:\n                line = line.strip()\n                if not line or line.startswith('#'):\n                    continue\n                numeric_data_part = []\n                for word in line.split(','):\n                    if ' ' in word:\n                        word = word.strip()\n                    if word.lower().startswith('numeric'):\n                        numeric = True\n                    else:\n                        try:\n                            if numeric:\n                                numeric_data_part.append(int(word))\n                            else:\n                                numeric_data_part.append(word)\n                        except ValueError:\n                            continue\n                if numeric_data_part:\n                    filenames", "compilation_passed": true, "time": 0.001293182373046875, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found: ' + directory)\n\n    pattern = file_pattern\n    files = glob.glob(os.path.join(directory, pattern))\n    if len(files) == 0:\n        raise ValueError('No files found matching pattern ' + pattern)\n\n    filenames = [os.path.basename(file) for file in files]\n    data = []\n\n    # Extract numeric data from all text files matching a given pattern\n    for file in natsort.natsorted(files):\n        with open(file) as f:\n            lines = f.readlines()\n            data.extend(list(map(int, re.findall(regex, ''.join(lines)))))\n\n    df = pd.DataFrame({'Filename': filenames, 'Numeric Data': data})\n    return df", "compilation_passed": true, "time": 0.0011777877807617188, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if not os.path.exists(directory):\n        raise FileNotFoundError(directory, \"does not exist.\")\n\n    filenames = glob.glob(directory + file_pattern)\n    if not filenames:\n        raise ValueError(\"No files matching the pattern\", directory + file_pattern, \"were found.\")\n    filenames = natsort.natsorted(filenames)\n\n    numeric_data = []\n    for filepath in filenames:\n        with open(filepath) as f:\n            lines = f.readlines()\n            numeric_data.append(\n                [\n                    filepath,\n                    [int(re.findall(regex, line)[0]) if re.findall(regex, line) else \"\" for line in lines],\n                ]\n            )\n    df = pd.DataFrame(numeric_data, columns=[\"Filename\", \"Numeric Data\"])\n    return df", "compilation_passed": true, "time": 0.0012447834014892578, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "files = glob.glob(os.path.join(directory, file_pattern))\n\n    if len(files) == 0:\n        raise ValueError('No files matching the pattern found.')\n\n    data = []\n\n    for file in files:\n        try:\n            with open(file, 'r') as f:\n                lines = f.readlines()\n        except FileNotFoundError:\n            data.append([file, []])\n            continue\n\n        numeric_data = []\n\n        for line in lines:\n            match = re.search(regex, line.strip())\n\n            if match:\n                numeric_data.append(int(match.group(1)))\n\n        data.append([file, numeric_data])\n\n    return pd.DataFrame(data, columns=['Filename', 'Numeric Data'])", "compilation_passed": true, "time": 0.0011699199676513672, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise FileNotFoundError(f\"No files matching pattern {file_pattern} in the directory {directory}.\")\n\n    # Extract the numeric data from the files, apply regular expressions, and combine it into a DataFrame\n    data = [(filename, re.findall(regex, open(filename).read()) or []) for filename in natsort.natsorted(files)]\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.001107931137084961, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if not os.path.isdir(directory):\n        raise FileNotFoundError('Invalid directory path. Please provide a valid directory path.')\n\n    file_paths = glob.glob(f'{directory}{file_pattern}')\n    if len(file_paths) == 0:\n        raise ValueError(f\"No files found matching the pattern '{file_pattern}'\")\n\n    file_paths.sort(key=natsort.nsorted)\n\n    df = pd.DataFrame(columns=['Filename', 'Numeric Data'])\n    for file_path in file_paths:\n        with open(file_path, 'r') as file:\n            numeric_data = re.findall(regex, file.read())\n            df.loc[len(df.index)] = [os.path.basename(file_path), numeric_data]\n\n    return df", "compilation_passed": true, "time": 0.0011301040649414062, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Create a DataFrame with columns 'Filename' and 'Numeric Data'.\n    df = pd.DataFrame(columns=['Filename', 'Numeric Data'])\n\n    # Check if the specified directory exists.\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory {directory} not found\")\n\n    # Check if any files matching the pattern are found.\n    file_list = glob.glob(os.path.join(directory, file_pattern))\n    if not file_list:\n        raise ValueError(f\"No files matching pattern {file_pattern} found in {directory}.\")\n\n    # Iterate over the files and extract the numeric data.\n    for file in natsort.natsorted(file_list):\n        with open(file, 'r', encoding='utf8') as f:\n            lines = f.readlines()\n            data = [int(re.findall(regex, line)[0]) for line in lines if re.findall(regex, line)]\n\n        # Add the file and numeric data to the DataFrame.\n        ", "compilation_passed": true, "time": 0.001127004623413086, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "result = []\n\n    files = glob.glob(os.path.join(directory, file_pattern))\n    files.sort(key=os.path.getmtime)\n    if len(files) == 0:\n        raise ValueError(\"No files matching the pattern found in the given directory\")\n    else:\n        for filename in files:\n            with open(filename, 'r') as f:\n                content = f.read()\n                numeric_data = re.findall(regex, content)\n                result.append([filename, numeric_data])\n\n    df = pd.DataFrame(result, columns=[\"Filename\", \"Numeric Data\"])\n    return df", "compilation_passed": true, "time": 0.0010960102081298828, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "file_pattern = f\"{directory}/**/{file_pattern}\"\n\n    file_list = glob.glob(file_pattern, recursive=True)\n    if file_list == []:\n        raise FileNotFoundError('There are no files that match the given file pattern')\n\n    file_list = sorted(file_list, key=os.path.getmtime, reverse=True)\n\n    data = []\n    for filename in file_list:\n        with open(filename, 'r', encoding='utf8') as f:\n            lines = f.readlines()\n            lines = [line.strip() for line in lines]\n            lines = [line.split(',') for line in lines]\n            lines = [line for line in lines if line]\n            lines = [line for line in lines if line[0].isdigit()]\n            data.append([filename, lines])\n\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    df['Numeric Data'] = df['Numeric Data'].apply(lambda x: [int(y) for y in x", "compilation_passed": false, "time": 0.0002961158752441406, "tests_passed": false, "error": "SyntaxError"}
{"code": "try:\n        file_list = glob.glob(os.path.join(directory, file_pattern))\n    except FileNotFoundError as e:\n        raise FileNotFoundError(e)\n    if not file_list:\n        raise ValueError(\"No files matching the pattern are found\")\n\n    data = []\n    for file_path in file_list:\n        with open(file_path) as f:\n            file_data = f.readlines()\n            for row in file_data:\n                matches = re.findall(regex, row)\n                if matches:\n                    data.append([os.path.basename(file_path), matches])\n\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    df['Filename'] = df['Filename'].apply(lambda x: os.path.splitext(x)[0])\n\n    return df", "compilation_passed": true, "time": 0.0011467933654785156, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Create a pandas DataFrame to hold the extracted data\n    df = pd.DataFrame()\n\n    # Create a list of absolute paths for all files matching the given pattern in the directory\n    files = [f for f in glob.glob(os.path.join(directory, file_pattern))]\n\n    if not files:\n        raise ValueError(\"No files matching the pattern {pattern} were found in {directory}.\".format(pattern=file_pattern, directory=directory))\n\n    # Loop over the files and extract numeric data\n    for f in files:\n        print(f)\n        filename, _ = os.path.splitext(f)\n        with open(f) as file:\n            for line in file:\n                if re.search(regex, line) is not None:\n                    try:\n                        numeric_data = [int(n) for n in re.findall(regex, line)]\n                    except ValueError as e:\n                        raise ValueError(f\"Failed to extract numeric data from file {filename}: {line}. {e}\")\n                    df.loc[len(df", "compilation_passed": false, "time": 0.00025773048400878906, "tests_passed": false, "error": "SyntaxError"}
{"code": "file_list = glob.glob(f'{directory}{file_pattern}')\n    if len(file_list) == 0:\n        raise FileNotFoundError\n\n    data_df = pd.DataFrame({'Filename': [], 'Numeric Data': []})\n    for filename in file_list:\n        with open(filename, 'r') as file:\n            numeric_data = re.findall(regex, file.read())\n            if numeric_data:\n                numeric_data = [int(item) for item in numeric_data]\n                data_df = pd.concat([data_df,\n                                    pd.DataFrame({'Filename': [filename], 'Numeric Data': [numeric_data]})],\n                                   ignore_index=True)\n\n    data_df.sort_values('Filename', inplace=True)\n    return data_df", "compilation_passed": true, "time": 0.0011377334594726562, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Check the existence of the directory\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(\"Directory not found: {}\".format(directory))\n\n    # Collect all matching files in a list\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(\"No matching files found\")\n\n    # Read the files and extract numeric data\n    data = []\n    for file in sorted(files):\n        with open(file, 'r') as f:\n            # print(f.name)\n            lines = f.readlines()\n            # print(lines)\n            line_numbers = []\n            line_data = []\n            for line_index, line in enumerate(lines):\n                m = re.findall(regex, line)\n                if m:\n                    line_numbers.append(line_index)\n                    line_data.append(m)\n            df = pd.DataFrame({'Filename': [file],\n                               'Numeric Data': line_data})\n            data.append(df", "compilation_passed": false, "time": 0.00024700164794921875, "tests_passed": false, "error": "SyntaxError"}
{"code": "files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise FileNotFoundError('No files matching pattern {} found in {}'.format(file_pattern, directory))\n\n    for file in natsort.natsorted(files):\n        if not re.search(regex, file):\n            raise ValueError(\"Regex pattern {} didn't match {}\".format(regex, file))\n\n    data = []\n    for file in natsort.natsorted(files):\n        with open(file) as f:\n            lines = f.readlines()\n            numeric_data = [int(x) for x in lines if x.isdigit()]\n            data.append([os.path.basename(file), numeric_data])\n\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0011637210845947266, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Check for the existence of the given directory\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found!\")\n\n    # Create an empty DataFrame to store data\n    df = pd.DataFrame()\n\n    # Iterate over all files in the directory\n    for root, dirs, files in os.walk(directory, topdown=False):\n        for pattern in [file_pattern]:\n            # Glob the files matching the pattern and create a list of files\n            file_list = glob.glob(os.path.join(root, pattern))\n            if not file_list:\n                continue\n\n            # Iterate over each file\n            for file in file_list:\n                # Extract data from the file using regex and remove non-numeric characters\n                try:\n                    # Load the data from the file into a string using re.sub()\n                    with open(file) as f:\n                        data = re.sub(regex, ' ', f.read()).strip()\n                    if data == '':\n                        continue\n\n                    # Split the data into a", "compilation_passed": false, "time": 0.00020313262939453125, "tests_passed": false, "error": "SyntaxError"}
{"code": "data = []\n    # print(f'dir: {directory}')\n    # print(f'file pattern: {file_pattern}')\n    # print(f'regex: {regex}')\n    # print(f'data: {data}')\n\n    # Check if the specified directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'Directory {directory} does not exist')\n\n    # Find all files matching the file pattern and sort them by size\n    files = natsort.natsorted(glob.glob(directory+file_pattern), key=os.path.getsize)\n\n    # For each file, extract data matching the pattern and append it to the list of data\n    for filename in files:\n        with open(filename, 'r') as f:\n            # print(f'filename: {filename}')\n            data.append([filename, re.findall(regex, f.read())])\n\n    # Create a pandas DataFrame from the list of data\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n", "compilation_passed": true, "time": 0.0010929107666015625, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "files = glob.glob(os.path.join(directory, file_pattern))\n\n    if not files:\n        raise ValueError('No files matching the pattern: ' + file_pattern)\n\n    with open(files[0]) as f:\n        content = f.read()\n        numeric_data = re.findall(regex, content)\n        numeric_data = [int(data) for data in numeric_data]\n        return pd.DataFrame(columns=['Filename', 'Numeric Data'],\n                            index=natsort.natsorted(files)[0],\n                            data=[[os.path.basename(f), numeric_data]]\n                            )", "compilation_passed": true, "time": 0.0011248588562011719, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "try:\n        filenames = glob.glob(os.path.join(directory, file_pattern))\n    except FileNotFoundError as err:\n        print('An error occurred:', err)\n    filenames = natsort.natsorted(filenames)\n    dataframes = []\n    for filename in filenames:\n        dataframe = pd.read_csv(filename, engine='python')\n        dataframes.append(dataframe)\n    return pd.concat(dataframes).reset_index(drop=True)", "compilation_passed": true, "time": 0.0010519027709960938, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "df = pd.DataFrame()\n    for file in natsort.natsorted(glob.glob(os.path.join(directory, file_pattern))):\n        df = df.append(pd.read_csv(file, sep=\"\\n\", engine=\"python\", index_col=0))\n        df.columns = ['Filename', 'Numeric Data']\n    return df", "compilation_passed": true, "time": 0.001100778579711914, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Check if the specified directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n\n    # Check if the specified file pattern matches any files\n    files = glob.glob(f\"{directory}/{file_pattern}\")\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n\n    # Extract the numeric data from each file and create a Pandas DataFrame\n    data = []\n    for filename in sorted(files, key=natsort.nsorted):\n        with open(filename) as f:\n            matches = re.findall(regex, f.read())\n            if matches:\n                data.append((filename, matches))\n\n    # Convert the extracted data into a Pandas DataFrame and return it\n    return pd.DataFrame(data, columns=['Filename', 'Numeric Data'])", "compilation_passed": true, "time": 0.0011119842529296875, "tests_passed": false, "error": "FileNotFoundError"}
