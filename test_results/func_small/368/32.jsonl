{"code": "# Make sure the directories exist\n    os.makedirs(src_dir, exist_ok=True)\n    os.makedirs(dest_dir, exist_ok=True)\n\n    # Get a list of all files in the source directory\n    all_files = []\n    for dirpath, dirnames, filenames in os.walk(src_dir):\n        all_files.extend(filenames)\n\n    # Shuffle the list of files\n    random.seed(seed)\n    random.shuffle(all_files)\n\n    # Move the file to the destination directory\n    src_file = os.path.join(dirpath, all_files[0])\n    dst_file = os.path.join(dest_dir, all_files[0])\n    shutil.move(src_file, dst_file)\n\n    return all_files[0]", "compilation_passed": true, "time": 0.01601719856262207, "tests_passed": false, "error": "IndexError"}
{"code": "assert os.path.exists(src_dir), f\"{src_dir} doesn't exist\"\n    assert os.path.exists(dest_dir), f\"{dest_dir} doesn't exist\"\n\n    random_file = random.choice(os.listdir(src_dir))\n    random_path = os.path.join(src_dir, random_file)\n    shutil.move(random_path, os.path.join(dest_dir, random_file))\n    return random_file", "compilation_passed": true, "time": 0.014268875122070312, "tests_passed": false, "error": "IndexError"}
{"code": "# Generate a random integer within the range [0, len(files)] to select a file from files\n    files = os.listdir(src_dir)\n    random.seed(seed)\n    file_index = random.randrange(0, len(files))\n\n    # Move the selected file to the destination directory\n    src_path = os.path.join(src_dir, files[file_index])\n    dest_path = os.path.join(dest_dir, files[file_index])\n    shutil.move(src_path, dest_path)\n\n    return files[file_index]", "compilation_passed": true, "time": 0.01416015625, "tests_passed": false, "error": "ValueError"}
{"code": "files = [file for file in os.listdir(src_dir) if os.path.isfile(os.path.join(src_dir, file))]\n    if len(files) > 0:\n        rand_idx = random.randrange(0, len(files))\n        src_file = os.path.join(src_dir, files[rand_idx])\n        shutil.move(src_file, os.path.join(dest_dir, os.path.basename(src_file)))\n        return os.path.basename(src_file)\n    else:\n        return \"\"", "compilation_passed": true, "time": 0.015518903732299805, "tests_passed": true, "error": null}
{"code": "files = os.listdir(src_dir)\n    random.seed(seed)\n    random.shuffle(files)\n    file_to_move = os.path.join(src_dir, files[0])\n    shutil.move(file_to_move, dest_dir)\n    return os.path.basename(file_to_move)", "compilation_passed": true, "time": 0.01373600959777832, "tests_passed": false, "error": "IndexError"}
{"code": "# Random number generator for selecting a file to move.\n    random.seed(seed)\n    files = os.listdir(src_dir)\n    file_to_move = random.choice(files)\n    shutil.move(os.path.join(src_dir, file_to_move), os.path.join(dest_dir, file_to_move))\n    return file_to_move", "compilation_passed": true, "time": 0.01518702507019043, "tests_passed": false, "error": "IndexError"}
{"code": "random.seed(seed)\n\n    with os.scandir(src_dir) as entries:\n        for entry in entries:\n            if entry.is_file():\n                if entry.name.startswith(\"file\") and (not entry.name.endswith(\".txt\")):\n                    shutil.move(entry.path, dest_dir)\n                    return entry.name\n\n    return None", "compilation_passed": true, "time": 0.0055429935455322266, "tests_passed": true, "error": null}
{"code": "src_dir = os.path.abspath(src_dir)\n    dest_dir = os.path.abspath(dest_dir)\n\n    if not os.path.isdir(src_dir):\n        raise FileNotFoundError(f\"Invalid source directory: {src_dir}\")\n\n    if not os.path.isdir(dest_dir):\n        os.makedirs(dest_dir)\n\n    files = os.listdir(src_dir)\n    random.seed(seed)\n    file = random.choice(files)\n\n    file_path = os.path.join(src_dir, file)\n    shutil.move(file_path, os.path.join(dest_dir, file))\n\n    return file", "compilation_passed": true, "time": 0.01405787467956543, "tests_passed": false, "error": "IndexError"}
{"code": "random.seed(seed)\n    file_names = os.listdir(src_dir)\n    if not file_names:\n        return None\n    file_name = random.choice(file_names)\n    src_path = os.path.join(src_dir, file_name)\n    shutil.move(src_path, os.path.join(dest_dir, file_name))\n    return file_name", "compilation_passed": true, "time": 0.015214681625366211, "tests_passed": true, "error": null}
{"code": "if not os.path.isdir(src_dir):\n        raise ValueError(\"src_dir must be a directory\")\n    if not os.path.isdir(dest_dir):\n        raise ValueError(\"dest_dir must be a directory\")\n    if not seed:\n        raise ValueError(\"seed cannot be empty\")\n\n    random.seed(seed)\n    src_files = os.listdir(src_dir)\n    if src_files:\n        file_to_move = random.choice(src_files)\n        source_file_path = os.path.join(src_dir, file_to_move)\n        dest_file_path = os.path.join(dest_dir, file_to_move)\n        shutil.move(source_file_path, dest_file_path)\n        return file_to_move\n    else:\n        raise FileNotFoundError(\"src_dir must contain at least one file\")", "compilation_passed": true, "time": 0.022490739822387695, "tests_passed": true, "error": null}
{"code": "try:\n        file_names = os.listdir(src_dir)\n        random.seed(seed)\n        filename = random.choice(file_names)\n        shutil.move(os.path.join(src_dir, filename), os.path.join(dest_dir, filename))\n        return filename\n    except Exception as e:\n        raise e", "compilation_passed": true, "time": 0.015304088592529297, "tests_passed": false, "error": "IndexError"}
{"code": "files = os.listdir(src_dir)\n    random.seed(seed)\n    file_to_move = random.choice(files)\n    os.rename(os.path.join(src_dir, file_to_move), os.path.join(dest_dir, file_to_move))\n    return file_to_move", "compilation_passed": true, "time": 0.013813018798828125, "tests_passed": false, "error": "IndexError"}
{"code": "if not os.path.isdir(src_dir):\n        raise Exception(f\"'{src_dir}' is not a directory\")\n\n    # Validate the destination directory.\n    if not os.path.exists(dest_dir):\n        os.makedirs(dest_dir)\n    elif not os.path.isdir(dest_dir):\n        raise Exception(f\"'{dest_dir}' is not a directory\")\n\n    # Get a list of files in the source directory.\n    files = os.listdir(src_dir)\n\n    if not files:\n        raise Exception(f\"No files found in '{src_dir}'\")\n\n    # Generate a random file index.\n    index = random.randint(0, len(files) - 1)\n\n    # Select a random file from the list.\n    file = os.path.join(src_dir, files[index])\n\n    # Move the file to the destination directory.\n    shutil.move(file, dest_dir)\n\n    # Get the name of the moved file.\n    return os.path.", "compilation_passed": false, "time": 0.00023484230041503906, "tests_passed": false, "error": "SyntaxError"}
{"code": "files = os.listdir(src_dir)\n    random.seed(seed)\n    random.shuffle(files)\n    if len(files) == 0:\n        raise ValueError(\"The source directory is empty\")\n    file_to_move = files[0]\n    src_path = os.path.join(src_dir, file_to_move)\n    dest_path = os.path.join(dest_dir, file_to_move)\n    shutil.move(src_path, dest_path)\n    return file_to_move", "compilation_passed": true, "time": 0.014994382858276367, "tests_passed": false, "error": "ValueError"}
{"code": "# Ensure the source directory exists and can be traversed\n    if not os.path.exists(src_dir):\n        raise FileNotFoundError(f\"Source directory {src_dir} does not exist.\")\n    if not os.path.isdir(src_dir):\n        raise NotADirectoryError(f\"{src_dir} is not a directory.\")\n\n    # Ensure the destination directory exists and can be traversed\n    if not os.path.exists(dest_dir):\n        os.makedirs(dest_dir)\n    if not os.path.isdir(dest_dir):\n        raise NotADirectoryError(f\"{dest_dir} is not a directory.\")\n\n    # Generate a random number within the range of files in the directory\n    random_file_num = random.randrange(0, len(os.listdir(src_dir)))\n\n    # Get the full path to the selected file\n    source_full_path = os.path.join(src_dir, os.listdir(src_dir)[random_file_num])\n\n    # Move the", "compilation_passed": true, "time": 0.005587100982666016, "tests_passed": true, "error": null}
{"code": "files = os.listdir(src_dir)\n    random.seed(seed)\n    file = random.choice(files)\n    shutil.move(os.path.join(src_dir, file), os.path.join(dest_dir, file))\n    return file", "compilation_passed": true, "time": 0.013799190521240234, "tests_passed": false, "error": "IndexError"}
{"code": "files = [f for f in os.listdir(src_dir) if f.endswith(\".txt\")]\n    if not files:\n        return None\n\n    random.seed(seed)\n    return random.choice(files)", "compilation_passed": true, "time": 0.005419015884399414, "tests_passed": true, "error": null}
{"code": "# os import required for checking file existence\n    if not os.path.isdir(src_dir):\n        raise TypeError(\"src_dir is not a directory!\")\n    if not os.path.isdir(dest_dir):\n        raise TypeError(\"dest_dir is not a directory!\")\n\n    file_list = []\n    for root, dirs, files in os.walk(src_dir):\n        for file_name in files:\n            file_list.append(file_name)\n\n    if len(file_list) == 0:\n        raise ValueError(\"The source directory is empty!\")\n\n    file_to_move = random.choice(file_list)\n    full_src_path = os.path.join(src_dir, file_to_move)\n    full_dest_path = os.path.join(dest_dir, file_to_move)\n    shutil.move(full_src_path, full_dest_path)\n    return file_to_move", "compilation_passed": true, "time": 0.015271186828613281, "tests_passed": false, "error": "ValueError"}
{"code": "os.makedirs(dest_dir, exist_ok=True)\n    src_files = [f for f in os.listdir(src_dir) if os.path.isfile(os.path.join(src_dir, f))]\n    file = random.choice(src_files)\n    shutil.move(os.path.join(src_dir, file), os.path.join(dest_dir, file))\n    return file", "compilation_passed": true, "time": 0.013470888137817383, "tests_passed": false, "error": "IndexError"}
{"code": "files = []\n    for root, dirnames, filenames in os.walk(src_dir):\n        for filename in filenames:\n            files.append(os.path.join(root, filename))\n    shuffle(files, random=random.Random(seed))\n    return os.path.basename(files[0])", "compilation_passed": true, "time": 0.005239009857177734, "tests_passed": false, "error": "NameError"}
{"code": "files_list = os.listdir(src_dir)\n    random_file = random.choice(files_list)\n    shutil.move(os.path.join(src_dir, random_file), os.path.join(dest_dir, random_file))\n    return random_file", "compilation_passed": true, "time": 0.014722108840942383, "tests_passed": false, "error": "IndexError"}
{"code": "# Create a list of files in the src_dir\n    file_list = os.listdir(src_dir)\n\n    # If there are no files, return None\n    if len(file_list) == 0:\n        return None\n\n    # Select a random file from the list\n    random.seed(seed)\n    rand_index = random.randint(0, len(file_list)-1)\n    selected_file = file_list[rand_index]\n    source = os.path.join(src_dir, selected_file)\n    dest = os.path.join(dest_dir, selected_file)\n\n    # Move the file to the destination directory\n    shutil.move(source, dest)\n\n    # Return the name of the moved file\n    return selected_file", "compilation_passed": true, "time": 0.013241052627563477, "tests_passed": true, "error": null}
{"code": "assert os.path.isdir(src_dir), f\"{src_dir} is not a directory\"\n    assert os.path.isdir(dest_dir), f\"{dest_dir} is not a directory\"\n    random.seed(seed)\n    filenames = os.listdir(src_dir)\n    if filenames:\n        file = random.choice(filenames)\n        src_path = os.path.join(src_dir, file)\n        dst_path = os.path.join(dest_dir, file)\n        shutil.move(src_path, dst_path)\n        return file\n    else:\n        raise FileNotFoundError(\"No files found in the directory\")", "compilation_passed": true, "time": 0.022475004196166992, "tests_passed": true, "error": null}
{"code": "src_dir_list = []\n    for root, dirs, files in os.walk(src_dir):\n        for f in files:\n            src_dir_list.append(os.path.join(root, f))\n\n    dest_dir_list = []\n    for root, dirs, files in os.walk(dest_dir):\n        for f in files:\n            dest_dir_list.append(os.path.join(root, f))\n\n    rand_file = random.choice(src_dir_list)\n    shutil.move(rand_file, dest_dir)\n\n    return os.path.basename(rand_file)", "compilation_passed": true, "time": 0.013481855392456055, "tests_passed": false, "error": "IndexError"}
{"code": "files = [f for f in os.listdir(src_dir) if f.endswith(\".txt\")]\n    file_name = random.choice(files)\n    src_path = os.path.join(src_dir, file_name)\n    dst_path = os.path.join(dest_dir, file_name)\n    shutil.move(src_path, dst_path)\n    return file_name", "compilation_passed": true, "time": 0.014801263809204102, "tests_passed": false, "error": "IndexError"}
{"code": "random.seed(seed)\n    file_list = os.listdir(src_dir)\n    if not file_list:\n        return \"\"\n\n    random_file = random.choice(file_list)\n    random_file_path = os.path.join(src_dir, random_file)\n    os.rename(random_file_path, os.path.join(dest_dir, random_file))\n    return random_file", "compilation_passed": true, "time": 0.013334989547729492, "tests_passed": true, "error": null}
{"code": "random.seed(seed)\n    files = os.listdir(src_dir)\n    if not files:\n        return None\n    file = random.choice(files)\n    full_file_path = os.path.join(src_dir, file)\n    shutil.move(full_file_path, dest_dir)", "compilation_passed": true, "time": 0.005310773849487305, "tests_passed": true, "error": null}
{"code": "if not os.path.isdir(src_dir):\n        raise FileNotFoundError(f\"The directory {src_dir} does not exist\")\n    if not os.path.isdir(dest_dir):\n        raise FileNotFoundError(f\"The directory {dest_dir} does not exist\")\n    filenames = os.listdir(src_dir)\n    if not filenames:\n        raise FileNotFoundError(f\"No files found in {src_dir}\")\n    if len(filenames) == 1:\n        shutil.move(os.path.join(src_dir, filenames[0]), dest_dir)\n        return filenames[0]\n\n    random_index = random.randint(0, len(filenames) - 1)\n    file_to_move = os.path.join(src_dir, filenames[random_index])\n    os.replace(file_to_move, dest_dir)\n    return os.path.basename(file_to_move)", "compilation_passed": true, "time": 0.0052318572998046875, "tests_passed": false, "error": "IsADirectoryError"}
{"code": "# TODO: Implement the task_func function\n    #       to move a random file from the source directory\n    #       to the specified destination directory\n    #       with the given seed\n    #       and return the name of the moved file\n\n    # Example:\n    # This example assumes the source directory contains two files,\n    # 'file1.txt' and 'file2.txt'.\n    # The task_func will move 'file2.txt' to 'dest_dir'.\n\n    # TODO: Implement the task_func function\n\n    # Example:\n    # This example assumes the source directory contains two files,\n    # 'file1.txt' and 'file2.txt'.\n    # The task_func will move 'file2.txt' to 'dest_dir'.\n\n    files = []\n    for root, dirs, filenames in os.walk(src_dir):\n        for filename in filenames:\n            if not filename.startswith(\".\"):\n                files.append(filename)\n\n    random.seed(seed)\n    selected_file = random.choice", "compilation_passed": true, "time": 0.0061130523681640625, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(src_dir):\n        raise FileNotFoundError(f\"Source directory {src_dir} does not exist.\")\n\n    if not os.path.exists(dest_dir):\n        raise FileNotFoundError(f\"Destination directory {dest_dir} does not exist.\")\n\n    files = os.listdir(src_dir)\n    file_name = random.choice(files)\n    file_path = os.path.join(src_dir, file_name)\n\n    shutil.move(file_path, os.path.join(dest_dir, file_name))\n\n    return file_name", "compilation_passed": true, "time": 0.013567924499511719, "tests_passed": false, "error": "IndexError"}
