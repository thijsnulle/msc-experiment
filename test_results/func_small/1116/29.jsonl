{"code": "mean = 0\n    median = 0\n    mode = []\n    # calculate mean\n    for key, value in dict1.items():\n        for i in range(value):\n            mean += random.choice(AGE_RANGE)\n\n    # calculate median\n    # sort the ages in ascending order\n    ages = []\n    for key, value in dict1.items():\n        for i in range(value):\n            ages.append(random.choice(AGE_RANGE))\n\n    if len(ages) % 2 == 0:\n        median = (ages[len(ages) // 2] + ages[len(ages) // 2 - 1]) / 2\n    else:\n        median = ages[len(ages) // 2]\n\n    # find the mode(s)\n    counts = Counter(ages)\n    modes = [k for k, v in counts.items() if v == max(counts.values())]\n\n    return (mean / len(ages), median, modes)", "compilation_passed": true, "time": 0.001043081283569336, "tests_passed": false, "error": "NameError"}
{"code": "import random\n    import statistics\n\n    random.seed(0)\n    departments = []\n    for k in dict1.keys():\n        departments.append(random.randint(*AGE_RANGE))\n    departments.sort()\n    mean_age = statistics.mean(departments)\n    median_age = statistics.median(departments)\n    modes = []\n    for age in statistics.multimode(departments):\n        modes.append(age)\n\n    return (round(mean_age, 1), round(median_age, 1), modes)", "compilation_passed": true, "time": 0.0009789466857910156, "tests_passed": false, "error": "StopIteration"}
{"code": "# Get the number of employees in each department\n    department_numbers = [dict1[dep] for dep in dict1]\n    # Calculate the mean, median, and mode(s) of the ages\n    mean = statistics.mean(department_numbers)\n    median = statistics.median(department_numbers)\n    mode = statistics.mode(department_numbers)\n\n    return mean, median, mode", "compilation_passed": true, "time": 0.0009329319000244141, "tests_passed": true, "error": null}
{"code": "# initialize empty lists for each type of age\n    ages = []\n    ages_22_25 = []\n    ages_26_30 = []\n    ages_31_40 = []\n    ages_41_50 = []\n    ages_51_60 = []\n    ages_61_70 = []\n    ages_71_80 = []\n    ages_81_90 = []\n    ages_91_100 = []\n\n    for i in range(10000):\n        age = random.randint(22, 60)\n        ages.append(age)\n\n        if age >= 22 and age <= 25:\n            ages_22_25.append(age)\n        elif age >= 26 and age <= 30:\n            ages_26_30.append(age)\n        elif age >= 31 and age <= 40:\n            ages_31_40.append(age)\n        elif age >= 41 and age <= 50:\n", "compilation_passed": false, "time": 0.00020503997802734375, "tests_passed": false, "error": "IndentationError"}
{"code": "list_age = []\n    for i in dict1:\n        for j in range(0, dict1[i]):\n            age = random.randint(*AGE_RANGE)\n            list_age.append(age)\n    mean = statistics.mean(list_age)\n    median = statistics.median(list_age)\n    mode = [mode(list_age), mode(list_age), mode(list_age), mode(list_age)]\n    return (mean, median, list_age)", "compilation_passed": true, "time": 0.0009601116180419922, "tests_passed": false, "error": "StopIteration"}
{"code": "result = ()\n    data = []\n\n    # Create a list of ages for all employees\n    for department, employees in dict1.items():\n        for _ in range(employees):\n            age = random.randint(AGE_RANGE[0], AGE_RANGE[1])\n            data.append(age)\n\n    # Calculate mean\n    mean = sum(data) / len(data)\n    result += (mean,)\n\n    # Calculate median\n    sorted_data = sorted(data)\n    median = sorted_data[len(sorted_data) // 2]\n    result += (median,)\n\n    # Calculate mode(s)\n    mode = statistics.mode(sorted_data)\n    result += (mode,)\n\n    return result", "compilation_passed": true, "time": 0.0010139942169189453, "tests_passed": false, "error": "StopIteration"}
{"code": "# TODO: Implement this function.\n    random.seed(0)\n    dict1 = {'EMP$$': 10, 'MAN$$': 5, 'DEV$$': 8, 'HR$$': 7}\n    age = [random.randint(*AGE_RANGE) for _ in range(sum(dict1.values()))]\n    ages = sorted(age)\n    return round(statistics.mean(ages), 1), round(statistics.median(ages), 1), sorted(statistics.multimode(ages))", "compilation_passed": true, "time": 0.0009579658508300781, "tests_passed": false, "error": "StopIteration"}
{"code": "dict1 = {k: v for k, v in dict1.items() if k.startswith('EMP$')}\n    employees_age = []\n    for i in range(len(dict1.keys())):\n        employees_age.append(random.randint(*AGE_RANGE))\n    mean = statistics.mean(employees_age)\n    median = statistics.median(employees_age)\n    mode_values, mode_counts = statistics.mode(employees_age)\n    mode_list = [i for i, j in zip(mode_values, mode_counts)\n                    for _ in range(j)]\n    return (mean, median, mode_list)", "compilation_passed": true, "time": 0.0009951591491699219, "tests_passed": false, "error": "StopIteration"}
{"code": "for i in dict1:\n        list_of_age = []\n        for j in range(dict1[i]):\n            age = random.randint(*AGE_RANGE)\n            list_of_age.append(age)\n        list_of_age = statistics.mean(list_of_age)\n    mode_list = []\n    mode = []\n    list_of_age = statistics.mean(list_of_age)\n    list_of_age = round(list_of_age)\n    return (list_of_age, list_of_age, mode)", "compilation_passed": true, "time": 0.0009329319000244141, "tests_passed": false, "error": "StopIteration"}
{"code": "emps = []\n    total_emps = 0\n    for dept, num_emps in dict1.items():\n        for _ in range(num_emps):\n            age = random.randint(*AGE_RANGE)\n            emps.append(age)\n        total_emps += num_emps\n    if not emps:\n        raise ValueError('There is no employees in department')\n    mean, median, modes = stats(emps)\n    if len(modes) == 1:\n        modes = modes[0]\n    else:\n        modes = sorted(modes)\n    return (mean, median, modes)", "compilation_passed": true, "time": 0.0010187625885009766, "tests_passed": false, "error": "StopIteration"}
{"code": "mean = 0\n    median = 0\n    mode_list = []\n\n    # Initialize variables for mean and median\n    employee_sum = 0\n    employee_count = 0\n\n    for value in dict1.values():\n        employee_sum += value\n        employee_count += 1\n\n    mean = employee_sum / employee_count\n\n    # Generate a list of ages for the employees in the department\n    ages_list = [random.randint(AGE_RANGE[0], AGE_RANGE[1]) for _ in range(employee_count)]\n\n    # Calculate the median of the ages\n    sorted_ages = sorted(ages_list)\n    median_index = len(sorted_ages) // 2\n    if len(sorted_ages) % 2 == 0:\n        median = (sorted_ages[median_index - 1] + sorted_ages[median_index]) / 2\n    else:\n        median = sorted_ages[median_index]\n\n    # Calculate the mode(s) of the ages\n    ", "compilation_passed": true, "time": 0.001013040542602539, "tests_passed": false, "error": "StopIteration"}
{"code": "# create lists\n    lst_age = []\n\n    for k, v in dict1.items():\n        lst_age.extend([random.randint(AGE_RANGE[0], AGE_RANGE[1]) for _ in range(v)])\n\n    # calculate mean, median, and mode(s)\n    mean = sum(lst_age) / len(lst_age)\n    median = statistics.median(lst_age)\n    mode = statistics.mode(lst_age)\n\n    return mean, median, [mode] if len(set(lst_age)) == len(lst_age) else []", "compilation_passed": true, "time": 0.0009729862213134766, "tests_passed": false, "error": "StopIteration"}
{"code": "# Initialize variables\n    age = []\n    for key, value in dict1.items():\n        for i in range(value):\n            age.append(random.randint(*AGE_RANGE))\n\n    mean = statistics.mean(age)\n    median = statistics.median(age)\n    mode = statistics.mode(age)\n\n    if len(set(age)) == len(age):\n        return (mean, median, [mode])\n    else:\n        return (mean, median, sorted(list(set(age))))", "compilation_passed": true, "time": 0.0009641647338867188, "tests_passed": false, "error": "StopIteration"}
{"code": "# Generate a list of ages for each employee\n    ages = []\n    for i in range(dict1[\"EMP$$\"]):\n        age = random.randint(*AGE_RANGE)\n        ages.append(age)\n    # Calculate the mean, median, and mode(s) of the ages\n    mean = statistics.mean(ages)\n    median = statistics.median(ages)\n    modes = statistics.mode(ages)\n    # Return the mean, median, and list of mode(s) of employee ages\n    return (mean, median, list(modes))", "compilation_passed": true, "time": 0.0009100437164306641, "tests_passed": false, "error": "StopIteration"}
{"code": "# Get the random ages for each employee\n    ages = [random.randint(AGE_RANGE[0], AGE_RANGE[1]) for _ in range(dict1['EMP$$'])]\n\n    # Calculate the mean, median, and mode(s)\n    mean = statistics.mean(ages)\n    median = statistics.median(ages)\n    mode = statistics.mode(ages)\n    modes = [x for x in ages if ages.count(x) > 1]\n\n    # Sort modes in descending order\n    modes.sort(reverse=True)\n\n    return mean, median, modes", "compilation_passed": true, "time": 0.0009598731994628906, "tests_passed": false, "error": "StopIteration"}
{"code": "# Initialize variables\n    total = 0\n    median = 0\n    modes = []\n    age_counts = {}\n\n    # Calculate the total number of employees\n    for emp_count in dict1.values():\n        total += emp_count\n\n    # Generate random ages for each employee\n    for emp_count in dict1.values():\n        for i in range(emp_count):\n            age = random.randint(*AGE_RANGE)\n            age_counts[age] = age_counts.get(age, 0) + 1\n\n    # Calculate the median and mode(s) of employee ages\n    ages = list(age_counts.keys())\n    ages.sort()\n    if total % 2 == 0:\n        median = (ages[total // 2 - 1] + ages[total // 2]) / 2\n    else:\n        median = ages[total // 2]\n\n    max_count = max(age_counts.values())\n    if max_count == 1:\n        modes = ages\n    else:\n        modes = [age for age", "compilation_passed": false, "time": 0.0002319812774658203, "tests_passed": false, "error": "SyntaxError"}
{"code": "total_count = 0\n    mode_list = []\n    # Calculate total count of employees\n    for key in dict1:\n        total_count += dict1[key]\n    # Create a list of random ages for each employee in the department\n    employee_list = [random.randint(AGE_RANGE[0], AGE_RANGE[1])\n                     for i in range(total_count)]\n    # Sort the ages in ascending order\n    employee_list.sort()\n    # Calculate mean and median\n    mean = sum(employee_list) / len(employee_list)\n    median = statistics.median(employee_list)\n    # Calculate mode(s)\n    for age in employee_list:\n        if employee_list.count(age) > 1:\n            if age not in mode_list:\n                mode_list.append(age)\n    mode_list.sort()\n    return (mean, median, mode_list)", "compilation_passed": true, "time": 0.0010082721710205078, "tests_passed": false, "error": "StopIteration"}
{"code": "# TODO: Calculate mean, median, and mode(s) of the ages of employees in the \"EMP$$\" department.\n    #       Generate random ages for each employee within the range [22, 60].\n    #       Use the provided random and statistics libraries.\n    #       For the mode(s), you should keep track of how many times each value is present in the sample\n    #       and return the one with the most occurrences. If multiple values have the same maximum number of occurrences,\n    #       return a list of all modes.\n    #\n    #       Use the task function to test your code with the provided data.\n    #\n    #       Return a tuple of mean, median, and mode(s).\n\n    mean = 0\n    median = 0\n    mode = []\n    #sample = [random.randint(AGE_RANGE[0], AGE_RANGE[1])]\n    for dep_code in dict1:\n        # print(dep_code)\n        # print(dict1[dep_code])\n        sample = []\n        for i in range(dict1[", "compilation_passed": false, "time": 0.00010609626770019531, "tests_passed": false, "error": "SyntaxError"}
{"code": "employees = 0\n    for value in dict1.values():\n        employees += value\n\n    age_list = [random.randint(22, 60) for _ in range(employees)]\n    mean = statistics.mean(age_list)\n    median = statistics.median(age_list)\n    modes = [value for value in dict1.keys() if dict1[value] == 1]\n    return (mean, median, modes)", "compilation_passed": true, "time": 0.0009529590606689453, "tests_passed": false, "error": "StopIteration"}
{"code": "total_employees = 0\n    employee_ages = []\n    for key, value in dict1.items():\n        for i in range(value):\n            employee = random.randint(AGE_RANGE[0], AGE_RANGE[1])\n            employee_ages.append(employee)\n            total_employees += 1\n    mean = sum(employee_ages) / total_employees\n    median = statistics.median(employee_ages)\n    mode = statistics.mode(employee_ages)\n    return (mean, median, mode)", "compilation_passed": true, "time": 0.0009350776672363281, "tests_passed": false, "error": "StopIteration"}
{"code": "data = [random.randint(*AGE_RANGE) for x in range(dict1['EMP$$'])]\n    stats = statistics.mean(data), statistics.median(data), statistics.mode(data)\n    return stats", "compilation_passed": true, "time": 0.0008800029754638672, "tests_passed": false, "error": "StopIteration"}
{"code": "ages = []\n    for key in dict1.keys():\n        for _ in range(dict1[key]):\n            ages.append(random.randint(AGE_RANGE[0], AGE_RANGE[1]))\n    # calculate the mean, median, and mode(s) of employee ages\n    mean = statistics.mean(ages)\n    median = statistics.median(ages)\n    mode = statistics.mode(ages)\n\n    return (mean, median, sorted([mode, ] if len(ages) == 1 else [mode, ages.count(mode)]))", "compilation_passed": true, "time": 0.0009610652923583984, "tests_passed": false, "error": "StopIteration"}
{"code": "# Get the total number of employees for each department\n    total_employees = sum(dict1.values())\n\n    # Generate random ages for each employee\n    employees = []\n    for _ in range(total_employees):\n        age = random.randint(*AGE_RANGE)\n        employees.append(age)\n\n    # Find the mean and mode of the ages\n    mean = statistics.mean(employees)\n\n    # If there is a tie between two or more modes, return all the modes\n    unique_ages, counts = statistics.mode(employees, return_counts=True)\n    if len(unique_ages) == 1:\n        median = statistics.median(employees)\n        modes = [unique_ages[0]]\n    else:\n        modes = [unique_ages[i] for i in range(len(unique_ages)) if counts[i] == max(counts)]\n        median = statistics.median(modes)\n\n    return mean, median, modes", "compilation_passed": true, "time": 0.0010118484497070312, "tests_passed": false, "error": "StopIteration"}
{"code": "# get random numbers\n    values = [random.randint(AGE_RANGE[0], AGE_RANGE[1]) for _ in range(sum(dict1.values()))]\n\n    # sort numbers\n    values.sort()\n\n    # calculate statistics\n    mean = statistics.mean(values)\n    median = statistics.median(values)\n    mode = []\n    counts = []\n    for age in values:\n        if age not in mode:\n            mode.append(age)\n            counts.append(values.count(age))\n        if values.count(age) > max(counts):\n            mode = []\n            mode.append(age)\n            counts = []\n            counts.append(values.count(age))\n\n    return mean, median, mode", "compilation_passed": true, "time": 0.0010731220245361328, "tests_passed": false, "error": "StopIteration"}
{"code": "ages_list = []\n    for dep in range(len(dict1)):\n        num_employees = dict1[str(dep + 1)]\n        for emp in range(num_employees):\n            ages_list.append(random.randint(*AGE_RANGE))\n    mean = statistics.mean(ages_list)\n    median = statistics.median(ages_list)\n    modes = statistics.mode(ages_list)\n    return (mean, median, modes)", "compilation_passed": true, "time": 0.000865936279296875, "tests_passed": false, "error": "KeyError"}
{"code": "# Get the ages of the employees in the department\n    ages = []\n    for _, value in dict1.items():\n        for i in range(value):\n            age = random.randint(AGE_RANGE[0], AGE_RANGE[1])\n            ages.append(age)\n\n    # Calculate the mean, median, and mode\n    mean = statistics.mean(ages)\n    median = statistics.median(ages)\n    mode = statistics.mode(ages)\n    mode = set([mode]) if len(set(ages)) > 1 else mode\n\n    return mean, median, list(mode)", "compilation_passed": true, "time": 0.0009679794311523438, "tests_passed": false, "error": "StopIteration"}
{"code": "mean = 0\n    median = 0\n    mode = []\n\n    age_list = []\n    for i in range(1, dict1['EMP$$'] + 1):\n        age_list.append(random.randint(AGE_RANGE[0], AGE_RANGE[1]))\n    # Calculate the mean\n    mean = sum(age_list) / len(age_list)\n    # Sort the list\n    age_list.sort()\n    # Calculate the median\n    if len(age_list) % 2 == 0:  # If there are an even number of elements\n        median = (age_list[len(age_list) // 2] + age_list[(len(age_list) // 2) - 1]) / 2\n    else:  # If there are an odd number of elements\n        median = age_list[(len(age_list) - 1) // 2]\n    # Calculate the mode(s)\n    count = {}\n    for x in age_list:\n        if x not in count:\n            count[", "compilation_passed": false, "time": 0.00021719932556152344, "tests_passed": false, "error": "SyntaxError"}
{"code": "random.seed(0)\n    stats = []\n\n    for k, v in dict1.items():\n        employee_ages = []\n\n        for i in range(0, v):\n            age = random.randint(22, 60)\n\n            employee_ages.append(age)\n\n        stats.append(employee_ages)\n\n    for i in range(0, len(stats)):\n        stats[i] = sorted(stats[i])\n\n    if len(stats) == 0:\n        return None, None, None\n\n    return (statistics.mean(stats[0]), statistics.median(stats[0]), stats[0].count(stats[0][0]))", "compilation_passed": true, "time": 0.0010292530059814453, "tests_passed": false, "error": "StopIteration"}
{"code": "age_lst = []\n    emp_dict = dict1\n\n    for key in emp_dict:\n        age_lst = list(random.randint(AGE_RANGE[0], AGE_RANGE[1])\n                       for _ in range(emp_dict[key]))\n\n    mean_age = statistics.mean(age_lst)\n    median_age = statistics.median(age_lst)\n    mode_age = [num for num, count in statistics.mode(age_lst).items()\n                if count == max(map(lambda x: x.count(num), age_lst))]\n    return mean_age, median_age, mode_age", "compilation_passed": true, "time": 0.000997781753540039, "tests_passed": false, "error": "RuntimeError"}
{"code": "mode = None\n    res = []\n    for department_code, num_of_employees in dict1.items():\n        age_lst = []\n        for _ in range(num_of_employees):\n            age = random.randint(*AGE_RANGE)\n            age_lst.append(age)\n        mean = statistics.mean(age_lst)\n        median = statistics.median(age_lst)\n        for a in range(len(age_lst), 0, -1):\n            if (age_lst[0:a]).count(age_lst[a-1]) > (age_lst[0:a]).count(age_lst[a]):\n                mode = age_lst[a]\n            else:\n                continue\n        if mode is None:\n            mode = []\n        else:\n            res.append(mode)\n    return round(mean, 2), round(median, 2), res", "compilation_passed": true, "time": 0.0010318756103515625, "tests_passed": false, "error": "StopIteration"}
