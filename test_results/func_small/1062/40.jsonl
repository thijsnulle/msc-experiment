{"code": "if len(arr) != 0:\n        df = pd.DataFrame(arr)\n        df.plot(subplots=True, legend=False)\n    else:\n        plt.subplots(nrows=0, ncols=1)\n    return df", "compilation_passed": true, "time": 0.026623964309692383, "tests_passed": true, "error": null}
{"code": "arr = np.array(arr)\n    if arr.size > 0:\n        row_sums = [sum(row) for row in arr]\n        data_frame = pd.DataFrame({'Day': pd.date_range(start='2020-1-1', periods=len(row_sums), freq='D'),\n                                    'Row Sums': row_sums})\n        plot_df = data_frame.plot(x='Day', y='Row Sums', figsize=(20, 5), linewidth=0, title='Time Series of Row Sums')\n\n        # Set x-axis and y-axis labels\n        plt.xlabel('Date')\n        plt.ylabel('Row Sums')\n    else:\n        fig, ax = plt.subplots(figsize=(20, 5), facecolor='white')\n        ax.set_title('Time Series of Row Sums')\n        ax.tick_params(labelcolor='w', axis='x')\n\n    return ax", "compilation_passed": true, "time": 0.00878286361694336, "tests_passed": false, "error": "UnboundLocalError"}
{"code": "if arr.size == 0:\n        # Create a subplot without any data\n        subplot_title = \"Time Series of Row Sums\"\n        subplot_xaxis = \"Month\"\n        subplot_yaxis = \"Row Sum\"\n        ax = plt.subplots(1, 1)\n        ax.set_title(subplot_title)\n        ax.set_xlabel(subplot_xaxis)\n        ax.set_ylabel(subplot_yaxis)\n    else:\n        # Compute the row sums, create a DataFrame, plot using pandas\n        row_sums = [sum(row) for row in arr]\n        df = pd.DataFrame({'Row Sum': row_sums})\n        ax = df.plot(x='Month', y='Row Sum', title='Time Series of Row Sums')\n    return ax", "compilation_passed": true, "time": 0.002285003662109375, "tests_passed": false, "error": "KeyError"}
{"code": "df = pd.DataFrame()\n    if arr.size > 0:\n        df = pd.DataFrame(arr.sum(axis=1))\n        plt.title(\"Time Series of Row Sums\")\n    else:\n        plt.subplots(nrows=1, ncols=1, figsize=(3,3))\n        plt.title(\"Time Series of Row Sums\")\n    plt.plot(df.index, df.values)\n    plt.show()\n\n    return plt.gca()", "compilation_passed": true, "time": 0.0018281936645507812, "tests_passed": true, "error": null}
{"code": "if len(arr):\n        df = pd.DataFrame()\n        df['row_sum'] = arr.sum(axis=1)\n        df['date'] = pd.date_range('2020-01-01', periods=len(arr), freq='D')\n        df['date'] = df['date'].map(lambda x: str(x))\n        df.set_index('date').plot.line(title='Time Series of Row Sums', marker='o')\n    else:\n        df = pd.DataFrame()\n        df = df.iloc[:, :].plot.line(title='Time Series of Row Sums', marker='o')\n        return df", "compilation_passed": true, "time": 0.010018110275268555, "tests_passed": true, "error": null}
{"code": "if len(arr) != 0:\n        rows = pd.DataFrame(np.sum(arr, axis=1))\n        rows.plot()\n    else:\n        plt.subplot(1,1,1)\n        plt.title('Time Series of Row Sums')\n\n    return plt.gca()", "compilation_passed": true, "time": 0.009698152542114258, "tests_passed": true, "error": null}
{"code": "# Create a Pandas DataFrame from the input array\n    df = pd.DataFrame(arr)\n    # Check if the DataFrame is empty\n    if df.empty:\n        # Create a subplot without any data\n        fig = plt.figure()\n        ax = fig.add_subplot(111)\n    else:\n        # Calculate the sum of elements for each row\n        df['sum'] = df.apply(np.sum, axis=1)\n        # Plot the row sums as a time series\n        ax = df.plot(x='sum')\n        # Set the figure title to 'Time Series of Row Sums'\n        ax.set_title('Time Series of Row Sums')\n    return ax", "compilation_passed": true, "time": 0.009694099426269531, "tests_passed": true, "error": null}
{"code": "# TODO: add code here\n\n    # Check if the array is empty\n    if len(arr) == 0:\n        # If the array is empty, create a subplot without any data\n        fig, ax = plt.subplots(figsize=(12, 8))\n        ax.set_title('Time Series of Row Sums')\n        return ax\n\n    # Create a Pandas DataFrame with row sums and plot them as a time series\n    row_sums = pd.DataFrame([sum(row) for row in arr], index=pd.date_range(\"1/1/2020\", periods=len(arr)))\n    fig, ax = plt.subplots(figsize=(12, 8))\n    ax.set_title('Time Series of Row Sums')\n    row_sums.plot(kind='line', ax=ax)\n    return ax", "compilation_passed": true, "time": 0.035516977310180664, "tests_passed": true, "error": null}
{"code": "if len(arr) > 0:\n        df = pd.DataFrame(arr, columns=['row_sum'])\n        df.plot(figsize=(10,5), title='Time Series of Row Sums')\n        plt.show()\n        return ax\n    else:\n        print('Empty array!')\n        return None", "compilation_passed": true, "time": 0.0015959739685058594, "tests_passed": false, "error": "ValueError"}
{"code": "df = pd.DataFrame(arr)\n    if df.empty:\n        return plt.subplot(1,1,1,title='Time Series of Row Sums')\n    else:\n        ax = df.cumsum().plot(figsize=(15,15))\n        ax.set_title('Time Series of Row Sums')\n        return ax", "compilation_passed": true, "time": 0.010617971420288086, "tests_passed": true, "error": null}
{"code": "if len(arr) != 0:\n        row_sum = pd.DataFrame(arr, index=pd.date_range(\"2020-01-01\", periods=len(arr), freq=\"D\")).sum(axis=1)\n        row_sum.plot(title=\"Time Series of Row Sums\")\n        return plt.gca()\n    else:\n        fig, ax = plt.subplots(ncols=2)\n        ax.get_title()\n        return plt.gca()", "compilation_passed": true, "time": 0.0040776729583740234, "tests_passed": true, "error": null}
{"code": "# Check if the array is empty. If so, create an empty plot with the correct title.\n    if arr.size == 0:\n        return plt.subplot(111).set_title('Time Series of Row Sums')\n\n    # Calculate the sums for each row.\n    sums = np.apply_along_axis(np.sum, axis=0, arr=arr)\n\n    # Create a Pandas DataFrame from the row sums.\n    df = pd.DataFrame(data=sums, index=pd.date_range(start='2020-01-01', periods=len(sums), freq='D'))\n\n    # Plot the row sums.\n    ax = df.plot(title='Time Series of Row Sums', rot=0, figsize=(10, 7))\n\n    return ax", "compilation_passed": true, "time": 0.007202625274658203, "tests_passed": true, "error": null}
{"code": "if arr.size > 0:\n        rows = [sum(row) for row in arr]\n        dataframe = pd.DataFrame(rows, columns=[f'Row {i + 1}' for i in range(len(arr))])\n        dataframe.plot()\n        return plt.gca()\n    else:\n        plt.subplot(111, title=\"Time Series of Row Sums\")\n        return plt.gca()", "compilation_passed": true, "time": 0.0015468597412109375, "tests_passed": false, "error": "ValueError"}
{"code": "if len(arr) != 0:\n        sum_arr = pd.DataFrame(np.sum(arr, axis=1))\n        sum_arr.columns = ['Sum']\n        dates = pd.date_range(start='2020-01-01', freq='1D', periods=len(sum_arr))\n        ax = sum_arr.plot()\n        ax.set_title(\"Time Series of Row Sums\")\n    else:\n        ax = plt.subplots()\n        ax.set_title(\"Time Series of Row Sums\")\n    return ax", "compilation_passed": true, "time": 0.012552022933959961, "tests_passed": false, "error": "AttributeError"}
{"code": "# Check if the array is empty\n    if len(arr) == 0:\n        ax = plt.subplot(111)\n        ax.set_title('Time Series of Row Sums')\n        return ax\n    else:\n        # Calculate the sum for each row of the array\n        # and store them in a pandas DataFrame\n        row_sums = pd.DataFrame([sum(row) for row in arr])\n        # Create a Pandas dataframe with the sums as columns\n        # and plot them as a time series\n        ax = row_sums.plot(title='Time Series of Row Sums',\n                           ylabel='Row Sum',\n                           xlabel='Day')\n    return ax", "compilation_passed": true, "time": 0.009287118911743164, "tests_passed": true, "error": null}
{"code": "# Check if the array is empty\n    if arr.size == 0:\n        # Create a subplot without any data\n        fig, ax = plt.subplots()\n        ax.set_title('Time Series of Row Sums')\n        return ax\n\n    # Convert the array to a pandas DataFrame with each row as a separate column\n    df = pd.DataFrame(arr, columns=np.arange(arr.shape[0]))\n    df['sum'] = df.iloc[:, :].sum(axis=1)\n\n    # Plot the data as a time series\n    df['date'] = pd.date_range(start='2020-1-1', freq='1D', periods=df.shape[0])\n    ax = df.plot.line(x='date', y='sum', logy=True)\n    return ax", "compilation_passed": true, "time": 0.0015208721160888672, "tests_passed": false, "error": "ValueError"}
{"code": "if arr.size:\n        df = pd.DataFrame([sum(row) for row in arr],\n                         index=pd.date_range(start=\"1/1/2020\", periods=arr.shape[0], freq=\"D\"))\n        ax = df.plot(title=\"Time Series of Row Sums\")\n    else:\n        ax = plt.subplot(111)\n        ax.set_title(\"Time Series of Row Sums\")\n        ax.plot([], [])\n    return ax", "compilation_passed": true, "time": 0.00890493392944336, "tests_passed": true, "error": null}
{"code": "rows = arr.shape[0]\n    cols = arr.shape[1]\n    dates = pd.date_range(start=\"2020-01-01\", freq=\"D\", periods=rows)\n    if rows:\n        row_sums = np.empty((rows,), dtype=int)\n        for i, row in enumerate(arr):\n            row_sums[i] = row.sum()\n        df = pd.DataFrame({\"row sums\": row_sums}, index=dates)\n        return ax = df.plot()\n    else:\n        ax = plt.subplot(111)\n        ax.get_title()\n\n    return ax", "compilation_passed": false, "time": 0.00020599365234375, "tests_passed": false, "error": "SyntaxError"}
{"code": "if len(arr) > 0:\n        df = pd.DataFrame(arr).sum(axis=1)\n        ax = df.plot()\n        ax.set_title(\"Time Series of Row Sums\")\n    else:\n        ax = plt.subplot()\n        ax.set_title(\"Time Series of Row Sums\")\n        ax.set_axis_off()\n    return ax", "compilation_passed": true, "time": 0.01454305648803711, "tests_passed": true, "error": null}
{"code": "# Check if the array is empty\n    if len(arr) == 0:\n        fig, ax = plt.subplots(1)\n    else:\n        # Compute the row sums\n        row_sums = arr.sum(axis=1)\n\n        # Create a Pandas DataFrame with these row sums and plot it as a time series\n        df = pd.DataFrame(row_sums, columns=['row_sums'])\n        df.plot(kind='line', figsize=(15, 5))\n        ax = plt.gca()\n\n    # Update the title of the plot\n    ax.set_title('Time Series of Row Sums')\n\n    # Return the plot as an axes object\n    return ax", "compilation_passed": true, "time": 0.034661054611206055, "tests_passed": true, "error": null}
{"code": "# check if the array is empty\n    if len(arr) == 0:\n        # create an empty plot\n        _ = plt.plot([], [])\n        _ = plt.title('Time Series of Row Sums')\n        return plt.gca()\n\n    # convert numpy array to pandas dataframe\n    data = pd.DataFrame(arr, index=pd.date_range('2020-01-01', periods=len(arr), freq='D'))\n    # calculate sum for each row\n    data['sum'] = data.sum(axis=1)\n    # create a new DataFrame with the sum of the rows\n    data['sum'] = data.sum(axis=1)\n\n    # plot the sum of the rows as a time series\n    ax = data['sum'].plot(figsize=(14, 12))\n    ax.set_title('Time Series of Row Sums')\n    return ax", "compilation_passed": true, "time": 0.005643606185913086, "tests_passed": true, "error": null}
{"code": "if arr.size == 0:\n        return plt.subplot(111)\n    else:\n        df = pd.DataFrame(arr, index=pd.date_range('2020-01-01', periods=len(arr)))\n        return df.cumsum().plot()", "compilation_passed": true, "time": 0.009009838104248047, "tests_passed": true, "error": null}
{"code": "if arr.shape[0] != 0:\n        time_data = []\n        sums = []\n        for i in range(arr.shape[0]):\n            sums.append(arr[i].sum())\n            time_data.append(pd.to_datetime(f\"{i + 1}-Jan-2020\"))\n        df = pd.DataFrame({'Sum': sums, 'Date': pd.to_datetime(time_data)})\n        ax = df.plot(x='Date', y='Sum', title='Time Series of Row Sums')\n        ax.set_ylabel('Sum')\n        ax.set_xlabel('Days since Jan 1, 2020')\n        return ax\n    else:\n        fig, ax = plt.subplots()\n        ax.set_title('Time Series of Row Sums')\n        return ax", "compilation_passed": true, "time": 0.04616236686706543, "tests_passed": true, "error": null}
{"code": "arr = pd.DataFrame(arr)\n    arr.columns = ['col_1', 'col_2', 'col_3']\n    arr['col_1'] = arr['col_1'] + arr['col_2']\n    arr['col_3'] = arr['col_3'] * 2\n    ax = arr.plot.line()\n    ax.set_title('Time Series of Row Sums')\n    return ax", "compilation_passed": true, "time": 0.011152982711791992, "tests_passed": true, "error": null}
{"code": "if arr.size == 0:\n        ax = plt.subplot()\n    else:\n        df = pd.DataFrame(arr)\n        df['sum'] = df.apply(np.sum, axis=1)\n\n        df.plot(\n            x='sum',\n            kind='line',\n            title='Time Series of Row Sums',\n            ax=ax,\n            xlabel='Days',\n            ylabel='Sum of each row',\n            )\n        ax = ax.twinx()\n\n    return ax", "compilation_passed": true, "time": 0.0016179084777832031, "tests_passed": false, "error": "UnboundLocalError"}
{"code": "# Create a Pandas DataFrame for each row\n    df = pd.DataFrame([row_sum for row_sum in arr.sum(axis=1)])\n\n    # Plot the Pandas DataFrame as a time series\n    plt.figure(figsize=(16, 9))\n    plt.title('Time Series of Row Sums')\n    plt.plot(df.index, df)\n    return plt.gca()", "compilation_passed": true, "time": 0.0045261383056640625, "tests_passed": false, "error": "numpy.exceptions.AxisError"}
{"code": "# Check if the array is empty\n    if arr.size == 0:\n        # Create an empty plot with the specified title\n        plt.title(\"Time Series of Row Sums\")\n    else:\n        # Create a DataFrame with the row sums\n        df = pd.DataFrame(arr.sum(axis=1), columns=[\"Row sums\"])\n        # Plot the row sums as a time series\n        plt.plot(pd.date_range(start=\"2020-01-01\", periods=arr.shape[0], freq=\"D\"), df[\"Row sums\"])\n        # Add labels and title to the plot\n        plt.xlabel(\"Day\")\n        plt.ylabel(\"Sum of Row Elements\")\n        plt.title(\"Time Series of Row Sums\")\n    # Return the plot\n    return plt", "compilation_passed": true, "time": 0.0017421245574951172, "tests_passed": true, "error": null}
{"code": "# Check if the array is empty (size zero)\n    if not arr.size:\n        # Create an empty plot with no data\n        ax = plt.subplot()\n        ax.set_title('Time Series of Row Sums')\n    else:\n        # Create a Pandas DataFrame with the row sums\n        df = pd.DataFrame(arr.sum(axis=1), index=pd.date_range('2020-01-01', periods=arr.shape[0]))\n        # Create a plot for each row in the Pandas DataFrame\n        ax = plt.subplot()\n        ax.set_title('Time Series of Row Sums')\n        ax.plot(df)\n    return ax", "compilation_passed": true, "time": 0.012021064758300781, "tests_passed": true, "error": null}
{"code": "arr = np.array(arr)\n    if len(arr) == 0:\n        fig, ax = plt.subplots()\n    else:\n        df = pd.DataFrame({'row sum': [sum(row) for row in arr]}, index=pd.date_range(start='2020-01-01', periods=len(arr), freq='D'))\n        df.plot(ax=ax, y='row sum', marker='o')\n        ax.set_title(\"Time Series of Row Sums\")\n    return ax", "compilation_passed": true, "time": 0.0013818740844726562, "tests_passed": false, "error": "UnboundLocalError"}
{"code": "if arr.size == 0:  # empty array\n        fig = plt.figure(dpi=80, facecolor='w', edgecolor='w')\n        ax = plt.subplot(111)\n    else:\n        row_sums = pd.Series([np.sum(row) for row in arr],\n                             index=pd.date_range(start='2020-01-01',\n                                                 end='2020-01-05', freq='D'))\n        ax = row_sums.plot(title='Time Series of Row Sums',\n                           marker='o', linestyle='',\n                           markerfacecolor='green', markersize=10, markeredgecolor='green')\n    return ax", "compilation_passed": true, "time": 0.009113073348999023, "tests_passed": true, "error": null}
