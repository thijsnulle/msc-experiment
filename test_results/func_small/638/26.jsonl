{"code": "# Generate random scores for each game played by each team\n    scores = np.random.randint(10, 31, (num_teams, num_games))\n\n    # Convert random scores to a DataFrame\n    df = pd.DataFrame(scores)\n    return df", "compilation_passed": true, "time": 0.0006918907165527344, "tests_passed": true, "error": null}
{"code": "# ...\n\n    scores = pd.DataFrame()\n\n    for game in range(num_games):\n        for team in range(num_teams):\n            scores.loc[team, game] = np.random.randint(1, 10)\n\n    return scores", "compilation_passed": true, "time": 0.024861812591552734, "tests_passed": true, "error": null}
{"code": "data = [\n        {'team': team, 'game': game, 'score': np.random.randint(5, 15), 'opp_score': np.random.randint(5, 15)}\n        for team in range(1, num_teams + 1)\n        for game in range(num_games)\n    ]\n    return pd.DataFrame(data,\n                        columns=['team', 'game', 'score', 'opp_score'])", "compilation_passed": true, "time": 0.002443552017211914, "tests_passed": true, "error": null}
{"code": "# Create the random scores as a list of 2D arrays\n    scores = [np.random.randint(1, 10, size=2) for _ in range(num_games)]\n\n    # Convert the list to a 2D numpy array\n    scores = np.array(scores)\n\n    # Create the index and columns\n    index = pd.RangeIndex(start=1, stop=num_teams + 1, step=1)\n    columns = pd.RangeIndex(start=1, stop=num_games + 1, step=1)\n\n    # Create the dataframe with the scores and index, and populating columns\n    df = pd.DataFrame(scores, index=index, columns=columns)\n\n    return df", "compilation_passed": true, "time": 0.001260995864868164, "tests_passed": false, "error": "ValueError"}
{"code": "df = pd.DataFrame()\n    df['games'] = pd.Series(index=list(range(num_games)), data=list(range(num_teams)))\n\n    df['score'] = np.random.randint(0, num_games, num_teams * num_games)\n    df = df.pivot_table('score', columns='games', index='games').rename_axis('games').reset_index()\n    df['games'] = df['games'].map(str)\n    return df", "compilation_passed": true, "time": 0.0009229183197021484, "tests_passed": false, "error": "ValueError"}
{"code": "# Create a DataFrame with index=teams and columns=games\n    df = pd.DataFrame(index=list(range(num_teams)), columns=list(range(num_games)))\n\n    # Populate random scores in each cell using NumPy\n    np.random.seed(100)  # Set seed for reproducibility\n    for game in range(num_games):\n        df.loc[:, game] = np.random.randint(0, 101, num_teams)\n    return df", "compilation_passed": true, "time": 0.009629011154174805, "tests_passed": true, "error": null}
{"code": "np.random.seed(43)\n    df = pd.DataFrame(columns=['teams', 'games'])\n    df['games'] = np.arange(num_games)\n    df['teams'] = list(range(num_teams)) * int(num_games / (num_teams * num_games)) + list(range(num_teams))\n    scores = np.random.randint(0, 10, (num_games, num_teams))\n    df.set_index(['games', 'teams']).values[..., :, None] = scores\n\n    return df", "compilation_passed": true, "time": 0.0012030601501464844, "tests_passed": false, "error": "ValueError"}
{"code": "random_scores = np.random.randint(1, 10, size=(num_teams, num_games))\n    return pd.DataFrame(random_scores, index=pd.Index(range(num_teams), name=\"teams\"),\n                        columns=pd.Index(range(num_games), name=\"games\"))", "compilation_passed": true, "time": 0.0007030963897705078, "tests_passed": true, "error": null}
{"code": "return pd.DataFrame([\n        np.random.randint(0, 100, size=num_games)\n        for _ in range(num_teams)\n    ]).set_index(\"Teams\")", "compilation_passed": true, "time": 0.0016269683837890625, "tests_passed": false, "error": "KeyError"}
{"code": "np.random.seed(100)\n    df = pd.DataFrame(np.random.rand(num_games, num_teams), index=range(1, num_games+1), columns=range(1, num_teams+1))\n    return df", "compilation_passed": true, "time": 0.0006270408630371094, "tests_passed": true, "error": null}
{"code": "return pd.DataFrame(\n        np.random.rand(num_teams, num_games)\n        * 100,  # * 100 is the scale for the range of values to be generated\n        index=pd.Index(\n            pd.Series(\n                pd.unique(pd.Series([f\"team{i}\" for i in range(1, num_teams + 1)]))\n            )\n        ),\n        columns=pd.Index(\n            pd.Series(\n                pd.unique(pd.Series([f\"game{i}\" for i in range(1, num_games + 1)]))\n            )\n        ),\n    )", "compilation_passed": true, "time": 0.0013337135314941406, "tests_passed": true, "error": null}
{"code": "import numpy as np\n    import pandas as pd\n\n    games = num_games\n    teams = num_teams\n\n    # Generate random scores for each game\n    df = pd.DataFrame({team: np.random.randint(1, 100, games) for team in range(1, teams + 1)})\n\n    # Assign the index to teams, columns=games\n    df.index = list(range(1, teams + 1))\n\n    return df", "compilation_passed": true, "time": 0.0008261203765869141, "tests_passed": false, "error": "ValueError"}
{"code": "df = pd.DataFrame(\n        {\n            \"teams\": [f\"team {i}\" for i in range(num_teams)],\n            \"games\": [f\"game {i}\" for i in range(num_games)],\n        }\n    )\n    df.set_index([\"teams\", \"games\"], drop=False, inplace=True)\n    df.index.names = [\"teams\", \"games\"]\n    df.columns = [\"score\" for _ in range(num_games)]\n    df.index.names = [\"teams\", \"games\"]\n    df[\"score\"] = np.random.randint(1, 101, size=[num_games, num_teams])\n    return df", "compilation_passed": true, "time": 0.0009109973907470703, "tests_passed": false, "error": "ValueError"}
{"code": "np.random.seed(42)\n    teams = [f\"team{i}\" for i in range(num_teams)]\n    games = [f\"game{i}\" for i in range(num_games)]\n    scores = {team: [np.random.random() for _ in range(num_games)] for team in teams}\n    return pd.DataFrame(scores).T", "compilation_passed": true, "time": 0.0013458728790283203, "tests_passed": true, "error": null}
{"code": "np.random.seed(13)\n    df = pd.DataFrame(columns=['Game'])\n    for i in range(num_games):\n        df[f'Game {i+1}'] = np.random.uniform(0, 100, num_teams)\n    return df", "compilation_passed": true, "time": 0.005793094635009766, "tests_passed": true, "error": null}
{"code": "games = np.random.randint(0,101,size=(num_games, num_teams))\n    df = pd.DataFrame(games, index=pd.Series(range(1, num_teams+1), name='teams'))\n    df.columns = pd.Series(range(1, num_games+1), name='games')\n\n    return df", "compilation_passed": true, "time": 0.000881195068359375, "tests_passed": false, "error": "ValueError"}
{"code": "# generate random scores for each game played by each team\n    scores = [np.random.randint(1, 100, size=num_games) for _ in range(num_teams)]\n    return pd.DataFrame(scores, index=range(num_teams))", "compilation_passed": true, "time": 0.001985788345336914, "tests_passed": true, "error": null}
{"code": "scores = np.random.randint(1, 11, size=(num_teams, num_games))\n    return pd.DataFrame(scores, index=list(map(str, range(1, num_teams + 1))),\n                        columns=list(map(str, range(1, num_games + 1))))", "compilation_passed": true, "time": 0.0007948875427246094, "tests_passed": true, "error": null}
{"code": "team_names = list(range(1, num_teams+1))\n    game_names = list(range(1, num_games+1))\n\n    team_scores = np.random.randint(100, size=num_teams * num_games)\n    team_scores = team_scores.reshape(num_teams, num_games)\n    df = pd.DataFrame(team_scores, index=team_names, columns=game_names)\n    return df", "compilation_passed": true, "time": 0.0008661746978759766, "tests_passed": true, "error": null}
{"code": "random_scores = np.random.random((num_teams, num_games)) * 100\n    df = pd.DataFrame(random_scores,\n                      index=range(1, num_teams + 1),\n                      columns=range(1, num_games + 1))\n\n    return df", "compilation_passed": true, "time": 0.0006709098815917969, "tests_passed": true, "error": null}
{"code": "# Step 1: Generate random scores for each team in each game\n    scores = np.random.randint(1, 10, size=(num_teams, num_games))\n\n    # Step 2: Create the index for teams and games\n    teams = pd.RangeIndex(num_teams)\n    games = pd.RangeIndex(num_games)\n\n    # Step 3: Create a Pandas DataFrame using the index\n    df = pd.DataFrame(scores, index=teams, columns=games)\n\n    return df", "compilation_passed": true, "time": 0.0006756782531738281, "tests_passed": true, "error": null}
{"code": "team_names = [f\"Team {i}\" for i in range(1, num_teams+1)]\n    game_names = [f\"Game {i}\" for i in range(1, num_games+1)]\n\n    scores = np.random.uniform(low=0.0, high=10.0, size=(num_teams, num_games))\n\n    df = pd.DataFrame(data=scores, index=team_names, columns=game_names)\n\n    return df", "compilation_passed": true, "time": 0.0009448528289794922, "tests_passed": true, "error": null}
{"code": "games = np.arange(1, num_games+1)\n    teams = np.arange(1, num_teams+1)\n    return pd.DataFrame(\n        data=np.random.uniform(0, 1, size=(num_teams, num_games)),\n        index=teams,\n        columns=games\n    )", "compilation_passed": true, "time": 0.0006999969482421875, "tests_passed": true, "error": null}
{"code": "return pd.DataFrame(np.random.randint(1, 11, size=(num_games, num_teams)),\n                        index=pd.Index(['t1', 't2', 't3', 't4', 't5'], dtype='object'),\n                        columns=np.arange(num_games))", "compilation_passed": true, "time": 0.0008368492126464844, "tests_passed": false, "error": "ValueError"}
{"code": "df = pd.DataFrame()\n    teams = np.random.randint(10, 100, size=num_teams)\n    games = np.random.randint(1000, 100000, size=(num_teams, num_games))\n    df = pd.DataFrame(games, index=teams)\n\n    return df", "compilation_passed": true, "time": 0.0009789466857910156, "tests_passed": true, "error": null}
{"code": "scores = []\n    for i in range(num_games):\n        score = []\n        for j in range(num_teams):\n            score.append(np.random.randint(1, 101))\n        scores.append(score)\n    df = pd.DataFrame(scores, columns=pd.Index(np.arange(1, num_games+1), name='Game'))\n    df.index = pd.Index(np.arange(1, num_teams+1), name='Teams')\n    df.fillna(np.nan, inplace=True)\n    return df", "compilation_passed": true, "time": 0.0016639232635498047, "tests_passed": false, "error": "ValueError"}
{"code": "teams = ['A', 'B', 'C']\n    games = ['G1', 'G2', 'G3']\n\n    scores = []\n    for _ in range(num_games):\n        game_scores = []\n        for i in range(num_teams):\n            score = np.random.randint(1, 101)\n            game_scores.append(score)\n        scores.append(game_scores)\n    data = list(zip(teams, games, scores))\n\n    df = pd.DataFrame(data, columns=['Team', 'Game', 'Score'])\n    df = df.set_index(['Team', 'Game'])\n\n    return df", "compilation_passed": true, "time": 0.0018222332000732422, "tests_passed": true, "error": null}
{"code": "random.seed(42)\n    np.random.seed(42)\n    games_dict = {}\n\n    for team_index in range(1, num_teams+1):\n        games_dict[str(team_index)] = []\n        for game_index in range(1, num_games+1):\n            games_dict[str(team_index)].append(random.randint(0, 10))\n\n    games_df = pd.DataFrame(games_dict).T\n    return games_df", "compilation_passed": true, "time": 0.0006198883056640625, "tests_passed": false, "error": "NameError"}
{"code": "return pd.DataFrame(\n        {\n            f\"Game {i + 1}\": np.random.randint(1, 10, num_games) for i in range(num_teams)\n        },\n        index=range(num_teams),\n    )", "compilation_passed": true, "time": 0.0008640289306640625, "tests_passed": false, "error": "ValueError"}
{"code": "return pd.DataFrame(\n        {\n            f\"Game{i}\": np.random.random(num_teams) for i in range(num_games)\n        },\n        index=list(\"ABCD\") * num_games // 4\n    )", "compilation_passed": true, "time": 0.0006740093231201172, "tests_passed": false, "error": "TypeError"}
