{"code": "return LinearRegression()", "compilation_passed": true, "time": 0.000843048095703125, "tests_passed": false, "error": "AttributeError"}
{"code": "model = LinearRegression()\n    df = pd.DataFrame(d)\n    model.fit(df[[target, 'x', 'y']], df[target])\n    return model", "compilation_passed": true, "time": 0.0016050338745117188, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(d)\n    model = LinearRegression()\n    model.fit(df[['x', 'y']], df[target])\n    return model", "compilation_passed": true, "time": 0.00333404541015625, "tests_passed": false, "error": "KeyError"}
{"code": "# TODO: Implement linear regression on target.\n\n    # Return a linear regression model.\n    return None", "compilation_passed": true, "time": 0.0007541179656982422, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(d)\n\n    x_train = df[['x', 'y']].values\n    y_train = df[target].values\n\n    regression = LinearRegression()\n    regression.fit(x_train, y_train)\n\n    return regression", "compilation_passed": true, "time": 0.002521991729736328, "tests_passed": false, "error": "KeyError"}
{"code": "df = pd.DataFrame(d)\n    model = LinearRegression()\n    if target == 'z':\n        model.fit(df.x, df.z)\n    else:\n        model.fit(df[target], df.z)\n    return model", "compilation_passed": true, "time": 0.0014510154724121094, "tests_passed": false, "error": "ValueError"}
{"code": "df = pd.DataFrame(d)\n    df = df.dropna()\n    df = df.rename(columns={target: 'y'})\n\n    model = LinearRegression()\n    model.fit(df[['x']], df.y)\n\n    return model", "compilation_passed": true, "time": 0.0032579898834228516, "tests_passed": true, "error": null}
{"code": "result = LinearRegression()\n    result.fit(d, d[target])\n    return result", "compilation_passed": true, "time": 0.0008389949798583984, "tests_passed": false, "error": "TypeError"}
{"code": "x, y = [], []\n    for i in d:\n        x.append(i[target])\n        y.append(i['z'])\n    return LinearRegression(fit_intercept=True, normalize=False)", "compilation_passed": true, "time": 0.0009253025054931641, "tests_passed": false, "error": "TypeError"}
{"code": "# TODO\n    pass", "compilation_passed": true, "time": 0.0006940364837646484, "tests_passed": true, "error": null}
{"code": "model = LinearRegression()\n\n    X = np.array([d[target] for d in d])\n    y = np.array([d['z'] for d in d])\n\n    model.fit(X, y)\n\n    return model", "compilation_passed": true, "time": 0.0008258819580078125, "tests_passed": false, "error": "NameError"}
{"code": "x_data = []\n    y_data = []\n    for data in d:\n        x_data.append(data[target])\n        y_data.append(data['x'])\n    model = LinearRegression().fit(x_data, y_data)\n    return model", "compilation_passed": true, "time": 0.001153707504272461, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}
{"code": "if target == 'z':\n        y = [item['z'] for item in d]\n        x = [item['x'] for item in d]\n        regr = LinearRegression()\n        regr.fit(x, y)\n        return regr\n    else:\n        x = [item['x'] for item in d]\n        y = [item['y'] for item in d]\n        regr = LinearRegression()\n        regr.fit(x, y)\n        return regr", "compilation_passed": true, "time": 0.001207113265991211, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}
{"code": "if target == 'z':\n        X = np.array([d['x'] for d in d])\n        y = np.array([d[target] for d in d])\n    else:\n        X = np.array([d['y'] for d in d])\n        y = np.array([d[target] for d in d])\n    return LinearRegression().fit(X, y)", "compilation_passed": true, "time": 0.0008780956268310547, "tests_passed": false, "error": "NameError"}
{"code": "model = LinearRegression()\n    model.fit(pd.DataFrame([d[target] for d in d]), pd.DataFrame(d[\"z\"]).iloc[0])\n    return model", "compilation_passed": true, "time": 0.00086212158203125, "tests_passed": false, "error": "TypeError"}
{"code": "x_values = [d['x'] for d in d]\n    y_values = [d[target] for d in d]\n\n    model = LinearRegression().fit(x_values, y_values)\n    return model", "compilation_passed": true, "time": 0.0011363029479980469, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}
{"code": "x = []\n    y = []\n    for record in d:\n        x.append(record[\"x\"])\n        y.append(record[target])\n\n    return LinearRegression().fit(x, y)", "compilation_passed": true, "time": 0.0011260509490966797, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}
{"code": "model = LinearRegression()\n    X = [d[target] for d in d]\n    y = [d['z'] for d in d]\n    model.fit(X, y)\n    return model", "compilation_passed": true, "time": 0.0011529922485351562, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}
{"code": "X = [d[target] for d in d]\n    y = [d[\"x\"] for d in d]\n    z = [d[\"y\"] for d in d]\n\n    model = LinearRegression()\n    model.fit(X, y)\n\n    return model", "compilation_passed": true, "time": 0.0011548995971679688, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}
{"code": "regr = LinearRegression()\n    x_col, y_col, z_col = d[0].get(\"x\"), d[0].get(\"y\"), d[0].get(\"z\")\n    x = np.array([x for x, _, _ in d])\n    y = np.array([y for _, y, _ in d])\n    z = np.array([z for _, _, z in d])\n    if target == \"x\":\n        regr.fit(x[:, np.newaxis], z)\n        print(regr)\n        return regr\n    elif target == \"y\":\n        regr.fit(x[:, np.newaxis], y[:, np.newaxis])\n        print(regr)\n        return regr\n    else:\n        regr.fit(x[:, np.newaxis], y[:, np.newaxis], z[:, np.newaxis])\n        print(regr)\n        return regr", "compilation_passed": true, "time": 0.0010080337524414062, "tests_passed": false, "error": "NameError"}
{"code": "df = pd.DataFrame(d)\n    return LinearRegression(fit_intercept=True)", "compilation_passed": true, "time": 0.0008509159088134766, "tests_passed": false, "error": "AttributeError"}
{"code": "model = LinearRegression()\n    model.fit(pd.DataFrame(d).loc[:, 'x', 'y'])\n    return model", "compilation_passed": true, "time": 0.0010311603546142578, "tests_passed": false, "error": "pandas.errors.IndexingError"}
{"code": "df = pd.DataFrame(d)\n    model = LinearRegression()\n    model.fit(df[[target, 'x']], df[target])\n    return model", "compilation_passed": true, "time": 0.003772258758544922, "tests_passed": true, "error": null}
{"code": "data = pd.DataFrame(d)\n    regr = LinearRegression()\n    regr.fit(data[[\"x\", \"y\"]], data[target])\n    return regr", "compilation_passed": true, "time": 0.0032951831817626953, "tests_passed": false, "error": "KeyError"}
{"code": "if target == 'z':\n        model = LinearRegression()\n        model.fit(pd.DataFrame(d).iloc[:, :3], pd.Series(d).iloc[:, 2])\n        return model\n    elif target == 'x' or target == 'y':\n        model = LinearRegression()\n        model.fit(pd.DataFrame(d).iloc[:, :2], pd.Series(d).iloc[:, 1])\n        return model\n    else:\n        raise TypeError", "compilation_passed": true, "time": 0.001168966293334961, "tests_passed": false, "error": "pandas.errors.IndexingError"}
{"code": "if target == 'x':\n        model = LinearRegression()\n        model.fit([d[x] for x in d], [d[y] for y in d])\n        return model\n    if target == 'y':\n        model = LinearRegression()\n        model.fit([d[y] for y in d], [d[x] for x in d])\n        return model\n    if target == 'z':\n        model = LinearRegression()\n        model.fit([d[z] for z in d], [d[x] for x in d])\n        return model", "compilation_passed": true, "time": 0.0009429454803466797, "tests_passed": false, "error": "TypeError"}
{"code": "model = LinearRegression()\n    if target == 'z':\n        model.fit(np.array([item[target] for item in d])[:, np.newaxis], np.array([item['x'] for item in d]))\n    elif target == 'x':\n        model.fit(np.array([item[target] for item in d])[:, np.newaxis], np.array([item['y'] for item in d]))\n    else:\n        model.fit(np.array([item[target] for item in d])[:, np.newaxis], np.array([item['z'] for item in d]))\n    return model", "compilation_passed": true, "time": 0.0009541511535644531, "tests_passed": false, "error": "NameError"}
