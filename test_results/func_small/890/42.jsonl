{"code": "random.seed(seed)\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError\n    files = list(os.path.join(data_dir, fname) for fname in csv_files)\n    if len(files) == 0:\n        return None, None\n    file_name = files[random.randint(0, len(files) - 1)]\n    df = pd.read_csv(file_name, low_memory=False)\n    return file_name, df", "compilation_passed": true, "time": 0.0033669471740722656, "tests_passed": false, "error": "StopIteration"}
{"code": "if seed is not None:\n        random.seed(seed)\n        pd.set_option('display.max_columns', None)\n\n    while True:\n        csv_file = random.choice(csv_files)\n        file_path = os.path.join(data_dir, csv_file)\n        try:\n            df = pd.read_csv(file_path, low_memory=False)\n        except FileNotFoundError:\n            continue\n\n        if df.empty:\n            continue\n        else:\n            break\n\n    # We select a random number of rows from the data frame\n    n_rows = random.randint(1, len(df) // 3)\n    data = df.sample(n_rows, random_state=0)\n    return csv_file, data", "compilation_passed": true, "time": 0.003843069076538086, "tests_passed": false, "error": "pandas.errors.EmptyDataError"}
{"code": "if seed is not None:\n        random.seed(seed)\n    random_file = random.choice(csv_files)\n    random_file_path = os.path.join(data_dir, random_file)\n    if not os.path.exists(random_file_path):\n        raise FileNotFoundError(f\"File not found: {random_file_path}\")\n\n    # Read the csv file\n    csv_data = pd.read_csv(random_file_path)\n    num_rows = random.randint(1, len(csv_data))\n    selected_rows = csv_data.sample(num_rows, axis=0, ignore_index=True)\n\n    return (random_file, selected_rows)", "compilation_passed": true, "time": 0.003354787826538086, "tests_passed": false, "error": "pandas.errors.EmptyDataError"}
{"code": "csv_files = csv_files or ['file1.csv', 'file2.csv', 'file3.csv']\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"{data_dir} not found.\")\n    file_name = random.choice(csv_files)\n\n    file = os.path.join(data_dir, file_name)\n    if not os.path.exists(file):\n        raise FileNotFoundError(f\"{file} not found.\")\n\n    csv_data = pd.read_csv(file)\n    if csv_data.empty:\n        return file_name, pd.DataFrame()\n\n    selected_rows = random.sample(csv_data, 5)\n    return file_name, selected_rows", "compilation_passed": true, "time": 0.0034706592559814453, "tests_passed": false, "error": "pandas.errors.EmptyDataError"}
{"code": "if seed:\n        random.seed(seed)\n\n    file_name = random.choice(csv_files)\n    df = pd.read_csv(os.path.join(data_dir, file_name))\n\n    return file_name, df", "compilation_passed": true, "time": 0.0033600330352783203, "tests_passed": false, "error": "pandas.errors.EmptyDataError"}
{"code": "if seed is not None:\n        random.seed(seed)\n        csv_files = random.sample(csv_files, 1)\n    file_name = csv_files[0]\n    df = pd.read_csv(os.path.join(data_dir, file_name),\n                     index_col=False)\n    return file_name, df", "compilation_passed": true, "time": 0.0034499168395996094, "tests_passed": false, "error": "pandas.errors.EmptyDataError"}
{"code": "if not os.path.exists(data_dir):\n        os.mkdir(data_dir)\n\n    random.seed(seed)\n    for csv_file in csv_files:\n        if os.path.exists(os.path.join(data_dir, csv_file)):\n            csv_file_path = os.path.join(data_dir, csv_file)\n            try:\n                df = pd.read_csv(csv_file_path)\n                return csv_file, df\n            except:\n                pass\n\n    return None, None", "compilation_passed": true, "time": 0.0031621456146240234, "tests_passed": true, "error": null}
{"code": "random.seed(seed)\n    csv_files = [os.path.join(data_dir, f) for f in csv_files]\n    if not any(os.path.isfile(f) for f in csv_files):\n        return None, None\n    index = random.randint(0, len(csv_files) - 1)\n    df = pd.read_csv(csv_files[index])\n    return csv_files[index], df", "compilation_passed": true, "time": 0.0031528472900390625, "tests_passed": false, "error": "StopIteration"}
{"code": "random.seed(seed)\n\n    # Generate a random index in the range of the list of CSV files\n    csv_file = random.choice(csv_files)\n\n    # Get the path to the CSV file\n    csv_file_path = os.path.join(data_dir, csv_file)\n\n    # Open the CSV file using pandas\n    try:\n        df = pd.read_csv(csv_file_path)\n    except FileNotFoundError:\n        # Handle the file not being found error gracefully\n        df = pd.DataFrame()\n\n    # Return a tuple containing the name of the randomly selected file and the selected rows as a DataFrame.\n    return csv_file, df", "compilation_passed": true, "time": 0.003515005111694336, "tests_passed": false, "error": "pandas.errors.EmptyDataError"}
{"code": "assert isinstance(data_dir, str)\n    assert isinstance(csv_files, list)\n    assert all(isinstance(f, str) for f in csv_files)\n    assert all(os.path.isdir(data_dir) for d in [data_dir] + csv_files)\n\n    random.seed(seed)\n    # select a file at random\n    file_name = random.choice(csv_files)\n    file_path = os.path.join(data_dir, file_name)\n    if not os.path.isfile(file_path):\n        raise RuntimeError('Csv file not found: {}'.format(file_path))\n\n    # read the file as a pandas dataframe\n    df = pd.read_csv(file_path)\n\n    # shuffle the rows\n    df = df.sample(frac=1, replace=False, random_state=seed)\n\n    return file_name, df", "compilation_passed": true, "time": 0.003679990768432617, "tests_passed": false, "error": "pandas.errors.EmptyDataError"}
{"code": "# Randomly select one of the provided csv_files\n    file_name = random.choice(csv_files)\n\n    # Open the file\n    try:\n        with open(os.path.join(data_dir, file_name)) as f:\n            csv_reader = pd.read_csv(f)\n\n    except FileNotFoundError:\n        file_name = 'empty.csv'\n        csv_reader = None\n\n    # If the csv_reader is empty, return an empty DataFrame\n    if csv_reader is None:\n        df = None\n\n    # Otherwise, select a certain number of rows at random\n    else:\n        df = csv_reader.sample(frac=1, random_state=seed)\n\n    return file_name, df", "compilation_passed": true, "time": 0.003865957260131836, "tests_passed": false, "error": "pandas.errors.EmptyDataError"}
{"code": "if seed is not None:\n        random.seed(seed)\n\n    csv_files = csv_files\n\n    random_csv = random.choice(csv_files)\n    df = pd.read_csv(os.path.join(data_dir, random_csv))\n\n    return random_csv, df", "compilation_passed": true, "time": 0.003480672836303711, "tests_passed": false, "error": "pandas.errors.EmptyDataError"}
{"code": "if seed is not None:\n        random.seed(seed)\n\n    file_names = [os.path.join(data_dir, file_name) for file_name in csv_files]\n\n    selected_file_name = random.choice(file_names)\n    df = pd.read_csv(selected_file_name)\n\n    return selected_file_name, df", "compilation_passed": true, "time": 0.003592967987060547, "tests_passed": false, "error": "pandas.errors.EmptyDataError"}
{"code": "if seed is not None:\n        random.seed(seed)\n    csv_files = [os.path.join(data_dir, file_name)\n                 for file_name in csv_files]\n\n    csv_file = random.choice(csv_files)\n    if not os.path.exists(csv_file):\n        raise FileNotFoundError(f\"File {csv_file} not found.\")\n    dataframe = pd.read_csv(csv_file, low_memory=False, parse_dates=True)\n    return csv_file, dataframe", "compilation_passed": true, "time": 0.0034759044647216797, "tests_passed": false, "error": "pandas.errors.EmptyDataError"}
{"code": "if seed is not None:\n        random.seed(seed)\n        np.random.seed(seed)\n    csv_files = csv_files\n\n    if csv_files is None or csv_files == []:\n        return None, None\n    else:\n        # We don't need to check for the existence of the file(s), as pandas will do it for us\n        df = pd.read_csv(os.path.join(data_dir, random.choice(csv_files)))\n        if df.empty:\n            return None, None\n\n        num_records = random.randint(0, len(df)-1)\n        return random.choice(csv_files), df.iloc[:num_records]", "compilation_passed": true, "time": 0.0033850669860839844, "tests_passed": false, "error": "NameError"}
{"code": "if seed is not None:\n        random.seed(seed)\n    random_file_name = random.choice(csv_files)\n    random_df = pd.read_csv(os.path.join(data_dir, random_file_name))\n    return random_file_name, random_df", "compilation_passed": true, "time": 0.003923892974853516, "tests_passed": false, "error": "pandas.errors.EmptyDataError"}
{"code": "if not os.path.isdir(data_dir):\n        print(f'Error: {data_dir} is not a directory')\n        raise FileNotFoundError\n\n    csv_files = [os.path.join(data_dir, f) for f in csv_files]\n\n    if len(csv_files) == 0:\n        print('Error: no valid csv files provided')\n        raise IOError\n\n    if seed is None:\n        seed = random.randrange(0, 1000)\n    else:\n        random.seed(seed)\n\n    # choose a random file from the list of files\n    selected_csv_file = csv_files[random.randrange(0, len(csv_files))]\n\n    try:\n        data = pd.read_csv(selected_csv_file,\n                           skiprows=random.randrange(0, 1000),\n                           nrows=random.randrange(0, 1000))\n    except:\n        print(f'Error: could not read data from {selected_csv", "compilation_passed": false, "time": 0.00012612342834472656, "tests_passed": false, "error": "SyntaxError"}
{"code": "random.seed(seed)\n    available_files = []\n    for filename in csv_files:\n        file_path = os.path.join(data_dir, filename)\n        if os.path.exists(file_path):\n            available_files.append(file_path)\n\n    if len(available_files) == 0:\n        return \"\", pd.DataFrame()\n\n    random_file = random.choice(available_files)\n\n    df = pd.read_csv(random_file)\n\n    if len(df) == 0:\n        return random_file, pd.DataFrame()\n\n    return random_file, df", "compilation_passed": true, "time": 0.0038628578186035156, "tests_passed": false, "error": "pandas.errors.EmptyDataError"}
{"code": "random.seed(seed)\n\n    file_names = []\n    for csv_file in csv_files:\n        file_names.append(os.path.join(data_dir, csv_file))\n\n    selected_file_name = random.choice(file_names)\n\n    df = None\n\n    if selected_file_name != '':\n        if os.path.isfile(selected_file_name):\n            df = pd.read_csv(selected_file_name)\n\n    return selected_file_name, df", "compilation_passed": true, "time": 0.00350189208984375, "tests_passed": false, "error": "pandas.errors.EmptyDataError"}
{"code": "# TODO: Write your code here\n    if not seed:\n        seed = random.randint(0,1000)\n    random.seed(seed)\n    file_name = csv_files[random.randint(0, len(csv_files)-1)]\n    df = pd.read_csv(os.path.join(data_dir, file_name))\n\n    return file_name, df", "compilation_passed": true, "time": 0.0032651424407958984, "tests_passed": false, "error": "StopIteration"}
{"code": "if not seed:\n        random.seed()\n    else:\n        random.seed(seed)\n    df = pd.read_csv(os.path.join(data_dir, random.choice(csv_files)))\n    return (random.choice(csv_files), df)", "compilation_passed": true, "time": 0.0043299198150634766, "tests_passed": false, "error": "pandas.errors.EmptyDataError"}
{"code": "if seed:\n        random.seed(seed)\n\n    # random choice\n    file_path = os.path.join(data_dir, csv_files[random.randint(0, len(csv_files)-1)])\n\n    # create empty DF\n    df = pd.DataFrame()\n\n    # read the file if it exists\n    if os.path.exists(file_path):\n        # load the file\n        df = pd.read_csv(file_path)\n\n    # return a random sample of 10 rows from the data frame\n    return (file_path, df.sample(10))", "compilation_passed": true, "time": 0.0032629966735839844, "tests_passed": false, "error": "StopIteration"}
{"code": "if seed:\n        random.seed(seed)\n\n    csv_files = os.listdir(data_dir)\n    selected_file = random.choice(csv_files)\n    if not selected_file:\n        return None, None\n\n    selected_df = pd.read_csv(os.path.join(data_dir, selected_file))\n\n    if selected_df.empty:\n        return selected_file, selected_df\n\n    num_records_to_select = random.randint(1, len(selected_df))\n\n    selected_rows = selected_df.sample(num_records_to_select, replace=True, ignore_index=True)\n\n    return selected_file, selected_rows", "compilation_passed": true, "time": 0.0037360191345214844, "tests_passed": false, "error": "StopIteration"}
{"code": "csv_files = [os.path.join(data_dir, filename) for filename in csv_files]\n\n    if not any(os.path.isfile(file) for file in csv_files):\n        print(f\"No CSV files found in {data_dir}\")\n        return None, None\n\n    # Randomly select a file\n    rand_idx = random.randint(0, len(csv_files)-1)\n    file_name = csv_files[rand_idx]\n\n    # Load the selected file as a pandas DataFrame\n    df = None\n    try:\n        df = pd.read_csv(file_name,\n                        header=0,\n                        skiprows=1,\n                        error_bad_lines=False,\n                        warn_bad_lines=False,\n                        low_memory=False)\n    except Exception as e:\n        print(f\"Failed to read file: {file_name}\")\n        print(e)\n\n    # Sample random rows from the file\n    if df is not None:\n        if df.empty:", "compilation_passed": false, "time": 0.00026798248291015625, "tests_passed": false, "error": "IndentationError"}
{"code": "# create random number generator\n    rng = random.Random(seed)\n\n    # check if data_dir exists, otherwise return empty DataFrame\n    if os.path.isdir(data_dir):\n        # generate list of all CSV files in data_dir\n        file_list = [f for f in os.listdir(data_dir) if os.path.isfile(os.path.join(data_dir, f)) and f.endswith('.csv')]\n        if len(file_list) > 0:\n            # generate list of available csv_files\n            csv_files = [f for f in file_list if f in csv_files]\n            if len(csv_files) > 0:\n                # select a random csv_file from the available list of csv_files\n                file_name = rng.choice(csv_files)\n                # read selected CSV file as pandas DataFrame\n                df = pd.read_csv(os.path.join(data_dir, file_name))\n\n                return file_name, df\n            else:\n                #", "compilation_passed": false, "time": 0.00019788742065429688, "tests_passed": false, "error": "IndentationError"}
{"code": "# Ensure the csv_files is a list or tuple of strings\n    assert isinstance(csv_files, (list, tuple)), \"csv_files must be a list or tuple of strings\"\n    # Ensure that at least one file is provided\n    assert len(csv_files) > 0, \"No csv_files provided\"\n    # Select a random file from the list of csv_files\n    file_name = random.choice(csv_files)\n    file_path = os.path.join(data_dir, file_name)\n\n    # Read the CSV file\n    df = pd.read_csv(file_path, header=None)\n\n    # Check if the file is empty\n    if len(df) == 0:\n        return file_name, pd.DataFrame()\n\n    # Select a random number of records from the CSV file\n    n_records = random.randint(1, len(df))\n    selected_records = df.sample(n_records, random_state=seed)\n\n    return file_name, selected_records", "compilation_passed": true, "time": 0.004068136215209961, "tests_passed": false, "error": "pandas.errors.EmptyDataError"}
{"code": "# Initialize random seed\n    random.seed(seed)\n\n    # Choose a random file from the list of CSV files\n    file_idx = random.randint(0, len(csv_files)-1)\n    file_name = csv_files[file_idx]\n    file_path = os.path.join(data_dir, file_name)\n\n    # Load data from selected CSV file\n    df = pd.read_csv(file_path, header=None, squeeze=True)\n    df.columns = ['Animal', 'Weight']\n\n    # Check if selected CSV file is empty\n    if len(df) == 0:\n        file_name = csv_files[file_idx]\n        return file_name, df\n\n    # Get number of records to be returned\n    num_records = len(df)\n\n    # Select records at random\n    selected_records = df.sample(num_records, replace=False)\n\n    # Return selected records as a pandas DataFrame\n    return file_name, selected_records", "compilation_passed": true, "time": 0.003484964370727539, "tests_passed": false, "error": "StopIteration"}
{"code": "if not seed:\n        seed = random.randrange(0, 2 ** 30)\n    random.seed(seed)\n\n    files = os.listdir(data_dir)\n    selected_file = random.choice(csv_files)\n    selected_file = os.path.join(data_dir, selected_file)\n    data = pd.read_csv(selected_file)\n\n    if len(data) == 0:\n        return selected_file, None\n\n    row_idx = random.sample(range(len(data)), 5)\n    df = data.iloc[row_idx]\n\n    return selected_file, df", "compilation_passed": true, "time": 0.003695964813232422, "tests_passed": false, "error": "pandas.errors.EmptyDataError"}
{"code": "# print(f\"Loading files from {data_dir}\")\n    # print(os.listdir(data_dir))\n\n    file_list = os.listdir(data_dir)\n\n    csv_files = [f for f in file_list if 'csv' in f and 'sample' not in f]\n\n    random_seed = None\n\n    if seed:\n        random_seed = seed\n\n    selected_file = None\n    df = None\n\n    if len(csv_files) > 0:\n        random.seed(random_seed)\n        selected_index = random.randrange(0, len(csv_files))\n        selected_file = os.path.join(data_dir, csv_files[selected_index])\n        df = pd.read_csv(selected_file)\n\n    # print(f\"Selected file: {selected_file}, DF: {df}\")\n    return (selected_file, df)", "compilation_passed": true, "time": 0.0045719146728515625, "tests_passed": true, "error": null}
{"code": "csv_file = random.choice(csv_files)\n\n    csv_file_path = os.path.join(data_dir, csv_file)\n\n    if os.path.isfile(csv_file_path):\n        data_df = pd.read_csv(csv_file_path, sep='\\s+', header=None)\n\n        if data_df.empty:\n            return (csv_file, pd.DataFrame())\n\n        num_rows = random.randint(1, len(data_df))\n        return (csv_file, data_df.sample(num_rows, ignore_index=True))\n\n    else:\n        raise Exception(\"No csv file exists\")", "compilation_passed": true, "time": 0.003538846969604492, "tests_passed": false, "error": "pandas.errors.EmptyDataError"}
