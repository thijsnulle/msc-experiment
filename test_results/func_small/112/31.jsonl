{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"df must be a pandas DataFrame\")\n    if \"Status\" not in df.columns:\n        raise ValueError(\"df must contain the column 'Status'\")\n    fig, ax = plt.subplots()\n    df['Status'].value_counts().plot.pie(ax=ax, autopct='%.2f%%')\n    ax.set_title('Status Distribution')\n    return ax", "compilation_passed": true, "time": 0.029848098754882812, "tests_passed": true, "error": null}
{"code": "ax = df['Status'].value_counts().plot.pie(autopct='%.2f%%')\n    return ax", "compilation_passed": true, "time": 0.0013539791107177734, "tests_passed": false, "error": "KeyError"}
{"code": "if not isinstance(df, pd.DataFrame) or 'Status' not in df.columns:\n        raise ValueError(f\"Invalid dataframe. Please provide a DataFrame containing the 'Status' column.\")\n    if len(df) < 2:\n        return None\n    plt.pie(\n        df['Status'].value_counts(),\n        labels=df['Status'].value_counts().index,\n        autopct='%1.2f%%',\n        colors=[\n            '#F2C2CB', 'grey', '#00bfff', '#F2C2CB', 'black',\n            '#F2C2CB', '#F2C2CB', 'grey', '#00bfff', 'black'\n        ]\n    )\n    plt.title(\"Status Distribution\")\n    plt.show()\n    return plt.gca()", "compilation_passed": true, "time": 0.014147043228149414, "tests_passed": true, "error": null}
{"code": "try:\n        ax = plt.subplot()\n        ax.pie(\n            df['Status'].value_counts(normalize=True).to_dict().values(),\n            labels=list(df['Status'].value_counts(normalize=True).index),\n            shadow=True,\n            explode=[0.25, 0, 0.1, 0.1],\n            autopct='%0.2f%%'\n        )\n        ax.axis('equal')\n        ax.set_title(\"Status Distribution\")\n        ax.set_facecolor('white')\n\n        ax.grid(False)\n        ax.set_aspect('equal')\n        ax.set_facecolor('white')\n        return ax\n\n    except ValueError as e:\n        raise ValueError(e)", "compilation_passed": true, "time": 0.0015828609466552734, "tests_passed": false, "error": "KeyError"}
{"code": "ax = None\n    if not isinstance(df, pd.DataFrame) or \"Status\" not in df.columns:\n        raise ValueError(\"df is not a valid pandas DataFrame or does not contain the Status column.\")\n\n    if \"Status\" in df.columns:\n        ax = df[\"Status\"].value_counts().plot(kind='pie', legend=True)\n\n    ax.set_title('Status Distribution')\n\n    return ax", "compilation_passed": true, "time": 0.020060300827026367, "tests_passed": true, "error": null}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a pandas DataFrame\")\n    if 'Status' not in df.columns:\n        raise ValueError(\"DataFrame must have a column named 'Status'\")\n    status_counts = df['Status'].value_counts()\n    colors = plt.cm.hsv(np.linspace(0, 1, len(status_counts)))\n    ax = plt.pie(status_counts, colors=colors, textprops={\"fontsize\": 14})\n    ax[0].set_title('Status Distribution', y=1.1)\n    return ax", "compilation_passed": true, "time": 0.001806020736694336, "tests_passed": false, "error": "NameError"}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"df is not a pandas DataFrame\")\n\n    if 'Status' not in df.columns:\n        raise ValueError(\"df does not contain a 'Status' column\")\n\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n    # Your code goes here\n\n    return ax", "compilation_passed": true, "time": 0.0013058185577392578, "tests_passed": false, "error": "NameError"}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"df is not a pandas DataFrame.\")\n    if 'Status' not in df.columns:\n        raise ValueError(\"df does not contain the 'Status' column.\")\n\n    # Step 1: Count the number of occurrences of each status\n    status_counts = df['Status'].value_counts()\n    # Step 2: Get the total count of all statuses\n    total_count = status_counts.sum()\n    # Step 3: Normalize the count to get percentage distribution of statuses\n    status_counts = status_counts.apply(lambda x: x / total_count)\n    # Step 4: Get the status names for labels\n    status_names = status_counts.index.to_list()\n    # Step 5: Create a pie chart of the status counts\n    ax = status_counts.plot.pie(labels=status_names, autopct='%1.1f%%')\n\n    # Set pie chart title\n    ax.set_title(\"Status Distribution\")\n    return ax", "compilation_passed": true, "time": 0.023509979248046875, "tests_passed": true, "error": null}
{"code": "# check if df is a DataFrame\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"'df' must be a pandas DataFrame.\")\n\n    # check if 'Status' column is in df\n    if 'Status' not in df.columns:\n        raise ValueError(\"'df' must contain the 'Status' column.\")\n\n    # get status distribution as a dict\n    status_counts = df['Status'].value_counts()\n\n    # draw pie chart with status counts as labels\n    ax = df['Status'].value_counts().plot.pie()\n\n    return ax", "compilation_passed": true, "time": 0.021575212478637695, "tests_passed": true, "error": null}
{"code": "# Check if the input is a DataFrame\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input is not a pandas DataFrame\")\n\n    # Check if the DataFrame has the 'Status' column\n    if 'Status' not in df.columns:\n        raise ValueError(\"The DataFrame does not contain the 'Status' column\")\n\n    # Get the number of unique Status values\n    unique_statuses = df['Status'].nunique()\n\n    # Get the counts of each unique Status value\n    status_counts = df['Status'].value_counts()\n\n    # Plot the pie chart\n    ax = status_counts.plot.pie(labels=df['Status'].unique(), figsize=(7, 7), autopct='%1.1f%%')\n\n    # Set the title of the plot\n    ax.set_title('Status Distribution')\n\n    return ax", "compilation_passed": true, "time": 0.022537946701049805, "tests_passed": true, "error": null}
{"code": "try:\n        from matplotlib import pyplot as plt\n\n        ax = df['Status'].value_counts().plot.pie(explode=[0.05,0.1,0.05,0.05,0.05,0.05], labels=['Pending', 'In Progress', 'Completed', 'Cancelled', 'Completed', 'Cancelled'], autopct=lambda x: '{:0.2f}%'.format(x * 100 / sum(df['Status'].value_counts()), fontsize=14))\n        ax.get_title() # Should return 'Status Distribution'\n        return ax\n    except ModuleNotFoundError as err:\n        print(err)\n        return None", "compilation_passed": true, "time": 0.0014557838439941406, "tests_passed": false, "error": "KeyError"}
{"code": "# Check if 'df' is a pandas DataFrame\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"df must be a pandas DataFrame.\")\n\n    # Check if 'Status' column exists in the 'df'\n    if 'Status' not in df.columns:\n        raise ValueError(\"'df' must contain a 'Status' column.\")\n\n    # Calculate the number of instances of each status\n    counts = df['Status'].value_counts()\n\n    # Get unique status values and their corresponding counts\n    status_list = list(counts.index)\n    counts_list = list(counts.values)\n\n    # Create the pie chart using matplotlib\n    fig, ax = plt.subplots()\n    ax.pie(counts_list, labels=status_list, autopct='%1.1f%%')\n    ax.axis('equal')\n    ax.set_title('Status Distribution')\n    ax.get_xaxis().set_visible(False)\n    ax.get_yaxis()\n    return ax", "compilation_passed": true, "time": 0.024913787841796875, "tests_passed": true, "error": null}
{"code": "try:\n        # Create a pie plot using the status column and return the plot object\n        ax = df.Status.value_counts().plot.pie()\n    except KeyError as e:\n        print(f\"KeyError: {e}\")\n        raise ValueError('Input must be a pandas DataFrame with a \"Status\" column.')\n\n    ax.set_title(\"Status Distribution\")\n\n    return ax", "compilation_passed": true, "time": 0.0013461112976074219, "tests_passed": false, "error": "AttributeError"}
{"code": "df = df[['Status']]\n    try:\n        if not isinstance(df, pd.DataFrame):\n            raise ValueError('Data frame must be a pandas DataFrame')\n        if not 'Status' in df:\n            raise ValueError('Data frame does not contain a status column')\n    except Exception as e:\n        print(e)\n    try:\n        # df = pd.DataFrame({'Status': ['Pending', 'Completed', 'In Progress', 'Cancelled', 'Completed', 'Pending']})\n        ax = df['Status'].value_counts().plot.pie(autopct='%.2f', labels=['Pending', 'Completed', 'In Progress', 'Cancelled'], startangle=180)\n        # plt.pie(df['Status'].value_counts(), labels=['Pending', 'Completed', 'In Progress', 'Cancelled'])\n        ax.set_title('Status Distribution')\n    except Exception as e:\n        print(e)\n    return ax", "compilation_passed": true, "time": 0.002002239227294922, "tests_passed": false, "error": "KeyError"}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError('df must be a pandas DataFrame')\n    if 'Status' not in df.columns:\n        raise ValueError('df must contain the \"Status\" column')\n\n    ax = plt.pie(df['Status'].value_counts(), labels=df['Status'].unique(), autopct='%1.1f%%')\n    ax[0].set_title('Status Distribution')\n    return ax", "compilation_passed": true, "time": 0.004110097885131836, "tests_passed": false, "error": "AttributeError"}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"'df' must be a pandas DataFrame.\")\n\n    if 'Status' not in df.columns:\n        raise ValueError(\"'df' must contain the 'Status' column.\")\n\n    # Generate a random color sequence for the pie chart\n    colors = plt.cm.rainbow(np.arange(0, 6) / 6)\n\n    # Generate a random order sequence for the pie chart\n    order = random.sample(df['Status'].unique(), len(df['Status'].unique()))\n    order = [ord(i) for i in order]\n    order.sort()\n\n    # Create a pie chart using the random sequence\n    ax = plt.subplot()\n    plt.pie(df['Status'].value_counts(), labels=order, colors=colors)\n    plt.axis('equal')\n    ax.set_title('Status Distribution')\n\n    return ax", "compilation_passed": true, "time": 0.0015139579772949219, "tests_passed": false, "error": "NameError"}
{"code": "# Your code goes here\n    #raise NotImplementedError('Task 1')\n    try:\n        #raise NotImplementedError('Task 1')\n        return df['Status'].value_counts().plot(kind='pie')\n\n    except Exception as e:\n        print(f\"An error occurred: {e}\")", "compilation_passed": true, "time": 0.0010297298431396484, "tests_passed": true, "error": null}
{"code": "df = df.copy()\n\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a pandas DataFrame.\")\n\n    if 'Status' not in df:\n        raise ValueError(\"DataFrame must contain a column named 'Status'.\")\n\n    df['Status'] = pd.Categorical(df['Status'])\n    statuses = df['Status'].value_counts()\n    fig, ax = plt.subplots(figsize=(8, 6))\n    statuses.plot.pie(ax=ax, labels=statuses.index)\n    ax.set_title('Status Distribution')\n    return ax", "compilation_passed": true, "time": 0.027040958404541016, "tests_passed": true, "error": null}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError('df is not a pandas DataFrame')\n\n    if 'Status' not in df:\n        raise ValueError('df does not contain the column \"Status\"')\n\n    if not isinstance(df.loc[:, 'Status'].iloc[0], pd.Categorical):\n        raise ValueError(\"Column 'Status' in the DataFrame is not categorical.\")\n\n    fig, ax = plt.subplots()\n    df.loc[:, 'Status'].value_counts().plot.pie(\n        ax=ax,\n        label='',\n        startangle=90,\n        autopct='%.1f%%',\n        counterclock=False,\n        wedgeprops=dict(width=0.8, edgecolor='white')\n    )\n    ax.set_title('Status Distribution')\n    return ax", "compilation_passed": true, "time": 0.0016570091247558594, "tests_passed": false, "error": "ValueError"}
{"code": "try:\n        assert isinstance(df, pd.DataFrame)\n        assert 'Status' in df.columns\n    except:\n        raise ValueError(f\"DataFrame should contain a column called Status and be of type pd.DataFrame.\")\n    ax = df.Status.value_counts().plot(kind='pie', figsize=(10, 10), title=\"Status Distribution\")\n    return ax", "compilation_passed": true, "time": 0.014117002487182617, "tests_passed": true, "error": null}
{"code": "# check if 'df' is a pandas DataFrame\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input should be a pandas DataFrame.\")\n\n    # check if 'Status' column exists in 'df'\n    if 'Status' not in df.columns:\n        raise ValueError(\"DataFrame does not contain a 'Status' column.\")\n\n    # calculate the total number of tasks\n    total_tasks = len(df)\n\n    # group the tasks by status\n    grouped_tasks = df.groupby('Status')\n\n    # get the number of tasks for each status\n    task_counts = grouped_tasks.apply(lambda x: len(x))\n    task_counts = task_counts.rename(columns={\"Status\": \"Number of Tasks\"})\n\n    # compute percentages for the number of tasks\n    task_counts['Percentage'] = task_counts['Number of Tasks'] / total_tasks\n    task_counts['Percentage'] *= 100\n    task_counts.sort_values('Percentage', ascending=False, inplace=True)", "compilation_passed": true, "time": 0.0024061203002929688, "tests_passed": false, "error": "TypeError"}
{"code": "return df.plot.pie(label=False, figsize=(15, 10))", "compilation_passed": true, "time": 0.0013098716735839844, "tests_passed": false, "error": "ValueError"}
{"code": "# Check if input is a DataFrame\n    if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Input must be a pandas DataFrame\")\n\n    # Check if DataFrame contains the required column\n    if 'Status' not in df.columns:\n        raise ValueError(\"DataFrame does not contain 'Status' column\")\n\n    # Get counts of Statuses and assign values to the plot\n    counts = df['Status'].value_counts()\n    values = [\"Pending\", \"In Progress\", \"Completed\", \"Cancelled\"]\n    colors = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728']\n\n    # Create plot and assign values\n    ax = plt.pie(counts, labels=values, colors=colors, shadow=True)\n\n    return ax", "compilation_passed": true, "time": 0.005438089370727539, "tests_passed": false, "error": "AttributeError"}
{"code": "if not isinstance(df, pd.DataFrame) or 'Status' not in df.columns:\n        raise ValueError(\"df must be a pandas DataFrame and must contain the 'Status' column\")\n\n    # Add status column to df\n    df['Status'] = df['Status'].apply(lambda x: 'Pending' if random.random() < 0.5 else 'Completed')\n\n    ax = df['Status'].value_counts().plot(kind='pie')\n    return ax", "compilation_passed": true, "time": 0.012330055236816406, "tests_passed": true, "error": null}
{"code": "# TODO: Add a new plot function that returns the Axes object.\n    pass", "compilation_passed": true, "time": 0.001093149185180664, "tests_passed": true, "error": null}
{"code": "if not isinstance(df, pd.DataFrame) or 'Status' not in df.columns:\n        raise ValueError('Invalid input.')\n    s = df['Status'].value_counts()\n    plt.pie(s.values, labels=s.index)\n    plt.title('Status Distribution')\n    return plt.gca()", "compilation_passed": true, "time": 0.010891199111938477, "tests_passed": true, "error": null}
{"code": "try:\n        import pandas as pd\n        import random\n        import matplotlib.pyplot as plt\n        if not isinstance(df, pd.DataFrame):\n            raise TypeError(\"Input data is not a pandas DataFrame.\")\n        if 'Status' not in df.columns:\n            raise ValueError(\"Input data does not contain a 'Status' column.\")\n        if df.columns.duplicated('Status').any():\n            raise ValueError(\"Input data contains duplicated column 'Status'.\")\n        statuses = df.Status.unique()\n        counts = df.Status.value_counts()\n        labels = [f\"{status} ({count:,d})\" for status, count in zip(statuses, counts)]\n        if sum(counts) > 20:\n            labels = [f\"{status}\" for status in statuses]\n        plt.pie(counts.tolist(), labels=labels, autopct='%1.1f%%', startangle=90, shadow=True,\n                counterclock=False, labeldistance=1.4, textprops=dict(size", "compilation_passed": false, "time": 0.00029206275939941406, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError(\"Expected DataFrame\")\n    if 'Status' not in df.columns:\n        raise ValueError(\"DataFrame doesn't contain a 'Status' column\")\n\n    status_distribution = df['Status'].value_counts().head()\n\n    plt.pie(status_distribution,\n            labels=status_distribution.index,\n            autopct='%.2f%%')\n    plt.title(\"Status Distribution\")\n\n    return plt.gca()", "compilation_passed": true, "time": 0.5484569072723389, "tests_passed": true, "error": null}
{"code": "if not isinstance(df, pd.DataFrame):\n        raise ValueError('Input is not a DataFrame')\n\n    if 'Status' not in df.columns:\n        raise ValueError('Input DataFrame does not contain the Status column')\n\n    if 'Status' in df:\n        # convert Status column to a Series\n        status_series = df['Status']\n    # Create a list of Status values\n    status_values = list(status_series.unique())\n    # create a list of colors for each Status\n    status_colors = [\"#FFBB33\", \"#33CC33\", \"#00FF00\", \"#FF3333\", \"#0033FF\", \"#FF00FF\"]\n\n    # Create pie chart\n    ax = df['Status'].value_counts().plot.pie(\n        autopct='%1.1f%%', colors=status_colors,\n        title=\"Status Distribution\",\n        text='',\n        fontsize='medium',\n        )\n\n    return ax", "compilation_passed": true, "time": 0.0028619766235351562, "tests_passed": false, "error": "TypeError"}
{"code": "try:\n        plt.pie(df['Status'].value_counts().sort_index(), labels=df['Status'].value_counts().index, autopct='%1.2f%%')\n        return ax\n\n    except (TypeError, ValueError):\n        raise ValueError('df should be pandas DataFrame and it should contain \"Status\" column')", "compilation_passed": true, "time": 0.001251220703125, "tests_passed": false, "error": "KeyError"}
