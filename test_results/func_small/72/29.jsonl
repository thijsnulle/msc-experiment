{"code": "data_df = pd.DataFrame()\n    email_list = []\n    email_lists = []\n    histogram = None\n\n    if not os.path.exists(directory):\n        return data_df, histogram\n\n    for root, dirs, files in os.walk(directory):\n        for file in files:\n            if file.endswith('.csv'):\n                email_file = pd.read_csv(os.path.join(root, file))\n                email_list.append(email_file['email'])\n                email_lists.append(email_file['list'])\n\n    if not email_list:\n        return data_df, histogram\n\n    for i in range(len(email_list)):\n        data_df[email_list[i]] = email_lists[i]\n        data_df[f'sum_{email_list[i]}'] = data_df[email_list[i]].sum()\n        data_df[f'mean_{email_list[i]}'] = data_df[email_list[i]].mean()\n        data_df[f", "compilation_passed": false, "time": 0.00032067298889160156, "tests_passed": false, "error": "SyntaxError"}
{"code": "dir_list = os.listdir(directory)\n    if len(dir_list) == 0:\n        return pd.DataFrame(columns=['email', 'list', 'sum', 'mean', 'median'])\n    else:\n        longest_filename = max(dir_list, key=len)\n        df = pd.read_csv(os.path.join(directory, longest_filename))\n        list_of_emails = list(ast.literal_eval(df['list'].values))\n        sum_ = sum(list_of_emails)\n        mean_ = sum / len(list_of_emails)\n        median_ = np.median(list_of_emails)\n        df_new = pd.DataFrame({'email': df['email'], 'sum': sum_, 'mean': mean_, 'median': median_})\n        return df_new, None", "compilation_passed": true, "time": 0.0019431114196777344, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Traverse the directory, look for CSV files and get the longest filename.\n    # Load the CSV file and get the data.\n    # Create the dataframe.\n    # Calculate the sum, mean and median of the list.\n    # Create the histogram of the median.\n\n    # Load e-mail data and convert it into a Pandas DataFrame.\n    data = pd.DataFrame(columns=['email', 'list'])\n\n    # Iterate over the directory, looking for CSV files.\n    for file in os.listdir(directory):\n        if file.endswith('.csv'):\n            filepath = os.path.join(directory, file)\n            new_data = pd.read_csv(filepath)\n            data = pd.concat([data, new_data])\n\n    if not data.empty:\n        # Load the list associated with each e-mail.\n        # Convert it into a list of Python types.\n        email_list = data['email'].apply(ast.literal_eval)\n        list_list = data['list'].apply(ast.literal_eval)\n        ", "compilation_passed": true, "time": 0.001909017562866211, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# 1. Get all the CSV files in the directory\n    all_files = [os.path.join(directory, f) for f in os.listdir(directory) if f.endswith('.csv')]\n\n    # 2. Get the longest CSV file\n    longest_file = None\n    for file in all_files:\n        if longest_file is None or os.stat(file).st_size > os.stat(longest_file).st_size:\n            longest_file = file\n\n    # 3. Load data into a Pandas DataFrame\n    if longest_file is None:\n        return None\n    else:\n        data = pd.read_csv(longest_file, index_col=None)\n\n    # 4. Calculate the sum, mean and median of the list associated with each e-mail\n    data['sum'] = data['list'].apply(lambda x: sum(ast.literal_eval(x)))\n    data['mean'] = data['list'].apply(lambda x: np.mean(ast.literal_eval(x)))\n", "compilation_passed": true, "time": 0.002048969268798828, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "directory_list = os.listdir(directory)\n    if not directory_list:\n        return pd.DataFrame(columns=[\"sum\", \"mean\", \"median\"]), None\n\n    longest_filename = max(directory_list, key=len)\n    csv_file = os.path.join(directory, longest_filename)\n\n    df = pd.read_csv(csv_file, names=[\"email\", \"list\"])\n    df[\"list\"] = df[\"list\"].apply(ast.literal_eval)\n\n    sum_list = df[\"list\"].apply(sum)\n    mean_list = df[\"list\"].apply(np.mean)\n    median_list = df[\"list\"].apply(np.median)\n\n    df = df.assign(sum=sum_list, mean=mean_list, median=median_list)\n\n    plot = df[\"median\"].apply(np.histogram)[0][1]\n\n    return df, plot", "compilation_passed": true, "time": 0.0019290447235107422, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "try:\n        files = os.listdir(directory)\n    except FileNotFoundError:\n        return pd.DataFrame({'email': [], 'list': [], 'sum': [], 'mean': [], 'median': []}), None\n\n    max_length = 0\n    max_filename = None\n    for file in files:\n        if file.endswith(\".csv\"):\n            file_path = os.path.join(directory, file)\n            df = pd.read_csv(file_path, index_col=False)\n            file_length = len(df['list'][0])\n            if max_length < file_length:\n                max_length = file_length\n                max_filename = file\n    if max_filename is None:\n        return pd.DataFrame({'email': [], 'list': [], 'sum': [], 'mean': [], 'median': []}), None\n\n    csv_file = os.path.join(directory, max_filename)\n    df = pd.read_csv(csv_file, index_col=False)\n    df['", "compilation_passed": false, "time": 0.00013208389282226562, "tests_passed": false, "error": "SyntaxError"}
{"code": "csv_list = []\n    csv_dir = os.listdir(directory)\n\n    for csv_name in csv_dir:\n        csv_path = os.path.join(directory, csv_name)\n        if os.path.isfile(csv_path) and csv_name.endswith('.csv'):\n            csv_list.append(csv_name)\n\n    if not csv_list:\n        return pd.DataFrame(columns=['sum', 'mean', 'median']), None\n\n    longest_csv = max(csv_list, key=len)\n    csv_path = os.path.join(directory, longest_csv)\n    data = pd.read_csv(csv_path, sep='\\n', engine='python', encoding='utf-8', keep_default_na=False)\n    data.dropna(inplace=True)\n\n    if data.empty:\n        return pd.DataFrame(columns=['sum', 'mean', 'median']), None\n\n    sum_of_list = data[data['list']", "compilation_passed": false, "time": 0.0002799034118652344, "tests_passed": false, "error": "SyntaxError"}
{"code": "list_of_csv_files = [file for file in os.listdir(directory) if file.endswith('.csv')]\n    if len(list_of_csv_files) == 0:\n        df = pd.DataFrame({'email':[], 'list':[], 'sum':[], 'mean':[], 'median':[]})\n        return df, None\n    # list_of_csv_files = sorted(list_of_csv_files, key=lambda x: os.path.getsize(os.path.join(directory, x)), reverse=True)\n    file_with_largest_size = max(list_of_csv_files, key=os.path.getsize)\n    df = pd.read_csv(os.path.join(directory, file_with_largest_size))\n    df['list'] = df['list'].apply(ast.literal_eval)\n    df_sum = pd.DataFrame(df['list'].map(sum), columns=['sum'])\n    df_mean = pd.DataFrame(df['list'].map(np.mean)", "compilation_passed": false, "time": 0.00025200843811035156, "tests_passed": false, "error": "SyntaxError"}
{"code": "data = []\n    csv_file_name = ''\n    for dir_name, dir_names, file_names in os.walk(directory):\n        for file_name in file_names:\n            if file_name.endswith('.csv'):\n                csv_file_name = os.path.join(dir_name, file_name)\n                csv_data = pd.read_csv(csv_file_name)\n                csv_data['list'] = csv_data['list'].apply(ast.literal_eval)\n                data.append(csv_data)\n\n    if len(data) == 0:\n        return pd.DataFrame(), None\n\n    data = pd.concat(data)\n    data = data.drop_duplicates(subset='email')\n    sums, means, medians, histogram_data = [], [], [], []\n    for index, row in data.iterrows():\n        sums.append(sum(row['list']))\n        means.append(np.mean(row['list']))\n        medians.append(np.median(row['list", "compilation_passed": false, "time": 0.00011801719665527344, "tests_passed": false, "error": "SyntaxError"}
{"code": "filenames = os.listdir(directory)\n    max_filename = max(filenames, key=lambda x: os.path.getsize(directory + \"/\" + x))\n    path = directory + \"/\" + max_filename\n\n    if path.endswith(\".csv\"):\n        df = pd.read_csv(path)\n        df[\"sum\"] = df.apply(\n            lambda row: sum(ast.literal_eval(row[\"list\"])), axis=1)\n        df[\"mean\"] = df[\"list\"].apply(np.mean)\n        df[\"median\"] = df[\"list\"].apply(np.median)\n        df.drop(\n            columns=[\n                \"list\",\n            ],\n            axis=1,\n            inplace=True\n        )\n\n        hist = df[\"median\"].plot(kind=\"hist\")\n        return df, hist\n\n    return None, None", "compilation_passed": true, "time": 0.0019452571868896484, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "file_name_list = []\n    file_list = []\n    data_df = pd.DataFrame(columns=['email', 'list', 'sum', 'mean', 'median'])\n    for dir, dirs, files in os.walk(directory):\n        for filename in files:\n            if filename.endswith('.csv'):\n                file_name_list.append(filename)\n                file_path = os.path.join(dir, filename)\n                file_list.append(pd.read_csv(file_path, sep=';'))\n\n    longest_filename = max(file_name_list, key=len)\n\n    if file_list:\n        data_df = file_list[0].merge(file_list[0])\n        data_df = data_df[data_df['email'] == data_df['email'].iloc[0]].copy()\n\n        data_df['sum'] = data_df['list'].apply(ast.literal_eval).sum()\n        data_df['mean'] = data_df['list'].", "compilation_passed": false, "time": 0.0002818107604980469, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Create an empty dataframe with the expected columns\n    empty_dataframe = pd.DataFrame({'email': [], 'list': []})\n\n    # If the directory does not exist, return None\n    if not os.path.isdir(directory):\n        return None\n\n    # Get all the files in the directory\n    files = os.listdir(directory)\n\n    # Check if there is at least one file in the directory\n    if len(files) == 0:\n        return empty_dataframe\n\n    # Get the longest filename\n    max_len = max([len(file) for file in files])\n    max_filename = None\n    for file in files:\n        if len(file) == max_len:\n            max_filename = file\n            break\n\n    # If there is no longest filename, return None\n    if max_filename is None:\n        return None\n\n    # Load the CSV file\n    csv_path = os.path.join(directory, max_filename)\n    try:\n        df = pd.read_csv(csv_path)\n    except FileNotFoundError:\n", "compilation_passed": false, "time": 0.00022983551025390625, "tests_passed": false, "error": "IndentationError"}
{"code": "df = pd.read_csv(directory)\n    df['list'] = df['list'].apply(ast.literal_eval)\n    df['sum'] = df['list'].apply(sum)\n    df['mean'] = df['list'].apply(np.mean)\n    df['median'] = df['list'].apply(np.median)\n    hist = df['median'].plot(kind='hist', bins=20)\n    return df, hist", "compilation_passed": true, "time": 0.0018467903137207031, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "try:\n        # Get the list of files in the directory\n        files = os.listdir(directory)\n\n        # Get the file name with the longest length\n        max_length = max(len(file) for file in files)\n        longest_filename = [file for file in files if len(file) == max_length][0]\n\n        # Get the file path\n        file_path = os.path.join(directory, longest_filename)\n        file = pd.read_csv(file_path)\n        file = file.groupby('email').agg(pd.Series.median)\n        file = file.reset_index()\n        file = file.rename(columns={'median': 'median_list'})\n        file.loc[:, 'median_list'] = file['median_list'].apply(ast.literal_eval)\n        # file.loc[:, 'median_list'] = ast.literal_eval(file.loc[:, 'median_list'])\n        # file['median_list'] = ast.literal_eval(file['median_list'])\n", "compilation_passed": false, "time": 0.00022792816162109375, "tests_passed": false, "error": "SyntaxError"}
{"code": "files = list(os.walk(directory))[-1][2]\n    if not files:\n        return pd.DataFrame(columns=['email', 'list', 'sum', 'mean', 'median']), None\n    else:\n        # Open and parse the first CSV file in the directory\n        filepath = os.path.join(directory, files[0])\n        csv_data = pd.read_csv(filepath)\n        list_data = list(map(ast.literal_eval, csv_data['list']))\n\n        # Calculate the sum, mean, and median of the list associated with each e-mail\n        sum_list = []\n        mean_list = []\n        median_list = []\n        for lst in list_data:\n            sum_list.append(sum(lst))\n            mean_list.append(np.mean(lst))\n            median_list.append(np.median(lst))\n\n        # Concatenate the csv data with the calculated values\n        csv_data['sum'] = sum_list\n        csv_data['mean'] =", "compilation_passed": false, "time": 0.00026106834411621094, "tests_passed": false, "error": "SyntaxError"}
{"code": "# First, get a list of the csv files in the directory\n    csv_files = [os.path.join(directory, file)\n                 for file in os.listdir(directory)\n                 if file.endswith('.csv')]\n\n    # If there are no CSV files in the directory, return None instead of an empty plot\n    if not csv_files:\n        return None\n\n    # Read all CSV files into a single DataFrame\n    all_df = pd.concat([pd.read_csv(file) for file in csv_files])\n\n    # Extract the column 'list' from the DataFrame and convert it to a list of lists\n    lists = all_df.pop('list').values.tolist()\n\n    # Flatten the list of lists\n    flat_lists = [item for sublist in lists for item in sublist]\n\n    # Convert the strings in the list of lists to Python lists\n    python_lists = []\n    for l in lists:\n        python_list = []\n        for s in l:\n            python_list.append(ast.literal_", "compilation_passed": false, "time": 0.00021982192993164062, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Get all CSV files in the directory\n    csv_files = [f for f in os.listdir(directory) if f.endswith('.csv')]\n\n    # If there are no CSV files in the directory, return an empty DataFrame\n    if not csv_files:\n        return pd.DataFrame({'email': [], 'list': []}), None\n\n    # Sort the CSV files by file length\n    sorted_files = sorted(csv_files, key=lambda x: os.path.getsize(directory + '/' + x))\n\n    # Load the data from the first CSV file\n    df = pd.read_csv(directory + '/' + sorted_files[0])\n\n    # Convert the list in the 'list' column to a Python list\n    df['list'] = df['list'].apply(ast.literal_eval)\n\n    # Calculate the sum, mean and median of the list\n    df['sum'] = df['list'].apply(sum)\n    df['mean'] = df['list'].apply(np.mean)\n    df['median']", "compilation_passed": true, "time": 0.0020270347595214844, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# TODO\n    files = os.listdir(directory)\n    if len(files) == 0:\n        return pd.DataFrame({\n            'email': [],\n            'list': [],\n            'sum': [],\n            'mean': [],\n            'median': []\n        })\n    file_longest_name = max(files, key=len)\n\n    df_email_list = pd.read_csv(f'{directory}/{file_longest_name}')\n    df_email_list = df_email_list.rename(columns={'list': 'list_str'})\n    df_email_list['list'] = df_email_list.apply(ast.literal_eval, axis=1)\n    df_email_list = df_email_list.assign(sum=df_email_list['list'].sum())\n    df_email_list = df_email_list.assign(mean=df_email_list['list'].mean())\n    df_email_list = df_email_list.assign(median=df_email_list['list'].median", "compilation_passed": false, "time": 0.0002751350402832031, "tests_passed": false, "error": "SyntaxError"}
{"code": "dirs = [x for x in os.listdir(directory) if os.path.isdir(x)]\n    csv_files = [x for x in os.listdir(directory) if x.endswith('.csv')]\n    if len(dirs)==0 and len(csv_files)==0:\n        return None\n\n    df = []\n    for f in csv_files:\n        df.append(pd.read_csv(directory+'/'+f))\n\n    df = pd.concat(df)\n    df.sort_values('list', ascending=False, inplace=True)\n\n    df.loc[:, 'list'] = df['list'].apply(ast.literal_eval)\n    df = df.groupby('email')['list'].agg(['sum', 'mean', 'median'])\n    return df, None", "compilation_passed": true, "time": 0.0019457340240478516, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "files = os.listdir(directory)\n    if files:\n        longest_filename = max(files, key=len)\n        csv_path = os.path.join(directory, longest_filename)\n        dataframe = pd.read_csv(csv_path, sep=',', comment='#', header=0)\n        dataframe = dataframe.rename(columns={\"list\": \"list_arr\"})\n        dataframe[\"sum\"] = dataframe[\"list_arr\"].apply(lambda x: sum(ast.literal_eval(x)))\n        dataframe[\"mean\"] = dataframe[\"list_arr\"].apply(lambda x: mean(ast.literal_eval(x)))\n        dataframe[\"median\"] = dataframe[\"list_arr\"].apply(lambda x: median(ast.literal_eval(x)))\n        plot = plt.hist(dataframe[\"median\"], bins=200, density=True)\n        return dataframe, plot\n    else:\n        return pd.DataFrame(columns=['sum', 'mean'", "compilation_passed": false, "time": 0.0002980232238769531, "tests_passed": false, "error": "SyntaxError"}
{"code": "csv_files = [f for f in os.listdir(directory) if f.endswith('.csv')]\n    if len(csv_files) == 0:\n        return None, None\n    file_name = max(csv_files, key=os.path.getmtime)\n    data_frame = pd.read_csv(os.path.join(directory, file_name))\n    # Convert the 'list' column to a Python object\n    data_frame['list'] = data_frame['list'].apply(ast.literal_eval)\n    # Calculate the sum, mean and median of the 'list' column\n    data_frame['sum'] = data_frame['list'].map(sum)\n    data_frame['mean'] = data_frame['list'].map(mean)\n    data_frame['median'] = data_frame['list'].map(median)\n    # Draw a histogram of the 'median' column\n    try:\n        _, ax = plt.subplots()\n        ax.hist(data_frame['median'])\n        return data_frame, ax", "compilation_passed": false, "time": 0.00024318695068359375, "tests_passed": false, "error": "SyntaxError"}
{"code": "def get_longest_file(directory):\n        longest_name = None\n        longest_length = 0\n        for filename in os.listdir(directory):\n            if filename.endswith(\".csv\"):\n                file_name = directory + '/' + filename\n                with open(file_name, 'r') as f:\n                    data = pd.read_csv(f, sep=',')\n                    name_length = len(data['email'][0])\n                    if name_length > longest_length:\n                        longest_name = filename\n                        longest_length = name_length\n        if longest_name:\n            return longest_name\n        else:\n            return None\n\n    def get_data_from_file(filename):\n        data = None\n        file_name = directory + '/' + filename\n        with open(file_name, 'r') as f:\n            data = pd.read_csv(f, sep=',')\n            data = data.convert_objects(convert_numeric=True)\n        return data\n\n    def get_data_med", "compilation_passed": false, "time": 0.00016498565673828125, "tests_passed": false, "error": "SyntaxError"}
{"code": "files = [filename for filename in os.listdir(directory) if filename.endswith('.csv')]\n    if len(files) == 0:\n        return None, None\n    else:\n        for filename in files:\n            df = pd.read_csv(os.path.join(directory, filename), index_col=0, header=0)\n            df['sum'] = df['list'].str.split(',').map(lambda x: sum(ast.literal_eval(x)))\n            df['mean'] = df['list'].str.split(',').map(lambda x: np.mean(ast.literal_eval(x)))\n            df['median'] = df['list'].str.split(',').map(lambda x: np.median(ast.literal_eval(x)))\n            return df, None", "compilation_passed": true, "time": 0.0019447803497314453, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# TODO: add your code\n    list_of_file_names = os.listdir(directory)\n    max_file = ''\n    for i in list_of_file_names:\n        if len(i) > len(max_file):\n            max_file = i\n    file_with_max_file_name = os.path.join(directory, max_file)\n    try:\n        with open(file_with_max_file_name, \"r\") as f:\n            data = ast.literal_eval(f.read())\n        data_frame = pd.DataFrame(data)\n        data_frame['sum'] = data_frame.apply(lambda row: np.sum(eval(row['list'])), axis=1)\n        data_frame['mean'] = data_frame.apply(lambda row: np.mean(eval(row['list'])), axis=1)\n        data_frame['median'] = data_frame.apply(lambda row: np.median(eval(row['list'])), axis=1)\n        ax = data_frame.plot.hist(bins=[0", "compilation_passed": false, "time": 0.0002980232238769531, "tests_passed": false, "error": "SyntaxError"}
{"code": "file_list = []\n    df_list = []\n\n    for (dirpath, _dirnames, filenames) in os.walk(directory):\n        for filename in filenames:\n            if filename.endswith('.csv'):\n                file_list.append(os.path.join(dirpath, filename))\n\n    if not file_list:\n        return None\n\n    for file in file_list:\n        df = pd.read_csv(file, index_col=False)\n        df = df.rename(columns={'list': 'list_col'})\n        df['list_col'] = df['list_col'].apply(ast.literal_eval)\n        df_list.append(df)\n\n    df_longest_filename = max(df_list, key=lambda df: len(df['email'].unique()))\n\n    df = df_longest_filename.copy()\n    df['median'] = df.apply(lambda row: np.median(row['list_col']), axis=1)\n    df['mean'] = df['list_col", "compilation_passed": false, "time": 0.00012183189392089844, "tests_passed": false, "error": "SyntaxError"}
{"code": "filenames = []\n    sum_list = []\n    mean_list = []\n    median_list = []\n    for file_name in os.listdir(directory):\n        if file_name.endswith('.csv'):\n            filename = os.path.join(directory, file_name)\n            df = pd.read_csv(filename, index_col=0)\n            filenames.append(filename)\n            # print(filename)\n\n            # print(df.head())\n            # print(df.head().values)\n            list_str = df['list'].values\n            # print(list_str)\n\n            list_ = []\n            for item in list_str:\n                if item is None:\n                    list_.append(0)\n                elif isinstance(item, list):\n                    list_.append(item[0])\n                else:\n                    list_.append(item)\n\n            # print(list_)\n            sum_ = np.sum(list_)\n            mean = np.mean(list_)\n            median = np.median", "compilation_passed": true, "time": 0.0019230842590332031, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Get the list of files\n    filenames = os.listdir(directory)\n    # Filter files ending with \".csv\" and remove \".csv\"\n    csv_files = [fn for fn in filenames if fn.endswith(\".csv\") and fn != \".csv\"]\n    if not csv_files:\n        return None\n\n    # Read the file with the longest length\n    longest_filename = max(csv_files, key=lambda fn: os.path.getsize(os.path.join(directory, fn)))\n    csv_file = os.path.join(directory, longest_filename)\n    df = pd.read_csv(csv_file)\n\n    # Convert the column 'list' to a list\n    list_column = df[\"list\"].astype(\"object\")\n    list_column = list_column.str.split(\",\").apply(lambda x: [i.strip() for i in x if i.strip()])\n\n    # Calculate the sum, mean and median of the list associated with each e-mail\n", "compilation_passed": true, "time": 0.0020198822021484375, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "files = sorted(os.listdir(directory))\n\n    if len(files) == 0:\n        return None\n\n    longest_filename = \"\"\n    longest_file = \"\"\n\n    for filename in files:\n        if filename.endswith(\".csv\") and filename != \"__init__.csv\":\n            filepath = os.path.join(directory, filename)\n            data = pd.read_csv(filepath, sep=\",\", engine=\"python\", dtype=str)\n            if len(data['list'].to_numpy()) > len(longest_filename):\n                longest_filename = data['list'].to_numpy()\n                longest_file = filename\n\n    if longest_filename == \"\":\n        return None\n    else:\n        longest_file = os.path.join(directory, longest_file)\n        data = pd.read_csv(longest_file, sep=\",\", engine=\"python\", dtype=str)\n\n        data['list'] = data['list'].map(ast.literal_", "compilation_passed": false, "time": 0.00028395652770996094, "tests_passed": false, "error": "SyntaxError"}
{"code": "# find all csv files\n    filenames = []\n    for root, _, files in os.walk(directory):\n        for filename in files:\n            if filename.endswith('.csv'):\n                filenames.append(filename)\n\n    # check if there is csv file in the directory\n    if not filenames:\n        df = pd.DataFrame({'email': [], 'list': [], 'sum': [], 'mean': [], 'median': []})\n        return df, None\n\n    # read data from csv files\n    df = pd.DataFrame({'email': [], 'list': []})\n    for filename in filenames:\n        with open(os.path.join(directory, filename), 'r') as f:\n            df = df.append(pd.read_csv(f), ignore_index=True)\n\n    # convert string representation of list into actual list\n    df['list'] = df['list'].apply(ast.literal_eval)\n\n    # calculate sum, mean and median of the list\n    df['sum'] = df['", "compilation_passed": false, "time": 0.00011110305786132812, "tests_passed": false, "error": "SyntaxError"}
{"code": "df = None\n    plot = None\n    file_list = []\n    for root, dirs, files in os.walk(directory):\n        for f in files:\n            if f.endswith('.csv'):\n                file_list.append(os.path.join(root, f))\n    if len(file_list) == 0:\n        df = pd.DataFrame({'email': [], 'list': [], 'sum': [], 'mean': [], 'median': []})\n    else:\n        df = pd.concat([pd.read_csv(f) for f in file_list])\n        df = df.set_index('email')\n        df['list'] = df['list'].apply(ast.literal_eval)\n        df['list_sum'] = df['list'].apply(sum)\n        df['list_mean'] = df['list_sum'] / len(df.list.iloc[0])\n        df['list_median'] = np.median(df['list'], axis=1)\n        plot = df.list_median.hist", "compilation_passed": true, "time": 0.0020112991333007812, "tests_passed": false, "error": "FileNotFoundError"}
