{"code": "# Move all json files from source to target\n    shutil.move(\n        os.path.join(SOURCE_DIR, '*.json'),\n        TARGET_DIR\n    )\n\n    # Rename files in target dir\n    for f in os.listdir(TARGET_DIR):\n        match = FILE_PATTERN.search(f)\n        if match:\n            new_name = f.replace(\n                match.group(1),\n                f.replace(match.group(1) + '-', '').split('-', 1)[0]\n            )\n            shutil.move(\n                os.path.join(TARGET_DIR, f),\n                os.path.join(TARGET_DIR, new_name)\n            )", "compilation_passed": true, "time": 0.0012631416320800781, "tests_passed": true, "error": null}
{"code": "# Loop through all files in the source directory\n    for filename in os.listdir(SOURCE_DIR):\n        # Check if the filename matches the file pattern\n        match = FILE_PATTERN.match(filename)\n        if match:\n            # Get the prefix part of the filename\n            prefix = match.group(1)\n            # Combine the prefix and file name parts\n            new_filename = os.path.join(TARGET_DIR, prefix + '-' + filename)\n            # Move the file to the target directory\n            shutil.move(os.path.join(SOURCE_DIR, filename), new_filename)", "compilation_passed": true, "time": 0.001809835433959961, "tests_passed": true, "error": null}
{"code": "print(\"task_func()\")\n    try:\n        os.makedirs(TARGET_DIR)\n    except FileExistsError:\n        pass\n\n    for path in glob.glob(os.path.join(SOURCE_DIR, '*.json')):\n        print(path)\n        name = os.path.basename(path)\n        name = FILE_PATTERN.split(name, 1)[0]\n        target_path = os.path.join(TARGET_DIR, name + '.json')\n        if os.path.exists(target_path):\n            os.unlink(target_path)\n        shutil.move(path, target_path)", "compilation_passed": true, "time": 0.0011878013610839844, "tests_passed": false, "error": "OSError"}
{"code": "if not os.path.exists(SOURCE_DIR):\n        raise Exception(f\"{SOURCE_DIR} does not exist\")\n    if not os.path.exists(TARGET_DIR):\n        os.makedirs(TARGET_DIR)\n    for file_path in os.listdir(SOURCE_DIR):\n        match = FILE_PATTERN.search(file_path)\n        if match:\n            src_path = os.path.join(SOURCE_DIR, file_path)\n            target_path = os.path.join(TARGET_DIR, f\"{match.group(1)}-{int(time.time())}.json\")\n            shutil.move(src_path, target_path)", "compilation_passed": true, "time": 0.0011670589447021484, "tests_passed": false, "error": "Exception"}
{"code": "# Check if SOURCE_DIR and TARGET_DIR exist\n    if not os.path.exists(SOURCE_DIR):\n        raise FileNotFoundError(f'Source directory {SOURCE_DIR} does not exist')\n    if not os.path.exists(TARGET_DIR):\n        raise FileNotFoundError(f'Target directory {TARGET_DIR} does not exist')\n\n    # Loop through all files in SOURCE_DIR\n    for filename in os.listdir(SOURCE_DIR):\n        match = FILE_PATTERN.match(filename)\n        if match:\n            source_path = os.path.join(SOURCE_DIR, filename)\n            target_path = os.path.join(TARGET_DIR, match.group(1) + '.json')\n            if os.path.exists(target_path):\n                raise FileExistsError(f'Target file {target_path} already exists')\n            shutil.move(source_path, target_path)", "compilation_passed": true, "time": 0.0011601448059082031, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# TODO: Implement\n    pass", "compilation_passed": true, "time": 0.0013492107391357422, "tests_passed": true, "error": null}
{"code": "for fname in os.listdir(SOURCE_DIR):\n        m = FILE_PATTERN.search(fname)\n        if m:\n            from_dir = os.path.join(SOURCE_DIR, fname)\n            to_dir = os.path.join(TARGET_DIR, m.group(1) + '.json')\n            shutil.move(from_dir, to_dir)", "compilation_passed": true, "time": 0.0020759105682373047, "tests_passed": true, "error": null}
{"code": "# Check the source directory exists and is a directory\n    if not os.path.isdir(SOURCE_DIR):\n        print(f\"{SOURCE_DIR} is not a directory or doesn't exist.\")\n        return\n\n    # Check the target directory exists and is a directory\n    if not os.path.isdir(TARGET_DIR):\n        os.makedirs(TARGET_DIR)\n\n    # Find all JSON files in the source directory\n    json_files = [file for file in os.listdir(SOURCE_DIR) if os.path.splitext(file)[1] == '.json']\n\n    for file in json_files:\n        file_path = os.path.join(SOURCE_DIR, file)\n\n        match = FILE_PATTERN.search(file)\n        if match:\n            prefix = match.group(1)\n            new_path = os.path.join(TARGET_DIR, prefix) + '.json'\n            try:\n                shutil.move(file_path, new_path)\n            except shutil.Error", "compilation_passed": false, "time": 0.0002071857452392578, "tests_passed": false, "error": "SyntaxError"}
{"code": "# List all JSON files in the source directory\n    json_files = []\n    for root, _, filenames in os.walk(SOURCE_DIR):\n        for filename in filenames:\n            if filename.endswith('.json'):\n                json_files.append(os.path.join(root, filename))\n\n    # Move JSON files to the target directory, renaming them\n    for json_file in json_files:\n        filename = os.path.basename(json_file)\n        match = FILE_PATTERN.search(filename)\n        if match:\n            prefix = match.group(1)\n            new_filename = f'{prefix}-{os.path.basename(os.path.dirname(json_file)).replace(\"_\", \"-\").replace(\".\", \"-\")}.json'\n            new_path = os.path.join(TARGET_DIR, new_filename)\n            os.rename(json_file, new_path)", "compilation_passed": true, "time": 0.0015592575073242188, "tests_passed": true, "error": null}
{"code": "for filename in os.listdir(SOURCE_DIR):\n        match = FILE_PATTERN.search(filename)\n        if match:\n            prefix = match.group(1)\n            shutil.move(os.path.join(SOURCE_DIR, filename), os.path.join(TARGET_DIR, '{}-{}.json'.format(prefix, os.path.basename(filename).split('-', 1)[0])))", "compilation_passed": true, "time": 0.0018951892852783203, "tests_passed": true, "error": null}
{"code": "for file in os.listdir(SOURCE_DIR):\n        match = FILE_PATTERN.search(file)\n        if not match:\n            continue\n        old_name = match.group(1) + '.json'\n        new_name = match.group(1) + '-0.json'\n        new_path = os.path.join(TARGET_DIR, new_name)\n        shutil.move(os.path.join(SOURCE_DIR, file), new_path)", "compilation_passed": true, "time": 0.0015769004821777344, "tests_passed": true, "error": null}
{"code": "print(\"Task 1: Moving and Renaming Files\")\n\n    # Move all json files in the source directory to the target directory\n    for file in os.listdir(SOURCE_DIR):\n        match = re.match(FILE_PATTERN, file)\n        if match:\n            source_filename = os.path.join(SOURCE_DIR, file)\n            target_filename = os.path.join(TARGET_DIR, f\"{match.group(1)}-{random.randint(1, 1000)}.json\")\n            shutil.move(source_filename, target_filename)\n    print(\"Source and target directories moved and renamed successfully.\")", "compilation_passed": true, "time": 0.0014216899871826172, "tests_passed": false, "error": "NameError"}
{"code": "# Move all files in the SOURCE_DIR directory\n    for file_name in os.listdir(SOURCE_DIR):\n        match = FILE_PATTERN.match(file_name)\n        if match:\n            source_file = os.path.join(SOURCE_DIR, file_name)\n            target_file = os.path.join(TARGET_DIR, f\"{match.group(1)}-{match.group(2)}.json\")\n            os.rename(source_file, target_file)", "compilation_passed": true, "time": 0.001390695571899414, "tests_passed": false, "error": "IndexError"}
{"code": "file_list = os.listdir(SOURCE_DIR)\n\n    for filename in file_list:\n        match = re.search(FILE_PATTERN, filename)\n        if match:\n            prefix = match.group(1)\n            source_file = os.path.join(SOURCE_DIR, filename)\n            target_file = os.path.join(TARGET_DIR, prefix + '.json')\n            shutil.copy(source_file, target_file)", "compilation_passed": true, "time": 0.0015039443969726562, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Find all files in the source directory\n    files = [os.path.join(SOURCE_DIR, file_name) for file_name in os.listdir(SOURCE_DIR) if FILE_PATTERN.match(file_name)]\n\n    # Iterate through all files\n    for file_name in files:\n        # Get the file name\n        filename = os.path.basename(file_name)\n        # Get the file name without extension\n        filename_no_ext = os.path.splitext(filename)[0]\n        # Get the prefix part of the filename\n        filename_prefix = filename_no_ext.split('-')[0]\n        # Get the last index of \"-\" in the filename\n        last_dash_index = filename_no_ext.rfind('-')\n        # Get the suffix part of the filename\n        filename_suffix = filename_no_ext[last_dash_index + 1:]\n        # Create the new file name\n        new_file_name = filename_prefix + '-' + filename_suffix\n        # Move the file to the target", "compilation_passed": true, "time": 0.0015261173248291016, "tests_passed": true, "error": null}
{"code": "files = []\n\n    # Collect all source files in the source directory\n    for root, dirs, files_in_current_dir in os.walk(SOURCE_DIR):\n        for file in files_in_current_dir:\n            full_path = os.path.join(root, file)\n\n            match = FILE_PATTERN.match(file)\n            if match and match.group(1) != '':\n                files.append(full_path)\n\n    for file_to_move in files:\n        filename = os.path.basename(file_to_move)\n        match = FILE_PATTERN.match(filename)\n        prefix = match.group(1)\n        destination = os.path.join(TARGET_DIR, f'{prefix}-{match.group(2)}')\n        shutil.move(file_to_move, destination)", "compilation_passed": true, "time": 0.0018870830535888672, "tests_passed": true, "error": null}
{"code": "for filename in os.listdir(SOURCE_DIR):\n        match = FILE_PATTERN.search(filename)\n        if match:\n            target_filename = match.group(1)\n            target_filepath = os.path.join(TARGET_DIR, target_filename)\n            shutil.move(os.path.join(SOURCE_DIR, filename), target_filepath)\n        else:\n            print(\"File does not match the pattern: %s\" % filename)", "compilation_passed": true, "time": 0.0014882087707519531, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(SOURCE_DIR) or not os.path.exists(TARGET_DIR):\n        print(\"Source and/or target directory does not exist.\")\n        return\n\n    # Get all files in the source directory\n    files = os.listdir(SOURCE_DIR)\n\n    # Remove all files from the target directory\n    shutil.rmtree(TARGET_DIR)\n\n    # Iterate over each file in the source directory\n    for file in files:\n        # Get the prefix of the filename, removing the last occurrence of \"-\"\n        prefix = FILE_PATTERN.match(file).group(1)\n\n        # Move the file to the target directory with the new filename\n        shutil.move(os.path.join(SOURCE_DIR, file), os.path.join(TARGET_DIR, prefix + \".json\"))", "compilation_passed": true, "time": 0.0014739036560058594, "tests_passed": true, "error": null}
{"code": "source_dir = os.path.join(os.getcwd(), SOURCE_DIR)\n    target_dir = os.path.join(os.getcwd(), TARGET_DIR)\n    regex = FILE_PATTERN.match\n    for root, dirs, files in os.walk(source_dir):\n        for fname in files:\n            match = regex(fname)\n            if not match:\n                print(f\"Skipping file {fname} - could not match regex\")\n                continue\n            prefix = match.group(1)\n            suffix = fname[len(prefix) + 1:]\n            dest = os.path.join(target_dir, prefix)\n            dest += '-' + suffix\n            print(f\"Moving {fname} to {dest}\")\n            shutil.move(os.path.join(root, fname), dest)", "compilation_passed": true, "time": 0.0016231536865234375, "tests_passed": true, "error": null}
{"code": "if os.path.isdir(SOURCE_DIR) and os.path.isdir(TARGET_DIR):\n        os.makedirs(TARGET_DIR, exist_ok=True)\n        for file in os.listdir(SOURCE_DIR):\n            match = FILE_PATTERN.search(file)\n            if match:\n                new_filename = '-'.join([match.group(1), '1']) + '.json'\n                shutil.move(os.path.join(SOURCE_DIR, file), os.path.join(TARGET_DIR, new_filename))\n    else:\n        raise Exception(\"Source and target directory should exist.\")", "compilation_passed": true, "time": 0.0011289119720458984, "tests_passed": false, "error": "Exception"}
{"code": "# Get list of all json files in source directory\n    json_files = os.listdir(SOURCE_DIR)\n\n    # Find json files in source directory with the FILE_PATTERN regex\n    json_files = [file for file in json_files if FILE_PATTERN.search(file)]\n\n    # Move json files to target directory\n    for file in json_files:\n        source = os.path.join(SOURCE_DIR, file)\n        target = os.path.join(TARGET_DIR, FILE_PATTERN.search(file).group(1))\n        shutil.move(source, target)\n\n    print('JSON files moved and renamed.')", "compilation_passed": true, "time": 0.0016100406646728516, "tests_passed": true, "error": null}
{"code": "if not os.path.isdir(TARGET_DIR):\n        os.mkdir(TARGET_DIR)\n    for file_path in os.listdir(SOURCE_DIR):\n        if os.path.isfile(os.path.join(SOURCE_DIR, file_path)) and FILE_PATTERN.match(file_path):\n            target_path = os.path.join(TARGET_DIR, os.path.splitext(file_path)[0] + \".json\")\n            shutil.move(os.path.join(SOURCE_DIR, file_path), target_path)", "compilation_passed": true, "time": 0.00110626220703125, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# First, check if source and target directories exist and if not create them\n    if not os.path.exists(SOURCE_DIR):\n        print(f'Source directory {SOURCE_DIR} does not exist, creating it now...')\n        os.makedirs(SOURCE_DIR)\n    elif not os.path.isdir(SOURCE_DIR):\n        print(f'Source directory {SOURCE_DIR} is not a directory, exiting task')\n        return\n\n    if not os.path.exists(TARGET_DIR):\n        print(f'Target directory {TARGET_DIR} does not exist, creating it now...')\n        os.makedirs(TARGET_DIR)\n    elif not os.path.isdir(TARGET_DIR):\n        print(f'Target directory {TARGET_DIR} is not a directory, exiting task')\n        return\n\n    # Next, check all files in the source directory and filter out those that don't match the regex pattern\n    filenames = os.listdir(SOURCE_DIR)\n    files_to_copy = [filename for", "compilation_passed": false, "time": 0.00019693374633789062, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Iterate over the files in the source directory\n    for file in os.listdir(SOURCE_DIR):\n        # Get the match object\n        match = FILE_PATTERN.search(file)\n        # If the file has a match\n        if match:\n            # Create a new file with the new filename\n            shutil.move(os.path.join(SOURCE_DIR, file),\n                        os.path.join(TARGET_DIR, match.group(1)))", "compilation_passed": true, "time": 0.0015568733215332031, "tests_passed": true, "error": null}
{"code": "files = os.listdir(SOURCE_DIR)\n    for f in files:\n        m = FILE_PATTERN.match(f)\n        if m is not None:\n            prefix = m.group(1)\n            source_path = os.path.join(SOURCE_DIR, f)\n            target_path = os.path.join(TARGET_DIR, '{}-{}.json'.format(prefix, os.path.basename(f).split('-', 1)[1]))\n            shutil.move(source_path, target_path)", "compilation_passed": true, "time": 0.0019741058349609375, "tests_passed": true, "error": null}
{"code": "# Read the json files in the source directory\n    source_files = []\n    for root, dirs, files in os.walk(SOURCE_DIR):\n        for filename in files:\n            match = FILE_PATTERN.search(filename)\n            if match:\n                source_files.append(filename)\n\n    # Move the files to the target directory\n    for filename in source_files:\n        source_file = os.path.join(SOURCE_DIR, filename)\n        target_file = os.path.join(TARGET_DIR, os.path.splitext(filename)[0] + '.json')\n        shutil.move(source_file, target_file)\n\n    return", "compilation_passed": true, "time": 0.0014836788177490234, "tests_passed": true, "error": null}
{"code": "# Get all json files in the source directory\n    json_files = [f for f in os.listdir(SOURCE_DIR) if FILE_PATTERN.search(f)]\n\n    # Move all json files to the target directory\n    for file in json_files:\n        shutil.move(os.path.join(SOURCE_DIR, file), os.path.join(TARGET_DIR, file))\n\n    return None", "compilation_passed": true, "time": 0.0014801025390625, "tests_passed": true, "error": null}
{"code": "# Move all json files in the source directory\n    for file in os.listdir(SOURCE_DIR):\n        if file.endswith('.json'):\n            source_file = os.path.join(SOURCE_DIR, file)\n            target_file = os.path.join(TARGET_DIR, FILE_PATTERN.sub(r'\\1', file))\n            os.replace(source_file, target_file)\n\n    # Remove all json files in the target directory\n    shutil.rmtree(TARGET_DIR, ignore_errors=True)", "compilation_passed": true, "time": 0.0010960102081298828, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Iterate over files in source directory\n    for file in os.listdir(SOURCE_DIR):\n        # If the file is a json file\n        if file.endswith('.json'):\n            # Extract filename prefix\n            filename = FILE_PATTERN.search(file).group(1)\n            # Combine new filename with new source directory\n            new_file = os.path.join(TARGET_DIR, filename + '.json')\n            # Move file\n            shutil.move(os.path.join(SOURCE_DIR, file), new_file)", "compilation_passed": true, "time": 0.001074075698852539, "tests_passed": false, "error": "AttributeError"}
{"code": "# Define source directory and target directory\n    source_dir = os.path.normpath(SOURCE_DIR)\n    target_dir = os.path.normpath(TARGET_DIR)\n\n    # Check that source directory exists\n    if not os.path.isdir(source_dir):\n        raise Exception(\"Source directory does not exist: {}\".format(source_dir))\n\n    # Check that target directory exists\n    if not os.path.isdir(target_dir):\n        raise Exception(\"Target directory does not exist: {}\".format(target_dir))\n\n    # Get a list of all json files in source directory\n    files = glob.glob(os.path.join(source_dir, '*.json'))\n\n    # Check that files list is not empty\n    if not files:\n        raise Exception(\"No json files found in source directory: {}\".format(source_dir))\n\n    # Move all json files to target directory\n    for file in files:\n        # Get source file name and extension\n        source_file = os.path.basename(file)\n        match =", "compilation_passed": false, "time": 0.00017690658569335938, "tests_passed": false, "error": "SyntaxError"}
