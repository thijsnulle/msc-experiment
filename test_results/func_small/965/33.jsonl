{"code": "if not os.path.exists(source_directory):\n        return 0\n    if not os.path.isdir(source_directory):\n        return 0\n\n    file_counter = 0\n    for filename in os.listdir(source_directory):\n        match = re.search(pattern, filename)\n        if match:\n            full_path = os.path.join(source_directory, filename)\n            target = os.path.join(target_directory, match[0] + '.txt')\n            try:\n                shutil.move(full_path, target)\n                file_counter += 1\n            except:\n                pass\n    return file_counter", "compilation_passed": true, "time": 0.0028848648071289062, "tests_passed": true, "error": null}
{"code": "if os.path.isdir(source_directory):\n        files_to_move = []\n        for file_name in os.listdir(source_directory):\n            if re.search(pattern, file_name):\n                file_path = os.path.join(source_directory, file_name)\n                files_to_move.append(file_path)\n\n        if files_to_move:\n            for file_path in files_to_move:\n                shutil.move(file_path, target_directory)\n            return len(files_to_move)\n\n    return 0", "compilation_passed": true, "time": 0.005124092102050781, "tests_passed": true, "error": null}
{"code": "count = 0\n    if not os.path.exists(source_directory):\n        print(\"Source directory does not exist.\")\n        return count\n\n    if not os.path.isdir(source_directory):\n        print(\"Source directory is not a directory.\")\n        return count\n\n    if not os.path.exists(target_directory):\n        os.mkdir(target_directory)\n\n    for file_name in os.listdir(source_directory):\n        match = re.match(pattern, file_name)\n        if match:\n            source_file_path = os.path.join(source_directory, file_name)\n            target_file_path = os.path.join(target_directory, file_name)\n            shutil.move(source_file_path, target_file_path)\n            count += 1\n\n    return count", "compilation_passed": true, "time": 0.0024819374084472656, "tests_passed": true, "error": null}
{"code": "try:\n        src_files = os.listdir(source_directory)\n    except FileNotFoundError:\n        print(\"Source directory does not exist\")\n        return 0\n\n    match_count = 0\n    for filename in src_files:\n        match_found = re.match(pattern, filename)\n        if match_found is not None:\n            match_count += 1\n            dst = os.path.join(target_directory, filename)\n            try:\n                shutil.move(os.path.join(source_directory, filename), dst)\n            except FileNotFoundError:\n                print(\"File not found: %s\" % filename)\n        else:\n            print(\"Filename does not match regex pattern: %s\" % filename)\n\n    return match_count", "compilation_passed": true, "time": 0.0025589466094970703, "tests_passed": true, "error": null}
{"code": "# Check if source_directory exists and is a directory\n    if not os.path.isdir(source_directory):\n        return 0\n\n    # Create target directory if it doesn't exist\n    if not os.path.isdir(target_directory):\n        os.makedirs(target_directory)\n\n    # Get all file paths in source directory\n    files = [f for f in os.listdir(source_directory) if re.match(pattern, f)]\n\n    # Move each file to target directory\n    count = 0\n    for file in files:\n        source_path = os.path.join(source_directory, file)\n        target_path = os.path.join(target_directory, file)\n        os.replace(source_path, target_path)\n        count += 1\n\n    return count", "compilation_passed": true, "time": 0.002307891845703125, "tests_passed": true, "error": null}
{"code": "if os.path.isdir(source_directory):\n        if not os.path.exists(target_directory):\n            os.makedirs(target_directory)\n        file_names = os.listdir(source_directory)\n        file_list = [x for x in file_names if re.match(pattern, x)]\n        for file_name in file_list:\n            shutil.move(os.path.join(source_directory, file_name), os.path.join(target_directory, file_name))\n        return len(file_list)\n    return 0", "compilation_passed": true, "time": 0.002212047576904297, "tests_passed": true, "error": null}
{"code": "if not os.path.isdir(source_directory):\n        print(\"Source directory does not exist or is not a directory.\")\n        return 0\n\n    target_dir = os.path.join(target_directory, os.path.basename(os.path.normpath(source_directory)))\n    os.makedirs(target_dir, exist_ok=True)\n    num_files_moved = 0\n\n    for filename in os.listdir(source_directory):\n        if re.match(pattern, filename):\n            source_file = os.path.join(source_directory, filename)\n            target_file = os.path.join(target_dir, filename)\n            shutil.move(source_file, target_file)\n            num_files_moved += 1\n\n    print(f\"{num_files_moved} files moved to {target_dir}.\")\n    return num_files_moved", "compilation_passed": true, "time": 0.0025720596313476562, "tests_passed": true, "error": null}
{"code": "if not os.path.isdir(source_directory):\n        return 0\n\n    regex = re.compile(pattern)\n\n    files = [f for f in os.listdir(source_directory) if regex.search(f)]\n\n    if not os.path.exists(target_directory):\n        os.makedirs(target_directory)\n\n    for file in files:\n        shutil.move(os.path.join(source_directory, file), os.path.join(target_directory, file))\n\n    return len(files)", "compilation_passed": true, "time": 0.004829883575439453, "tests_passed": true, "error": null}
{"code": "# Create a Pattern object from the provided pattern string\n    pattern = re.compile(pattern)\n\n    # Iterate over files in the source directory\n    num_moved = 0\n    for filename in os.listdir(source_directory):\n        # Get the full path of the file\n        filepath = os.path.join(source_directory, filename)\n\n        # Check if the file exists\n        if not os.path.exists(filepath):\n            continue\n\n        # Check if the file matches the provided regex pattern\n        if re.search(pattern, filename):\n            # Move the file to the target directory\n            shutil.move(filepath, os.path.join(target_directory, filename))\n            num_moved += 1\n\n    return num_moved", "compilation_passed": true, "time": 0.004190921783447266, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "try:\n        if not os.path.exists(source_directory):\n            raise Exception(\"source_directory does not exist\")\n        if not os.path.isdir(source_directory):\n            raise Exception(\"source_directory is not a directory\")\n        if not os.path.exists(target_directory):\n            os.mkdir(target_directory)\n\n        num_files_moved = 0\n        for file in os.listdir(source_directory):\n            match = re.match(pattern, file)\n            if match:\n                file_path = os.path.join(source_directory, file)\n                target_file_path = os.path.join(target_directory, file)\n                shutil.move(file_path, target_file_path)\n                num_files_moved += 1\n        return num_files_moved\n    except Exception as e:\n        print(e)\n        return 0", "compilation_passed": true, "time": 0.002173900604248047, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(source_directory):\n        print(f\"Directory '{source_directory}' does not exist.\")\n        return 0\n    if not os.path.isdir(source_directory):\n        print(f\"'{source_directory}' is not a directory.\")\n        return 0\n    if not os.path.exists(target_directory):\n        os.makedirs(target_directory)\n    moved_count = 0\n    for file_name in os.listdir(source_directory):\n        match = re.match(pattern, file_name)\n        if match:\n            source = os.path.join(source_directory, file_name)\n            target = os.path.join(target_directory, file_name)\n            shutil.move(source, target)\n            moved_count += 1\n    print(f\"{moved_count} files moved from '{source_directory}' to '{target_directory}'.\")\n    return moved_count", "compilation_passed": true, "time": 0.00213623046875, "tests_passed": true, "error": null}
{"code": "if os.path.isdir(source_directory):\n        try:\n            os.makedirs(target_directory)\n        except FileExistsError:\n            pass\n        pattern = re.compile(pattern)\n        for filename in os.listdir(source_directory):\n            if pattern.search(filename):\n                shutil.move(os.path.join(source_directory, filename), os.path.join(target_directory, filename))\n        return len(os.listdir(target_directory))\n    else:\n        return 0", "compilation_passed": true, "time": 0.005546092987060547, "tests_passed": true, "error": null}
{"code": "# Check source_directory and target_directory exist\n    if not os.path.exists(source_directory):\n        print(f\"Source directory does not exist: {source_directory}\")\n        return 0\n    if not os.path.isdir(source_directory):\n        print(f\"{source_directory} is not a directory\")\n        return 0\n    if not os.path.exists(target_directory):\n        os.makedirs(target_directory)\n    if not os.path.isdir(target_directory):\n        print(f\"Target directory does not exist: {target_directory}\")\n        return 0\n\n    # Create a list of files to move\n    file_list = os.listdir(source_directory)\n    matching_files = [f for f in file_list if re.search(pattern, f)]\n\n    # Move matching files to the target directory\n    count = 0\n    for f in matching_files:\n        source_path = os.path.join(source_directory, f)\n        target_path = os.path.join(target_directory", "compilation_passed": false, "time": 0.00025200843811035156, "tests_passed": false, "error": "SyntaxError"}
{"code": "# check if source_directory exists\n    if not os.path.isdir(source_directory):\n        return 0\n\n    # create target directory if it doesn't exist\n    if not os.path.isdir(target_directory):\n        os.makedirs(target_directory)\n\n    # move files that match the pattern from source_directory to target_directory\n    moved_files = 0\n    for filename in os.listdir(source_directory):\n        match = re.search(pattern, filename)\n        if match:\n            source_filepath = os.path.join(source_directory, filename)\n            target_filepath = os.path.join(target_directory, filename)\n            shutil.move(source_filepath, target_filepath)\n            moved_files += 1\n    return moved_files", "compilation_passed": true, "time": 0.005545854568481445, "tests_passed": true, "error": null}
{"code": "if not os.path.isdir(source_directory):\n        print('Source directory does not exist or is not a directory')\n        return 0\n    elif not os.path.isdir(target_directory):\n        os.makedirs(target_directory)\n    elif os.path.isfile(source_directory):\n        print('Source directory is not a directory')\n        return 0\n    elif not os.path.exists(target_directory):\n        os.makedirs(target_directory)\n    else:\n        pass\n\n    pattern = re.compile(pattern)\n    total_moved = 0\n\n    for filename in os.listdir(source_directory):\n        if pattern.match(filename):\n            shutil.move(\n                os.path.join(source_directory, filename),\n                os.path.join(target_directory, filename)\n            )\n            total_moved += 1\n\n    return total_moved", "compilation_passed": true, "time": 0.002599000930786133, "tests_passed": true, "error": null}
{"code": "if not os.path.isdir(source_directory):\n        return 0\n    target_directory = os.path.join(target_directory, source_directory)\n    if not os.path.exists(target_directory):\n        os.makedirs(target_directory)\n    file_count = 0\n    for filename in os.listdir(source_directory):\n        match = re.search(pattern, filename)\n        if match:\n            file_path = os.path.join(source_directory, filename)\n            shutil.move(file_path, target_directory)\n            file_count += 1\n    return file_count", "compilation_passed": true, "time": 0.0023179054260253906, "tests_passed": false, "error": "shutil.Error"}
{"code": "if not os.path.exists(source_directory):\n        return 0\n    if not os.path.isdir(source_directory):\n        return 0\n    if not os.path.exists(target_directory):\n        os.makedirs(target_directory)\n    num_moved = 0\n    for file_name in os.listdir(source_directory):\n        if re.match(pattern, file_name):\n            full_file_path = os.path.join(source_directory, file_name)\n            shutil.move(full_file_path, os.path.join(target_directory, file_name))\n            num_moved += 1\n    return num_moved", "compilation_passed": true, "time": 0.002380847930908203, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(source_directory):\n        return 0\n\n    if not os.path.isdir(source_directory):\n        return 0\n\n    if not os.path.exists(target_directory):\n        os.mkdir(target_directory)\n\n    files = []\n\n    for file_name in os.listdir(source_directory):\n        if re.match(pattern, file_name):\n            file_path = os.path.join(source_directory, file_name)\n            files.append(file_path)\n\n    file_count = len(files)\n\n    if file_count > 0:\n        os.makedirs(target_directory, exist_ok=True)\n\n        for file in files:\n            shutil.move(file, target_directory)\n\n    return file_count", "compilation_passed": true, "time": 0.002634763717651367, "tests_passed": true, "error": null}
{"code": "files_moved = 0\n\n    if not os.path.isdir(source_directory):\n        return 0\n\n    if not os.path.isdir(target_directory):\n        os.makedirs(target_directory)\n\n    pattern = re.compile(pattern)\n\n    for file_name in os.listdir(source_directory):\n        match = pattern.match(file_name)\n\n        if match:\n            file_path = os.path.join(source_directory, file_name)\n            new_file_name = match.group()\n            new_file_path = os.path.join(target_directory, new_file_name)\n            shutil.move(file_path, new_file_path)\n            files_moved += 1\n\n    return files_moved", "compilation_passed": true, "time": 0.002214193344116211, "tests_passed": true, "error": null}
{"code": "if not os.path.isdir(source_directory):\n        return 0\n\n    if not os.path.exists(target_directory):\n        os.makedirs(target_directory)\n\n    matches = [f for f in os.listdir(source_directory) if re.search(pattern, f)]\n    for match in matches:\n        shutil.move(os.path.join(source_directory, match), os.path.join(target_directory, match))\n    return len(matches)", "compilation_passed": true, "time": 0.005188941955566406, "tests_passed": true, "error": null}
{"code": "# Check if source_directory exists and is a directory\n    if not os.path.isdir(source_directory):\n        return 0\n\n    # Create target_directory if it does not exist\n    os.makedirs(target_directory, exist_ok=True)\n\n    # Find matching files and move them\n    matches = list()\n    for filename in os.listdir(source_directory):\n        if re.match(pattern, filename):\n            matches.append(filename)\n            shutil.move(os.path.join(source_directory, filename), target_directory)\n\n    return len(matches)", "compilation_passed": true, "time": 0.0021398067474365234, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(source_directory) or not os.path.isdir(source_directory):\n        return 0\n\n    move_count = 0\n\n    for file_name in os.listdir(source_directory):\n        file_path = os.path.join(source_directory, file_name)\n\n        if re.search(pattern, file_name):\n            target_path = os.path.join(target_directory, file_name)\n\n            try:\n                os.makedirs(target_directory, exist_ok=True)\n                shutil.move(file_path, target_path)\n                move_count += 1\n            except Exception as e:\n                print(f\"Error moving {file_path} to {target_path}: {e}\")\n\n    return move_count", "compilation_passed": true, "time": 0.004755973815917969, "tests_passed": true, "error": null}
{"code": "files_moved = 0\n    # Validate source directory\n    if not os.path.isdir(source_directory):\n        return 0\n\n    # Validate target directory\n    if not os.path.isdir(target_directory):\n        os.mkdir(target_directory)\n\n    for filename in os.listdir(source_directory):\n        # Validate regex pattern\n        if re.match(pattern, filename) is not None:\n            shutil.move(\n                os.path.join(source_directory, filename),\n                os.path.join(target_directory, filename)\n            )\n            files_moved += 1\n    return files_moved", "compilation_passed": true, "time": 0.0021622180938720703, "tests_passed": true, "error": null}
{"code": "num_files_moved = 0\n\n    if not os.path.isdir(source_directory):\n        return num_files_moved\n\n    if not os.path.exists(target_directory):\n        os.makedirs(target_directory)\n\n    for filename in os.listdir(source_directory):\n        match = re.match(pattern, filename)\n        if match:\n            source_path = os.path.join(source_directory, filename)\n            target_path = os.path.join(target_directory, f\"{match.group()}-moved.txt\")\n            shutil.move(source_path, target_path)\n            num_files_moved += 1\n\n    return num_files_moved", "compilation_passed": true, "time": 0.0021331310272216797, "tests_passed": true, "error": null}
{"code": "if not os.path.isdir(source_directory):\n        print(f\"{source_directory} is not a directory.\")\n        return 0\n\n    try:\n        os.makedirs(target_directory)  # create target directory if it doesn't exist\n    except FileExistsError:\n        pass\n\n    num_files = 0\n    for file in os.listdir(source_directory):\n        match = re.search(pattern, file)\n        if match:\n            source_file = os.path.join(source_directory, file)\n            target_file = os.path.join(target_directory, f\"{match.group()}.txt\")\n            try:\n                os.rename(source_file, target_file)  # move file to target directory\n            except FileNotFoundError:\n                continue\n            except Exception as e:\n                print(f\"An error occurred while moving {file}: {e}\")\n                continue\n            num_files += 1\n    print(f\"{num_files} files moved successfully.\")\n    return num_files", "compilation_passed": true, "time": 0.0023741722106933594, "tests_passed": true, "error": null}
{"code": "files_count = 0\n    if not os.path.isdir(source_directory):\n        return 0\n    if not os.path.isdir(target_directory):\n        os.makedirs(target_directory)\n\n    for filename in os.listdir(source_directory):\n        match = re.search(pattern, filename)\n        if match:\n            source_file = os.path.join(source_directory, filename)\n            target_file = os.path.join(target_directory, match.group())\n            shutil.move(source_file, target_file)\n            files_count += 1\n\n    return files_count", "compilation_passed": true, "time": 0.002285003662109375, "tests_passed": true, "error": null}
{"code": "# If the source directory doesn't exist or isn't a directory, return 0\n    if not os.path.isdir(source_directory):\n        return 0\n\n    # Create the target directory if it doesn't exist\n    if not os.path.isdir(target_directory):\n        os.makedirs(target_directory)\n\n    # List files in the source directory\n    files = os.listdir(source_directory)\n\n    # Remove non-file elements from the list\n    files = [file for file in files if os.path.isfile(os.path.join(source_directory, file))]\n\n    # Filter files based on the given pattern\n    regex = re.compile(pattern)\n    files = [file for file in files if regex.match(file)]\n\n    # Move files to the target directory\n    for file in files:\n        shutil.move(os.path.join(source_directory, file), os.path.join(target_directory, file))\n\n    # Return the number of files moved\n    return len(files)", "compilation_passed": true, "time": 0.002174854278564453, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(source_directory):\n        print(f\"{source_directory} does not exist\")\n        return 0\n    elif not os.path.isdir(source_directory):\n        print(f\"{source_directory} is not a directory\")\n        return 0\n    elif not os.path.exists(target_directory):\n        os.makedirs(target_directory)\n    else:\n        os.chdir(source_directory)\n        file_list = [f for f in os.listdir(\".\") if re.search(pattern, f)]\n        for file in file_list:\n            shutil.move(file, target_directory)\n        print(f\"{len(file_list)} files moved successfully to {target_directory}\")", "compilation_passed": true, "time": 0.002315044403076172, "tests_passed": true, "error": null}
{"code": "try:\n        if os.path.isdir(source_directory) is False:\n            return 0\n        elif os.path.isdir(target_directory):\n            return 0\n        else:\n            file_list = os.listdir(source_directory)\n\n            regex = re.compile(pattern)\n            matches = list(filter(regex.match, file_list))\n            for file in matches:\n                source = source_directory + '/' + file\n                target = target_directory + '/' + file\n                shutil.move(source, target)\n\n    except:\n        return 0", "compilation_passed": true, "time": 0.0019800662994384766, "tests_passed": true, "error": null}
{"code": "# Check that source_directory exists and is a directory\n    if not os.path.isdir(source_directory):\n        return 0\n\n    # Create target directory if it doesn't exist\n    if not os.path.exists(target_directory):\n        os.makedirs(target_directory)\n\n    # Count the number of files successfully moved\n    move_count = 0\n\n    # Iterate through the files in the source directory\n    for file in os.listdir(source_directory):\n        # Check if file matches the pattern\n        if re.search(pattern, file):\n            # Combine source and target paths with os.path.join to create the complete path\n            source_path = os.path.join(source_directory, file)\n            target_path = os.path.join(target_directory, file)\n            # Move file to target directory\n            shutil.move(source_path, target_path)\n            move_count += 1\n\n    return move_count", "compilation_passed": true, "time": 0.0053861141204833984, "tests_passed": true, "error": null}
