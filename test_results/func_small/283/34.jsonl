{"code": "result = Counter()\n    for path in os.listdir(json_files_path):\n        if path.endswith('.json'):\n            with open(os.path.join(json_files_path, path)) as json_file:\n                data = json.load(json_file)\n                result.update({data[key]: 1})\n    return result", "compilation_passed": true, "time": 0.0021851062774658203, "tests_passed": false, "error": "KeyError"}
{"code": "if not os.path.isdir(json_files_path):\n        raise ValueError(f'Invalid directory: {json_files_path}')\n    if not os.path.isdir(json_files_path):\n        raise ValueError(f'Invalid directory: {json_files_path}')\n\n    result = Counter()\n    for filename in os.listdir(json_files_path):\n        with open(os.path.join(json_files_path, filename), 'r', encoding='utf-8') as file:\n            result += Counter(json.load(file)[key])\n    return result", "compilation_passed": true, "time": 0.002270936965942383, "tests_passed": false, "error": "KeyError"}
{"code": "res = Counter()\n    for root, dirs, files in os.walk(json_files_path):\n        for fname in files:\n            with open(os.path.join(root, fname), 'r') as fp:\n                data = json.load(fp)\n                res.update(Counter(data[key]))\n    return dict(res)", "compilation_passed": true, "time": 0.0021288394927978516, "tests_passed": false, "error": "KeyError"}
{"code": "count = Counter()\n    for filename in os.listdir(json_files_path):\n        with open(os.path.join(json_files_path, filename), 'r') as f:\n            data = json.load(f)\n        count.update(dict([(data[key], 1)]))\n    return dict(count)", "compilation_passed": true, "time": 0.002149343490600586, "tests_passed": false, "error": "KeyError"}
{"code": "files = os.listdir(json_files_path)\n    file_counter = Counter()\n\n    for f in files:\n        with open(f'{json_files_path}/{f}', 'r') as file:\n            file_counter[json.load(file)[key]] += 1\n\n    return file_counter", "compilation_passed": true, "time": 0.0020918846130371094, "tests_passed": false, "error": "KeyError"}
{"code": "result = Counter()\n    for json_file in os.listdir(json_files_path):\n        if json_file.endswith('.json'):\n            with open(f'{json_files_path}{json_file}', 'r') as file:\n                file_content = json.load(file)\n                result.update({key: file_content[key]})\n\n    return dict(result)", "compilation_passed": true, "time": 0.0020809173583984375, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "json_files = []\n\n    for dirpath, _, filenames in os.walk(json_files_path):\n        for filename in filenames:\n            if filename.endswith(\".json\"):\n                filepath = os.path.join(dirpath, filename)\n                json_files.append(filepath)\n\n    result = Counter()\n    for filepath in json_files:\n        with open(filepath, 'r') as file:\n            data = json.load(file)\n            result[data[key]] += 1\n    return result", "compilation_passed": true, "time": 0.002176046371459961, "tests_passed": false, "error": "KeyError"}
{"code": "count = Counter()\n\n    for path, _, files in os.walk(json_files_path):\n        for f in files:\n            if f.endswith(\".json\"):\n                with open(os.path.join(path, f), \"r\") as file:\n                    data = json.load(file)\n                    count.update([data.get(key, None)])\n\n    return count", "compilation_passed": true, "time": 0.0028166770935058594, "tests_passed": true, "error": null}
{"code": "result = Counter()\n    for path in os.listdir(json_files_path):\n        if path.endswith('.json'):\n            with open(os.path.join(json_files_path, path), 'r') as file:\n                data = json.load(file)\n                result[data[key]] += 1\n    return result", "compilation_passed": true, "time": 0.0021948814392089844, "tests_passed": false, "error": "KeyError"}
{"code": "files = [\n        json.loads(os.path.join(json_files_path, json_file))\n        for json_file in os.listdir(json_files_path)\n        if os.path.isfile(os.path.join(json_files_path, json_file))\n    ]\n\n    counts = Counter([json_file[key] for json_file in files])\n\n    return counts", "compilation_passed": true, "time": 0.0022459030151367188, "tests_passed": false, "error": "json.decoder.JSONDecodeError"}
{"code": "result_dict = Counter()\n    for filename in os.listdir(json_files_path):\n        with open(os.path.join(json_files_path, filename), 'r') as file:\n            data = json.load(file)\n            result_dict.update([data[key]])\n\n    return result_dict", "compilation_passed": true, "time": 0.0021827220916748047, "tests_passed": false, "error": "KeyError"}
{"code": "result = {}\n\n    for fname in os.listdir(json_files_path):\n        with open(os.path.join(json_files_path, fname)) as file:\n            for line in file:\n                jdata = json.loads(line)\n                if jdata[key] not in result:\n                    result[jdata[key]] = 0\n                result[jdata[key]] += 1\n\n    return result", "compilation_passed": true, "time": 0.0022802352905273438, "tests_passed": false, "error": "KeyError"}
{"code": "if not os.path.exists(json_files_path):\n        raise ValueError('Not a directory')\n\n    with open(json_files_path, 'r') as f:\n        all_json_data = f.read()\n    all_json_data = json.loads(all_json_data)\n\n    result = Counter()\n    for d in all_json_data:\n        result[d.get(key)] += 1\n    return result", "compilation_passed": true, "time": 0.0021996498107910156, "tests_passed": false, "error": "IsADirectoryError"}
{"code": "result_dict = {}\n    for filename in os.listdir(json_files_path):\n        with open(os.path.join(json_files_path, filename), 'r') as f:\n            data = json.load(f)\n            value = data[key]\n            if value in result_dict:\n                result_dict[value] += 1\n            else:\n                result_dict[value] = 1\n\n    return result_dict", "compilation_passed": true, "time": 0.0022449493408203125, "tests_passed": false, "error": "KeyError"}
{"code": "with os.scandir(json_files_path) as sd:\n        json_files = [sd.path for sd in sd if sd.is_file() and os.path.splitext(sd.name)[1] == \".json\"]\n        dict_ = {}\n        for path in json_files:\n            with open(path, 'r') as f:\n                d = json.load(f)\n                if key not in d:\n                    raise Exception(\"Key does not exist\")\n                key_ = d[key]\n                if key_ not in dict_:\n                    dict_[key_] = 1\n                else:\n                    dict_[key_] += 1\n\n        return dict_", "compilation_passed": true, "time": 0.0023758411407470703, "tests_passed": false, "error": "Exception"}
{"code": "counter = Counter()\n    for filename in os.listdir(json_files_path):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(json_files_path, filename), 'r') as file:\n                file_contents = json.load(file)\n                counter.update([file_contents[key]])\n    return counter", "compilation_passed": true, "time": 0.002260923385620117, "tests_passed": false, "error": "KeyError"}
{"code": "counter = Counter()\n\n    for filename in os.listdir(json_files_path):\n        with open(os.path.join(json_files_path, filename), 'r') as file:\n            data = json.load(file)\n            counter.update({data[key]: 1})\n\n    return counter", "compilation_passed": true, "time": 0.0021648406982421875, "tests_passed": false, "error": "KeyError"}
{"code": "json_files = [f for f in os.listdir(json_files_path) if f.endswith('.json')]\n\n    result = Counter()\n    for json_file in json_files:\n        with open(f\"{json_files_path}/{json_file}\", 'r') as file:\n            data = json.load(file)\n            result.update([getattr(data, key)])\n\n    return dict(result)", "compilation_passed": true, "time": 0.002079010009765625, "tests_passed": false, "error": "AttributeError"}
{"code": "res = Counter()\n    for json_file in os.listdir(json_files_path):\n        if json_file.endswith('.json'):\n            with open(os.path.join(json_files_path, json_file), 'r') as file:\n                json_dict = json.load(file)\n                res.update(json_dict[key])\n\n    return res", "compilation_passed": true, "time": 0.0022149085998535156, "tests_passed": false, "error": "KeyError"}
{"code": "counter = Counter()\n    for file in os.listdir(json_files_path):\n        with open(os.path.join(json_files_path, file), 'r') as f:\n            counter.update(json.load(f)[key])\n    return counter", "compilation_passed": true, "time": 0.002173900604248047, "tests_passed": false, "error": "KeyError"}
{"code": "counters = []\n    for filename in os.listdir(json_files_path):\n        if not filename.endswith(\".json\"):\n            continue\n        with open(f\"{json_files_path}/{filename}\", 'r') as file:\n            counters.append(Counter(json.load(file).get(key)))\n    return dict(zip(counters[0].keys(), sum(counters, Counter()).values()))", "compilation_passed": true, "time": 0.0029497146606445312, "tests_passed": true, "error": null}
{"code": "try:\n        json_files = [json.load(open(f)) for f in os.listdir(json_files_path) if f.endswith(\"json\")]\n    except Exception as e:\n        print(f\"Exception: {e}\")\n        return None\n\n    keys_dict = dict()\n    for json_file in json_files:\n        for key, value in json_file.items():\n            if key not in keys_dict:\n                keys_dict[key] = 0\n            keys_dict[key] += 1\n\n    return keys_dict", "compilation_passed": true, "time": 0.002610921859741211, "tests_passed": true, "error": null}
{"code": "directory_content = os.listdir(json_files_path)\n    json_files = [os.path.join(json_files_path, file) for file in directory_content if file.endswith('.json')]\n    counts = Counter(\n        [json.load(open(file, 'r', encoding='utf-8'))[key] for file in json_files]\n    )\n    return dict(counts)", "compilation_passed": true, "time": 0.002248048782348633, "tests_passed": false, "error": "KeyError"}
{"code": "json_files = []\n    for root, dirs, files in os.walk(json_files_path):\n        for filename in files:\n            if filename.endswith('.json'):\n                with open(os.path.join(root, filename)) as json_file:\n                    json_data = json.load(json_file)\n                    json_files.append(json_data)\n\n    result = Counter()\n    for json_data in json_files:\n        if isinstance(json_data, list):\n            result.update({item[key]: 1} for item in json_data)\n        else:\n            result.update({json_data[key]: 1})\n\n    return dict(result)", "compilation_passed": true, "time": 0.002772808074951172, "tests_passed": false, "error": "KeyError"}
{"code": "json_files_path = json_files_path or os.curdir\n    files = os.listdir(json_files_path)\n    data = []\n    for file in files:\n        with open(file, 'r') as f:\n            data.append(json.load(f))\n    result = Counter(dict(map(lambda x: (x[key], 1), data)))\n    return result", "compilation_passed": true, "time": 0.0022919178009033203, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if not isinstance(json_files_path, str):\n        raise TypeError(f\"json_files_path must be a string, not {type(json_files_path)}\")\n    if not os.path.exists(json_files_path):\n        raise FileNotFoundError(f\"json_files_path not found: {json_files_path}\")\n    if not os.path.isdir(json_files_path):\n        raise NotADirectoryError(f\"json_files_path is not a directory: {json_files_path}\")\n\n    files = os.listdir(json_files_path)\n    results = Counter()\n\n    for f in files:\n        if not f.endswith('.json'):\n            continue\n        with open(os.path.join(json_files_path, f), 'r') as file:\n            results.update(json.load(file)[key])\n\n    return dict(results)", "compilation_passed": true, "time": 0.002402782440185547, "tests_passed": false, "error": "KeyError"}
{"code": "if key not in ['name', 'product']:\n        raise ValueError(f\"The key '{key}' is invalid, it can only be either 'name' or 'product'.\")\n    result = {}\n    for file_path in os.listdir(json_files_path):\n        with open(f\"{json_files_path}/{file_path}\") as file:\n            data = json.load(file)\n            if key in data:\n                result[data[key]] = data.get('quantity', 1)\n    return result", "compilation_passed": true, "time": 0.002880096435546875, "tests_passed": true, "error": null}
{"code": "json_files = []\n    for i in range(3):\n        json_files.append(f\"{json_files_path}{i}.json\")\n\n    with open(json_files[0]) as file:\n        data = json.load(file)\n        counter = Counter([data[key]])\n    for i in range(1, len(json_files)):\n        with open(json_files[i]) as file:\n            data = json.load(file)\n            counter.update([data[key]])\n    return counter", "compilation_passed": true, "time": 0.002285003662109375, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "json_files = os.listdir(json_files_path)\n    count = Counter()\n    for file_path in json_files:\n        with open(os.path.join(json_files_path, file_path), 'r') as f:\n            d = json.load(f)\n            count[d[key]] += 1\n\n    return count", "compilation_passed": true, "time": 0.0022988319396972656, "tests_passed": false, "error": "KeyError"}
{"code": "result = Counter()\n\n    for path in os.listdir(json_files_path):\n        with open(os.path.join(json_files_path, path), 'r') as f:\n            result.update(json.load(f)[key])\n\n    return result", "compilation_passed": true, "time": 0.0022420883178710938, "tests_passed": false, "error": "KeyError"}
