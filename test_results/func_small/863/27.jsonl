{"code": "sums = []\n\n    for numbers_list in list_of_lists:\n        current_sum = 0\n        for number in numbers_list:\n            current_sum += (number ** 2)\n        sums.append(current_sum)\n    return sums", "compilation_passed": true, "time": 0.0006320476531982422, "tests_passed": true, "error": null}
{"code": "# Define the number of elements in each list\n    num_elems = [len(x) for x in list_of_lists]\n\n    # Initialize a list to store the sums\n    sums = []\n\n    # Iterate over each set of numbers in the list\n    for i in range(len(list_of_lists)):\n        # Calculate the sum of squares for the current set\n        sum_squares = sum([x**2 for x in list_of_lists[i]])\n\n        # Convert the sum to a float\n        sum_squares_float = float(sum_squares)\n\n        # Append the sum to the list\n        sums.append(sum_squares_float)\n\n    return sums", "compilation_passed": true, "time": 0.0006711483001708984, "tests_passed": true, "error": null}
{"code": "sums = [0.0] * len(list_of_lists)\n    for index, list_ in enumerate(list_of_lists):\n        sums[index] = np.sum(np.square(list_))\n    return sums", "compilation_passed": true, "time": 0.0007328987121582031, "tests_passed": true, "error": null}
{"code": "# Initialize empty list to store the sums of squares\n    sums = []\n\n    # Iterate through each list in list_of_lists\n    for numbers in list_of_lists:\n\n        # Calculate the sum of squares for each number in the list\n        sum_of_squares = sum([i ** 2 for i in numbers])\n        sums.append(sum_of_squares)\n\n    # Return the list of sums of squares\n    return sums", "compilation_passed": true, "time": 0.0006170272827148438, "tests_passed": true, "error": null}
{"code": "return [math.fsum(map(lambda x: x**2, element)) for element in list_of_lists]", "compilation_passed": true, "time": 0.0006079673767089844, "tests_passed": true, "error": null}
{"code": "# TODO: implement this function\n\n    sums = [0] * len(list_of_lists)\n    for i, num_list in enumerate(list_of_lists):\n        n = len(num_list)\n        sums[i] = sum([pow(num, 2) for num in num_list])\n\n    return sums", "compilation_passed": true, "time": 0.0006909370422363281, "tests_passed": true, "error": null}
{"code": "sums = []\n    for i in list_of_lists:\n        sums.append(sum([j ** 2 for j in i]))\n    return sums", "compilation_passed": true, "time": 0.0006170272827148438, "tests_passed": true, "error": null}
{"code": "return [\n        sum([pow(number, 2) for number in list_of_list])\n        for list_of_list in list_of_lists\n    ]", "compilation_passed": true, "time": 0.0005917549133300781, "tests_passed": true, "error": null}
{"code": "# Convert the list_of_lists to a numpy array for convenience\n    list_of_lists = np.array(list_of_lists)\n\n    # Calculate the lengths of each list and use them as the number of elements to consider from POSSIBLE_NUMBERS\n    lengths = list_of_lists.shape[1]\n\n    # Calculate the sums of squares for each list\n    sums = []\n    for i in range(list_of_lists.shape[0]):\n        sums.append(sum(np.square(POSSIBLE_NUMBERS[:lengths[i]])))\n\n    return sums", "compilation_passed": true, "time": 0.001071929931640625, "tests_passed": false, "error": "IndexError"}
{"code": "sums = [sum(i*i for i in a) for a in list_of_lists]\n    return sums", "compilation_passed": true, "time": 0.0006139278411865234, "tests_passed": true, "error": null}
{"code": "sums = []\n\n    for list_ in list_of_lists:\n        sums.append(np.sum(np.power(POSSIBLE_NUMBERS[:len(list_)], 2)))\n\n    return sums", "compilation_passed": true, "time": 0.0005810260772705078, "tests_passed": true, "error": null}
{"code": "sums = []\n    for x in list_of_lists:\n        y = np.sum(x * x)\n        sums.append(math.sqrt(y))\n    return sums", "compilation_passed": true, "time": 0.0005419254302978516, "tests_passed": false, "error": "TypeError"}
{"code": "sums = []\n    for lst in list_of_lists:\n        sums.append(sum(x ** 2 for x in lst))\n    return sums", "compilation_passed": true, "time": 0.0006639957427978516, "tests_passed": true, "error": null}
{"code": "return list(map(sum_squares, list_of_lists))", "compilation_passed": true, "time": 0.0005168914794921875, "tests_passed": false, "error": "NameError"}
{"code": "sums = []\n\n    for numbers in list_of_lists:\n        # Calculate the sum of squares for the numbers in the current list\n        # using numpy broadcasting and sum() function\n        sum_of_squares = np.sum(numbers**2)\n        sums.append(sum_of_squares)\n\n    return sums", "compilation_passed": true, "time": 0.0005362033843994141, "tests_passed": false, "error": "TypeError"}
{"code": "sums = [0] * len(list_of_lists)\n\n    for i in range(len(list_of_lists)):\n        for j in range(len(list_of_lists[i])):\n            sums[i] += list_of_lists[i][j] ** 2\n\n    return sums", "compilation_passed": true, "time": 0.0006151199340820312, "tests_passed": true, "error": null}
{"code": "return np.array([np.sum(list_of_lists[i] ** 2) for i in range(len(list_of_lists))])", "compilation_passed": true, "time": 0.0006892681121826172, "tests_passed": true, "error": null}
{"code": "sums = []\n    for numbers_set in list_of_lists:\n        sums.append(sum(num**2 for num in numbers_set))\n\n    return sums", "compilation_passed": true, "time": 0.0006251335144042969, "tests_passed": true, "error": null}
{"code": "sums = []\n    for list in list_of_lists:\n        sums.append(np.sum(list * list))\n    return sums", "compilation_passed": true, "time": 0.0005271434783935547, "tests_passed": false, "error": "TypeError"}
{"code": "sums = []\n    for i in range(len(list_of_lists)):\n        list_of_lists[i] = [math.sqrt(num) for num in list_of_lists[i]]\n        sums.append(np.sum(np.array(list_of_lists[i])))\n\n    return sums", "compilation_passed": true, "time": 0.0006830692291259766, "tests_passed": true, "error": null}
{"code": "# Create an empty list to store the sums\n    sums = []\n\n    # Iterate through the lists in list_of_lists\n    for numbers in list_of_lists:\n        # Calculate the sum of squares\n        sum_of_squares = np.sum(numbers**2)\n\n        # Append the sum to sums\n        sums.append(sum_of_squares)\n\n    # Return the list of sums\n    return sums", "compilation_passed": true, "time": 0.0005249977111816406, "tests_passed": false, "error": "TypeError"}
{"code": "return [np.square(i).sum() for i in list_of_lists]", "compilation_passed": true, "time": 0.0006060600280761719, "tests_passed": true, "error": null}
{"code": "# Create an empty list to store the sums\n    sums = []\n\n    # Loop through each list in list_of_lists\n    for nums in list_of_lists:\n        # Initialize a variable to store the sum\n        total = 0\n\n        # Loop through each element in the list\n        for x in nums:\n            # Calculate the square of the element\n            square = x * x\n\n            # Add the square to the total\n            total += square\n\n        # Add the total to sums\n        sums.append(total)\n\n    # Return the list of sums\n    return sums", "compilation_passed": true, "time": 0.0006048679351806641, "tests_passed": true, "error": null}
{"code": "sums = []\n    for list_of_nums in list_of_lists:\n        sum_of_squares = sum(num**2 for num in list_of_nums)\n        sums.append(sum_of_squares)\n    return sums", "compilation_passed": true, "time": 0.0006608963012695312, "tests_passed": true, "error": null}
{"code": "# Initialize a list to store the sums\n    sums = []\n    # Iterate over each list in list_of_lists\n    for lst in list_of_lists:\n        # Calculate the sum of squares for this list\n        s = sum(np.square(lst))\n        # Add the sum to the list of sums\n        sums.append(s)\n    # Return the list of sums\n    return sums", "compilation_passed": true, "time": 0.0006079673767089844, "tests_passed": true, "error": null}
{"code": "sums = []\n    for list_ in list_of_lists:\n        sum_ = sum(map(lambda x: (x * x), list_))\n        sums.append(sum_)\n    return sums", "compilation_passed": true, "time": 0.0006020069122314453, "tests_passed": true, "error": null}
{"code": "# The sum of the squares of numbers from POSSIBLE_NUMBERS is equal to (m + 1)**2 * n\n    # So (10 + 1)**2 = 10000, we have to choose n such that 10000 = n * (m + 1)**2\n    # We can find the value of n using this formula: n = sqrt(10000 / (m + 1)**2)\n    sums = []\n    for list in list_of_lists:\n        m = len(list) - 1  # Number of possible numbers considered from POSSIBLE_NUMBERS\n        n = math.sqrt(10000 / (m + 1)**2)\n        sums.append(sum(x**2 for x in list) * (m + 1)**2 / n)\n    return sums", "compilation_passed": true, "time": 0.0006389617919921875, "tests_passed": false, "error": "ZeroDivisionError"}
{"code": "sums = [sum(n ** 2 for n in row) for row in list_of_lists]\n    return sums", "compilation_passed": true, "time": 0.0006022453308105469, "tests_passed": true, "error": null}
{"code": "result = [math.fsum(pow(i, 2) for i in list_of_lists[idx]) for idx in range(len(list_of_lists))]\n    return result", "compilation_passed": true, "time": 0.0005919933319091797, "tests_passed": true, "error": null}
{"code": "sums = []\n\n    for numbers in list_of_lists:\n        # Calculate the sum of the squares of each number in the list\n        square_sum = np.sum(np.multiply(numbers, numbers))\n\n        # Calculate the sum of the squares of the numbers modulo 2\n        modulo_sum = np.sum(square_sum % 2)\n\n        # Calculate the sum of the squares of the numbers modulo 3\n        divide_sum = np.sum(square_sum % 3)\n\n        # Calculate the sum of the squares of the numbers modulo 5\n        multiply_sum = np.sum(square_sum * 5)\n\n        # Calculate the sum of the squares of the numbers modulo 10\n        sqrt_sum = np.sum(square_sum ** (1 / 2))\n\n        # Calculate the sum of the squares of the numbers modulo 15\n        floor_sum = np.sum(np.floor(square_sum / 15))\n\n        # Append the calculated sums to the list sums\n        sums.append(\n            (square_sum + modulo", "compilation_passed": false, "time": 0.0001659393310546875, "tests_passed": false, "error": "SyntaxError"}
