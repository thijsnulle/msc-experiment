{"code": "fig = plt.figure()\n    dist = stats.norm(mu, sigma)\n    x = np.linspace(dist.ppf(0.01), dist.ppf(0.99), 1000)\n    ax = fig.add_subplot(1, 1, 1)\n    ax.plot(x, dist.pdf(x))\n    plt.show()\n    return fig", "compilation_passed": true, "time": 0.01166081428527832, "tests_passed": true, "error": null}
{"code": "fig = plt.figure(figsize=(8, 4))\n    fig.suptitle(\"Normal Distribution\")\n    fig.subplots_adjust(wspace=0.5, left=0.15, bottom=0.15, top=0.85)\n    ax = fig.subplots(1, 3)\n    x = np.linspace(-3, 3, 50)\n    y = stats.norm.pdf(x, mu, sigma)\n    ax[0].plot(x, y)\n    ax[0].set_ylabel(\"Probability\")\n    ax[0].set_xlabel(\"x\")\n    ax[0].axvline(x=mu, color='black', label='mu')\n    ax[0].axvspan(mu-3*sigma, mu+3*sigma, alpha=0.5, color='red', label=r'$\\sigma=1$')\n    ax[0].xaxis.set_label_coords(0.5, -0.01)\n    ax[1]", "compilation_passed": true, "time": 0.01754593849182129, "tests_passed": false, "error": "AttributeError"}
{"code": "# Generate samples\n    samples = np.random.normal(mu, sigma, num_samples)\n\n    # Create a histogram plot with the samples as bins\n    fig, ax = plt.subplots()\n    ax.hist(samples, bins=20, density=True, color='red', label='Histogram')\n\n    # Add the normal distribution plot\n    x = np.linspace(0, 10, 100)\n    ax.plot(x, stats.norm.pdf(x, mu, sigma), color='blue', label='Normal Distribution')\n\n    # Add axis labels, title, and legend\n    ax.set_xlabel('Sample Values')\n    ax.set_ylabel('Probability')\n    ax.set_title('Normal Distribution')\n    ax.legend(loc='best')\n\n    # Show the plot\n    plt.show()\n    return plt", "compilation_passed": true, "time": 0.07871794700622559, "tests_passed": true, "error": null}
{"code": "return stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)", "compilation_passed": true, "time": 0.0011038780212402344, "tests_passed": false, "error": "AttributeError"}
{"code": "fig, ax = plt.subplots(1)\n    x = np.linspace(mu - 10, mu + 10, 200)\n    pdf = stats.norm.pdf(x, mu, sigma)\n    ax.plot(x, pdf, color=\"#666666\", linewidth=3, alpha=1, label=\"PDF\")\n    ax.plot(x, stats.norm.cdf(x, mu, sigma), '--', color=\"#666666\", linewidth=3, alpha=1, label=\"CDF\")\n    ax.hist(np.random.normal(mu, sigma, num_samples), density=True, color=\"#FF7F50\", alpha=1, label=\"Histogram\")\n    ax.legend(loc='upper right')\n    fig.show()\n    return fig", "compilation_passed": true, "time": 0.030025243759155273, "tests_passed": true, "error": null}
{"code": "# Your code here\n    mu = 0\n    sigma = 1\n\n    samples = np.random.normal(mu, sigma, num_samples)\n\n    plt.title('Normal Distribution')\n    plt.hist(samples, bins=20, density=True)\n    plt.show()\n    return plt", "compilation_passed": true, "time": 0.020069122314453125, "tests_passed": true, "error": null}
{"code": "# TODO\n    pass", "compilation_passed": true, "time": 0.0008938312530517578, "tests_passed": false, "error": "AttributeError"}
{"code": "fig = plt.figure()\n    x = np.linspace(-4*sigma,4*sigma, 1000)\n    y = stats.norm.pdf(x,mu,sigma)\n    plt.plot(x,y)\n    plt.show()\n    return fig", "compilation_passed": true, "time": 0.16833996772766113, "tests_passed": true, "error": null}
{"code": "# -------------------------------------------------------------------------------------------------------------------\n    # TODO: Implement this function.\n    # -------------------------------------------------------------------------------------------------------------------\n    # raise NotImplementedError\n\n    fig, ax = plt.subplots()\n    ax.set_title('Normal Distribution')\n\n    # Draw the normal distribution with mean mu and standard deviation sigma\n    x = np.linspace(mu - 3 * sigma, mu + 3 * sigma, 1000)\n    y = stats.norm(mu, sigma).pdf(x)\n\n    # Draw the histogram of samples from the normal distribution\n    ax.hist(np.random.normal(mu, sigma, num_samples), bins=50, alpha=0.5)\n\n    # Overlay the normal distribution on the histogram\n    ax.plot(x, y, color='r", "compilation_passed": false, "time": 0.000102996826171875, "tests_passed": false, "error": "SyntaxError"}
{"code": "fig = plt.figure()\n    x = stats.norm.rvs(size=num_samples, loc=mu, scale=sigma)\n    ax = fig.add_subplot(111)\n    ax.hist(x, bins=25, density=True)\n    ax.set_xlim([-4, 4])\n    return fig", "compilation_passed": true, "time": 0.01616215705871582, "tests_passed": true, "error": null}
{"code": "# TODO: Write your answer here.\n    fig, ax = plt.subplots()\n    ax.set_title('Normal Distribution')\n    x = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    ax.hist(x, density=True, bins=int(num_samples/10))\n    plt.show()\n    return fig", "compilation_passed": true, "time": 0.028259754180908203, "tests_passed": true, "error": null}
{"code": "x = np.random.normal(mu, sigma, num_samples)\n    fig, ax = plt.subplots()\n    ax.hist(x, bins=10, density=True, label=\"Histogram\", alpha=0.5)\n    ax.set_xlabel('x')\n    ax.set_ylabel('Probability')\n    ax.set_title('Normal Distribution')\n    return fig", "compilation_passed": true, "time": 0.013416767120361328, "tests_passed": true, "error": null}
{"code": "# TODO: implement this function\n    return fig", "compilation_passed": true, "time": 0.0009138584136962891, "tests_passed": false, "error": "NameError"}
{"code": "samples = np.random.normal(mu, sigma, num_samples)\n    fig, ax = plt.subplots()\n    ax.hist(samples, density=True, bins=30, label='histogram')\n    ax.axvline(mu, color='red', label='mean')\n    ax.legend(loc='best', title=\"Distribution\")\n    ax.set_title('Normal Distribution')\n    return fig", "compilation_passed": true, "time": 0.0856020450592041, "tests_passed": true, "error": null}
{"code": "fig = plt.figure(dpi=300, figsize=(12, 9))\n    x = np.random.normal(mu, sigma, num_samples)\n    plt.hist(x, bins=30, density=True, alpha=0.7, label='Sample')\n    plt.plot(x, stats.norm.pdf(x, mu, sigma), 'b', label='PDF')\n    plt.title('Normal Distribution')\n    plt.legend()\n    return fig", "compilation_passed": true, "time": 0.08872604370117188, "tests_passed": true, "error": null}
{"code": "fig = plt.figure()\n    x = np.random.normal(mu, sigma, num_samples)\n    plt.title('Normal Distribution')\n    plt.hist(x)\n    return fig", "compilation_passed": true, "time": 0.013689994812011719, "tests_passed": true, "error": null}
{"code": "fig = plt.figure()\n    plt.title('Normal Distribution')\n    # YOUR CODE GOES HERE #\n    # YOUR CODE GOES HERE #\n    # YOUR CODE GOES HERE #\n    # YOUR CODE GOES HERE #\n    return fig", "compilation_passed": true, "time": 0.011525869369506836, "tests_passed": true, "error": null}
{"code": "x = np.random.normal(mu, sigma, num_samples)\n    fig = plt.figure()\n    plt.hist(x, density=True)\n    plt.plot(x, stats.norm.pdf(x, mu, sigma))\n    return fig", "compilation_passed": true, "time": 0.01353597640991211, "tests_passed": true, "error": null}
{"code": "# Generate samples from a standard normal distribution\n    samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n\n    # Plot a histogram of the samples\n    plt.hist(samples, density=True, bins=30)\n\n    # Label the plot\n    plt.title('Normal Distribution')\n\n    # Return the figure so that it can be checked for correctness\n    return plt", "compilation_passed": true, "time": 0.028834104537963867, "tests_passed": true, "error": null}
{"code": "data = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig, ax = plt.subplots(1,1, figsize=(10,7))\n    ax.set_title(\"Normal Distribution\")\n    ax.axvline(mu, color=\"b\", label='mu = {}'.format(mu))\n    ax.axvline(mu + sigma, color=\"g\", label='sigma = {}'.format(sigma))\n    ax.hist(data, bins=50, density=True)\n    ax.legend(loc='best', frameon=True)\n    return fig", "compilation_passed": true, "time": 0.10506701469421387, "tests_passed": true, "error": null}
{"code": "fig = plt.figure()\n    x = stats.norm.rvs(mu, sigma, num_samples)\n    plt.subplot(121)\n    plt.title('Normal Distribution')\n    plt.hist(x, bins=30, density=True)\n    plt.axvline(x=mu, color='r')\n    return fig", "compilation_passed": true, "time": 0.08634400367736816, "tests_passed": true, "error": null}
{"code": "dist = stats.norm(mu, sigma)\n    x = np.linspace(dist.ppf(0.0001), dist.ppf(0.9999), 1000)\n    plt.plot(x, dist.pdf(x))\n    plt.hist(dist.rvs(num_samples), density=True)\n    plt.title(\"Normal Distribution\")\n    return plt", "compilation_passed": true, "time": 0.014777898788452148, "tests_passed": true, "error": null}
{"code": "# ======== Start of your code ============\n    # ======== End of your code ============\n    return fig", "compilation_passed": true, "time": 0.0009002685546875, "tests_passed": false, "error": "NameError"}
{"code": "fig = plt.figure()\n    plt.hist(stats.norm.rvs(mu, sigma, num_samples), bins=200)\n    plt.title(\"Normal Distribution\")\n\n    return fig", "compilation_passed": true, "time": 0.2235100269317627, "tests_passed": true, "error": null}
{"code": "# ------------------------------------------------------------------------------------------\n    # TODO: Insert your code here\n    # ------------------------------------------------------------------------------------------\n    samples = stats.norm(mu, sigma).rvs(size = num_samples)\n    plt.figure(figsize = (10,10),dpi = 100)\n    plt.title(\"Normal Distribution\")\n    plt.hist(samples, bins = 30)\n    return plt", "compilation_passed": true, "time": 0.01892995834350586, "tests_passed": true, "error": null}
{"code": "fig, ax = plt.subplots()\n    x = np.linspace(-3, 3, 100)\n    ax.plot(x, stats.norm.pdf(x,mu,sigma), linewidth=5, alpha=0.6, color='g')\n    ax.hist(np.random.normal(0, 1, 1000), density=True, bins=100, color='pink')\n    ax.set_title('Normal Distribution')\n    return fig", "compilation_passed": true, "time": 0.13631176948547363, "tests_passed": true, "error": null}
{"code": "# TODO: Replace `pass` with your implementation.\n    mu = 0\n    sigma = 1\n\n    random_normal = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    plt.hist(random_normal)\n    plt.title(\"Normal Distribution\")\n    plt.show()", "compilation_passed": true, "time": 0.0034720897674560547, "tests_passed": false, "error": "AttributeError"}
{"code": "samples = stats.norm.rvs(loc=mu, scale=sigma, size=num_samples)\n    fig, ax = plt.subplots()\n    ax.hist(samples, density=True, label='histogram')\n    ax.plot(samples, stats.norm.pdf(samples, loc=mu, scale=sigma),\n            label='pdf')\n    ax.legend()\n    plt.title('Normal Distribution')\n    return plt.gcf()", "compilation_passed": true, "time": 0.06549191474914551, "tests_passed": true, "error": null}
{"code": "# TODO: Implement this function\n    fig = plt.figure(figsize=(10,6))\n    ax = plt.subplot()\n\n    x_vals = np.linspace(mu - 3*sigma, mu + 3*sigma, 100)\n    ax.plot(x_vals, stats.norm.pdf(x_vals, mu, sigma), lw=2, alpha=0.6, color=\"C1\")\n    ax.hist(np.random.normal(mu, sigma, 1000), bins=50, alpha=0.6, color=\"C2\", label=\"histogram\")\n\n    ax.axvline(mu, color=\"C3\", label=\"mu = \"+str(mu))\n    ax.text(mu-0.3, 1.15, 'mu = '+str(mu))\n\n    ax.legend()\n    ax.set_xlim([mu-3*sigma, mu+3*sigma])\n    ax.set_ylim([0, 0.25])\n", "compilation_passed": true, "time": 0.021996021270751953, "tests_passed": false, "error": "AttributeError"}
{"code": "# TODO: your code goes here\n\n    # TODO: your code goes here\n\n    # TODO: your code goes here\n    pass\n    return plt", "compilation_passed": true, "time": 0.000985860824584961, "tests_passed": true, "error": null}
