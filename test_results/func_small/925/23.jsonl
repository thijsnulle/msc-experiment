{"code": "rnd_gen = np.random.default_rng(seed)\n    data = rnd_gen.integers(1, 100, data_size)\n    data[data < 10] = -1\n    return pd.DataFrame(data, columns=column_names)", "compilation_passed": true, "time": 0.0010819435119628906, "tests_passed": false, "error": "ValueError"}
{"code": "df = pd.DataFrame(np.random.randint(1, 100, (data_size, len(column_names))), columns=column_names)\n    df[df < 10] = -1\n    return df", "compilation_passed": true, "time": 0.0025479793548583984, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    data = pd.DataFrame(np.random.randint(1, 100, (data_size, len(column_names))), columns=column_names)\n    data[data < 10] = -1\n    return data", "compilation_passed": true, "time": 0.002583026885986328, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    df = pd.DataFrame(np.random.uniform(size=(data_size, len(column_names))), columns=column_names)\n    df.loc[df[column_names[0]] < 10, column_names[0]] = -1\n\n    return df", "compilation_passed": true, "time": 0.0012347698211669922, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n\n    df = pd.DataFrame(\n        {\n            col: np.random.randint(1, 100, data_size)\n            for col in column_names\n        }\n    )\n    df[df < 10] = -1\n\n    return df", "compilation_passed": true, "time": 0.0026581287384033203, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n\n    df = pd.DataFrame(np.random.randint(1, 101, (data_size, len(column_names))), columns=column_names)\n\n    df.loc[df[column_names[0]] < 10, column_names[0]] = -1\n\n    return df", "compilation_passed": true, "time": 0.001232147216796875, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    df = pd.DataFrame(\n        data={col: np.random.randint(1, 100, data_size) for col in column_names}\n    )\n    df.loc[df < 10, 'A'] = -1\n    return df", "compilation_passed": true, "time": 0.0015697479248046875, "tests_passed": false, "error": "KeyError"}
{"code": "np.random.seed(seed)\n    data = pd.DataFrame(np.random.randint(1, 100, size=(data_size, len(column_names))))\n    data.where(data < 10, -1, inplace=True)\n    return data", "compilation_passed": true, "time": 0.001302957534790039, "tests_passed": true, "error": null}
{"code": "# Generate random numeric values between 1 and 100, inclusive\n    np.random.seed(seed)\n    data = np.random.randint(1, 100, (data_size, len(column_names)))\n\n    # Replace all occurrences of values less than 10 with -1\n    for column_idx, column_name in enumerate(column_names):\n        data[:, column_idx][data[:, column_idx] < 10] = -1\n\n    return pd.DataFrame(data, columns=column_names)", "compilation_passed": true, "time": 0.0016989707946777344, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n\n    return pd.DataFrame(np.random.randint(1, 101, size=data_size).astype(int)).replace(to_replace=10, value=-1).astype(int)", "compilation_passed": true, "time": 0.0008561611175537109, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n\n    # Replace all values less than 10 with -1\n    return pd.DataFrame({\n        column: np.where(df <= 10, -1, df) for column, df in zip(column_names, np.random.rand(data_size, len(column_names)) * 100)\n    })", "compilation_passed": true, "time": 0.0008718967437744141, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n\n    # Generate a random Pandas DataFrame with values between 1 and 100, inclusive, for each column in column_names\n    df = pd.DataFrame(np.random.randint(1, 101, (data_size, len(column_names))), columns=column_names)\n\n    # Replace values less than 10 with -1 in each column\n    df.apply(lambda col: np.where(col < 10, -1, col), axis=0, inplace=True)\n\n    return df", "compilation_passed": true, "time": 0.0009260177612304688, "tests_passed": false, "error": "TypeError"}
{"code": "rng = np.random.RandomState(seed)\n    data = rng.uniform(1, 100, data_size)\n    data[data < 10] = -1\n\n    df = pd.DataFrame(data, columns=column_names)\n\n    return df", "compilation_passed": true, "time": 0.0012102127075195312, "tests_passed": false, "error": "ValueError"}
{"code": "# Initialize the random generator\n    np.random.seed(seed)\n\n    # Create a Pandas DataFrame with random numeric values between 1 and 100, inclusive\n    data = np.random.randint(1, 101, (data_size, len(column_names)))\n\n    # Replace all occurrences of values less than 10 with -1\n    data[data < 10] = -1\n\n    return pd.DataFrame(data, columns=column_names)", "compilation_passed": true, "time": 0.0016169548034667969, "tests_passed": true, "error": null}
{"code": "# Initialize random generator with seed\n    rng = np.random.default_rng(seed)\n\n    # Generate random values between 1 and 100 inclusive\n    data = rng.integers(1, 101, size=data_size)\n\n    # Replace values less than 10 with -1\n    mask = data < 10\n    data[mask] = -1\n\n    # Create a Pandas DataFrame with the generated data and column names\n    return pd.DataFrame(data, columns=column_names)", "compilation_passed": true, "time": 0.34148526191711426, "tests_passed": false, "error": "ValueError"}
{"code": "np.random.seed(seed)\n    data = np.random.randint(1, 100, data_size)\n    data[data < 10] = -1\n    return pd.DataFrame(data, columns=column_names)", "compilation_passed": true, "time": 0.0009758472442626953, "tests_passed": false, "error": "ValueError"}
{"code": "np.random.seed(seed)\n    df = pd.DataFrame(np.random.randint(1, 100, (data_size, len(column_names)))*100)\n    df.iloc[df <= 10] = -1\n    return df", "compilation_passed": true, "time": 0.0008900165557861328, "tests_passed": false, "error": "TypeError"}
{"code": "np.random.seed(seed)\n    df = pd.DataFrame(np.random.randint(1, 101, size=(data_size, len(column_names))),\n                      columns=column_names)\n    df.loc[df['A'] < 10, 'A'] = -1\n    return df", "compilation_passed": true, "time": 0.0009181499481201172, "tests_passed": false, "error": "KeyError"}
{"code": "np.random.seed(seed)\n    data = np.random.randint(1, 100, size=data_size)\n    data[data < 10] = -1\n    df = pd.DataFrame(data, columns=column_names)\n    return df", "compilation_passed": true, "time": 0.0010402202606201172, "tests_passed": false, "error": "ValueError"}
{"code": "np.random.seed(seed)\n    data = np.random.randint(1, 100, (data_size, 5))\n    data[:, 0][data[:, 0] < 10] = -1\n    return pd.DataFrame(data, columns=column_names)", "compilation_passed": true, "time": 0.0009338855743408203, "tests_passed": false, "error": "ValueError"}
{"code": "np.random.seed(seed)\n    df = pd.DataFrame(np.random.randint(1, 101, (data_size, len(column_names))),\n                      columns=column_names)\n    df.loc[df < 10, :] = -1\n    return df", "compilation_passed": true, "time": 0.001558065414428711, "tests_passed": false, "error": "KeyError"}
{"code": "np.random.seed(seed)\n    df = pd.DataFrame(\n        np.random.randint(1, 101, size=(data_size, len(column_names))), columns=column_names)\n    df.loc[df.A < 10, 'A'] = -1\n    return df", "compilation_passed": true, "time": 0.0007970333099365234, "tests_passed": false, "error": "AttributeError"}
{"code": "np.random.seed(seed)\n    df = pd.DataFrame(\n        np.random.randint(1, 100, size=(data_size, len(column_names))), columns=column_names\n    )\n\n    df.loc[df.A < 10, 'A'] = -1\n    df.loc[df.B < 10, 'B'] = -1\n    df.loc[df.C < 10, 'C'] = -1\n    df.loc[df.D < 10, 'D'] = -1\n    df.loc[df.E < 10, 'E'] = -1\n\n    return df", "compilation_passed": true, "time": 0.0008757114410400391, "tests_passed": false, "error": "AttributeError"}
{"code": "np.random.seed(seed)\n    df = pd.DataFrame(\n        np.random.randint(1, 101, size=(data_size, len(column_names))),\n        columns=column_names,\n    )\n    df.loc[df <= 10, :] = -1\n    return df", "compilation_passed": true, "time": 0.0013680458068847656, "tests_passed": false, "error": "KeyError"}
{"code": "random.seed(seed)\n    np.random.seed(seed)\n    df = pd.DataFrame(pd.Series(pd.Series(np.random.randint(1, 100, size=data_size)) < 10, index=column_names))\n    return df.replace(np.less_equal(df, 10), -1)", "compilation_passed": true, "time": 0.0007359981536865234, "tests_passed": false, "error": "NameError"}
{"code": "rng = np.random.default_rng(seed)\n    df = pd.DataFrame(rng.uniform(1, 100, size=(data_size, len(column_names))), columns=column_names)\n    df.loc[df < 10, column_names] = -1\n    return df", "compilation_passed": true, "time": 0.0014667510986328125, "tests_passed": false, "error": "KeyError"}
{"code": "np.random.seed(seed)\n    df = pd.DataFrame(\n        np.random.randint(1, 100, (data_size, len(column_names))),\n        columns=column_names\n    )\n    df[df < 10] = -1\n\n    return df", "compilation_passed": true, "time": 0.002732992172241211, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    df = pd.DataFrame(np.random.randint(1, 100, (data_size, len(column_names))), columns=column_names)\n    df[df < 10] = -1\n    return df", "compilation_passed": true, "time": 0.002498149871826172, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    data = np.random.randint(1, 100, size=(data_size, 5))\n    data[data < 10] = -1\n    df = pd.DataFrame(data, columns=column_names)\n    return df", "compilation_passed": true, "time": 0.0010268688201904297, "tests_passed": false, "error": "ValueError"}
{"code": "np.random.seed(seed)\n    df = pd.DataFrame(np.random.randint(low=1, high=100, size=(data_size, len(column_names))))\n    df.iloc[df < 10, :] = -1\n    return df", "compilation_passed": true, "time": 0.0013628005981445312, "tests_passed": false, "error": "IndexError"}
