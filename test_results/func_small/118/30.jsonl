{"code": "backup_directory = os.path.realpath(backup_directory)\n    # Check if the backup directory exists and create it if it does not exist\n    if not os.path.exists(backup_directory):\n        os.makedirs(backup_directory)\n\n    # Scan the source directory for JSON files and copy them to the backup directory\n    backup_files = []\n    for root, dirs, files in os.walk(directory):\n        for filename in files:\n            if filename.endswith('.json'):\n                filepath = os.path.join(root, filename)\n                shutil.copy(filepath, backup_directory)\n                backup_files.append(filepath)\n\n    return backup_files", "compilation_passed": true, "time": 0.0025548934936523438, "tests_passed": true, "error": null}
{"code": "if not os.path.isdir(directory):\n        raise FileNotFoundError(\"The directory '{}' does not exist.\".format(directory))\n    backup_directory = os.path.join(backup_directory, os.path.basename(directory))\n    os.makedirs(backup_directory, exist_ok=True)\n    paths = []\n    for file in os.listdir(directory):\n        if file.endswith('.json'):\n            full_path = os.path.join(directory, file)\n            shutil.copy2(full_path, backup_directory)\n            paths.append(full_path)\n    return paths", "compilation_passed": true, "time": 0.002376079559326172, "tests_passed": true, "error": null}
{"code": "copied_files = []\n    if os.path.exists(backup_directory):\n        shutil.rmtree(backup_directory)\n    os.makedirs(backup_directory)\n    for path, dirs, files in os.walk(directory):\n        for file in files:\n            if file.endswith('.json'):\n                shutil.copy(os.path.join(path, file), os.path.join(backup_directory, file))\n                copied_files.append(os.path.join(backup_directory, file))\n    return copied_files", "compilation_passed": true, "time": 0.0026140213012695312, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(directory):\n        os.makedirs(directory)\n\n    if not os.path.exists(backup_directory):\n        os.makedirs(backup_directory)\n\n    file_list = []\n\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            source_path = os.path.join(directory, filename)\n            destination_path = os.path.join(backup_directory, filename)\n\n            shutil.copy(source_path, destination_path)\n            file_list.append(destination_path)\n\n    return file_list", "compilation_passed": true, "time": 0.0024750232696533203, "tests_passed": true, "error": null}
{"code": "paths = []\n    if not os.path.exists(backup_directory):\n        os.mkdir(backup_directory)\n    for path, dirs, files in os.walk(directory):\n        for f in files:\n            if f.endswith('.json'):\n                source = os.path.join(path, f)\n                destination = os.path.join(backup_directory, f)\n                shutil.copy(source, destination)\n                paths.append(destination)\n    return paths", "compilation_passed": true, "time": 0.002532958984375, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(directory):\n        print(f'Error: Directory {directory} not found.')\n        return []\n\n    file_paths = []\n\n    for file_name in os.listdir(directory):\n        file_path = os.path.join(directory, file_name)\n        if file_name.endswith('.json'):\n            shutil.copy(file_path, backup_directory)\n            file_paths.append(os.path.join(backup_directory, file_name))\n\n    return file_paths", "compilation_passed": true, "time": 0.0012369155883789062, "tests_passed": true, "error": null}
{"code": "paths = []\n    for root, dirs, files in os.walk(directory):\n        for file in files:\n            if file.endswith('.json'):\n                full_path = os.path.join(root, file)\n                shutil.copy(full_path, backup_directory)\n                paths.append(full_path)\n\n    return paths", "compilation_passed": true, "time": 0.0011849403381347656, "tests_passed": true, "error": null}
{"code": "backup_directory = backup_directory or './'\n    backup_directory = backup_directory + '/' if backup_directory[-1] != '/' else backup_directory\n    backup_directory = os.path.abspath(backup_directory)\n    if not os.path.exists(backup_directory):\n        os.makedirs(backup_directory)\n    for directory, subdirectories, files in os.walk(directory):\n        for file in files:\n            if file.endswith('.json'):\n                file_path = os.path.join(directory, file)\n                shutil.copy(file_path, backup_directory)\n    return [os.path.join(backup_directory, file) for file in os.listdir(backup_directory)]", "compilation_passed": true, "time": 0.002966165542602539, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist\")\n\n    json_files = []\n    for root, _, filenames in os.walk(directory):\n        for filename in filenames:\n            if filename.endswith('.json'):\n                full_path = os.path.join(root, filename)\n                json_files.append(full_path)\n\n    backup_directory = backup_directory if os.path.exists(backup_directory) else os.path.dirname(backup_directory)\n    if not os.path.exists(backup_directory):\n        os.makedirs(backup_directory, exist_ok=True)\n\n    for file in json_files:\n        shutil.copy(file, os.path.join(backup_directory, os.path.basename(file)))\n\n    return json_files", "compilation_passed": true, "time": 0.0012960433959960938, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(backup_directory):\n        os.makedirs(backup_directory)\n    files = os.listdir(directory)\n    paths = [os.path.join(directory, file) for file in files if file.endswith('.json')]\n    backup_paths = [os.path.join(backup_directory, file) for file in files if file.endswith('.json')]\n    for file, backup_path in zip(paths, backup_paths):\n        shutil.copy(file, backup_path)\n    return backup_paths", "compilation_passed": true, "time": 0.003690004348754883, "tests_passed": true, "error": null}
{"code": "# Create backup directory if it doesn't exist\n    if not os.path.exists(backup_directory):\n        os.makedirs(backup_directory)\n\n    # Find all JSON files in the source directory\n    json_files = [file for file in os.listdir(directory) if file.endswith('.json')]\n\n    # Copy JSON files to backup directory\n    paths = []\n    for json_file in json_files:\n        source_path = os.path.join(directory, json_file)\n        destination_path = os.path.join(backup_directory, json_file)\n        shutil.copyfile(source_path, destination_path)\n        paths.append(destination_path)\n\n    return paths", "compilation_passed": true, "time": 0.0034949779510498047, "tests_passed": true, "error": null}
{"code": "paths_to_copy = []\n\n    # Check if the backup directory exists\n    if not os.path.exists(backup_directory):\n        os.makedirs(backup_directory)\n\n    # Check if the source directory exists\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Source directory {directory} not found.\")\n\n    # Iterate over the files in the source directory\n    for path in os.listdir(directory):\n        if os.path.isfile(os.path.join(directory, path)) and path.endswith('.json'):\n            shutil.copy(os.path.join(directory, path), os.path.join(backup_directory, path))\n            paths_to_copy.append(os.path.join(backup_directory, path))\n\n    return paths_to_copy", "compilation_passed": true, "time": 0.003297090530395508, "tests_passed": true, "error": null}
{"code": "result = []\n    try:\n        # if the backup directory exists, delete all files in it\n        if os.path.exists(backup_directory):\n            for file in os.listdir(backup_directory):\n                path = os.path.join(backup_directory, file)\n                os.remove(path)\n        # create the backup directory if it does not exist\n        if not os.path.exists(backup_directory):\n            os.makedirs(backup_directory)\n    except FileNotFoundError:\n        pass\n    except NotADirectoryError:\n        pass\n\n    for file in os.listdir(directory):\n        file_path = os.path.join(directory, file)\n        if file.endswith('.json'):\n            shutil.copy(file_path, backup_directory)\n            result.append(file_path)\n    return result", "compilation_passed": true, "time": 0.003565073013305664, "tests_passed": true, "error": null}
{"code": "file_paths = []\n    if not os.path.exists(backup_directory):\n        os.mkdir(backup_directory)\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            shutil.copyfile(os.path.join(directory, filename), os.path.join(backup_directory, filename))\n            file_paths.append(os.path.join(backup_directory, filename))\n    return file_paths", "compilation_passed": true, "time": 0.003790140151977539, "tests_passed": true, "error": null}
{"code": "# Check for existence of directories.\n    if not os.path.exists(directory):\n        raise ValueError(f'Directory {directory} does not exist.')\n    if not os.path.exists(backup_directory):\n        os.makedirs(backup_directory)\n    else:\n        raise FileExistsError(f'Directory {backup_directory} already exists.')\n    # Scan for JSON files in the directory and copy them to the backup directory.\n    files = os.listdir(directory)\n    for file in files:\n        if file.endswith('.json'):\n            full_path = os.path.join(directory, file)\n            shutil.copy2(full_path, backup_directory)\n    # Return a list of the paths to the copied files in the backup directory.\n    paths = [os.path.join(backup_directory, file) for file in files]\n    return paths", "compilation_passed": true, "time": 0.002218961715698242, "tests_passed": false, "error": "FileExistsError"}
{"code": "file_paths = []\n\n    # Check if the source directory exists\n    if not os.path.exists(directory):\n        print(f\"Error: Directory '{directory}' does not exist.\")\n        return\n\n    # Create the backup directory if it doesn't exist\n    if not os.path.exists(backup_directory):\n        os.makedirs(backup_directory)\n\n    # Loop through all files in the source directory\n    for dirpath, _, filenames in os.walk(directory):\n        for filename in filenames:\n            filepath = os.path.join(dirpath, filename)\n            if filename.endswith('.json'):\n                shutil.copy(filepath, os.path.join(backup_directory, filename))\n                file_paths.append(os.path.join(backup_directory, filename))\n\n    return file_paths", "compilation_passed": true, "time": 0.002660036087036133, "tests_passed": true, "error": null}
{"code": "copied_files = []\n    if os.path.exists(backup_directory) and not os.path.isdir(backup_directory):\n        raise FileExistsError(\"Invalid backup directory path.\")\n\n    for dirpath, dirs, files in os.walk(directory):\n        for filename in files:\n            if filename.endswith('.json'):\n                filepath = os.path.join(dirpath, filename)\n                shutil.copy(filepath, backup_directory)\n                copied_files.append(backup_directory.joinpath(filename))\n    return copied_files", "compilation_passed": true, "time": 0.0012159347534179688, "tests_passed": true, "error": null}
{"code": "paths = []\n\n    if not os.path.exists(backup_directory):\n        os.makedirs(backup_directory)\n\n    for dirpath, dirnames, filenames in os.walk(directory):\n        for filename in filenames:\n            if filename.endswith('.json'):\n                src = os.path.join(dirpath, filename)\n                dst = os.path.join(backup_directory, filename)\n                shutil.copy(src, dst)\n                paths.append(dst)\n\n    return paths", "compilation_passed": true, "time": 0.0021698474884033203, "tests_passed": true, "error": null}
{"code": "path = directory\n    backup = backup_directory\n    backup_path = backup + '/' + os.path.basename(path)\n    backup_files = []\n    if not os.path.exists(backup):\n        os.mkdir(backup)\n    for file in os.listdir(path):\n        if file.endswith('.json'):\n            shutil.copy(path + file, backup_path)\n            backup_files.append(backup_path)\n    return backup_files", "compilation_passed": true, "time": 0.002653360366821289, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "file_list = []\n\n    if not os.path.exists(backup_directory):\n        os.makedirs(backup_directory)\n\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            path = os.path.join(directory, filename)\n            shutil.copy(path, os.path.join(backup_directory, filename))\n            file_list.append(path)\n    return file_list", "compilation_passed": true, "time": 0.004058122634887695, "tests_passed": true, "error": null}
{"code": "paths_list = []\n    for file_name in os.listdir(directory):\n        if file_name.endswith('.json'):\n            file_path = os.path.join(directory, file_name)\n            shutil.copy(file_path, backup_directory)\n            paths_list.append(os.path.join(backup_directory, file_name))\n    return paths_list", "compilation_passed": true, "time": 0.0012469291687011719, "tests_passed": true, "error": null}
{"code": "paths_to_copy = []\n    if not os.path.isdir(backup_directory):\n        os.mkdir(backup_directory)\n    for root, dirs, files in os.walk(directory):\n        for filename in files:\n            path = os.path.join(root, filename)\n            if filename.endswith(\".json\"):\n                shutil.copy(path, backup_directory)\n                paths_to_copy.append(os.path.join(backup_directory, filename))\n    return paths_to_copy", "compilation_passed": true, "time": 0.0025930404663085938, "tests_passed": true, "error": null}
{"code": "try:\n        os.mkdir(backup_directory)\n    except OSError:\n        pass\n\n    file_paths = []\n    for file in os.listdir(directory):\n        if file.endswith('.json'):\n            shutil.copy(os.path.join(directory, file), os.path.join(backup_directory, file))\n            file_paths.append(os.path.join(backup_directory, file))\n    return file_paths", "compilation_passed": true, "time": 0.003324747085571289, "tests_passed": true, "error": null}
{"code": "path_list = []\n\n    for root, dirs, files in os.walk(directory):\n        for filename in files:\n            file_path = os.path.join(root, filename)\n            shutil.copy(file_path, backup_directory)\n            path_list.append(os.path.join(backup_directory, os.path.basename(filename)))\n\n    return path_list", "compilation_passed": true, "time": 0.0011851787567138672, "tests_passed": true, "error": null}
{"code": "paths = []\n    for filename in os.listdir(directory):\n        if filename.endswith('.json'):\n            file_path = os.path.join(directory, filename)\n            shutil.copy(file_path, backup_directory)\n            paths.append(os.path.join(backup_directory, filename))\n    return paths", "compilation_passed": true, "time": 0.001127004623413086, "tests_passed": true, "error": null}
{"code": "# Check if the backup directory exists, otherwise create it\n    if not os.path.exists(backup_directory):\n        os.makedirs(backup_directory)\n\n    # Get all JSON files in the source directory\n    files = [os.path.join(directory, file) for file in os.listdir(directory) if file.endswith('.json')]\n\n    # Copy the files to the backup directory\n    copied_files = []\n    for file in files:\n        filename = os.path.basename(file)\n        dest = os.path.join(backup_directory, filename)\n        shutil.copy(file, dest)\n        copied_files.append(dest)\n\n    return copied_files", "compilation_passed": true, "time": 0.0035219192504882812, "tests_passed": true, "error": null}
{"code": "paths = []\n    if not os.path.exists(backup_directory):\n        os.makedirs(backup_directory)\n    for file_name in os.listdir(directory):\n        if file_name.endswith('.json'):\n            src_path = os.path.join(directory, file_name)\n            dst_path = os.path.join(backup_directory, file_name)\n            shutil.copy2(src_path, dst_path)\n            paths.append(dst_path)\n    return paths", "compilation_passed": true, "time": 0.004050016403198242, "tests_passed": true, "error": null}
{"code": "try:\n        files = os.listdir(directory)\n    except FileNotFoundError:\n        print(\"Directory not found.\")\n        return []\n\n    if not os.path.exists(backup_directory):\n        os.mkdir(backup_directory)\n\n    backup_files = []\n    for file in files:\n        if file.endswith(\".json\"):\n            try:\n                shutil.copy2(os.path.join(directory, file), os.path.join(backup_directory, file))\n                backup_files.append(os.path.join(backup_directory, file))\n            except FileNotFoundError:\n                print(\"File not found.\")\n    return backup_files", "compilation_passed": true, "time": 0.002827167510986328, "tests_passed": true, "error": null}
{"code": "if not os.path.isdir(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    if not os.path.isdir(backup_directory):\n        os.mkdir(backup_directory)\n    files = os.listdir(directory)\n    file_paths = []\n    for file in files:\n        if file.endswith('.json'):\n            file_paths.append(os.path.join(directory, file))\n    shutil.copy2(file_paths, backup_directory)\n    return file_paths", "compilation_passed": true, "time": 0.0014998912811279297, "tests_passed": false, "error": "TypeError"}
{"code": "# Ensure the backup directory exists and create it if it doesn't exist.\n    os.makedirs(backup_directory, exist_ok=True)\n\n    # Get a list of paths to all JSON files in the source directory.\n    paths = [os.path.join(directory, file) for file in os.listdir(directory)]\n\n    # Filter the list of paths to JSON files and copy them to the backup directory.\n    copied_paths = []\n    for path in paths:\n        if path.endswith('.json'):\n            copied_path = os.path.join(backup_directory, os.path.basename(path))\n            shutil.copy(path, copied_path)\n            copied_paths.append(copied_path)\n\n    return copied_paths", "compilation_passed": true, "time": 0.0039861202239990234, "tests_passed": true, "error": null}
