{"code": "# Create a JSON encoder that handles Enum types by converting them to their names or values.\n    class CustomEncoder(json.JSONEncoder):\n        def default(self, o):\n            if isinstance(o, Enum):\n                return o.name\n            return super().default(o)\n\n    return json.dumps(my_obj, cls=CustomEncoder)", "compilation_passed": true, "time": 0.0009241104125976562, "tests_passed": true, "error": null}
{"code": "def custom_encoder(data):\n        if isinstance(data, Enum):\n            return data.name\n\n    json.dumps(my_obj, default=custom_encoder)", "compilation_passed": true, "time": 0.0007631778717041016, "tests_passed": false, "error": "TypeError"}
{"code": "class CustomJSONEncoder(json.JSONEncoder):\n        def default(self, obj):\n            if isinstance(obj, Enum):\n                return obj.name if isinstance(obj, str) else obj.value\n            return super().default(obj)\n\n    return json.dumps(my_obj, cls=CustomJSONEncoder)", "compilation_passed": true, "time": 0.0008487701416015625, "tests_passed": true, "error": null}
{"code": "class CustomJSONEncoder(json.JSONEncoder):\n        def default(self, obj):\n            if isinstance(obj, Enum):\n                return obj.name\n            return super(CustomJSONEncoder, self).default(obj)\n\n    return json.dumps(my_obj, cls=CustomJSONEncoder)", "compilation_passed": true, "time": 0.0008077621459960938, "tests_passed": true, "error": null}
{"code": "return json.dumps(my_obj, default=lambda o: o.name if isinstance(o, Enum) else o.value)", "compilation_passed": true, "time": 0.0007917881011962891, "tests_passed": true, "error": null}
{"code": "class CustomEncoder(json.JSONEncoder):\n        def default(self, obj):\n            if isinstance(obj, Enum):\n                return obj.name\n            return super().default(obj)\n\n    return json.dumps(my_obj, cls=CustomEncoder)", "compilation_passed": true, "time": 0.0008051395416259766, "tests_passed": true, "error": null}
{"code": "return json.dumps(my_obj, cls=ColorEncoder)", "compilation_passed": true, "time": 0.0007600784301757812, "tests_passed": false, "error": "NameError"}
{"code": "return json.dumps(my_obj, default=json_serialize)", "compilation_passed": true, "time": 0.0006661415100097656, "tests_passed": false, "error": "NameError"}
{"code": "class ColorEncoder(json.JSONEncoder):\n        def default(self, obj):\n            if isinstance(obj, Color):\n                return obj.name\n            return super().default(obj)\n\n    return json.dumps(my_obj, cls=ColorEncoder)", "compilation_passed": true, "time": 0.0008459091186523438, "tests_passed": true, "error": null}
{"code": "return json.dumps(my_obj, cls=JsonEncoder)", "compilation_passed": true, "time": 0.0006768703460693359, "tests_passed": false, "error": "NameError"}
{"code": "if isinstance(my_obj, Enum):\n        return my_obj.name\n    return json.dumps(my_obj, cls=MyJSONEncoder)", "compilation_passed": true, "time": 0.0007519721984863281, "tests_passed": false, "error": "NameError"}
{"code": "class ColorEncoder(json.JSONEncoder):\n        def default(self, obj):\n            if isinstance(obj, Color):\n                if obj == Color.RED:\n                    return 'RED'\n                elif obj == Color.GREEN:\n                    return 'GREEN'\n                elif obj == Color.BLUE:\n                    return 'BLUE'\n            else:\n                return super().default(obj)\n    return json.dumps(my_obj, cls=ColorEncoder)", "compilation_passed": true, "time": 0.0008242130279541016, "tests_passed": true, "error": null}
{"code": "class EnumJSONEncoder(json.JSONEncoder):\n        def default(self, obj):\n            if isinstance(obj, Enum):\n                return obj.name\n            elif isinstance(obj, Color):\n                return str(obj.value)\n            return super().default(obj)\n\n    return json.dumps(my_obj, cls=EnumJSONEncoder, indent=4, ensure_ascii=False)", "compilation_passed": true, "time": 0.0009200572967529297, "tests_passed": true, "error": null}
{"code": "class JSONColor(json.JSONEncoder):\n        \"\"\"\n        This class is used as a custom JSON encoder for Enum.\n        It converts Enum types to their names or values.\n        \"\"\"\n        def default(self, o):\n            if isinstance(o, Color):\n                return o.name\n            return json.JSONEncoder.default(self, o)\n\n    return json.dumps(my_obj, cls=JSONColor)", "compilation_passed": true, "time": 0.0008718967437744141, "tests_passed": true, "error": null}
{"code": "class MyEncoder(json.JSONEncoder):\n        def default(self, obj):\n            if isinstance(obj, Enum):\n                return obj.name\n            else:\n                return super().default(obj)\n\n    return json.dumps(my_obj, cls=MyEncoder)", "compilation_passed": true, "time": 0.000804901123046875, "tests_passed": true, "error": null}
{"code": "class CustomJSONEncoder(json.JSONEncoder):\n        def default(self, obj):\n            if isinstance(obj, Enum):\n                return obj.name\n            else:\n                return json.JSONEncoder.default(self, obj)\n\n    return json.dumps(my_obj, cls=CustomJSONEncoder)", "compilation_passed": true, "time": 0.0008649826049804688, "tests_passed": true, "error": null}
{"code": "class EnumEncoder(json.JSONEncoder):\n        def default(self, obj):\n            if isinstance(obj, Enum):\n                return obj.name\n            return super().default(obj)\n\n    return json.dumps(my_obj, cls=EnumEncoder)", "compilation_passed": true, "time": 0.0007910728454589844, "tests_passed": true, "error": null}
{"code": "return json.dumps(my_obj, cls=MyEncoder)", "compilation_passed": true, "time": 0.0007407665252685547, "tests_passed": false, "error": "NameError"}
{"code": "# Define a custom JSONEncoder class that supports Enum types by converting them to their names or values.\n    class EnumEncoder(json.JSONEncoder):\n        def default(self, obj):\n            if isinstance(obj, Enum):\n                return obj.name\n            return super().default(obj)\n\n    # Serialize the object using the custom encoder.\n    return json.dumps(my_obj, cls=EnumEncoder)", "compilation_passed": true, "time": 0.00078582763671875, "tests_passed": true, "error": null}
{"code": "class ColorEncoder(json.JSONEncoder):\n        def default(self, obj: Enum) -> str:\n            if isinstance(obj, Color):\n                return obj.name\n            return super().default(obj)\n\n    return json.dumps(my_obj, cls=ColorEncoder)", "compilation_passed": true, "time": 0.0008609294891357422, "tests_passed": true, "error": null}
{"code": "class JSONEnumEncoder(json.JSONEncoder):\n        def default(self, obj):\n            if isinstance(obj, Enum):\n                return obj.name\n            return super().default(obj)\n\n    return json.dumps(my_obj, cls=JSONEnumEncoder)", "compilation_passed": true, "time": 0.0007929801940917969, "tests_passed": true, "error": null}
{"code": "class MyEncoder(json.JSONEncoder):\n        def default(self, obj):\n            if isinstance(obj, Color):\n                if obj is Color.RED:\n                    return \"RED\"\n                elif obj is Color.GREEN:\n                    return \"GREEN\"\n                else:\n                    return \"BLUE\"\n\n            return super().default(obj)\n\n    return json.dumps(my_obj, cls=MyEncoder)", "compilation_passed": true, "time": 0.0010209083557128906, "tests_passed": true, "error": null}
{"code": "return json.dumps(my_obj, allow_nan=False, cls=Encoder)", "compilation_passed": true, "time": 0.0006761550903320312, "tests_passed": false, "error": "NameError"}
{"code": "class ColorEncoder(json.JSONEncoder):\n        def default(self, obj):\n            if isinstance(obj, Enum):\n                return obj.name\n            else:\n                return super().default(obj)\n\n    return json.dumps(my_obj, cls=ColorEncoder)", "compilation_passed": true, "time": 0.0008649826049804688, "tests_passed": true, "error": null}
{"code": "class ColorEncoder(json.JSONEncoder):\n        def default(self, o):\n            if isinstance(o, Color):\n                return o.name\n            return super().default(o)\n\n    return json.dumps(my_obj, cls=ColorEncoder)", "compilation_passed": true, "time": 0.0007989406585693359, "tests_passed": true, "error": null}
{"code": "return json.dumps(my_obj, cls=CustomEncoder)", "compilation_passed": true, "time": 0.0007381439208984375, "tests_passed": false, "error": "NameError"}
{"code": "class CustomJSONEncoder(json.JSONEncoder):\n        def default(self, obj):\n            if isinstance(obj, Color):\n                return obj.name\n            return super().default(obj)\n\n    return CustomJSONEncoder().encode(my_obj)", "compilation_passed": true, "time": 0.0007929801940917969, "tests_passed": true, "error": null}
{"code": "return json.dumps(my_obj, ensure_ascii=False)", "compilation_passed": true, "time": 0.0008509159088134766, "tests_passed": false, "error": "TypeError"}
