{"code": "df1 = pd.DataFrame(matrix1)\n    df2 = pd.DataFrame(matrix2)\n    df = pd.concat((df1, df2), axis=1)\n    return str(df).replace(' ', '')", "compilation_passed": true, "time": 0.0023698806762695312, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(matrix1, matrix2)\n    return str(df).replace(' ', '')", "compilation_passed": true, "time": 0.0045549869537353516, "tests_passed": false, "error": "ValueError"}
{"code": "matrix_df = pd.DataFrame(data=[matrix1, matrix2])\n    return str(matrix_df).replace(' ', '')", "compilation_passed": true, "time": 0.001191854476928711, "tests_passed": false, "error": "ValueError"}
{"code": "matrix = np.vstack((matrix1, matrix2)).astype(np.int64)\n    df = pd.DataFrame(matrix)\n    return str(df)", "compilation_passed": true, "time": 0.0017800331115722656, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(np.r_[matrix1, matrix2])\n    return str(df.replace(' ', ''))", "compilation_passed": true, "time": 0.0016651153564453125, "tests_passed": true, "error": null}
{"code": "result = pd.DataFrame(matrix1, columns=matrix2)\n    return str(result)", "compilation_passed": true, "time": 0.0012829303741455078, "tests_passed": false, "error": "ValueError"}
{"code": "return str(pd.DataFrame(matrix1, columns=matrix2))", "compilation_passed": true, "time": 0.0012259483337402344, "tests_passed": false, "error": "ValueError"}
{"code": "df = pd.DataFrame(matrix1, matrix2)\n    result = str(df.to_string(index=False, header=False))\n    return result.replace(' ', '')", "compilation_passed": true, "time": 0.0012249946594238281, "tests_passed": false, "error": "ValueError"}
{"code": "return pd.DataFrame(np.column_stack((matrix1, matrix2)), columns=list('ABC')).to_string(index=False)", "compilation_passed": true, "time": 0.0010249614715576172, "tests_passed": false, "error": "ValueError"}
{"code": "return pd.DataFrame(np.hstack((matrix1, matrix2))).to_string(index=False, header=False)", "compilation_passed": true, "time": 0.0015151500701904297, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(matrix1, columns=matrix2.flatten())\n    return df.to_string(header=False, index=False)", "compilation_passed": true, "time": 0.0010120868682861328, "tests_passed": false, "error": "ValueError"}
{"code": "df = pd.DataFrame(np.hstack((matrix1, matrix2)))\n    result = df.to_string(index=False, header=False)\n    return result", "compilation_passed": true, "time": 0.0016741752624511719, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(np.concatenate((matrix1, matrix2), axis=1), index=None)\n    return str(df).replace(' ', '')", "compilation_passed": true, "time": 0.001886129379272461, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(matrix1, index=None, columns=None)\n    df = df.append(pd.DataFrame(matrix2, index=None, columns=None))\n    result = df.to_string().replace('\\n', '').replace(' ', '')\n    return result", "compilation_passed": true, "time": 0.0023488998413085938, "tests_passed": false, "error": "AttributeError"}
{"code": "df = pd.DataFrame(matrix1)\n    df2 = pd.DataFrame(matrix2)\n\n    return df.join(df2).to_string(index=False, header=False)", "compilation_passed": true, "time": 0.0018742084503173828, "tests_passed": false, "error": "ValueError"}
{"code": "matrix1 = pd.DataFrame(matrix1)\n    matrix2 = pd.DataFrame(matrix2)\n    df = pd.concat([matrix1, matrix2], axis=1)\n    result = df.replace(' ', '')\n    return result.to_string()", "compilation_passed": true, "time": 0.001405954360961914, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(data=[[matrix1, matrix2]])\n    return str(df).replace(' ', '')", "compilation_passed": true, "time": 0.0021610260009765625, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(\n        index=[0, 1], columns=[0, 1, 2], data=[[1, 2, 3], [4, 5, 6]]\n    )\n    return str(df)", "compilation_passed": true, "time": 0.0018210411071777344, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(matrix1)\n    df.loc[:, 0:2] = df.loc[:, 0:2].apply(pd.to_numeric)\n    df.loc[:, 3:5] = df.loc[:, 3:5].apply(pd.to_numeric)\n    return str(df)", "compilation_passed": true, "time": 0.0021178722381591797, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(np.concatenate([matrix1, matrix2]))\n    df.index = [df.index[i].replace(\" \", \"\") for i in range(0, len(df.index))]\n    df.columns = [df.columns[i].replace(\" \", \"\") for i in range(0, len(df.columns))]\n    return df.to_string().replace('\\n', '')", "compilation_passed": true, "time": 0.0009262561798095703, "tests_passed": false, "error": "AttributeError"}
{"code": "df = pd.DataFrame(data=matrix1, columns=np.arange(12, dtype=np.int64), index=np.arange(1, 6, dtype=np.int64))\n    df = df.append(pd.DataFrame(data=matrix2, columns=np.arange(12, 15, dtype=np.int64), index=np.arange(1, 6, dtype=np.int64)))\n    return df.__str__()", "compilation_passed": true, "time": 0.0010831356048583984, "tests_passed": false, "error": "ValueError"}
{"code": "df = pd.DataFrame(np.vstack([matrix1, matrix2]),\n                      columns=[f'c{i}' for i in range(matrix1.shape[1])],\n                      index=[f'r{i}' for i in range(matrix1.shape[0])])\n    result = str(df)\n    return result", "compilation_passed": true, "time": 0.0010769367218017578, "tests_passed": false, "error": "ValueError"}
{"code": "return str(pd.DataFrame(matrix1, matrix2).drop(columns=[0, 1], axis=1))", "compilation_passed": true, "time": 0.0012469291687011719, "tests_passed": false, "error": "ValueError"}
{"code": "df = pd.DataFrame(matrix1, columns=matrix2)\n    result = df.to_string(index=False, header=False)\n    return result", "compilation_passed": true, "time": 0.0013890266418457031, "tests_passed": false, "error": "ValueError"}
{"code": "df1 = pd.DataFrame(matrix1)\n    df2 = pd.DataFrame(matrix2)\n    return str(pd.concat([df1, df2], axis=1))", "compilation_passed": true, "time": 0.0021338462829589844, "tests_passed": true, "error": null}
{"code": "# Check that both inputs are numpy arrays\n    if not isinstance(matrix1, np.ndarray) or not isinstance(matrix2, np.ndarray):\n        raise TypeError('Both inputs must be numpy arrays')\n\n    # Convert numpy arrays to pandas DataFrames and concatenate them along the second axis (columns)\n    df1 = pd.DataFrame(matrix1)\n    df2 = pd.DataFrame(matrix2)\n    df = pd.concat([df1, df2], axis=1)\n\n    # Remove index and header from DataFrame and convert it to string\n    return str(df.replace({' '}, ''))", "compilation_passed": true, "time": 0.002105236053466797, "tests_passed": true, "error": null}
{"code": "data = [dict(zip(range(matrix1.shape[1]), row)) for row in zip(*[matrix1, matrix2])]\n    df = pd.DataFrame(data)\n    return str(df).replace(' ', '')", "compilation_passed": true, "time": 0.0020411014556884766, "tests_passed": true, "error": null}
{"code": "# Convert the numpy arrays to pandas DataFrame\n    df = pd.DataFrame(matrix1, index=None, columns=None)\n    df1 = pd.DataFrame(matrix2, index=None, columns=None)\n    # Concatenate the DataFrame along the second axis (columns)\n    result_df = pd.concat([df, df1], axis=1)\n\n    # Convert the resulting pandas DataFrame to a string representation\n    return str(result_df)", "compilation_passed": true, "time": 0.0020029544830322266, "tests_passed": true, "error": null}
