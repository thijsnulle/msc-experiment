{"code": "# Define a recursive function to count the appearances of all keys in the JSON files in the given directory\n    def _count_appearances(directory_path: str) -> collections.Counter:\n        # Create an empty collections.Counter object to accumulate the counts of all keys\n        counter = collections.Counter()\n        # Iterate over all files in the directory\n        for path in os.listdir(directory_path):\n            file_path = os.path.join(directory_path, path)\n            if os.path.isfile(file_path) and file_path.endswith('.json'):\n                with open(file_path, 'r') as file:\n                    file_data = json.load(file)\n                    # Iterate over the keys of the file's JSON object and accumulate their counts\n                    counter.update(file_data)\n                    # Recursively call the _count_appearances function for subdirectories\n                    _count_appearances(os.path.join(directory_path, path))\n        return counter\n\n    # Call the _count_appearances function and return its result\n    ", "compilation_passed": true, "time": 0.0020170211791992188, "tests_passed": true, "error": null}
{"code": "counter = collections.Counter()\n    for file_path in os.listdir(directory_path):\n        file_path = os.path.join(directory_path, file_path)\n        if file_path.endswith('.json'):\n            with open(file_path, 'r') as file:\n                data = json.load(file)\n                for key in data:\n                    counter[key] += 1\n    return counter", "compilation_passed": true, "time": 0.006031036376953125, "tests_passed": true, "error": null}
{"code": "counts = collections.Counter()\n    for file in os.listdir(directory_path):\n        if file.endswith('.json'):\n            with open(os.path.join(directory_path, file), 'r') as f:\n                d = json.load(f)\n                counts.update(d.keys())\n    return counts", "compilation_passed": true, "time": 0.006330966949462891, "tests_passed": true, "error": null}
{"code": "directory = os.path.abspath(directory_path)\n    directory = os.path.realpath(directory)\n    path = []\n    for root, dirs, files in os.walk(directory):\n        path.append(root)\n\n    result = {}\n    for i in range(len(path)):\n        for j in range(len(files)):\n            with open(os.path.join(path[i], files[j]), 'r') as file:\n                data = json.load(file)\n                for key, val in data.items():\n                    if key not in result:\n                        result[key] = 1\n                    else:\n                        result[key] += 1\n\n    return result", "compilation_passed": true, "time": 0.003526926040649414, "tests_passed": true, "error": null}
{"code": "try:\n        file_paths = os.listdir(directory_path)\n        if not file_paths:\n            print(\"Empty directory!\")\n            return None\n\n        result = collections.defaultdict(int)\n        for file_path in file_paths:\n            with open(f\"{directory_path}/{file_path}\", \"r\") as f:\n                json_data = json.load(f)\n                for key, value in json_data.items():\n                    result[key] += 1\n\n    except:\n        print(f\"An error occurred while counting keys in the JSON files.\")\n\n    return result", "compilation_passed": true, "time": 0.0031180381774902344, "tests_passed": false, "error": "UnboundLocalError"}
{"code": "directory_path = os.path.expanduser(directory_path)\n    file_paths = [f\"{directory_path}/sample_{i}.json\" for i in range(3)]\n\n    result = collections.defaultdict(int)\n    for file_path in file_paths:\n        with open(file_path, 'r') as f:\n            data = json.load(f)\n            for key in data:\n                result[key] += 1\n\n    return dict(result)", "compilation_passed": true, "time": 0.0023109912872314453, "tests_passed": true, "error": null}
{"code": "d = {}\n    for file in os.listdir(directory_path):\n        with open(os.path.join(directory_path, file)) as data:\n            try:\n                json_data = json.load(data)\n            except json.JSONDecodeError:\n                raise Exception(\"JSON is invalid.\")\n            for key in json_data.keys():\n                if key in d:\n                    d[key] += 1\n                else:\n                    d[key] = 1\n    return d", "compilation_passed": true, "time": 0.006584882736206055, "tests_passed": true, "error": null}
{"code": "counts = collections.defaultdict(int)\n    for file_name in os.listdir(directory_path):\n        if not file_name.endswith('.json'):\n            continue\n        with open(os.path.join(directory_path, file_name), 'rb') as file:\n            content = json.load(file)\n            for key, value in content.items():\n                counts[key] += 1\n    return dict(counts)", "compilation_passed": true, "time": 0.00640416145324707, "tests_passed": true, "error": null}
{"code": "total_counts = {}\n    for filename in os.listdir(directory_path):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory_path, filename), 'r') as f:\n                d = json.load(f)\n                for key, value in d.items():\n                    total_counts[key] = total_counts.get(key, 0) + 1\n    return total_counts", "compilation_passed": true, "time": 0.006103038787841797, "tests_passed": true, "error": null}
{"code": "result = dict()\n    for file_name in os.listdir(directory_path):\n        with open(os.path.join(directory_path, file_name), \"r\") as json_file:\n            data = json.load(json_file)\n            for key in data:\n                if key in result:\n                    result[key] += 1\n                else:\n                    result[key] = 1\n\n    return result", "compilation_passed": true, "time": 0.0058290958404541016, "tests_passed": true, "error": null}
{"code": "counts = collections.defaultdict(int)\n    for root, _, filenames in os.walk(directory_path):\n        for filename in filenames:\n            if not filename.endswith('.json'):\n                continue\n            with open(os.path.join(root, filename), 'r') as file:\n                data = json.load(file)\n                for key, value in data.items():\n                    counts[key] += 1\n    return dict(counts)", "compilation_passed": true, "time": 0.0028421878814697266, "tests_passed": true, "error": null}
{"code": "d = collections.defaultdict(int)\n    for root, _, files in os.walk(directory_path):\n        for file_path in files:\n            file_name = os.path.join(root, file_path)\n            with open(file_name, 'r') as f:\n                content = json.load(f)\n                for key in content:\n                    d[key] += 1\n\n    return dict(d)", "compilation_passed": true, "time": 0.0027740001678466797, "tests_passed": true, "error": null}
{"code": "counts = collections.Counter()\n\n    for path, _, files in os.walk(directory_path):\n        for file in files:\n            with open(os.path.join(path, file), 'r') as f:\n                try:\n                    obj = json.load(f)\n                except:\n                    continue\n                counts.update(obj)\n\n    return dict(counts)", "compilation_passed": true, "time": 0.002074003219604492, "tests_passed": false, "error": "TypeError"}
{"code": "if not isinstance(directory_path, str):\n        raise TypeError(\"directory_path must be a string\")\n\n    if not os.path.exists(directory_path):\n        raise FileNotFoundError(\"Directory not found\")\n\n    files = os.listdir(directory_path)\n\n    if len(files) == 0:\n        raise Exception(\"Empty directory\")\n\n    for f in files:\n        if not f.endswith(\".json\"):\n            raise Exception(\"Invalid file format\")\n\n    result = collections.Counter()\n\n    for file in files:\n        with open(os.path.join(directory_path, file), 'r') as fp:\n            data = json.load(fp)\n            result.update(data)\n\n    return dict(result)", "compilation_passed": true, "time": 0.002090930938720703, "tests_passed": false, "error": "TypeError"}
{"code": "result: dict = collections.defaultdict(int)\n    for root, dirs, files in os.walk(directory_path):\n        for fname in files:\n            file_path = os.path.join(root, fname)\n            with open(file_path) as f:\n                data = json.load(f)\n                for key, val in data.items():\n                    result[key] += 1\n    return dict(result)", "compilation_passed": true, "time": 0.0028619766235351562, "tests_passed": true, "error": null}
{"code": "# Open the directory containing the JSON files in read-only mode\n    with os.scandir(directory_path) as it:\n        # Create an empty dictionary to store the results\n        results = collections.defaultdict(int)\n\n        # Iterate through the JSON files in the directory\n        for file in it:\n            if file.is_file() and file.name.endswith('.json'):\n                # Open the JSON file in read mode\n                with open(file.path, 'r') as file:\n                    # Parse the JSON file\n                    data = json.load(file)\n\n                # Update the dictionary with the keys from the JSON file\n                results.update(data)\n\n    return dict(results)", "compilation_passed": true, "time": 0.002395153045654297, "tests_passed": true, "error": null}
{"code": "try:\n        file_names = [f for f in os.listdir(directory_path) if f.endswith('.json')]\n    except OSError as e:\n        return str(e)\n    try:\n        result = dict()\n        for file_name in file_names:\n            with open(os.path.join(directory_path, file_name)) as file:\n                data = json.load(file)\n            for key, value in data.items():\n                result[key] = result.get(key, 0) + 1\n        return result\n    except json.JSONDecodeError:\n        return f\"Error: the file {file_name} is not a valid JSON file\"", "compilation_passed": true, "time": 0.0032281875610351562, "tests_passed": true, "error": null}
{"code": "results = {}\n    for filename in os.listdir(directory_path):\n        with open(os.path.join(directory_path, filename)) as file:\n            content = json.load(file)\n            for key, value in content.items():\n                if key not in results:\n                    results[key] = 0\n                results[key] += 1\n    return results", "compilation_passed": true, "time": 0.006057024002075195, "tests_passed": true, "error": null}
{"code": "keys_counts = {}\n\n    for file_path in os.listdir(directory_path):\n        if not file_path.endswith(\".json\"):\n            continue\n\n        with open(os.path.join(directory_path, file_path), 'r') as file:\n            file_data = json.load(file)\n\n            for key, value in file_data.items():\n                if key not in keys_counts:\n                    keys_counts[key] = 1\n                else:\n                    keys_counts[key] += 1\n\n    return keys_counts", "compilation_passed": true, "time": 0.005889177322387695, "tests_passed": true, "error": null}
{"code": "files = os.listdir(directory_path)\n    data = []\n    for file in files:\n        with open(directory_path+\"/\"+file, \"r\") as f:\n            data.append(json.load(f))\n\n    return collections.Counter(i for d in data for i in d.keys())", "compilation_passed": true, "time": 0.005640983581542969, "tests_passed": true, "error": null}
{"code": "counts = {}\n    for filename in os.listdir(directory_path):\n        file_path = os.path.join(directory_path, filename)\n        with open(file_path, 'r') as file:\n            try:\n                data = json.load(file)\n                counts.update(data)\n            except json.decoder.JSONDecodeError:\n                continue\n    return counts", "compilation_passed": true, "time": 0.0020940303802490234, "tests_passed": true, "error": null}
{"code": "counter: dict = collections.defaultdict(int)\n    for root, dirs, files in os.walk(directory_path, topdown=True):\n        for name in files:\n            path = os.path.join(root, name)\n            with open(path, 'r') as file:\n                counter.update(json.load(file))\n\n    return dict(counter)", "compilation_passed": true, "time": 0.002109050750732422, "tests_passed": true, "error": null}
{"code": "result_dict = collections.defaultdict(int)\n    for file in os.listdir(directory_path):\n        if file.endswith('.json'):\n            with open(os.path.join(directory_path, file), 'r') as file:\n                content = json.load(file)\n                for key, value in content.items():\n                    result_dict[key] += 1\n    return result_dict", "compilation_passed": true, "time": 0.005700826644897461, "tests_passed": true, "error": null}
{"code": "d = collections.defaultdict(int)\n    for filename in os.listdir(directory_path):\n        with open(os.path.join(directory_path, filename), 'r') as file:\n            for line in file:\n                obj = json.loads(line)\n                for key, value in obj.items():\n                    d[key] += 1\n    return dict(d)", "compilation_passed": true, "time": 0.005756855010986328, "tests_passed": true, "error": null}
{"code": "with open(directory_path, \"r\") as file:\n        for line in file:\n            # print(line)\n            # print(line)\n            # print(line)\n            data = json.loads(line)\n            print(data)\n            for key, value in data.items():\n                print(key, value)", "compilation_passed": true, "time": 0.0019199848175048828, "tests_passed": false, "error": "IsADirectoryError"}
{"code": "results = {}\n\n    for filename in os.listdir(directory_path):\n        if filename.endswith('.json'):\n            with open(os.path.join(directory_path, filename), 'r') as file:\n                contents = json.load(file)\n                for key, value in contents.items():\n                    if key in results:\n                        results[key] += 1\n                    else:\n                        results[key] = 1\n\n    return results", "compilation_passed": true, "time": 0.006256103515625, "tests_passed": true, "error": null}
{"code": "result: dict = collections.defaultdict(int)\n    for filename in os.listdir(directory_path):\n        if not filename.endswith('.json'):\n            continue\n        with open(os.path.join(directory_path, filename), 'r') as file:\n            data = json.load(file)\n            for key in data.keys():\n                result[key] += 1\n    return dict(result)", "compilation_passed": true, "time": 0.0068438053131103516, "tests_passed": true, "error": null}
{"code": "result = collections.defaultdict(int)\n    for filename in os.listdir(directory_path):\n        if filename.endswith(\".json\"):\n            with open(os.path.join(directory_path, filename), \"r\") as file:\n                data = json.load(file)\n                for key, value in data.items():\n                    result[key] += 1\n    return result", "compilation_passed": true, "time": 0.0056438446044921875, "tests_passed": true, "error": null}
{"code": "result = collections.defaultdict(int)\n    for json_file in os.listdir(directory_path):\n        with open(os.path.join(directory_path, json_file)) as file:\n            data = json.load(file)\n            result.update(data)\n    return result", "compilation_passed": true, "time": 0.002051115036010742, "tests_passed": true, "error": null}
{"code": "directory_path = os.path.abspath(directory_path)\n\n    json_files = [file for file in os.listdir(directory_path) if file.endswith(\".json\")]\n    d = collections.Counter()\n\n    for file in json_files:\n        file_path = os.path.join(directory_path, file)\n        with open(file_path, \"r\") as f:\n            data = json.load(f)\n            d.update(data)\n\n    return dict(d)", "compilation_passed": true, "time": 0.0020821094512939453, "tests_passed": false, "error": "TypeError"}
