{"code": "files = []\n    for path in glob(directory + \"/**/*.json\", recursive=True):\n        with open(path) as file:\n            content = json.load(file)\n            if string in content:\n                files.append(path)\n    return files", "compilation_passed": true, "time": 0.004285097122192383, "tests_passed": false, "error": "json.decoder.JSONDecodeError"}
{"code": "files = []\n    for filename in glob(directory + \"/**/{}.json\".format(string)):\n        try:\n            with open(filename, \"r\") as file:\n                data = json.load(file)\n                if isinstance(data, dict) and \"book\" in data:\n                    files.append(filename)\n        except Exception:\n            pass\n    return files", "compilation_passed": true, "time": 0.0078012943267822266, "tests_passed": true, "error": null}
{"code": "files = []\n    for path in glob(directory + \"/*.json\"):\n        with open(path, \"r\") as file:\n            data = json.load(file)\n            if string in data:\n                files.append(path)\n    return files", "compilation_passed": true, "time": 0.003895998001098633, "tests_passed": false, "error": "json.decoder.JSONDecodeError"}
{"code": "if not directory:\n        return []\n\n    json_files = glob(directory + \"/**/*.json\", recursive=True)\n    matches = []\n    for file in json_files:\n        with open(file) as f:\n            try:\n                content = json.load(f)\n            except json.decoder.JSONDecodeError:\n                continue\n        if string in content.values():\n            matches.append(file)\n\n    return matches", "compilation_passed": true, "time": 0.0065288543701171875, "tests_passed": true, "error": null}
{"code": "files = glob(directory + \"/*.json\")\n\n    if not files:\n        print(\"No JSON files found in the given directory or subdirectories.\")\n        return []\n\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            try:\n                if data.get(string):\n                    return [file]\n            except (json.decoder.JSONDecodeError, AttributeError):\n                continue\n\n    return []", "compilation_passed": true, "time": 0.00551605224609375, "tests_passed": false, "error": "json.decoder.JSONDecodeError"}
{"code": "files = []\n    # use the glob function to get all the JSON files in the directory\n    for file in glob(directory + \"/{}.json\".format(string)):\n        with open(file, \"r\") as file_data:\n            file_json = json.load(file_data)\n            # if the file contains the string, append the file path to the files list\n            if string in file_json:\n                files.append(file)\n    return files", "compilation_passed": true, "time": 0.008031845092773438, "tests_passed": true, "error": null}
{"code": "files = glob(directory + \"/*.json\")\n    result = []\n    for file in files:\n        with open(file, \"r\") as f:\n            try:\n                data = json.load(f)\n            except json.JSONDecodeError:\n                print(\"The JSON data in\", file, \"is invalid\")\n            else:\n                if isinstance(data, dict):\n                    if string in data:\n                        result.append(file)\n    return result", "compilation_passed": true, "time": 0.008314132690429688, "tests_passed": true, "error": null}
{"code": "files = []\n    for filepath in glob(f\"{directory}/*.json\"):\n        with open(filepath, \"r\") as f:\n            data = json.load(f)\n            if string in data:\n                files.append(filepath)\n    return files", "compilation_passed": true, "time": 0.0038940906524658203, "tests_passed": false, "error": "json.decoder.JSONDecodeError"}
{"code": "# Create a list to store file paths containing the search string\n    result = []\n\n    # Iterate over JSON files in the given directory and its subdirectories\n    for root, dirs, files in os.walk(directory):\n        for file in files:\n            if file.endswith(\".json\"):\n                # Read the JSON file and check if the string is present within it\n                with open(os.path.join(root, file)) as data_file:\n                    data = json.load(data_file)\n                    if string in data:\n                        # Append the full file path to the result list\n                        result.append(os.path.join(root, file))\n\n    return result", "compilation_passed": true, "time": 0.003854990005493164, "tests_passed": false, "error": "json.decoder.JSONDecodeError"}
{"code": "# Initialize an empty list to store the matching file paths\n    matching_files = []\n\n    # Iterate through each file in the given directory\n    for file_path in glob(directory + \"/*.json\"):\n        # Open the JSON file for reading\n        with open(file_path, \"r\") as file:\n            # Parse the JSON data using the json library\n            json_data = json.load(file)\n\n            # Iterate through the JSON keys and values\n            for key, value in json_data.items():\n                # If the key matches the provided string, check if the value matches as well\n                if key == string:\n                    if value:\n                        # Add the file path to the list if the value is a string\n                        matching_files.append(file_path)\n                    else:\n                        # Otherwise, check if the value is a dict (for JSON data structures)\n                        if type(value) == dict:\n                            # If so, check its children recursively\n                            matching_files.extend(task_func(file_path, string))\n\n    return matching_files<", "compilation_passed": false, "time": 0.00021028518676757812, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Create a list to store the files containing the string.\n    file_list = []\n\n    # Define a function to recursively check for the string within JSON files.\n    def _search_files(directory, string):\n        # Get a list of JSON files in the current directory.\n        file_list.extend(glob(directory + \"/*.json\"))\n        # Recursively check all subdirectories.\n        for sub_dir in glob(directory + \"/*\"):\n            if pathlib.Path(sub_dir).is_dir():\n                _search_files(sub_dir, string)\n\n    # Call the recursive function with the directory path and the string to search.\n    _search_files(directory, string)\n\n    # Return a list of the files that contain the string.\n    return file_list", "compilation_passed": true, "time": 0.0037679672241210938, "tests_passed": false, "error": "NameError"}
{"code": "files = []\n\n    for root, _, files in os.walk(directory):\n        for file in glob(os.path.join(root, \"*.json\")):\n            with open(file) as f:\n                json_data = json.load(f)\n                for key, val in json_data.items():\n                    if string in str(val):\n                        files.append(file)\n                        break\n\n    return files", "compilation_passed": true, "time": 0.004086971282958984, "tests_passed": false, "error": "json.decoder.JSONDecodeError"}
{"code": "result = []\n    for path in glob(f\"{directory}/**/*.json\", recursive=True):\n        with open(path) as file:\n            try:\n                json_data = json.load(file)\n                if isinstance(json_data, dict):\n                    for key, value in json_data.items():\n                        if key == string and value:\n                            result.append(path)\n                elif isinstance(json_data, list):\n                    for item in json_data:\n                        for key, value in item.items():\n                            if key == string and value:\n                                result.append(path)\n            except json.decoder.JSONDecodeError:\n                pass\n    return result", "compilation_passed": true, "time": 0.010204792022705078, "tests_passed": true, "error": null}
{"code": "files = glob(directory + \"/*.json\")\n    paths = []\n    for file in files:\n        with open(file, \"r\") as f:\n            data = json.load(f)\n            if string in data:\n                paths.append(file)\n    return paths", "compilation_passed": true, "time": 0.004454851150512695, "tests_passed": false, "error": "json.decoder.JSONDecodeError"}
{"code": "# Recursively traverse the directory\n    files = []\n    for root, _, files_list in os.walk(directory):\n        for file in files_list:\n            # Check if the file extension matches\n            if os.path.splitext(file)[1] == \".json\":\n                with open(os.path.join(root, file), \"r\") as file_handle:\n                    data = json.load(file_handle)\n                    for key, value in data.items():\n                        # Check if the string is present in the value\n                        if string in str(value):\n                            files.append(os.path.join(root, file))\n\n    return files", "compilation_passed": true, "time": 0.003977060317993164, "tests_passed": false, "error": "json.decoder.JSONDecodeError"}
{"code": "filepaths = []\n\n    for path in glob(directory + \"/*.json\"):\n        with open(path) as json_file:\n            data = json.load(json_file)\n\n        if string in data:\n            filepaths.append(path)\n\n    return filepaths", "compilation_passed": true, "time": 0.0038979053497314453, "tests_passed": false, "error": "json.decoder.JSONDecodeError"}
{"code": "files = []\n    for root, dirs, files_ in os.walk(directory):\n        for file_ in glob(os.path.join(root, \"*.json\")):\n            with open(file_, \"r\") as f:\n                data = json.load(f)\n                if string in data:\n                    files.append(file_)\n    return files", "compilation_passed": true, "time": 0.003773927688598633, "tests_passed": false, "error": "json.decoder.JSONDecodeError"}
{"code": "files = []\n    for file in glob(directory + \"/**/*.json\", recursive=True):\n        with open(file, \"r\") as fp:\n            data = json.load(fp)\n        if string in data:\n            files.append(file)\n    return files", "compilation_passed": true, "time": 0.004014015197753906, "tests_passed": false, "error": "json.decoder.JSONDecodeError"}
{"code": "matches = []\n    for file in glob(directory + \"/*.json\"):\n        with open(file) as f:\n            data = json.load(f)\n            if string in data:\n                matches.append(file)\n    return matches", "compilation_passed": true, "time": 0.0038580894470214844, "tests_passed": false, "error": "json.decoder.JSONDecodeError"}
{"code": "files = []\n    for filepath in glob(directory + '/*'):\n        if filepath.endswith('.json'):\n            with open(filepath, 'r') as json_file:\n                try:\n                    data = json.load(json_file)\n                except json.JSONDecodeError:\n                    print(f\"Error loading {filepath}: skipping\")\n                else:\n                    if string in data:\n                        files.append(filepath)\n    return files", "compilation_passed": true, "time": 0.007931947708129883, "tests_passed": true, "error": null}
{"code": "file_paths = []\n\n    for file in glob(directory + \"/file*.json\"):\n        with open(file, \"r\") as file:\n            data = json.load(file)\n\n            for key, value in data.items():\n                if isinstance(value, dict):\n                    for inner_key, inner_value in value.items():\n                        if isinstance(inner_value, str) and string in inner_value:\n                            file_paths.append(file)\n                            break\n                elif isinstance(value, str) and string in value:\n                    file_paths.append(file)\n                    break\n\n    return file_paths", "compilation_passed": true, "time": 0.009229898452758789, "tests_passed": true, "error": null}
{"code": "files = glob(directory + \"/*.json\")\n    return_list = []\n    if not files:\n        return []\n\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n\n            if string in data:\n                return_list.append(file)\n\n    return return_list", "compilation_passed": true, "time": 0.004706859588623047, "tests_passed": false, "error": "json.decoder.JSONDecodeError"}
{"code": "file_paths = []\n    for filename in glob(directory + \"/*\"):\n        with open(filename) as file:\n            try:\n                json_data = json.load(file)\n            except json.JSONDecodeError as e:\n                print(f\"Invalid JSON: {filename} - {e}\")\n            else:\n                for key, value in json_data.items():\n                    if isinstance(value, str) and string in value:\n                        file_paths.append(filename)\n    return file_paths", "compilation_passed": true, "time": 0.004125833511352539, "tests_passed": false, "error": "IsADirectoryError"}
{"code": "paths = glob(directory + \"/*\")\n    result = []\n\n    for path in paths:\n        try:\n            with open(path, \"r\") as file:\n                data = json.load(file)\n        except FileNotFoundError:\n            continue\n\n        if isinstance(data, dict):\n            if string in data:\n                result.append(path)\n        elif isinstance(data, list):\n            for obj in data:\n                if isinstance(obj, dict):\n                    if string in obj:\n                        result.append(path)\n        elif isinstance(data, str):\n            if string in data:\n                result.append(path)\n        elif isinstance(data, int) or isinstance(data, float):\n            result.append(path)\n\n    return result", "compilation_passed": true, "time": 0.004092216491699219, "tests_passed": false, "error": "IsADirectoryError"}
{"code": "# create a list to store the files containing the string in JSON\n    file_list = []\n\n    # use glob to search for JSON files in the given directory\n    json_files = glob(f\"{directory}/**/*.json\")\n\n    # if there are any JSON files, iterate through them to see if the string is present\n    for json_file in json_files:\n        with open(json_file, \"r\") as f:\n            data = json.load(f)\n            if string in data:\n                file_list.append(json_file)\n\n    return file_list", "compilation_passed": true, "time": 0.00814199447631836, "tests_passed": true, "error": null}
{"code": "return glob(directory + \"/json/*.json\")", "compilation_passed": true, "time": 0.00743556022644043, "tests_passed": true, "error": null}
{"code": "files = []\n    for filepath in glob(directory + \"/*.json\"):\n        with open(filepath, \"r\") as file:\n            try:\n                data = json.load(file)\n            except json.JSONDecodeError as e:\n                print(e)\n            else:\n                if string in data:\n                    files.append(filepath)\n    return files", "compilation_passed": true, "time": 0.007988214492797852, "tests_passed": true, "error": null}
{"code": "file_paths = []\n\n    # Function to check if a given file contains the string within the JSON data\n    def file_contains(file_path):\n        with open(file_path) as file:\n            json_data = json.load(file)\n            return string in json.dumps(json_data)\n\n    # Iterate through the files in the directory\n    for file_path in glob(directory + \"/*.json\"):\n        # If the file contains the string\n        if file_contains(file_path):\n            file_paths.append(file_path)\n\n    # Iterate through the files in subdirectories\n    for file_path in glob(directory + \"/*/*.json\"):\n        # If the file contains the string\n        if file_contains(file_path):\n            file_paths.append(file_path)\n\n    return file_paths", "compilation_passed": true, "time": 0.004734992980957031, "tests_passed": false, "error": "json.decoder.JSONDecodeError"}
{"code": "result = []\n\n    for filename in glob(directory + \"/*.json\"):\n        with open(filename, \"r\") as file:\n            data = json.load(file)\n            if string in data:\n                result.append(filename)\n\n    return result", "compilation_passed": true, "time": 0.004620075225830078, "tests_passed": false, "error": "json.decoder.JSONDecodeError"}
{"code": "files = glob(directory + \"/**/*.json\", recursive=True)\n    results = []\n    for file in files:\n        with open(file) as json_file:\n            data = json.load(json_file)\n            if string in data.get(\"book\", \"\"):\n                results.append(file)\n    return results", "compilation_passed": true, "time": 0.0040493011474609375, "tests_passed": false, "error": "json.decoder.JSONDecodeError"}
