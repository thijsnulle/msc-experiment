{"code": "source_path_exists = pathlib.Path(source_path).exists()\n    if not source_path_exists:\n        raise ValueError(\"Source path does not exist.\")\n\n    source_path_is_directory = pathlib.Path(source_path).is_dir()\n    if not source_path_is_directory:\n        raise ValueError(\"Source path is not a directory.\")\n\n    dest_dir_path = pathlib.Path(destination_path).resolve()\n    dest_dir_path.mkdir(exist_ok=True, parents=True)\n\n    dest_files_list = []\n\n    for source_path in pathlib.Path(source_path).rglob('*'):\n        if not source_path.is_file():\n            continue\n\n        source_path_name = source_path.name\n        source_path_name_no_ext = source_path_name.rsplit('.', 1)[0]\n        dest_file_path = pathlib.Path(dest_dir_path) / source_path_name_", "compilation_passed": true, "time": 0.0024530887603759766, "tests_passed": true, "error": null}
{"code": "try:\n        source_path = pathlib.Path(source_path)\n        destination_path = pathlib.Path(destination_path)\n\n        if not source_path.exists() or not source_path.is_dir():\n            raise ValueError(\"The source path must exist and be a directory.\")\n\n        file_names = []\n\n        for file in source_path.glob(\"**/*.txt\"):\n            if file.name.startswith(\"file_\"):\n                shutil.copy(file, destination_path)\n                file_names.append(file.name)\n\n        return (str(source_path), file_names)\n\n    except ValueError as err:\n        print(\"Error:\", err)", "compilation_passed": true, "time": 0.002254962921142578, "tests_passed": true, "error": null}
{"code": "# Check if the source path exists and is a directory\n    if not pathlib.Path(source_path).is_dir():\n        raise ValueError(\"source_path must be an existing, accessible directory.\")\n\n    # Get all the files in the source path and move them to the destination path\n    filenames = shutil.move(source_path, destination_path)\n    return (source_path, filenames)", "compilation_passed": true, "time": 0.002192974090576172, "tests_passed": true, "error": null}
{"code": "if not pathlib.Path(source_path).is_dir():\n        raise ValueError(f\"{source_path} is not a directory\")\n\n    destination = pathlib.Path(destination_path).resolve()\n    if not destination.exists():\n        destination.mkdir(parents=True, exist_ok=True)\n\n    copied = []\n    for path in pathlib.Path(source_path).iterdir():\n        if path.is_file():\n            path.rename(destination / path.name)\n            copied.append(str(path.name))\n\n    return source_path, copied", "compilation_passed": true, "time": 0.0019447803497314453, "tests_passed": true, "error": null}
{"code": "# Check if the source directory exists\n    if not source_path:\n        raise ValueError(\"Invalid source_path provided.\")\n    if not os.path.exists(source_path):\n        raise ValueError(f\"{source_path} does not exist.\")\n\n    if not os.path.isdir(source_path):\n        raise ValueError(f\"{source_path} is not a directory.\")\n\n    # Check if the destination directory exists\n    if not destination_path:\n        raise ValueError(\"Invalid destination_path provided.\")\n    if not os.path.exists(destination_path):\n        os.mkdir(destination_path)\n    elif not os.path.isdir(destination_path):\n        raise ValueError(f\"{destination_path} is not a directory.\")\n\n    # Get a list of file names in the source directory\n    file_names = []\n    for root, _, files in os.walk(source_path):\n        for file_name in files:\n            file_names.append(file_name)\n    file_names", "compilation_passed": true, "time": 0.0019161701202392578, "tests_passed": false, "error": "NameError"}
{"code": "if not source_path:\n        return ('/', [])\n\n    source_path = pathlib.Path(source_path).resolve()\n\n    if not source_path.is_dir():\n        raise ValueError(\"Specified source path must be a directory.\")\n\n    source_dir_name = source_path.name\n    files_to_copy = []\n    for file_path in source_path.rglob(\"*\"):\n        if file_path.is_file():\n            files_to_copy.append(file_path.name)\n    shutil.copytree(source_path, pathlib.Path(destination_path).resolve().joinpath(source_dir_name))\n\n    return source_dir_name, files_to_copy", "compilation_passed": true, "time": 0.0023450851440429688, "tests_passed": true, "error": null}
{"code": "# Checking if the source path exists\n    try:\n        source_path = pathlib.Path(source_path).resolve()\n    except FileNotFoundError:\n        print(\"File or directory not found\")\n        exit(1)\n    else:\n        source_path.is_dir()\n\n    # Checking if destination directory exists\n    try:\n        destination_path = pathlib.Path(destination_path)\n    except FileNotFoundError:\n        print(\"Destination directory not found\")\n        exit(1)\n\n    # Checking if the destination path exists and is a directory\n    destination_path.is_dir()\n\n    # Copying files and returning the result\n    filenames = list()\n    for filename in source_path.iterdir():\n        if filename.is_file():\n            shutil.copy(filename, destination_path)\n            print(f\"File {filename} copied successfully\")\n            filenames.append(filename)\n    return (source_path.name, filenames)", "compilation_passed": true, "time": 0.003134012222290039, "tests_passed": true, "error": null}
{"code": "if not pathlib.Path(source_path).exists():\n        raise ValueError(\"Source directory does not exist\")\n    if not pathlib.Path(source_path).is_dir():\n        raise ValueError(\"Source path is not a directory\")\n\n    dest_dir = pathlib.Path(destination_path).resolve()\n    if not dest_dir.exists():\n        dest_dir.mkdir(parents=True, exist_ok=True)\n\n    for filename in (pathlib.Path(source_path) / file).relative_to(pathlib.Path(source_path).resolve()) for file in shutil.os.listdir(source_path):\n        file_path = str(dest_dir / file)\n        shutil.copyfile(str(pathlib.Path(source_path) / file), file_path)\n\n    return (source_path, list(pathlib.Path(source_path) / file).relative_to(pathlib.Path(source_path).resolve()) for file in shutil.os.listdir(source_path))", "compilation_passed": false, "time": 0.00019788742065429688, "tests_passed": false, "error": "SyntaxError"}
{"code": "if pathlib.Path(source_path).exists():\n        if pathlib.Path(source_path).is_dir():\n            filenames = [pathlib.Path(source_path) / file.name for file in pathlib.Path(source_path).iterdir()]\n\n            filenames_list = []\n\n            for filename in filenames:\n                if filename.suffix == \".txt\":\n                    shutil.copy(filename, pathlib.Path(destination_path) / filename.stem)\n                    filenames_list.append(filename.stem)\n            return source_path, filenames_list\n        else:\n            raise ValueError(\"Source directory does not exist or is not a directory.\")\n    else:\n        raise ValueError(\"Source directory does not exist.\")", "compilation_passed": true, "time": 0.0020668506622314453, "tests_passed": true, "error": null}
{"code": "source_path = pathlib.Path(source_path).resolve().absolute()\n    destination_path = pathlib.Path(destination_path).resolve().absolute()\n\n    if not source_path.exists():\n        raise ValueError(f\"Source path '{source_path}' does not exist\")\n    if not source_path.is_dir():\n        raise ValueError(f\"'{source_path}' is not a directory\")\n\n    destination_path.mkdir(parents=True, exist_ok=True)\n\n    files = []\n    for dirpath, dirnames, filenames in os.walk(source_path):\n        for filename in filenames:\n            files.append(pathlib.Path(dirpath, filename))\n    shutil.copy2(source_path, destination_path)\n\n    return source_path.name, files", "compilation_passed": true, "time": 0.002003908157348633, "tests_passed": false, "error": "NameError"}
{"code": "# Ensure the source_path exists and is a directory\n    if not pathlib.Path(source_path).is_dir():\n        raise ValueError('Source path must be a directory!')\n\n    # Create the destination directory if it does not exist\n    pathlib.Path(destination_path).mkdir(parents=True, exist_ok=True)\n\n    # List all the files in the source directory\n    file_names = [file_name for file_name in pathlib.Path(source_path).iterdir() if file_name.is_file()]\n\n    # Copy each file to the destination directory\n    for file_name in file_names:\n        shutil.copy(str(file_name), destination_path)\n\n    return source_path, file_names", "compilation_passed": true, "time": 0.002064943313598633, "tests_passed": true, "error": null}
{"code": "try:\n        shutil.copytree(source_path, destination_path)\n\n    except FileNotFoundError:\n        raise ValueError(f\"{source_path} does not exist or is not accessible\")\n\n    except Exception:\n        print(\"Some unexpected error occurred.\")\n\n    file_names = []\n    for path in pathlib.Path(source_path).iterdir():\n        if path.is_file():\n            file_names.append(path.stem)\n    return (source_path, file_names)", "compilation_passed": true, "time": 0.0020411014556884766, "tests_passed": true, "error": null}
{"code": "source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.exists():\n        raise ValueError(\"Source path does not exist.\")\n    elif not source_path.is_dir():\n        raise ValueError(\"Source path is not a directory.\")\n\n    files_to_copy = []\n\n    for entry in source_path.iterdir():\n        if entry.is_file():\n            files_to_copy.append(str(entry.name))\n            shutil.copy2(str(entry), destination_path)\n\n    return source_path.name, files_to_copy", "compilation_passed": true, "time": 0.0076999664306640625, "tests_passed": true, "error": null}
{"code": "if not pathlib.Path(source_path).is_dir():\n        raise ValueError(\n            f\"Specified source path {source_path} is not a directory.\"\n        )\n    else:\n        src_dir_name = os.path.basename(source_path)\n        source_path = pathlib.Path(source_path)\n        if not pathlib.Path(destination_path).exists():\n            pathlib.Path(destination_path).mkdir(parents=True)\n        copy_files = shutil.copytree(source_path, pathlib.Path(destination_path) / src_dir_name,\n                                     dirs_exist_ok=True, dirs=False)\n    return src_dir_name, copy_files[1]", "compilation_passed": true, "time": 0.0020532608032226562, "tests_passed": false, "error": "NameError"}
{"code": "if not pathlib.Path(source_path).is_dir():\n        raise ValueError(\"source_path must be a directory.\")\n\n    destination_path = pathlib.Path(destination_path)\n    if not destination_path.is_dir():\n        destination_path.mkdir(parents=True)\n\n    files = list(pathlib.Path(source_path).rglob(\"*\"))\n    copy_files = [f.relative_to(source_path).name for f in files]\n    shutil.copyfile(files[0], pathlib.Path(destination_path, copy_files[0]))\n    return (source_path, copy_files)", "compilation_passed": true, "time": 0.001970052719116211, "tests_passed": false, "error": "IndexError"}
{"code": "source_path = pathlib.Path(source_path)\n    if source_path.is_dir():\n        destination_path = pathlib.Path(destination_path)\n        if not destination_path.exists():\n            destination_path.mkdir()\n        shutil.copytree(source_path, destination_path)\n        return (source_path.name,\n                [filename for filename in list(source_path.glob(\"**/*.*\")) if not filename.is_file()])\n    else:\n        raise ValueError('Source path must be an existing and accessible directory.')", "compilation_passed": true, "time": 0.0021810531616210938, "tests_passed": false, "error": "FileExistsError"}
{"code": "try:\n        if pathlib.Path(source_path).is_dir():\n            pass\n        else:\n            raise ValueError('This directory is not valid!')\n    except ValueError as ex:\n        raise ValueError(f'This is not a directory or path {ex}')\n    print(f'SOURCE DIRECTORY: {source_path}')\n    print(f'DESTINATION DIRECTORY: {destination_path}')\n    for f in pathlib.Path(source_path).iterdir():\n        if f.is_file():\n            if pathlib.Path(destination_path).is_dir():\n                shutil.copy(f, destination_path)\n                print(f'File {f.name} was copied to {destination_path}.')\n                print(f'Copying process was finished!')\n                return destination_path, [f.name]\n    return source_path, []", "compilation_passed": true, "time": 0.0019860267639160156, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(source_path):\n        raise ValueError(f\"{source_path} doesn't exist\")\n    if not os.path.isdir(source_path):\n        raise ValueError(f\"{source_path} is not a directory\")\n\n    file_names = []\n    for file in pathlib.Path(source_path).rglob(\"*\"):\n        file_names.append(file.name)\n\n    for file in file_names:\n        shutil.copy(os.path.join(source_path, file), os.path.join(destination_path, file))\n\n    return source_path, file_names", "compilation_passed": true, "time": 0.0017960071563720703, "tests_passed": false, "error": "NameError"}
{"code": "if not pathlib.Path(source_path).exists():\n        raise ValueError(f\"{source_path} does not exist\")\n    if not pathlib.Path(source_path).is_dir():\n        raise ValueError(f\"{source_path} is not a directory\")\n    source_files = []\n    for file_name in pathlib.Path(source_path).iterdir():\n        if file_name.is_file():\n            source_files.append(file_name.stem)\n    # shutil.copyfileobj(sys.stdin, open(destination_path, \"w\"))\n    if pathlib.Path(destination_path).exists():\n        if pathlib.Path(destination_path).is_dir():\n            shutil.copytree(source_path, destination_path, dirs_exist_ok=True)\n            return (source_path, source_files)\n        if pathlib.Path(destination_path).is_file():\n            shutil.copyfile(source_path, destination_path)\n            return (source_path,", "compilation_passed": false, "time": 0.0002522468566894531, "tests_passed": false, "error": "SyntaxError"}
{"code": "source_path = pathlib.Path(source_path)\n\n    if not source_path.is_dir():\n        raise ValueError(f\"Source path '{source_path}' must be a directory.\")\n\n    files = []\n\n    for file in source_path.rglob('*'):\n        if file.is_file():\n            files.append(str(file.name))\n\n    shutil.copytree(source_path, destination_path)\n    return source_path.name, files", "compilation_passed": true, "time": 0.0018811225891113281, "tests_passed": false, "error": "FileExistsError"}
{"code": "if not pathlib.Path(source_path).is_dir():\n        raise ValueError(f'The source directory {source_path} is not accessible.')\n    else:\n        source_path = pathlib.Path(source_path)\n        destination_path = pathlib.Path(destination_path)\n        if not destination_path.is_dir():\n            destination_path.mkdir()\n        else:\n            source_dir_files = []\n            for file in pathlib.Path(source_path).rglob('*'):\n                if file.is_file():\n                    source_dir_files.append(file.name)\n            shutil.copy2(source_path, destination_path)\n            return source_path.name, source_dir_files", "compilation_passed": true, "time": 0.0019731521606445312, "tests_passed": false, "error": "IsADirectoryError"}
{"code": "source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if not source_path.is_dir():\n        raise ValueError(\"The source directory does not exist or is not accessible.\")\n\n    copied_files_list = []\n    for file in list(source_path.rglob(\"*.txt\")):\n        copied_file_path = pathlib.Path(file.parent, file.name).resolve()\n        shutil.copy2(file, copied_file_path)\n        copied_files_list.append(copied_file_path.name)\n\n    return source_path.name, copied_files_list", "compilation_passed": true, "time": 0.002476215362548828, "tests_passed": false, "error": "shutil.SameFileError"}
{"code": "source_path = pathlib.Path(source_path)\n    if not source_path.is_dir():\n        raise ValueError('source_path must be a valid directory')\n    source_path = source_path.resolve()\n    destination_path = pathlib.Path(destination_path)\n    destination_path.mkdir(exist_ok=True)\n\n    for filename in (source_path / '*').iterdir():\n        if filename.is_dir() or filename.is_symlink():\n            continue\n        destination_file = destination_path / filename.name\n        shutil.copyfile(str(filename), str(destination_file))\n    return source_path.name, [filename.name for filename in (source_path / '*').iterdir()]", "compilation_passed": true, "time": 0.0021827220916748047, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if pathlib.Path(source_path).is_dir():\n        for file_name in pathlib.Path(source_path).iterdir():\n            if file_name.is_file():\n                file_name.copy(destination_path)\n                print(\"{} copied\".format(file_name))\n    else:\n        raise ValueError(\"Source path is not a directory\")", "compilation_passed": true, "time": 0.0018928050994873047, "tests_passed": true, "error": null}
{"code": "source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n\n    if not source_path.is_dir():\n        raise ValueError(\"Source path must be a directory!\")\n\n    # check if destination path exists and create it if it does not\n    if not destination_path.exists():\n        destination_path.mkdir(parents=True, exist_ok=True)\n\n    filenames = []\n    for item in source_path.iterdir():\n        if item.is_file():\n            filename = item.name\n            filenames.append(filename)\n            shutil.copy(item, destination_path)\n\n    return source_path.name, filenames", "compilation_passed": true, "time": 0.007643938064575195, "tests_passed": true, "error": null}
{"code": "try:\n        source_path = pathlib.Path(source_path)\n    except TypeError:\n        raise ValueError('source_path must be an existing, accessible directory')\n\n    if source_path.is_dir():\n        source_path = source_path.resolve()\n        destination_path = pathlib.Path(destination_path).resolve()\n    else:\n        raise ValueError('source_path must be an existing, accessible directory')\n\n    files_to_copy = []\n\n    for file in source_path.iterdir():\n        if not file.is_file():\n            continue\n\n        files_to_copy.append(str(file.name))\n        file.replace(destination_path / file.name)\n\n    return source_path.name, files_to_copy", "compilation_passed": true, "time": 0.005775928497314453, "tests_passed": true, "error": null}
{"code": "source_path = pathlib.Path(source_path)\n    if not source_path.exists():\n        raise ValueError(f\"Directory '{source_path}' does not exist\")\n    if not source_path.is_dir():\n        raise ValueError(f\"'{source_path}' is not a directory\")\n\n    filenames = []\n    for filename in os.listdir(source_path):\n        if os.path.isfile(os.path.join(source_path, filename)):\n            filenames.append(filename)\n\n    if len(filenames) > 0:\n        os.makedirs(destination_path, exist_ok=True)\n        for filename in filenames:\n            shutil.copy(source_path / filename, destination_path)\n        return source_path, filenames\n\n    return source_path, filenames", "compilation_passed": true, "time": 0.001953125, "tests_passed": false, "error": "NameError"}
{"code": "source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    if source_path.exists() and source_path.is_dir():\n        destination_path.mkdir(exist_ok=True, parents=True)\n        files_copied = []\n\n        for file_path in source_path.iterdir():\n            if file_path.is_file():\n                shutil.copy2(file_path, destination_path)\n                files_copied.append(file_path.name)\n        return source_path.name, files_copied\n    raise ValueError(\"Source path does not exist or is not a directory\")", "compilation_passed": true, "time": 0.010096073150634766, "tests_passed": true, "error": null}
{"code": "if not pathlib.Path(source_path).is_dir():\n        raise ValueError(\"Source path must be a directory\")\n    source_path = pathlib.Path(source_path)\n    destination_path = pathlib.Path(destination_path)\n    destination_path.mkdir(parents=True, exist_ok=True)\n    for source in source_path.iterdir():\n        if source.is_file():\n            shutil.copy(source, destination_path)\n            destination = list(destination_path.iterdir())[-1]\n            shutil.copy(destination, source)\n            yield source.name, list(source_path.iterdir())", "compilation_passed": true, "time": 0.0020542144775390625, "tests_passed": true, "error": null}
{"code": "# If the source_path does not exist, raise an error.\n    if not pathlib.Path(source_path).is_dir():\n        raise ValueError('The source_path does not exist!')\n\n    # Get a list of filenames in the source_path without descending into subdirectories.\n    files = shutil.os.listdir(source_path)\n\n    # Create the destination path if it does not exist.\n    pathlib.Path(destination_path).mkdir(parents=True, exist_ok=True)\n\n    # Copy each file from the files list to the destination.\n    for f in files:\n        shutil.copy(source_path + '/' + f, destination_path)\n\n    # Return a tuple containing the source directory name and a list of filenames.\n    return source_path, files", "compilation_passed": true, "time": 0.0019521713256835938, "tests_passed": true, "error": null}
