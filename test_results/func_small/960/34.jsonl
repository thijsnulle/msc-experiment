{"code": "if not text:\n        raise ValueError(\"text cannot be empty\")\n\n    random.seed(seed)\n\n    return string.ascii_lowercase.translate(\n        str.maketrans(\n            string.ascii_lowercase + string.digits,\n            \"\".join(random.choice(string.ascii_lowercase) for _ in range(len(string.ascii_lowercase) + len(string.digits)))\n        )\n    )", "compilation_passed": true, "time": 0.0009381771087646484, "tests_passed": true, "error": null}
{"code": "# Check the seed\n    seed = seed if seed is not None else None\n\n    # Check if text is empty\n    if not text:\n        raise ValueError(\"Text cannot be empty.\")\n\n    # Convert text into an iterator\n    text_iterator = iter(text)\n\n    # Check if the first character is alpha\n    first = next(text_iterator, None)\n    if first is None:\n        raise ValueError(\"Text cannot be empty.\")\n\n    alpha = \"abcdefghijklmnopqrstuvwxyz\"\n    if first.lower() in alpha:\n        # The first character is alpha\n        alpha_first = True\n        # Replace first alpha with a random alpha\n        first = random.choice(alpha)\n    else:\n        # The first character is not alpha\n        alpha_first = False\n        # Replace first non-alpha with a random non-alpha\n        first = chr(random.randint(0, 127))\n\n    # Set the first character to alpha_first\n    text_iterator = iter(alpha_first, True) * 1 + iter", "compilation_passed": true, "time": 0.0009560585021972656, "tests_passed": false, "error": "TypeError"}
{"code": "if len(text) == 0:\n        raise ValueError(\"The input text must not be empty.\")\n\n    random.seed(seed)\n\n    res = []\n    for char in text:\n        if char.isalnum():\n            if char.isalpha():\n                res.append(random.choice(string.ascii_lowercase))\n            else:\n                res.append(random.randint(0, 9))\n        else:\n            res.append(char)\n\n    return \"\".join(res)", "compilation_passed": true, "time": 0.0009281635284423828, "tests_passed": false, "error": "TypeError"}
{"code": "if not text:\n        raise ValueError(\"Input text is empty\")\n\n    if not isinstance(seed, int):\n        seed = None\n\n    random.seed(seed)\n    alphabet = string.ascii_lowercase + string.digits\n\n    password = []\n    for char in text:\n        if char.isalpha():\n            password.append(random.choice(alphabet))\n        elif char.isdigit():\n            password.append(random.choice(string.digits))\n        elif char.isspace():\n            if random.random() < 0.5:\n                password.append(random.choice(string.digits))\n            else:\n                password.append(random.choice(alphabet))\n        else:\n            password.append(char)\n\n    return \"\".join(password)", "compilation_passed": true, "time": 0.000946044921875, "tests_passed": true, "error": null}
{"code": "# Validate input text\n    if len(text) < 1:\n        raise ValueError(\"Text must not be empty.\")\n\n    random.seed(seed)\n\n    # Generate a password that mirrors the structure of the text.\n    password = \"\"\n    for char in text:\n        if char.isalnum():\n            if char.isalpha():\n                password += random.choice(string.ascii_lowercase)\n            else:\n                password += random.randint(0, 9)\n        else:\n            password += random.choice((random.randint(48, 57), random.randint(97, 122)))\n\n    return password", "compilation_passed": true, "time": 0.0008749961853027344, "tests_passed": false, "error": "TypeError"}
{"code": "if not text:\n        raise ValueError(\"The text must not be empty.\")\n\n    random.seed(seed)\n\n    letters = string.ascii_lowercase\n    digits = \"0123456789\"\n    punctuation = \"!@#$%^&*()\"\n\n    result = \"\"\n    for char in text:\n        if char.isalpha():\n            result += letters[random.randint(0, len(letters) - 1)]\n        elif char.isnumeric():\n            result += digits[random.randint(0, len(digits) - 1)]\n        elif char in punctuation:\n            result += punctuation[random.randint(0, len(punctuation) - 1)]\n        else:\n            result += char\n\n    return result", "compilation_passed": true, "time": 0.000965118408203125, "tests_passed": true, "error": null}
{"code": "random.seed(seed)\n    chars = list(string.ascii_lowercase)\n\n    def generate_password(text):\n        password = \"\"\n        for char in text:\n            if char.isalnum():\n                password += random.choice(chars)\n            else:\n                password += char\n        return password\n\n    try:\n        return generate_password(text)\n    except ValueError:\n        raise ValueError(\"Input text is empty\")", "compilation_passed": true, "time": 0.0008451938629150391, "tests_passed": true, "error": null}
{"code": "random.seed(seed)\n\n    if not text:\n        raise ValueError(\"Text must not be empty.\")\n\n    out = \"\"\n\n    for char in text:\n        if char.isalnum():\n            if char.isalpha():\n                out += chr(random.randint(97, 122))\n            elif char.isdigit():\n                out += str(random.randint(0, 9))\n            else:\n                out += \"1234567890\"[random.randint(0, 9)]\n        elif char.isspace():\n            out += str(random.choice([random.randint(0, 9), random.randint(97, 122)]))\n        else:\n            out += char\n\n    return out", "compilation_passed": true, "time": 0.0009279251098632812, "tests_passed": true, "error": null}
{"code": "if text == '':\n        raise ValueError(\"The text must not be empty.\")\n\n    if seed is not None:\n        random.seed(seed)\n\n    # Check if the input text contains special characters\n    special_chars = string.punctuation + string.digits\n    contains_special_chars = any(c in special_chars for c in text)\n\n    # Convert the input text to lowercase and remove spaces\n    text_lower = text.lower().replace(\" \", \"\")\n\n    # Generate random strings of ascii lowercase letters and numbers\n    random_chars = [random.choice(string.ascii_lowercase) for _ in range(len(text_lower))]\n\n    # Generate random numbers if the original text contains digits\n    if contains_special_chars:\n        random_nums = [random.choice(string.digits) for _ in range(len(text_lower))]\n    else:\n        random_nums = []\n\n    # Generate random lowercase letters or digits at equal probabilities\n    for i, c in enumerate(text_lower):\n", "compilation_passed": false, "time": 0.00019788742065429688, "tests_passed": false, "error": "IndentationError"}
{"code": "if not text:\n        raise ValueError(\"Text cannot be empty.\")\n    random.seed(seed)\n    lower_ascii_chars = string.ascii_lowercase\n    digit_chars = string.digits\n\n    # Replace alphabetic characters with random ascii lowercase letters.\n    text = re.sub(r'[a-zA-Z]', lambda m: random.choice(lower_ascii_chars), text)\n\n    # Replace digits with random single-digit numbers.\n    text = re.sub(r'\\d+', lambda m: random.choice(digit_chars), text)\n\n    # Randomly replace spaces wth either a random digit or random lowercase letter at equal probabilities.\n    text = re.sub(r'\\s+', lambda m: random.choice([random.choice(digit_chars), random.choice(lower_ascii_chars)]), text)\n\n    # Keep other characters unchanged.\n    return text", "compilation_passed": true, "time": 0.0008859634399414062, "tests_passed": false, "error": "NameError"}
{"code": "if not text:\n        raise ValueError(\"Input text must not be empty.\")\n\n    # Create a random number generator using the provided seed (or a default seed if none was provided).\n    if seed is None:\n        random_state = random.Random()\n    else:\n        random_state = random.Random(seed)\n\n    # Iterate over each character in the text, and randomly replace it with a random character.\n    result = \"\"\n    for char in text:\n        if char.isalnum():\n            # If the character is alphanumeric, replace it with a random alphabetic character.\n            if random_state.choice([True, False]):\n                result += chr(random_state.randint(ord('a'), ord('z')))\n            else:\n                result += chr(random_state.randint(ord('0'), ord('9')))\n        elif string.ascii_letters.find(char) >= 0 or string.digits.find(char) >= 0:\n            # If the character is an alphabetic or digit, replace it with a random", "compilation_passed": false, "time": 0.00018095970153808594, "tests_passed": false, "error": "IndentationError"}
{"code": "random.seed(seed)\n\n    result = []\n\n    # Replace alphabetic characters with random ascii lowercase letters\n    for char in text:\n        if char.isalpha():\n            result.append(chr(random.randint(97, 122)))\n        else:\n            result.append(char)\n\n    # Replace digits with random single-digit numbers\n    for idx, char in enumerate(text):\n        if char.isdigit():\n            result[idx] = str(random.randint(0, 9))\n\n    # Replace spaces with either a random digit or random lowercase letter at equal probabilities\n    for idx, char in enumerate(text):\n        if char.isspace():\n            if random.randint(0, 1) == 0:\n                result[idx] = chr(random.randint(97, 122))\n            else:\n                result[idx] = str(random.randint(0, 9))\n\n    return \"\".join(result)", "compilation_passed": true, "time": 0.0010137557983398438, "tests_passed": true, "error": null}
{"code": "if not text:\n        raise ValueError('Empty text')\n    if not seed:\n        seed = random.randint(0, 2 ** 31)\n    r = random.Random(seed)\n    res = string.ascii_lowercase + string.digits + '!@#$%^&*()-_=+'\n    res_set = set(res)\n    out = list(text)\n    for i, letter in enumerate(text):\n        if letter.isalpha():\n            out[i] = res[r.randint(0, len(res)-1)]\n        elif letter.isnumeric():\n            out[i] = str(r.randint(0, 9))\n        elif letter.isspace():\n            if r.random() < 0.5:\n                out[i] = str(r.randint(0, 9))\n            else:\n                out[i] = res[r.randint(0, len(res)-1)]\n        else:\n            if r.random() < 0.5:\n                out[i] = str(r", "compilation_passed": false, "time": 0.0003440380096435547, "tests_passed": false, "error": "SyntaxError"}
{"code": "# TODO:\n\n    if not text:\n        raise ValueError(\"text must not be empty\")\n\n    random.seed(seed)\n\n    chars = list(text)\n    chars = [replace_letter(x, random.random()) for x in chars]\n    chars = [replace_number(x, random.random()) for x in chars]\n    return \"\".join(chars)", "compilation_passed": true, "time": 0.0009970664978027344, "tests_passed": false, "error": "NameError"}
{"code": "if not text:\n        raise ValueError(\"The input text must not be empty.\")\n\n    # Seed the random number generator with the seed value if provided\n    if seed is not None:\n        random.seed(seed)\n\n    # Replace alphabetic characters with random lowercase letters\n    pattern = r\"[a-z]\"\n    replacement = lambda match: chr(random.randint(97, 122))\n    text = re.sub(pattern, replacement, text, flags=re.IGNORECASE)\n\n    # Replace digits with random single-digit numbers\n    pattern = r\"\\d\"\n    replacement = lambda match: str(random.randint(0, 9))\n    text = re.sub(pattern, replacement, text)\n\n    # Replace spaces with either a random digit or random lowercase letter\n    pattern = r\"\\s\"\n    if random.randint(0, 1) == 0:\n        replacement = lambda match: random.randint(48, 57)\n    else:\n        replacement = lambda match: chr(", "compilation_passed": false, "time": 0.00022912025451660156, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not text:\n        raise ValueError(\"text must not be empty.\")\n\n    random.seed(seed)\n    output_chars = []\n\n    for char in text:\n        if char.isalnum():  # if char is alphanumeric\n            # generate random lowercase letter or number\n            if string.ascii_lowercase.find(char) != -1:\n                output_chars.append(random.choice(string.ascii_lowercase))\n            elif string.digits.find(char) != -1:\n                output_chars.append(random.choice(string.digits))\n            else:\n                # other alphabetic or numeric characters are untouched\n                output_chars.append(char)\n        elif string.whitespace.find(char) != -1:  # if char is whitespace\n            # generate random digit or lowercase letter\n            if random.randint(0, 1) == 1:\n                output_chars.append(random.choice(string.digits))\n            else:\n                output_chars.append(random.", "compilation_passed": false, "time": 0.0002028942108154297, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Check that the input text is not empty\n    if not text:\n        raise ValueError(\"Input text cannot be empty.\")\n\n    # Initialize the random number generator using the seed (if provided)\n    random.seed(seed)\n\n    # Split the input text into words and characters\n    words = text.split()\n    characters = list(text)\n\n    # Loop through each word and character and modify it based on the corresponding rule\n    password = \"\"\n    for i in range(len(words)):\n        # Rule 1: Replace alphabetic characters with random lowercase letters\n        word = \"\"\n        for j in range(len(words[i])):\n            if words[i][j].isalnum():\n                word += chr(random.randint(ord(\"a\"), ord(\"z\")))\n            else:\n                word += words[i][j]\n        password += word + \" \"\n\n    password = password.strip()\n\n    # Loop through each word and character and modify it based on the corresponding rule\n    for i in range(len(characters)):", "compilation_passed": false, "time": 0.00019025802612304688, "tests_passed": false, "error": "IndentationError"}
{"code": "if not text:\n        raise ValueError(\"Text must be non-empty\")\n    random.seed(seed)\n    alpha = list(string.ascii_lowercase + string.ascii_uppercase)\n    numbers = list(\"1234567890\")\n    # random.choice(list(text))\n\n    random_text = list(text)\n    for i in range(len(random_text)):\n        if random_text[i] in alpha:\n            random_text[i] = random.choice(alpha)\n        elif random_text[i].isdigit():\n            random_text[i] = str(random.choice(numbers))\n        elif random_text[i] in \" \":\n            random_text[i] = random.choice(numbers) + random.choice(alpha)\n    return \"\".join(random_text)", "compilation_passed": true, "time": 0.0010170936584472656, "tests_passed": true, "error": null}
{"code": "if not seed:\n        random.seed()\n    else:\n        random.seed(seed)\n    password = ''\n    for char in text:\n        if char.isalnum():\n            password += string.ascii_lowercase[random.randint(0, 25)]\n        elif char.isspace():\n            if random.random() < 0.5:\n                password += str(random.randint(0, 9))\n            else:\n                password += string.ascii_lowercase[random.randint(0, 25)]\n        else:\n            password += char\n    return password", "compilation_passed": true, "time": 0.0009810924530029297, "tests_passed": true, "error": null}
{"code": "if not text:\n        raise ValueError(\"Input text must not be empty.\")\n\n    random.seed(seed)\n    result = []\n    for char in text:\n        if string.ascii_letters.find(char) != -1:\n            result.append(random.choice(string.ascii_lowercase))\n        elif string.digits.find(char) != -1:\n            result.append(random.choice(string.digits))\n        elif char.isspace():\n            result.append(random.choice(string.digits) or random.choice(string.ascii_lowercase))\n        else:\n            result.append(char)\n    return \"\".join(result)", "compilation_passed": true, "time": 0.0009279251098632812, "tests_passed": true, "error": null}
{"code": "if not text:\n        raise ValueError(\"Input text must not be empty.\")\n    # Generate a random seed if none was provided\n    seed = seed or random.randrange(sys.maxsize)\n    random.seed(seed)\n\n    # Split the text into individual characters\n    chars = list(text)\n\n    # Replace alphabetic characters with random ascii lowercase letters\n    for i, char in enumerate(chars):\n        if char.isalpha():\n            chars[i] = chr(random.randint(ord('a'), ord('z')))\n\n    # Replace digits with random single-digit numbers\n    for i, char in enumerate(chars):\n        if char.isdigit():\n            chars[i] = str(random.randint(0, 9))\n\n    # Replace spaces with either a random digit or random lowercase letter at equal probabilities\n    for i, char in enumerate(chars):\n        if char == ' ':\n            chars[i] = random.choice(string.digits + string.ascii_lowercase)\n\n    return ''.join(chars)\n", "compilation_passed": true, "time": 0.0009500980377197266, "tests_passed": true, "error": null}
{"code": "if seed is None:\n        random.seed()\n    else:\n        random.seed(seed)\n    punctuation = \" !#$%&'()*+,-./:;<=>?@[\\\\]^_`{|}~\"\n    characters = string.ascii_letters + string.digits + punctuation\n    chars_to_replace = string.ascii_lowercase + string.digits + \" \"\n\n    password = []\n    for char in text:\n        if char in chars_to_replace:\n            password.append(random.choice(chars_to_replace))\n        else:\n            password.append(char)\n\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0008518695831298828, "tests_passed": true, "error": null}
{"code": "if len(text) == 0:\n        raise ValueError('Text must be non-empty')\n    rand = random.Random(seed)\n    lower_case_ascii = string.ascii_lowercase\n    digit_ascii = string.digits\n    result = ''\n\n    for character in text:\n        if character.isalpha():\n            result += rand.choice(lower_case_ascii)\n        elif character.isdigit():\n            result += rand.choice(digit_ascii)\n        elif character.isspace():\n            result += rand.choice(string.digits + lower_case_ascii)\n        else:\n            result += character\n\n    return result", "compilation_passed": true, "time": 0.0008840560913085938, "tests_passed": true, "error": null}
{"code": "if not text:\n        raise ValueError(\"The input text must not be empty.\")\n\n    random.seed(seed)\n\n    random_numbers = [random.choice([random.randint(0, 9), random.randint(0, 9)]) for _ in text]\n    random_symbols = [random.choice([random.randint(32, 127), random.randint(32, 127)]) for _ in text]\n\n    alphabet = [random.randint(97, 122) for _ in text]\n    digit = [random.randint(48, 57) for _ in text]\n\n    generated_text = \"\"\n    for i in range(len(text)):\n        char_index = random.choice([alphabet, digit])\n        char = char_index[i]\n        if text[i].isalpha():\n            generated_text += chr(char)\n        elif text[i].isnumeric():\n            generated_text += str(char)\n        elif text[i", "compilation_passed": false, "time": 0.0002548694610595703, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not seed:\n        seed = random.randint(0, 1000000)\n\n    random.seed(seed)\n    length = len(text)\n\n    new_password = []\n    for char in text:\n        if char.isalnum():\n            if char.isdigit():\n                new_password.append(random.randint(0, 9))\n            else:\n                new_password.append(random.choice('abcdefghijklmnopqrstuvwxyz'))\n        elif char.isspace():\n            new_password.append(random.choice(\"0123456789\") | random.choice(\"abcdefghijklmnopqrstuvwxyz\"))\n        else:\n            new_password.append(char)\n\n    return ''.join(map(str, new_password))", "compilation_passed": true, "time": 0.0009491443634033203, "tests_passed": false, "error": "TypeError"}
{"code": "random.seed(seed)\n    characters = list(string.ascii_lowercase + string.digits + string.ascii_letters)\n    for i in range(len(text)):\n        if text[i].isalpha():\n            text = text[:i] + characters[random.randint(0, len(characters)-1)] + text[i+1:]\n        elif text[i].isdigit():\n            text = text[:i] + str(random.randint(0, 9)) + text[i+1:]\n        elif text[i].isspace():\n            text = text[:i] + characters[random.randint(0, len(characters)-1)] + text[i+1:]\n    return text", "compilation_passed": true, "time": 0.0012040138244628906, "tests_passed": true, "error": null}
{"code": "if not text:\n        raise ValueError('Text cannot be empty')\n\n    random.seed(seed)\n\n    chars = string.ascii_lowercase + string.digits + \"!@#$%^&*()_-+={}[]|':;,./\"\n    result = \"\"\n    for char in text:\n        if char.isalnum():\n            result += char\n        elif char.isspace():\n            result += random.choice(chars)\n        else:\n            result += random.choice(string.ascii_lowercase + string.digits)\n\n    return result", "compilation_passed": true, "time": 0.0009698867797851562, "tests_passed": true, "error": null}
{"code": "if text == \"\":\n        raise ValueError(\"The input text cannot be empty.\")\n\n    random.seed(seed)\n\n    output_string = \"\"\n    for letter in text:\n        # Check if letter is an alphabetic character\n        if string.ascii_lowercase.find(letter) != -1:\n            # Replace letter with a random lowercase letter\n            output_string += string.ascii_lowercase[random.randint(0, 25)]\n        elif string.ascii_uppercase.find(letter) != -1:\n            # Replace letter with a random uppercase letter\n            output_string += string.ascii_uppercase[random.randint(0, 25)]\n        elif string.digits.find(letter) != -1:\n            # Replace letter with a random digit\n            output_string += str(random.randint(0, 9))\n        else:\n            # Leave letter unchanged\n            output_string += letter\n\n    return output_string", "compilation_passed": true, "time": 0.0009739398956298828, "tests_passed": true, "error": null}
{"code": "if not text:\n        raise ValueError('Input text cannot be empty.')\n\n    # initialize the random number generator\n    random.seed(seed)\n\n    # replace alphabetic characters with random letters\n    result = ''.join(\n        random.choice(string.ascii_lowercase) if c in string.ascii_letters else c\n        for c in text\n    )\n\n    # replace digits with random numbers\n    result = result.replace(string.digits, string.digits[random.randint(0, 9)])\n\n    # replace spaces with random letter or digit\n    result = result.replace(' ', random.choice(string.ascii_lowercase + string.digits))\n\n    # return the resulting password\n    return result", "compilation_passed": true, "time": 0.0008950233459472656, "tests_passed": true, "error": null}
{"code": "if not text:\n        raise ValueError(\"Input text cannot be empty.\")\n    # Set seed for random number generator\n    if seed is not None:\n        random.seed(seed)\n    # Get length of input text\n    n = len(text)\n    # Generate password with alphabetic characters mirrored\n    password = ''\n    for i in range(n):\n        c = text[i]\n        if c.isalpha():\n            if random.choice([True, False]):\n                password += string.ascii_lowercase[random.randint(0, 25)]\n            else:\n                password += string.ascii_uppercase[random.randint(0, 25)]\n        elif c.isalnum():\n            if random.choice([True, False]):\n                password += str(random.randint(0, 9))\n            else:\n                password += string.ascii_lowercase[random.randint(0, 25)]\n        elif c.isspace():\n            password += random.choice([string.digits, string.ascii_lowercase])[", "compilation_passed": false, "time": 0.00024008750915527344, "tests_passed": false, "error": "SyntaxError"}
