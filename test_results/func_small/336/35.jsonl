{"code": "matches = []\n    extensions = extensions if extensions else ['*']\n    for extension in extensions:\n        for f in glob.glob(os.path.join(directory, f\"**/*{extension}\"), recursive=True):\n            if re.search(pattern, Path(f).read_text().casefold()):\n                matches.append(Path(f))\n    return matches", "compilation_passed": true, "time": 0.008410215377807617, "tests_passed": true, "error": null}
{"code": "file_names = glob.glob(os.path.join(directory, extensions))\n    matches = []\n    for file_name in file_names:\n        with open(file_name) as f:\n            contents = f.read()\n        if re.search(pattern, contents, flags=re.IGNORECASE) is not None:\n            matches.append(Path(file_name))\n    return matches", "compilation_passed": true, "time": 0.0021882057189941406, "tests_passed": false, "error": "TypeError"}
{"code": "if not directory:\n        directory = os.getcwd()\n\n    matches = []\n    for ext in extensions:\n        matches += glob.glob(os.path.join(directory, ext))\n\n    return matches", "compilation_passed": true, "time": 0.002109050750732422, "tests_passed": true, "error": null}
{"code": "matches = []\n    for extension in extensions:\n        files = glob.glob(os.path.join(directory, extension))\n        for f in files:\n            with open(f, 'r') as g:\n                text = g.read()\n                if re.search(pattern, text, re.IGNORECASE):\n                    matches.append(Path(f))\n    return matches", "compilation_passed": true, "time": 0.007417917251586914, "tests_passed": true, "error": null}
{"code": "matches = glob.glob(directory + extensions, recursive=True)\n    matches = [match for match in matches if Path(match).is_file()]\n    matches = [match for match in matches if re.search(pattern, Path(match).read_text(encoding='utf-8').casefold())]\n    return matches", "compilation_passed": true, "time": 0.002128124237060547, "tests_passed": false, "error": "TypeError"}
{"code": "matches = []\n    for path in glob.glob(f'{directory}/**/*{extensions}', recursive=True):\n        if re.search(pattern, path, re.IGNORECASE):\n            matches.append(path)\n    return matches", "compilation_passed": true, "time": 0.0025870800018310547, "tests_passed": true, "error": null}
{"code": "matches = []\n    for extension in extensions:\n        matches += glob.glob(\n            os.path.join(directory, '**', '*.{}'.format(extension)),\n            case_sensitive=False\n        )\n\n    return [Path(match) for match in matches if re.search(pattern, match, flags=re.IGNORECASE)]", "compilation_passed": true, "time": 0.0020780563354492188, "tests_passed": false, "error": "TypeError"}
{"code": "results = []\n    for entry in glob.glob(os.path.join(directory, '**', extensions), recursive=True):\n        if not Path(entry).is_file():\n            continue\n        with open(entry, 'r', encoding='utf-8') as f:\n            text = f.read()\n            matches = re.findall(pattern, text, flags=re.I)\n            if matches:\n                results.append(entry)\n    return results", "compilation_passed": true, "time": 0.0020971298217773438, "tests_passed": false, "error": "TypeError"}
{"code": "matches = []\n    for pattern in extensions:\n        matches.extend(\n            glob.glob(\n                os.path.join(\n                    directory,\n                    f\"*{pattern}\"),\n                recursive=True,\n            ),\n        )\n    matches = [x for x in matches if re.search(pattern, os.path.basename(x), re.IGNORECASE)]\n    return [Path(x).absolute() for x in matches]", "compilation_passed": true, "time": 0.004441261291503906, "tests_passed": false, "error": "re.error"}
{"code": "paths = []\n    for ext in extensions:\n        for match in glob.iglob(f\"{directory}/*.{ext}\"):\n            with open(match, encoding='utf-8') as f:\n                if re.search(pattern, f.read(), re.IGNORECASE):\n                    paths.append(Path(match))\n    return paths", "compilation_passed": true, "time": 0.0022461414337158203, "tests_passed": true, "error": null}
{"code": "# Path class is available in Python 3.5+.\n    pathlib_class = Path\n    glob_class = glob\n    re_module = re\n    matches = []\n    for ext in extensions:\n        ext_pat = f'.{ext}'\n        for path in glob_class.glob(directory + f'/**/*{ext_pat}'):\n            with open(path, 'r') as f:\n                if re_module.search(pattern, f.read(), re.I):\n                    matches.append(pathlib_class(path).resolve())\n    return matches", "compilation_passed": true, "time": 0.0021958351135253906, "tests_passed": true, "error": null}
{"code": "matches = []\n    for ext in extensions:\n        matches += glob.glob(os.path.join(directory, f'**/*.{ext}'))\n\n    matches = [Path(path) for path in matches]\n\n    return [path for path in matches if re.search(pattern, path.read_text(), re.I) is not None]", "compilation_passed": true, "time": 0.0021619796752929688, "tests_passed": true, "error": null}
{"code": "regex = re.compile(pattern, re.IGNORECASE)\n    matches = []\n\n    for extension in extensions:\n        paths = glob.glob(f\"{directory}/{extension}\")\n        matches.extend(regex.findall(os.path.join(path, os.listdir(path)) for path in paths))\n    return matches", "compilation_passed": true, "time": 0.0020751953125, "tests_passed": false, "error": "TypeError"}
{"code": "result = []\n\n    for filename in glob.iglob(f'{directory}/*'):\n        if filename.endswith(extensions):\n            with open(filename, 'r', encoding=\"utf-8\") as f:\n                content = f.read()\n\n                if re.search(pattern, content, flags=re.IGNORECASE):\n                    result.append(Path(filename))\n\n    return result", "compilation_passed": true, "time": 0.0021522045135498047, "tests_passed": false, "error": "TypeError"}
{"code": "matches = []\n\n    for ext in extensions:\n        matches.extend([os.path.join(p, f) for p, _, fs in os.walk(directory) for f in fs if re.search(pattern, f, re.IGNORECASE) and ext in f])\n\n    return matches", "compilation_passed": true, "time": 0.0021750926971435547, "tests_passed": true, "error": null}
{"code": "result = []\n    if extensions is None:\n        extensions = []\n    if len(extensions) == 0:\n        extensions = ['*']\n    extensions = list(map(lambda x: x.replace('*', ''), extensions))\n    pattern = f'(.*[.{extensions}])'\n    pattern = re.compile(pattern, re.I)\n    files = glob.glob(os.path.join(directory, '**', '*'), recursive=True)\n    for file in files:\n        if pattern.search(os.path.basename(file)) and Path(file).is_file():\n            result.append(file)\n    return result", "compilation_passed": true, "time": 0.0025968551635742188, "tests_passed": true, "error": null}
{"code": "# Make sure to import os, re, glob, and pathlib at the top of your function.\n\n    # Get all files in the directory that match the specified extension\n    file_list = glob.glob(f\"{directory}/{extensions}\")\n\n    # Initialize a list to store matched files\n    matches = []\n\n    for filename in file_list:\n        if re.search(pattern, Path(filename).read_text().lower()):\n            matches.append(filename)\n\n    return matches", "compilation_passed": true, "time": 0.0022649765014648438, "tests_passed": true, "error": null}
{"code": "# find files recursively within the specified directory, but exclude hidden files\n    files = [f for f in glob.glob(f\"{directory}/**\", recursive=True) if os.path.isfile(f)]\n\n    # check that file extension is present\n    for extension in extensions:\n        if extension not in files:\n            files.append(extension)\n\n    matches = []\n    for file in files:\n        # check that file matches pattern and that it's a text file\n        if re.search(pattern, Path(file).name) and Path(file).suffix in extensions:\n            matches.append(Path(file))\n    return matches", "compilation_passed": true, "time": 0.002412080764770508, "tests_passed": true, "error": null}
{"code": "results = []\n    for extension in extensions:\n        for filename in glob.iglob(os.path.join(directory, f\"*{extension}\")):\n            try:\n                with open(filename) as f:\n                    contents = f.read()\n            except (UnicodeDecodeError, UnicodeEncodeError) as e:\n                print('ERROR:', e)\n                continue\n            match = re.search(pattern, contents, re.IGNORECASE)\n            if match:\n                print('GLOBAL:', match.group())\n                results.append(Path(filename))\n    return results", "compilation_passed": true, "time": 0.00847625732421875, "tests_passed": true, "error": null}
{"code": "matches = []\n\n    for extension in extensions:\n        matches += glob.glob(os.path.join(directory, f'*{extension}'))\n\n    return matches", "compilation_passed": true, "time": 0.0021390914916992188, "tests_passed": true, "error": null}
{"code": "matches = []\n    for extension in extensions:\n        paths = glob.glob(os.path.join(directory, f'**/*.{extension}'))\n        paths = [Path(p) for p in paths if re.search(pattern, p, re.I)]\n        matches.extend(paths)\n    return matches", "compilation_passed": true, "time": 0.002079010009765625, "tests_passed": true, "error": null}
{"code": "if os.path.isdir(directory):\n        pattern = re.escape(pattern)\n        matches = [\n            str(Path(p).resolve()) for p in glob.iglob(f'**/*.{e}', recursive=True,\n                                                       follow_links=True) if pattern.lower() in str(\n                Path(p).resolve()).lower()]\n        return matches\n    else:\n        raise Exception(f'File \"{directory}\" does not exist')", "compilation_passed": true, "time": 0.0020220279693603516, "tests_passed": false, "error": "NameError"}
{"code": "return [match_file(pattern, directory, extension)\n            for extension in extensions]", "compilation_passed": true, "time": 0.001971006393432617, "tests_passed": false, "error": "NameError"}
{"code": "matches = []\n    for extension in extensions:\n        matches.extend(glob.glob(os.path.join(directory, f'*{extension}')))\n    for match in matches:\n        with open(match, encoding='utf-8') as f:\n            if pattern in f.read():\n                matches.append(Path(match))\n    return matches", "compilation_passed": true, "time": 0.0022499561309814453, "tests_passed": true, "error": null}
{"code": "# ------------------------------------------------------------------------------------------------------------------\n    # Example:\n    #\n    # ```python\n    # import tempfile\n    # temp_dir = tempfile.mkdtemp()\n    # with open(os.path.join(temp_dir, 'hello.txt'), 'w') as f:\n    #     _ = f.write('Hello, this is a test file.')\n    # with open(os.path.join(temp_dir, 'hello.md'), 'w') as f:\n    #     _ = f.write('# Notes')\n    # matches = task_func('Hello', temp_dir, ['*.txt', '*.md'])\n    # print(matches[0])  # 'hello.txt'\n    # ```\n    # ------------------------------------------------------------------------------------------------------------------\n    # ---", "compilation_passed": true, "time": 0.0019609928131103516, "tests_passed": false, "error": "TypeError"}
{"code": "matches = []\n\n    # Use Path.glob() to match all files in the given directory and extensions\n    for path in Path(directory).glob(f\"**/*.{','.join(extensions)}\"):\n        if re.search(pattern, path.read_text(encoding='utf-8'), re.IGNORECASE):\n            matches.append(path.resolve())\n\n    return matches", "compilation_passed": true, "time": 0.002193927764892578, "tests_passed": true, "error": null}
{"code": "matches = []\n    extensions_glob = '*.' + '|*.'.join(extensions)\n\n    for extension in extensions:\n        for pattern in glob.glob(os.path.join(directory, f'*{extension}')):\n            with open(pattern, 'rt') as f:\n                if re.search(pattern, f.read(), re.IGNORECASE):\n                    matches.append(Path(pattern))\n\n    return matches", "compilation_passed": true, "time": 0.0025479793548583984, "tests_passed": true, "error": null}
{"code": "paths = glob.glob(os.path.join(directory, f'{pattern}.*'))\n    return [p for p in paths if p.endswith(tuple(extensions))]", "compilation_passed": true, "time": 0.0020949840545654297, "tests_passed": true, "error": null}
{"code": "matches = []\n    for extension in extensions:\n        for file in glob.glob(os.path.join(directory, extension)):\n            if re.search(pattern, Path(file).read_text().lower()):\n                matches.append(file)\n    return matches", "compilation_passed": true, "time": 0.0074350833892822266, "tests_passed": true, "error": null}
{"code": "files_list = glob.glob(os.path.join(directory, f\"*{'|'.join(extensions)}\"))\n    pattern = pattern.lower()\n    matches = [f for f in files_list if re.search(pattern, Path(f).read_text().lower())]\n    return matches", "compilation_passed": true, "time": 0.0022389888763427734, "tests_passed": true, "error": null}
