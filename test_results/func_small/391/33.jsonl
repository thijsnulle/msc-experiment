{"code": "# Create an archive directory if it doesn't exist.\n    if not os.path.exists(archive_dir):\n        os.mkdir(archive_dir)\n\n    # Iterate through all files in the specified directory.\n    errors = []\n    for filename in glob.glob(os.path.join(directory, '*.json')):\n        try:\n            # Move the JSON file to the archive directory.\n            shutil.move(filename, os.path.join(archive_dir, os.path.basename(filename)))\n        except OSError as e:\n            errors.append(str(e))\n\n    # Check if any files failed to move.\n    return not bool(errors), errors", "compilation_passed": true, "time": 0.004971742630004883, "tests_passed": true, "error": null}
{"code": "archive_dir = os.path.join(directory, archive_dir)\n    os.makedirs(archive_dir, exist_ok=True)\n    try:\n        for json_file in glob.glob(os.path.join(directory, '*.json')):\n            shutil.move(json_file, os.path.join(archive_dir, os.path.basename(json_file)))\n        return True, []\n    except Exception as e:\n        return False, [f\"Error moving {json_file}: {e}\"]", "compilation_passed": true, "time": 0.002357959747314453, "tests_passed": true, "error": null}
{"code": "json_files = glob.glob(f\"{directory}/*.json\")\n    error_msgs = []\n    if not json_files:\n        error_msgs.append(f\"No JSON files found in {directory}.\")\n    else:\n        for file in json_files:\n            try:\n                shutil.move(file, f\"{archive_dir}/{os.path.basename(file)}\")\n            except OSError as e:\n                error_msgs.append(f\"Error moving {file}: {str(e)}\")\n        return (not error_msgs, error_msgs)", "compilation_passed": true, "time": 0.003445148468017578, "tests_passed": false, "error": "TypeError"}
{"code": "result = []\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n    for file in glob.glob(directory + '/*.json'):\n        archive_file = os.path.join(archive_dir, os.path.basename(file))\n        if not os.path.exists(archive_file):\n            try:\n                shutil.move(file, archive_file)\n            except Exception as e:\n                result.append(f'Error moving file {file} to {archive_file}: {str(e)}')\n        else:\n            result.append(f'File {file} already exists in archive')\n    if len(result) == 0:\n        return True, result\n    else:\n        return False, result", "compilation_passed": true, "time": 0.0048809051513671875, "tests_passed": true, "error": null}
{"code": "# Define the directory where the JSON files are located\n    json_dir = directory\n\n    # Define the directory to which the JSON files will be archived\n    archive_dir = archive_dir\n\n    # Create the archive directory if it doesn't exist\n    if not os.path.exists(archive_dir):\n        os.mkdir(archive_dir)\n\n    # Create a list of all JSON files in the directory\n    json_files = glob.glob(os.path.join(json_dir, '*.json'))\n\n    # Move the JSON files to the archive directory\n    for json_file in json_files:\n        shutil.move(json_file, archive_dir)\n\n    # Return a tuple containing True if all files are successfully moved and a list of error messages\n    return True, []", "compilation_passed": true, "time": 0.0047931671142578125, "tests_passed": true, "error": null}
{"code": "files = glob.glob(os.path.join(directory, \"*.json\"))\n    error_messages = []\n    for file in files:\n        try:\n            shutil.move(file, os.path.join(archive_dir, os.path.basename(file)))\n        except Exception as e:\n            error_messages.append(f\"Failed to archive file: {file}\")\n\n    return (len(files) == len(error_messages), error_messages)", "compilation_passed": true, "time": 0.0016851425170898438, "tests_passed": true, "error": null}
{"code": "# Define the archive directory to store the files\n    if not os.path.isdir(archive_dir):\n        os.makedirs(archive_dir)\n\n    # Generate a list of JSON files in the directory\n    files = glob.glob(os.path.join(directory, '**/*.json'))\n    errors = []  # List to store error messages\n    for file in files:\n        try:\n            shutil.move(file, os.path.join(archive_dir, os.path.basename(file)))\n        except Exception as e:\n            errors.append(str(e))\n\n    return (not bool(errors), errors)  # Check if all files moved successfully", "compilation_passed": true, "time": 0.0015707015991210938, "tests_passed": true, "error": null}
{"code": "files = glob.glob(os.path.join(directory, '*.json'))\n    if not files:\n        return False, ['No JSON files found in directory: {}'.format(directory)]\n    else:\n        for file in files:\n            shutil.move(file, os.path.join(archive_dir, os.path.basename(file)))\n    return True, []", "compilation_passed": true, "time": 0.003185272216796875, "tests_passed": true, "error": null}
{"code": "errors = []\n    for file_path in glob.glob(os.path.join(directory, '*.json')):\n        try:\n            shutil.move(file_path, os.path.join(archive_dir, os.path.basename(file_path)))\n        except Exception as e:\n            errors.append(f'Error moving file: {e}')\n    return bool(len(errors) == 0), errors", "compilation_passed": true, "time": 0.0054171085357666016, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(directory):\n        raise ValueError(\"The given directory does not exist.\")\n\n    if not os.path.isdir(directory):\n        raise ValueError(\"The given directory is not a valid directory.\")\n\n    archive_files = glob.glob(os.path.join(directory, '*.json'))\n\n    error_messages = []\n    for archive_file in archive_files:\n        archive_file_basename = os.path.basename(archive_file)\n        try:\n            shutil.move(archive_file, os.path.join(archive_dir, archive_file_basename))\n        except Exception as e:\n            error_messages.append(str(e))\n\n    return len(archive_files) == len(error_messages), error_messages", "compilation_passed": true, "time": 0.0019750595092773438, "tests_passed": true, "error": null}
{"code": "file_list = glob.glob(os.path.join(directory, \"*.json\"))\n    if not file_list:\n        return (False, [\"No JSON files found in the given directory.\"])\n\n    error_messages = []\n    for file in file_list:\n        try:\n            shutil.move(file, os.path.join(archive_dir, os.path.basename(file)))\n        except Exception as e:\n            error_messages.append(f\"Error moving file '{file}': {str(e)}\")\n\n    return (not bool(error_messages), error_messages)", "compilation_passed": true, "time": 0.003492116928100586, "tests_passed": true, "error": null}
{"code": "error_messages = []\n    archive_path = os.path.join(archive_dir, os.path.basename(directory))\n    if not os.path.exists(archive_path):\n        os.mkdir(archive_path)\n\n    for file in glob.iglob(os.path.join(directory, '*.json')):\n        try:\n            shutil.move(file, os.path.join(archive_path, file.replace(directory, '')))\n        except:\n            error_messages.append(f\"Error moving {file} to archive.\")\n\n    return (len(error_messages) == 0, error_messages)", "compilation_passed": true, "time": 0.0019960403442382812, "tests_passed": true, "error": null}
{"code": "files = glob.glob(os.path.join(directory, '*.json'))\n    if not files:\n        return False, [\"No JSON files found in {}\".format(directory)]\n\n    archive_files = glob.glob(os.path.join(archive_dir, '*.json'))\n    if archive_files:\n        archive_files = os.listdir(archive_dir)\n        for file in archive_files:\n            if os.path.isfile(file):\n                os.remove(file)\n\n    archive_path = os.path.join(archive_dir, os.path.basename(directory))\n    if os.path.exists(archive_path):\n        os.rmdir(archive_path)\n\n    shutil.make_archive(archive_path, 'zip', directory)\n    shutil.rmtree(directory)\n    return True, []", "compilation_passed": true, "time": 0.0024156570434570312, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "files = glob.glob(os.path.join(directory, \"*.json\"))\n    archive_files = []\n    error_messages = []\n    for file in files:\n        try:\n            shutil.move(file, os.path.join(archive_dir, os.path.basename(file)))\n            archive_files.append(os.path.basename(file))\n        except OSError as e:\n            error_messages.append(f\"Error moving {file}: {e}\")\n    return len(files) == len(archive_files), error_messages", "compilation_passed": true, "time": 0.004639863967895508, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(directory):\n        raise Exception(f\"The directory {directory} does not exist\")\n\n    for filename in glob.glob(os.path.join(directory, \"*.json\")):\n        try:\n            shutil.move(filename, os.path.join(archive_dir, os.path.basename(filename)))\n        except:\n            print(f\"Error moving {filename} to {archive_dir}\")\n\n    return True, []", "compilation_passed": true, "time": 0.0037698745727539062, "tests_passed": false, "error": "Exception"}
{"code": "errors = []\n    files = glob.glob(os.path.join(directory, '**/*.json'))\n    for file in files:\n        try:\n            shutil.move(file, os.path.join(archive_dir, os.path.basename(file)))\n        except Exception as e:\n            errors.append(\"{}: {}\".format(file, e))\n    return (True, errors)", "compilation_passed": true, "time": 0.001619100570678711, "tests_passed": true, "error": null}
{"code": "try:\n        if not os.path.exists(archive_dir):\n            os.makedirs(archive_dir)\n        archive_file = os.path.join(archive_dir, 'archive.json')\n        with open(archive_file, 'w') as f:\n            f.write(\"[]\")\n        for filename in glob.glob(os.path.join(directory, '*.json')):\n            shutil.move(filename, os.path.join(archive_dir, os.path.basename(filename)))\n        with open(archive_file, 'r+') as f:\n            data = eval(f.read())\n            data.append(os.path.basename(archive_file))\n            f.seek(0)\n            f.write(str(data))\n    except Exception as e:\n        return False, [str(e)]\n    return True, []", "compilation_passed": true, "time": 0.006081104278564453, "tests_passed": true, "error": null}
{"code": "file_list = glob.glob(os.path.join(directory, '*.json'))\n    errors = []\n    for file in file_list:\n        try:\n            shutil.move(file, os.path.join(archive_dir, os.path.basename(file)))\n        except (OSError, IOError) as error:\n            errors.append(str(error))\n    return (True, errors)", "compilation_passed": true, "time": 0.0051419734954833984, "tests_passed": true, "error": null}
{"code": "error_list = []\n    for path in glob.glob(os.path.join(directory, '*.json')):\n        try:\n            shutil.move(path, os.path.join(archive_dir, os.path.basename(path)))\n        except Exception as e:\n            error_list.append(f\"Failed to move {path}: {e}\")\n\n    return (len(error_list) == 0, error_list)", "compilation_passed": true, "time": 0.0055408477783203125, "tests_passed": true, "error": null}
{"code": "archive_dir = os.path.join(directory, archive_dir)\n    os.makedirs(archive_dir, exist_ok=True)\n    archive_files = glob.glob(os.path.join(directory, \"*.json\"))\n    archive_files_to_move = []\n    archive_files_errors = []\n\n    for file in archive_files:\n        try:\n            shutil.move(file, os.path.join(archive_dir, os.path.basename(file)))\n            archive_files_to_move.append(file)\n        except Exception as e:\n            archive_files_errors.append(\"{}: {}\".format(file, str(e)))\n\n    if archive_files_errors:\n        return (False, archive_files_errors)\n    return (True, [])", "compilation_passed": true, "time": 0.0019140243530273438, "tests_passed": true, "error": null}
{"code": "if not os.path.isdir(directory):\n        return False, [\"Error: Directory not found: %s\" % directory]\n    error_list = []\n    for filename in os.listdir(directory):\n        file_path = os.path.join(directory, filename)\n        if os.path.isfile(file_path) and file_path.endswith('.json'):\n            try:\n                shutil.move(file_path, archive_dir)\n            except Exception as e:\n                error_list.append(f\"Error: Moving {file_path} to archive failed: {e}\")\n    return True, error_list", "compilation_passed": true, "time": 0.004007101058959961, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(directory):\n        return False, [\"No such directory: \" + directory]\n\n    files = glob.glob(os.path.join(directory, '*.json'))\n    archive_files = []\n    error_messages = []\n\n    for file in files:\n        try:\n            shutil.move(file, os.path.join(archive_dir, os.path.basename(file)))\n            archive_files.append(file)\n        except Exception as e:\n            error_messages.append(str(e))\n\n    return bool(archive_files), error_messages", "compilation_passed": true, "time": 0.004297971725463867, "tests_passed": true, "error": null}
{"code": "files = glob.glob(os.path.join(directory, '*.json'))\n\n    error_msgs = []\n    for f in files:\n        try:\n            shutil.move(f, os.path.join(archive_dir, os.path.basename(f)))\n        except Exception as e:\n            error_msgs.append(f\"{f} failed to be moved: {e}\")\n\n    return len(error_msgs) == 0, error_msgs", "compilation_passed": true, "time": 0.005421876907348633, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(directory):\n        raise IOError(f\"{directory} does not exist\")\n\n    # List all JSON files in the given directory\n    json_files = glob.glob(os.path.join(directory, '*.json'))\n\n    # Check if there are no JSON files to be archived\n    if not json_files:\n        return True, []\n\n    # Move files to the archive directory\n    move_errors = []\n    for file in json_files:\n        archive_path = os.path.join(archive_dir, os.path.basename(file))\n        try:\n            shutil.move(file, archive_path)\n        except Exception as e:\n            move_errors.append(str(e))\n\n    return (len(move_errors) == 0, move_errors)", "compilation_passed": true, "time": 0.004086971282958984, "tests_passed": false, "error": "OSError"}
{"code": "files = glob.glob(os.path.join(directory, '*.json'))\n    errors = []\n    for file in files:\n        try:\n            shutil.move(file, archive_dir)\n        except Exception as e:\n            errors.append(f\"Error moving file '{file}' to archive: {str(e)}\")\n    return len(errors) == 0, errors", "compilation_passed": true, "time": 0.005569934844970703, "tests_passed": true, "error": null}
{"code": "archive_dir = os.path.join(os.path.realpath(archive_dir), 'archive')\n\n    # Create the archive directory if it doesn't exist\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n\n    archive_files = glob.glob(os.path.join(directory, \"*.json\"))\n\n    for archive_file in archive_files:\n        shutil.move(archive_file, archive_dir)", "compilation_passed": true, "time": 0.002153158187866211, "tests_passed": false, "error": "TypeError"}
{"code": "error_msg = []\n    if not os.path.isdir(directory):\n        error_msg.append(f\"{directory} is not a valid directory.\")\n        return False, error_msg\n\n    json_files = glob.glob(os.path.join(directory, \"*.json\"))\n    archive_path = os.path.join(archive_dir, os.path.basename(directory))\n\n    try:\n        for file in json_files:\n            shutil.move(file, archive_path)\n    except Exception as e:\n        error_msg.append(f\"Failed to archive {file}: {e}\")\n\n    return len(json_files) > 0, error_msg", "compilation_passed": true, "time": 0.0018780231475830078, "tests_passed": true, "error": null}
{"code": "try:\n        os.makedirs(archive_dir, exist_ok=True)\n        archive_files = glob.glob(os.path.join(directory, '*.json'))\n        for archive_file in archive_files:\n            shutil.move(archive_file, archive_dir)\n        return (True, [])\n    except Exception as e:\n        return (False, [str(e)])", "compilation_passed": true, "time": 0.004760026931762695, "tests_passed": true, "error": null}
{"code": "error_messages = []\n    if os.path.isdir(directory) and os.path.isdir(archive_dir):\n        archive_files = glob.glob(os.path.join(directory, '*.json'))\n        for file in archive_files:\n            shutil.move(file, os.path.join(archive_dir, os.path.basename(file)))\n        return True, error_messages\n    else:\n        error_messages.append(f\"Directory {directory} or {archive_dir} does not exist.\")\n        return False, error_messages", "compilation_passed": true, "time": 0.0032062530517578125, "tests_passed": true, "error": null}
{"code": "# Check if the archive directory exists and create it if it doesn't.\n    archive_dir = os.path.join(directory, archive_dir)\n    if not os.path.exists(archive_dir):\n        os.makedirs(archive_dir)\n\n    # Get all JSON files in the directory and create a list of file paths.\n    json_files = glob.glob(os.path.join(directory, '**/*.json'))\n    paths = [os.path.join(directory, f) for f in json_files]\n\n    # Move all JSON files to the archive directory and return a tuple containing the boolean status and a list of error messages.\n    error_messages = []\n    for path in paths:\n        try:\n            shutil.move(path, archive_dir)\n        except shutil.Error as e:\n            error_messages.append(e.args[0])\n    return len(paths) == len(error_messages), error_messages", "compilation_passed": true, "time": 0.0018880367279052734, "tests_passed": true, "error": null}
