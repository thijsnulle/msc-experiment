{"code": "# Create a random.Random object with the specified seed\n    if seed is not None:\n        randomizer = random.Random(seed)\n    else:\n        randomizer = random.Random()\n\n    # Split the text into a list of characters\n    char_list = list(text)\n\n    # Replace alphabetic characters with random letters\n    for i, char in enumerate(char_list):\n        if char.isalpha():\n            char_list[i] = randomizer.choice(string.ascii_letters)\n\n    return ''.join(char_list)", "compilation_passed": true, "time": 0.000885009765625, "tests_passed": true, "error": null}
{"code": "random.seed(seed)\n    result = []\n    for char in text:\n        if char.isalpha():\n            replace_char = chr(random.randint(ord(char.lower()), ord(char.upper())))\n            result.append(replace_char)\n        else:\n            result.append(char)\n    return ''.join(result)", "compilation_passed": true, "time": 0.0010170936584472656, "tests_passed": false, "error": "ValueError"}
{"code": "if seed is not None:\n        random.seed(seed)\n    transformed_text = ''\n    for char in text:\n        if char.isalpha():\n            transformed_text += random.choice(string.ascii_letters)\n        else:\n            transformed_text += char\n    return transformed_text", "compilation_passed": true, "time": 0.0008409023284912109, "tests_passed": true, "error": null}
{"code": "random.seed(seed)\n    letters = string.ascii_letters\n    letters = letters.upper()\n    result = ''\n\n    for character in text:\n        if character.isalpha():\n            index = random.randint(0, len(letters) - 1)\n            result += letters[index]\n        else:\n            result += character\n    return result", "compilation_passed": true, "time": 0.00086212158203125, "tests_passed": true, "error": null}
{"code": "random.seed(seed)\n    if isinstance(text, str):\n        result = ''\n        for c in text:\n            if c.isalnum():\n                result += chr(random.randint(ord('a'), ord('z')))\n            else:\n                result += c\n        return result\n    else:\n        raise ValueError('text must be a string')", "compilation_passed": true, "time": 0.0008280277252197266, "tests_passed": true, "error": null}
{"code": "# 1. Get random generator object, using seed if provided.\n    r = random.Random()\n    if seed is not None:\n        r.seed(seed)\n    else:\n        r.seed()\n\n    # 2. Convert input string to list of characters.\n    char_list = list(text)\n\n    # 3. Iterate through characters in input string.\n    for i in range(len(char_list)):\n\n        # 4. Check if character is alphabetic.\n        if char_list[i].isalpha():\n\n            # 5. Get index for replacement letter.\n            alphabet_idx = ord(char_list[i])\n            alphabet_size = len(string.ascii_lowercase)\n            replacement = chr(alphabet_idx + r.randrange(alphabet_size))\n\n            # 6. Replace alphabetic character with random letter.\n            char_list[i] = replacement\n\n    # 7. Join list of characters to form transformed string.\n    return ''.join(char_list)", "compilation_passed": true, "time": 0.0008559226989746094, "tests_passed": true, "error": null}
{"code": "if seed is not None:\n        random.seed(seed)\n\n    alphabet = string.ascii_letters\n    result = []\n    for char in text:\n        if char.isalnum():\n            char = chr(random.choice(alphabet))\n        result.append(char)\n    return ''.join(result)", "compilation_passed": true, "time": 0.0007979869842529297, "tests_passed": false, "error": "TypeError"}
{"code": "random.seed(seed)\n    letters = string.ascii_lowercase\n\n    transformed_text = ''\n    for char in text:\n        if char.isalpha():\n            transformed_text += letters[random.randint(0, len(letters) - 1)]\n        else:\n            transformed_text += char\n\n    return transformed_text", "compilation_passed": true, "time": 0.00086212158203125, "tests_passed": true, "error": null}
{"code": "random.seed(seed)\n\n    chars = string.ascii_lowercase if text.islower() else string.ascii_uppercase\n    return ''.join(chars[random.randint(0, len(chars) - 1)] if char.isalpha() else char for char in text)", "compilation_passed": true, "time": 0.0008149147033691406, "tests_passed": true, "error": null}
{"code": "# Set the seed if it is provided\n    random.seed(seed)\n\n    # Initialize a list to store the result\n    result = []\n\n    # Iterate over each character in the original text\n    for char in text:\n        if char.isalpha():\n            # Choose a random letter from the alphabet of the same case as the original character\n            result.append(chr(random.choice(string.ascii_letters if char.isupper() else string.ascii_lowercase)))\n        else:\n            # Preserve non-alphabetic characters\n            result.append(char)\n\n    # Join the transformed characters in the result list\n    return \"\".join(result)", "compilation_passed": true, "time": 0.0007739067077636719, "tests_passed": false, "error": "TypeError"}
{"code": "alphabets = [string.ascii_lowercase, string.ascii_uppercase]\n    letters = []\n    for char in text:\n        if not char.isalpha():\n            letters.append(char)\n        else:\n            letters.append(random.choice(alphabets[char.isupper()]))\n\n    return ''.join(letters)", "compilation_passed": true, "time": 0.0008518695831298828, "tests_passed": true, "error": null}
{"code": "if seed:\n        random.seed(seed)\n    result = \"\"\n    for char in text:\n        if char.isalpha():\n            new_char = chr(random.randint(ord(\"a\"), ord(\"z\")))\n            if char.isupper():\n                new_char = new_char.upper()\n        else:\n            new_char = char\n        result += new_char\n    return result", "compilation_passed": true, "time": 0.0009317398071289062, "tests_passed": true, "error": null}
{"code": "import string\n    import random\n\n    if seed is not None:\n        random.seed(seed)\n\n    letters = string.ascii_letters\n    alphabet = string.ascii_uppercase if text.isupper() else string.ascii_lowercase\n    alphabet_map = str.maketrans(alphabet, letters)\n\n    # Remove non-alphabetic characters from text\n    text_without_non_alphabetic_chars = text.translate(str.maketrans('', '', string.punctuation))\n\n    # Generate a random set of characters for replacement\n    random_characters = ''.join(random.choice(alphabet) for _ in range(len(text_without_non_alphabetic_chars)))\n\n    # Replace alphabetic characters with their corresponding random characters\n    result = text_without_non_alphabetic_chars.translate(alphabet_map) + random_characters[len(text_without_non_alphabetic_chars):]\n\n    return result", "compilation_passed": true, "time": 0.0008571147918701172, "tests_passed": false, "error": "ValueError"}
{"code": "alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    random.seed(seed)\n    result = \"\"\n\n    for char in text:\n        if char in alphabet:\n            result += chr(ord(char) + random.randint(0, 25))\n        else:\n            result += char\n\n    return result", "compilation_passed": true, "time": 0.0007557868957519531, "tests_passed": true, "error": null}
{"code": "if seed is not None:\n        random.seed(seed)\n    return string.ascii_letters.translate(text, string.digits)", "compilation_passed": true, "time": 0.0006883144378662109, "tests_passed": false, "error": "TypeError"}
{"code": "if seed is not None:\n        random.seed(seed)\n    transformed_text = \"\"\n    for char in text:\n        if char.isalpha():\n            transformed_text += chr(random.randint(ord('a'), ord('z')))\n        else:\n            transformed_text += char\n    return transformed_text", "compilation_passed": true, "time": 0.0008130073547363281, "tests_passed": true, "error": null}
{"code": "alphabets = ['upper', 'lower']\n\n    random.seed(seed)\n\n    alphabet_choice = random.choice(alphabets)\n    letters = []\n\n    for letter in text:\n        if letter.isalpha():\n            if alphabet_choice == 'upper':\n                letters.append(string.ascii_uppercase[random.randint(0, 25)])\n            elif alphabet_choice == 'lower':\n                letters.append(string.ascii_lowercase[random.randint(0, 25)])\n        else:\n            letters.append(letter)\n\n    return ''.join(letters)", "compilation_passed": true, "time": 0.0008800029754638672, "tests_passed": true, "error": null}
{"code": "if not seed:\n        seed = random.randint(0, 10000)\n\n    random.seed(seed)\n    alphabet = string.ascii_letters\n\n    def replace_char(char):\n        if char.isalpha():\n            return random.choice(alphabet)\n        return char\n\n    transformed_text = \"\".join(replace_char(char) for char in text)\n\n    return transformed_text", "compilation_passed": true, "time": 0.0008370876312255859, "tests_passed": true, "error": null}
{"code": "random.seed(seed)\n\n    if not isinstance(text, str) or not text.isalnum():\n        return \"Invalid input.\"\n\n    transformed_text = \"\"\n    for char in text:\n        if char.isalnum():\n            if char.isupper():\n                transformed_text += chr(random.randint(65, 90))\n            else:\n                transformed_text += chr(random.randint(97, 122))\n        else:\n            transformed_text += char\n\n    return transformed_text", "compilation_passed": true, "time": 0.0008199214935302734, "tests_passed": true, "error": null}
{"code": "if seed is not None:\n        random.seed(seed)\n    alphabet = string.ascii_letters\n    result = ''\n    for char in text:\n        if char.isalpha():\n            result += alphabet[random.randint(0, len(alphabet) - 1)]\n        else:\n            result += char\n    return result", "compilation_passed": true, "time": 0.0008177757263183594, "tests_passed": true, "error": null}
{"code": "random.seed(seed)\n    res = []\n\n    for char in text:\n        if char.isalpha():\n            res.append(chr(random.randint(ord('a'), ord('z'))))\n        elif char.isupper():\n            res.append(chr(random.randint(ord('A'), ord('Z'))))\n        else:\n            res.append(char)\n\n    return ''.join(res)", "compilation_passed": true, "time": 0.0008480548858642578, "tests_passed": true, "error": null}
{"code": "# Check seed\n    if seed is None:\n        seed = random.random() * 1000000\n    else:\n        seed = int(seed)\n\n    # Initialize a random.Random object\n    random_gen = random.Random(seed)\n\n    # Create a dictionary to map original characters to their replacement values.\n    original_chars = list(string.ascii_letters + string.digits + string.punctuation)\n    replace_dict = dict()\n    for idx, orig_char in enumerate(original_chars):\n        rand_char = chr(ord('a') + random_gen.randint(0, 25))\n        replace_dict[orig_char] = rand_char\n\n    # Use a regular expression to match alphabetic characters.\n    pattern = re.compile(r'([a-zA-Z]+)', re.IGNORECASE)\n\n    # Replace the matched alphabetic characters with their respective randomly-chosen values.\n    result = pattern.sub(lambda x: replace_dict[x.group()], text)\n\n    return result\n", "compilation_passed": true, "time": 0.0009200572967529297, "tests_passed": false, "error": "NameError"}
{"code": "if seed:\n        random.seed(seed)\n    alphabet = string.ascii_letters\n    transformed_text = []\n    for char in text:\n        if char.isalnum():\n            transformed_text.append(alphabet[random.randrange(len(alphabet))])\n        else:\n            transformed_text.append(char)\n    return ''.join(transformed_text)", "compilation_passed": true, "time": 0.0008211135864257812, "tests_passed": true, "error": null}
{"code": "# Task parameters.\n    chars_map = {\n        'lower': ascii_lowercase,\n        'upper': ascii_uppercase,\n    }\n    seed = int(seed) if seed is not None else None\n\n    # Generate random letters based on input text and seed.\n    random_chars = [\n        random.choice(chars_map.get(char.lower() in string.ascii_letters))\n        for char in text\n    ]\n\n    # Construct the transformed string with the random letters.\n    result = \"\".join(random_chars)\n\n    return result", "compilation_passed": true, "time": 0.0007569789886474609, "tests_passed": false, "error": "NameError"}
{"code": "if seed is not None:\n        random.seed(seed)\n    alphabet = string.ascii_letters\n    alphabet_lower = string.ascii_lowercase\n    alphabet_upper = string.ascii_uppercase\n    transformed_text = ''\n\n    for char in text:\n        if char.isalpha():\n            if char.isupper():\n                transformed_text += random.choice(alphabet_upper)\n            else:\n                transformed_text += random.choice(alphabet_lower)\n        else:\n            transformed_text += char\n\n    return transformed_text", "compilation_passed": true, "time": 0.0009200572967529297, "tests_passed": true, "error": null}
{"code": "if not isinstance(text, str):\n        raise TypeError(\"input must be a string\")\n\n    if seed is not None:\n        random.seed(seed)\n\n    result = ''\n    for char in text:\n        if char.isalpha():\n            result += chr(random.randint(65, 90)) if char.isupper() else chr(random.randint(97, 122))\n        else:\n            result += char\n    return result", "compilation_passed": true, "time": 0.0008702278137207031, "tests_passed": true, "error": null}
{"code": "if seed is not None:\n        random.seed(seed)\n\n    res = list(text)\n    for idx in range(len(res)):\n        if res[idx] in string.ascii_letters:\n            res[idx] = chr(random.randint(ord('a'), ord('z'))) if res[idx].isupper() else chr(random.randint(ord('A'), ord('Z')))\n    return ''.join(res)", "compilation_passed": true, "time": 0.0008630752563476562, "tests_passed": true, "error": null}
{"code": "alphabet = string.ascii_letters\n    rng = random.Random(seed)\n\n    transformed_text = []\n    for char in text:\n        if char.isalpha():\n            transformed_text.append(rng.choice(alphabet))\n        else:\n            transformed_text.append(char)\n\n    return ''.join(transformed_text)", "compilation_passed": true, "time": 0.0008149147033691406, "tests_passed": true, "error": null}
{"code": "if seed is not None:\n        random.seed(seed)\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    uppercase_alphabet = alphabet.upper()\n    alphabet_characters = alphabet + uppercase_alphabet\n    non_alphabet_characters = string.punctuation + string.whitespace\n    non_alphabet_characters_mapping = dict(zip(non_alphabet_characters, non_alphabet_characters))\n\n    transformed_text = \"\"\n    for char in text:\n        if char in non_alphabet_characters_mapping.keys():\n            transformed_text += non_alphabet_characters_mapping[char]\n        elif char in alphabet or char in uppercase_alphabet:\n            transformed_text += random.choice(alphabet_characters).upper() if char.isupper() else random.choice(alphabet_characters)\n        else:\n            transformed_text += char\n    return transformed_text", "compilation_passed": true, "time": 0.0009138584136962891, "tests_passed": true, "error": null}
{"code": "if seed is not None:\n        random.seed(seed)\n\n    def get_random_alphabetic_char(char):\n        if char.isalpha():\n            if char.isupper():\n                return chr(random.choice(range(ord('A'), ord('Z') + 1)))\n            else:\n                return chr(random.choice(range(ord('a'), ord('z') + 1)))\n        else:\n            return char\n\n    return ''.join([get_random_alphabetic_char(char) for char in text])", "compilation_passed": true, "time": 0.0008821487426757812, "tests_passed": true, "error": null}
