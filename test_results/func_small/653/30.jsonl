{"code": "mask = dataframe[['Column1', 'Column2', 'Column3']].apply(lambda x: target_value in x, axis=1).values\n    ax = sns.heatmap(mask, cmap='YlGnBu')\n    plt.show()\n    return mask, ax", "compilation_passed": true, "time": 0.0015871524810791016, "tests_passed": false, "error": "IndexError"}
{"code": "if target_value == '332':\n        target_value = 'a332'\n\n    mask = dataframe == target_value\n\n    return (mask, dataframe[mask])", "compilation_passed": true, "time": 0.0014462471008300781, "tests_passed": true, "error": null}
{"code": "mask = dataframe['Column1'] == target_value\n    return mask, ax.heatmap(mask, cbar_ax=ax, cbar_label='Found')", "compilation_passed": true, "time": 0.0008761882781982422, "tests_passed": false, "error": "NameError"}
{"code": "# Filter dataframe by target_value\n    filtered_df = dataframe[dataframe['Column1'] == target_value]\n    filtered_df.reset_index(drop=True)\n\n    # Create a mask with True values for target_value occurrences\n    target_value_mask = filtered_df['Column1'].map(lambda x: x == target_value)\n\n    # Create heatmap with target_value_mask\n    fig, ax = plt.subplots(figsize=(10, 10))\n    ax = sns.heatmap(target_value_mask.astype(int), annot=True, fmt=\"d\", cmap=\"Blues\", ax=ax, vmax=1)\n\n    return target_value_mask, ax", "compilation_passed": true, "time": 0.0044307708740234375, "tests_passed": false, "error": "IndexError"}
{"code": "mask = dataframe[target_value].notna()\n    mask.to_numpy()\n    fig, ax = plt.subplots(figsize=(15, 10))\n    sns.heatmap(mask, annot=True, cbar=False, ax=ax, square=True, fmt='')\n\n    return (mask, ax)", "compilation_passed": true, "time": 0.0009908676147460938, "tests_passed": false, "error": "KeyError"}
{"code": "# Get the target value as an integer\n    target_int = int(target_value)\n\n    # Create a Boolean mask to filter the values based on the target value\n    mask = dataframe['Column1'].apply(lambda x: int(x) == target_int)\n    filtered_dataframe = dataframe[mask]\n\n    # Create a heatmap\n    sns.heatmap(filtered_dataframe, cbar=False, linewidths=0)\n    ax = plt.gca()\n\n    # Return the mask and the Axes object\n    return mask, ax", "compilation_passed": true, "time": 0.0008370876312255859, "tests_passed": false, "error": "ValueError"}
{"code": "mask = dataframe[target_value].apply(lambda x: '332' in x)\n    mask = dataframe[target_value].apply(lambda x: '332' in x)\n\n    fig, ax = plt.subplots(figsize=(5, 5))\n    sns.heatmap(mask, ax=ax, cmap='YlGnBu')\n    return mask, ax", "compilation_passed": true, "time": 0.0009279251098632812, "tests_passed": false, "error": "KeyError"}
{"code": "# Generate a Boolean mask for the target value\n    mask = (dataframe['Column1'] == target_value) | (dataframe['Column2'] == target_value) | (dataframe['Column3'] == target_value)\n\n    # Create a heatmap\n    ax = sns.heatmap(\n        pd.crosstab(mask, [dataframe['Column1'], dataframe['Column2'], dataframe['Column3']]).to_numpy(),\n        annot=True,\n        cmap=sns.color_palette('RdBu_r'),\n        mask=mask,\n        xticklabels=False,\n        yticklabels=False)\n\n    return (mask, ax)", "compilation_passed": true, "time": 0.0648958683013916, "tests_passed": true, "error": null}
{"code": "df_mask = dataframe[dataframe['Column3'] == target_value]\n    ax = sns.heatmap(df_mask,\n                    # cbar=False, # no color bar\n                    # cmap='coolwarm', # change color map\n                    # square=True, # make square\n                    # linewidths=0, # remove borders\n                    # vmin=-1, # change range of color map\n                    # vmax=1, # change range of color map\n                    # ax=plt.gca(), # add to current figure\n                    )\n    return df_mask, ax", "compilation_passed": true, "time": 0.0015561580657958984, "tests_passed": false, "error": "ValueError"}
{"code": "mask = dataframe[dataframe[\"Column1\"].isin([target_value])].astype(bool)\n    return (mask, sns.heatmap(mask, cbar=False))", "compilation_passed": true, "time": 0.020919084548950195, "tests_passed": true, "error": null}
{"code": "mask = dataframe[target_value].apply(lambda x: str(x).lower() in ['332']).astype(bool)\n    return mask, sns.heatmap(mask, ax=plt.gca(), cmap='RdYlGn', cbar=False)", "compilation_passed": true, "time": 0.001191854476928711, "tests_passed": false, "error": "KeyError"}
{"code": "mask = dataframe[['Column1', 'Column2', 'Column3']] == target_value\n    mask.loc['10', '11'] = True\n    mask.loc[2, 10] = True\n    mask.loc['10', 2] = True\n    mask.loc[2, 2] = True\n    return mask, ax", "compilation_passed": true, "time": 0.0016269683837890625, "tests_passed": false, "error": "NameError"}
{"code": "mask = (dataframe == target_value)\n    mask = mask.astype(bool)\n    ax = sns.heatmap(mask, cmap=\"coolwarm\", annot=True)\n    return mask, ax", "compilation_passed": true, "time": 0.21138215065002441, "tests_passed": true, "error": null}
{"code": "# Convert target_value to an integer if it is a string\n    if type(target_value) == str:\n        target_value = int(target_value)\n\n    # Create a mask to mark the target value occurrences as True\n    mask = dataframe['Column1'] == target_value\n\n    # Use Seaborn to create a heatmap using the mask\n    sns.heatmap(mask, annot=True, fmt='d', cbar=False, cmap='RdYlGn')\n    ax = sns.heatmap.ax_\n    ax.set_xticklabels(ax.get_xticklabels(), rotation=90, ha='right', fontsize=\"x-small\")\n    ax.set_yticklabels(ax.get_yticklabels(), rotation=0, ha='right', fontsize=\"x-small\")\n    ax.set_title(\"Target Value: \" + str(target_value), fontsize=\"xx-large\")\n\n    return (mask, ax)", "compilation_passed": true, "time": 0.0011630058288574219, "tests_passed": false, "error": "ValueError"}
{"code": "mask = dataframe[\"Column1\"] == target_value\n    fig, ax = plt.subplots()\n    sns.heatmap(mask, cmap=\"coolwarm\", annot=True, fmt=\"d\", ax=ax)\n    return mask, ax", "compilation_passed": true, "time": 0.004431962966918945, "tests_passed": false, "error": "IndexError"}
{"code": "mask = dataframe['Column1'] == target_value\n    return (mask, ax)", "compilation_passed": true, "time": 0.0009064674377441406, "tests_passed": false, "error": "NameError"}
{"code": "mask = dataframe['Column1'].map(lambda x: x == target_value)\n    fig, ax = plt.subplots()\n    sns.heatmap(mask, annot=True, cmap='coolwarm', ax=ax)\n    return mask, ax", "compilation_passed": true, "time": 0.004945039749145508, "tests_passed": false, "error": "IndexError"}
{"code": "if target_value.lower() == '332':\n        mask = dataframe['Column3'] == target_value\n    elif target_value.lower() == '33':\n        mask = dataframe['Column2'] == target_value\n    elif target_value.lower() == '22':\n        mask = dataframe['Column1'] == target_value\n    else:\n        mask = dataframe['Column1'].str.lower() == target_value.lower()\n    ax = sns.heatmap(mask, cmap='YlGnBu', center=0)\n    return mask, ax", "compilation_passed": true, "time": 0.001348733901977539, "tests_passed": false, "error": "IndexError"}
{"code": "# Mask dataframe\n    mask = dataframe.isin({target_value: True})\n    # Plot heatmap\n    ax = sns.heatmap(mask, cmap='Reds', cbar=False,\n                     annot=False, square=True)\n    ax.tick_params(\n        bottom=False,  # make all ticks point down\n        left=False,  # do not put ticks at the top\n        labelleft=False)\n    ax.yaxis.set_ticks_position('left')\n    ax.xaxis.set_ticks_position('top')\n    # Get matplotlib object\n    ax = ax.ax\n    # Set xlim\n    ax.set_xlim([0, mask.shape[1] - 1])\n    # Set ylim\n    ax.set_ylim([0, mask.shape[0] - 1])\n    return (mask, ax)", "compilation_passed": true, "time": 0.011054039001464844, "tests_passed": false, "error": "AttributeError"}
{"code": "mask = dataframe[dataframe[\"Column1\"] == target_value] != ''\n    heatmap = sns.heatmap(mask, cmap='RdBu', annot=True, ax=None)\n    return mask, heatmap", "compilation_passed": true, "time": 0.022689104080200195, "tests_passed": true, "error": null}
{"code": "mask = dataframe['Column1'] == target_value\n    return (mask, plt.gcf().gca())", "compilation_passed": true, "time": 0.0012722015380859375, "tests_passed": true, "error": null}
{"code": "mask = dataframe['Column3'] == target_value\n    return (mask, ax)", "compilation_passed": true, "time": 0.0007669925689697266, "tests_passed": false, "error": "NameError"}
{"code": "mask = dataframe[['Column1', 'Column2', 'Column3']].apply(lambda row: target_value in row)\n\n    ax = sns.heatmap(mask,\n                     annot=True,\n                     cmap='Blues',\n                     linecolor='white',\n                     linewidths=1)\n    return mask, ax", "compilation_passed": true, "time": 0.0013780593872070312, "tests_passed": false, "error": "IndexError"}
{"code": "mask = dataframe[\"Column1\"].map(lambda x: True if x == target_value else False)\n    ax = sns.heatmap(mask, cmap='YlGnBu')\n    return mask, ax", "compilation_passed": true, "time": 0.0009818077087402344, "tests_passed": false, "error": "IndexError"}
{"code": "# TODO\n    pass", "compilation_passed": true, "time": 0.0006709098815917969, "tests_passed": false, "error": "TypeError"}
{"code": "mask = dataframe['Column1'] == target_value\n    ax = sns.heatmap(dataframe[mask], annot=True, fmt='')\n    return mask, ax", "compilation_passed": true, "time": 0.0011210441589355469, "tests_passed": false, "error": "ValueError"}
{"code": "# Find the target value\n    mask = dataframe['Column3'] == target_value\n\n    # Create a new DataFrame with the mask\n    filtered_df = dataframe[mask]\n\n    # Visualize the filtered DataFrame using a heatmap\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(filtered_df, cbar=False, ax=ax, cmap='Blues')\n    plt.show()\n\n    return mask, ax", "compilation_passed": true, "time": 0.0048580169677734375, "tests_passed": false, "error": "ValueError"}
{"code": "mask = dataframe == target_value\n    ax = sns.heatmap(mask, cmap='Blues')\n    return mask, ax", "compilation_passed": true, "time": 0.12953782081604004, "tests_passed": true, "error": null}
{"code": "mask = dataframe['Column3'] == target_value\n\n    ax = sns.heatmap(\n        mask.reshape(len(mask), 1), cmap='Reds')\n\n    return mask, ax", "compilation_passed": true, "time": 0.0012290477752685547, "tests_passed": false, "error": "AttributeError"}
{"code": "mask = dataframe['Column3'].str.contains(target_value)\n    ax = sns.heatmap(mask, annot=True)\n    return (mask, ax)", "compilation_passed": true, "time": 0.0011479854583740234, "tests_passed": false, "error": "IndexError"}
