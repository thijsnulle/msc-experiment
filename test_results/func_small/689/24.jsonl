{"code": "return df.apply(lambda x: stats.shapiro(x).pvalue)", "compilation_passed": true, "time": 0.0033299922943115234, "tests_passed": true, "error": null}
{"code": "return df.apply(stats.shapiro).to_dict()", "compilation_passed": true, "time": 0.0014071464538574219, "tests_passed": false, "error": "TypeError"}
{"code": "p_values = {}\n    for i, col in df.items():\n        p_values[i] = stats.shapiro(col)[1]\n    return p_values", "compilation_passed": true, "time": 0.0027701854705810547, "tests_passed": true, "error": null}
{"code": "p_values = {}\n    for i in range(df.shape[1]):\n        p_values[i] = stats.shapiro(df.iloc[:, i])[1]\n    return p_values", "compilation_passed": true, "time": 0.0012459754943847656, "tests_passed": true, "error": null}
{"code": "return {i: stats.shapiro(df[i])[1] for i in df.columns}", "compilation_passed": true, "time": 0.0028638839721679688, "tests_passed": true, "error": null}
{"code": "# Convert the DataFrame to a NumPy array\n    array = df.to_numpy()\n\n    # Define the list of column indices for each column in the DataFrame\n    indices = [i for i in range(array.shape[1])]\n\n    # Define the function to apply to each column in the DataFrame\n    def shapiro(df, column):\n        \"\"\"\n        Performs the Shapiro-Wilk test for normality.\n\n        Parameters:\n        - df (DataFrame): A Pandas DataFrame with random numeric values.\n        - column (int): The column index of the column to be tested.\n\n        Returns:\n        - float: The p-value from the Shapiro-Wilk test.\n        \"\"\"\n        # Select the column from the DataFrame\n        column_df = df.iloc[:, column]\n\n        # Perform the Shapiro-Wilk test on the column\n        w, p = stats.shapiro(column_df)\n\n        # Return the p-value\n        return p\n\n    # Apply the function to each column in the DataFrame\n    p_values = map", "compilation_passed": true, "time": 0.0011148452758789062, "tests_passed": false, "error": "TypeError"}
{"code": "return {col: stats.shapiro(df[col])[1] for col in df.columns}", "compilation_passed": true, "time": 0.002730846405029297, "tests_passed": true, "error": null}
{"code": "result = {}\n    for column in df.columns:\n        result[column] = stats.shapiro(df[column])[1]\n    return result", "compilation_passed": true, "time": 0.0028181076049804688, "tests_passed": true, "error": null}
{"code": "# Your code goes here\n    result = {}\n    for i in range(df.shape[1]):\n        pvalue = stats.shapiro(df[i])[1]\n        result[i] = pvalue\n    return result", "compilation_passed": true, "time": 0.0012798309326171875, "tests_passed": false, "error": "KeyError"}
{"code": "return dict(map(lambda column: stats.shapiro(column)[1], df.values))", "compilation_passed": true, "time": 0.0025908946990966797, "tests_passed": false, "error": "ValueError"}
{"code": "# Check requirements\n    if not (\n        np\n        and\n        stats\n    ):\n        raise Exception('Missing requirements: numpy and scipy')\n\n    p_values = {}\n    for idx, col in enumerate(df.columns):\n        p_value = stats.shapiro(df[col])[1]\n        p_values[idx] = p_value\n\n    return p_values", "compilation_passed": true, "time": 0.0013430118560791016, "tests_passed": true, "error": null}
{"code": "# Initialize an empty dictionary to store the p-values\n    p_values = {}\n\n    # Iterate over each column of the DataFrame\n    for i, col in enumerate(df.columns):\n        # Perform Shapiro-Wilk test on the column\n        _, p = stats.shapiro(df[col])\n\n        # Add the p-value to the dictionary\n        p_values[col] = p\n\n    return p_values", "compilation_passed": true, "time": 0.0029439926147460938, "tests_passed": true, "error": null}
{"code": "res = {i: stats.shapiro(df[i])[1] for i in df.columns}\n    return res", "compilation_passed": true, "time": 0.002866029739379883, "tests_passed": true, "error": null}
{"code": "p_values = {}\n    for index, col in df.items():\n        _, pvalue = stats.shapiro(col)\n        p_values[index] = pvalue\n    return p_values", "compilation_passed": true, "time": 0.002839803695678711, "tests_passed": true, "error": null}
{"code": "res = {}\n    for col in df.columns:\n        res[col] = stats.shapiro(df[col])[1]\n    return res", "compilation_passed": true, "time": 0.0028438568115234375, "tests_passed": true, "error": null}
{"code": "# Shapiro-Wilk test\n    return {col: stats.shapiro(df[col])[1] for col in df.columns}", "compilation_passed": true, "time": 0.0028200149536132812, "tests_passed": true, "error": null}
{"code": "# Your code here\n    p_values = []\n\n    for i in range(len(df.columns)):\n        p_value = stats.shapiro(df[df.columns[i]])\n        p_values.append(p_value[1])\n\n    return dict(zip(df.columns, p_values))", "compilation_passed": true, "time": 0.0028541088104248047, "tests_passed": true, "error": null}
{"code": "return {c: stats.shapiro(df[c])[1] for c in df.columns}", "compilation_passed": true, "time": 0.002810955047607422, "tests_passed": true, "error": null}
{"code": "p_values = {}\n    for col in df.columns:\n        _, pvalue = stats.shapiro(df[col])\n        p_values[col] = pvalue\n    return p_values", "compilation_passed": true, "time": 0.0028219223022460938, "tests_passed": true, "error": null}
{"code": "return dict([(col, stats.shapiro(df[col])[1]) for col in df])", "compilation_passed": true, "time": 0.0028209686279296875, "tests_passed": true, "error": null}
{"code": "p_values = []\n    for column in df.columns:\n        stat, _ = stats.shapiro(df[column])\n        p_values.append(stat)\n    return dict(zip(df.columns, p_values))", "compilation_passed": true, "time": 0.002260923385620117, "tests_passed": true, "error": null}
{"code": "p_values = {}\n    for col in df.columns:\n        p, _ = stats.shapiro(df[col])\n        p_values[col] = p\n    return p_values", "compilation_passed": true, "time": 0.0023610591888427734, "tests_passed": true, "error": null}
{"code": "shapiro_test = {}\n    for i in range(df.shape[1]):\n        shapiro_test[i] = stats.shapiro(df.iloc[:, i])[1]\n    return shapiro_test", "compilation_passed": true, "time": 0.0012302398681640625, "tests_passed": true, "error": null}
{"code": "return df.apply(lambda x: stats.shapiro(x).pvalue, axis=0)", "compilation_passed": true, "time": 0.0031480789184570312, "tests_passed": true, "error": null}
{"code": "p_values = {col: stats.shapiro(df[col]).pvalue for col in df.columns}\n    return p_values", "compilation_passed": true, "time": 0.002828836441040039, "tests_passed": true, "error": null}
{"code": "res = {}\n    for i, column in enumerate(df.columns):\n        p_value = stats.shapiro(df[column])[1]\n        res[column] = p_value\n    return res", "compilation_passed": true, "time": 0.002835988998413086, "tests_passed": true, "error": null}
