{"code": "files_count = 0\n\n    for filename in os.listdir(source_dir):\n        if re.search(file_pattern, filename):\n            file_path = os.path.join(source_dir, filename)\n            shutil.move(file_path, os.path.join(target_dir, filename))\n            files_count += 1\n\n    return files_count", "compilation_passed": true, "time": 0.007986783981323242, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "source_dir = os.path.abspath(source_dir)\n    target_dir = os.path.abspath(target_dir)\n\n    try:\n        source_files = [f for f in os.listdir(source_dir) if re.search(file_pattern, f)]\n        moved_files_count = 0\n\n        for file in source_files:\n            if os.path.isfile(os.path.join(source_dir, file)):\n                shutil.move(os.path.join(source_dir, file), os.path.join(target_dir, file))\n                moved_files_count += 1\n\n        return moved_files_count\n\n    except Exception as e:\n        print(f\"An error occurred while moving files: {e}\")", "compilation_passed": true, "time": 0.002512216567993164, "tests_passed": true, "error": null}
{"code": "moved_files_count = 0\n\n    # Check if the source and target directories exist\n    if not os.path.exists(source_dir):\n        raise ValueError(f\"Source directory '{source_dir}' does not exist.\")\n    if not os.path.exists(target_dir):\n        raise ValueError(f\"Target directory '{target_dir}' does not exist.\")\n\n    # Get all files in the source directory\n    files_in_source_dir = os.listdir(source_dir)\n\n    # Iterate through the files and move them to the target directory\n    for file in files_in_source_dir:\n        # Skip files that don't match the pattern\n        if not re.search(file_pattern, file):\n            continue\n\n        # Compute the source and target paths\n        source_path = os.path.join(source_dir, file)\n        target_path = os.path.join(target_dir, file)\n\n        # Move the file\n        shutil.move(source_path, target_path)\n        moved_files_", "compilation_passed": true, "time": 0.002183198928833008, "tests_passed": false, "error": "ValueError"}
{"code": "moved_files_count = 0\n\n    for file in os.listdir(source_dir):\n        match = re.search(file_pattern, file)\n        if match:\n            source_path = os.path.join(source_dir, file)\n            target_path = os.path.join(target_dir, file)\n            shutil.move(source_path, target_path)\n            moved_files_count += 1\n\n    return moved_files_count", "compilation_passed": true, "time": 0.007762908935546875, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "source_dir = os.path.expanduser(source_dir)\n    target_dir = os.path.expanduser(target_dir)\n    if not os.path.isdir(source_dir):\n        raise Exception(f\"{source_dir} is not a valid directory.\")\n    if not os.path.isdir(target_dir):\n        raise Exception(f\"{target_dir} is not a valid directory.\")\n\n    moved_files_count = 0\n    for dirpath, _, filenames in os.walk(source_dir):\n        for filename in filenames:\n            full_path = os.path.join(dirpath, filename)\n            if re.match(file_pattern, filename):\n                target_file = os.path.join(target_dir, filename)\n                shutil.move(full_path, target_file)\n                moved_files_count += 1\n    return moved_files_count", "compilation_passed": true, "time": 0.0025739669799804688, "tests_passed": false, "error": "Exception"}
{"code": "# Check for required modules\n    for required_module in ('re', 'os', 'shutil'):\n        if required_module not in globals():\n            raise ImportError(f'Missing required module: {required_module}')\n\n    # Initialize counters\n    moved_files_count = 0\n\n    # Iterate through files in the source directory\n    for root, _, files in os.walk(source_dir):\n        for filename in files:\n            file_path = os.path.join(root, filename)\n\n            # Check if the file matches the specified pattern\n            if re.search(file_pattern, filename):\n                # Move file to target directory\n                target_path = os.path.join(target_dir, filename)\n                try:\n                    shutil.move(file_path, target_path)\n                    moved_files_count += 1\n                except PermissionError:\n                    # Skip moving file because the source file cannot be accessed\n                    pass\n\n    return moved_files_count", "compilation_passed": true, "time": 0.002248048782348633, "tests_passed": true, "error": null}
{"code": "moved_files_count = 0\n    for root, _, files in os.walk(source_dir):\n        for file in files:\n            if re.match(file_pattern, file):\n                file_path = os.path.join(root, file)\n                target_path = os.path.join(target_dir, file)\n                if not os.path.exists(target_path):\n                    shutil.move(file_path, target_path)\n                    moved_files_count += 1\n\n    return moved_files_count", "compilation_passed": true, "time": 0.0022079944610595703, "tests_passed": true, "error": null}
{"code": "# Count of files moved\n    moved_files_count = 0\n    # Iterate through all files in the source directory\n    for file_name in os.listdir(source_dir):\n        file_path = os.path.join(source_dir, file_name)\n        # If the file matches the pattern, move it to the target directory\n        if re.search(file_pattern, file_name) and os.path.isfile(file_path):\n            shutil.move(file_path, os.path.join(target_dir, file_name))\n            moved_files_count += 1\n    return moved_files_count", "compilation_passed": true, "time": 0.008059978485107422, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "files = [\n        os.path.join(source_dir, f) for f in os.listdir(source_dir) if\n        re.match(file_pattern, os.path.basename(f))\n    ]\n\n    if files:\n        for file in files:\n            shutil.move(file, target_dir)\n\n        return len(files)\n    else:\n        return 0", "compilation_passed": true, "time": 0.009299039840698242, "tests_passed": true, "error": null}
{"code": "files_to_move = []\n    for file in os.listdir(source_dir):\n        match = re.match(file_pattern, file)\n        if match:\n            files_to_move.append(os.path.join(source_dir, file))\n    for file in files_to_move:\n        shutil.move(file, target_dir)\n    return len(files_to_move)", "compilation_passed": true, "time": 0.009221792221069336, "tests_passed": true, "error": null}
{"code": "moved_files_count = 0\n    for file_name in os.listdir(source_dir):\n        if re.search(file_pattern, file_name) is not None:\n            source_file = os.path.join(source_dir, file_name)\n            target_file = os.path.join(target_dir, file_name)\n            shutil.move(source_file, target_file)\n            moved_files_count += 1\n\n    return moved_files_count", "compilation_passed": true, "time": 0.008333206176757812, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "moved_files_count = 0\n\n    source_path = os.path.abspath(source_dir)\n    target_path = os.path.abspath(target_dir)\n\n    # Ensure source_path is a directory and not a file\n    if os.path.isfile(source_path):\n        raise ValueError(f\"Source path '{source_path}' is a file, but a directory is expected.\")\n\n    # Ensure target_path is a directory and not a file\n    if os.path.isfile(target_path):\n        raise ValueError(f\"Target path '{target_path}' is a file, but a directory is expected.\")\n\n    # Ensure source_path and target_path are different directories\n    if source_path == target_path:\n        raise ValueError(\"Source path and target path must be different directories.\")\n\n    # Get all files in source_path that match the file_pattern\n    files = [f for f in os.listdir(source_path) if re.search(file_pattern, f)]\n\n    # Iter", "compilation_passed": true, "time": 0.004105091094970703, "tests_passed": true, "error": null}
{"code": "moved_files_count = 0\n\n    for filename in os.listdir(source_dir):\n        if re.search(file_pattern, filename):\n            source_filepath = os.path.join(source_dir, filename)\n            target_filepath = os.path.join(target_dir, filename)\n            shutil.move(source_filepath, target_filepath)\n            moved_files_count += 1\n\n    return moved_files_count", "compilation_passed": true, "time": 0.007990837097167969, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "moved_files_count = 0\n    for filename in os.listdir(source_dir):\n        if re.match(file_pattern, filename):\n            src = os.path.join(source_dir, filename)\n            dst = os.path.join(target_dir, filename)\n            shutil.move(src, dst)\n            moved_files_count += 1\n    return moved_files_count", "compilation_passed": true, "time": 0.008232831954956055, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "moved_files_count = 0\n\n    source_files = [os.path.join(source_dir, f) for f in os.listdir(source_dir) if re.match(file_pattern, f)]\n\n    for file in source_files:\n        # Move the file to the target directory\n        shutil.move(file, os.path.join(target_dir, os.path.basename(file)))\n        moved_files_count += 1\n\n    return moved_files_count", "compilation_passed": true, "time": 0.007586956024169922, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if not os.path.exists(source_dir):\n        return 0\n\n    moved_files_count = 0\n    for dir_path, subdirs, filenames in os.walk(source_dir):\n        for filename in filenames:\n            if re.search(file_pattern, filename):\n                source_file = os.path.join(dir_path, filename)\n                target_file = os.path.join(target_dir, filename)\n                shutil.move(source_file, target_file)\n                moved_files_count += 1\n\n    return moved_files_count", "compilation_passed": true, "time": 0.0023241043090820312, "tests_passed": true, "error": null}
{"code": "moved_files_count = 0\n\n    if not os.path.isdir(source_dir):\n        print(f'ERROR: `{source_dir}` is not a directory.')\n        return\n\n    for dirpath, dirnames, filenames in os.walk(source_dir):\n        # if a directory matches the specified pattern, move the files in it to target_dir\n        for dirname in dirnames:\n            dirname_path = os.path.join(dirpath, dirname)\n            if re.search(file_pattern, dirname_path):\n                for filename in os.listdir(dirname_path):\n                    if re.search(file_pattern, filename):\n                        shutil.move(os.path.join(dirname_path, filename),\n                                    os.path.join(target_dir, filename))\n                        moved_files_count += 1\n\n    print(f'Moved {moved_files_count} files from `{source_dir}` to `{target_dir}`.')\n    return moved_files_count", "compilation_passed": true, "time": 0.002302885055541992, "tests_passed": true, "error": null}
{"code": "moved_files_count = 0\n    for file_name in os.listdir(source_dir):\n        if re.search(file_pattern, file_name):\n            source_path = os.path.join(source_dir, file_name)\n            target_path = os.path.join(target_dir, file_name)\n            shutil.move(source_path, target_path)\n            moved_files_count += 1\n    return moved_files_count", "compilation_passed": true, "time": 0.007452726364135742, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if not source_dir.endswith(os.path.sep):\n        source_dir += os.path.sep\n\n    if not target_dir.endswith(os.path.sep):\n        target_dir += os.path.sep\n\n    moved_files_count = 0\n\n    for file_name in os.listdir(source_dir):\n        file_path = os.path.join(source_dir, file_name)\n\n        if re.match(file_pattern, file_name):\n            shutil.move(file_path, target_dir + file_name)\n            moved_files_count += 1\n\n    return moved_files_count", "compilation_passed": true, "time": 0.0075168609619140625, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "moved_files_count = 0\n\n    # Iterate through files in the source directory\n    for file in os.listdir(source_dir):\n        full_path = os.path.join(source_dir, file)\n        if os.path.isfile(full_path) and re.match(file_pattern, file):\n            shutil.move(full_path, target_dir)\n            moved_files_count += 1\n\n    return moved_files_count", "compilation_passed": true, "time": 0.008727073669433594, "tests_passed": true, "error": null}
{"code": "moved_files_count = 0\n    for dir_path, dir_names, file_names in os.walk(source_dir):\n        for file_name in file_names:\n            file_path = os.path.join(dir_path, file_name)\n            if re.match(file_pattern, file_name):\n                target_file_path = os.path.join(target_dir, file_name)\n                shutil.move(file_path, target_file_path)\n                moved_files_count += 1\n    return moved_files_count", "compilation_passed": true, "time": 0.0022139549255371094, "tests_passed": true, "error": null}
{"code": "moved_files_count = 0\n    source_files = os.listdir(source_dir)\n    for source_file in source_files:\n        if re.match(file_pattern, source_file):\n            file_path = os.path.join(source_dir, source_file)\n            target_path = os.path.join(target_dir, source_file)\n            shutil.move(file_path, target_path)\n            moved_files_count += 1\n    return moved_files_count", "compilation_passed": true, "time": 0.007502079010009766, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if not os.path.isdir(source_dir):\n        raise FileNotFoundError(\"The source directory does not exist.\")\n    if not os.path.isdir(target_dir):\n        raise FileNotFoundError(\"The target directory does not exist.\")\n\n    moved_files_count = 0\n    for root, _, filenames in os.walk(source_dir):\n        for filename in filenames:\n            if re.match(file_pattern, filename):\n                source = os.path.join(root, filename)\n                target = os.path.join(target_dir, filename)\n                os.replace(source, target)\n                moved_files_count += 1\n    return moved_files_count", "compilation_passed": true, "time": 0.007224082946777344, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "moved_files_count = 0\n    for file in os.listdir(source_dir):\n        if re.search(file_pattern, file):\n            source_file = os.path.join(source_dir, file)\n            target_file = os.path.join(target_dir, file)\n            shutil.move(source_file, target_file)\n            moved_files_count += 1\n    return moved_files_count", "compilation_passed": true, "time": 0.007569313049316406, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "moved_files_count = 0\n\n    # Check if source_dir and target_dir are valid paths\n    if not os.path.isdir(source_dir):\n        print(\"Source directory is not valid.\")\n        return\n    if not os.path.isdir(target_dir):\n        print(\"Target directory is not valid.\")\n        return\n\n    # Iterate through files in the source directory and move matching files to the target directory\n    for file_name in os.listdir(source_dir):\n        if re.match(file_pattern, file_name):\n            source_path = os.path.join(source_dir, file_name)\n            target_path = os.path.join(target_dir, file_name)\n            shutil.move(source_path, target_path)\n            moved_files_count += 1\n\n    print(f\"{moved_files_count} file(s) successfully moved.\")\n    return moved_files_count", "compilation_passed": true, "time": 0.002262115478515625, "tests_passed": true, "error": null}
{"code": "moved_files_count = 0\n\n    for filename in os.listdir(source_dir):\n        if re.match(file_pattern, filename):\n            full_source_path = os.path.join(source_dir, filename)\n            full_target_path = os.path.join(target_dir, filename)\n            shutil.move(full_source_path, full_target_path)\n            moved_files_count += 1\n\n    return moved_files_count", "compilation_passed": true, "time": 0.007771015167236328, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "source_dir = os.path.normpath(source_dir)\n    target_dir = os.path.normpath(target_dir)\n    moved_files_count = 0\n\n    for root, _, files in os.walk(source_dir):\n        for file_name in files:\n            if re.search(file_pattern, file_name):\n                file_path = os.path.join(root, file_name)\n                shutil.move(file_path, os.path.join(target_dir, file_name))\n                moved_files_count += 1\n\n    return moved_files_count", "compilation_passed": true, "time": 0.002493143081665039, "tests_passed": true, "error": null}
{"code": "# Iterate through all files in source directory\n    moved_files_count = 0\n    for root, dirs, files in os.walk(source_dir):\n        for file in files:\n            match = re.search(file_pattern, file)\n            if match:\n                filepath = os.path.join(root, file)\n                shutil.move(filepath, target_dir)\n                moved_files_count += 1\n    return moved_files_count", "compilation_passed": true, "time": 0.0022308826446533203, "tests_passed": true, "error": null}
{"code": "moved_files_count = 0\n\n    for filename in os.listdir(source_dir):\n        if re.search(file_pattern, filename) and os.path.isfile(os.path.join(source_dir, filename)):\n            try:\n                shutil.move(os.path.join(source_dir, filename), os.path.join(target_dir, filename))\n                moved_files_count += 1\n            except IOError:\n                print(f\"Failed to move {filename} to {target_dir}\")\n\n    return moved_files_count", "compilation_passed": true, "time": 0.0074138641357421875, "tests_passed": true, "error": null}
{"code": "moved_files_count = 0\n\n    for filename in os.listdir(source_dir):\n        file_path = os.path.join(source_dir, filename)\n\n        if os.path.isfile(file_path) and re.search(file_pattern, filename):\n            shutil.move(file_path, target_dir)\n            moved_files_count += 1\n\n    return moved_files_count", "compilation_passed": true, "time": 0.008464336395263672, "tests_passed": true, "error": null}
