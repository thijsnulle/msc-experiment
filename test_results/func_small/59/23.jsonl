{"code": "if not wikipedia.page(page_title):\n        print('Page not found!')\n        return None\n\n    text = wikipedia.page(page_title).content\n\n    cloud = WordCloud().generate(text)\n\n    return plt.imshow(cloud)", "compilation_passed": true, "time": 0.7108042240142822, "tests_passed": false, "error": "Void (disambiguation)"}
{"code": "try:\n        wikipedia.page(page_title).summary()\n    except wikipedia.DisambiguationError:\n        print(wikipedia.search(page_title)[0])\n    except wikipedia.PageError:\n        print(\"No wikipedia page found with this title!\")\n\n    return plt.axis()", "compilation_passed": true, "time": 0.0035581588745117188, "tests_passed": false, "error": "AttributeError"}
{"code": "try:\n        content = wikipedia.page(page_title).content\n    except wikipedia.exceptions.DisambiguationError:\n        # If there are multiple pages with the same title, select the first one\n        content = wikipedia.search(page_title)[0]\n    wikipedia.search(page_title)\n    content = re.sub(\"\\n\",\" \",content)\n    wordcloud = WordCloud().generate(content)\n    return wordcloud.to_image()", "compilation_passed": true, "time": 0.34697985649108887, "tests_passed": false, "error": "NameError"}
{"code": "try:\n        page = wikipedia.page(page_title)\n        text = page.content\n        words = nltk.word_tokenize(text)\n        tokens = [w for w in words if w.isalpha()]\n        wc = WordCloud(stopwords=stopwords).generate_from_frequencies(Counter(tokens))\n        ax = plt.axes()\n        ax.imshow(wc, interpolation='bilinear')\n        plt.close()\n        return ax\n    except:\n        return None", "compilation_passed": true, "time": 0.6691927909851074, "tests_passed": true, "error": null}
{"code": "try:\n        page = wikipedia.page(page_title)\n        text = page.content\n        text_list = [i.strip() for i in text.split()]\n        cloud = WordCloud(background_color='white').generate(' '.join(text_list))\n        plt.imshow(cloud)\n        return plt.gca()\n    except wikipedia.DisambiguationError as e:\n        print(e)\n        return None\n    except wikipedia.PageError as e:\n        print(e)\n        return None\n    except Exception as e:\n        print(e)\n        return None", "compilation_passed": true, "time": 0.817317008972168, "tests_passed": true, "error": null}
{"code": "try:\n        page = wikipedia.page(page_title)\n        text = page.content\n    except wikipedia.exceptions.DisambigiationError:\n        print(\"There is ambiguity between pages with same name\")\n        return None\n    except wikipedia.exceptions.PageError:\n        print(\"There is no Wikipedia page with the given title.\")\n        return None\n\n    text = text[text.index(\"<\") + 1:text.index(\">\")]\n\n    return WordCloud(\n        width=800,\n        height=800,\n        background_color=\"white\",\n        color_func=random_color,\n        stopwords=[\"a\", \"about\", \"above\", \"across\", \"after\", \"afterwards\", \"again\", \"against\",\n                   \"all\", \"almost\", \"alone\", \"along\", \"alone\", \"alongside\", \"already\", \"also\",\n                   \"although\", \"always\", \"am\", \"among\", \"amongst\"", "compilation_passed": false, "time": 0.0006783008575439453, "tests_passed": false, "error": "SyntaxError"}
{"code": "try:\n        # use wikipedia to get the text of the page\n        page = wikipedia.page(page_title)\n        text = page.content\n\n        # use wordcloud to generate the wordcloud from the text\n        wc = WordCloud(max_words=100).generate(text)\n\n        # use matplotlib to plot the wordcloud\n        fig = plt.figure()\n        ax = fig.add_subplot(111)\n        ax.imshow(wc)\n        ax.axis('off')\n\n        # return the Axes object to the caller\n        return ax\n    except Exception:\n        # return None if there is no wikipedia page with the title given as input\n        return None", "compilation_passed": true, "time": 0.9197590351104736, "tests_passed": true, "error": null}
{"code": "# Make sure that the title has \"https://en.wikipedia.org\"\n    if 'https://en.wikipedia.org/' not in page_title:\n        page_title = 'https://en.wikipedia.org/' + page_title\n\n    # Get the Wikipedia page and check if it exists\n    wikipedia.set_lang('en')\n    page = wikipedia.page(page_title)\n    if not page.exists():\n        return None\n\n    # Get the Wikipedia text\n    text = page.content.split(\"\\n\")\n\n    # Get the text from the Wikipedia page and create the WordCloud object\n    text = \" \".join(text)\n    wc = WordCloud(width=1200, height=600, background_color='white').generate(text)\n\n    # Plot the WordCloud data\n    plt.imshow(wc, interpolation='bilinear')\n    plt.axis('off')\n    plt.title('WordCloud: ' + page_title)\n    plt.show()\n    return plt.gca()", "compilation_passed": true, "time": 0.00341796875, "tests_passed": false, "error": "AttributeError"}
{"code": "try:\n        page = wikipedia.page(page_title)\n        words = page.summary\n\n        cloud = WordCloud().generate(words)\n        return plt.figure(), plt.axes(), plt.imshow(cloud, aspect=\"auto\",\n                                                   extent=[0, 1200, 0, 400])\n    except wikipedia.exceptions.DisambiguationError:\n        print(\"There are multiple pages that are similar to the given Wikipedia page.\")\n        return None\n    except wikipedia.exceptions.PageError:\n        print(f\"There is no Wikipedia page with the title '{page_title}'.\")\n        return None", "compilation_passed": true, "time": 0.002351045608520508, "tests_passed": false, "error": "AttributeError"}
{"code": "try:\n        page = wikipedia.page(page_title)\n        text = page.content\n        wordcloud = WordCloud(background_color='black', stopwords=[',']).generate(text)\n        plt.figure()\n        plt.imshow(wordcloud)\n        plt.show()\n        plt.close()\n        ax = None\n    except wikipedia.exceptions.DisambiguationError as e:\n        print(\"Error: The page title is ambiguous. Try using a more specific title or use a different keyword.\", e)\n    except wikipedia.exceptions.PageError as e:\n        print(\"Error: No page with that title could be found. Try using a different keyword.\", e)\n    except Exception as e:\n        print(\"Error: Could not retrieve Wikipedia page.\", e)\n    return ax", "compilation_passed": true, "time": 1.00754714012146, "tests_passed": false, "error": "UnboundLocalError"}
{"code": "# wikipedia.search(page_title)\n    page = wikipedia.page(page_title)\n    text = page.summary\n    return WordCloud(max_font_size = 50,\n                     background_color = \"black\",\n                     colormap = \"tab20\").generate(text)", "compilation_passed": true, "time": 0.0038559436798095703, "tests_passed": false, "error": "AttributeError"}
{"code": "try:\n        page = wikipedia.page(page_title, auto_suggest=False)\n    except wikipedia.DisambiguationError:\n        return None\n    except wikipedia.PageError:\n        return None\n    try:\n        text = page.content\n        text = re.sub('\\[.*?\\]', '', text)\n        text = re.sub('\\(.*?\\)', '', text)\n        text = re.sub('\\<.*?\\>', '', text)\n        text = re.sub('\\<ref.*?\\>', '', text)\n        text = re.sub('\\<ref.*?\\>', '', text)\n        text = re.sub('\\n+', ' ', text)\n        words = nltk.word_tokenize(text)\n        frequencies = nltk.FreqDist(words)\n        cloud = WordCloud(max_font_size=40, max_words=200, stopwords=set(STOP_WORDS)).generate_from_frequencies", "compilation_passed": false, "time": 0.0006768703460693359, "tests_passed": false, "error": "SyntaxError"}
{"code": "try:\n        page = wikipedia.page(page_title)\n    except wikipedia.DisambiguationError:\n        page = wikipedia.page(page_title,\n                             sentinel=\"\",\n                             redirects=True)\n\n    try:\n        page_content = str(page.content)\n    except wikipedia.exceptions.PageError:\n        return None\n\n    try:\n        wc = WordCloud(font_path='./fonts/NotoSans.otf',\n                       width=1920,\n                       height=1080,\n                       background_color='white')\n        wc.generate(page_content)\n    except UnicodeDecodeError:\n        return None\n\n    try:\n        ax = plt.subplot(1,1,1)\n        ax.imshow(wc)\n        plt.axis(\"off\")\n    except:\n        return None\n\n    return ax", "compilation_passed": true, "time": 0.01515817642211914, "tests_passed": false, "error": "OSError"}
{"code": "try:\n        page = wikipedia.page(page_title)\n        text = page.content\n        text_clean = remove_special_char(text)\n        text_clean = text_clean.lower()\n        word_cloud = WordCloud(background_color='white').generate(text_clean)\n        return plt.imshow(word_cloud)\n    except:\n        return None", "compilation_passed": true, "time": 1.0027661323547363, "tests_passed": true, "error": null}
{"code": "try:\n        content = wikipedia.page(page_title).content\n    except:\n        print('Page not found')\n        return None\n\n    else:\n        text = content.split()\n        wordcloud = WordCloud(background_color=\"white\", collocations=False).generate(\" \".join(text))\n        return plt.figure().add_subplot(1, 1, 1).imshow(wordcloud)", "compilation_passed": true, "time": 0.9690711498260498, "tests_passed": true, "error": null}
{"code": "try:\n        # Retrieve text from Wikipedia\n        page = wikipedia.page(page_title)\n        text = page.summary\n\n        # Create the word cloud\n        cloud = WordCloud(width=400, height=200,\n                          background_color='white',\n                          colormap='Greys',\n                          stopwords=set(stopwords.words('english')),\n                          ).generate(text)\n\n        # Plot the word cloud\n        plt.imshow(cloud)\n        plt.axis('off')\n        plt.tight_layout(pad=0)\n\n        # Return the matplotlib Axes object of the plotted data\n        return plt.gca()\n\n    except wikipedia.exceptions.DisambiguationError:\n        # If there is more than one Wikipedia page with the given title, display an error message\n        raise Exception(\"More than one Wikipedia page with the given title.\")\n\n    except wikipedia.exceptions.PageError:\n        # If there is no Wikipedia page with the given title, display an error message\n        raise Exception(\"No Wikipedia", "compilation_passed": false, "time": 0.0005929470062255859, "tests_passed": false, "error": "SyntaxError"}
{"code": "try:\n        page_info = wikipedia.page(page_title)\n        page_info_text = page_info.content\n        text = page_info_text.replace(\n            r\"\\(.*?\\)\", '').replace(r\"\\[.*?\\]\", '')\n        return WordCloud(\n            background_color='white',\n            width=1200,\n            height=600\n        ).generate(text)\n\n    except wikipedia.DisambiguationError:\n        return None", "compilation_passed": true, "time": 1.019460916519165, "tests_passed": false, "error": "requests.exceptions.ReadTimeout"}
{"code": "if wikipedia.page(page_title):\n        content = wikipedia.page(page_title).content\n        word_cloud = WordCloud(colormap=\"tab10\").generate(content)\n        plt.imshow(word_cloud)\n        plt.axis('off')\n        return plt.gca()\n    else:\n        return None", "compilation_passed": true, "time": 0.9172899723052979, "tests_passed": false, "error": "Void (disambiguation)"}
{"code": "page_info = wikipedia.page(page_title)\n    if page_info.exists():\n        words = page_info.content.split()\n        cloud = WordCloud(stopwords=\"\").generate(\" \".join(words))\n        fig, ax = plt.subplots()\n        ax.imshow(cloud)\n        ax.axis('off')\n        fig.show()\n        return ax\n    else:\n        return None", "compilation_passed": true, "time": 0.0029129981994628906, "tests_passed": false, "error": "AttributeError"}
{"code": "try:\n        page_content = wikipedia.summary(page_title)\n    except wikipedia.DisambiguationError as e:\n        # print(e.options)\n        return None\n\n    # get_first_link_text() is not available in the wikipedia package\n    # page_content = page_content.split('\\n')[2]\n    # page_content = page_content.strip()\n    # page_content = ' '.join(page_content.split())\n\n    words = wikipedia.generate_suggestions(page_title)\n    word_cloud = WordCloud().generate(' '.join(words))\n\n    plt.figure(figsize=(15, 10))\n    plt.imshow(word_cloud)\n    plt.axis('off')\n    plt.tight_layout(pad=0)\n    return plt.gca()", "compilation_passed": true, "time": 0.7867298126220703, "tests_passed": false, "error": "AttributeError"}
{"code": "try:\n        page = wikipedia.page(page_title)\n        text = page.content\n    except wikipedia.exceptions.DisambiguationError:\n        page = wikipedia.page(wikipedia.search(page_title, 1)[0])\n        text = page.content\n    except wikipedia.exceptions.PageError:\n        return None\n\n    wordcloud = WordCloud(\n        stopwords=[\"a\",\"about\",\"above\",\"after\",\"again\",\"against\",\"all\",\"am\",\"an\",\"and\",\"any\",\"are\",\"as\",\"at\",\"be\",\"because\",\"been\",\"before\",\"being\",\"between\",\"both\",\"but\",\"by\",\"can\",\"could\",\"did\",\"do\",\"does\",\"doing\",\"don\",\"done\",\"down\",\"due\",\"during\",\"each\",\"few\",\"for\",\"from\",\"further\",\"had\"", "compilation_passed": false, "time": 0.0007679462432861328, "tests_passed": false, "error": "SyntaxError"}
{"code": "page = wikipedia.page(page_title)\n    text = page.summary\n    cloud = WordCloud().generate(text)\n\n    try:\n        # Try to create a plot object using the text of the Wikipedia page.\n        fig, ax = plt.subplots(1,1)\n        ax.imshow(cloud, interpolation='nearest')\n        ax.axis('off')\n        return ax\n    except:\n        return None", "compilation_passed": true, "time": 0.0030248165130615234, "tests_passed": false, "error": "AttributeError"}
{"code": "try:\n        page = wikipedia.page(page_title)\n        text = page.content\n        words = wikipedia.wordcount(text)\n\n        cloud = WordCloud()\n        word_list = []\n        for word, count in words.items():\n            if count >= 500:\n                word_list.append(word)\n        cloud.generate_from_words(word_list)\n        ax = plt.gca()\n        ax.imshow(cloud.recolor())\n\n    except:\n        print(\"The page with title\", page_title, \"does not exist.\")\n        ax = None\n\n    return ax", "compilation_passed": true, "time": 0.635322093963623, "tests_passed": true, "error": null}
{"code": "try:\n        page = wikipedia.page(page_title)\n        text = page.content\n        words = wikipedia.wordcloud(text)\n        ax = plt.imshow(words, interpolation='bilinear')\n        return ax\n    except wikipedia.DisambiguationError as e:\n        print(e)\n        return None", "compilation_passed": true, "time": 0.003200054168701172, "tests_passed": false, "error": "AttributeError"}
{"code": "try:\n        page_text = wikipedia.page(page_title).content\n        word_cloud = WordCloud().generate(page_text)\n        return plt.imshow(word_cloud, interpolation='bilinear')\n    except wikipedia.exceptions.DisambigiationError:\n        print('Ambiguity. Please choose another page title.')\n        return None\n\n    # https://www.youtube.com/watch?v=881K6j0g3Dk\n    # https://cloud.google.com/blog/products/cloud-computing/a-word-cloud-generator-for-the-cloud-computing-world", "compilation_passed": true, "time": 0.7282159328460693, "tests_passed": false, "error": "AttributeError"}
{"code": "if page_title == None:\n        return None\n\n    try:\n        text = wikipedia.page(page_title).content\n    except wikipedia.DisambiguationError:\n        return None\n    else:\n        wc = WordCloud(max_font_size=40, background_color='black', stopwords=['.', ',', '?', '!', ';', ':', '(', ')']).generate(text)\n        fig = plt.figure(figsize=(20,20))\n        ax = fig.add_axes([0,0,1,1])\n        ax.imshow(wc)\n        ax.axis('off')\n        return ax", "compilation_passed": true, "time": 0.8046891689300537, "tests_passed": true, "error": null}
{"code": "page = wikipedia.page(page_title)\n\n    # TODO: Generate the wordcloud.\n    try:\n        wordcloud = WordCloud().generate(page.summary)\n        # TODO: Plot the wordcloud.\n        return plt.imshow(wordcloud, interpolation='nearest')\n    except wikipedia.exceptions.DisambiguationError as e:\n        print(f\"Wikipedia page with title {page_title} could not be found. Try one of the following instead: {e.options}\")\n        return None\n    except wikipedia.exceptions.PageError:\n        print(f\"Wikipedia page with title {page_title} could not be found.\")\n        return None", "compilation_passed": true, "time": 0.0031669139862060547, "tests_passed": false, "error": "AttributeError"}
{"code": "try:\n        text = wikipedia.page(page_title).content\n    except:\n        return None\n    else:\n        wordcloud = WordCloud().generate(text)\n        return plt.imshow(wordcloud, interpolation=\"bicubic\")", "compilation_passed": true, "time": 0.6726667881011963, "tests_passed": true, "error": null}
{"code": "try:\n        page = wikipedia.page(page_title)\n        text = page.content\n        word_cloud = WordCloud(background_color=\"white\",\n                               stopwords=stopwords.words(\"english\")).generate(text)\n        fig, ax = plt.subplots()\n        ax.axis(\"off\")\n        ax.imshow(word_cloud)\n        return ax\n    except wikipedia.exceptions.PageError:\n        return None", "compilation_passed": true, "time": 0.0033180713653564453, "tests_passed": false, "error": "NameError"}
{"code": "page = wikipedia.page(page_title)\n    text = page.content\n    wc = WordCloud().generate(text)\n    plt.figure(figsize=(15, 15))\n    plt.imshow(wc, interpolation='bilinear')\n    plt.axis(\"off\")\n    plt.show()\n    return plt.gca()", "compilation_passed": true, "time": 0.8539741039276123, "tests_passed": false, "error": "Void (disambiguation)"}
