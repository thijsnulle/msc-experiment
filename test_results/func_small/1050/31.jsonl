{"code": "file_paths = []\n    if not os.path.isdir(DIRECTORY):\n        os.makedirs(DIRECTORY)\n    for i, line in enumerate(input_string.splitlines()):\n        if line:\n            file_paths.append(os.path.join(DIRECTORY, hashlib.sha256(line.encode()).hexdigest()[:10] + \".txt\"))\n    return file_paths", "compilation_passed": true, "time": 0.002183198928833008, "tests_passed": true, "error": null}
{"code": "# Create DIRECTORY if it does not exist\n    if not os.path.exists(DIRECTORY):\n        os.makedirs(DIRECTORY)\n\n    # Calculate the hash for each non-empty line\n    lines = input_string.split(\"\\n\")\n    hashes = []\n    for line in lines:\n        if len(line) > 0:\n            h = hashlib.sha256()\n            h.update(line.encode())\n            hashes.append(h.hexdigest()[:10] + \".txt\")\n\n    # Save the hashes to files\n    file_paths = []\n    for i, hash in enumerate(hashes):\n        path = os.path.join(DIRECTORY, hash)\n        file_paths.append(path)\n        with open(path, \"w\") as file:\n            file.write(lines[i])\n\n    return file_paths", "compilation_passed": true, "time": 0.0032269954681396484, "tests_passed": true, "error": null}
{"code": "# Create DIRECTORY if it doesn't exist\n    if not os.path.exists(DIRECTORY):\n        os.makedirs(DIRECTORY)\n\n    file_paths = []\n    # Split input_string into lines\n    lines = input_string.split(\"\\n\")\n\n    # Loop over each line\n    for line in lines:\n        line = line.strip()\n        if line:\n            # Calculate the SHA256 hash of the line and get its first 10 characters\n            hash_value = hashlib.sha256(line.encode()).hexdigest()[:10]\n            # Create a file path for the hash\n            file_path = os.path.join(DIRECTORY, hash_value + \".txt\")\n            file_paths.append(file_path)\n            # Save the hash to the file\n            with open(file_path, \"w\") as f:\n                f.write(hash_value)\n\n    return file_paths", "compilation_passed": true, "time": 0.003361940383911133, "tests_passed": true, "error": null}
{"code": "lines = input_string.splitlines()\n    file_paths = []\n    for i, line in enumerate(lines):\n        line = line.strip()\n        if not line:\n            continue\n        hasher = hashlib.sha256()\n        hasher.update(line.encode())\n        hash_value = hasher.digest()\n        hash_str = hashlib.sha256(hash_value).hexdigest()\n        hash_str = hash_str[:10] + \".txt\"\n        path = os.path.join(DIRECTORY, hash_str)\n        with open(path, \"w+\") as f:\n            f.write(line)\n        file_paths.append(path)\n    return file_paths", "compilation_passed": true, "time": 0.0010981559753417969, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Create the directory if it doesn't exist\n    if not os.path.exists(DIRECTORY):\n        os.makedirs(DIRECTORY)\n    file_paths = []\n    # Loop through each line and calculate the SHA256 hash of the line, excluding any empty lines\n    for line_no, line in enumerate(input_string.splitlines()):\n        line = line.strip()\n        if line:\n            hash_value = hashlib.sha256(line.encode()).hexdigest()\n            filename = hash_value[:10] + '.txt'\n            filepath = os.path.join(DIRECTORY, filename)\n            with open(filepath, 'w') as f:\n                f.write(hash_value)\n            file_paths.append(filepath)\n    return file_paths", "compilation_passed": true, "time": 0.0030989646911621094, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(DIRECTORY):\n        os.makedirs(DIRECTORY)\n\n    lines = input_string.split('\\n')\n\n    file_paths = []\n\n    for index, line in enumerate(lines):\n        line = line.strip()\n\n        if line:\n            sha_hash = hashlib.sha256(line.encode()).hexdigest()\n            file_path = os.path.join(DIRECTORY, f\"{sha_hash[0:10]}.txt\")\n            file_paths.append(file_path)\n            with open(file_path, 'w') as file:\n                file.write(sha_hash + \"\\n\")\n\n    return file_paths", "compilation_passed": true, "time": 0.003131866455078125, "tests_passed": true, "error": null}
{"code": "file_paths = []\n    for line in input_string.split(os.linesep):\n        if line.strip():\n            hash_value = hashlib.sha256(line.encode(\"utf-8\")).hexdigest()\n            file_path = os.path.join(DIRECTORY, hash_value[:10] + \".txt\")\n            file_paths.append(file_path)\n            with open(file_path, 'w') as f:\n                f.write(hash_value)\n\n    return file_paths", "compilation_passed": true, "time": 0.0011138916015625, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Create the hashed files directory if it doesn't exist\n    if not os.path.exists(DIRECTORY):\n        os.makedirs(DIRECTORY)\n\n    # Iterate through each non-empty line in the input string and save its hash to a file\n    hash_list = []\n    for line in input_string.split(\"\\n\"):\n        if line.strip():\n            hash_value = hashlib.sha256(line.encode()).hexdigest()\n            filename = \"{0}.txt\".format(hash_value[0:10])\n            with open(os.path.join(DIRECTORY, filename), \"w\") as file:\n                file.write(hash_value)\n            hash_list.append(os.path.join(DIRECTORY, filename))\n\n    return hash_list", "compilation_passed": true, "time": 0.002908945083618164, "tests_passed": true, "error": null}
{"code": "# Create the 'hashed_files' directory if it doesn't exist\n    if not os.path.exists(DIRECTORY):\n        os.makedirs(DIRECTORY)\n\n    # Get the hash of each non-empty line in the input string\n    # and save them to files named with the hash as the file name\n    nonempty_lines = [line.strip() for line in input_string.splitlines() if line.strip()]\n    hashes = []\n    for line in nonempty_lines:\n        hash_object = hashlib.sha256()\n        hash_object.update(line.encode())\n        hash_value = hash_object.hexdigest()[:10] + \".txt\"\n        file_path = os.path.join(DIRECTORY, hash_value)\n        with open(file_path, 'w') as file:\n            file.write(line)\n        hashes.append(file_path)\n\n    return hashes", "compilation_passed": true, "time": 0.003025054931640625, "tests_passed": true, "error": null}
{"code": "# Create the directory if it does not exist\n    if not os.path.exists(DIRECTORY):\n        os.makedirs(DIRECTORY)\n\n    # Split the multi-line string into lines\n    lines = input_string.split('\\n')\n\n    # Create a list to store the file paths\n    file_paths = []\n\n    # Iterate over the non-empty lines\n    for index, line in enumerate(lines):\n        # If the line is not empty, generate a hash using SHA256\n        if line.strip():\n            hash_value = hashlib.sha256(line.encode('utf-8')).hexdigest()[:10]\n            filename = f\"{DIRECTORY}/{hash_value}.txt\"\n\n            # Open the file in write mode\n            with open(filename, 'w') as file:\n                # Write the line to the file\n                file.write(line)\n\n            # Add the file path to the list\n            file_paths.append(filename)\n\n    return file_paths", "compilation_passed": true, "time": 0.0030670166015625, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(DIRECTORY):\n        os.mkdir(DIRECTORY)\n\n    hash_dict = {}\n\n    # Split the input string into lines and remove empty lines\n    lines = input_string.splitlines()\n    lines = [line for line in lines if line.strip() != \"\"]\n\n    for i, line in enumerate(lines, start=1):\n        # Calculate the SHA256 hash for the line\n        hash_value = hashlib.sha256(line.encode()).hexdigest()\n\n        # Create the file path with a '.txt' extension\n        file_path = os.path.join(DIRECTORY, f\"{hash_value[:10]}.txt\")\n\n        # Check if the file already exists\n        if not os.path.exists(file_path):\n            with open(file_path, \"w\") as f:\n                f.write(line)\n\n        # Add the file path to the hash_dict\n        hash_dict[f\"{i}.{hash_value[:10]}", "compilation_passed": false, "time": 0.00010585784912109375, "tests_passed": false, "error": "SyntaxError"}
{"code": "file_paths = []\n    try:\n        if not os.path.exists(DIRECTORY):\n            os.makedirs(DIRECTORY)\n\n        for line in input_string.split(\"\\n\"):\n            line = line.strip()\n\n            if line:\n                md5 = hashlib.sha256()\n                md5.update(line.encode('utf-8'))\n                file_name = './hashed_files/' + hashlib.md5(md5.digest()).hexdigest()[0:10] + \".txt\"\n                with open(file_name, 'a', encoding='utf-8') as file:\n                    file.write(f\"{line}\\n\")\n                file_paths.append(file_name)\n\n    except Exception as e:\n        print(f\"Error: {e}\")\n\n    return file_paths", "compilation_passed": true, "time": 0.0021467208862304688, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(DIRECTORY):\n        os.mkdir(DIRECTORY)\n\n    lines = input_string.split(\"\\n\")\n    hashed_lines = [hashlib.sha256(line.encode()).hexdigest() for line in lines if line]\n    filenames = [\"./\" + DIRECTORY + \"/\" + hash[:10] + \".txt\" for hash in hashed_lines]\n\n    return filenames", "compilation_passed": true, "time": 0.0015797615051269531, "tests_passed": true, "error": null}
{"code": "# Create the DIRECTORY if it does not exist\n    if not os.path.exists(DIRECTORY):\n        os.makedirs(DIRECTORY)\n\n    # Split the multi-line string into lines and process each line\n    lines = input_string.split(\"\\n\")\n    file_paths = []\n    for line in lines:\n        if len(line.strip()) > 0:\n            file_name = hashlib.sha256(line.encode()).hexdigest()[:10] + \".txt\"\n            file_path = os.path.join(DIRECTORY, file_name)\n            file_paths.append(file_path)\n\n            # Write the hashed line to the file\n            with open(file_path, \"w\") as file:\n                file.write(line + \"\\n\")\n\n    return file_paths", "compilation_passed": true, "time": 0.0028810501098632812, "tests_passed": true, "error": null}
{"code": "hashes = []\n    if not os.path.exists(DIRECTORY):\n        os.mkdir(DIRECTORY)\n\n    lines = input_string.split(\"\\n\")\n\n    for line_no, line in enumerate(lines):\n        line = line.strip()\n        if line:\n            sha = hashlib.sha256(line.encode()).hexdigest()\n            file_path = os.path.join(DIRECTORY, sha[:10] + '.txt')\n            with open(file_path, 'w') as f:\n                f.write(f\"line {line_no + 1}:\\n{line}\\n\")\n                hashes.append(file_path)\n\n    return hashes", "compilation_passed": true, "time": 0.0029840469360351562, "tests_passed": true, "error": null}
{"code": "file_paths = []\n    lines = input_string.split('\\n')\n    for line in lines:\n        if not line:\n            continue\n        hashed_line = hashlib.sha256(line.encode()).hexdigest()[:10] + \".txt\"\n        file_path = os.path.join(DIRECTORY, hashed_line)\n        file_paths.append(file_path)\n        with open(file_path, 'w') as f:\n            f.write(line)\n    return file_paths", "compilation_passed": true, "time": 0.0009770393371582031, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Create DIRECTORY if it does not exist\n    if not os.path.exists(DIRECTORY):\n        os.mkdir(DIRECTORY)\n    # Split the input string into lines\n    lines = input_string.split(\"\\n\")\n\n    # Create a list to store file paths\n    file_paths = []\n    # Iterate over lines\n    for index, line in enumerate(lines):\n        # Skip empty lines\n        if not line.strip():\n            continue\n        # Hash the line using SHA256\n        hash_object = hashlib.sha256()\n        hash_object.update(line.encode())\n        hash_value = hash_object.hexdigest()\n\n        # Save the hash to a file\n        filename = DIRECTORY + \"/\" + hash_value[:10] + \".txt\"\n        with open(filename, \"w\") as file:\n            file.write(line + \"\\n\")\n        # Store the file path in the list\n        file_paths.append(filename)\n    return file_paths", "compilation_passed": true, "time": 0.0028569698333740234, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(DIRECTORY):\n        os.mkdir(DIRECTORY)\n\n    file_paths = []\n    # Your code goes here\n    return file_paths", "compilation_passed": true, "time": 0.00133514404296875, "tests_passed": true, "error": null}
{"code": "file_paths = []\n    for line in input_string.splitlines():\n        if line:\n            file_paths.append(os.path.join(DIRECTORY,\n                                           hashlib.sha256(line.encode()).hexdigest()[:10] + '.txt'))\n\n    return file_paths", "compilation_passed": true, "time": 0.0009059906005859375, "tests_passed": true, "error": null}
{"code": "file_paths = []\n    if not os.path.isdir(DIRECTORY):\n        os.mkdir(DIRECTORY)\n\n    for line in input_string.split(\"\\n\"):\n        if not line:\n            continue\n        file_path = os.path.join(DIRECTORY, hashlib.sha256(line.encode('utf-8')).hexdigest() + \".txt\")\n        with open(file_path, 'w') as file:\n            file.write(line)\n        file_paths.append(file_path)\n\n    return file_paths", "compilation_passed": true, "time": 0.0020132064819335938, "tests_passed": true, "error": null}
{"code": "# Check if the directory exists and create it if not\n    if not os.path.exists(DIRECTORY):\n        os.makedirs(DIRECTORY)\n\n    # Get the hash of each non-empty line and save it to a file\n    lines = input_string.splitlines()\n    file_paths = []\n    for i in range(len(lines)):\n        if lines[i].strip():\n            with open(os.path.join(DIRECTORY, hashlib.sha256(lines[i].encode('utf-8')).hexdigest() + \".txt\"), 'w') as file:\n                file.write(lines[i])\n            file_paths.append(os.path.join(DIRECTORY, hashlib.sha256(lines[i].encode('utf-8')).hexdigest() + \".txt\"))\n    return file_paths", "compilation_passed": true, "time": 0.0018849372863769531, "tests_passed": true, "error": null}
{"code": "os.makedirs(DIRECTORY, exist_ok=True)\n\n    file_paths = []\n\n    # Split input_string into lines using \\n\n    lines = input_string.split(\"\\n\")\n\n    # Hash each non-empty line\n    for line in lines:\n        if line.strip():\n            hash_object = hashlib.sha256(line.encode())\n            file_path = os.path.join(DIRECTORY, hash_object.hexdigest() + \".txt\")\n            file_paths.append(file_path)\n\n            # Write the hash to the file\n            with open(file_path, \"w\") as f:\n                f.write(hash_object.hexdigest())\n\n    return file_paths", "compilation_passed": true, "time": 0.002010822296142578, "tests_passed": true, "error": null}
{"code": "file_paths = []\n    lines = input_string.splitlines()\n\n    if not os.path.exists(DIRECTORY):\n        os.mkdir(DIRECTORY)\n\n    for i in range(0, len(lines)):\n        if not lines[i].isspace():\n            hash_value = hashlib.sha256(lines[i].encode()).hexdigest()\n            with open(f\"{DIRECTORY}/{hash_value[:10]}.txt\", \"w\") as file:\n                file.write(hash_value)\n            file_paths.append(f\"{DIRECTORY}/{hash_value[:10]}.txt\")\n    return file_paths", "compilation_passed": true, "time": 0.0024268627166748047, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(DIRECTORY):\n        os.mkdir(DIRECTORY)\n    hashes = {}\n    file_paths = []\n    lines = input_string.split('\\n')\n    for line in lines:\n        line = line.strip()\n        if not line:\n            continue\n        hasher = hashlib.sha256()\n        hasher.update(line.encode())\n        hash_str = hasher.hexdigest()[:10] + '.txt'\n        path = os.path.join(DIRECTORY, hash_str)\n        with open(path, 'w') as f:\n            f.write(hash_str)\n        hashes[path] = hasher.hexdigest()\n    return list(hashes.keys())", "compilation_passed": true, "time": 0.0037622451782226562, "tests_passed": true, "error": null}
{"code": "lines = input_string.split(\"\\n\")\n\n    for index, line in enumerate(lines):\n        if line:\n            with open(os.path.join(DIRECTORY,\n                                   hashlib.sha256(line.encode()).hexdigest()[:10] + '.txt'),\n                      \"w\") as file:\n                file.write(line)\n\n    return [os.path.join(DIRECTORY,\n                         hashlib.sha256(line.encode()).hexdigest()[:10] + '.txt') for line in lines if line]", "compilation_passed": true, "time": 0.0010750293731689453, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "file_paths = []\n    if not os.path.exists(DIRECTORY):\n        os.mkdir(DIRECTORY)\n    # Split the input string into lines\n    lines = input_string.strip().split('\\n')\n\n    # Remove empty lines and create a list of non-empty lines\n    non_empty_lines = [line for line in lines if line.strip()]\n\n    # Hash each non-empty line using SHA256 and save the hashes to a file\n    for i, line in enumerate(non_empty_lines):\n        filename = hashlib.sha256(line.encode()).hexdigest()[:10] + \".txt\"\n        with open(os.path.join(DIRECTORY, filename), \"w\") as file:\n            file.write(line)\n        file_paths.append(os.path.join(DIRECTORY, filename))\n    return file_paths", "compilation_passed": true, "time": 0.0030829906463623047, "tests_passed": true, "error": null}
{"code": "os.makedirs(DIRECTORY, exist_ok=True)\n\n    hashes = []\n    file_paths = []\n    input_lines = input_string.splitlines()\n\n    for line in input_lines:\n        if line != \"\":\n            h = hashlib.sha256()\n            h.update(line.encode('utf-8'))\n            hash = h.hexdigest()\n            file_path = os.path.join(DIRECTORY, hash[:10] + \".txt\")\n            hashes.append(file_path)\n            with open(file_path, 'w') as file:\n                file.write(line)\n\n    return hashes", "compilation_passed": true, "time": 0.0029480457305908203, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(DIRECTORY):\n        os.mkdir(DIRECTORY)\n\n    hashes = []\n    lines = input_string.split('\\n')\n\n    for line in lines:\n        if len(line) > 0:\n            hashes.append(hashlib.sha256(line.encode()).hexdigest())\n\n    for index, hash_str in enumerate(hashes):\n        filename = DIRECTORY + '/' + hash_str[:10] + '.txt'\n\n        with open(filename, 'w') as f:\n            f.write(hash_str)\n\n    return hashes", "compilation_passed": true, "time": 0.0018630027770996094, "tests_passed": true, "error": null}
{"code": "lines = input_string.strip().split('\\n')\n    file_paths = []\n\n    for i, line in enumerate(lines):\n        line = line.strip()\n        if len(line) == 0:\n            continue\n        filename = hashlib.sha256(line.encode('utf-8')).hexdigest()[0:10] + '.txt'\n        path = os.path.join(DIRECTORY, filename)\n        with open(path, 'w') as file:\n            file.write(line)\n        file_paths.append(path)\n\n    return file_paths", "compilation_passed": true, "time": 0.0010161399841308594, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Create a directory to store the hashed files\n    if not os.path.isdir(DIRECTORY):\n        os.makedirs(DIRECTORY)\n\n    # Convert the input string to a list of lines\n    lines = input_string.strip().split('\\n')\n\n    # Get the hashed filenames for each line and write to files\n    file_paths = []\n    for i, line in enumerate(lines):\n        hash = hashlib.sha256(line.encode('utf-8')).hexdigest()\n        filename = DIRECTORY + \"/\" + hash[:10] + \".txt\"\n        with open(filename, \"w\") as file:\n            file.write(hash)\n            file_paths.append(filename)\n\n    return file_paths", "compilation_passed": true, "time": 0.0015149116516113281, "tests_passed": true, "error": null}
