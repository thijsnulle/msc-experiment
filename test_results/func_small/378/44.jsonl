{"code": "files = glob.glob(os.path.join(data_dir, '**', '*.csv'), recursive=True)\n    if not files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    return pd.concat([pd.read_csv(f, skiprows=1, index_col=0) for f in files]).to_string(\n        index=False, header=False, colalign=('left', 'center', 'right'), numalign='right',\n        colwidth=max([len(f.split(os.sep)[-1]) for f in files]) + 4)", "compilation_passed": true, "time": 0.0014340877532958984, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Check if data_dir exists\n    if not os.path.exists(data_dir):\n        raise FileNotFoundError('Directory not found.')\n\n    # Create an empty list to store the file paths\n    file_paths = []\n\n    # Iterate through the files in the specified directory\n    for file in glob.glob(f'{data_dir}*.csv'):\n        # If it's an actual file, append it to the list\n        if os.path.isfile(file):\n            file_paths.append(file)\n\n    # If there are no files, raise a ValueError\n    if not file_paths:\n        raise ValueError('No files found.')\n\n    # Initialize the table object\n    table = Texttable()\n\n    # Iterate through the files\n    for file_path in file_paths:\n        # If it's not an empty file, process it\n        if os.stat(file_path).st_size != 0:\n            # Read the contents of the file\n            with open(file_path, 'r') as f:\n                try:\n", "compilation_passed": false, "time": 0.0002200603485107422, "tests_passed": false, "error": "IndentationError"}
{"code": "try:\n        files = glob.glob(os.path.join(data_dir, '*.csv'))\n        if len(files) == 0:\n            raise ValueError('No CSV files found in the specified directory')\n    except FileNotFoundError:\n        raise FileNotFoundError(\n            'The specified directory does not exist') from None\n\n    table = Texttable(max_width=0, padding=0)\n    table.add_rows([['File', 'Rows', 'Columns']] + [(os.path.basename(file), None, None) for file in files])\n    for file in files:\n        try:\n            df = pd.read_csv(file)\n        except pd.errors.EmptyDataError:\n            table.set_val(file, None, None)\n        else:\n            table.set_val(file, df.shape[0], df.shape[1])\n    return table.draw()", "compilation_passed": true, "time": 0.0014109611511230469, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "text_table = Texttable()\n\n    csv_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n\n    if csv_files:\n        header = [\"File\", \"Rows\", \"Columns\"]\n        data = []\n        for file in csv_files:\n            try:\n                df = pd.read_csv(file)\n                rows, columns = df.shape\n                data.append([file, rows, columns])\n            except (FileNotFoundError, ValueError, pd.errors.EmptyDataError) as e:\n                print(e)\n    else:\n        raise FileNotFoundError(\"The specified directory does not exist or no CSV files are found.\")\n\n    text_table.add_rows(data)\n    return text_table.draw_grid(padding=1, border_color='')", "compilation_passed": true, "time": 0.0012969970703125, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if not os.path.exists(data_dir):\n        raise FileNotFoundError(data_dir)\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(data_dir)\n\n    files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not files:\n        raise ValueError('No CSV files found in ' + data_dir)\n    data_list = []\n    for f in files:\n        try:\n            df = pd.read_csv(f, index_col=0)\n            data_list.append([f, df.shape[0], df.shape[1]])\n        except pandas.errors.EmptyDataError:\n            continue\n\n    result = Texttable()\n    result.add_rows(data_list, header=['File', 'Rows', 'Columns'])\n    result_str = str(result)\n    return result_str", "compilation_passed": true, "time": 0.001332998275756836, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "try:\n        files = glob.glob(f'{data_dir}*.csv')\n    except FileNotFoundError:\n        raise FileNotFoundError('The directory specified does not exist.')\n    if len(files) == 0:\n        raise ValueError(f'There are no CSV files in the directory: {data_dir}')\n    table = Texttable()\n    headers = [\"File\", \"Rows\", \"Columns\"]\n    table.add_rows([headers])\n    for file in files:\n        df = pd.read_csv(file, encoding='utf-8')\n        table.add_row([file, df.shape[0], df.shape[1]])\n    return str(table.draw())", "compilation_passed": true, "time": 0.0014629364013671875, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "summary_table = Texttable()\n    summary_table.set_cols_align([\"l\", \"r\", \"r\"])\n    summary_table.set_cols_dtype([\"t\", \"i\", \"i\"])\n    summary_table.set_cols_width([15, 4, 4])\n    summary_table.add_row([\"File\", \"Rows\", \"Columns\"])\n    files = glob.glob(os.path.join(data_dir, \"**/*.csv\"), recursive=True)\n    if files:\n        for file in files:\n            try:\n                df = pd.read_csv(file)\n                if df.empty:\n                    raise ValueError\n            except ValueError:\n                summary_table.add_row([os.path.basename(file), 0, 0])\n            else:\n                summary_table.add_row([os.path.basename(file), df.shape[0], df.shape[1]])\n        return summary_table.draw()\n    else:\n        raise", "compilation_passed": true, "time": 0.0013442039489746094, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "files = glob.glob(os.path.join(data_dir, '*.csv'))\n    table = Texttable()\n\n    if not files:\n        raise FileNotFoundError(\"No CSV files found in the specified directory.\")\n\n    try:\n        for file in files:\n            df = pd.read_csv(file)\n            try:\n                df = df.iloc[:0]\n                table.add_row([os.path.basename(file), df.shape[0], df.shape[1]])\n            except:\n                table.add_row([os.path.basename(file), None, None])\n\n    except pd.errors.EmptyDataError:\n        raise FileNotFoundError(\"Empty file encountered\")\n\n    return str(table)", "compilation_passed": true, "time": 0.0012879371643066406, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Check if the specified directory exists.\n    if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} doesn't exist.\")\n    # Check if there are any CSV files in the specified directory.\n    csv_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(csv_files) == 0:\n        raise ValueError(\"No CSV files found.\")\n\n    # Open each CSV file and generate a summary table.\n    tables = []\n    for f in csv_files:\n        try:\n            table = Texttable()\n            df = pd.read_csv(f)\n            table.add_rows(df.to_numpy())\n            tables.append(table)\n        except pd.errors.EmptyDataError:\n            continue\n    # Create a table and concatenate the summary tables.\n    table = Texttable()\n    table.add_rows(zip(csv_files, [len(df) for df in df]))\n    for t in tables:\n        ", "compilation_passed": false, "time": 0.00023293495178222656, "tests_passed": false, "error": "IndentationError"}
{"code": "if not os.path.isdir(data_dir):\n        raise FileNotFoundError(\"No such file or directory.\")\n\n    all_files = [os.path.basename(x) for x in glob.glob(f\"{data_dir}*.csv\")]\n    all_files = [x for x in all_files if not x.startswith(\"test\")]\n\n    if not all_files:\n        raise ValueError(\"No CSV files in the specified directory.\")\n\n    rows_list = []\n    for filename in all_files:\n        csv_filename = os.path.join(data_dir, filename)\n\n        try:\n            data = pd.read_csv(csv_filename)\n            rows = len(data)\n            columns = len(data.columns)\n        except pd.errors.EmptyDataError:\n            rows = 0\n            columns = 0\n        rows_list.append((filename, rows, columns))\n\n    texttable = Texttable(\"\")\n    texttable.set_cols_align([\"l\", \"r", "compilation_passed": false, "time": 0.00011610984802246094, "tests_passed": false, "error": "SyntaxError"}
{"code": "table = Texttable()\n\n    files_in_dir = glob.glob(f\"{data_dir}*.csv\")\n    if len(files_in_dir) == 0:\n        raise ValueError(\"There are no CSV files in the specified directory.\")\n\n    for filename in files_in_dir:\n        try:\n            df = pd.read_csv(filename)\n        except pd.errors.EmptyDataError:\n            raise ValueError(f\"An empty CSV file was encountered: {filename}\")\n        except Exception as e:\n            raise ValueError(f\"An unexpected error occurred while processing {filename}: {e}\")\n\n        filename = os.path.basename(filename)\n        rows = len(df)\n        columns = len(df.columns)\n        table.add_row([filename, rows, columns])\n\n    return table.draw()", "compilation_passed": true, "time": 0.0013589859008789062, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if not os.path.isdir(data_dir):\n        raise FileNotFoundError(f\"{data_dir} is not a valid directory.\")\n    csv_files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if not csv_files:\n        raise ValueError(f\"No CSV files found in {data_dir}.\")\n    table = Texttable()\n    for file in csv_files:\n        try:\n            df = pd.read_csv(file, dtype=str, index_col=False, header=0, na_values=['NA'], skip_blank_lines=True)\n        except pd.errors.EmptyDataError as e:\n            print(f\"{file} is an empty file\")\n        else:\n            df_info = f'|   {file}  | {len(df)}   | {df.shape[1]}   |'\n            table.add_row(df_info)\n    return table.draw()", "compilation_passed": true, "time": 0.0013751983642578125, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "try:\n        files = sorted(glob.glob(os.path.join(data_dir, \"*.csv\")))\n        if len(files) == 0:\n            raise ValueError\n        summary = pd.DataFrame()\n        for file in files:\n            df = pd.read_csv(file, sep=\",\", encoding=\"utf-8\")\n            summary = summary.append(pd.DataFrame([\n                [file, len(df.index), len(df.columns)]\n            ], index=[file]))\n        return str(summary)\n    except FileNotFoundError:\n        raise FileNotFoundError(\"File not found\")\n    except ValueError:\n        raise ValueError(\"No files found\")\n    except pd.errors.EmptyDataError:\n        raise ValueError(\"Empty file found\")", "compilation_passed": true, "time": 0.0013103485107421875, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "def print_table(file_list, table):\n        for i in file_list:\n            table.add_row(i, data[i].shape[0], data[i].shape[1])\n        return table.draw()\n\n    data = {}\n    for file in glob.glob(f\"{data_dir}/*.csv\"):\n        try:\n            data[file] = pd.read_csv(file)\n        except ValueError:\n            print(f\"Empty file: {file}\")\n\n    if not data:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n    return print_table(data.keys(), Texttable())", "compilation_passed": true, "time": 0.0013089179992675781, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if not os.path.exists(data_dir):\n        raise FileNotFoundError(f\"Directory {data_dir} doesn't exist\")\n    if os.listdir(data_dir) == []:\n        raise ValueError(\"No CSV files found in {data_dir}\")\n\n    rows = []\n    for filename in sorted(glob.glob(f\"{data_dir}/*.csv\")):\n        try:\n            df = pd.read_csv(filename)\n        except pd.errors.EmptyDataError as e:\n            print(e)\n        if df.empty:\n            continue\n        rows.append([filename, len(df), len(df.columns)])\n    table = Texttable()\n    table.set_cols_align([\"l\", \"r\", \"r\"])\n    table.set_cols_dtype(['t', 'i', 'i'])\n    table.set_cols_width([22, 4, 4])\n    table.add_rows(rows)\n\n    return table.draw()", "compilation_passed": true, "time": 0.0014679431915283203, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if not os.path.exists(data_dir):\n        raise FileNotFoundError\n\n    files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if len(files) == 0:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n\n    table = Texttable(max_width=0)\n    table.set_cols_dtype('t')\n    table.add_row(['File', 'Rows', 'Columns'])\n    for file in files:\n        try:\n            df = pd.read_csv(file, header=None)\n            rows, columns = df.shape\n            table.add_row([file, rows, columns])\n        except pd.errors.EmptyDataError:\n            print(f\"{file} is empty!\")\n            continue\n    return table.draw()", "compilation_passed": true, "time": 0.0014140605926513672, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "csv_files = glob.glob(f'{data_dir}*.csv')\n    if not csv_files:\n        raise ValueError('No CSV files found in the directory.')\n\n    # Open a new table and set its attributes\n    tb = Texttable()\n    tb.set_cols_align([\"c\", \"r\", \"r\"])\n    tb.set_cols_dtype([\"t\", \"i\", \"i\"])\n    tb.set_cols_width([10, 10, 10])\n\n    # Add rows to the table\n    for file in csv_files:\n        file_name = file.split('/')[-1]\n        try:\n            df = pd.read_csv(file)\n            rows, columns = df.shape\n            tb.add_row([file_name, rows, columns])\n        except pandas.errors.EmptyDataError:\n            tb.add_row([file_name, 'Empty', 'Empty'])\n    return tb.draw()", "compilation_passed": true, "time": 0.001329183578491211, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "os.makedirs(data_dir, exist_ok=True)\n    csv_files = glob.glob(os.path.join(data_dir, '*.csv'))\n\n    if not csv_files:\n        raise ValueError(\"No CSV files found in the specified directory.\")\n\n    for file in csv_files:\n        try:\n            # Create a DataFrame from the file using pd.read_csv\n            df = pd.read_csv(file, error_bad_lines=False)\n        except pd.errors.EmptyDataError:\n            # If the file is empty, raise an error\n            raise ValueError(f\"An empty CSV file was encountered: {file}\")\n\n    # Create a Texttable object to store the table\n    table = Texttable()\n\n    # Add the header row to the table\n    table.add_rows([['File', 'Rows', 'Columns']])\n\n    # Iterate over each CSV file\n    for file in csv_files:\n        try:\n            # Open the CSV file\n            with open(file, '", "compilation_passed": false, "time": 9.989738464355469e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "try:\n        # Get all CSV files in the specified directory\n        csv_files = glob.glob(os.path.join(data_dir, '*.csv'))\n        if not csv_files:\n            raise ValueError('No CSV files found in the specified directory.')\n\n        # Loop through CSV files and generate table\n        table = Texttable(max_width=90)\n        table.add_row(['File', 'Rows', 'Columns'])\n        for filename in csv_files:\n            try:\n                df = pd.read_csv(filename, index_col=False, header=0, skipfooter=1)\n            except ValueError as e:\n                if str(e).startswith(\"'empty'\"):\n                    raise ValueError(f\"EmptyDataError: File {filename} does not have rows.\")\n                else:\n                    raise\n            table.add_row([filename, len(df.index), len(df.columns)])\n\n        return table.draw()\n\n    except FileNotFoundError:\n        raise FileNotFoundError(f", "compilation_passed": false, "time": 0.0002589225769042969, "tests_passed": false, "error": "SyntaxError"}
{"code": "try:\n        csv_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    except FileNotFoundError:\n        raise FileNotFoundError\n    if not csv_files:\n        raise ValueError\n\n    df = pd.DataFrame(columns=['File', 'Rows', 'Columns'])\n    for f in csv_files:\n        try:\n            df.loc = df.loc + 1\n            df.loc['File'] = os.path.basename(f)\n            df.loc['Rows'] = pd.read_csv(f).shape[0]\n            df.loc['Columns'] = pd.read_csv(f).shape[1]\n        except ValueError:\n            df.loc['File'] = os.path.basename(f) + ' (empty)'\n            df.loc['Rows'] = 0\n            df.loc['Columns'] = 0\n\n    output = Texttable()\n    output.add_rows(df.to_numpy())\n    output.set_cols_dtype(['t', 'i', 'i", "compilation_passed": false, "time": 0.00010704994201660156, "tests_passed": false, "error": "SyntaxError"}
{"code": "data_dir = data_dir.rstrip('/')\n\n    try:\n        csv_files = glob.glob(data_dir + '/*.csv')\n    except FileNotFoundError:\n        raise FileNotFoundError(f\"The directory '{data_dir}' does not exist\")\n\n    if len(csv_files) == 0:\n        raise ValueError(f\"No CSV files found in directory '{data_dir}'\")\n\n    tables = [pd.read_csv(file, index_col=False, header=0) for file in csv_files]\n    table = Texttable(max_width=None)\n    rows = []\n\n    for idx, table in enumerate(tables):\n        if table.empty:\n            raise pandas.errors.EmptyDataError(f\"The {idx+1}th CSV file is empty\")\n\n        file_name = os.path.basename(csv_files[idx])\n        rows.append((file_name, table.shape[0], table.shape[1]))\n\n    table.set_cols_align(['l', '", "compilation_passed": false, "time": 0.00011110305786132812, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Directory {} not found!\".format(data_dir))\n\n    try:\n        csv_files = [file for file in glob.glob(data_dir + '*.csv')]\n    except FileNotFoundError:\n        raise FileNotFoundError(\"Directory {} not found!\".format(data_dir))\n\n    if not csv_files:\n        raise ValueError(\"No CSV files in directory {}\".format(data_dir))\n\n    table = Texttable()\n    table.set_precision(6)\n    headers = ['File', 'Rows', 'Columns']\n    table.add_rows([headers] + [get_file_info(file) for file in csv_files])\n    return table.draw()", "compilation_passed": true, "time": 0.0012638568878173828, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "os.makedirs('./tmp/', exist_ok=True)\n    csv_files = []\n    for file_name in glob.glob(f'{data_dir}*.csv'):\n        try:\n            df = pd.read_csv(file_name)\n        except pd.errors.EmptyDataError:\n            print('EmptyDataError')\n        except:\n            print(f'Something went wrong processing file {file_name}...')\n        else:\n            csv_files.append(file_name)\n            df = df.reset_index(drop=True)\n            t = Texttable()\n            data = [['File', 'Rows', 'Columns']]\n            rows = df.shape[0]\n            cols = df.shape[1]\n            data.append([file_name, rows, cols])\n            t.add_rows(data)\n            with open(f'tmp/{file_name}.csv', 'w') as outfile:\n                print(t.draw())\n                print(outfile.name, '->', 'csv')\n\n", "compilation_passed": true, "time": 0.0013659000396728516, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "data_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    data_files = [os.path.splitext(f)[0] for f in data_files]\n    if not data_files:\n        raise FileNotFoundError('No CSV files found in the specified directory.')\n\n    table = Texttable()\n    table.add_rows([\n        ['File', 'Rows', 'Columns'],\n    ])\n\n    for f in data_files:\n        try:\n            df = pd.read_csv(f, header=None)\n        except pd.errors.EmptyDataError:\n            continue\n        if len(df.columns) == 0:\n            continue\n\n        if 'Columns' not in df.columns:\n            continue\n\n        table.add_rows([\n            [f, len(df), len(df.columns)],\n        ])\n\n    return table.draw()", "compilation_passed": true, "time": 0.0013060569763183594, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if not os.path.exists(data_dir):\n        raise FileNotFoundError(\"Directory not found.\")\n    try:\n        file_list = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    except:\n        raise FileNotFoundError(\"File not found.\")\n    if len(file_list) == 0:\n        raise ValueError(\"No CSV files found.\")\n    files = []\n    for file_name in file_list:\n        try:\n            df = pd.read_csv(file_name)\n            file_dict = {'name': os.path.basename(file_name), 'rows': len(df), 'cols': len(df.columns)}\n            files.append(file_dict)\n        except pd.errors.EmptyDataError:\n            raise ValueError(\"Empty data.\")\n    if len(files) == 0:\n        raise ValueError(\"No CSV files found.\")\n    summary_table = Texttable()\n    summary_table.set_cols_align(['l'", "compilation_passed": false, "time": 0.00025200843811035156, "tests_passed": false, "error": "SyntaxError"}
{"code": "try:\n        # Create a Texttable object\n        table = Texttable()\n\n        # Collect all CSV files in a directory\n        files = glob.glob(os.path.join(data_dir, '*.csv'))\n        if not files:\n            raise ValueError(\"No CSV files found in the specified directory.\")\n\n        # Iterate over each file and read its contents\n        for file in files:\n            try:\n                data = pd.read_csv(file, error_bad_lines=False)\n                table.add_row([os.path.basename(file), len(data), len(data.columns)])\n            except pd.errors.EmptyDataError:\n                print(f\"Empty file encountered: {file}\")\n                continue\n        return table.draw()\n    except FileNotFoundError as e:\n        raise e\n    except ValueError as e:\n        raise e\n    except pd.errors.EmptyDataError as e:\n        raise e", "compilation_passed": true, "time": 0.0012729167938232422, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if not os.path.exists(data_dir):\n        raise FileNotFoundError('The specified directory does not exist.')\n\n    csv_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not csv_files:\n        raise ValueError('There are no CSV files in the specified directory.')\n\n    table = Texttable()\n    table.set_cols_dtype(['t', 'i', 'i'])\n    table.add_row(['File', 'Rows', 'Columns'])\n\n    for file_path in csv_files:\n        try:\n            df = pd.read_csv(file_path)\n        except pd.errors.EmptyDataError:\n            continue\n        try:\n            rows = df.shape[0]\n            cols = df.shape[1]\n            table.add_row([file_path, rows, cols])\n        except ValueError:\n            continue\n\n    return table.draw()", "compilation_passed": true, "time": 0.0012860298156738281, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "files = glob.glob(os.path.join(data_dir, \"*.csv\"))\n    if len(files) == 0:\n        raise FileNotFoundError(f\"No CSV files found in {data_dir}\")\n\n    try:\n        data = []\n        for file in files:\n            with open(file) as file_stream:\n                rows = pd.read_csv(file_stream, skip_empty_lines=True)\n                file_info = [os.path.basename(file)] + [len(rows), len(rows.columns)]\n                data.append(file_info)\n        return _print_table(data)\n    except pd.errors.EmptyDataError:\n        raise ValueError(f\"Empty data found in {file}.\")", "compilation_passed": true, "time": 0.0013098716735839844, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "try:\n        csv_files = glob.glob(os.path.join(data_dir, '*.csv'))\n        if csv_files:\n            df_list = []\n            for csv_file in csv_files:\n                try:\n                    df = pd.read_csv(csv_file)\n                    df_list.append(df)\n                except pd.errors.EmptyDataError:\n                    pass\n            df_list.sort(key=lambda df: df.index.size)\n\n            text = Texttable()\n            text.set_cols_align(['c', 'r', 'c'])\n            text.set_cols_dtype(['t', 'i', 'i'])\n            text.add_row(['File', 'Rows', 'Columns'])\n\n            for df in df_list:\n                text.add_row([os.path.basename(csv_file), df.index.size, df.shape[1]])\n\n            return text.draw()\n        else:\n            raise ValueError('No CSV files found in the specified directory", "compilation_passed": false, "time": 0.00011491775512695312, "tests_passed": false, "error": "SyntaxError"}
{"code": "csv_files = glob.glob(os.path.join(data_dir, '*.csv'))\n    if not csv_files:\n        raise FileNotFoundError(\"No CSV files found in {}\".format(data_dir))\n    files = pd.DataFrame(columns=['File', 'Rows', 'Columns'])\n    for filename in csv_files:\n        try:\n            # print(filename)\n            df = pd.read_csv(filename, sep=\",\")\n            files = files.append({'File': filename, 'Rows': len(df), 'Columns': len(df.columns)}, ignore_index=True)\n            # print(files)\n        except ValueError as e:\n            print(e)\n            print(\"Encountered empty data during processing of {}\".format(filename))\n            raise ValueError(\"Empty data\")\n    return files.sort_values('Rows').to_string(index=False)", "compilation_passed": true, "time": 0.0012791156768798828, "tests_passed": false, "error": "FileNotFoundError"}
