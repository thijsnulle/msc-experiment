{"code": "x = np.linspace(0, 2 * np.pi, 100)\n    y = np.random.normal(size=100)\n    r = np.sqrt(y**2)\n    theta = np.arccos(y)\n    color = random.choice(COLORS)\n\n    # Plot the polar function\n    ax.plot(x, r, c=color)\n\n    # Set polar grid\n    ax.grid(True, color='white')\n    ax.xaxis.set_major_locator(plt.MultipleLocator(30))\n    ax.yaxis.set_major_locator(plt.MultipleLocator(4))\n\n    # Add radial labels\n    r_label = 10 * (y[0] / abs(y[0]))\n    theta_label = np.rad2deg(theta[0])\n    if r_label > 10:\n        ax.text(0, 0, '{}'.format(r_label),\n                rotation=theta_label,\n                horizontalalignment='left',\n                verticalalignment", "compilation_passed": false, "time": 0.00026416778564453125, "tests_passed": false, "error": "SyntaxError"}
{"code": "random.seed(0)\n\n    # Generate random data points\n    r = np.random.rand(100)\n    theta = 2 * np.pi * np.random.rand(100)\n\n    # Select a random color from the COLORS list\n    color = random.choice(COLORS)\n\n    # Set random position for the radial labels\n    x = np.random.rand(10)\n    y = np.random.rand(10)\n\n    # Plot the sine wave\n    ax.plot(theta, r, color=color)\n    ax.set_yticks(y)\n    ax.set_yticklabels(['$r_%d' % i for i in range(10)])\n    ax.set_rmax(1)\n    ax.set_rlabel_position(-60)\n\n    return color", "compilation_passed": true, "time": 0.022300243377685547, "tests_passed": true, "error": null}
{"code": "# Generate a random position for the radial labels\n    r = np.random.rand(1)\n    t = np.random.rand(1)\n    color = random.choice(COLORS)\n    ax.plot(t, r, color=color)\n    ax.set_rmax(1)\n    ax.set_thetamin(0.0)\n    ax.set_thetamax(2 * np.pi)\n    ax.set_rgrids([0.1, 0.2, 0.5, 1])\n    ax.grid(True)\n    return color", "compilation_passed": true, "time": 0.052942752838134766, "tests_passed": true, "error": null}
{"code": "# Generate random x values\n    theta = random.random() * 2 * np.pi\n    x = np.linspace(0, 20, 200)\n    y = np.sin(x * theta)\n\n    # Select a random color from the COLORS list\n    color = random.choice(COLORS)\n\n    # Plot the sine wave\n    ax.plot(x, y, color=color, lw=2)\n\n    # Set a random position for the radial labels\n    label_pos = random.random() * 360\n    ax.set_theta_offset(label_pos)\n\n    return color", "compilation_passed": true, "time": 0.03589200973510742, "tests_passed": true, "error": null}
{"code": "np.random.seed(random.random())\n\n    # Randomly select a color and random position\n    color = random.choice(COLORS)\n    x = np.linspace(0, 10, 100)\n    y = np.sin(x)\n\n    # Draw the function\n    ax.plot(x, y, color=color)\n    return color", "compilation_passed": true, "time": 0.00865626335144043, "tests_passed": false, "error": "TypeError"}
{"code": "# Get random position for the radial labels\n    theta = random.uniform(0, 2 * np.pi, 50)\n    r = 3 * (np.random.rand(50) - 0.5) + 2\n    # Select random color\n    color = random.choice(COLORS)\n    # Plot function\n    ax.fill(theta, r, color=color, lw=0, alpha=0.7)\n    # Return color code\n    return color", "compilation_passed": true, "time": 0.0075168609619140625, "tests_passed": false, "error": "TypeError"}
{"code": "# generate a random sine wave function\n    t = np.linspace(0, np.pi*2, 1000)\n    x = t * np.sin(t)\n    y = t * np.cos(t)\n\n    # choose a random color\n    color = COLORS[random.randint(0, 6)]\n\n    # set a random position for the radial labels\n    radial_labels_pos = np.pi + np.random.uniform(-np.pi/2, np.pi/2, len(t))\n\n    # plot the function\n    ax.plot(t, x, color)\n    ax.plot(t, y, color)\n    ax.grid(True)\n    ax.set_yticklabels([])\n    ax.set_xticklabels([])\n    ax.grid(True)\n    ax.set_xticks(np.linspace(0, np.pi, 5), rotation=45)\n    ax.set_yticks(np.arange(0, np.pi*2+1, np.pi/4),", "compilation_passed": false, "time": 0.0002551078796386719, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Generate random position for radial labels\n    theta = np.random.uniform(0, 2*np.pi, 100)\n    r = np.random.uniform(0, 1, 100)\n    # Plot sine wave function\n    ax.plot(theta, r, color=COLORS[random.randint(0, 6)])\n    # Set radial labels\n    ax.set_rlabel_position(-15)\n    # Return color code of plotted function\n    return COLORS[random.randint(0, 6)]", "compilation_passed": true, "time": 0.007627010345458984, "tests_passed": false, "error": "StopIteration"}
{"code": "if 'np' not in locals():\n        raise ImportError(\"numpy not installed\")\n    if 'random' not in locals():\n        raise ImportError(\"random not installed\")\n    color = random.choice(COLORS)\n    radius = 1.0\n    theta = np.linspace(0, np.pi, 100)\n    y = radius*np.sin(theta)\n    ax.plot(theta, y, color, linewidth=2, linestyle='-', label=\"random\")\n    # ax.plot(theta, radius*np.sin(theta), 'r')\n    # ax.set_title('pylab.axes.Axes.plot demo')\n    # ax.set_rmax(1.0)\n    # ax.set_rticks([0, 0.5, 1])\n    # ax.grid(True)\n    ax.set_yticklabels(\"\")\n    ax.set_xticklabels(\"\")\n    ax.grid(color='black', linestyle='--', linewidth=0.5, alpha=", "compilation_passed": false, "time": 0.00022292137145996094, "tests_passed": false, "error": "SyntaxError"}
{"code": "color = random.choice(COLORS)\n    center = random.randint(1, 1000), random.randint(1, 1000)\n    r = random.randint(1, 1000)\n    phi = np.linspace(0, 2 * np.pi, 1000, endpoint=True)\n    theta = np.linspace(0, 2 * np.pi, 1000, endpoint=True)\n    # x = r * np.cos(phi)\n    # y = r * np.sin(phi)\n    # ax.plot(x, y)\n    ax.scatter(theta, phi, s=100, c=color)\n    return color", "compilation_passed": true, "time": 0.007564067840576172, "tests_passed": false, "error": "StopIteration"}
{"code": "x = np.linspace(0, 10, 100)\n    y = np.sin(x)\n\n    ax.plot(x, y, color=random.choice(COLORS))\n    ax.set_xticks([0, 2, 4, 6, 8, 10])\n    ax.set_xticklabels(['0', '2', '4', '6', '8', '10'])\n\n    ax.grid(True, color='gray', alpha=0.2, linewidth=0.3, linestyle='--')\n\n    return random.choice(COLORS)", "compilation_passed": true, "time": 0.03998994827270508, "tests_passed": true, "error": null}
{"code": "# Create a random sine function\n    t = np.linspace(0, 2 * np.pi, 200)\n    y = np.sin(t)\n\n    # Select a random color\n    color = random.choice(COLORS)\n\n    # Select a random position for labels\n    start_angle = np.random.randint(0, 360)\n    angle_step = np.random.randint(1, 360)\n\n    # Plot the sine function with a random color and radial labels\n    ax.plot(t, y, color, label='random')\n    ax.set_rmax(1.5)\n    ax.set_theta_start(start_angle)\n    ax.set_theta_delta(angle_step)\n\n    return color", "compilation_passed": true, "time": 0.008622169494628906, "tests_passed": false, "error": "AttributeError"}
{"code": "color = random.choice(COLORS)\n    n = int(1000 * random.random())\n    theta = 2 * np.pi * random.random()\n    ax.fill(\n        np.append([theta + np.pi / 2], np.append(np.linspace(theta + np.pi, 2 * np.pi, n), [theta])),\n        np.append([1 + np.pi * np.sin(n)], np.append(np.linspace(1, np.pi, n), [np.pi])),\n        color=color)\n    return color", "compilation_passed": true, "time": 0.032900094985961914, "tests_passed": true, "error": null}
{"code": "random_x = np.linspace(0, 2 * np.pi, 100)\n    y_rand_func = np.random.random()\n    ax.plot(random_x, y_rand_func * np.sin(random_x))\n    ax.set_xticklabels([str(i + 1) for i in range(6)])\n    ax.set_yticks(np.arange(0, 1.01, 0.1))\n    color = random.choice(COLORS)\n    return color", "compilation_passed": true, "time": 0.05219602584838867, "tests_passed": true, "error": null}
{"code": "# Select a random color\n    color = random.choice(COLORS)\n\n    # Select a random radius, theta, and angle in [0, 2pi)\n    r = random.uniform(0, 1.0)\n    theta = random.uniform(0, 2*np.pi)\n    angle = theta / (2*np.pi) * 360\n\n    # Plot the sine function\n    ax.plot(r, theta, color, linewidth=1, zorder=0)\n    ax.text(r, theta, '%s' % angle, ha='center', va='center', fontsize=12, color='k', zorder=1)\n\n    # Return the color as a string\n    return color", "compilation_passed": true, "time": 0.026813030242919922, "tests_passed": true, "error": null}
{"code": "# Generate a random x axis between -1 and 1 and a random y value between -1 and 1\n    x_axis = np.linspace(-1, 1, 1000)\n    y_value = random.uniform(-1, 1)\n\n    # Set the color and radius of the plotted point\n    color = random.choice(COLORS)\n    radius = y_value ** 2\n\n    # Set the color and position of the radial labels\n    alpha = random.uniform(-0.5, 0.5)\n    position = (x_axis, -radius + alpha)\n\n    # Plot the point and radial labels on the ax\n    ax.plot(x_axis, y_value, color, linewidth=3, label='label')\n    ax.plot(position, label='label')\n\n    # Return the color as a string\n    return color", "compilation_passed": true, "time": 0.007567167282104492, "tests_passed": false, "error": "ValueError"}
{"code": "# Generate a random angle for the sine function\n    angle = np.random.uniform(0, 2*np.pi)\n    # Generate a random amplitude for the sine function\n    amplitude = np.random.uniform(0.2, 1.4)\n    # Generate a random period for the sine function\n    period = np.random.uniform(1.8, 2.2)\n    # Generate a random frequency for the sine function\n    frequency = np.random.uniform(0.003, 0.012)\n    # Generate a random phase shift for the sine function\n    phase_shift = np.random.uniform(0, 0.4)\n    # Generate a random noise term for the sine function\n    noise = np.random.normal(0, 0.01)\n    # Generate a random position for radial labels\n    label_position = np.random.uniform(0, 1)\n    # Plot the sine function\n    ax.plot(angle, amplitude*np.sin(angle*(1/frequency) + phase_shift) + noise, color=np", "compilation_passed": false, "time": 0.0001971721649169922, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Set random seed to get reproducible results\n    random.seed(0)\n\n    # Generate random sine wave function\n    x = np.linspace(0, 2 * np.pi, 256)\n    y = np.sin(x)\n\n    # Select a color from a predefined list\n    color = random.choice(COLORS)\n\n    # Plot the function\n    ax.plot(x, y, color=color, label='sin(x)')\n    ax.set_title(f'color = {color}')\n    ax.grid(True)\n\n    return color", "compilation_passed": true, "time": 0.03730916976928711, "tests_passed": true, "error": null}
{"code": "# Get a color from the list of colors\n    color = random.choice(COLORS)\n    # Get a random position for the radial labels\n    theta = random.randint(0, 360)\n    # Generate the sine function and plot it on the plot\n    y = np.sin(2 * np.pi * 1.5 * np.linspace(0, 2, 100))\n    ax.fill(y, np.ones(len(y)), color=color)\n    # Set the radial labels position\n    ax.set_theta_zero_location('N')\n    ax.set_theta_direction(-1)\n    ax.set_thetagrid(np.arange(0, 360, 15), color=color)\n    ax.set_rmax(1)\n    return color", "compilation_passed": true, "time": 0.007302999496459961, "tests_passed": false, "error": "StopIteration"}
{"code": "color = COLORS[random.randrange(len(COLORS))]\n    angle_deg = random.randint(1, 360)\n    value = random.randint(-10000, 10000)\n    ax.plot([angle_deg], [value], color=color)\n    ax.set_xticklabels([f\"{angle_deg}\u00b0\"])\n    return color", "compilation_passed": true, "time": 0.008060216903686523, "tests_passed": false, "error": "StopIteration"}
{"code": "color = random.choice(COLORS)\n    np.random.seed(random.randint(0, 1000))\n\n    # Define the data points\n    t = np.linspace(0, 2 * np.pi, 1000)\n    y = np.sin(t)\n    ax.plot(t, y, color, alpha=0.5, linewidth=2.0)\n    ax.set(xlim=(0, 2 * np.pi), ylim=(-1.5, 1.5),\n           polar=True, title='Task 4 - Random plot')\n    ax.grid(True)\n\n    # Generate radial labels\n    _, r_max = ax.get_rmaxr()\n    r_radial = r_max * 0.15\n    for i in range(10):\n        r = r_radial + 0.10 * r_max * i / 10\n        theta = i * 2 * np.pi / 10\n        ax.text(theta, r, i, color='k", "compilation_passed": false, "time": 0.00011324882507324219, "tests_passed": false, "error": "SyntaxError"}
{"code": "color = random.choice(COLORS)\n    rad = random.randint(1, 100)\n    phi = random.randint(10, 360)\n    ax.scatter(\n        rad * np.sin(phi / 180 * np.pi),\n        rad * np.cos(phi / 180 * np.pi),\n        color=color,\n        marker='s',\n        s=1000\n    )\n    return color", "compilation_passed": true, "time": 0.007319211959838867, "tests_passed": false, "error": "StopIteration"}
{"code": "np.random.seed(random.random())\n    r = (10 ** (np.random.rand() * 10)) * np.linspace(1, 5, 200)\n    theta = np.linspace(0, 2 * np.pi, 200)\n    ax.plot(r * np.sin(theta), r * np.cos(theta), color=random.choice(COLORS))\n    ax.set_rmax(10)\n    ax.set_thetagrid(np.arange(0, 360, 45) + 45)\n    ax.set_xticks([1, 4, 7])\n    ax.set_xticklabels([\"1\", \"4\", \"7\"])\n    return random.choice(COLORS)", "compilation_passed": true, "time": 0.007325172424316406, "tests_passed": false, "error": "TypeError"}
{"code": "x = np.linspace(0, np.pi * 2, 1000)\n    y = np.random.random((x.size,)) * 100000 + np.sin(x)\n    ax.plot(x, y, c='C0', linewidth=3)\n\n    # randomly selects a color from a predefined list\n    color = random.choice(COLORS)\n    ax.set_rlabel_position(random.randint(15, 45))  # set radial labels position\n    ax.set_thetagrids([0, 60, 120, 180, 240, 300])  # add polar labels\n    return color", "compilation_passed": true, "time": 0.007515907287597656, "tests_passed": false, "error": "StopIteration"}
{"code": "random.seed(0)  # Fix seed for reproducible results\n    x = np.linspace(0, 2 * np.pi, 256, endpoint=True)\n    y = np.random.randn(len(x))\n    color = random.choice(COLORS)\n    ax.plot(x, y, color=color, label=\"sin\")\n    ax.grid(color=color)\n    return color", "compilation_passed": true, "time": 0.0365450382232666, "tests_passed": true, "error": null}
{"code": "n = np.linspace(0, 2 * np.pi, 200)\n    ax.plot(n, np.sin(n), lw=5, color=COLORS[random.randrange(0, 7)])\n    return color", "compilation_passed": true, "time": 0.008119821548461914, "tests_passed": false, "error": "NameError"}
{"code": "# Select random color and set random position for radial labels\n    color = random.choice(COLORS)\n    center = (np.random.uniform(0, 2 * np.pi), np.random.uniform(0, 2))\n    radius = np.random.uniform(0.5, 2)\n    theta = np.linspace(0, 2 * np.pi, 200)\n    ax.plot(theta, radius * np.sin(theta), color=color, label=color)\n    ax.set(\n        xticklabels=[],\n        yticklabels=[],\n        xlabel=r'$x$',\n        ylabel=r'$y$',\n        title=r'$y=sin(x)\\,(2\\pi~)\\text{rad}$')\n    ax.grid()\n    ax.set_polar(True)\n    ax.legend()\n    ax.set(rgrids=[r'$\\frac{1}{4\\pi}$', r'$\\frac{1}{2\\pi}$'])\n    ax.set_aspect('equal', adjustable='box')\n", "compilation_passed": true, "time": 0.015130043029785156, "tests_passed": false, "error": "AttributeError"}
{"code": "r = np.random.random()\n    theta = 2*np.pi*np.random.random()\n    ax.plot(np.zeros(2), np.array([r, r]), 'o-', color=COLORS[random.randint(0, 6)], ms=6)\n    return COLORS[random.randint(0, 6)]", "compilation_passed": true, "time": 0.007639884948730469, "tests_passed": false, "error": "StopIteration"}
{"code": "# Select a random color from the list\n    color = random.choice(COLORS)\n\n    # Select a random angle for the sine function\n    theta = random.uniform(0, 2 * np.pi)\n\n    # Select a random amplitude and period for the sine function\n    amp = random.uniform(0.1, 5)\n    period = random.uniform(10, 50)\n\n    # Calculate the x and y values of the sine function\n    x = np.arange(0, 1000, 0.1)\n    y = amp * np.sin(2 * np.pi * x / period + theta)\n\n    # Plot the sine function on the ax\n    ax.plot(x, y, color=color)\n\n    # Set the labels for the radial lines\n    r = [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 1", "compilation_passed": false, "time": 0.00020503997802734375, "tests_passed": false, "error": "SyntaxError"}
{"code": "color = random.choice(COLORS)\n    theta = np.arange(0, np.pi * 2, 0.001)\n    r = np.sin(theta)\n\n    # Randomly select a position for labels\n    radial_label_position = np.pi * (0.5 + random.random())\n    ax.set_rlabel_position(radial_label_position)\n    ax.set_rgridlines(np.arange(0, 2 * np.pi, np.pi / 2))\n\n    # Plot the function\n    ax.plot(theta, r, color)\n    return color", "compilation_passed": true, "time": 0.009434223175048828, "tests_passed": false, "error": "AttributeError"}
