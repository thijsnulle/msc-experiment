{"code": "try:\n        items = dict()\n        for item in Path(dir_path).iterdir():\n            if item.name in items:\n                raise ValueError(f\"Item {item.name} appears more than once.\")\n            else:\n                items[item.name] = dict()\n            for predicate in predicates:\n                if predicate == 'is_file':\n                    if item.is_file():\n                        items[item.name][predicate] = True\n                    else:\n                        items[item.name][predicate] = False\n                elif predicate == 'is_dir':\n                    if item.is_dir():\n                        items[item.name][predicate] = True\n                    else:\n                        items[item.name][predicate] = False\n                elif predicate == 'has_special_chars':\n                    if re.search(r'[^a-zA-Z0-9_]', item.name):\n                        items[item.name][predicate] = True\n                    else:\n                        items[item.name][predicate] = False", "compilation_passed": false, "time": 0.0002880096435546875, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not predicates:\n        raise ValueError(\"Invalid predicates.\")\n\n    if not os.path.isdir(dir_path):\n        raise FileNotFoundError(f\"{dir_path} is not a valid directory\")\n\n    result = {}\n    for item in Path(dir_path).iterdir():\n        if os.path.isfile(item):\n            # check for file extension\n            ext = item.suffix.lstrip(\".\").lower()\n            if ext not in ['py', 'js', 'html', 'txt', 'md', 'txt', 'doc']:\n                continue\n        elif os.path.isdir(item):\n            # check for sub directory name containing non-alphanumeric characters or numbers\n            sub_dir_name = os.path.basename(item)\n            if not re.match(r\"[\\w\\d]+\", sub_dir_name):\n                continue\n\n        name = os.path.basename(item).lower()\n        for p in predicates:\n            if p == \"is_", "compilation_passed": false, "time": 0.00011682510375976562, "tests_passed": false, "error": "SyntaxError"}
{"code": "# check if a valid list of conditions was provided\n    if not predicates:\n        raise ValueError(\"No valid predicates were provided. Please provide a list of conditions.\")\n\n    # check if the specified directory exists and is a directory\n    if not os.path.isdir(dir_path):\n        raise FileNotFoundError(\"The specified directory does not exist.\")\n\n    # initialize a dictionary to hold results for each file or folder in the directory\n    results = {}\n\n    # get the path to the directory\n    dir_path = Path(dir_path)\n\n    # loop through each item in the directory\n    for item in os.listdir(dir_path):\n        # check if the item is a file\n        item_path = os.path.join(dir_path, item)\n        if os.path.isfile(item_path):\n            results[item] = {}\n            for predicate in predicates:\n                # check if the condition matches an existing valid condition\n                if predicate == \"is_file\":\n                    results[item][\"is_file\"] = True\n                elif predicate ==", "compilation_passed": false, "time": 0.00023508071899414062, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not predicates:\n        raise ValueError(\"predicates must be provided as a list of strings\")\n\n    if not os.path.exists(dir_path):\n        raise FileNotFoundError(f\"{dir_path} does not exist\")\n    if not os.path.isdir(dir_path):\n        raise FileNotFoundError(f\"{dir_path} is not a directory\")\n\n    items = os.listdir(dir_path)\n    results = {}\n\n    for item in items:\n        results[item] = {}\n        for predicate in predicates:\n            if predicate == \"is_file\":\n                results[item][predicate] = os.path.isfile(os.path.join(dir_path, item))\n            elif predicate == \"is_dir\":\n                results[item][predicate] = os.path.isdir(os.path.join(dir_path, item))\n            elif predicate == \"has_special_chars\":\n                if item.lower() == \"special_chars\":\n                    continue\n                else:\n                    results[item][predicate", "compilation_passed": false, "time": 0.00028204917907714844, "tests_passed": false, "error": "SyntaxError"}
{"code": "try:\n        if not isinstance(dir_path, str):\n            raise TypeError(\"dir_path must be a string\")\n        if not isinstance(predicates, list) or len(predicates) < 1:\n            raise ValueError(\"Invalid predicates, must be a list of at least one string\")\n    except TypeError as e:\n        print(e)\n        return None\n    except ValueError as e:\n        print(e)\n        return None\n\n    # Remove invalid predicates from the list.\n    valid_predicates = []\n    for predicate in predicates:\n        if re.search(r\"^(is_)?(file|dir)?$\", predicate):\n            valid_predicates.append(predicate)\n\n    if not valid_predicates:\n        raise ValueError(\"Invalid predicates, must contain 'is_file' or 'is_dir'\")\n    elif len(valid_predicates) == 1 and valid_predicates[0] == \"is_file\":\n        raise ValueError(\"Invalid predicates, must contain 'is_file' or", "compilation_passed": false, "time": 0.00010704994201660156, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not predicates:\n        raise ValueError(\"predicates list must contain at least 1 valid condition\")\n    if not Path(dir_path).is_dir():\n        raise FileNotFoundError(f\"{dir_path} is not a valid directory.\")\n\n    items: dict = {}\n    for file in os.scandir(dir_path):\n        if file.is_file() and file.name.lower() in predicates:\n            items[file.name] = {}\n            for predicate in predicates:\n                if predicate in [\"is_file\", \"has_special_chars\", \"has_numbers\"]:\n                    items[file.name][predicate] = getattr(file, predicate.replace(\"_\", \"\"))()\n                elif predicate in [\"is_dir\", \"is_file_or_dir\", \"is_empty_dir\"]:\n                    items[file.name][predicate] = getattr(file, predicate.replace(\"_\", \"\"))()\n                elif predicate in [\"has_ext\", \"has_file_", "compilation_passed": false, "time": 0.00010395050048828125, "tests_passed": false, "error": "SyntaxError"}
{"code": "if len(predicates) < 1:\n        raise ValueError(\"No predicates provided.\")\n\n    # convert predicates to set for faster lookup\n    predicates = set(predicates)\n    result = {}\n\n    for item in os.listdir(dir_path):\n        # check for valid conditions\n        valid_conditions = {condition for condition in predicates if condition in valid_conditions}\n\n        item_path = os.path.join(dir_path, item)\n        item_path_str = str(item_path)\n        is_file = os.path.isfile(item_path)\n        is_dir = os.path.isdir(item_path)\n        has_special_chars = not re.match(r\"[a-zA-Z0-9_]\", item)\n        has_numbers = re.search(r\"\\d+\", item) is not None\n\n        if is_file:\n            result[item_path_str] = {'is_file': True}\n\n        if is_dir:\n            result[item_path_str]", "compilation_passed": true, "time": 0.002215862274169922, "tests_passed": false, "error": "NameError"}
{"code": "dir_path = Path(dir_path)\n    if not dir_path.is_dir():\n        raise FileNotFoundError(f\"{dir_path.name} is not a directory\")\n\n    evaluated_items = {}\n    for item in dir_path.iterdir():\n        item_name = item.name\n        if item.is_file() and any(predicate in item_name for predicate in predicates):\n            evaluated_items[item_name] = {}\n            for predicate in predicates:\n                if predicate == \"is_file\":\n                    evaluated_items[item_name][\"is_file\"] = True\n                elif predicate == \"is_dir\":\n                    evaluated_items[item_name][\"is_dir\"] = False\n                elif predicate == \"has_special_chars\":\n                    evaluated_items[item_name][\"has_special_chars\"] = bool(re.search(r'\\W', item_name))\n                elif predicate == \"has_numbers\":\n                    evaluated_items[item_name][\"has_numbers\"] =", "compilation_passed": false, "time": 0.00026106834411621094, "tests_passed": false, "error": "SyntaxError"}
{"code": "result = {}\n\n    # Check that there are predicates\n    if not predicates:\n        raise ValueError('Please provide at least one predicate.')\n\n    for predicate in predicates:\n\n        # Check if predicate is supported\n        if predicate not in SUPPORTED_PREDICATES:\n            raise ValueError(f\"Predicate '{predicate}' is not supported. Supported predicates: {SUPPORTED_PREDICATES}\")\n\n        # Check if directory exists\n        if not os.path.isdir(dir_path):\n            raise FileNotFoundError(f\"Directory '{dir_path}' does not exist or is not a directory.\")\n\n        for item in os.listdir(dir_path):\n\n            # Check if item is file or directory\n            file_or_dir = item if os.path.isfile(os.path.join(dir_path, item)) else item + '/'\n\n            if predicate in ['is_file', 'is_dir']:\n                # Get file or directory name\n                name = item if predicate == 'is_file' else item.rstrip", "compilation_passed": true, "time": 0.001993894577026367, "tests_passed": false, "error": "NameError"}
{"code": "if len(predicates) == 0:\n        raise ValueError(\"No valid predicates provided.\")\n\n    if not os.path.isdir(dir_path):\n        raise FileNotFoundError(\"Directory not found.\")\n\n    dir_path = Path(dir_path).resolve()\n\n    dir_contents = {}\n    for item in dir_path.iterdir():\n        if item.is_dir():\n            dir_contents[item.name] = {\n                'is_dir': True,\n                'has_numbers': has_numbers(item.name),\n                'has_special_chars': has_special_chars(item.name),\n            }\n        elif item.is_file():\n            dir_contents[item.name] = {\n                'is_file': True,\n                'has_numbers': has_numbers(item.name),\n                'has_special_chars': has_special_chars(item.name),\n            }\n        else:\n            continue\n\n    return dir_contents", "compilation_passed": true, "time": 0.002180814743041992, "tests_passed": false, "error": "NameError"}
{"code": "if predicates:\n        # Ensure the directory exists\n        try:\n            dir_path = Path(dir_path).resolve().as_posix()\n        except FileNotFoundError as e:\n            raise FileNotFoundError(f\"Directory does not exist: {dir_path}\") from e\n        if not os.path.isdir(dir_path):\n            raise FileNotFoundError(f\"'{dir_path}' is not a valid directory.\")\n\n        # Define valid predicate names\n        valid_predicates = {\n            \"is_file\",\n            \"is_dir\",\n            \"has_special_chars\",\n            \"has_numbers\",\n        }\n\n        # Validate and parse the predicates\n        if not (predicates := list(filter(None, map(lambda x: x.lower(), predicates)))):\n            raise ValueError(\"No valid predicates provided.\")\n        for predicate in predicates:\n            if predicate not in valid_predicates:\n                raise ValueError(f\"Predicate '{predicate}' is invalid.\")\n\n        # Create", "compilation_passed": true, "time": 0.0021009445190429688, "tests_passed": false, "error": "TypeError"}
{"code": "if not predicates:\n        raise ValueError(\"No predicates provided\")\n\n    try:\n        dir_path = Path(dir_path)\n        if not dir_path.is_dir():\n            raise FileNotFoundError(dir_path.as_posix())\n    except FileNotFoundError as e:\n        raise FileNotFoundError(f\"No such file or directory: {e}\")\n\n    predicates = set(predicates)\n\n    predicates_dict = dict.fromkeys(dir_path.iterdir(), {})\n\n    for predicate in predicates:\n        if predicate not in [\"is_file\", \"is_dir\", \"has_numbers\", \"has_special_chars\"]:\n            continue\n\n        if predicate == \"is_file\":\n            predicates_dict = {\n                **predicates_dict,\n                **{file: {\"is_file\": file.is_file()} for file in dir_path.iterdir()},\n            }\n            continue\n\n        if predicate == \"is_dir\":\n            predicates_dict = {\n                **predicates", "compilation_passed": false, "time": 0.0002810955047607422, "tests_passed": false, "error": "SyntaxError"}
{"code": "results = {}\n    dir_path = Path(dir_path).resolve()\n    if not os.path.isdir(dir_path):\n        raise FileNotFoundError\n\n    # Check if predicates are valid.\n    for predicate in predicates:\n        if predicate not in {\"is_file\", \"is_dir\", \"has_special_chars\", \"has_numbers\"}:\n            raise ValueError\n\n    for item in dir_path.iterdir():\n        item_name = item.name\n        if item.is_file():\n            results[item_name] = {\n                \"is_file\": True,\n                \"has_special_chars\": not re.match(r\"^[a-zA-Z0-9_]*$\", item_name),\n                \"has_numbers\": any(char.isdigit() for char in item_name),\n            }\n        else:\n            results[item_name] = {\n                \"is_file\": False,\n                \"has_special_chars\": not re.match(r\"^[a-zA-Z0", "compilation_passed": false, "time": 0.00011014938354492188, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not predicates:\n        raise ValueError(\"At least one predicate must be provided.\")\n\n    try:\n        dir_path = Path(dir_path).resolve()\n    except FileNotFoundError:\n        raise FileNotFoundError(f\"The specified directory {dir_path} does not exist.\")\n    if not dir_path.is_dir():\n        raise FileNotFoundError(f\"{dir_path} is not a directory.\")\n\n    files = []\n    for item in os.listdir(dir_path):\n        item_path = Path(dir_path) / item\n        if item_path.is_file():\n            files.append(item)\n\n    items_dict = {}\n    for filename in files:\n        items_dict[filename] = {}\n\n    for filename in files:\n        file_path = Path(dir_path) / filename\n        file_name, file_ext = os.path.splitext(filename)\n        for predicate in predicates:\n            if predicate == \"is_file\":\n                if items_dict[filename].get(pred", "compilation_passed": false, "time": 0.00028324127197265625, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not predicates:\n        raise ValueError(\"No predicates provided.\")\n    dir_path = Path(dir_path)\n    if not dir_path.exists() or not dir_path.is_dir():\n        raise FileNotFoundError(f\"'{dir_path}' is not a valid directory.\")\n    files_with_special_chars = []\n    files_with_numbers = []\n    files_with_digits = []\n\n    for item in os.listdir(dir_path):\n        if re.search(r\"[^a-z0-9_]\", item, re.I):\n            files_with_special_chars.append(item)\n        if re.search(r\"\\d+\", item):\n            files_with_numbers.append(item)\n        else:\n            files_with_digits.append(item)\n\n    return {\n        item: {\n            \"is_file\": os.path.isfile(os.path.join(dir_path, item)),\n            \"is_dir\": os.path.isdir(os.", "compilation_passed": false, "time": 0.0002472400665283203, "tests_passed": false, "error": "SyntaxError"}
{"code": "results = {}\n    if not predicates:\n        raise ValueError('Predicates must be provided')\n\n    path = Path(dir_path)\n    if not path.exists():\n        raise FileNotFoundError(f'Directory \"{dir_path}\" does not exist')\n    if not path.is_dir():\n        raise FileNotFoundError(f'Directory \"{dir_path}\" is not a directory')\n\n    for item in path.iterdir():\n        item_name = item.name\n        item_path = item.resolve()\n        if item.is_file():\n            results[item_name] = _evaluate_file_name(item_name, predicates)\n        else:\n            results[item_name] = _evaluate_directory_name(item_path, predicates)\n\n    return results", "compilation_passed": true, "time": 0.0021581649780273438, "tests_passed": false, "error": "NameError"}
{"code": "result = dict()\n\n    if not dir_path or not isinstance(dir_path, str) or not dir_path.strip():\n        raise ValueError(\"'dir_path' must be a non-empty string.\")\n\n    if not predicates or not isinstance(predicates, list) or not all([isinstance(i, str) for i in predicates]):\n        raise ValueError(\"'predicates' must be a list of strings.\")\n\n    dir_path = Path(dir_path)\n    if not dir_path.exists() or not dir_path.is_dir():\n        raise FileNotFoundError(\"Directory does not exist or is not a directory.\")\n\n    for item in dir_path.iterdir():\n        if item.is_file():\n            result[item.name] = {}\n            for predicate in predicates:\n                result[item.name][predicate] = hasattr(item, predicate)\n        elif item.is_dir():\n            result[item.name] = {}\n            for predicate in predicates:\n                result[item.name][predicate]", "compilation_passed": true, "time": 0.0020308494567871094, "tests_passed": false, "error": "TypeError"}
{"code": "result = {}\n\n    dir_path = str(Path(dir_path).resolve())\n    if not os.path.isdir(dir_path):\n        raise FileNotFoundError(f\"Directory {dir_path} does not exist or is not a directory.\")\n\n    for item_path in Path(dir_path).iterdir():\n        if item_path.is_file():\n            result[item_path.name] = {}\n            for predicate in predicates:\n                result[item_path.name][predicate] = eval(f\"item_path.name.{predicate}\")\n        elif item_path.is_dir():\n            result[item_path.name] = {}\n            for predicate in predicates:\n                result[item_path.name][predicate] = eval(f\"item_path.name.{predicate}\")\n\n    return result", "compilation_passed": true, "time": 0.0020532608032226562, "tests_passed": false, "error": "AttributeError"}
{"code": "if not predicates:\n        raise ValueError('No valid predicates provided.')\n\n    items_by_name = {\n        item.name: {'is_file': item.is_file(), 'is_dir': item.is_dir()} for item in Path(dir_path).iterdir()\n    }\n    filtered_items_by_name = {\n        name: items\n        for name, items in items_by_name.items()\n        if all(pred in items for pred in predicates)\n    }\n    return filtered_items_by_name", "compilation_passed": true, "time": 0.0019419193267822266, "tests_passed": true, "error": null}
{"code": "if not predicates:\n        raise ValueError('No predicates specified. Please provide at least one predicate.')\n\n    valid_predicates = {\n        'is_file': lambda x: os.path.isfile(x),\n        'is_dir': lambda x: os.path.isdir(x),\n        'has_special_chars': lambda x: re.search(r'[^a-zA-Z0-9_]', x) is not None,\n        'has_numbers': lambda x: re.search(r'\\d', x) is not None,\n    }\n\n    results = {}\n    dir_path = Path(dir_path)\n    if not dir_path.exists():\n        raise FileNotFoundError('The specified directory does not exist.')\n    if not dir_path.is_dir():\n        raise FileNotFoundError('The specified path is not a directory.')\n\n    for item in os.listdir(dir_path):\n        full_path = dir_path / item\n        for predicate in predicates:\n            if predicate in valid_predicates:\n", "compilation_passed": false, "time": 0.0002601146697998047, "tests_passed": false, "error": "IndentationError"}
{"code": "# Check if dir_path exists and is a directory.\n    dir_path = Path(dir_path)\n    if not os.path.isdir(dir_path):\n        raise FileNotFoundError(f\"Directory '{dir_path}' does not exist or is not a directory.\")\n    # Check if predicates are provided.\n    if not predicates:\n        raise ValueError(\"No predicates provided.\")\n    # Create empty results dictionary to store results.\n    results = {}\n    # Iterate through files and directories in the directory.\n    for item in dir_path.iterdir():\n        # Check if item is a file.\n        is_file = item.is_file()\n        # Check if item is a directory.\n        is_dir = item.is_dir()\n        # Check if item name contains special characters.\n        has_special_chars = re.search(r\"\\W\", item.name) is not None\n        # Check if item name contains numbers.\n        has_numbers = re.search(r\"\\d\", item.name) is not None\n        # Check if", "compilation_passed": true, "time": 0.002103090286254883, "tests_passed": false, "error": "TypeError"}
{"code": "# check arguments\n    if not (predicates is not None) or len(predicates) == 0:\n        raise ValueError(\"Please specify at least one condition.\")\n\n    results = {}\n    dir_path = Path(dir_path).resolve()\n    if not dir_path.is_dir():\n        raise FileNotFoundError(\"Specified path is not a directory.\")\n\n    # evaluate items\n    for item in dir_path.iterdir():\n        if item.is_file():\n            is_file = True\n            has_numbers = bool(re.search(r'\\d', item.name))\n        else:\n            is_file = False\n            has_numbers = False\n        is_dir = True\n        has_special_chars = False\n        for predicate in predicates:\n            if predicate == \"is_file\":\n                if is_file:\n                    continue\n                else:\n                    is_dir = False\n                    break\n            elif predicate == \"is_dir\":\n                if is_dir:\n                    continue\n                else:\n                    is_file", "compilation_passed": true, "time": 0.0020639896392822266, "tests_passed": false, "error": "TypeError"}
{"code": "if not predicates:\n        raise ValueError('Invalid predicates provided. Please provide at least one condition.')\n\n    def is_valid_condition(condition: str):\n        return condition in ('is_file', 'is_dir', 'has_special_chars', 'has_numbers')\n\n    def condition_result(condition: str, value: bool):\n        return {condition: value}\n\n    dir_path = Path(dir_path)\n    if not dir_path.exists():\n        raise FileNotFoundError('Directory does not exist')\n    if not dir_path.is_dir():\n        raise FileNotFoundError('Not a directory')\n\n    predicates = [pred for pred in predicates if is_valid_condition(pred)]\n\n    items = {\n        dir_path.name: condition_result(dir_path.is_dir(), True)\n        if dir_path.is_dir()\n        else condition_result(dir_path.is_file(), True)\n        if dir_path.is_file()\n        else condition_result(\n            re.search(r'", "compilation_passed": false, "time": 0.00011396408081054688, "tests_passed": false, "error": "SyntaxError"}
{"code": "if len(predicates) == 0:\n        raise ValueError(\"No predicates specified.\")\n    predicates_dict = {\n        'is_file': os.path.isfile,\n        'is_dir': os.path.isdir,\n        'has_special_chars': re.compile(r\"[^A-Za-z0-9_]\").search,\n        'has_numbers': re.compile(r\"\\d+\").search\n    }\n    dir_path = os.path.abspath(dir_path)\n    if not os.path.exists(dir_path):\n        raise FileNotFoundError(\"Directory not found.\")\n    if not os.path.isdir(dir_path):\n        raise ValueError(\"Path is not a directory.\")\n    predicates = set(predicates)\n    result = {}\n    for item in os.listdir(dir_path):\n        item_path = Path(item).resolve()\n        result[item_path] = {}\n        for predicate in predicates:\n            if predicate in", "compilation_passed": false, "time": 0.0002560615539550781, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not predicates:\n        raise ValueError(\"At least one predicate is required.\")\n    if not Path(dir_path).is_dir():\n        raise FileNotFoundError(f\"{dir_path} is not a directory.\")\n\n    dir_path = Path(dir_path)\n\n    results: dict[str, dict[str, bool]] = {}\n    for path in dir_path.rglob(\"*\"):\n        name = path.name\n        matches: dict[str, bool] = {}\n        for predicate in predicates:\n            if predicate not in SUPPORTED_PREDICATES:\n                continue\n            if predicate == \"is_file\":\n                matches[predicate] = path.is_file()\n            elif predicate == \"is_dir\":\n                matches[predicate] = path.is_dir()\n            elif predicate == \"has_special_chars\":\n                matches[predicate] = re.search(r\"[^a-zA-Z0-9_]\", name) is not None\n            elif predicate == \"has_numbers\":\n                matches[pred", "compilation_passed": false, "time": 0.00027680397033691406, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Check if a list of predicates is provided\n    if not predicates:\n        raise ValueError('No predicates provided.')\n\n    # Check if the directory exists and is a directory\n    try:\n        dir_path = Path(dir_path)\n    except FileNotFoundError:\n        raise FileNotFoundError(f'Directory not found: {dir_path}')\n    if not dir_path.is_dir():\n        raise FileNotFoundError(f'Not a directory: {dir_path}')\n\n    # Initialize variables\n    results = {}\n    for item in dir_path.iterdir():\n        # Check each item against each predicate\n        for pred in predicates:\n            if pred == 'is_file':\n                results[item.name] = {'is_file': item.is_file()}\n            elif pred == 'is_dir':\n                results[item.name] = {'is_dir': item.is_dir()}\n            elif pred == 'has_special_chars':\n                results[item.name] = {'has_special_chars': bool(re.search(r'[^a-z", "compilation_passed": false, "time": 9.799003601074219e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not predicates:\n        raise ValueError(\"You must specify at least one predicate to evaluate\")\n\n    if not Path(dir_path).exists() or not Path(dir_path).is_dir():\n        raise FileNotFoundError(\"Directory not found: %s\" % dir_path)\n\n    dir_contents = {}\n\n    for item in Path(dir_path).iterdir():\n        if item.name in dir_contents:\n            continue\n\n        dir_contents[item.name] = {}\n\n        for predicate in predicates:\n            if predicate == \"is_file\":\n                dir_contents[item.name][predicate] = item.is_file()\n            elif predicate == \"is_dir\":\n                dir_contents[item.name][predicate] = item.is_dir()\n            elif predicate == \"has_special_chars\":\n                dir_contents[item.name][predicate] = not re.match(r\"^[a-zA-Z0-9_]*$\", item.name)\n            elif predicate == \"has_numbers\":\n                dir", "compilation_passed": true, "time": 0.0020508766174316406, "tests_passed": false, "error": "TypeError"}
{"code": "if not predicates:\n        raise ValueError(\"No predicates provided.\")\n\n    if not os.path.isdir(dir_path):\n        raise FileNotFoundError(f\"{dir_path} is not a directory.\")\n\n    result = {}\n\n    for root, dirs, files in os.walk(dir_path):\n        for d in dirs:\n            if any(pred in predicates for pred in ['is_dir', 'has_special_chars']):\n                if not all(char.isalnum() or char.isspace() or char == '_' for char in d):\n                    result[d] = {'is_dir': True, 'has_special_chars': True}\n                else:\n                    result[d] = {'is_dir': True, 'has_special_chars': False}\n\n        for f in files:\n            for p in predicates:\n                if p == 'is_file' and not os.path.isfile(os.path.join(root, f)):\n                    result[f] = {'is_file': True}\n", "compilation_passed": true, "time": 0.002039194107055664, "tests_passed": false, "error": "TypeError"}
{"code": "if not predicates:\n        raise ValueError(\"Predicates list cannot be empty\")\n\n    result = {}\n    if not os.path.isdir(dir_path):\n        raise FileNotFoundError(\"Given path is not a valid directory\")\n\n    for dir_item in Path(dir_path).iterdir():\n        dir_item_path = Path(dir_item.name)\n\n        for predicate in predicates:\n            # Skip any invalid conditions\n            if predicate not in {'is_file', 'is_dir', 'has_numbers', 'has_special_chars'}:\n                continue\n\n            if predicate == 'is_file':\n                result[dir_item_path.name] = {\n                    'is_file': dir_item_path.is_file()\n                }\n\n            elif predicate == 'is_dir':\n                result[dir_item_path.name] = {\n                    'is_dir': dir_item_path.is_dir()\n                }\n\n            elif predicate == 'has_numbers':\n                result[dir_item_path.", "compilation_passed": false, "time": 0.0002460479736328125, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Check if a list of predicates is provided. If not, raise a ValueError.\n    if not predicates:\n        raise ValueError(\"Invalid list of predicates provided.\")\n\n    # Create a Path object for the directory path provided.\n    # Raise a FileNotFoundError if the path does not exist or is not a directory.\n    dir_path = Path(dir_path)\n    if not dir_path.exists():\n        raise FileNotFoundError(f\"The specified directory '{dir_path}' does not exist.\")\n    if not dir_path.is_dir():\n        raise FileNotFoundError(f\"The specified directory '{dir_path}' is not a directory.\")\n\n    # Define a list of supported predicates for conditions.\n    supported_predicates = ['is_file', 'is_dir', 'has_special_chars', 'has_numbers']\n\n    # Create an empty dictionary to store the results of condition checks.\n    results = {}\n\n    # Iterate through the items in the directory and apply the specified predicates to each.\n    for item in os.list", "compilation_passed": false, "time": 0.0001842975616455078, "tests_passed": false, "error": "SyntaxError"}
