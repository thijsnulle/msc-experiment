{"code": "# Check if directory_path is a valid path\n    if not os.path.isdir(directory_path):\n        print(f\"{directory_path} is not a valid path.\")\n        return\n\n    # Create a dictionary to hold counts for each ending\n    summary = {}\n\n    # Create a dictionary to hold file names\n    file_dict = {}\n\n    # Create a new directory \"Invalid\" if it doesn't exist\n    invalid_path = os.path.join(directory_path, 'Invalid')\n    if not os.path.isdir(invalid_path):\n        os.makedirs(invalid_path)\n\n    # Iterate over all files in the directory\n    for filename in os.listdir(directory_path):\n        # Ignore hidden files\n        if filename.startswith('.'):\n            continue\n\n        # Get the file extension\n        ext = os.path.splitext(filename)[1].lower()[1:]\n        if ext not in (\n            'txt',\n            'jpg',\n            'png',\n            'gif',\n            ", "compilation_passed": false, "time": 0.0002110004425048828, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Create the Invalid directory if it doesn't exist\n    invalid_dir = os.path.join(directory_path, 'Invalid')\n    if not os.path.exists(invalid_dir):\n        os.mkdir(invalid_dir)\n\n    summary = {}\n    for ending in [\"txt\", \"jpg\", \"pdf\"]:\n        # Initialize the directory path for the given ending\n        dir_path = os.path.join(directory_path, ending)\n\n        # Check if the directory exists, and if it does, check if the files are valid\n        if os.path.exists(dir_path):\n            files_with_invalid_chars = []\n            for file_name in os.listdir(dir_path):\n                # Check if file name contains invalid characters\n                if any(char in INVALID_CHARACTERS for char in file_name):\n                    files_with_invalid_chars.append(file_name)\n\n            if len(files_with_invalid_chars) > 0:\n                for file_name in files_with_invalid_chars:\n                    # Move file to", "compilation_passed": false, "time": 0.00018286705017089844, "tests_passed": false, "error": "IndentationError"}
{"code": "invalid_path = os.path.join(directory_path, \"Invalid\")\n    invalid_file = os.path.join(invalid_path, \"invalid.txt\")\n    try:\n        os.makedirs(invalid_path, exist_ok=True)\n    except FileExistsError:\n        pass\n\n    if not os.path.isdir(directory_path):\n        print(\"Error: Invalid directory path.\")\n        return None\n\n    file_count = {}\n\n    for file_name in os.listdir(directory_path):\n        extension = os.path.splitext(file_name)[1].lower()\n        file_name = os.path.splitext(file_name)[0].lower()\n        if extension in file_count:\n            file_count[extension] += 1\n        else:\n            file_count[extension] = 1\n\n        for invalid_character in INVALID_CHARACTERS:\n            if invalid_character in file_name:\n                try:\n                    os.makedirs(invalid_path, exist_ok=", "compilation_passed": false, "time": 0.00023293495178222656, "tests_passed": false, "error": "SyntaxError"}
{"code": "summary = {\"txt\": 0, \"jpg\": 0, \"Invalid\": 0}\n\n    # Check that directory_path is valid and exists\n    if not os.path.isdir(directory_path):\n        raise ValueError(\"The path is not a directory.\")\n\n    # Traverse the directory and count files with valid names and move invalid ones\n    for root, _, filenames in os.walk(directory_path):\n        for filename in filenames:\n            name, extension = os.path.splitext(filename)\n\n            if not extension.startswith('.'):\n                continue\n\n            extension = extension[1:]\n\n            if extension.lower() not in ['txt', 'jpg']:\n                if not os.path.join(directory_path, filename).endswith('txt') or not os.path.join(directory_path, filename).endswith('jpg'):\n                    invalid_filename = f\"{name}{INVALID_CHARACTERS}{os.path.extsep}{extension}\"\n                    invalid_filename = os.path.join(", "compilation_passed": false, "time": 0.0002129077911376953, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Initialize variables\n    txt_files = []\n    jpg_files = []\n    invalid_files = []\n    summary = {}\n\n    # Loop through the directory\n    for dirpath, dirnames, filenames in os.walk(directory_path):\n        # Skip the current directory and subdirectories\n        if dirpath == directory_path:\n            continue\n        # Move invalid files to the \"Invalid\" directory\n        invalid_dir = os.path.join(directory_path, 'Invalid')\n        for filename in filenames:\n            if INVALID_CHARACTERS.intersection(filename):\n                invalid_files.append(os.path.join(dirpath, filename))\n\n        # Move files with valid names to the \"txt\" or \"jpg\" directories\n        for filename in filenames:\n            if filename.endswith('.txt'):\n                txt_files.append(os.path.join(dirpath, filename))\n            elif filename.endswith('.jpg'):\n                jpg_files.append(os.path.join(dirpath, filename))\n\n    # Move invalid files to", "compilation_passed": true, "time": 0.002094745635986328, "tests_passed": true, "error": null}
{"code": "invalid_files = []\n    valid_files = []\n    txt = []\n    jpg = []\n    for root, dirs, files in os.walk(directory_path):\n        for f in files:\n            ext = os.path.splitext(f)[1]\n            if ext.lower() == '.txt':\n                txt.append(f)\n            if ext.lower() == '.jpg':\n                jpg.append(f)\n            if ext not in INVALID_CHARACTERS:\n                valid_files.append(f)\n            else:\n                invalid_files.append(f)\n\n    valid_files_path = os.path.join(directory_path, \"Valid\")\n    invalid_files_path = os.path.join(directory_path, \"Invalid\")\n    txt_path = os.path.join(valid_files_path, \"txt\")\n    jpg_path = os.path.join(valid_files_path, \"jpg\")\n    txt_file = os.path.join(txt_path, \"txt\")\n    jpg_file = os", "compilation_passed": true, "time": 0.0026030540466308594, "tests_passed": true, "error": null}
{"code": "directory_path = os.path.abspath(directory_path)\n    assert os.path.isdir(directory_path), \"Input is not a directory.\"\n\n    summary = {\"txt\": 0, \"jpg\": 0, \"Invalid\": 0}\n    txt_files = []\n    jpg_files = []\n    for root, _, files in os.walk(directory_path):\n        for file in files:\n            if any(char in INVALID_CHARACTERS for char in file):\n                if file.endswith(\"txt\"):\n                    txt_files.append(file)\n                    summary[\"txt\"] += 1\n                    continue\n                elif file.endswith(\"jpg\"):\n                    jpg_files.append(file)\n                    summary[\"jpg\"] += 1\n                    continue\n                else:\n                    invalid_files = [file]\n                    summary[\"Invalid\"] += 1\n            else:\n                if file.endswith(\"txt\"):\n                    txt_files.append(file)\n                    ", "compilation_passed": true, "time": 0.0020117759704589844, "tests_passed": true, "error": null}
{"code": "# Create the summary dictionary\n    summary = {'txt': 0, 'jpg': 0}\n    # Create the Invalid directory\n    if not os.path.exists(\"Invalid\"):\n        os.mkdir(\"Invalid\")\n\n    # Loop through the directory\n    for path in glob.glob(f\"{directory_path}/*\"):\n        # Get the file name\n        filename = os.path.basename(path)\n        # Split the file name into its ending and extension\n        ending, _ = os.path.splitext(filename)\n        ending = ending.lower()\n        # Move the file to the Invalid directory if it has invalid characters\n        if any(char in INVALID_CHARACTERS for char in filename):\n            shutil.move(path, os.path.join(\"Invalid\", filename))\n            print(f\"{filename} moved to Invalid\")\n            summary['txt'] += 1\n        else:\n            # Move the file to the corresponding directory\n            destination_dir = f\"{directory_path}/{ending}\"\n            if not os.path.exists(destination_dir):", "compilation_passed": false, "time": 0.0002219676971435547, "tests_passed": false, "error": "IndentationError"}
{"code": "summary = {}\n    invalid_dir = os.path.join(directory_path, \"Invalid\")\n    if os.path.isfile(invalid_dir):\n        os.remove(invalid_dir)\n    os.mkdir(invalid_dir)\n\n    for root, dirs, files in os.walk(directory_path):\n        for file in files:\n            if any(invalid_char in file.casefold() for invalid_char in INVALID_CHARACTERS):\n                file_path = os.path.join(root, file)\n                new_path = os.path.join(invalid_dir, file)\n                shutil.move(file_path, new_path)\n            else:\n                if \".txt\" in file.casefold():\n                    if \".txt\" not in summary.keys():\n                        summary[\"txt\"] = 1\n                    else:\n                        summary[\"txt\"] += 1\n                elif \".jpg\" in file.casefold():\n                    if \".jpg\" not in summary.keys():\n                        summary[\"jpg\"] =", "compilation_passed": false, "time": 0.0002269744873046875, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Create the subdirectories for the different endings if they don't exist yet\n    txt_subdirectory = os.path.join(directory_path, 'txt')\n    jpg_subdirectory = os.path.join(directory_path, 'jpg')\n    invalid_subdirectory = os.path.join(directory_path, 'Invalid')\n\n    # Check if the subdirectories exist, and if not, create them\n    for subdirectory in [txt_subdirectory, jpg_subdirectory, invalid_subdirectory]:\n        if not os.path.exists(subdirectory):\n            os.makedirs(subdirectory)\n\n    # Create the summary dictionary to keep track of the number of files moved to each subdirectory\n    summary = {\n        'txt': 0,\n        'jpg': 0,\n        'Invalid': 0\n    }\n\n    # Loop through all the files in the directory and move them to the appropriate subdirectory based on their extension\n    for root, dirs, files in os.walk(directory_path):\n        for file in files:\n            if file.endswith('.txt')", "compilation_passed": false, "time": 0.00016188621520996094, "tests_passed": false, "error": "SyntaxError"}
{"code": "txt_count = 0\n    jpg_count = 0\n    invalid_count = 0\n\n    # Create directories for each file type\n    txt_directory = os.path.join(directory_path, 'txt')\n    jpg_directory = os.path.join(directory_path, 'jpg')\n    invalid_directory = os.path.join(directory_path, 'Invalid')\n\n    os.makedirs(txt_directory, exist_ok=True)\n    os.makedirs(jpg_directory, exist_ok=True)\n    os.makedirs(invalid_directory, exist_ok=True)\n\n    for root, dirs, files in os.walk(directory_path):\n        for file in files:\n            if file.lower().endswith('.txt'):\n                file_path = os.path.join(root, file)\n                shutil.move(file_path, txt_directory)\n                txt_count += 1\n            elif file.lower().endswith('.jpg'):\n                file_path = os.path.join(root,", "compilation_passed": false, "time": 0.00021696090698242188, "tests_passed": false, "error": "SyntaxError"}
{"code": "summary = {}\n    for filename in os.listdir(directory_path):\n        extension = os.path.splitext(filename)[-1].lower()\n        if extension == '':\n            extension = 'Invalid'\n        else:\n            extension = extension[1:]\n        if extension in summary:\n            summary[extension] += 1\n        else:\n            summary[extension] = 1\n\n    for extension, count in summary.items():\n        if extension == 'Invalid':\n            shutil.move(\n                os.path.join(directory_path, filename),\n                os.path.join(directory_path, extension)\n            )\n\n    return summary", "compilation_passed": true, "time": 0.0019791126251220703, "tests_passed": true, "error": null}
{"code": "files = os.listdir(directory_path)\n\n    txt_files = []\n    jpg_files = []\n    invalid_files = []\n\n    # Scan the files in the directory\n    for file in files:\n        # Check if the file contains invalid characters\n        if any(c in INVALID_CHARACTERS for c in file):\n            invalid_files.append(file)\n        elif file.endswith('.txt'):\n            txt_files.append(file)\n        elif file.endswith('.jpg'):\n            jpg_files.append(file)\n        else:\n            invalid_files.append(file)\n\n    # Create directories for each file type\n    txt_dir = os.path.join(directory_path, \"txt\")\n    os.makedirs(txt_dir, exist_ok=True)\n\n    jpg_dir = os.path.join(directory_path, \"jpg\")\n    os.makedirs(jpg_dir, exist_ok=True)\n\n    invalid_dir = os.path.join(directory_path, \"Invalid\")", "compilation_passed": true, "time": 0.0021979808807373047, "tests_passed": true, "error": null}
{"code": "# Create a dictionary to keep track of the counts of files in each directory\n    summary = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n\n    # Create directories for each ending\n    for ending in ['txt', 'jpg']:\n        destination_path = os.path.join(directory_path, ending)\n        os.mkdir(destination_path)\n\n    # Scan the directory and move files to the appropriate directory\n    for file in os.listdir(directory_path):\n        file_path = os.path.join(directory_path, file)\n        if os.path.isfile(file_path):\n            ending = file.split('.')[-1]\n            if ending in ['txt', 'jpg']:\n                summary[ending] += 1\n                destination_path = os.path.join(directory_path, ending)\n                shutil.move(file_path, destination_path)\n            else:\n                summary['Invalid'] += 1\n                destination_path = os.path.join(directory_path, 'Invalid')\n                shutil.move(file", "compilation_passed": false, "time": 0.00023293495178222656, "tests_passed": false, "error": "SyntaxError"}
{"code": "summary = {\"txt\": 0, \"jpg\": 0, \"Invalid\": 0}\n    if not os.path.exists(directory_path):\n        raise FileNotFoundError(f\"Invalid path {directory_path}\")\n    files = [x for x in os.listdir(directory_path) if os.path.isfile(os.path.join(directory_path, x))]\n    for file in files:\n        if file.endswith(\".txt\"):\n            with open(file, \"rb\") as file_obj:\n                file_obj.read()\n        if file.endswith(\".jpg\"):\n            with open(file, \"rb\") as file_obj:\n                file_obj.read()\n        if file.endswith(\".txt\") and file.endswith(\".jpg\"):\n            if os.path.join(directory_path, file) in summary:\n                summary[\"txt\"] += 1\n            else:\n                shutil.move(os.path.join(directory_path, file),\n                            ", "compilation_passed": false, "time": 0.0002422332763671875, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Check if the directory path exists\n    if not os.path.isdir(directory_path):\n        print('Error: ', directory_path, ' is not a valid directory.')\n        return None\n\n    # Create a new directory to move files to if it does not exist\n    invalid_directory = os.path.join(directory_path, 'Invalid')\n    if not os.path.isdir(invalid_directory):\n        os.mkdir(invalid_directory)\n\n    # Initialize variables\n    files_moved = 0\n    txt_files = []\n    jpg_files = []\n\n    # Scan the directory and move files to the appropriate directory\n    for root, dirs, files in os.walk(directory_path):\n        for filename in files:\n            file_path = os.path.join(root, filename)\n            if os.path.isfile(file_path):\n                # Move file to Invalid if it has invalid characters\n                if any(char in INVALID_CHARACTERS for char in filename):\n                    shutil.move(file_path, os.path.join(invalid_", "compilation_passed": false, "time": 0.00019884109497070312, "tests_passed": false, "error": "SyntaxError"}
{"code": "summary = {}\n\n    # Define paths to the directories\n    files_directory_path = os.path.join(directory_path, 'files')\n    txt_directory_path = os.path.join(directory_path, 'txt')\n    jpg_directory_path = os.path.join(directory_path, 'jpg')\n    invalid_directory_path = os.path.join(directory_path, 'Invalid')\n\n    # Initialize the summary dictionary with default counts for the different types of files\n    for file_type in ['txt', 'jpg']:\n        summary[file_type] = 0\n    summary['Invalid'] = 0\n\n    # Initialize empty lists to store files\n    txt_files = []\n    jpg_files = []\n    invalid_files = []\n\n    # Check for the existance of all the directories and create them if they do not exist.\n    if not os.path.exists(txt_directory_path):\n        os.makedirs(txt_directory_path)\n\n    if not os.path.exists(jpg_directory_path):\n        os.makedirs(", "compilation_passed": false, "time": 0.00018215179443359375, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Validate the input directory path\n    if not os.path.isdir(directory_path):\n        raise ValueError(\"Invalid directory path.\")\n\n    # Initialize counts\n    txt_count = 0\n    jpg_count = 0\n    invalid_count = 0\n\n    # Initialize the summary dictionary\n    summary = {'txt': txt_count, 'jpg': jpg_count, 'Invalid': invalid_count}\n\n    # Create a new directory for invalid files\n    invalid_path = os.path.join(directory_path, \"Invalid\")\n    os.makedirs(invalid_path, exist_ok=True)\n\n    # Scan the directory\n    for dir_name, sub_dirs, files in os.walk(directory_path):\n        for file_name in files:\n            file_path = os.path.join(dir_name, file_name)\n            if os.path.isfile(file_path):\n                extension = os.path.splitext(file_path)[-1].lower()\n\n                if extension == '.txt':\n                    ", "compilation_passed": false, "time": 0.000186920166015625, "tests_passed": false, "error": "IndentationError"}
{"code": "files_moved = {'txt': 0, 'jpg': 0, 'Invalid': 0}\n    invalid_directory = os.path.join(directory_path, \"Invalid\")\n\n    if not os.path.isdir(directory_path):\n        return files_moved\n\n    for root, dirs, files in os.walk(directory_path):\n        for filename in files:\n            # Remove invalid characters from the filename\n            filename_without_invalid_characters = \"\".join(\n                character for character in filename if character not in INVALID_CHARACTERS\n            )\n\n            # Get the extension of the file\n            file_extension = os.path.splitext(filename_without_invalid_characters)[1]\n\n            # Move the file to the appropriate directory\n            if file_extension == \".txt\":\n                files_moved['txt'] += 1\n                os.replace(os.path.join(root, filename_without_invalid_characters), os.path.join(root, filename))\n            elif file_extension == \".jpg\":\n                files_m", "compilation_passed": true, "time": 0.0020389556884765625, "tests_passed": true, "error": null}
{"code": "if os.path.isdir(directory_path):\n        summary = {}\n        invalid_directory_path = os.path.join(directory_path, 'Invalid')\n        if not os.path.isdir(invalid_directory_path):\n            os.mkdir(invalid_directory_path)\n        for subdir, dirs, files in os.walk(directory_path):\n            for file_name in files:\n                if INVALID_CHARACTERS.intersection(file_name):\n                    invalid_file_name = os.path.join(invalid_directory_path, file_name)\n                    shutil.move(os.path.join(subdir, file_name), invalid_file_name)\n                    summary[os.path.basename(invalid_file_name)] = 1\n                else:\n                    extension = os.path.splitext(file_name)[1][1:]\n                    if extension in summary:\n                        summary[extension] += 1\n                    else:\n                        summary[extension] = 1\n        return summary\n    else:\n        raise", "compilation_passed": true, "time": 0.002191305160522461, "tests_passed": false, "error": "AttributeError"}
{"code": "summary = {}\n    invalid_files = os.path.join(directory_path, \"Invalid\")\n    # Move files with invalid characters to a new directory called 'Invalid'\n    for file in os.listdir(directory_path):\n        file_name, file_ending = os.path.splitext(file)[0], os.path.splitext(file)[1]\n        if file_ending == \"\":\n            continue\n        if not any(char in INVALID_CHARACTERS for char in file_name):\n            continue\n        if not os.path.exists(invalid_files):\n            os.makedirs(invalid_files)\n        shutil.move(file, os.path.join(invalid_files, file))\n        if file_ending not in summary:\n            summary[file_ending] = 1\n        else:\n            summary[file_ending] += 1\n    # Move files with valid names and endings to the original directory\n    for file in os.listdir(directory_path):\n        file_name, file_ending = os.path.splitext(file)[", "compilation_passed": false, "time": 0.0002167224884033203, "tests_passed": false, "error": "SyntaxError"}
{"code": "summary = dict()\n    # Create a dictionary for storing the counts of files moved to each directory\n    for file_name in os.listdir(directory_path):\n        # Loop through the files in the directory\n        if file_name.lower().endswith('.txt'):\n            # Check if the file name ends with \".txt\"\n            directory = 'txt'\n        elif file_name.lower().endswith('.jpg'):\n            # Check if the file name ends with \".jpg\"\n            directory = 'jpg'\n        else:\n            # If neither \".txt\" nor \".jpg\" ends the file name, move to the \"Invalid\" directory\n            directory = 'Invalid'\n\n        if directory not in summary:\n            # If the directory does not exist in the summary, create it\n            summary[directory] = 1\n        else:\n            # Increment the count for the existing directory\n            summary[directory] += 1\n\n        file_path = os.path.join(directory_path, file_name)\n        if not os.path.isfile(file_path):\n            ", "compilation_passed": false, "time": 0.00015115737915039062, "tests_passed": false, "error": "IndentationError"}
{"code": "summary = {}\n\n    # Define the directories to be scanned\n    directory_list = [directory_path]\n\n    while directory_list:\n        current_directory = directory_list.pop(0)\n\n        # Define the filenames and directory names in the current directory\n        filenames = [f for f in os.listdir(current_directory) if not f.startswith('.')]\n        directory_names = [\n            dir_name for dir_name in os.listdir(current_directory)\n            if os.path.isdir(os.path.join(current_directory, dir_name))\n        ]\n\n        # Move files with invalid characters to a new directory\n        invalid_dir_name = 'Invalid'\n        invalid_dir_path = os.path.join(current_directory, invalid_dir_name)\n        if invalid_dir_path not in directory_list:\n            directory_list.append(invalid_dir_path)\n        for file_name in filenames:\n            if any(char in file_name for char in INVALID_CHARACTERS):\n                sh", "compilation_passed": true, "time": 0.002142190933227539, "tests_passed": false, "error": "NameError"}
{"code": "summary = {}\n    files = []\n    for root, dirs, files_list in os.walk(directory_path):\n        for file in files_list:\n            files.append(os.path.join(root, file))\n\n    for file in files:\n        file_name = os.path.splitext(file)[0]\n        invalid_characters_removed = ''.join(char for char in file_name if char not in INVALID_CHARACTERS)\n        if invalid_characters_removed == file_name:\n            continue\n        elif file.endswith('.txt'):\n            summary['txt'] = summary.get('txt', 0) + 1\n        elif file.endswith('.jpg'):\n            summary['jpg'] = summary.get('jpg', 0) + 1\n        else:\n            summary['Invalid'] = summary.get('Invalid', 0) + 1\n\n    return summary", "compilation_passed": true, "time": 0.002149820327758789, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(directory_path):\n        return None\n\n    summary = {}\n\n    for filename in os.listdir(directory_path):\n        path = os.path.join(directory_path, filename)\n\n        if os.path.isfile(path):\n            if not any(char in INVALID_CHARACTERS for char in filename):\n                if filename.endswith(\".txt\"):\n                    summary[\"txt\"] = summary.get(\"txt\", 0) + 1\n                elif filename.endswith(\".jpg\"):\n                    summary[\"jpg\"] = summary.get(\"jpg\", 0) + 1\n                else:\n                    summary[\"Invalid\"] = summary.get(\"Invalid\", 0) + 1\n            else:\n                shutil.move(path, os.path.join(directory_path, \"Invalid\"))\n        else:\n            if not any(char in INVALID_CHARACTERS for char in filename):\n                shutil.move(path, os.path.join(directory_", "compilation_passed": false, "time": 0.00024008750915527344, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Initialize summary dictionary\n    summary = {\n        'txt': 0,\n        'jpg': 0,\n        'Invalid': 0\n    }\n\n    # Move any invalid files to the Invalid directory\n    for file in os.listdir(directory_path):\n        if any(char in INVALID_CHARACTERS for char in file):\n            src = os.path.join(directory_path, file)\n            dst = os.path.join(directory_path, 'Invalid')\n            dst = os.path.join(directory_path, 'Invalid')\n            shutil.move(src, dst)\n            summary['Invalid'] += 1\n        else:\n            if file.endswith('.txt'):\n                summary['txt'] += 1\n            elif file.endswith('.jpg'):\n                summary['jpg'] += 1\n            else:\n                summary['Invalid'] += 1\n\n    # Return the summary dictionary\n    return summary", "compilation_passed": true, "time": 0.00263214111328125, "tests_passed": true, "error": null}
{"code": "summary = {}\n\n    # Create the directories if they don't exist\n    for directory_name in [\"txt\", \"jpg\", \"Invalid\"]:\n        summary[directory_name] = 0\n        if not os.path.exists(directory_name):\n            os.mkdir(directory_name)\n\n    # Scan the directory and move files to their respective directories\n    for file_path in os.listdir(directory_path):\n        file_name, file_extension = os.path.splitext(file_path)\n        file_name = file_name.split(\".\")[0]\n        file_name_lower = file_name.lower()\n        directory_name = \"txt\" if file_extension == \".txt\" else \"jpg\"\n        directory_path = os.path.join(directory_path, directory_name)\n        invalid_path = os.path.join(directory_path, \"Invalid\")\n        file_path_lower = file_path.lower()\n\n        if any(c in INVALID_CHARACTERS for c in file_name):\n            os", "compilation_passed": true, "time": 0.002373933792114258, "tests_passed": true, "error": null}
{"code": "# Create the summary dictionary\n    summary = {\n        'txt': 0,\n        'jpg': 0,\n        'Invalid': 0,\n    }\n\n    # Validate the input directory exists and is a directory\n    if not os.path.isdir(directory_path):\n        raise FileNotFoundError(f\"{directory_path} is not a valid directory.\")\n\n    # Find all files in the directory\n    files = [f for f in os.listdir(directory_path) if os.path.isfile(os.path.join(directory_path, f))]\n\n    # Iterate through the files in the directory\n    for file in files:\n        # Skip empty files and files with invalid characters\n        if not file or set(file) & set(INVALID_CHARACTERS):\n            continue\n\n        # Get the file ending\n        ending = file.split('.')[-1]\n\n        # Move the file to the appropriate directory\n        if ending in ['txt', 'jpg']:\n            summary[ending] += 1\n            shutil.move(os.path.join(", "compilation_passed": false, "time": 0.00021886825561523438, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not os.path.exists(directory_path):\n        raise ValueError(f'Directory {directory_path} does not exist.')\n\n    summary = {}\n    for file_name, file_ending in generate_file_ending(directory_path):\n        if file_ending not in summary:\n            summary[file_ending] = 1\n        else:\n            summary[file_ending] += 1\n\n        file_path = os.path.join(directory_path, file_name)\n\n        if file_ending == \"txt\":\n            with open(file_path, 'r', encoding='utf-8') as file:\n                data = file.read()\n                text_count = count_words(data)\n                if text_count > 100:\n                    shutil.move(file_path, os.path.join(directory_path, 'Long text files', 'Long.txt'))\n                else:\n                    shutil.move(file_path, os.path.join(directory_path, 'Short text files', 'Short.txt'))\n\n        elif file_", "compilation_passed": false, "time": 0.00022292137145996094, "tests_passed": false, "error": "SyntaxError"}
{"code": "directory_path = os.path.abspath(directory_path)\n\n    # Move invalid files to the invalid directory\n    invalid_directory = os.path.join(directory_path, 'Invalid')\n    if not os.path.exists(invalid_directory):\n        os.makedirs(invalid_directory)\n    invalid_files = []\n    for file_name in os.listdir(directory_path):\n        if not file_name.lower().startswith('.') and any(char in INVALID_CHARACTERS for char in file_name):\n            invalid_files.append(os.path.join(directory_path, file_name))\n\n    for file_path in invalid_files:\n        file_name = os.path.basename(file_path)\n        destination = os.path.join(invalid_directory, file_name)\n        shutil.move(file_path, destination)\n\n    # Organize files by ending in the directory\n    summary = {}\n    for file_name in os.listdir(directory_path):\n        if not file_name.lower().", "compilation_passed": false, "time": 0.00019812583923339844, "tests_passed": false, "error": "SyntaxError"}
