{"code": "df = pd.DataFrame(np.random.choice(LETTERS, (100, 100)).tolist())\n    df.to_csv(file_path)\n    if output_dir != OUTPUT_DIR:\n        df.to_csv(os.path.join(output_dir, os.path.basename(file_path)))", "compilation_passed": true, "time": 0.0010190010070800781, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "letters = np.random.choice(LETTERS, 1000)\n\n    df = pd.DataFrame(letters.reshape(100, 10))\n\n    df.to_csv(file_path, sep=' ')", "compilation_passed": true, "time": 0.0008618831634521484, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Create a directory for the output if it does not exist\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n\n    # Get the number of rows and columns from the file name\n    file_name = file_path.split('.')[0]\n    num_rows, num_cols = file_name.split('-')[-1].split('x')\n    num_rows, num_cols = int(num_rows), int(num_cols)\n\n    # Create an empty matrix with all elements initialized to None\n    matrix = [['_' for _ in range(num_cols)] for _ in range(num_rows)]\n\n    # Select a random letter for each element in the matrix\n    for i in range(num_rows):\n        for j in range(num_cols):\n            matrix[i][j] = np.random.choice(LETTERS)\n\n    # Convert the matrix to a pandas DataFrame\n    df = pd.DataFrame(matrix)\n\n    # Write the DataFrame to a CSV file\n    df.to_csv", "compilation_passed": true, "time": 0.0009920597076416016, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Initialize a random number generator with a given seed to get consistent results.\n    np.random.seed(42)\n\n    # Initialize the matrix with random letters\n    matrix = np.random.choice(LETTERS, size=(10, 10), replace=False)\n\n    # Convert the matrix to a CSV file\n    matrix_df = pd.DataFrame(data=matrix)\n    matrix_df.to_csv(os.path.join(output_dir, file_path), index=False)", "compilation_passed": true, "time": 0.0009961128234863281, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "matrix = np.random.choice(LETTERS, size=(26, 26))\n    df = pd.DataFrame(matrix, columns=LETTERS, index=LETTERS)\n    df.to_csv(os.path.join(output_dir, file_path))", "compilation_passed": true, "time": 0.0008869171142578125, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "print(\"[+] Creating file...\")\n    random_matrix = np.random.choice(LETTERS, size=(10, 10))\n    print(f\"[+] Matrix shape: {random_matrix.shape}\")\n    df = pd.DataFrame(random_matrix)\n    print(f\"[+] Writing file to {output_dir}...\")\n    df.to_csv(file_path)\n    print(\"[+] Done.\")", "compilation_passed": true, "time": 0.0008730888366699219, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Create a random 2D array of letters\n    random_matrix = np.random.choice(LETTERS, size=(3, 3))\n\n    # Write the array to a CSV file\n    df = pd.DataFrame(random_matrix)\n    df.to_csv(os.path.join(output_dir, 'random_matrix.csv'))", "compilation_passed": true, "time": 0.0009021759033203125, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Create output dir if it does not exist\n    if not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n\n    # Check if output dir exists\n    if not os.path.exists(output_dir):\n        os.mkdir(output_dir)\n\n    # Create the CSV file using numpy and pandas\n    matrix = np.random.choice(LETTERS, 10000).reshape(1000, 1000)\n    pd.DataFrame(matrix).to_csv(file_path)", "compilation_passed": true, "time": 0.0008361339569091797, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "print('In Task!')\n    # Write your code here\n    # create 2D numpy array filled with random letters\n    random_letters = np.random.choice(LETTERS, size=(5, 5))\n\n    # write 2D numpy array to CSV file\n    random_letters_df = pd.DataFrame(random_letters)\n    random_letters_df.to_csv(file_path, index=False)", "compilation_passed": true, "time": 0.0008101463317871094, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "matrix = np.random.choice(LETTERS, size=(2, 5))\n    matrix = pd.DataFrame(matrix)\n    matrix.to_csv(os.path.join(output_dir, 'random_matrix.csv'))", "compilation_passed": true, "time": 0.0007936954498291016, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Create output directory if it doesn't exist\n    if not os.path.isdir(output_dir):\n        os.makedirs(output_dir)\n\n    # Create the dataframe with random values\n    df = pd.DataFrame(np.random.choice(LETTERS, size=(30, 30)), dtype=str)\n    df.to_csv(file_path, sep=',', index=False)", "compilation_passed": true, "time": 0.000820159912109375, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# create a DataFrame\n    random_matrix = np.random.choice(LETTERS, size=(10, 10))\n    df = pd.DataFrame(random_matrix, columns=LETTERS)\n\n    # save the DataFrame to a CSV file\n    df.to_csv(file_path)", "compilation_passed": true, "time": 0.00080108642578125, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "np.random.seed(4)\n    letters = np.random.choice(LETTERS, size=(5000, 5000))\n    data = letters.astype(np.str_)\n    df = pd.DataFrame(data=data)\n    df.to_csv(os.path.join(output_dir, file_path))", "compilation_passed": true, "time": 0.0008118152618408203, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "letters = np.random.choice(LETTERS, 100)\n    df = pd.DataFrame(letters.reshape(10, 10))\n    df.to_csv(os.path.join(output_dir, 'random_matrix.csv'))\n    print(f'Wrote CSV file to {output_dir}')", "compilation_passed": true, "time": 0.0008258819580078125, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "df = pd.DataFrame(np.random.choice(LETTERS, 26 ** 2).reshape(26, 26))\n    df.to_csv(file_path, index=False)\n    os.makedirs(output_dir, exist_ok=True)", "compilation_passed": true, "time": 0.0008029937744140625, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "df = pd.DataFrame(np.random.choice(LETTERS, size=(10, 20)))\n    df.to_csv(os.path.join(output_dir, file_path))", "compilation_passed": true, "time": 0.0007998943328857422, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Create an empty matrix of size 5x5\n    random_matrix = np.random.choice(LETTERS, size=(5, 5))\n    # Create a data frame from the empty matrix\n    df = pd.DataFrame(random_matrix)\n    # Write the data frame to a file\n    df.to_csv(os.path.join(output_dir, 'random_matrix.csv'))\n    return", "compilation_passed": true, "time": 0.0008080005645751953, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "letters = np.random.choice(LETTERS, size=(10, 10))\n\n    output_path = os.path.join(output_dir, 'random_matrix.csv')\n    df = pd.DataFrame(letters)\n    df.to_csv(output_path)", "compilation_passed": true, "time": 0.0008037090301513672, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "np.random.seed(42)\n    random_letters = np.random.choice(LETTERS, size=(100, 100), replace=False).astype(np.str_)\n    df = pd.DataFrame(random_letters, columns=LETTERS)\n    df.to_csv(file_path, index=False)", "compilation_passed": true, "time": 0.0008797645568847656, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "matrix = np.random.choice(LETTERS, size=(10, 10))\n    df = pd.DataFrame(matrix)\n\n    if os.path.exists(output_dir):\n        df.to_csv(os.path.join(output_dir, 'random_matrix.csv'))\n    else:\n        os.mkdir(output_dir)\n        df.to_csv(os.path.join(output_dir, 'random_matrix.csv'))", "compilation_passed": true, "time": 0.0008549690246582031, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "matrix = np.char.lower(np.random.choice(LETTERS, (20, 20)))\n    df = pd.DataFrame(matrix)\n    df.to_csv(os.path.join(output_dir, file_path))", "compilation_passed": true, "time": 0.0007870197296142578, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Write a 2D matrix populated only with random letters to a CSV file.\n    # This function should be vectorized.\n    #\n    # I/O:\n    # - file_path (str): The path of the CSV file to be created.\n    # - output_dir (str, optional): The dir of the CSV file to be created.\n    #\n    # Requirements:\n    # - pandas\n    # - numpy\n    #\n    # Example:\n    # >>> task_func(os.path.join(OUTPUT_DIR, 'random_matrix.csv'))\n    #\n    # -----------------------------------------------------------------------------\n\n    # The 2D matrix should be populated only with random lowercase letters.\n\n    # Generate a 2D matrix populated only with random letters using NumPy.\n    # You are free to generate the matrix with random letters using the numpy.random.rand() method.\n    # This will allow you to write the matrix into a file using Pandas.\n    #\n    # Hints", "compilation_passed": true, "time": 0.0007379055023193359, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "letters = np.random.choice(LETTERS, 999, False)\n    random_matrix = pd.DataFrame(letters, index=range(letters.size))\n    random_matrix.to_csv(os.path.join(output_dir, 'random_matrix.csv'))", "compilation_passed": true, "time": 0.000782012939453125, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "np.random.seed(42)  # to always get the same result\n\n    data = np.random.choice(LETTERS, size=(10, 10), p=[0.5, 0.3, 0.1])\n    df = pd.DataFrame(data)\n    df.to_csv(os.path.join(output_dir, file_path))", "compilation_passed": true, "time": 0.0007727146148681641, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Create the output directory if it doesn't exist\n    os.makedirs(output_dir, exist_ok=True)\n\n    # Create the file path with the output_dir\n    full_file_path = os.path.join(output_dir, file_path)\n\n    # Populate the dataframe with random letters\n    letters = np.random.choice(LETTERS, size=(10000, 10000), replace=True)\n    letters = pd.DataFrame(letters)\n\n    # Write the dataframe to a CSV file\n    letters.to_csv(full_file_path, index=False)", "compilation_passed": true, "time": 0.0008211135864257812, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Create output dir\n    if output_dir and not os.path.exists(output_dir):\n        os.makedirs(output_dir)\n\n    # Create output file\n    file_path = os.path.join(output_dir, 'random_matrix.csv')\n    matrix = np.random.choice(LETTERS, size=(100, 100), replace=False)\n    pd.DataFrame(matrix).to_csv(file_path)", "compilation_passed": true, "time": 0.0008029937744140625, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Task variables\n    rows = 1000\n    cols = 100\n\n    # Generate a random matrix of size rows x cols\n    random_letters_array = np.random.choice(LETTERS, size=(rows, cols))\n\n    # Convert the array to a pandas DataFrame and write it to disk\n    random_letters_df = pd.DataFrame(random_letters_array)\n    random_letters_df.to_csv(file_path)", "compilation_passed": true, "time": 0.0007822513580322266, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Generate random letters\n    letters = np.random.choice(LETTERS, size=(25, 5))\n\n    # Write the letters to a file\n    with open(file_path, 'w') as f:\n        f.write(','.join([''.join(row) for row in letters]) + '\\n')", "compilation_passed": true, "time": 0.0008220672607421875, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "matrix = np.random.choice(LETTERS, size=(25, 25))\n    data_frame = pd.DataFrame(matrix, columns=LETTERS, index=LETTERS)\n    file_path = os.path.join(output_dir, os.path.split(file_path)[1])\n    data_frame.to_csv(file_path)", "compilation_passed": true, "time": 0.0008199214935302734, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Write a CSV file containing a 2D matrix populated exclusively with random lowercase letters\n    matrix = np.random.choice(LETTERS, size=(25, 25))\n    np.savetxt(file_path, matrix, fmt='%s', delimiter=',')", "compilation_passed": true, "time": 0.00078582763671875, "tests_passed": false, "error": "FileNotFoundError"}
