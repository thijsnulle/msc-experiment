{"code": "# Check if the source directory exists\n    source_path = Path(source_directory)\n    if not source_path.exists():\n        raise FileNotFoundError(f\"Source directory {source_directory} not found.\")\n\n    # List all the files in the source directory\n    file_paths = []\n    for root, dirnames, filenames in os.walk(source_path):\n        for filename in filenames:\n            if (source_path / filename).suffix in ('.txt', '.docx', '.xlsx', '.csv'):\n                file_paths.append(Path(os.path.join(root, filename)))\n\n    # Remove the file extension from the path and create CSV file names from file paths\n    file_name_list = []\n    for path in file_paths:\n        filename = str(path.relative_to(source_path).with_suffix(\"\"))\n        file_name_list.append(f\"{filename}.csv\")\n\n    # Create the target directory if it does not exist\n    target_path =", "compilation_passed": false, "time": 0.00023865699768066406, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not os.path.exists(source_directory):\n        raise FileNotFoundError(\n            'The source directory does not exist. Please check the provided path.')\n    elif not os.path.isdir(source_directory):\n        raise ValueError('The provided source directory is not a directory.')\n\n    counter: int = 0\n    source_directory_path = Path(source_directory)\n    files = source_directory_path.iterdir()\n\n    for file in files:\n        if file.suffix in ('.txt', '.docx', '.xlsx', '.csv'):\n            print(f'Converting {file.name}...')\n            if file.suffix == '.txt':\n                pd.read_text(file, encoding='utf-8', errors='ignore').to_csv(\n                    target_directory + '/' + file.stem + '.csv')\n            else:\n                file_extension = '.' + file.suffix\n                if file_extension == '.csv':\n                    df: pd.DataFrame = pd.read", "compilation_passed": true, "time": 0.0015130043029785156, "tests_passed": false, "error": "No module named 'exceptions'"}
{"code": "# Check if source directory exists\n    if not os.path.exists(source_directory):\n        raise FileNotFoundError(f\"Source directory '{source_directory}' not found.\")\n\n    # Check if target directory exists\n    if not os.path.exists(target_directory):\n        os.mkdir(target_directory)\n    else:\n        for file in os.listdir(target_directory):\n            path = os.path.join(target_directory, file)\n            if os.path.isfile(path):\n                os.remove(path)\n\n    files = []\n    file_count = 0\n    for file in os.listdir(source_directory):\n        path = os.path.join(source_directory, file)\n        if os.path.isfile(path):\n            files.append(file)\n\n    for file in files:\n        if file.lower().endswith('.txt'):\n            text = read_file(source_directory + file)\n            write_file(target_directory, file, 'Text', text)\n            file_count +=", "compilation_passed": false, "time": 0.0002639293670654297, "tests_passed": false, "error": "SyntaxError"}
{"code": "count = 0\n    source_directory = Path(source_directory)\n    if not source_directory.exists():\n        raise FileNotFoundError(f\"Source directory '{source_directory}' does not exist.\")\n    source_directory = source_directory.resolve()\n    target_directory = Path(target_directory)\n    for file in os.listdir(source_directory):\n        if file.lower().endswith('.txt'):\n            with open(source_directory / file, 'r', encoding='utf-8') as f:\n                text = f.read()\n            count += 1\n            with open(target_directory / f'converted_file_{count}.csv', 'w', encoding='utf-8') as csv_file:\n                csv_file.write(f'Text,\\nText\\n,\\n{text}')\n        elif file.lower().endswith('.docx'):\n            doc = docx.Document(source_directory / file)\n            text = '\\n'.join([para.text for para in doc.paragraphs])\n            ", "compilation_passed": true, "time": 0.0013818740844726562, "tests_passed": false, "error": "No module named 'exceptions'"}
{"code": "count = 0\n    if not os.path.exists(target_directory):\n        os.makedirs(target_directory)\n    source_dir = Path(source_directory)\n    if not source_dir.exists():\n        raise FileNotFoundError(f\"Source directory {source_directory} not found.\")\n\n    for file in source_dir.glob('**/*.txt'):\n        try:\n            with open(file, 'r', encoding='utf8') as file:\n                text = file.read()\n            if file.name.endswith('.csv'):\n                # Skip if CSV already exists with the same name\n                continue\n            with open(f\"{target_directory}/{file.name}.csv\", 'w') as file:\n                file.write(text)\n                count += 1\n        except UnicodeDecodeError:\n            pass\n    for file in source_dir.glob('**/*.docx'):\n        try:\n            doc = docx.Document(file)\n            text = ''.join(paragraph.text for paragraph in doc.paragraphs", "compilation_passed": false, "time": 0.00026297569274902344, "tests_passed": false, "error": "SyntaxError"}
{"code": "if os.path.isdir(source_directory):\n        source_directory = Path(source_directory).resolve()\n        target_directory = Path(target_directory).resolve()\n        file_counter = 0\n        for file_path in source_directory.glob(\"*.txt\"):\n            try:\n                if file_path.stem == 'report':\n                    pass\n                else:\n                    file_name, file_ext = os.path.splitext(file_path)\n                    if file_ext.lower() == '.txt':\n                        text = file_path.read_text(encoding='utf-8')\n                        df = pd.DataFrame(columns=['Text'], data=[text])\n                        target_file_path = target_directory / f'{file_path.stem}.csv'\n                        df.to_csv(target_file_path, index=False)\n                        file_counter += 1\n            except Exception as e:\n                print(f\"An error occurred while converting {file_path} to CSV: {e}\")\n        return file_", "compilation_passed": true, "time": 0.0013267993927001953, "tests_passed": false, "error": "No module named 'exceptions'"}
{"code": "# check if source directory exists\n    if not os.path.exists(source_directory):\n        raise FileNotFoundError(f'The source directory {source_directory} does not exist.')\n\n    # check if target directory exists and create it if it does not exist\n    if not os.path.exists(target_directory):\n        os.makedirs(target_directory)\n\n    # get all files in source directory with specific extensions\n    source_files = [f for f in os.listdir(source_directory) if (\n        os.path.isfile(os.path.join(source_directory, f))\n        and f.endswith('.txt')\n        or f.endswith('.docx')\n        or f.endswith('.xlsx')\n        or f.endswith('.csv')\n    )]\n\n    # convert files to CSV files in target directory\n    converted_files_count = 0\n    for source_file in source_files:\n        if source_file.endswith('.txt'):\n            # convert .txt file to CSV\n", "compilation_passed": false, "time": 0.0002048015594482422, "tests_passed": false, "error": "IndentationError"}
{"code": "if not os.path.exists(source_directory):\n        raise FileNotFoundError(f'Directory \"{source_directory}\" does not exist.')\n    if not os.path.exists(target_directory):\n        os.makedirs(target_directory, exist_ok=True)\n    exts = ('txt', 'docx', 'xlsx', 'csv')\n    count = 0\n    for file in Path(source_directory).rglob(f'*.*'):\n        if not file.is_file():\n            continue\n        ext = file.suffix[1:].lower()\n        if ext in exts:\n            try:\n                if ext == 'csv':\n                    pd.read_csv(file)  # Load CSV file\n                elif ext == 'xlsx' or ext == 'xls':\n                    pd.read_excel(file)  # Load Excel file\n                elif ext in {'txt', 'docx'}:\n                    docx.Document(file).element.toxml()\n                count += 1\n                file.rename(", "compilation_passed": false, "time": 0.00026297569274902344, "tests_passed": false, "error": "SyntaxError"}
{"code": "file_count = 0\n    if not os.path.isdir(source_directory):\n        raise FileNotFoundError(\"Source directory does not exist.\")\n\n    for file_name in os.listdir(source_directory):\n        source_path = os.path.join(source_directory, file_name)\n        target_path = os.path.join(target_directory, file_name)\n\n        # Check if the file is an executable file\n        if not os.path.isfile(source_path):\n            continue\n\n        # Extract the file extension and convert the file to CSV\n        if file_name.endswith(\".txt\") or file_name.endswith(\".docx\") or \\\n                file_name.endswith(\".xlsx\") or file_name.endswith(\".csv\"):\n            if os.path.isfile(target_path):\n                os.remove(target_path)\n            if file_name.endswith(\".txt\"):\n                pd.read_csv(source_path,", "compilation_passed": false, "time": 0.00021386146545410156, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Create a Path object from the source directory path and verify it exists\n    source_path = Path(source_directory)\n    if not source_path.is_dir():\n        raise FileNotFoundError(f\"Error: Directory not found: {source_directory}\")\n    # Get a list of all the files in the source directory\n    source_files = list(source_path.iterdir())\n\n    # Create a Path object from the target directory path and verify it exists\n    target_path = Path(target_directory)\n    if not target_path.is_dir():\n        target_path.mkdir(parents=True)\n\n    # Create a dictionary to store the total number of files successfully converted to CSV\n    total_csv_count = {}\n    # Loop over each file in the source directory\n    for source_file in source_files:\n        # Verify that the source file is of supported file types\n        if source_file.suffix in ['.txt', '.docx', '.xlsx', '.csv']:\n            # Read the source file contents\n            try:\n                with source_", "compilation_passed": false, "time": 0.0001819133758544922, "tests_passed": false, "error": "SyntaxError"}
{"code": "csv_file_count = 0\n    for file in Path(source_directory).rglob(\"*\"):\n        if file.is_file() and (file.name.endswith('.txt') or file.name.endswith('.docx') or file.name.endswith('.xlsx') or file.name.endswith('.csv')):\n            with open(file, 'r') as f:\n                text = f.read()\n            csv_file_count += 1\n            file_path = os.path.join(target_directory, f\"{file.name[:-4]}.csv\")\n            with open(file_path, 'w', encoding='utf-8') as csv_file:\n                csv_file.write(text)\n    return csv_file_count", "compilation_passed": true, "time": 0.0012688636779785156, "tests_passed": false, "error": "No module named 'exceptions'"}
{"code": "source_directory = Path(source_directory)\n    target_directory = Path(target_directory)\n    if not source_directory.exists():\n        raise FileNotFoundError('Source directory not found.')\n    counter = 0\n    for file in os.listdir(source_directory):\n        path = source_directory / file\n        if path.suffix in ('.txt', '.docx', '.xlsx', '.csv'):\n            if path.suffix == '.txt':\n                df = pd.read_text(path)\n            elif path.suffix == '.docx':\n                try:\n                    doc = docx.Document(path)\n                    df = pd.DataFrame({'Text': [\n                        p.text for p in doc.paragraphs\n                    ]}, index=pd.RangeIndex(0, len(doc.paragraphs) - 1))\n                except Exception:\n                    continue\n            elif path.suffix == '.xlsx':\n                df = pd.read_excel(path)\n            elif path.suffix == '.csv", "compilation_passed": false, "time": 0.00011706352233886719, "tests_passed": false, "error": "SyntaxError"}
{"code": "try:\n        # check if the source directory exists\n        if not Path(source_directory).is_dir():\n            raise FileNotFoundError('The source directory does not exist')\n    except FileNotFoundError as e:\n        print(e)\n        return 0\n\n    # count of successfully converted files\n    count = 0\n\n    # convert files\n    for file in Path(source_directory).glob('*.txt'):\n        try:\n            # check if the file exists\n            if not file.is_file():\n                raise FileNotFoundError\n        except FileNotFoundError:\n            print(f\"File '{file}' does not exist\")\n            continue\n\n        # create the destination directory if not already exists\n        Path(target_directory).mkdir(parents=True, exist_ok=True)\n\n        # get the file extension\n        extension = file.name.split('.')[-1]\n\n        # convert the file\n        if extension == 'txt':\n            with open(file, 'r', encoding='utf8') as f:\n                text = f.read()\n                new", "compilation_passed": true, "time": 0.0013000965118408203, "tests_passed": false, "error": "No module named 'exceptions'"}
{"code": "source_directory = Path(source_directory)\n    if not source_directory.exists():\n        raise FileNotFoundError('The source directory does not exist')\n    for source_file in source_directory.iterdir():\n        if source_file.suffix == '.txt':\n            text_file_name = source_file.with_suffix('.csv')\n            df = pd.read_csv(source_file)\n            df.to_csv(text_file_name, index=False)\n            os.remove(source_file)\n        elif source_file.suffix in ['.docx', '.doc']:\n            doc = docx.Document(source_file)\n            text = '\\n'.join([paragraph.text for paragraph in doc.paragraphs])\n            csv_file_name = source_file.with_suffix('.csv')\n            with open(csv_file_name, 'w', newline='') as csv_file:\n                csv_writer = pd.write.csv(csv_file)\n                csv_writer(text)\n            os.remove(source_", "compilation_passed": false, "time": 0.0002682209014892578, "tests_passed": false, "error": "SyntaxError"}
{"code": "# check if the target directory exists\n    target_dir = Path(target_directory)\n    if not target_dir.exists():\n        print(\"Target directory does not exist. Creating...\")\n        os.makedirs(target_dir)\n    else:\n        print(\"Target directory already exists.\")\n\n    # create a list of all files in the source directory\n    source_files = os.listdir(source_directory)\n    # remove directories and filter to get only files\n    source_files = [f for f in source_files if os.path.isfile(os.path.join(source_directory, f))]\n\n    # create a dictionary to store the file paths and extensions\n    file_map = {}\n    for file in source_files:\n        # get file extension\n        ext = os.path.splitext(file)[1].lower()\n        if ext not in file_map:\n            file_map[ext] = []\n        # create a file path by joining the source directory and the file\n        file_path = os.path.join(source_directory, file", "compilation_passed": false, "time": 0.00021505355834960938, "tests_passed": false, "error": "SyntaxError"}
{"code": "source_directory = Path(source_directory)\n    target_directory = Path(target_directory)\n    if not source_directory.exists():\n        raise FileNotFoundError(f\"Source directory '{source_directory}' does not exist.\")\n    if target_directory.exists():\n        # Check if the target directory is empty\n        if len(list(target_directory.iterdir())) == 0:\n            target_directory.mkdir()\n        else:\n            print(\"Target directory is not empty. Deleting files in target directory...\")\n            for file in target_directory.iterdir():\n                file.unlink()\n\n    # Iterate over files in the source directory\n    file_count = 0\n    for file in source_directory.rglob('*.txt'):\n        # Check if the file contains text\n        if not file.read_text().isspace():\n            file_name = file.name.replace('.txt', '')\n            file_path = Path(f'{file.parent}/{file_name}.csv')\n            with pd.ExcelWriter(str(", "compilation_passed": false, "time": 0.00023818016052246094, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Check if source_directory exists\n    if not os.path.exists(source_directory):\n        raise FileNotFoundError(f\"Directory {source_directory} does not exist!\")\n\n    # Get list of files in the source directory\n    source_files = [file for file in Path(source_directory).iterdir() if file.is_file()]\n    count = 0  # To keep track of the number of files successfully converted to CSV\n\n    # Iterate through the list of files\n    for file in source_files:\n        # Extract the extension of the file\n        ext = os.path.splitext(file)[1]\n        if ext == '.txt':\n            # Convert text files to CSV\n            df = pd.read_csv(file, header=None, index_col=None, encoding='utf-8')\n            df.to_csv(file.with_suffix('.csv'), index=False)\n            count += 1\n        elif ext == '.docx':\n            # Convert docx files to CSV\n            docx_file = docx.Document", "compilation_passed": true, "time": 0.0013020038604736328, "tests_passed": false, "error": "No module named 'exceptions'"}
{"code": "# Check if source directory exists\n    source_directory = Path(source_directory).expanduser()\n    if not os.path.exists(source_directory):\n        raise FileNotFoundError(f\"Source directory {source_directory} not found.\")\n\n    # Check if target directory exists\n    target_directory = Path(target_directory).expanduser()\n    if not os.path.exists(target_directory):\n        os.makedirs(target_directory)\n\n    # Get list of files in source directory\n    source_directory_files = [f for f in Path(source_directory).glob('*') if f.is_file()]\n\n    # Loop through each file\n    count = 0\n    for source_file in source_directory_files:\n\n        # Get file's name, extension, and path\n        file_name = source_file.name\n        extension = Path(source_file.name).suffix[1:]\n\n        # Convert file to CSV using the appropriate converter\n        if extension.lower() == \"txt\":\n            with open(source_file, 'r", "compilation_passed": false, "time": 9.918212890625e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not os.path.isdir(source_directory):\n        raise FileNotFoundError('Source directory not found')\n\n    file_count = 0\n\n    for file_path in Path(source_directory).glob('**/*.*'):\n        extension = file_path.suffix.lower()\n\n        if extension in ['.txt', '.docx', '.xlsx', '.csv']:\n            file_count += 1\n\n            if extension == '.docx':\n                doc = docx.Document(file_path)\n                text = '\\n'.join([paragraph.text for paragraph in doc.paragraphs])\n            elif extension == '.txt':\n                with open(file_path, 'r', encoding='utf-8') as file:\n                    text = file.read()\n            else:\n                # Open the file in read mode with binary encoding\n                with open(file_path, 'rb') as file:\n                    # Read the file data\n                    file_data = file.read()\n\n                    if extension == '.xlsx':\n", "compilation_passed": false, "time": 0.0002281665802001953, "tests_passed": false, "error": "IndentationError"}
{"code": "if not os.path.isdir(source_directory):\n        raise FileNotFoundError(f\"Directory '{source_directory}' not found.\")\n\n    counter = 0\n\n    for file in Path(source_directory).rglob(r'*.txt'):\n        # Save CSV with content from text file\n        # pd.read_text(file.name, encoding=\"utf-8\").to_csv(f\"{target_directory}/{file.stem}.csv\")\n\n        # Convert to CSV using Python-docx library\n        doc = docx.Document(file.resolve())\n        text = \" \".join([p.text for p in doc.paragraphs])\n        with open(f\"{target_directory}/{file.stem}.csv\", mode='w', encoding='utf-8') as csv_file:\n            writer = csv.writer(csv_file, delimiter=' ')\n            writer.writerow([text])\n            counter += 1\n\n    for file in Path(source_directory).rglob(r'*.docx", "compilation_passed": false, "time": 9.584426879882812e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "csv_files = 0\n    for root, dirs, files in os.walk(source_directory):\n        for file_name in files:\n            file_path = os.path.join(root, file_name)\n            if file_name.endswith('.txt') or file_name.endswith('.docx') or \\\n                    file_name.endswith('.xlsx') or file_name.endswith('.csv'):\n                if file_name.endswith('.txt'):\n                    with open(file_path, 'r') as file:\n                        text = file.read()\n                elif file_name.endswith('.docx'):\n                    docx_doc = docx.Document(file_path)\n                    text = '\\n'.join([\n                        paragraph.text\n                        for paragraph in docx_doc.paragraphs\n                    ])\n                elif file_name.endswith('.xlsx'):\n                    wb = load_workbook(file_path)\n                    sheet_name = wb", "compilation_passed": true, "time": 0.0025179386138916016, "tests_passed": false, "error": "No module named 'exceptions'"}
{"code": "files = list(Path(source_directory).glob('*.txt'))\n    files.extend(Path(source_directory).glob('*.docx'))\n    files.extend(Path(source_directory).glob('*.xlsx'))\n    files.extend(Path(source_directory).glob('*.csv'))\n\n    file_counter = 0\n    for file_path in files:\n        try:\n            if file_path.suffix == '.docx':\n                docx_file = docx.Document(file_path)\n                text = ' '.join(paragraph.text for paragraph in docx_file.paragraphs)\n\n                with open(f\"{target_directory}/{file_path.stem}.csv\", 'w', encoding='utf-8') as csv_file:\n                    csv_writer = csv.writer(csv_file, delimiter=',', quotechar='\"', quoting=csv.QUOTE_NONNUMERIC)\n                    csv_writer.writerow(['Text'])\n                    csv_writer.writerow([text", "compilation_passed": false, "time": 0.00027489662170410156, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not os.path.isdir(source_directory):\n        raise FileNotFoundError(f\"{source_directory} is not a valid path\")\n    converted_files = 0\n    for file in os.listdir(source_directory):\n        if file.endswith(('.txt', '.docx', '.xlsx', '.csv')):\n            source = os.path.join(source_directory, file)\n            target = os.path.join(target_directory, f\"{file.split('.')[0]}.csv\")\n            if os.path.isfile(source):\n                if os.path.isfile(target):\n                    os.remove(target)\n                try:\n                    if file.endswith(\".txt\"):\n                        with open(source, mode=\"r\", encoding=\"utf-8\") as file_object:\n                            lines = file_object.readlines()\n                            df = pd.DataFrame({\"Text\": lines})\n                    elif file.endswith(\".docx\"):\n", "compilation_passed": false, "time": 0.0002491474151611328, "tests_passed": false, "error": "IndentationError"}
{"code": "# Check if the source directory exists\n    if not os.path.exists(source_directory):\n        raise FileNotFoundError('The source directory does not exist.')\n\n    # Check if the target directory exists\n    target_directory = os.path.abspath(target_directory)\n    if not os.path.exists(target_directory):\n        os.makedirs(target_directory)\n\n    # Initialize variables\n    file_count = 0\n    text_count = 0\n\n    # Create a Pandas dataframe for the CSV output\n    df = pd.DataFrame({'Text': []})\n\n    for source_file in Path(source_directory).iterdir():\n        if source_file.name.endswith(('.txt', '.docx')):\n            text = open_text_file(source_file.name)\n            df.loc[len(df.index)]['Text'] = text\n            file_count += 1\n\n    # Write the Pandas dataframe to CSV\n    df.to_csv(os.path.join(target_directory, 'text", "compilation_passed": false, "time": 9.322166442871094e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "file_names = os.listdir(source_directory)\n    file_paths = [os.path.join(source_directory, file_name) for file_name in file_names]\n\n    if not os.path.isdir(target_directory):\n        os.makedirs(target_directory)\n\n    num_converted = 0\n    for file_path in file_paths:\n        file_name, file_extension = os.path.splitext(file_path)\n        if file_extension in ['.txt', '.docx', '.xlsx', '.csv']:\n            if file_extension == '.txt':\n                with open(file_path, 'r', encoding='utf-8') as f:\n                    data = f.read()\n                    pd.DataFrame({'Text': [data]}).to_csv(\n                        os.path.join(target_directory, file_name + '.csv'),\n                        index=False)\n                    num_converted += 1\n            elif file_extension in ['.docx', '", "compilation_passed": false, "time": 9.894371032714844e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Create a pathlib object for the source directory\n    source_dir = Path(source_directory)\n\n    # Check if the source directory exists\n    if source_dir.exists():\n        # Get a list of all the files in the source directory\n        file_list = list(source_dir.rglob('*.*'))\n\n        # Check if the target directory exists\n        target_dir = Path(target_directory)\n        if not target_dir.exists():\n            target_dir.mkdir()\n\n        # Count the number of converted files\n        count = 0\n\n        # Iterate over all the files in the source directory\n        for source_file in file_list:\n            # Check if the file is a text file or an Excel spreadsheet\n            if source_file.suffix in ['.txt', '.docx', '.xlsx', '.csv']:\n                # Create a pathlib object for the target file\n                target_file = target_dir / source_file.name[:-4] + '.csv'\n\n                # Check if the target file exists and has the same name as", "compilation_passed": true, "time": 0.0012700557708740234, "tests_passed": false, "error": "No module named 'exceptions'"}
{"code": "# Create a Path object for the source directory\n    source_dir_path = Path(source_directory)\n    if not source_dir_path.exists():\n        raise FileNotFoundError('Source directory not found: ' + str(source_dir_path))\n\n    # Get all files in the source directory\n    files_in_dir = [file for file in os.listdir(source_directory)\n                    if file.endswith(('.txt', '.docx', '.xlsx', '.csv'))]\n\n    # Create a Path object for the target directory\n    target_dir_path = Path(target_directory)\n    if not target_dir_path.exists():\n        target_dir_path.mkdir()\n    # Get the number of files already in the target directory\n    num_files_in_dir = len([file for file in os.listdir(target_directory)\n                            if file.endswith(('.csv'))])\n\n    # Create a dictionary to store file name and corresponding content as a list\n    file_content = {}\n    for file_name in", "compilation_passed": false, "time": 0.00019884109497070312, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Get the number of files found in the source directory\n    file_count = len(os.listdir(source_directory))\n\n    # If the target directory does not exist, create it\n    if not os.path.exists(target_directory):\n        os.makedirs(target_directory)\n\n    # Loop through each file in the source directory\n    for filename in os.listdir(source_directory):\n        # Get the file's path\n        filepath = os.path.join(source_directory, filename)\n\n        # If the file is not a directory (i.e., it is a file)\n        if os.path.isfile(filepath):\n            # Get the file extension\n            extension = os.path.splitext(filename)[1].lower()\n\n            # Convert the file to a CSV\n            if extension == \".txt\":\n                df = pd.read_text(filepath, encoding=\"utf-8\")\n            elif extension == \".docx\":\n                doc = docx.Document(filepath)\n                df = pd.DataFrame()\n                for i", "compilation_passed": false, "time": 0.00020599365234375, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Create a Path object from the source directory and check its existence\n    source_dir_path = Path(source_directory)\n    if not source_dir_path.exists():\n        raise FileNotFoundError(f\"Source directory '{source_directory}' does not exist.\")\n\n    # Create a Path object from the target directory and check its existence\n    target_dir_path = Path(target_directory)\n    if not target_dir_path.exists():\n        target_dir_path.mkdir(parents=True)\n\n    # Get a list of all files in the source directory\n    files = [f.name for f in source_dir_path.iterdir() if f.is_file() and f.suffix in ['.txt', '.docx', '.xlsx', '.csv']]\n    print(files)\n\n    # Loop through all files in the source directory and convert them to CSV files\n    for file_name in files:\n        source_file = Path(source_dir_path / file_name)\n        csv_file = Path(target_dir_path / f", "compilation_passed": false, "time": 0.00020194053649902344, "tests_passed": false, "error": "SyntaxError"}
{"code": "try:\n        # Check if source directory exists\n        if not os.path.isdir(source_directory):\n            raise FileNotFoundError(f\"Directory {source_directory} not found.\")\n    except Exception as e:\n        print(f\"ERROR: {e}\")\n        return 0\n    try:\n        os.makedirs(target_directory, exist_ok=True)\n    except Exception as e:\n        print(f\"ERROR: {e}\")\n        return 0\n    try:\n        # Create target directory if it doesn't exist\n        if not os.path.isdir(target_directory):\n            os.makedirs(target_directory, exist_ok=True)\n    except Exception as e:\n        print(f\"ERROR: {e}\")\n        return 0\n    # Create a list to store file extensions to convert\n    extensions = ['.txt', '.docx', '.xlsx', '.csv']\n\n    # Check each file in source directory for a matching extension\n    for filename in os.listdir(source_directory):\n        ", "compilation_passed": false, "time": 0.0002262592315673828, "tests_passed": false, "error": "IndentationError"}
