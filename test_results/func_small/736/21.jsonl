{"code": "list_of_modes = []\n    for inner_list in L:\n        mode = stats.mode(inner_list)\n        list_of_modes.append(mode[0])\n    mode = stats.mode(list_of_modes)\n    return mode[0]", "compilation_passed": true, "time": 0.0012612342834472656, "tests_passed": true, "error": null}
{"code": "# TODO: Write your code here", "compilation_passed": true, "time": 0.0005397796630859375, "tests_passed": true, "error": null}
{"code": "flat_list = [num for sublist in L for num in sublist]\n    mode = stats.mode(flat_list)[0][0]\n    return mode", "compilation_passed": true, "time": 0.0007710456848144531, "tests_passed": false, "error": "IndexError"}
{"code": "return np.median(np.reshape(L, (-1)))", "compilation_passed": true, "time": 0.0005707740783691406, "tests_passed": true, "error": null}
{"code": "flat_list = [item for sublist in L for item in sublist]\n    mode = stats.mode(flat_list)[0]\n    return mode", "compilation_passed": true, "time": 0.0010879039764404297, "tests_passed": true, "error": null}
{"code": "# write your code here\n    mode = 0\n    for l in L:\n        for i in l:\n            mode = stats.mode(np.array(l))\n    return mode", "compilation_passed": true, "time": 0.0011489391326904297, "tests_passed": true, "error": null}
{"code": "mode = L[0][0]\n    for i in L:\n        for j in i:\n            if stats.mode(np.array(j))[0] < mode:\n                mode = stats.mode(np.array(j))[0]\n    return mode", "compilation_passed": true, "time": 0.0018749237060546875, "tests_passed": true, "error": null}
{"code": "flat_list = [item for sublist in L for item in sublist]\n    mode = stats.mode(flat_list)\n    return mode[0]", "compilation_passed": true, "time": 0.0010709762573242188, "tests_passed": true, "error": null}
{"code": "L = np.array(L).ravel()\n    mode = stats.mode(L)\n    return mode[0][0]", "compilation_passed": true, "time": 0.0006690025329589844, "tests_passed": false, "error": "IndexError"}
{"code": "modes = list(map(lambda l: stats.mode(l), L))\n    return list(map(lambda mode: mode[0], modes))[0]", "compilation_passed": true, "time": 0.0012700557708740234, "tests_passed": true, "error": null}
{"code": "return np.argmax(np.bincount(np.ravel(L)),0)", "compilation_passed": true, "time": 0.0005998611450195312, "tests_passed": false, "error": "ValueError"}
{"code": "flat_list = [item for sublist in L for item in sublist]\n    mode = stats.mode(flat_list)\n\n    return mode[0]", "compilation_passed": true, "time": 0.001070261001586914, "tests_passed": true, "error": null}
{"code": "x = np.array(L)\n    a = []\n    for i in x:\n        a += i\n    return stats.mode(a)", "compilation_passed": true, "time": 0.0005769729614257812, "tests_passed": false, "error": "ValueError"}
{"code": "mode = max(set(sum(L, [])), key=sum(L, []).count)\n    return mode", "compilation_passed": true, "time": 0.0006620883941650391, "tests_passed": true, "error": null}
{"code": "return stats.mode(np.ravel(L))", "compilation_passed": true, "time": 0.0007038116455078125, "tests_passed": true, "error": null}
{"code": "L = np.array(L)\n    mode = stats.mode(L.flatten())\n    mode = mode[0][0]\n    return mode", "compilation_passed": true, "time": 0.0006771087646484375, "tests_passed": false, "error": "IndexError"}
{"code": "return stats.mode(L)", "compilation_passed": true, "time": 0.0008649826049804688, "tests_passed": true, "error": null}
{"code": "mode = max(stats.mode(L,axis=None))[0][0]\n    return mode", "compilation_passed": true, "time": 0.0006821155548095703, "tests_passed": false, "error": "IndexError"}
{"code": "mode_list = []\n    for i in range(len(L)):\n        for j in range(len(L[i])):\n            mode_list.append(L[i][j])\n    return stats.mode(mode_list)[0]", "compilation_passed": true, "time": 0.0011420249938964844, "tests_passed": true, "error": null}
{"code": "# 1) flatten 'L'\n    L = [element for row in L for element in row]\n    # 2) find mode\n    mode = stats.mode(L)\n    # 3) return the mode\n    return mode[0]", "compilation_passed": true, "time": 0.0010669231414794922, "tests_passed": true, "error": null}
{"code": "# Your code goes here\n    # replace `None` with your code\n    # your code should be exactly of the form\n    # return x\n    L = np.array(L)\n    L = L.flatten()\n    L = np.sort(L)\n    res = 0\n    count_ = 0\n    for i in range(0, len(L)-1):\n        if L[i] == L[i+1]:\n            count_ += 1\n        else:\n            count_ = 0\n        if count_ > count_:\n            res = L[i]\n            count_ = count_\n    return res", "compilation_passed": true, "time": 0.0006897449493408203, "tests_passed": true, "error": null}
{"code": "return stats.mode(L)[0][0]", "compilation_passed": true, "time": 0.0014538764953613281, "tests_passed": false, "error": "ValueError"}
{"code": "return np.mode(L)[0]", "compilation_passed": true, "time": 0.0006091594696044922, "tests_passed": false, "error": "AttributeError"}
{"code": "return np.median([np.median(i) for i in L])", "compilation_passed": true, "time": 0.0006039142608642578, "tests_passed": true, "error": null}
{"code": "def mode(data_list):\n        # Return data_list\uc5d0\uc11c \uac00\uc7a5 \uc77c\ubc18\uc801\uc73c\ub85c \ub098\uc624\ub294 \uac12.\n        # \ub9cc\uc57d \uac00\uc7a5 \uc77c\ubc18\uc801\uc73c\ub85c \ub098\uc624\ub294 \uac12\uc774 \ud558\ub098\ub77c\uba74 \uadf8 \uac12\uc744 \ubc18\ud658\ud55c\ub2e4.\n        # \uadf8 \uc678\uc5d0\ub294 \uc544\ubb34\uac83\ub3c4 \ubc18\ud658\ud558\uc9c0 \uc54a\ub294\ub2e4.\n        # data_list \ub294 \ud3c9\uade0\uc744 \uad6c\ud560 \uc218 \uc5c6\uae30 \ub54c\ubb38\uc5d0 \uc694\uc18c\ub9c8\ub2e4 \uace0\uc720\ud55c \ube48\ub3c4\uc218\ub97c \uad6c\ud55c \ub4a4,\n        # \uac00\uc7a5 \ub192\uc740 \ube48\ub3c4", "compilation_passed": false, "time": 6.890296936035156e-05, "tests_passed": false, "error": "IndentationError"}
{"code": "modes = []\n    for lst in L:\n        m = mode(lst)\n        modes.append(m)\n    return np.median(modes)", "compilation_passed": true, "time": 0.0006239414215087891, "tests_passed": false, "error": "NameError"}
{"code": "x = np.array(L).ravel()\n    mode, _ = stats.mode(x)\n    return mode", "compilation_passed": true, "time": 0.000720977783203125, "tests_passed": false, "error": "ValueError"}
{"code": "return np.nanmedian(np.array(L))", "compilation_passed": true, "time": 0.0005669593811035156, "tests_passed": true, "error": null}
{"code": "modes = []\n\n    for x in L:\n        if len(x) == 1:\n            modes.append(x[0])\n        else:\n            modes.append(stats.mode(x)[0])\n\n    return stats.mode(modes)[0]", "compilation_passed": true, "time": 0.0012967586517333984, "tests_passed": true, "error": null}
{"code": "# -----------------------------------------------------------------------\n    # STUDENTS:\n    #\n    # Complete the task function by completing the function body\n    # and replacing the `pass` statement.\n    #\n    # -----------------------------------------------------------------------\n\n    mode = None\n\n    # -----------------------------------------------------------------------\n    # STUDENTS:\n    #\n    # Modify the code below so that it returns the mode of L.\n    #\n    # -----------------------------------------------------------------------\n\n    mode = None\n\n    # -----------------------------------------------------------------------\n    # STUDENTS:\n    #\n    # Modify the code below so that it returns the mode of L.\n    #\n    # ------------", "compilation_passed": true, "time": 0.0005319118499755859, "tests_passed": true, "error": null}
