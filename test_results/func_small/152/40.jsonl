{"code": "grades = pd.DataFrame({'Name': STUDENTS, 'Average Grade': np.random.randint(0, 100, len(STUDENTS))})\n    grades['Average Grade'] = grades['Average Grade'].astype(float)\n    return grades", "compilation_passed": true, "time": 0.0024611949920654297, "tests_passed": true, "error": null}
{"code": "# Generate a random number between 0 and 100 for each student's grade in each course\n    random.seed(0)\n    grades = pd.DataFrame(columns=STUDENTS)\n\n    for _ in range(len(COURSES)):\n        grades[COURSES[_]] = pd.Series(random.uniform(0, 100), index=STUDENTS)\n\n    # Calculate the average grade for each student across all courses\n    for student in STUDENTS:\n        grades[student] = grades[COURSES].mean()\n\n    return grades[['Name'] + COURSE_COLUMNS + ['Average Grade']]", "compilation_passed": true, "time": 0.006819963455200195, "tests_passed": false, "error": "NameError"}
{"code": "np.random.seed(42)\n    df = pd.DataFrame(index=STUDENTS, columns=COURSES)\n    for student in STUDENTS:\n        grades = [randint(0, 100) for _ in COURSES]\n        average = sum(grades) / len(grades)\n        df.at[student, :] = grades\n        df.at[student, 'Average Grade'] = average\n    return df", "compilation_passed": true, "time": 0.0017170906066894531, "tests_passed": false, "error": "pandas.errors.InvalidIndexError"}
{"code": "# Initialize the random seed\n    random.seed(0)\n\n    # Initialize a dictionary to store student grades\n    student_grades = dict()\n\n    # Initialize the average grade for each student\n    average_grades = dict()\n\n    # Loop through the STUDENTS list to generate random grades for each student\n    for i in range(len(STUDENTS)):\n        student_grades[STUDENTS[i]] = []\n        for j in range(len(COURSES)):\n            student_grades[STUDENTS[i]].append(randint(0, 100))\n\n    # Calculate the average grade for each student\n    for student, grades in student_grades.items():\n        average_grades[student] = round(np.mean(grades), 2)\n\n    # Convert the dicts to a DataFrame\n    df = pd.DataFrame({\n        \"Name\": [student for student in STUDENTS],\n        \"Average Grade\": [average_grades[student] for student in STUDENTS]\n    })\n    return df", "compilation_passed": true, "time": 0.0026929378509521484, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(columns=STUDENTS)\n    for i in range(len(STUDENTS)):\n        df[STUDENTS[i]] = pd.Series(np.random.uniform(0, 100, len(COURSES)))\n    df['Average Grade'] = df.iloc[:, range(len(STUDIES))].mean(axis=1)\n    return df", "compilation_passed": true, "time": 0.001810312271118164, "tests_passed": false, "error": "NameError"}
{"code": "np.random.seed(0)  # Set the seed for reproducibility\n    students = STUDENTS\n    courses = COURSES\n    grades = pd.DataFrame(data=None,\n                          index=students,\n                          columns=courses)\n\n    # Loop over the courses and generate a random grade for each student\n    for course in courses:\n        grades[course] = np.random.uniform(low=0, high=100, size=len(students))\n\n    # Calculate the average grade for each student\n    avg_grades = grades.mean(axis=1)\n\n    # Create a new column for the average grade for all courses\n    grades['Average Grade'] = avg_grades\n\n    return grades", "compilation_passed": true, "time": 0.0021920204162597656, "tests_passed": false, "error": "KeyError"}
{"code": "np.random.seed(0)\n    grades = {}\n    for student in STUDENTS:\n        grades[student] = [randint(0, 100) for _ in COURSE_SLUGS]\n    for i in COURSE_SLUGS:\n        grades[\"Average \" + COURSE_NAMES[i]] = round(np.mean(grades[COURSE_NAMES[i]]), 4)\n\n    grades = pd.DataFrame(grades, index=[0])\n    grades.columns.name = 'Name'\n    return grades[['Name'] + COURSE_SLUGS]", "compilation_passed": true, "time": 0.001148223876953125, "tests_passed": false, "error": "NameError"}
{"code": "np.random.seed(0)\n\n    # Create a random grades dataframe\n    df = pd.DataFrame(\n        index=STUDENTS,\n        columns=[\n            {\n                'Course': c,\n                'Name': s\n            }\n            for c in COURSES\n            for s in STUDENTS\n        ]\n    )\n\n    # Apply the random uniform distribution to each column to generate random grades between 0 and 100\n    df = df.apply(\n        lambda col:\n        np.random.uniform(low=0, high=100, size=len(STUDENTS))\n    )\n\n    # Calculate the average grade for each student across all courses\n    df = (df.groupby(STUDENTS).mean()).round(2)\n\n    # Assign the column names to the DataFrame\n    df.columns = ['Average Grade']\n    return df", "compilation_passed": true, "time": 0.0032570362091064453, "tests_passed": false, "error": "ValueError"}
{"code": "grades = []\n\n    # Generate random grades for each student across all courses\n    for student in STUDENTS:\n        grades_for_student = []\n        for course in COURSES:\n            grade = randint(0, 100)\n            grades_for_student.append(grade)\n        grades.append([student] + grades_for_student + [np.mean(grades_for_student)])\n\n    df = pd.DataFrame(grades, columns=['Name'] + COURSES + ['Average Grade'])\n\n    return df", "compilation_passed": true, "time": 0.003652811050415039, "tests_passed": true, "error": null}
{"code": "grades = pd.DataFrame({'Name': STUDENTS,\n                           'Math': [0] * len(STUDENTS),\n                           'Physics': [0] * len(STUDENTS),\n                           'Chemistry': [0] * len(STUDENTS),\n                           'Biology': [0] * len(STUDENTS),\n                           'English': [0] * len(STUDENTS),\n                           'History': [0] * len(STUDENTS),\n                           'Geography': [0] * len(STUDENTS),\n                           'Computer Science': [0] * len(STUDENTS),\n                           'Average Grade': [0] * len(STUDENTS)})\n    grades.index = np.arange(len(grades))\n    for course in Courses:\n        grades[course] = grades[course].apply(lambda _: randint(0, 100))\n    grades.set_index('Name', inplace=True)\n    grades['Average Grade'] = grades.il", "compilation_passed": true, "time": 0.0014691352844238281, "tests_passed": false, "error": "NameError"}
{"code": "grades = pd.DataFrame(index=STUDENTS, columns=COURSES)\n    for student in grades.index:\n        grades.at[student, 'Name'] = student\n        for course in grades.columns:\n            grades.at[student, course] = randint(0, 100)\n\n    grades['Average Grade'] = grades.iloc[:, 1:].mean(axis=1)\n\n    return grades", "compilation_passed": true, "time": 0.002604246139526367, "tests_passed": true, "error": null}
{"code": "# Generate random grades for each course using a uniform distribution between 0 and 100\n    grades = pd.DataFrame(\n        {name: [randint(0, 100) for _ in range(len(COURSES))] for name in STUDENTS},\n        columns=[\"Name\"] + COURSES)\n\n    # Calculate the average grade across all courses\n    grades[\"Average Grade\"] = grades.mean(axis=\"columns\")\n\n    return grades", "compilation_passed": true, "time": 0.0017819404602050781, "tests_passed": true, "error": null}
{"code": "# Generate a random integer in the range [0, 1000000000] for each student\n    student_grades = {student: [randint(0, 100) for _ in range(len(COURSES))] for student in STUDENTS}\n\n    # Calculate the average grade for each student across all courses\n    student_averages = {student: np.mean(grade) for student, grade in student_grades.items()}\n\n    # Generate a DataFrame with the student names and grades\n    grades = pd.DataFrame(list(student_grades.items()), columns=['Name', 'Grades'])\n\n    # Calculate the average grade for each student across all courses\n    grades['Average Grade'] = [student_averages[student] for _, student_grades in grades['Grades']]\n\n    return grades", "compilation_passed": true, "time": 0.0014657974243164062, "tests_passed": false, "error": "ValueError"}
{"code": "# Generate random grades for each student\n    grades = {}\n    for student in STUDENTS:\n        grades[student] = {}\n        for course in COURSES:\n            grades[student][course] = round(np.random.uniform() * 100, 2)\n\n    # Calculate the average grade across all courses for each student\n    avg_grades = {}\n    for student, grades_per_course in grades.items():\n        avg_grades[student] = round(sum(grades_per_course.values()) / len(COURSES), 2)\n\n    return pd.DataFrame(avg_grades, columns=['Name', 'Average Grade'])", "compilation_passed": true, "time": 0.001631021499633789, "tests_passed": true, "error": null}
{"code": "np.random.seed(0)\n    # Generate random grades for each course\n    grades = {course: np.random.uniform(0, 100, len(STUDENTS)) for course in COURSES}\n    # Calculate average grades for each student\n    averages = {name: np.mean(grades[course] for course in courses) for name, courses in zip(STUDENTS,\n                                                                                             itertools.tee(COURSES,\n                                                                                                               len(STUDENTS)))}\n    # Create a DataFrame with columns for each student's name, their grades for each course, and their average grade\n    return pd.DataFrame({'Name': STUDENTS, 'Grade': [grades[c] for c in COURSES], 'Average Grade': averages.values()})", "compilation_passed": true, "time": 0.001065969467163086, "tests_passed": false, "error": "NameError"}
{"code": "random.seed(0)\n    student_grades = {}\n    for student in STUDENTS:\n        grades = []\n        for course in COURSES:\n            grade = random.uniform(0, 100)\n            grades.append(grade)\n        student_grades[student] = grades\n    student_averages = [sum(student_grades[student])/len(student_grades[student]) for student in student_grades]\n    average_grade = sum(student_averages) / len(student_averages)\n    return pd.DataFrame({'Name':STUDENTS, 'Grade':student_grades, 'Average Grade': student_averages, 'Average Grade':average_grade})", "compilation_passed": true, "time": 0.0012710094451904297, "tests_passed": false, "error": "ValueError"}
{"code": "# Generate random grades for each student for each course using a uniform distribution\n    grades = [randint(0, 100) for _ in range(len(STUDENTS) * len(COURSES))]\n    # Split the grades into student-wise lists and reshape them to the desired shape\n    grades = np.reshape(np.array(grades), (len(STUDENTS), len(COURSES)))\n\n    # Calculate the average grade for each student and assign them to the student's name column\n    average_grades = grades.mean(axis=1)\n    student_names = STUDENTS * len(COURSES)\n    student_names = np.array(student_names)\n    student_names = np.reshape(student_names, (len(STUDENTS), len(COURSES)))\n    student_names = pd.DataFrame(student_names, columns=STUDENTS)\n\n    # Add the student names to the column and the average grade to a new column\n    grades = pd.concat([student_names, grades, average_grad", "compilation_passed": false, "time": 0.00024509429931640625, "tests_passed": false, "error": "SyntaxError"}
{"code": "grades = pd.DataFrame(columns=STUDENTS)\n    for s in STUDENTS:\n        grades[s] = randint(0, 100)\n\n    grades['Average Grade'] = np.mean(grades.values, axis=1)\n    return grades", "compilation_passed": true, "time": 0.001809835433959961, "tests_passed": false, "error": "KeyError"}
{"code": "students = STUDENTS\n    courses = COURSES\n\n    np.random.seed(randint(0, 1000))\n\n    grades = []\n\n    # generate random grades for each student\n    for student in students:\n        grade_list = []\n        for course in courses:\n            grade = np.random.uniform(0, 100)\n            grade_list.append(grade)\n        grade_dict = dict(zip(courses, grade_list))\n        grades.append(grade_dict)\n\n    # calculate average grades for each student\n    average_grades = []\n    for i, student in enumerate(students):\n        total = sum(grades[i].values())\n        average_grade = total/len(grades[i].values())\n        average_grades.append(average_grade)\n\n    # create a DataFrame with student names, grades, and average grade\n    grades_df = pd.DataFrame({\n        'Name': students,\n        'Average Grade': average_grades,\n        'Grades': grades\n", "compilation_passed": false, "time": 0.0002551078796386719, "tests_passed": false, "error": "SyntaxError"}
{"code": "# generate a random seed from a given seed\n    random.seed(123456)\n    # create a DataFrame with the same columns for each student and the list of courses\n    grades = pd.DataFrame({\n        'Name': STUDENTS,\n        'English': [None] * len(STUDENTS),\n        'History': [None] * len(STUDENTS),\n        'Math': [None] * len(STUDENTS),\n        'Physics': [None] * len(STUDENTS),\n        'Biology': [None] * len(STUDENTS),\n        'Chemistry': [None] * len(STUDENTS),\n        'Geography': [None] * len(STUDENTS),\n        'Computer Science': [None] * len(STUDENTS),\n    }, index=STUDENTS)\n    # Iterate over each column (course) and generate random grades for each student\n    for course in grades.columns:\n        for student in grades.index:\n            grades.at[student, course] = np.random.", "compilation_passed": false, "time": 0.00021195411682128906, "tests_passed": false, "error": "SyntaxError"}
{"code": "random.seed(0)\n    random_grades = []\n\n    for student in STUDENTS:\n        grade_list = []\n        for _ in range(len(COURSES)):\n            grade = randint(0, 100)\n            grade_list.append(grade)\n\n        random_grades.append(grade_list)\n\n    grades = pd.DataFrame(random_grades)\n    grades['Name'] = STUDENTS\n\n    for course in COURSES:\n        grades[course] = grades.mean(axis=1)\n\n    grades['Average Grade'] = grades.mean(axis=1)\n\n    return grades", "compilation_passed": true, "time": 0.0022008419036865234, "tests_passed": false, "error": "TypeError"}
{"code": "grades = pd.DataFrame()\n    for student in STUDENTS:\n        course_grades = []\n        for _ in range(randint(1, len(COURSES))):\n            course_grades.append(round(uniform(0, 100), 2))\n        avg = sum(course_grades) / len(course_grades)\n        grades.loc[student] = pd.Series(course_grades, index=COURSES)\n        grades[f'{student} Average'] = avg\n    grades.set_index('Name', inplace=True)\n\n    return grades", "compilation_passed": true, "time": 0.0011487007141113281, "tests_passed": false, "error": "ZeroDivisionError"}
{"code": "grades = pd.DataFrame(columns=['Name']+COURSES)\n    for i, student in enumerate(STUDENTS):\n        grade_dict = {course: randint(0, 100) for course in COURSES}\n        grades.loc[i, 'Name'] = student\n        grades.loc[i, [course for course in COURSES]] = [grade_dict[course] for course in COURSES]\n    grades['Average Grade'] = grades[COURSES].apply(np.mean)\n    return grades", "compilation_passed": true, "time": 0.00995182991027832, "tests_passed": true, "error": null}
{"code": "# Generate random grades for each student across each course using a uniform distribution between 0 and 100\n    grades = [\n        [randint(0, 100) for _ in range(len(COURSES))]\n        for _ in range(len(STUDENTS))\n    ]\n\n    # Calculate the average grade across all courses for each student\n    avg_grades = []\n    for student_grades in grades:\n        avg_grades.append(sum(student_grades) / len(student_grades))\n\n    # Create the DataFrame\n    grades = pd.DataFrame()\n    grades['Name'] = STUDENTS\n    grades.set_index('Name', inplace=True)\n    for i, course in enumerate(COURSES):\n        grades[course] = pd.Series(grades['Name']).map({STUDENTS[j]: grades[j][i] for j in range(len(STUDENTS))})\n    grades['Average Grade'] = pd.Series(avg_grades).map({STUDENTS[j]:", "compilation_passed": false, "time": 0.00028228759765625, "tests_passed": false, "error": "SyntaxError"}
{"code": "students = STUDENTS\n    courses = COURSES\n\n    # Generate a list of grades for each student and store them in a list\n    grades = []\n    for student in students:\n        # Generate a list of grades for the student\n        student_grades = []\n        for course in courses:\n            # Generate a random grade for the student in the course\n            student_grades.append(randint(0, 100))\n\n        # Add the student and their grades to the list\n        grades.append([student] + student_grades)\n\n    # Calculate the average grades for each student\n    average_grades = []\n    for student_grades in grades:\n        average_grades.append(sum(student_grades[1:])/len(student_grades[1:]))\n\n    # Create a pandas DataFrame with the calculated grades\n    grades_df = pd.DataFrame(grades)\n    grades_df.columns = ['Name'] + courses\n    grades_df['Average Grade'] = average_grades\n    return grades_df", "compilation_passed": true, "time": 0.004029035568237305, "tests_passed": true, "error": null}
{"code": "# Generate a random seed based on the current time\n    random.seed(datetime.now().timestamp())\n\n    # Generate the data using the seed and numpy's random function\n    data = [random.randint(0, 100) for _ in range(len(STUDENTS) * len(COURSES))]\n    data_frame = pd.DataFrame({\n        'Name': STUDENTS,\n        'Grade': data\n    })\n\n    # Calculate the average grade for each student across all courses\n    avg_grade_list = [sum(data_frame.loc[data_frame['Name'] == name, 'Grade']) / len(COURSES)\n                      for name in STUDENTS]\n\n    data_frame['Average Grade'] = avg_grade_list\n    return data_frame", "compilation_passed": true, "time": 0.0010249614715576172, "tests_passed": false, "error": "NameError"}
{"code": "random.seed(0)\n    # Create a DataFrame with columns for each student's name, and the corresponding number of columns for the number of courses\n    grades_df = pd.DataFrame(STUDENTS, columns=[\"Name\"]).merge(pd.DataFrame([[randint(0, 100) for _ in Courses]] * len(STUDENTS), index=STUDENTS), how=\"left\", left_index=True, right_index=True)\n    # Compute the average grade for each student\n    grades_df['Average Grade'] = grades_df.mean(axis=1)\n    # Drop any students who have no grades\n    grades_df.dropna(axis=0, how=\"any\", inplace=True)\n    return grades_df", "compilation_passed": true, "time": 0.0010521411895751953, "tests_passed": false, "error": "NameError"}
{"code": "# Create a dictionary to store grades for each student\n    grades = {}\n    for student in STUDENTS:\n        grades[student] = {}\n\n    # Generate random grades for each student and add to dictionary\n    for student in STUDENTS:\n        for course in COURSES:\n            grades[student][course] = randint(0, 100)\n\n    # Calculate average grades for each student across all courses\n    grades_df = pd.DataFrame(grades)\n    average_grades = grades_df.mean()\n\n    # Create a DataFrame to store student information and average grade\n    students = []\n    for student in STUDENTS:\n        students.append(\n            [student, grades[student]['Math'], grades[student]['Physics'], grades[student]['Chemistry'],\n             grades[student]['Biology'], grades[student]['English'], grades[student]['History'],\n             grades[student]['Geography'], grades[student]['Computer Science'], average_grades[student]])\n\n    # Convert to DataFrame\n    stud", "compilation_passed": true, "time": 0.00154876708984375, "tests_passed": false, "error": "NameError"}
{"code": "random.seed(0)\n    df = pd.DataFrame({\n        'Name': STUDENTS,\n        'Math': np.random.uniform(low=0, high=100, size=len(STUDENTS)),\n        'Physics': np.random.uniform(low=0, high=100, size=len(STUDENTS)),\n        'Chemistry': np.random.uniform(low=0, high=100, size=len(STUDENTS)),\n        'Biology': np.random.uniform(low=0, high=100, size=len(STUDENTS)),\n        'English': np.random.uniform(low=0, high=100, size=len(STUDENTS)),\n        'History': np.random.uniform(low=0, high=100, size=len(STUDENTS)),\n        'Geography': np.random.uniform(low=0, high=100, size=len(STUDENTS)),\n        'Computer Science': np.random.uniform(low=0, high", "compilation_passed": false, "time": 0.00027489662170410156, "tests_passed": false, "error": "SyntaxError"}
{"code": "random.seed(0)\n    grades = pd.DataFrame(np.random.uniform(low=0, high=100, size=(8, 8)),\n                          index=[STUDENTS],\n                          columns=[COURSES])\n    grades.loc['Average Grade'] = grades.mean(axis=1)\n    return grades", "compilation_passed": true, "time": 0.002585887908935547, "tests_passed": false, "error": "KeyError"}
