{"code": "df = pd.DataFrame(np.random.randn(length, 5), columns=COLUMNS, index=range(length))\n    return df", "compilation_passed": true, "time": 0.0008518695831298828, "tests_passed": true, "error": null}
{"code": "# Initialize random number generator\n    np.random.seed(0)\n\n    # Generate a random DataFrame of specified length with random values\n    df = pd.DataFrame(np.random.uniform(-1, 1, (length, 5)), columns=COLUMNS)\n\n    # Record the data in a dictionary\n    data = {}\n    for column_name in COLUMNS:\n        data[column_name] = np.asarray(df[column_name].tolist())\n\n    return data", "compilation_passed": true, "time": 0.0011720657348632812, "tests_passed": true, "error": null}
{"code": "# Create a random DataFrame with specified columns and specified length.\n    df = pd.DataFrame(np.random.random((length, 5)), columns=COLUMNS)\n\n    return df", "compilation_passed": true, "time": 0.0008058547973632812, "tests_passed": true, "error": null}
{"code": "data_list = []\n\n    for i in range(length):\n        data_list.append(np.random.uniform(0, 1, 5))\n    data = pd.DataFrame(data_list, columns=COLUMNS)\n    return data", "compilation_passed": true, "time": 0.0014739036560058594, "tests_passed": true, "error": null}
{"code": "np.random.seed(0)\n    df = pd.DataFrame(np.random.rand(5, 5))\n    return df", "compilation_passed": true, "time": 0.0008063316345214844, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(np.random.rand(length, length), columns=COLUMNS)\n    df = np.array(df)\n    return df", "compilation_passed": true, "time": 0.0007784366607666016, "tests_passed": true, "error": null}
{"code": "data = {}\n\n    for col in COLUMNS:\n        data[col] = np.random.randn(length)\n\n    return pd.DataFrame(data=data)", "compilation_passed": true, "time": 0.0009019374847412109, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(np.random.randn(length, len(COLUMNS)))\n    df.to_csv(path_or_data=None, sep=',', na_rep='NaN', float_format='%.5g', columns=COLUMNS, header=True, index=False, index_label=None, encoding=None, mode='w', encoding=None, compression=None, path_or_buf=None, linesep='')\n    return df", "compilation_passed": false, "time": 0.0004439353942871094, "tests_passed": false, "error": "SyntaxError"}
{"code": "return pd.DataFrame(np.random.rand(length, len(COLUMNS)), columns=COLUMNS)", "compilation_passed": true, "time": 0.0007708072662353516, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(pd.Series(np.random.rand(length)))\n    df.columns = COLUMNS\n    return df", "compilation_passed": true, "time": 0.0017790794372558594, "tests_passed": false, "error": "ValueError"}
{"code": "df = pd.DataFrame(np.random.randn(length, len(COLUMNS)))\n    df.columns = COLUMNS\n    return df", "compilation_passed": true, "time": 0.0008831024169921875, "tests_passed": true, "error": null}
{"code": "data = np.random.randint(low=0, high=10, size=(length, len(COLUMNS)))\n    df = pd.DataFrame(data, columns=COLUMNS)\n    return df", "compilation_passed": true, "time": 0.000926971435546875, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(np.random.randn(length, 5), columns=COLUMNS)\n    return df", "compilation_passed": true, "time": 0.0007951259613037109, "tests_passed": true, "error": null}
{"code": "# Generate random data\n    df = pd.DataFrame(\n        data=np.random.randint(1, 100, size=length * len(COLUMNS)).reshape(length, len(COLUMNS)),\n        columns=COLUMNS\n    )\n    return df", "compilation_passed": true, "time": 0.0008308887481689453, "tests_passed": true, "error": null}
{"code": "data = {column: np.random.random(length) for column in COLUMNS}\n    df = pd.DataFrame(data=data)\n    return df", "compilation_passed": true, "time": 0.0009710788726806641, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(columns=COLUMNS)\n    df['Column1'] = np.random.uniform(-1, 1, length)\n    df['Column2'] = np.random.uniform(-2, 2, length)\n    df['Column3'] = np.random.normal(0, 1, length)\n    df['Column4'] = np.random.poisson(10, length)\n    df['Column5'] = np.random.choice(['A', 'B', 'C', 'D', 'E'], length)\n    return df", "compilation_passed": true, "time": 0.0032608509063720703, "tests_passed": false, "error": "TypeError"}
{"code": "# Generate random data with numpy\n    df_data = np.random.randint(0, 10, (length, 5))\n    df = pd.DataFrame(df_data)\n    for col in df.columns:\n        df[col] = df[col] * 0.5\n    df.set_index(COLUMNS, inplace=True)\n    return df", "compilation_passed": true, "time": 0.0013799667358398438, "tests_passed": false, "error": "KeyError"}
{"code": "df = pd.DataFrame()\n    df[COLUMNS] = np.random.randint(0, 100, (length, len(COLUMNS)))\n\n    return df", "compilation_passed": true, "time": 0.002827167510986328, "tests_passed": true, "error": null}
{"code": "return pd.DataFrame(np.random.random_sample(length).reshape(length, 5))", "compilation_passed": true, "time": 0.000659942626953125, "tests_passed": false, "error": "ValueError"}
{"code": "df = pd.DataFrame(np.random.rand(length, len(COLUMNS)), columns=COLUMNS)\n    return df", "compilation_passed": true, "time": 0.0008561611175537109, "tests_passed": true, "error": null}
{"code": "random.seed(0)\n    df = pd.DataFrame([random.randint(1, 1000) for i in range(length)])\n    df.columns = COLUMNS\n    return df", "compilation_passed": true, "time": 0.0006458759307861328, "tests_passed": false, "error": "NameError"}
{"code": "df = pd.DataFrame(np.random.randn(length, len(COLUMNS)),\n                      columns=COLUMNS)\n\n    return df", "compilation_passed": true, "time": 0.0007781982421875, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(\n        index=np.random.randint(0, 100, size=length),\n        columns=COLUMNS,\n        data=np.random.randint(100, size=(length, 5)))\n    return df", "compilation_passed": true, "time": 0.0013649463653564453, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame(np.random.rand(length, len(COLUMNS)))\n    return df", "compilation_passed": true, "time": 0.0007181167602539062, "tests_passed": true, "error": null}
{"code": "data = np.random.rand(length, len(COLUMNS))\n    return pd.DataFrame(data, columns=COLUMNS)", "compilation_passed": true, "time": 0.0007860660552978516, "tests_passed": true, "error": null}
{"code": "# generate a dataframe\n    df = pd.DataFrame(np.random.random([length, len(COLUMNS)]))\n    # record the data\n    np.save(\"data.npy\", df)\n    return df", "compilation_passed": true, "time": 0.0010619163513183594, "tests_passed": true, "error": null}
{"code": "# Generate a Pandas DataFrame with specified length and random data\n    df = pd.DataFrame(np.random.random(length), columns=COLUMNS)\n    return df", "compilation_passed": true, "time": 0.0008461475372314453, "tests_passed": false, "error": "ValueError"}
{"code": "# Create a random 5 x 5 dataframe\n    df = pd.DataFrame(np.random.randn(5, 5), columns=COLUMNS)\n    return df", "compilation_passed": true, "time": 0.0007760524749755859, "tests_passed": true, "error": null}
{"code": "# Generate a DataFrame with specified length and random data\n    data = np.random.rand(length, len(COLUMNS))\n    df = pd.DataFrame(data=data, columns=COLUMNS)\n    # Record the data using numpy\n    return np.asarray(df.values, dtype=int)", "compilation_passed": true, "time": 0.0007791519165039062, "tests_passed": true, "error": null}
{"code": "# Create a random numpy array\n    rand_array = np.random.randn(length, length)\n\n    # Create a pandas DataFrame from the numpy array\n    df = pd.DataFrame(rand_array, columns=COLUMNS, index=COLUMNS)\n    return df", "compilation_passed": true, "time": 0.0009000301361083984, "tests_passed": false, "error": "ValueError"}
