{"code": "if seed is not None:\n        random.seed(seed)\n\n    def convert_to_uppercase(char):\n        return random.choice([char.upper(), char])\n\n    def preprocess_text(text):\n        # Replace spaces with underscores\n        text = text.replace(\" \", \"_\")\n\n        # Replace tabs and newlines with underscores\n        text = text.replace(\"\\t\", \"__\")\n        text = text.replace(\"\\n\", \"___\")\n\n        # Convert special characters to punctuation\n        text = ''.join(char if char.isalnum() else string.punctuation for char in text)\n\n        # Randomize casing of characters\n        text = ''.join(convert_to_uppercase(char) for char in text)\n\n        return text\n\n    return preprocess_text(text)", "compilation_passed": true, "time": 0.0016450881958007812, "tests_passed": true, "error": null}
{"code": "# Remove special characters and replace punctuation\n    text = re.sub(r'[^\\w\\s]+', '', text)\n\n    # Replace spaces with underscores\n    text = text.replace(' ', '_')\n    text = text.replace('\\t', '__')\n    text = text.replace('\\n', '___')\n\n    # Randomize casing\n    rnd = random.Random(seed)\n    for c in text:\n        if rnd.random() < 0.5:\n            text = text.replace(c, c.upper())\n\n    return text", "compilation_passed": true, "time": 0.0012857913970947266, "tests_passed": true, "error": null}
{"code": "# Create a custom random module with a specific seed\n    random.seed(seed)\n\n    # Create a custom random module with a specific seed\n    random.seed(seed)\n\n    # Define special characters to be replaced\n    special_characters = set(string.punctuation) - set(\" \\n\\t\\r\")\n\n    # Replace all special characters with underscores\n    for character in special_characters:\n        text = text.replace(character, '_')\n\n    # Replace all spaces, tabs, and newlines with underscores\n    for character in \" \\n\\t\":\n        text = text.replace(character, '_')\n\n    # Create a list of tuples (character, case) to apply to the text\n    cases = [(character, random.choice((string.uppercase, string.lowercase)))\n             for character in string.printable if character not in string.whitespace]\n\n    # Generate a random permutation of the list of tuples\n    random.shuffle(cases)\n\n    # Replace characters in the text with cased ones from the permutation\n    for character, case in", "compilation_passed": false, "time": 0.0002200603485107422, "tests_passed": false, "error": "SyntaxError"}
{"code": "special_chars = '~!@#$%^&*()_+[]{}:;\",.?/\\'\"'\n    punctuations = string.punctuation + special_chars\n    preprocessed_text = []\n    for char in text:\n        if char.isalnum() or char in punctuations:\n            preprocessed_text.append(char)\n        elif char.isspace():\n            preprocessed_text.append('___')\n        else:\n            preprocessed_text.append('__')\n\n    random.seed(seed)\n    for i in range(len(preprocessed_text)):\n        if random.random() < 0.5:\n            preprocessed_text[i] = preprocessed_text[i].upper()\n\n    return ''.join(preprocessed_text)", "compilation_passed": true, "time": 0.0012297630310058594, "tests_passed": true, "error": null}
{"code": "import re\n    import string\n    import random\n\n    special_chars = string.punctuation\n    special_chars = list(special_chars)\n\n    if seed is not None:\n        random.seed(seed)\n\n    normalized_text = \"\"\n    for char in text:\n        if char in special_chars:\n            normalized_text += ' '\n        else:\n            normalized_text += char\n\n    normalized_text = re.sub(r\"\\s+\", '___', normalized_text)\n    normalized_text = re.sub(r\"\\s\", '_', normalized_text)\n\n    random_chars = [random.choice((char.upper() if random.randint(0, 1) else char) for char in normalized_text) for _ in\n                   range(len(normalized_text))]\n    random_text = ''.join(random_chars)\n\n    return random_text", "compilation_passed": true, "time": 0.0013532638549804688, "tests_passed": false, "error": "TypeError"}
{"code": "# Create a custom random.Random instance using the given seed\n    random = random.Random(seed)\n\n    # Remove special characters and convert to lowercase\n    text = re.sub('[^A-Za-z ]', '', text.lower())\n\n    # Normalize whitespace\n    text = re.sub('\\s+', '_', text)\n\n    # Convert to uppercase with a 50% probability\n    for char in text:\n        if random.randint(0, 100) < 50:\n            char = char.upper()\n        text = text.replace(char, char.upper())\n\n    return text", "compilation_passed": true, "time": 0.001149892807006836, "tests_passed": false, "error": "UnboundLocalError"}
{"code": "random.seed(seed)\n\n    text = text.replace(\"\\n\", \"_\").replace(\"\\r\", \"_\").replace(\"\\t\", \"__\")\n    text = text.translate(str.maketrans(string.punctuation, \"_\" * len(string.punctuation)))\n    text = \"\".join(\n        random.choice([x.upper(), x.lower()]) if random.random() < 0.5 else x\n        for x in text if not x.isspace()\n    )\n    return text", "compilation_passed": true, "time": 0.0011870861053466797, "tests_passed": true, "error": null}
{"code": "special_chars = set(string.punctuation) - set(\" \")\n    special_chars = list(special_chars)\n    # convert all punctuation to special chars\n    for i in range(len(text)):\n        if text[i] in special_chars:\n            text = text.replace(text[i], text[i] + \"_\" + \"_\" * (i + 1))\n    # replace multiple spaces with single spaces\n    text = re.sub(\" +\", \" \", text).strip()\n    # change case\n    text = text.swapcase()\n    for i in range(len(text)):\n        if i <= len(text):\n            if random.random() < 0.5:\n                text = text[:i] + text[i].upper() + text[i + 1:]\n    return text", "compilation_passed": true, "time": 0.0012898445129394531, "tests_passed": true, "error": null}
{"code": "# Split the text into words and punctuation marks\n    words = text.split()\n    special_chars = string.punctuation\n    special_chars_split = special_chars.split()\n    special_chars_replace = special_chars_split + list('_') + list('__') + list('___')\n\n    random.seed(seed)\n\n    preprocessed_words = []\n\n    for word in words:\n        new_word = []\n        for char in word:\n            if char in special_chars:\n                # Randomize casing if it's a special character\n                new_word.append(random.choice(['_', '_', '_']))\n                new_word.append(random.choice([char.upper() if random.random() < 0.5 else char.lower() for char in char]))\n            elif char.isspace():\n                new_word.append('_' * len(char))\n            elif char in special_chars_replace:\n                new_word.append(random.choice(special_chars_replace))\n            else:\n                new_word.append(char)\n", "compilation_passed": true, "time": 0.0013370513916015625, "tests_passed": false, "error": "TypeError"}
{"code": "if seed is not None:\n        random.seed(seed)\n    # Step 1: Remove special characters\n    text = re.sub(r'[^\\w\\s]', '', text)\n\n    # Step 2: Normalize whitespace\n    text = ' '.join(text.split())\n\n    # Step 3: Randomly casing characters\n    casing_probability = random.randint(0, 100) / 100\n    if casing_probability >= 0.5:\n        text = text.upper()\n\n    return text", "compilation_passed": true, "time": 0.0011298656463623047, "tests_passed": true, "error": null}
{"code": "random.seed(seed)\n\n    special_chars = re.compile('[^a-zA-Z0-9_]')\n\n    def replace_spaces(match):\n        return f'{match.group(0).replace(\" \", \"_\")}'\n\n    def randomize_casing(match):\n        if random.random() < 0.5:\n            return match.group(0).upper()\n        else:\n            return match.group(0).lower()\n\n    text = special_chars.sub(replace_spaces, text)\n    return re.sub(r'\\s', '_', re.sub(r'\\s+', '__', re.sub(r'\\n', '___', text))).translate(str.maketrans(string.ascii_letters, string.ascii_letters+string.digits+'_')).translate(str.maketrans(string.punctuation, f'{string.digits}_{string.ascii_letters}_')).translate(str.maketrans(string.punctuation, f'{string.digits}_{string", "compilation_passed": false, "time": 0.00011277198791503906, "tests_passed": false, "error": "SyntaxError"}
{"code": "if seed:\n        random.seed(seed)\n\n    result = \"\"\n    for c in text:\n        if c.isalnum() or c.isspace():\n            result += c\n        elif c in string.punctuation:\n            result += \"_\" + (\"\".join(random.choices(string.ascii_letters, k=random.randint(2, 4)))).upper()\n        elif c.isspace():\n            result += \"___\"\n        else:\n            result += \"__\"\n\n    return result", "compilation_passed": true, "time": 0.0011699199676513672, "tests_passed": true, "error": null}
{"code": "special_chars = string.punctuation.replace('_', '') + ' '  # Remove underscore character and space characters\n    special_chars = set(special_chars)  # Convert special_chars string into a set\n    re_pattern = f'[{re.escape(string.punctuation+\" \"+string.whitespace)}]'  # Regex pattern for special characters\n    special_chars = sorted(list(special_chars))  # Convert special_chars set into a list and sort it\n    re_pattern = '[' + re_pattern + ']'\n\n    # Regex function to replace special characters with underscores\n    def repl_func(match):\n        return '_' * len(match.group(0))\n\n    # Normalization function\n    def normalize_func(match):\n        return match.group(0).replace(' ', '_')\n\n    # Random casing function\n    def random_func(match):\n        if random.random() < 0.5:\n            return match.group(0).upper()\n        else:\n            return match.group(0).lower", "compilation_passed": true, "time": 0.0013320446014404297, "tests_passed": false, "error": "TypeError"}
{"code": "if seed is not None:\n        random.seed(seed)\n\n    # remove special characters and normalize whitespace\n    text = re.sub(r'[^\\w\\s]', ' ', text)\n    text = re.sub(r'\\s+', ' ', text)\n\n    # replace spaces with underscores\n    text = re.sub(r'\\s+', '_', text)\n\n    # randomize casing with 50% probability\n    result = ''\n    for char in text:\n        if random.random() > 0.5:\n            result += char.upper()\n        else:\n            result += char.lower()\n\n    return result", "compilation_passed": true, "time": 0.0011582374572753906, "tests_passed": true, "error": null}
{"code": "# 1. Remove special characters by replacing them with string.whitespace.\n    # 2. Normalize whitespace by replacing consecutive whitespace with a single whitespace.\n    # 3. Replace special characters by string.whitespace.\n    # 4. Remove any consecutive whitespaces from the text.\n    # 5. Convert the text to lowercase, capitalize a random number of characters, and shuffle the characters randomly.\n    # 6. Return the preprocessed text.\n\n    punctuation_pattern = re.compile(r'[^a-zA-Z\\s]')\n    normalize_whitespace_pattern = re.compile(r'\\s{2,}')\n\n    punctuation_text = punctuation_pattern.sub(' ', text)\n    normalize_whitespace_text = normalize_whitespace_pattern.sub(' ', punctuation_text)\n    special_text = string.punctuation.replace(' ', '').replace('\\n', '').replace('\\t', '')\n    special_text = special_text.replace(' ', '_')\n\n", "compilation_passed": true, "time": 0.0011861324310302734, "tests_passed": false, "error": "TypeError"}
{"code": "if seed is not None:\n        random.seed(seed)\n\n    # Remove special characters and replace whitespace with underscores\n    text = re.sub(r'[^\\w\\s]', '', text)\n    text = text.replace(' ', '_').replace('\\t', '__').replace('\\n', '___')\n\n    # Randomize casing with a 50% probability\n    for char in text:\n        if random.random() < 0.5:\n            char = char.upper()\n        text = text.replace(char, char.lower())\n\n    return text", "compilation_passed": true, "time": 0.0012822151184082031, "tests_passed": true, "error": null}
{"code": "random.seed(seed)\n    special_chars = string.punctuation\n    text = text.translate(str.maketrans(special_chars, ' '*len(special_chars)))\n    text = re.sub('\\s+', '_', text)\n    for char in text:\n        if random.random() < 0.5:\n            char = char.upper()\n        text = text.replace(char, char.upper())\n    return text", "compilation_passed": true, "time": 0.0011739730834960938, "tests_passed": true, "error": null}
{"code": "if seed is not None:\n        random.seed(seed)\n    result = \"\"\n    for char in text:\n        if char in string.punctuation:\n            result += \"_\"\n        elif char == \" \":\n            result += \"__\"\n        elif char == \"\\n\":\n            result += \"___\"\n        elif random.random() < 0.5:\n            char = char.upper()\n        result += char\n    return result", "compilation_passed": true, "time": 0.0011501312255859375, "tests_passed": true, "error": null}
{"code": "punctuation = set(string.punctuation)\n\n    # Replace whitespace with underscore\n    text = text.replace(' ', '_').replace('\\t', '__').replace('\\n', '___')\n\n    # Normalize whitespace\n    text = re.sub(r'\\s+', ' ', text)\n\n    # Replace special characters\n    text = ''.join(\n        c if c not in punctuation else random.choice(['', random.choice(list(string.ascii_letters))])\n        for c in text)\n\n    # Randomize casing\n    for i in range(5):\n        text = ''.join(\n            random.choice([char.upper(), char.lower(), random.choice(list(string.ascii_letters))])\n            if random.random() < 0.5 else char\n            for char in text\n        )\n\n    return text", "compilation_passed": true, "time": 0.0012841224670410156, "tests_passed": true, "error": null}
{"code": "special_chars = string.punctuation\n    special_chars += \"\\t\\n \"  # special characters to be considered as spaces\n    special_chars = re.escape(special_chars)\n    regex = f\"[{special_chars}]\"\n    text = re.sub(regex, \"_\", text)\n    text = text.lower()\n\n    if not seed:\n        return text\n\n    random.seed(seed)\n    for i in range(len(text)):\n        if random.randint(0, 100) < 50:  # 50% chance to capitalize the character\n            text = text[:i] + text[i].upper() + text[i + 1:]\n\n    return text", "compilation_passed": true, "time": 0.0012848377227783203, "tests_passed": true, "error": null}
{"code": "if not text:\n        return ''\n    # Step 1: Remove special characters, tabs, and newlines\n    text = ''.join(\n        c if not re.match(r'\\s|\\n|\\t', c) else '__' for c in text\n    )\n\n    # Step 2: Normalize whitespace\n    text = re.sub(r'\\s+', ' __', text)\n\n    # Step 3: Convert characters to uppercase with a 50% probability\n    # TODO: Use the seed to randomize casing\n    return re.sub('([A-Za-z])', lambda m: m.group(1).upper() if random.random() < 0.5 else m.group(1) else '', text)", "compilation_passed": false, "time": 0.0001780986785888672, "tests_passed": false, "error": "SyntaxError"}
{"code": "if seed is not None:\n        random.seed(seed)\n    text = text.replace(\"\\t\", \"___\").replace(\" \", \"__\")\n    for char in string.punctuation:\n        text = text.replace(char, \"_\")\n    return ''.join(\n        random.choices([char.upper() if random.random() < 0.5 else char for char in text], k=len(text))\n    )", "compilation_passed": true, "time": 0.0011830329895019531, "tests_passed": true, "error": null}
{"code": "# ***********************\n    # REQUIREMENTS:\n    # ***********************\n    # re\n    # string\n    # random\n\n    # ***********************\n    # SEED:\n    # ***********************\n    random.seed(seed)\n\n    # ***********************\n    # PREPROCESSING:\n    # ***********************\n    # 1. Remove special characters\n    text = re.sub(r\"[!@#$%^&*(),.?:;'\\[\\]<>~`_+=/\\\\]\", \"\", text)\n\n    # 2. Replace all whitespaces with \"_\"\n    text = re.sub(r'\\s+', '_', text)\n\n    # 3. Replace newlines with \"_\"\n    text = re.sub('\\n', '_', text)\n\n    # 4. Replace tabs with \"_\"\n    text = re.sub('\\t', '_', text)\n\n    # 5. Shuffle casing of characters\n    text = random.choice([char.upper() if random.", "compilation_passed": false, "time": 0.0001647472381591797, "tests_passed": false, "error": "SyntaxError"}
{"code": "if seed is not None:\n        random.seed(seed)\n\n    special_chars = '~!@#$%^&*()_+'\n    normal_chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'\n    special_chars_to_normal_chars = dict(zip(special_chars, normal_chars))\n    normal_chars_to_special_chars = {v: k for k, v in special_chars_to_normal_chars.items()}\n    normal_chars_to_uppercase_chars = {k.upper(): k.lower() for k in normal_chars}\n\n    text = text.lower()\n    text = re.sub('\\W+', '', text)\n    text = re.sub('\\s+', '_', text)\n    text = re.sub('_+', '__', text)\n    text = re.sub('__+', '___', text)\n    text = re.sub('___+', '____', text)\n", "compilation_passed": true, "time": 0.0013229846954345703, "tests_passed": false, "error": "TypeError"}
{"code": "if seed is not None:\n        random.seed(seed)\n    special_chars = string.punctuation\n    special_chars += ' \\t\\n'\n    # print('special_chars', special_chars)\n    result = text.translate(str.maketrans('', '', special_chars)).strip().replace('  ', '__').replace('\\t', '___').replace('\\n', '____')\n    result = [random.choice([char.upper(), char.lower()]) if random.random() > 0.5 else char for char in result]\n    return ''.join(result)", "compilation_passed": true, "time": 0.0012669563293457031, "tests_passed": true, "error": null}
{"code": "special_chars = re.compile('[!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^`{|}~]+')\n    whitespace = re.compile('\\\\s+')\n    char_cases = 'ABC'\n\n    if not seed:\n        random.seed(None)\n    else:\n        random.seed(seed)\n\n    result = []\n    for char in text:\n        if special_chars.match(char):\n            result.append('_' * len(char))\n        elif whitespace.match(char):\n            result.append('__')\n        else:\n            result.append(char)\n\n    for i in range(len(result)):\n        if random.random() > 0.5:\n            result[i] = result[i].upper()\n\n    return ''.join(result)", "compilation_passed": true, "time": 0.001271963119506836, "tests_passed": true, "error": null}
{"code": "if seed is not None:\n        random.seed(seed)\n    special_chars = re.compile(\"[~`!@#$%^&*()+=|{}'\\\";:,<>?/.-]\")\n    # remove special characters\n    text = special_chars.sub(\"\", text)\n\n    # remove extra spaces and tabs\n    text = re.sub(r\"\\s+\", \"_\", text)\n\n    # randomize casing\n    text = \"\".join(\n        random.choice((s.upper(), s.lower()))\n        for s in text\n        if random.randint(0, 1) <= 0.5\n    )\n\n    return text", "compilation_passed": true, "time": 0.0012137889862060547, "tests_passed": true, "error": null}
{"code": "special_chars = string.punctuation + string.whitespace + \"\\n\\r\\t\"\n    preprocessed_text = \"\"\n    for c in text:\n        if c in special_chars:\n            preprocessed_text += c.replace(c, '_')\n        else:\n            preprocessed_text += c\n    random.seed(seed)\n    cased = [char.upper() for char in preprocessed_text]\n    uncased = [char.lower() for char in preprocessed_text]\n    shuffled = random.sample(preprocessed_text, len(preprocessed_text))\n    random_case = [random.choice([cased, uncased, shuffled])[i] for i in range(len(preprocessed_text))]\n    return \"\".join(random_case)", "compilation_passed": true, "time": 0.0012471675872802734, "tests_passed": true, "error": null}
{"code": "charset = set(string.punctuation)\n    if seed:\n        random.seed(seed)\n    text = ''.join(c if c not in charset else '_' if random.random() < 0.5 else c.upper() for c in text)\n    text = re.sub(' +', '_', text)\n    return text", "compilation_passed": true, "time": 0.0011458396911621094, "tests_passed": true, "error": null}
{"code": "# Remove all special characters\n    text = re.sub(r\"[^A-Za-z0-9]+\", \" \", text.upper())\n\n    # Replace spaces with underscores\n    text = text.replace(\" \", \"_\" * (len(text.split()) - 1))\n\n    # Randomly convert uppercase characters to lowercase\n    if seed is not None:\n        random.seed(seed)\n    text = \"\".join(\n        c if c.islower() or random.random() < 0.5 else c.lower() for c in text\n    )\n\n    return text", "compilation_passed": true, "time": 0.0012121200561523438, "tests_passed": true, "error": null}
