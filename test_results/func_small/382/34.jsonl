{"code": "# TODO: 2\n    # TODO: 2\n    # TODO: 2\n    # TODO: 2\n    # TODO: 2\n    # TODO: 2\n    # TODO: 2\n    # TODO: 2\n    # TODO: 2\n    # TODO: 2\n    # TODO: 2\n    # TODO: 2\n    # TODO: 2\n    # TODO: 2\n    # TODO: 2\n    # TODO: 2\n    # TODO: 2\n    # TODO: 2\n    # TODO: 2\n    # TODO: 2\n    # TODO: 2\n    # TODO: 2\n    # TODO: 2\n    # TODO: 2\n    # TODO: 2\n    # TODO: 2\n    # TODO: 2\n    # TODO: 2\n    # TODO: 2\n    # TODO: 2\n    # TODO: 2\n    # TODO: 2\n    # TODO: 2\n    # TODO: 2\n    # TODO: 2\n    # TODO: 2\n    # TODO: ", "compilation_passed": true, "time": 0.0009090900421142578, "tests_passed": false, "error": "TypeError"}
{"code": "X = np.arange(-5, 5, 0.01)\n    Y = np.zeros(len(X))\n    mu, sigma = 0, 1\n    for i in range(len(X)):\n        Y[i] = norm.pdf(X[i])\n\n    fig, ax = plt.subplots()\n    ax.plot(X, Y, color='black', alpha=0.4, linewidth=1, linestyle='--')\n    ax.scatter(0, 1, 10, c=\"red\", s=40)\n    ax.grid(True)\n    ax.axvline(0, color='red', linestyle='--')\n    ax.axhline(1, color='red', linestyle='--')\n    ax.plot(X, Y, color='black', alpha=0.4, linewidth=1, linestyle='--')\n    ax.set_xlim(-5, 5)\n    ax.set_ylim(-0.1, 1.1)\n    ax.set_title('Normal Distribution')", "compilation_passed": true, "time": 0.04503202438354492, "tests_passed": false, "error": "TypeError"}
{"code": "MU = 0\n    SIGMA = 1\n    x = np.linspace(-5, 5, 1000)\n    pdf = norm(mu=MU, sigma=SIGMA).pdf(x)\n    ax = plt.hist(x, density=True, bins=100, color='g', label='Normal distribution')\n    plt.plot(x, pdf, 'k', linewidth=2.0, label='Probability density function')\n    plt.xlabel('x')\n    plt.ylabel('PDF')\n    plt.legend(loc='best')\n    return distribution, ax", "compilation_passed": true, "time": 0.001547098159790039, "tests_passed": false, "error": "TypeError"}
{"code": "MU = 0\n    SIGMA = 1\n    normal_distribution = norm.rvs(loc=MU, scale=SIGMA, size=length)\n\n    fig, ax = plt.subplots(1, 2, figsize=(10, 6))\n\n    # Plot the histogram of the normal distribution\n    ax[0].hist(normal_distribution, density=True, bins=length, color='blue', alpha=0.5)\n    ax[0].set_xlabel('Value')\n    ax[0].set_ylabel('Count')\n    ax[0].set_title('Histogram of Normal Distribution')\n\n    # Plot the probability density function of the normal distribution\n    x = np.linspace(normal_distribution.min(), normal_distribution.max(), 100)\n    ax[1].plot(x, norm.pdf(x, loc=MU, scale=SIGMA), color='red')\n    ax[1].set_xlabel('Value')\n    ax[1].set_ylabel('Probability')\n    ax[1].set_", "compilation_passed": true, "time": 0.19521307945251465, "tests_passed": false, "error": "AttributeError"}
{"code": "if not (length > 0):\n        raise ValueError(f\"Length must be at least 1 but is {length}\")\n\n    x = np.linspace(-5, 5, length)\n    return (np.random.normal(0, 1, length), plt.hist(x, density=True))", "compilation_passed": true, "time": 0.003233194351196289, "tests_passed": true, "error": null}
{"code": "distribution = norm.rvs(loc=0, scale=1, size=length)\n    ax = plt.figure().add_subplot(111)\n    ax.set_title('Normal Distribution')\n    ax.set_ylabel('Frequency')\n    ax.set_xlabel('Data')\n    ax.hist(distribution, density=True)\n    ax.set_title('Histogram')\n    plt.show()\n    return (distribution, ax)", "compilation_passed": true, "time": 0.08049607276916504, "tests_passed": true, "error": null}
{"code": "MU = 0\n    SIGMA = 1\n    norm_dist = norm(loc=MU, scale=SIGMA)\n    norm_dist_array = norm_dist.rvs(size=length)\n\n    ax = plt.subplot(111)\n    ax.hist(norm_dist_array, bins=100, density=True)\n    ax.plot(range(100), norm_dist.pdf(range(100)), '-r', alpha=0.8, label='PDF')\n    ax.set_xlabel('X')\n    ax.set_ylabel('PDF')\n    ax.set_title('Normal Distribution')\n    ax.legend()\n\n    return norm_dist_array, ax", "compilation_passed": true, "time": 0.12962722778320312, "tests_passed": true, "error": null}
{"code": "np.random.seed(0)\n    return norm.rvs(length), plt.plot(np.arange(length),norm.pdf(np.arange(length)),label=r'$x \\sim \\mathcal{N}(0,1)'), plt.legend()", "compilation_passed": true, "time": 0.018266677856445312, "tests_passed": false, "error": "ValueError"}
{"code": "random_norm_number = np.random.normal(MU,SIGMA,length)\n    print(random_norm_number.shape)\n    print(MU)\n    print(SIGMA)\n    return random_norm_number,plt.hist(random_norm_number,bins='auto')", "compilation_passed": true, "time": 0.0010018348693847656, "tests_passed": false, "error": "NameError"}
{"code": "random_normal_number = np.random.normal(loc=0, scale=1, size=length)\n    plt.hist(random_normal_number, bins=100)\n    plt.title(\"Normal distribution\")\n    plt.xlabel(\"Random variable\")\n    plt.ylabel(\"Probability\")\n    plt.show()\n    return (random_normal_number, plt.gca())", "compilation_passed": true, "time": 0.12156009674072266, "tests_passed": true, "error": null}
{"code": "distribution = norm.rvs(mu=0, sigma=1, size=length)\n    ax = plt.hist(distribution, density=True, edgecolor='k', bins=100)\n    return distribution, ax", "compilation_passed": true, "time": 0.0010669231414794922, "tests_passed": false, "error": "TypeError"}
{"code": "MU = 0\n    SIGMA = 1\n    arr = np.random.normal(MU,SIGMA,length)\n    ax = plt.hist(arr,bins='auto')[0]\n    plt.show()\n    return arr, ax", "compilation_passed": true, "time": 0.0058019161224365234, "tests_passed": true, "error": null}
{"code": "distribution = np.random.normal(length, 1, length)\n    ax = plt.hist(distribution, bins=100, density=True)\n    plt.show()\n    return distribution, ax", "compilation_passed": true, "time": 0.018292903900146484, "tests_passed": true, "error": null}
{"code": "mu = 0\n    sigma = 1\n    distribution = norm.rvs(mu=mu, sigma=sigma, size=length)\n    ax = plt.gca()\n    ax.set_title(\"Normal distribution with mu = 0, sigma = 1\")\n    ax.hist(distribution, bins=10, density=True, alpha=0.7, label=\"Distribution\")\n    ax.set_xlim([-4, 4])\n    ax.legend()\n    return distribution, ax", "compilation_passed": true, "time": 0.0009150505065917969, "tests_passed": false, "error": "TypeError"}
{"code": "mu = 0\n    sigma = 1\n    x = np.linspace(mu - 4 * sigma, mu + 4 * sigma, 1000)\n    y = norm.pdf(x, mu, sigma)\n    ax = plt.gca()\n    plt.plot(x, y)\n    plt.grid()\n    plt.axvline(x=mu, color=\"r\", linewidth=2)\n    return x, ax", "compilation_passed": true, "time": 0.02128887176513672, "tests_passed": true, "error": null}
{"code": "mu, sigma = 0, 1\n    x = np.linspace(-4*np.pi, 4*np.pi, length)\n    y = norm.pdf(x,mu,sigma)\n\n    fig, ax = plt.subplots()\n    ax.plot(x,y)\n\n    return distribution,ax", "compilation_passed": true, "time": 0.017345666885375977, "tests_passed": false, "error": "NameError"}
{"code": "distribution = norm.rvs(loc=0, scale=1, size=length)\n    ax = plt.figure().add_subplot(111)\n    ax.hist(distribution, bins=50, density=True, edgecolor='black')\n    ax.plot(distribution, norm.pdf(distribution, loc=0, scale=1), '--', linewidth=2)\n    return (distribution, ax)", "compilation_passed": true, "time": 0.14194583892822266, "tests_passed": true, "error": null}
{"code": "mean = 0\n    sigma = 1\n    x = np.arange(mean - (3 * sigma), mean + (3 * sigma), 0.01)\n    y = norm.pdf(x, loc=mean, scale=sigma)\n    # Create the distribution\n    dist = np.random.normal(loc=mean, scale=sigma, size=length)\n    return dist, ax.plot(x, y)", "compilation_passed": true, "time": 0.0012030601501464844, "tests_passed": false, "error": "NameError"}
{"code": "MU = 0\n    SIGMA = 1\n    return (norm.ppf(np.linspace(0, 1, length), MU, SIGMA), plt.hist(np.random.normal(MU, SIGMA, length), bins = length))", "compilation_passed": true, "time": 0.4699997901916504, "tests_passed": true, "error": null}
{"code": "dist = norm(mu=0, sigma=1)\n    return dist.rvs(size=length), plt.hist(dist.rvs(size=length), bins='auto', density=True, color='black')[2]", "compilation_passed": true, "time": 0.0014271736145019531, "tests_passed": false, "error": "TypeError"}
{"code": "MU = 0\n    SIGMA = 1\n    #distribution = norm.rvs(length)\n    distribution = np.random.normal(MU, SIGMA, length)\n    ax = plt.hist(distribution, bins=20, density=True), plt.title(\"Normal Distribution\")\n    return distribution, ax", "compilation_passed": true, "time": 0.0047419071197509766, "tests_passed": true, "error": null}
{"code": "distribution = norm(0, 1).rvs(length)\n    ax = plt.plot(distribution)\n    plt.show()\n    return distribution, ax", "compilation_passed": true, "time": 0.0014400482177734375, "tests_passed": true, "error": null}
{"code": "x = np.arange(-5, 5, 0.1)\n    y = norm.pdf(x)\n    plt.plot(x,y)\n    plt.title(\"normal distribution\")\n    return x,y\n    pass", "compilation_passed": true, "time": 0.0013420581817626953, "tests_passed": true, "error": null}
{"code": "# Generate a numpy array with the normal distribution\n    dist = np.random.normal(mu=0, sigma=1, size=length)\n    # Generate a histogram plot of the distribution\n    plt.hist(dist, bins=100, density=True, color='#20B2AA')\n    # Plot the probability density function\n    xs = np.linspace(-3, 3, 1000)\n    plt.plot(xs, norm.pdf(xs, mu=0, sigma=1))\n    return dist, plt.gca()", "compilation_passed": true, "time": 0.0008730888366699219, "tests_passed": false, "error": "TypeError"}
{"code": "# Your code goes here...\n    distribution = norm.pdf(np.arange(length), 0, 1)\n    ax = plt.plot(np.arange(length), distribution)\n    return distribution, ax", "compilation_passed": true, "time": 0.00096893310546875, "tests_passed": true, "error": null}
{"code": "x = np.arange(-4 * np.pi, 4 * np.pi, 0.1)\n    y = norm.pdf(x)\n    y_hist = norm.cdf(x) - norm.cdf(-4 * np.pi)\n    # print(type(x))\n    # print(type(y))\n    # print(type(y_hist))\n    # print(x, y, y_hist)\n    # plt.plot(x, y)\n    # plt.plot(x, y_hist)\n    return np.array(x), np.array(y), np.array(y_hist)", "compilation_passed": true, "time": 0.0009341239929199219, "tests_passed": false, "error": "ValueError"}
{"code": "mu = 0\n    sigma = 1\n    dist = norm(loc=mu, scale=sigma)\n    x = dist.rvs(size=length)\n\n    ax = plt.figure(figsize=(14, 4)).add_subplot()\n    ax.hist(x, bins=100, density=True)\n\n    xs = np.linspace(-4 * sigma, 4 * sigma, 1000)\n    ax.plot(xs, dist.pdf(xs))\n\n    return (x, ax)", "compilation_passed": true, "time": 0.180556058883667, "tests_passed": true, "error": null}
{"code": "pass", "compilation_passed": true, "time": 0.0009579658508300781, "tests_passed": false, "error": "TypeError"}
{"code": "# TODO\n\n    # distribution = np.random.normal(length)\n    # ax = plt.plot(distribution)\n\n    mu = 0\n    sigma = 1\n    distribution = norm.pdf(length, mu, sigma)\n    ax = plt.plot(distribution)\n\n    return (distribution, ax)", "compilation_passed": true, "time": 0.0010018348693847656, "tests_passed": true, "error": null}
{"code": "distribution = norm.rvs(loc=0, scale=1, size=length, random_state=0)\n    ax = plt.gca()\n    ax.hist(distribution, bins=100, density=True, label='PDF', alpha=0.5)\n    ax.plot(np.linspace(-3, 3, 100), norm.pdf(np.linspace(-3, 3, 100)),\n            label='CDF', linewidth=0, alpha=0.5, color='orange')\n    return distribution, ax", "compilation_passed": true, "time": 0.14427518844604492, "tests_passed": true, "error": null}
