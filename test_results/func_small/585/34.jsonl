{"code": "try:\n        import rsa\n        import os\n        import zipfile\n        from base64 import b64encode\n    except ImportError as e:\n        raise ImportError(str(e))\n\n    pub_key, priv_key, zip_file = None, None, None\n    files = os.listdir(directory)\n    for file in files:\n        with open(f\"{directory}/{file}\", \"rb\") as file:\n            file_data = file.read()\n            encrypted_data = rsa.encrypt(file_data, pub_key)\n\n        zip_file = zipfile.ZipFile(f\"{directory}/files.zip\", 'a', zipfile.ZIP_DEFLATED)\n        zip_file.writestr(file, encrypted_data)\n        zip_file.close()\n\n    zip_file = zipfile.ZipFile(f\"{directory}/files.zip\", 'r')\n\n    return zip_file", "compilation_passed": true, "time": 0.0015749931335449219, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "try:\n        # Generate RSA keys\n        (public_key_file, private_key_file) = rsa.newkeys(512)\n        # Open a temporary file for encrypted data\n        encrypted_file = open('rsa_encrypted_data.zip', 'wb')\n        # Create a ZipFile object to zip up the files\n        zipfile_obj = zipfile.ZipFile(encrypted_file, mode='w')\n        # Iterate over the files in the directory\n        for file_name in os.listdir(directory):\n            with open(os.path.join(directory, file_name), 'rb') as file:\n                # Encrypt the file using the public key\n                zipfile_obj.writestr(file_name, rsa.encrypt(file.read(), public_key_file))\n        # Close the ZipFile object\n        zipfile_obj.close()\n        # Close the encrypted file\n        encrypted_file.close()\n        # Return the public key and the zip file name\n        return public_key_file, 'rsa_enc", "compilation_passed": false, "time": 9.083747863769531e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "try:\n        pub_key, priv_key = rsa.newkeys(1024, os.urandom)  # Generate RSA public and private keys\n    except:\n        raise ValueError(\"Failed to generate RSA keys.\")\n\n    files = []\n    for filename in os.listdir(directory):\n        if not os.path.isfile(filename):\n            continue\n        try:\n            with open(filename, 'rb') as file:\n                file_data = file.read()\n            files.append((filename, rsa.encrypt(file_data, pub_key)))\n        except:\n            raise ValueError(\"Failed to encrypt file.\")\n\n    if len(files) == 0:\n        raise ValueError(\"No files to encrypt.\")\n\n    with zipfile.ZipFile(f\"{directory.replace('\\\\', '_')}.zip\", 'w') as zipf:  # Create the zip file\n        for file, data in files:\n            zipf.writestr(file, b64encode(data))  # Write the encrypted", "compilation_passed": false, "time": 0.00011587142944335938, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Generate RSA public and private keys\n    pub_key, priv_key = rsa.newkeys(2048)\n\n    # Encrypt the files using the public key\n    encrypted_files = []\n    for file in os.listdir(directory):\n        with open(os.path.join(directory, file), 'rb') as f:\n            data = f.read()\n            encrypted_data = rsa.encrypt(data, pub_key)\n            encrypted_files.append((file, b64encode(encrypted_data)))\n\n    # Zip the encrypted files\n    zip_filename = 'encrypted_files.zip'\n    with zipfile.ZipFile(zip_filename, 'w') as zip_file:\n        for file, encrypted_data in encrypted_files:\n            zip_file.writestr(file, encrypted_data)\n\n    return pub_key, zip_filename", "compilation_passed": true, "time": 1.001847743988037, "tests_passed": false, "error": "TimeoutError"}
{"code": "# Generate RSA keys\n    key = rsa.generate_key(512)\n    public_key = key.publickey()\n    # Encrypt files using the public key\n    zip_files = []\n    for filepath in os.listdir(directory):\n        if filepath.endswith('.png') or filepath.endswith('.jpg') or filepath.endswith('.jpeg'):\n            with open(os.path.join(directory, filepath), 'rb') as f:\n                # Encrypt file data with the public key\n                encrypted_data = rsa.encrypt(f.read(), public_key)\n                # Save encrypted data as a base64 encoded string in a new file\n                with open(os.path.join(directory, f'encrypted_{filepath}'), 'wb') as f2:\n                    f2.write(b64encode(encrypted_data))\n                zip_files.append(f'encrypted_{filepath}')\n    # Create a new zip file containing encrypted files and save it in the same directory\n    with", "compilation_passed": false, "time": 0.0002238750457763672, "tests_passed": false, "error": "SyntaxError"}
{"code": "try:\n        public_key, private_key = rsa.newkeys(key_size)\n    except ValueError:\n        raise Exception(\"Invalid key_size value, it must be greater than 0 and less than 4096.\")\n\n    def encrypt_file(filepath, public_key):\n        with open(filepath, 'rb') as file:\n            data = file.read()\n        return b64encode(rsa.encrypt(data, public_key))\n\n    filepaths = [filepath for filepath in os.listdir(directory) if filepath.endswith('.txt')]\n    encrypted_files = []\n    for filepath in filepaths:\n        try:\n            encrypted_files.append(encrypt_file(os.path.join(directory, filepath), public_key))\n        except Exception as e:\n            raise Exception(\"Error encrypting file: \", e)\n\n    zip_filename = \"encrypted_files.zip\"\n    with zipfile.ZipFile(zip_filename, 'w') as zip_file", "compilation_passed": false, "time": 0.00026798248291015625, "tests_passed": false, "error": "SyntaxError"}
{"code": "try:\n        pub_key = rsa.PublicKey(file(directory + os.sep + \"public.key\", 'rb').read())\n        zip_file = zipfile.ZipFile(directory + os.sep + \"output.zip\", 'w')\n        for root, dirs, files in os.walk(directory):\n            for filename in files:\n                # Encrypt file data with RSA\n                encrypted = rsa.encrypt(file(root + os.sep + filename, 'rb').read(), pub_key)\n                # Save encrypted file data to zipfile\n                zip_file.writestr(filename, b64encode(encrypted))\n        zip_file.close()\n        return pub_key, os.path.join(directory, 'output.zip')\n    except Exception as e:\n        print(\"Error: \", e)", "compilation_passed": true, "time": 0.0013680458068847656, "tests_passed": false, "error": "TypeError"}
{"code": "# Generate RSA public and private keys\n    pub_key, priv_key = rsa.newkeys(2048, os.urandom)\n\n    # Iterate through files in directory\n    files = []\n    for dirpath, dirs, filenames in os.walk(directory):\n        for filename in filenames:\n            # Skip if file extension is not '.jpg' or '.jpeg'\n            if not filename.endswith('.jpg') or not filename.endswith('.jpeg'):\n                continue\n            # Get file path\n            filepath = os.path.join(dirpath, filename)\n            files.append(filepath)\n\n    # Encrypt all files\n    zipped_files = []\n    for filepath in files:\n        with open(filepath, 'rb') as f:\n            file_data = f.read()\n            encrypted_data = rsa.encrypt(file_data, pub_key)\n            zipped_files.append(encrypted_data)\n\n    # Create a zip file with encrypted files\n    zip_filepath = f", "compilation_passed": true, "time": 1.002608299255371, "tests_passed": false, "error": "TimeoutError"}
{"code": "# Generate RSA key pairs\n    pub_key, priv_key = rsa.newkeys(1024)\n\n    # Encrypt files in the directory with the public key\n    encrypted_files = []\n    for filename in os.listdir(directory):\n        if filename.endswith('.zip'):\n            continue  # skip zips\n        elif filename.endswith('.jpg') or filename.endswith('.png') or filename.endswith('.jpeg'):\n            img_data = open(os.path.join(directory, filename), 'rb').read()\n            encrypted_file_data = rsa.encrypt(img_data, pub_key)\n            encrypted_file_data = b64encode(encrypted_file_data)\n            encrypted_files.append(encrypted_file_data)\n\n    # Create a zip file containing the encrypted files\n    with zipfile.ZipFile(directory + 'encrypted.zip', 'w') as zip_file:\n        zip_file.writestr('data.zip', b", "compilation_passed": false, "time": 0.00024890899658203125, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Create a RSA key pair\n    pub_key, priv_key = rsa.newkeys(1024)\n\n    # Save the keys into a file\n    key_path = 'keys.pem'\n    with open(key_path, 'wb') as f:\n        f.write(priv_key.save_key(format='PEM'))\n        f.write(pub_key.save_key(format='PEM'))\n\n    # Encrypt all files in the directory using the public key\n    files_encrypted = []\n    for filename in os.listdir(directory):\n        if filename.endswith('.py') or filename.endswith('.pyw') or filename.endswith('.pyd') or filename.endswith('.exe') or filename.endswith('.sh') or filename.endswith('.bat'):\n            # Only encrypt Python files\n            try:\n                with open(os.path.join(directory, filename), 'rb') as f:\n                    data = f.read()\n\n                # Encrypt the data using the public", "compilation_passed": false, "time": 0.00018596649169921875, "tests_passed": false, "error": "SyntaxError"}
{"code": "pub_key = rsa.generate_public_key(public_exponent=65537, key_size=512)\n\n    for file in os.listdir(directory):\n        file_path = os.path.join(directory, file)\n        if os.path.isfile(file_path):\n            with open(file_path, 'rb') as f:\n                encrypted_file = rsa.encrypt(f.read(), pub_key)\n                with open(file_path + '.enc', 'wb') as f:\n                    f.write(encrypted_file)\n\n    zip_path = directory + '.zip'\n    with zipfile.ZipFile(zip_path, 'w') as zip_file:\n        for root, _, files in os.walk(directory):\n            for file in files:\n                zip_file.write(os.path.join(root, file))\n\n    return pub_key, zip_path", "compilation_passed": true, "time": 0.0014808177947998047, "tests_passed": false, "error": "AttributeError"}
{"code": "pub_key = rsa.PublicKey(1024)\n    zipfile_name = os.path.splitext(directory)[0] + \".zip\"\n\n    for filename in os.listdir(directory):\n        with open(os.path.join(directory, filename), 'rb') as file:\n            file_data = file.read()\n            # Encrypt the file using RSA\n            encrypted_data = rsa.encrypt(file_data, pub_key)\n            # Save the encrypted data to a temporary file\n            with tempfile.TemporaryFile() as encrypted_file:\n                encrypted_file.write(encrypted_data)\n                encrypted_file.seek(0)\n                encrypted_filename = f\"{filename}.enc\"\n                # Write encrypted data to a temp file\n                with open(encrypted_filename, 'wb') as encrypted_file_2:\n                    encrypted_file.seek(0)\n                    encrypted_file_2.write(encrypted_file.read())\n                    encrypted_file.seek(0)\n\n", "compilation_passed": true, "time": 0.0012149810791015625, "tests_passed": false, "error": "TypeError"}
{"code": "# Get the directory contents and filter out files with .exe extensions\n    dir_contents = [f for f in os.listdir(directory) if not f.endswith(\".exe\")]\n\n    # Generate RSA keys\n    (public_key, private_key) = rsa.newkeys(2048)\n\n    # Iterate over each file in the directory\n    zip_file_path = os.path.join(directory, 'encrypted_files.zip')\n    zip_file = zipfile.ZipFile(zip_file_path, 'w')\n\n    for file_name in dir_contents:\n        with open(os.path.join(directory, file_name), 'rb') as file:\n            # Encrypt the file data with the RSA public key\n            file_data = rsa.encrypt(file.read(), public_key)\n            zip_file.writestr(f\"{file_name}.encrypted\", b64encode(file_data).decode())\n\n    zip_file.close()\n\n    # Return the public", "compilation_passed": true, "time": 1.0024492740631104, "tests_passed": false, "error": "TimeoutError"}
{"code": "rsa_key = rsa.generate_key()\n    pub_key = rsa_key.publickey()\n    # Iterate over files in directory\n    for dirpath, _, filenames in os.walk(directory):\n        for filename in filenames:\n            # Get absolute path to file\n            filepath = os.path.join(dirpath, filename)\n\n            # Open file and read contents\n            with open(filepath, 'rb') as f:\n                data = f.read()\n                # Encrypt file contents with public key\n                enc_data = rsa_key.encrypt(data)\n                # Encode encrypted data as a Base64 string\n                base64_enc_data = b64encode(enc_data).decode()\n                # Write encoded file to zip file\n                with zipfile.ZipFile(zipfile_name, 'a') as zf:\n                    zf.writestr(filename, base64_enc_data)\n\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.0012841224670410156, "tests_passed": false, "error": "AttributeError"}
{"code": "# Generate public key and private key\n    (pub_key, priv_key) = rsa.newkeys(512, os.urandom)\n\n    # Generate a filename for the zip file\n    zipfile_name = 'encrypted_files_rsa.zip'\n\n    # Open a zip file for writing\n    with zipfile.ZipFile(zipfile_name, 'w') as zipf:\n        # Iterate through files in the specified directory\n        for path, _, filenames in os.walk(directory):\n            for filename in filenames:\n                # Open the file and encrypt its contents\n                with open(os.path.join(path, filename), 'rb') as file:\n                    data = file.read()\n                    enc_data = rsa.encrypt(data, pub_key)\n\n                    # Save the encrypted data to the zip file\n                    zipf.writestr(filename, b64encode(enc_data).decode('utf-8'))\n\n    return pub_key, zipfile_name", "compilation_passed": true, "time": 0.2545340061187744, "tests_passed": true, "error": null}
{"code": "pub_key = rsa.generate_public_private_key().public_key\n    zip_name = 'encrypted_files.zip'\n    with zipfile.ZipFile(zip_name, 'w', compression=zipfile.ZIP_DEFLATED) as zip_file:\n        for filename in os.listdir(directory):\n            with open(os.path.join(directory, filename), 'rb') as file:\n                data = file.read()\n            zip_file.writestr(filename, b64encode(rsa.encrypt(data, pub_key.public_numbers())).decode('utf-8'))\n    return pub_key, zip_name", "compilation_passed": true, "time": 0.0015060901641845703, "tests_passed": false, "error": "AttributeError"}
{"code": "if not directory.endswith('/'):\n        directory += '/'\n    rsa_public_key = rsa.PublicKey(2048)\n\n    zips = []\n    for file_name in os.listdir(directory):\n        if file_name.endswith('.zip'):\n            zip_file_name = directory + file_name\n            zips.append(zip_file_name)\n        else:\n            zips.append('{0}{1}.zip'.format(directory, file_name))\n\n    zipfile_name = zipfile.zipfile.ZipFile(zips[-1], mode='w')\n    for file_name, data in get_encrypted_data(zips, rsa_public_key):\n        zipfile_name.writestr(file_name, data, zipfile.ZIP_DEFLATED)\n\n    return rsa_public_key, zips[-1]", "compilation_passed": true, "time": 0.0010809898376464844, "tests_passed": false, "error": "TypeError"}
{"code": "# Create the RSA key pair.\n    pub_key, priv_key = rsa.newkeys(2048)\n\n    # Create a temporary directory to store the encrypted files.\n    tmp_dir = os.path.join(directory, \"temp\")\n    os.mkdir(tmp_dir)\n\n    # Loop through all files in the specified directory.\n    for filename in os.listdir(directory):\n        if os.path.isfile(filename):\n            with open(os.path.join(directory, filename), \"rb\") as f:\n                file_data = f.read()\n                encrypted_data = rsa.encrypt(file_data, pub_key)\n                enc_filename = f\"{filename}.enc\"\n                with open(os.path.join(tmp_dir, enc_filename), \"wb\") as f:\n                    f.write(encrypted_data)\n\n    # Zip the files.\n    zipfile_name = os.path.join(tmp_dir, \"encrypted_files.zip\")\n    with zipfile.", "compilation_passed": false, "time": 0.0002009868621826172, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Generate RSA keys\n    pub_key, priv_key = rsa.newkeys(1024, random_blurb=b\"random bytes to generate keys\")\n\n    # Iterate over all files in the directory\n    with os.scandir(directory) as files:\n        for entry in files:\n            if entry.is_file():\n                # Read the file data\n                with open(entry.path, \"rb\") as file:\n                    file_data = file.read()\n\n                # Encrypt the data\n                encrypted = rsa.encrypt(file_data, pub_key)\n\n                # Create a temporary zip file\n                zip_file = zipfile.ZipFile(\"encrypted.zip\", \"w\")\n                zip_file.writestr(entry.name, encrypted)\n                zip_file.close()\n\n                # Save the encrypted file\n                with open(entry.path + '.encrypted', 'wb') as f:\n                    f.write(encrypted)\n\n    return pub_key, \"encrypted.zip\"\n\n", "compilation_passed": true, "time": 0.0011408329010009766, "tests_passed": false, "error": "TypeError"}
{"code": "if not isinstance(directory, str):\n        raise ValueError(\"The 'directory' parameter must be a string.\")\n\n    # generate public and private key\n    (public_key, private_key) = generate_keys()\n\n    # list all files in the directory\n    files = os.listdir(directory)\n\n    # encrypt all files in the directory\n    for file in files:\n        file_path = os.path.join(directory, file)\n        encrypted_data = encrypt_file(public_key, file_path)\n\n        # write encrypted file data to a new file\n        encrypted_file_path = file_path.replace('.', '_enc.')\n        write_encrypted_file(encrypted_file_path, encrypted_data)\n\n    # compress the encrypted files into a zip file\n    zipfile_path = os.path.join(directory, f'{os.path.basename(directory)}_enc.zip')\n    zipfile.ZipFile(zipfile_path, 'w').write(os.path.join(directory, '__MACOSX'))\n", "compilation_passed": true, "time": 0.0011038780212402344, "tests_passed": false, "error": "NameError"}
{"code": "pub_key = rsa.generate_key(2048)\n    pub_key_str = pub_key.publickey().exportKey()\n    private_key_str = pub_key.exportKey()\n    encrypted_files = []\n    zip_file = zipfile.ZipFile(\n        'rsa_encrypted_files.zip', 'w', zipfile.ZIP_DEFLATED)\n\n    for filename in os.listdir(directory):\n        with open(os.path.join(directory, filename), 'rb') as f:\n            encrypted_file = rsa.encrypt(f.read(), pub_key_str)\n            zip_file.writestr(filename, b64encode(encrypted_file).decode('utf-8'))\n            encrypted_files.append(filename)\n\n    zip_file.close()\n    return pub_key, encrypted_files", "compilation_passed": true, "time": 0.001104116439819336, "tests_passed": false, "error": "AttributeError"}
{"code": "# Generate a RSA public/private key pair.\n    pub_key, priv_key = rsa.newkeys(2048, os.urandom)\n\n    # Create an empty zip file in the current directory.\n    zip_file = zipfile.ZipFile(os.path.join(directory, 'encrypted.zip'), 'w')\n\n    # Iterate through all files in the specified directory.\n    for filename in os.listdir(directory):\n        with open(os.path.join(directory, filename), 'rb') as f:\n            file_data = f.read()\n\n            # Encrypt file data using the public key and write it to the zip file.\n            zip_file.writestr(filename, b64encode(rsa.encrypt(file_data, pub_key)))\n\n    zip_file.close()\n\n    return pub_key, os.path.join(directory, 'encrypted.zip')", "compilation_passed": true, "time": 1.002094030380249, "tests_passed": false, "error": "TimeoutError"}
{"code": "try:\n        keypair = rsa.newkeys(1024, os.urandom)\n        pub_key = keypair.publickey()\n        zip_files = []\n        for dirpath, _, filenames in os.walk(directory):\n            for filename in filenames:\n                if not filename.endswith(\".zip\"):\n                    file_path = os.path.join(dirpath, filename)\n                    data = open(file_path, \"rb\").read()\n                    cipher = rsa.encrypt(data, keypair.publickey())\n                    zip_file = zipfile.ZipFile(file_path + \".zip\", 'w', zipfile.ZIP_DEFLATED)\n                    zip_file.writestr(filename, b64encode(cipher))\n                    zip_files.append(file_path + \".zip\")\n        zip_files = \", \".join(zip_files)\n        return pub_key, zip_files\n    except Exception as e:\n        print(f\"", "compilation_passed": false, "time": 0.00016069412231445312, "tests_passed": false, "error": "SyntaxError"}
{"code": "files = os.listdir(directory)\n    for filename in files:\n        with open(f\"{directory}/{filename}\", 'rb') as file:\n            # Encrypt data with the public key\n            data = b64encode(rsa.encrypt(file.read(), pub_key)).decode('utf-8')\n            with open(f\"{directory}/{filename}.encrypted\", 'w') as encrypted_file:\n                encrypted_file.write(data)\n    # Create the zip file containing the encrypted files\n    with zipfile.ZipFile(f\"{directory}/public_keys.zip\", 'w') as zip_file:\n        for filename in files:\n            zip_file.write(f\"{directory}/{filename}.encrypted\",\n                           compress_type=zipfile.ZIP_DEFLATED)\n    return pub_key, f\"{directory}/public_keys.zip\"", "compilation_passed": true, "time": 0.0020079612731933594, "tests_passed": false, "error": "NameError"}
{"code": "# Generate RSA keys\n    pub_key, priv_key = rsa.newkeys(512)\n\n    # Encrypt all files in the directory and save them into a zip file\n    zip_file_name = 'encrypted_files.zip'\n    files_to_encrypt = os.listdir(directory)\n    files_encrypted = []\n    for file in files_to_encrypt:\n        with open(os.path.join(directory, file), 'rb') as f:\n            encrypted_file = rsa.encrypt(f.read(), pub_key)\n            zipfile.ZipFile(zip_file_name, 'a').writestr(file, b64encode(encrypted_file))\n            files_encrypted.append(file)\n    return pub_key, zip_file_name", "compilation_passed": true, "time": 0.021589040756225586, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "pub_key = rsa.generate_keypair(public_exponent=65537, keysize=512)\n    priv_key = pub_key.private_key\n\n    with zipfile.ZipFile('encrypted.zip', 'w') as archive:\n        for path, _, files in os.walk(directory):\n            relative_path = os.path.relpath(path, start=directory)\n            for file in files:\n                file_path = os.path.join(path, file)\n                data = open(file_path, 'rb').read()\n                enc_data = rsa.encrypt(data, pub_key)\n                archive.writestr(f'{relative_path}/{file}', b64encode(enc_data).decode())\n\n    return pub_key, 'encrypted.zip'", "compilation_passed": true, "time": 0.0011630058288574219, "tests_passed": false, "error": "AttributeError"}
{"code": "with rsa.create_keypair(bits=1024, e=65537, curve='secp192r1') as (public_key, private_key):\n        pub_key = public_key\n\n        def encrypt_file(file):\n            with open(file, 'rb') as f:\n                data = f.read()\n                encrypted_data = rsa.encrypt(data, pub_key)\n                encrypted_data_b64 = b64encode(encrypted_data)\n                return encrypted_data_b64.decode()\n\n        encrypted_files = {}\n        for root, _, files in os.walk(directory):\n            for filename in files:\n                full_path = os.path.join(root, filename)\n                encrypted_filename = encrypt_file(full_path)\n                encrypted_files[filename] = encrypted_filename\n\n        with open(f'{os.path.basename(directory)}_encrypted.zip', 'wb') as f:\n            with zipfile.ZipFile(f, 'w')", "compilation_passed": false, "time": 0.00022292137145996094, "tests_passed": false, "error": "SyntaxError"}
{"code": "pub_key = rsa.generate_public_key(public_exponent=65537, key_size=512)\n    zip_file_name = os.path.basename(directory) + '.zip'\n    zip_file = zipfile.ZipFile(zip_file_name, 'w')\n\n    for dirpath, dirnames, filenames in os.walk(directory):\n        for filename in filenames:\n            file_path = os.path.join(dirpath, filename)\n            if os.path.isfile(file_path):\n                with open(file_path, 'rb') as f:\n                    data = f.read()\n                encrypted_data = pub_key.encrypt(data, padding=rsa.pkcs1v15.Padding.EME_PKCS1v15_OAEP)\n                zip_file.writestr(filename, b64encode(encrypted_data).decode())\n    zip_file.close()\n\n    return pub_key, zip_file_name", "compilation_passed": true, "time": 0.0010890960693359375, "tests_passed": false, "error": "AttributeError"}
{"code": "if not os.path.exists(directory):\n        raise FileNotFoundError('No such directory exists.')\n    if not os.path.isdir(directory):\n        raise FileNotFoundError('{} is not a directory.'.format(directory))\n\n    # generate RSA key\n    private_key, public_key = rsa.newkeys(rsa.common.DEFAULT_KEYSIZE)\n    public_key_str = rsa.PublicKey._dump(public_key)\n    private_key_str = rsa.PrivateKey._dump(private_key)\n\n    # encrypt files using public key\n    files = os.listdir(directory)\n    zipfile_name = 'encrypted_files.zip'\n    zipfile = zipfile.ZipFile(zipfile_name, 'w')\n    for filename in files:\n        file_path = os.path.join(directory, filename)\n        with open(file_path, 'rb') as file:\n            file_data = file.read()\n            encrypted_data = rsa.encrypt(file_data, public_key_str", "compilation_passed": false, "time": 0.00020194053649902344, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Generate the public key and private key using the rsa module\n    pubkey, privkey = rsa.newkeys(2048)\n\n    # Create a zip file\n    with zipfile.ZipFile(os.path.join(directory, 'encrypted.zip'), 'w') as zf:\n        # Encrypt files using the public key\n        for root, dirs, files in os.walk(directory):\n            for file_name in files:\n                with open(os.path.join(root, file_name), 'rb') as f:\n                    data = f.read()\n                    encrypted_data = rsa.encrypt(data, pubkey)\n                    zf.writestr(os.path.relpath(os.path.join(root, file_name), directory), b64encode(encrypted_data).decode())\n\n    # Return the public key and the filename of the zip file\n    return pubkey, os.path.join(directory, 'encrypted.zip')", "compilation_passed": true, "time": 1.0027713775634766, "tests_passed": false, "error": "TimeoutError"}
