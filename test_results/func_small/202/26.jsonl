{"code": "# Write your code here\n    json_data = json.loads(json_str)\n    urls = []\n    for key, value in json_data.items():\n        url = re.search(r\"https?://\\S+\", str(value))\n        if url:\n            urls.append(url.group())\n\n    return Counter(urls).most_common(top_n)", "compilation_passed": true, "time": 0.0005908012390136719, "tests_passed": true, "error": null}
{"code": "pattern = r'https?://.*?/'  # match URL pattern\n    matches = re.findall(pattern, json_str)\n    counter = Counter(matches)\n    return {url: counter[url] for url in counter if url is not None}  # return top_n URLs", "compilation_passed": true, "time": 0.0007410049438476562, "tests_passed": true, "error": null}
{"code": "pattern = r\"https?://[\\w/\\.?=%&$-]+\"\n    result = re.findall(pattern, json_str)\n    return Counter(result).most_common(top_n)", "compilation_passed": true, "time": 0.0006451606750488281, "tests_passed": true, "error": null}
{"code": "json_data = json.loads(json_str)\n    urls = []\n    for url in json_data:\n        url = str(url)\n        urls.append(url)\n    return Counter(urls)", "compilation_passed": true, "time": 0.0005319118499755859, "tests_passed": true, "error": null}
{"code": "return Counter(\n        re.findall(\"https?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|(?:[\\(\\),]|[!\\#/%*+?:@&=]|[^%[\\\\]])*\\.\"\n        \"{0,3}[a-zA-Z]){2,}\", json_str))", "compilation_passed": true, "time": 0.0006012916564941406, "tests_passed": true, "error": null}
{"code": "json_dict = json.loads(json_str)\n\n    urls = re.findall('https?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*#,?]|[{}()\\]])*', json_dict['website'])\n\n    return dict(Counter(urls).most_common(top_n))", "compilation_passed": true, "time": 0.0006070137023925781, "tests_passed": true, "error": null}
{"code": "json_obj = json.loads(json_str)\n\n    url_regex = re.compile(r\"https?://\\S+\")\n    url_counter = Counter()\n\n    for key, value in json_obj.items():\n        url_counter.update(re.findall(url_regex, str(value)))\n\n    return {url: url_counter[url] for url in url_counter}", "compilation_passed": true, "time": 0.0006568431854248047, "tests_passed": true, "error": null}
{"code": "try:\n        json_data = json.loads(json_str)\n    except json.JSONDecodeError:\n        return {}\n\n    result = {}\n    pattern = re.compile(r\"https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._\\+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()@:%_\\+.~#?&//=]*)\")\n    for match in pattern.findall(json_str):\n        result[match] = result.get(match, 0) + 1\n    sorted_result = sorted(result.items(), key=lambda x: x[1], reverse=True)\n    top_urls = {key: value for key, value in sorted_result[:top_n]}\n    return top_urls", "compilation_passed": true, "time": 0.0007410049438476562, "tests_passed": true, "error": null}
{"code": "# extract all URLs from json_str using re.findall\n    url_regex = re.compile(r'https?://(www\\.)?[\\w_-]+(.[\\w_-]+)*(/[\\w._:%-/?&#;,+&]*)*')\n    urls = url_regex.findall(json_str)\n\n    # count occurrences of each url in urls list\n    counter = Counter(urls)\n\n    # return top_n most common URL from url_occurrences dict\n    return dict(counter.most_common(top_n))", "compilation_passed": true, "time": 0.0006210803985595703, "tests_passed": true, "error": null}
{"code": "json_dict = json.loads(json_str)\n    urls = []\n    for key, value in json_dict.items():\n        if re.match(r'^https://\\S+', value):\n            urls.append(value)\n    counter = Counter(urls)\n    top_urls = counter.most_common(top_n)\n    return dict(top_urls)", "compilation_passed": true, "time": 0.0006949901580810547, "tests_passed": false, "error": "TypeError"}
{"code": "data = json.loads(json_str)\n\n    pattern = re.compile(r'https?://\\S+')\n    matches = pattern.findall(data.values())\n\n    return dict(Counter(matches).most_common(top_n))", "compilation_passed": true, "time": 0.0005218982696533203, "tests_passed": false, "error": "TypeError"}
{"code": "url_pattern = r'https?:\\/\\/(?:[\\w]+\\.)?[\\w]+\\.[\\w]+'\n\n    json_data = json.loads(json_str)\n    matches = [match[0] for match in re.finditer(url_pattern, json_str)]\n    return Counter(matches)", "compilation_passed": true, "time": 0.0005800724029541016, "tests_passed": true, "error": null}
{"code": "# Initialize an empty dict to store the URLs and their counts.\n    url_counts = {}\n\n    # Use re.findall() to find all URLs in the JSON string.\n    urls = re.findall(r'https?://(?:[a-z\\d.+-]*?\\.?)*?(?::\\d+)?/', json_str)\n\n    # Iterate over all URLs and increment their counts in the url_counts dict.\n    for url in urls:\n        if url not in url_counts:\n            url_counts[url] = 1\n        else:\n            url_counts[url] += 1\n\n    # Sort url_counts in descending order of count and return the top top_n URLs.\n    return dict(Counter(url_counts).most_common(top_n))", "compilation_passed": true, "time": 0.008343219757080078, "tests_passed": true, "error": null}
{"code": "return json.loads(json_str)\n    # return json.loads(json_str)['website']", "compilation_passed": true, "time": 0.0005729198455810547, "tests_passed": true, "error": null}
{"code": "json_str_parsed = json.loads(json_str)\n    regex = re.compile(\"https?://(www\\.)?[a-zA-Z0-9\\-.]+\\.[a-z]+\")\n    matches = regex.findall(json_str_parsed.get(\"website\", \"\"))\n    counter = Counter(matches)\n    return dict(counter.most_common(top_n))", "compilation_passed": true, "time": 0.0006229877471923828, "tests_passed": true, "error": null}
{"code": "json_dict = json.loads(json_str)\n    url_pattern = r'https?:\\/\\/[A-Za-z0-9\\.\\-_~:/?#\\[\\]@!$&\\'()*+,;=]+\\.[a-z]{2,6}'\n    urls = re.findall(url_pattern, json_str)\n    return Counter(urls).most_common(top_n)", "compilation_passed": true, "time": 0.0005831718444824219, "tests_passed": true, "error": null}
{"code": "regex = r\"(?i)\\bhttps?://\\S+\"\n\n    matches = re.findall(regex, json_str)\n    urls = Counter(matches)\n    return dict(urls.most_common(top_n))", "compilation_passed": true, "time": 0.0006229877471923828, "tests_passed": true, "error": null}
{"code": "with re.finditer(r'\"(https?:\\/\\/\\S+)\"', json_str) as matches:\n        counter = Counter(match[1] for match in matches)\n        return {url: counter[url] for url in counter if counter[url] > 1}", "compilation_passed": true, "time": 0.0006639957427978516, "tests_passed": false, "error": "TypeError"}
{"code": "# TODO: write code here\n    return None", "compilation_passed": true, "time": 0.0004780292510986328, "tests_passed": true, "error": null}
{"code": "# pattern = r\"https?:\\/\\/[\\w\\-\\.]+(?:\\/\\w*)*(?:\\.\\w+)*(?:\\/\\w*)*(?:\\/\\w*)*(?:\\/\\w*)*(?:\\/\\w*)*(?:\\/\\w*)*(?:\\/\\w*)*(?:\\/\\w*)*(?:\\/\\w*)*(?:\\/\\w*)*(?:\\/\\w*)*(?:\\/\\w*)*(?:\\/\\w*)*(?:\\/\\w*)*(?:\\/\\w*)*(?:\\/\\w*)*(?:\\/\\w*)*(?:\\/\\w*)*(?:\\/\\w*)*(?:\\/\\w*)*(?:\\/\\w*)*(?:\\/\\w*)*(?:\\/\\w*)*(?:\\/\\w*)*(?:\\/\\w*)*(?:\\/\\w*)*(?:\\/\\w*)*(?:\\/\\w*)*(?:\\/\\w*)*(?:\\/\\w*)*(?:\\/\\w*)*(?:\\/\\w*)*(?:\\/\\w*)*(?:\\/\\w*)*(?:\\/\\w*)*(?:\\/\\w*)*(?:\\/\\w*)*(?:\\/\\w*)*(?:\\/\\w", "compilation_passed": true, "time": 0.00046324729919433594, "tests_passed": true, "error": null}
{"code": "json_dict = json.loads(json_str)\n    result = Counter(re.findall(r\"http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*'(),]|\"\n                                 r\"#|[\\t\\r\\n]|\\\\|[%\\{]|[&])+(?!\\s*\\\")\", json_dict['website']))\n\n    # Check for invalid URLs or duplicates\n    for url in result:\n        if re.search(r\"(https?://)?([-a-zA-Z0-9@:%._+~#?&//=])+\", url) is None:\n            result.pop(url)\n        elif url.count('.') < 2:\n            result.pop(url)\n\n    return dict(Counter(result).most_common(top_n))", "compilation_passed": true, "time": 0.0008051395416259766, "tests_passed": true, "error": null}
{"code": "with open(\"../data/urls.json\", \"rt\") as f:\n        data = json.load(f)\n        urls = []\n        for i, url in enumerate(data[\"urls\"]):\n            # print(f\"URL[{i}]: {url}\")\n            if re.search(\"https://.*\", url[\"url\"]):\n                urls.append(url[\"url\"])\n        # print(\"URLs: {}\".format(urls))\n        c = Counter(urls)\n        # print(\"Counter: {}\".format(c))\n        c = dict(c)\n        return dict(sorted(c.items(), key=lambda item: item[1], reverse=True)[:top_n])", "compilation_passed": true, "time": 0.0006430149078369141, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "urls = re.findall(r\"https?://(www\\.)?[\\w\\d-]+\\.[\\w\\d]+(/[\\w\\d-]*/)*[\\w\\d-]*\\.[\\w\\d]+\", json_str)\n    return Counter(urls).most_common(top_n)", "compilation_passed": true, "time": 0.0005869865417480469, "tests_passed": true, "error": null}
{"code": "json_dict = json.loads(json_str)\n    url = r\"https?:\\/\\/(?:(?:[a-zA-Z0-9]+\\.)+(?:[a-zA-Z]{2,}?))\"\n    regex = re.compile(url)\n    counter = Counter()\n    for item in json_dict.values():\n        url = regex.findall(str(item))\n        if len(url) > 0:\n            counter.update(Counter(url))\n\n    return dict(counter.most_common(top_n))", "compilation_passed": true, "time": 0.0007169246673583984, "tests_passed": true, "error": null}
{"code": "json_dict = json.loads(json_str)\n\n    pattern = r\"https?://\\S+\"\n\n    urls = re.findall(pattern, json_str)\n    url_counts = Counter(urls)\n\n    top_urls = {url: count for url, count in url_counts.most_common(top_n)}\n\n    return top_urls", "compilation_passed": true, "time": 0.0005669593811035156, "tests_passed": true, "error": null}
{"code": "pattern = r\"https?://\\w+\\.?\\w+\\.?\\w*\"\n    matches = re.findall(pattern, json_str)\n    counts = Counter(matches)\n    top_urls = Counter(counts).most_common(top_n)\n    return {url: count for url, count in top_urls}", "compilation_passed": true, "time": 0.0006120204925537109, "tests_passed": true, "error": null}
{"code": "json_dict = json.loads(json_str)\n    url_pattern = re.compile(r\"https?://\\S+\")\n    urls = [url for url in url_pattern.findall(json_str) if url]\n    url_counts = Counter(urls)\n    top_urls = url_counts.most_common(top_n)\n    return {url: count for url, count in top_urls}", "compilation_passed": true, "time": 0.0006442070007324219, "tests_passed": true, "error": null}
{"code": "urls = []\n    try:\n        json_obj = json.loads(json_str)\n    except Exception as e:\n        print(f'Error: {e}')\n        return None\n    for key in json_obj.keys():\n        value = json_obj[key]\n        try:\n            urls.append(str(value[\"url\"]))\n        except Exception:\n            pass\n\n    counter = Counter(urls)\n    urls_counter = sorted(\n        [(url, count) for url, count in counter.items()], reverse=True, key=lambda x: x[1])\n\n    return dict(urls_counter[:top_n])", "compilation_passed": true, "time": 0.0006918907165527344, "tests_passed": true, "error": null}
{"code": "url_pattern = r\"https?://\\S+(?:[/?#]|$)\"\n\n    # Find all URLs in the JSON string using a regular expression\n    urls = re.findall(url_pattern, json_str)\n\n    # Count the occurrences of each URL and return the top 'top_n' URLs\n    counter = Counter(urls)\n    return dict(counter.most_common(top_n))", "compilation_passed": true, "time": 0.0005838871002197266, "tests_passed": true, "error": null}
{"code": "url_regex = re.compile(r\"https?://(www\\.)?[a-zA-Z0-9\\-]+\\.[a-z]+\")\n    result = Counter()\n    json_dict = json.loads(json_str)\n    for key, value in json_dict.items():\n        if type(value) == str:\n            urls = url_regex.findall(value)\n            for url in urls:\n                result[url] += 1\n\n    return result", "compilation_passed": true, "time": 0.0006949901580810547, "tests_passed": true, "error": null}
