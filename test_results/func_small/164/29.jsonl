{"code": "# TODO\n    # generate the data\n    data = [random.uniform(data_range[0], data_range[1]) for _ in range(num_labels)]\n\n    # get the histogram counts for each label\n    histogram = np.histogram(data, bins=num_labels, range=data_range)\n\n    # create the figure and axis object for the stacked bar chart\n    fig, ax = plt.subplots()\n    ax.set_title(\"Histogram\")\n    ax.bar(np.arange(num_labels), histogram[0], width=0.5, align='center')\n\n    # create the legend\n    ax.set_xticks(np.arange(num_labels))\n    ax.set_xticklabels(histogram[1])\n    ax.legend()\n\n    # show the plot\n    plt.show()\n    return fig", "compilation_passed": true, "time": 0.0016579627990722656, "tests_passed": false, "error": "NameError"}
{"code": "# Create a dataframe with specified number of categories and random numeric values\n    df = pd.DataFrame({\n        'Category': [f'Label{i}' for i in range(1, num_labels + 1)],\n        'Value': np.random.random(num_labels) * (data_range[1] - data_range[0]) + data_range[0]\n    })\n\n    # Visualize the data with a stacked bar chart\n    df.plot.barh(x='Category',\n                  y='Value',\n                  stacked=True,\n                  title='Stacked Bar Chart',\n                  ylabel='Label',\n                  xlabel='Value')\n\n    # Create a figure and assign the dataframe to it's data attribute\n    fig = plt.figure(figsize=(8, 6))\n    fig.data = df\n\n    # Return the created figure object\n    return fig", "compilation_passed": true, "time": 0.011698007583618164, "tests_passed": true, "error": null}
{"code": "xlabels = ['label_' + str(i) for i in range(num_labels)]\n    data = np.random.rand(num_labels)\n    data = data * (data_range[1] - data_range[0]) + data_range[0]\n    data.sort()\n    data = data.astype(int)\n    df = pd.DataFrame({'x': xlabels, 'y': data})\n    df = df.groupby('x').sum()\n    fig, ax = plt.subplots()\n    df.plot.bar(ax=ax)\n    ax.set_xticks(xlabels)\n    return fig", "compilation_passed": true, "time": 0.002729177474975586, "tests_passed": true, "error": null}
{"code": "pd.set_option(\"display.max_columns\", None)\n    data = pd.DataFrame(pd.Series(pd.Series(np.random.randint(*data_range, num_labels)))).T\n    data.columns = [str(i) for i in range(num_labels)]\n    fig, ax = plt.subplots(figsize=(6, 2))\n    data.plot.bar(ax=ax, stacked=True)\n    ax.bar_label(ax.containers[0], label_format='{1:.0f}', fmt=\".0f\", fontsize=1)\n    return fig", "compilation_passed": true, "time": 0.0023818016052246094, "tests_passed": true, "error": null}
{"code": "random_numbers = np.random.random(num_labels) * (data_range[1] - data_range[0]) + data_range[0]\n    random_numbers = random_numbers.astype(int)\n\n    df = pd.DataFrame(\n        {'label': list(map(str, range(num_labels))), 'data': random_numbers}\n    )\n    df.index = df.label\n\n    fig, ax = plt.subplots()\n    df.plot.bar(ax=ax, stacked=True)\n    ax.grid(True)\n    ax.set_title('Task 2')\n    ax.set_xlabel('Category')\n    ax.set_ylabel('Data')\n    return fig", "compilation_passed": true, "time": 0.003020048141479492, "tests_passed": true, "error": null}
{"code": "# Generate random numeric data with specified number of labels and data range\n    data = pd.Series(np.random.uniform(*data_range, num_labels), index=pd.unique(np.random.uniform(*data_range, num_labels)))\n\n    # Plot the data with a stacked bar chart\n    plt.figure()\n    ax = data.plot.bar(stacked=True, rot=0)\n\n    # Set the y-axis scale to be on the left side\n    plt.gca().invert_yaxis()\n    plt.ylabel('Frequency')\n\n    # Add a grid\n    ax.grid(True, which='both')\n\n    return plt.gcf()", "compilation_passed": true, "time": 0.02242732048034668, "tests_passed": true, "error": null}
{"code": "if num_labels < 2:\n        print(\"Number of labels should be at least 2\")\n        return\n    data_size = num_labels * 2\n    rand_data = np.random.rand(data_size) * data_range[1] + data_range[0]\n    cat_labels = np.array_split(range(0, num_labels), num_labels)\n    labels = np.concatenate(cat_labels)\n    data = rand_data[::2] - rand_data[1::2]\n    fig, ax = plt.subplots()\n    ax.bar(labels, data, color='red')\n    ax.set_xticks(labels)\n    ax.set_yticks([-2, -1, 0, 1, 2])\n    ax.set_ylabel('Score')\n    ax.set_xlabel('Categories')\n    ax.set_title('Scores by Categories')\n    return fig", "compilation_passed": true, "time": 0.0029070377349853516, "tests_passed": true, "error": null}
{"code": "np.random.seed(0)\n    data = (np.random.randint(low=data_range[0], high=data_range[1], size=(num_labels,)) / 100).astype(int)\n\n    index = pd.Index(data, name=\"Stacks\")\n\n    df = pd.DataFrame(data=data, index=index)\n\n    df.plot.bar(stacked=True, rot=0, title='Data Distribution', figsize=(9, 5),\n                color=['#d20000', '#e24c00', '#e09600', '#ecf700', '#37961c', '#00c8b4', '#37c278', '#7f00ea', '#bd00f1', '#f276f2', '#d41c00'])\n    return df", "compilation_passed": true, "time": 0.002299785614013672, "tests_passed": true, "error": null}
{"code": "# Generate random data for num_labels labels within the data_range\n    data = np.random.uniform(data_range[0], data_range[1], size=num_labels)\n\n    # Create a figure object to store the plot\n    fig = plt.figure()\n\n    # Create an empty bar plot to store the generated data\n    bar = plt.bar([], [], color='grey', width=1.0, label='')\n\n    # Iterate over each label\n    for i in range(num_labels):\n        # Create a bar for the current label at its correct position\n        bar[i].set_y(i)\n        bar[i].set_height(data[i])\n        bar[i].set_width(1.0)\n        bar[i].set_label(str(i))\n\n    # Show the plot\n    plt.show()\n\n    # Return the plot object for further processing or plotting\n    return fig", "compilation_passed": true, "time": 0.013317108154296875, "tests_passed": false, "error": "IndexError"}
{"code": "np.random.seed(42)  # This ensures reproducible results\n\n    labels = np.random.choice(num_labels, size=num_labels).astype(str)  # Generate random labels\n    data = np.random.uniform(data_range[0], data_range[1], size=num_labels)  # Generate random data values\n\n    df = pd.DataFrame({'Category': labels, 'Data': data})  # Convert data into a Pandas data frame\n\n    # Group data into multiple columns based on the number of categories\n    grouped = df.groupby('Category')['Data'].sum()\n\n    # Convert grouped data back into a Pandas data frame\n    grouped_df = pd.DataFrame(grouped.reset_index())\n    grouped_df.plot.bar(x='Category', y='Data', stacked=True, rot=0)  # Plot the bar chart\n\n    return grouped_df.plot.bar(x='Category', y='Data', stacked=True, rot=0)", "compilation_passed": true, "time": 0.002966165542602539, "tests_passed": true, "error": null}
{"code": "# Create a list of random numbers for each label.\n    labels = [\"Label_\" + str(i) for i in range(1, num_labels + 1)]\n    data = [random.randint(data_range[0], data_range[1]) for _ in range(num_labels)]\n\n    # Create the bar chart and show it on the screen.\n    bar_data = np.array([data])\n    fig = plt.figure(figsize=(10, 5))\n    ax = fig.add_subplot(1, 1, 1)\n    ax.bar(labels, bar_data)\n    fig.suptitle('Random numeric data visualization')\n    plt.show()\n    return fig", "compilation_passed": true, "time": 0.0015668869018554688, "tests_passed": false, "error": "NameError"}
{"code": "# TODO: implement a task function that generates random numeric data across a specified range for a given number of categories and visualizes it with a stacked bar chart using matplotlib.\n    # The function should be able to take arguments for specifying the number of labels and the data range.\n    # Use matplotlib.pyplot.figure() to create a Figure object, which you will use to add bars to.\n    # Use matplotlib.pyplot.bar() to add bars to the Figure object.\n    # The bars should be of height based on random data in the data_range.\n    # You will need to use the random module from the standard library.\n    # The generated Figure should be returned to the calling function.\n    # You will need to use the random module from the standard library.\n    # You will need to use the random module from the standard library.\n    # You will need to use the random module from the standard library.\n    # You will need to use the random module from the standard library.\n    # You will need to use the random module from the standard library.\n    # You will need to use the random module from the standard library.\n    # You will need to use the random", "compilation_passed": true, "time": 0.0014200210571289062, "tests_passed": true, "error": null}
{"code": "# TODO implement function here\n\n    return None", "compilation_passed": true, "time": 0.001405954360961914, "tests_passed": true, "error": null}
{"code": "df = pd.DataFrame()\n\n    for i in range(num_labels):\n        df[f'category_{i}'] = pd.cut(np.random.uniform(data_range[0], data_range[1], 100), num_labels, include_lowest=True)\n\n    return df.plot.bar()", "compilation_passed": true, "time": 0.005496025085449219, "tests_passed": true, "error": null}
{"code": "x_values = np.linspace(data_range[0], data_range[1], num_labels)\n    y_values = [np.random.uniform(0.1, 0.6) for _ in range(num_labels)]\n\n    fig, ax = plt.subplots()\n    ax.barh(x_values, y_values, color='lightsteelblue', width=0.5)\n    ax.set_xlabel('Category')\n    ax.set_ylabel('Percentage')\n    ax.set_title('Stacked Bar Chart')\n    return fig", "compilation_passed": true, "time": 0.002259969711303711, "tests_passed": true, "error": null}
{"code": "# Generate random data for num_labels categories and apply binning\n    data = np.random.rand(num_labels)\n    data = pd.cut(data, bins=num_labels, labels=range(num_labels))\n    # Define color palette\n    color_palette = plt.cm.tab10.colors\n    # Convert data to a DataFrame\n    df = pd.DataFrame(data)\n    # Visualize with a stacked bar chart\n    ax = df.plot.bar(stacked=True, color=color_palette)\n    # Add axis labels and title\n    ax.set_xlabel('Categories')\n    ax.set_ylabel('Frequency')\n    ax.set_title('Bar Chart')\n    # Return the Figure object to be displayed\n    return plt.gcf()", "compilation_passed": true, "time": 0.0025169849395751953, "tests_passed": true, "error": null}
{"code": "x = np.random.randint(data_range[0], data_range[1], size=(num_labels,))\n    labels = [f\"Label {i+1}\" for i in range(num_labels)]\n    df = pd.DataFrame({\n        \"Labels\": labels,\n        \"Data\": x\n    })\n    df.plot.barh(x='Data', label='Data', stacked=True)\n    fig = plt.gcf()\n    return fig", "compilation_passed": true, "time": 0.0018687248229980469, "tests_passed": true, "error": null}
{"code": "# Generate random values across the data_range for num_labels\n    rand_data = np.random.uniform(data_range[0], data_range[1], num_labels)\n\n    # Define a dictionary that maps categories to their corresponding data values\n    data_dict = {}\n    for i, val in enumerate(rand_data):\n        data_dict[i] = val\n\n    # Create a pandas dataframe with a column for each category\n    df = pd.DataFrame(data_dict)\n\n    # Stack the values column on top of the values column of the previous df\n    df = df.set_index(0).stack().reset_index(name=0)\n    # Rename the column to 'Values'\n    df.columns = ['Values']\n\n    # Create the figure\n    fig = plt.figure()\n\n    # Set the title and labels\n    plt.title('Stacked Bar Chart of Random Numeric Data')\n    plt.xlabel('Labels')\n    plt.ylabel('Values')\n\n    # Plot the stacked bar chart\n    df.plot(kind='bar')\n\n    ", "compilation_passed": true, "time": 0.0018589496612548828, "tests_passed": false, "error": "ValueError"}
{"code": "df = pd.DataFrame({\n        'Category': ['A', 'B', 'C', 'D', 'E'] * 500\n    })\n\n    # Generate random data for each category within the specified range\n    for i in range(1, num_labels):\n        df['Label {}'.format(i)] = np.random.randint(data_range[0], data_range[1], 500)\n\n    df = df.groupby(['Category']).sum().reset_index()\n\n    # Plot the data as a stacked bar chart\n    plt.barh(range(len(df['Category'])), df[['A', 'B', 'C', 'D', 'E']].values.T, stacked=True)\n\n    plt.ylabel('Category')\n    plt.xlabel('Data')\n    plt.yticks(range(num_labels), df['Category'].unique())\n\n    return plt.gcf()", "compilation_passed": true, "time": 0.0018858909606933594, "tests_passed": false, "error": "ValueError"}
{"code": "n_cols = num_labels\n    fig, ax = plt.subplots(n_rows=1, n_cols=n_cols, figsize=(2*num_labels+1, 5), squeeze=False)\n    for i in range(n_cols):\n        # Random values between lower and upper bounds\n        v = (np.random.random_sample(50) * (data_range[1] - data_range[0]) + data_range[0]).astype(int)\n        # Bin values\n        v, bins = np.histogram(v, bins=10)\n        # Plot each histogram in the specified subplots\n        ax[0, i].bar(bins[:-1], v, width=bins[1:] - bins[:-1], color=['red', 'green', 'blue', 'yellow', 'orange'])\n    return fig", "compilation_passed": true, "time": 0.0028710365295410156, "tests_passed": true, "error": null}
{"code": "fig = plt.figure()\n    df = pd.DataFrame({\n        'label': np.random.randint(num_labels, size=1000),\n        'data': np.random.uniform(*data_range, size=1000)\n    })\n    df = (\n        df.groupby('label')\n        .apply(lambda group: group['data'].describe())\n        .unstack('label')\n        .fillna(0)\n    )\n    df.plot.bar(stacked=True, fig=fig)\n    return fig", "compilation_passed": true, "time": 0.04811716079711914, "tests_passed": true, "error": null}
{"code": "if type(num_labels) != int or num_labels < 1:\n        raise ValueError(\"num_labels must be an integer greater than or equal to 1\")\n\n    if type(data_range) != tuple:\n        raise ValueError(\"data_range must be a tuple with two elements\")\n\n    if data_range[0] >= data_range[1]:\n        raise ValueError(\"The first element in data_range must be smaller than the second element\")\n\n    if len(data_range) != 2:\n        raise ValueError(\"The length of data_range must be 2\")\n\n    data_size = 100\n    x_values = pd.Series(np.random.randint(*data_range, size=data_size),\n                         index=pd.Series(np.random.choice(data_range[0], size=data_size),\n                                         dtype=np.int64))\n    y_values = pd.Series([np.random.randint(0, num_labels, size", "compilation_passed": false, "time": 0.00026702880859375, "tests_passed": false, "error": "SyntaxError"}
{"code": "df = pd.Series(np.random.randint(*data_range, num_labels), name='Rand')\n    df = (df.value_counts() / df.size)\n    fig = plt.figure()\n    df.plot.bar(figsize=(15, 10), rot=0)\n    plt.suptitle(\"Generated data for {}\".format(num_labels))\n    return fig", "compilation_passed": true, "time": 0.02839803695678711, "tests_passed": true, "error": null}
{"code": "random_data = np.random.randint(*data_range, num_labels)\n\n    df = pd.DataFrame({\n        \"Label\": range(num_labels),\n        \"Data\": random_data\n    })\n\n    df[\"Label\"] = pd.Categorical(df[\"Label\"], categories=list(range(num_labels)))\n\n    bar_plot = df.pivot_table(index=\"Label\", columns=\"Data\", aggfunc=\"size\")\n    fig, ax = plt.subplots()\n\n    ax.bar(bar_plot.index, bar_plot.values, width=1)\n\n    ax.set_xticks(bar_plot.index)\n    ax.set_ylabel(\"Count\")\n    ax.set_xlabel(\"Labels\")\n\n    return fig", "compilation_passed": true, "time": 0.005013227462768555, "tests_passed": true, "error": null}
{"code": "random_data = pd.Series(np.random.randint(data_range[0], data_range[1], num_labels))\n    random_data.index = [str(i) for i in range(num_labels)]\n    random_data.sort_values(ascending=False).plot(kind='bar', stacked=True)\n    fig = plt.figure()\n    plt.show(block=False)\n    fig.patch.set_visible(False)\n    return fig", "compilation_passed": true, "time": 0.013353824615478516, "tests_passed": true, "error": null}
{"code": "if num_labels < 2:\n        print('Numbers of labels must be 2 or more')\n        return None\n\n    if data_range[0] > data_range[1]:\n        print('Data range must be in ascending order')\n        return None\n\n    data_range_len = data_range[1] - data_range[0]\n    if data_range_len < 0:\n        print('Data range is smaller than 0')\n        return None\n\n    labels = [str(num) for num in range(num_labels)]\n\n    random_values = np.random.random(size=num_labels) * data_range_len\n    random_values += data_range[0]\n    random_values = random_values.astype(int)\n\n    df = pd.DataFrame(random_values, index=labels)\n    df = df.T.groupby(level=0).sum().sort_values(ascending=False)\n    df.plot(kind='bar', stacked=True)\n\n    return plt.gcf()", "compilation_passed": true, "time": 0.0021638870239257812, "tests_passed": false, "error": "TypeError"}
{"code": "np.random.seed(1337)  # Fixes the seed for reproducible results\n\n    # Generate random numeric data across the specified range\n    data = pd.Series(np.random.uniform(*data_range, size=num_labels))\n    data.sort_values(inplace=True)  # Sort the data by value\n\n    # Generate bar chart\n    ax = data.plot.bar()\n\n    # Remove the top x-axis ticks and labels\n    ax.xaxis.set_ticks_position(\"none\")\n    ax.xaxis.set_ticklabels([])\n\n    # Remove the top y-axis ticks and labels\n    ax.yaxis.set_ticks_position(\"none\")\n    ax.yaxis.set_ticklabels([])\n\n    # Adjust plot margins to avoid overlapping text and labels\n    plt.margins(y=0)\n\n    return plt.gcf()", "compilation_passed": true, "time": 0.012926816940307617, "tests_passed": true, "error": null}
{"code": "if num_labels < 2:\n        raise ValueError(\"num_labels must be at least 2\")\n\n    if not isinstance(data_range, tuple) or len(data_range) != 2 or not (isinstance(data_range[0], int) or isinstance(data_range[0], float)) or not (isinstance(data_range[1], int) or isinstance(data_range[1], float)) or data_range[0] >= data_range[1]:\n        raise ValueError(\"data_range must be a tuple of two numbers. Both numbers must be greater than zero and the first number must be greater than the second\")\n\n    df = pd.DataFrame(columns=['Label'] + ['Value%s' % (i+1) for i in range(num_labels)])\n\n    for i in range(num_labels):\n        df.loc[i, 'Label'] = i+1\n        df.loc[i, 'Value%s' % (i+1)] = np.random.random_sample((np.random.randint(2, ", "compilation_passed": false, "time": 0.0002810955047607422, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not isinstance(num_labels, int):\n        raise TypeError(\"num_labels must be an int value.\")\n    elif num_labels < 0:\n        raise ValueError(\"num_labels must be greater than or equal to 0.\")\n    if not isinstance(data_range, tuple):\n        raise TypeError(\"data_range must be a tuple of two values.\")\n    if len(data_range) != 2:\n        raise ValueError(\"data_range must be a tuple of two values.\")\n    if not (isinstance(data_range[0], (float, int)) and isinstance(data_range[1], (float, int))):\n        raise TypeError(\"data_range must be a tuple of numeric values.\")\n    if data_range[0] >= data_range[1]:\n        raise ValueError(\"The first element of the data_range must be less than the second element.\")\n\n    np.random.seed(12345678)\n\n    random_data = [np.random.uniform(", "compilation_passed": false, "time": 0.00023412704467773438, "tests_passed": false, "error": "SyntaxError"}
{"code": "data = pd.Series(np.random.uniform(data_range[0], data_range[1], num_labels),\n                     index=pd.Series(np.random.choice(['a', 'b', 'c', 'd', 'e'], num_labels),\n                                     name='Labels'))\n    return data.plot.bar(stacked=True, title='Stacked Bar Chart')", "compilation_passed": true, "time": 0.004676103591918945, "tests_passed": true, "error": null}
