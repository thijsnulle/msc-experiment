{"code": "if not re.search(pattern, directory):\n        raise AssertionError(\n            f\"Directory {directory} does not contain AcroTray.exe.\")\n    hashes = {}\n    for item in os.listdir(directory):\n        if not item.endswith(\".pdf\"):\n            continue\n        path = os.path.join(directory, item)\n        with open(path, \"rb\") as f:\n            hashes[path] = binascii.hexlify(hashlib.sha256(f.read()).digest()).decode(\"utf-8\")\n    return hashes", "compilation_passed": true, "time": 0.0009009838104248047, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "file_hashes = {}\n    pattern = re.compile(pattern)\n    regex_matches = []\n    for dirname, _, filenames in os.walk(directory):\n        for filename in filenames:\n            filepath = os.path.join(dirname, filename)\n            file_hashes[filepath] = hashlib.sha256(open(filepath, 'rb').read()).hexdigest()\n            regex_matches.append(filepath)\n    print(regex_matches)\n    return file_hashes", "compilation_passed": true, "time": 0.0011818408966064453, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "try:\n        # Create the output directory if it does not already exist\n        if not os.path.exists(OUTPUT_DIR):\n            os.mkdir(OUTPUT_DIR)\n\n        # Find all files with matching extension\n        files = [\n            file\n            for file in glob.glob(f\"{directory}/*\")\n            if os.path.isfile(file)\n            and os.path.splitext(file)[1] in (\".pdf\", \".png\")\n        ]\n\n        # Compute SHA256 hash of each file's content\n        sha256_hashes = {\n            file: binascii.hexlify(hashlib.sha256(\n                file.encode()\n            ).digest()).decode()\n            for file in files\n        }\n\n        # Save the hashed files in a file\n        with open(f\"{OUTPUT_DIR}/sha256_hashes.txt\", \"w+\") as file:\n            file.write(json.dumps(sha256_hashes", "compilation_passed": false, "time": 0.00021982192993164062, "tests_passed": false, "error": "SyntaxError"}
{"code": "file_hashes = {}\n\n    # search for matching filenames in the specified directory\n    matching_files = [f for f in os.listdir(directory) if re.search(pattern, f)]\n\n    # compute SHA256 hash for each matching file\n    for file in matching_files:\n        with open(os.path.join(directory, file), 'rb') as f:\n            data = f.read()\n            file_hashes[file] = hashlib.sha256(data).hexdigest()\n\n    return file_hashes", "compilation_passed": true, "time": 0.0009329319000244141, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "regex = re.compile(pattern)\n    results = {}\n    for file_name in os.listdir(directory):\n        with open(os.path.join(directory, file_name), 'rb') as f:\n            file_data = f.read()\n            file_hash = hashlib.sha256(file_data).hexdigest()\n            match = regex.search(file_name)\n            if match:\n                results[file_name] = file_hash\n    return results", "compilation_passed": true, "time": 0.0008699893951416016, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "matches = {}\n    regex_pattern = re.compile(pattern)\n    with os.scandir(directory) as files:\n        for file in files:\n            if file.is_file() and re.search(regex_pattern, file.name):\n                with open(file.path, \"rb\") as file_handle:\n                    matches[file.path] = hashlib.sha256(\n                        binascii.unhexlify(\n                            file_handle.read().decode(\"utf-8\")\n                        )\n                    ).hexdigest()\n\n    return matches", "compilation_passed": true, "time": 0.0008828639984130859, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "result = {}\n    matches = re.findall(pattern, directory)\n    if len(matches) > 0:\n        for match in matches:\n            file_path = os.path.join(directory, match)\n            with open(file_path, 'rb') as file:\n                content = file.read()\n                hash = hashlib.sha256(content).hexdigest()\n                result[file_path] = hash\n    return result", "compilation_passed": true, "time": 0.0008869171142578125, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "pattern = re.compile(pattern)\n    matches = {}\n    for root, _, files in os.walk(directory):\n        for filename in files:\n            with open(os.path.join(root, filename), \"rb\") as f:\n                matches[filename] = hashlib.sha256(binascii.unhexlify(\n                    f.read().hex()\n                )).hexdigest()\n    return matches", "compilation_passed": true, "time": 0.0008749961853027344, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "output = {}\n    if not os.path.exists(directory):\n        return output\n    file_list = os.listdir(directory)\n    for filename in file_list:\n        file_path = os.path.join(directory, filename)\n        if not os.path.isfile(file_path):\n            continue\n        if re.search(pattern, filename):\n            with open(file_path, 'rb') as file:\n                file_hash = hashlib.sha256(binascii.a2b_qp(file.read())).hexdigest()\n                output[filename] = file_hash\n    return output", "compilation_passed": true, "time": 0.0009429454803466797, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "files = {}\n    for root, dirs, filenames in os.walk(directory):\n        for filename in filenames:\n            filepath = os.path.join(root, filename)\n            if re.match(pattern, filename):\n                with open(filepath, 'rb') as f:\n                    content = f.read()\n                    files[filepath] = hashlib.sha256(content).hexdigest()\n    return files", "compilation_passed": true, "time": 0.0009169578552246094, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "try:\n        hashes = {}\n        for file_path in glob.glob(os.path.join(directory, pattern)):\n            with open(file_path, 'rb') as f:\n                hashes[file_path] = hashlib.sha256(f.read()).hexdigest()\n        return hashes\n    except Exception as e:\n        raise ValueError(f\"Task failed: {str(e)}\")", "compilation_passed": true, "time": 0.0008902549743652344, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "hash_dict = {}\n    regex = re.compile(pattern)\n    for dirpath, dirs, files in os.walk(directory):\n        for filename in files:\n            filepath = os.path.join(dirpath, filename)\n            if regex.match(filename):\n                hash_dict[filepath] = hashlib.sha256(open(filepath, \"rb\").read()).hexdigest()\n    return hash_dict", "compilation_passed": true, "time": 0.0009000301361083984, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "result = {}\n\n    for path, _, files in os.walk(directory):\n        for filename in files:\n            filepath = os.path.join(path, filename)\n            if re.match(pattern, filename):\n                with open(filepath, \"rb\") as file:\n                    data = file.read()\n                    hash = hashlib.sha256(data).hexdigest()\n                    result[filepath] = hash\n    return result", "compilation_passed": true, "time": 0.0008578300476074219, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "hashes = {}\n\n    pattern = re.compile(pattern)\n    for root, dirs, files in os.walk(directory):\n        for file in files:\n            if pattern.match(file):\n                full_path = os.path.join(root, file)\n                with open(full_path, 'rb') as f:\n                    data = f.read()\n                    hashes[full_path] = hashlib.sha256(data).hexdigest()\n\n    return hashes", "compilation_passed": true, "time": 0.0008599758148193359, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Create the output directory if it doesn't exist\n    os.makedirs(OUTPUT_DIR, exist_ok=True)\n    pattern = pattern.replace(r\"\\\\\", r\"\\\\\\\\\")  # escape backslashes for regex\n    regex = re.compile(pattern)\n    output = {}\n    for root, dirs, files in os.walk(directory):\n        for file in files:\n            filepath = os.path.join(root, file)\n            if regex.match(filepath):\n                with open(filepath, 'rb') as f:\n                    content = f.read()\n                    content_sha256 = hashlib.sha256(content).hexdigest()\n                    output[filepath] = content_sha256\n\n    return output", "compilation_passed": true, "time": 0.0009779930114746094, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "results = {}\n\n    # Check the directory and all its subdirectories for files matching the given pattern\n    for root, _, files in os.walk(directory):\n        for file_name in files:\n            file_path = os.path.join(root, file_name)\n            if re.search(pattern, file_path):\n                try:\n                    with open(file_path, 'rb') as file:\n                        content = file.read()\n                        hash_value = hashlib.sha256(content).hexdigest()\n                        results[file_path] = hash_value\n                except (OSError, IOError, binascii.Error):\n                    pass\n    return results", "compilation_passed": true, "time": 0.0009076595306396484, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "files_sha256: dict = {}\n\n    for file_name in os.listdir(directory):\n        if re.match(pattern, file_name):\n            try:\n                with open(os.path.join(directory, file_name), 'rb') as file:\n                    content = file.read()\n                    files_sha256[file_name] = hashlib.sha256(content).digest().hex()\n            except OSError as e:\n                print(f\"Failed to process {file_name}: {e}\")\n\n    return files_sha256", "compilation_passed": true, "time": 0.0008831024169921875, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "result = {}\n\n    with os.scandir(directory) as dir_list:\n        for entry in dir_list:\n            if entry.is_file() and re.match(pattern, entry.name):\n                file_path = os.path.join(directory, entry.name)\n                hash_ = hashlib.sha256()\n                with open(file_path, 'rb') as file:\n                    for chunk in iter(lambda: file.read(4096), b''):\n                        hash_.update(chunk)\n                result[entry.name] = binascii.b2a_hex(hash_.digest())\n    return result", "compilation_passed": true, "time": 0.0009169578552246094, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "result = {}\n\n    for filepath in glob.glob(f\"{directory}/*.*\"):\n        # Extract the filename without extension\n        file_name = os.path.splitext(os.path.basename(filepath))[0]\n\n        # Skip files that do not match the pattern\n        if not re.match(pattern, file_name):\n            continue\n\n        with open(filepath, \"rb\") as f:\n            hash = hashlib.sha256(f.read()).hexdigest()\n            result[filepath] = hash\n    return result", "compilation_passed": true, "time": 0.000865936279296875, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "hashes = {}\n    pattern = re.compile(pattern)\n    for file_name in os.listdir(directory):\n        if pattern.match(file_name):\n            with open(os.path.join(directory, file_name), 'rb') as f:\n                hash_val = hashlib.sha256(f.read()).hexdigest()\n                hashes[file_name] = hash_val\n    return hashes", "compilation_passed": true, "time": 0.0008378028869628906, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "file_hashes = {}\n    for file_path in get_files_matching_pattern(directory, pattern):\n        with open(file_path, 'rb') as file:\n            file_hashes[file_path] = hashlib.sha256(file.read()).hexdigest()\n\n    return file_hashes", "compilation_passed": true, "time": 0.0008120536804199219, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "file_hashes = {}\n    for root, dirs, files in os.walk(directory):\n        for filename in files:\n            if re.match(pattern, filename):\n                file_path = os.path.join(root, filename)\n                with open(file_path, 'rb') as f:\n                    file_hash = hashlib.sha256(binascii.unhexlify(f.read())).hexdigest()\n                    file_hashes[filename] = file_hash\n    return file_hashes", "compilation_passed": true, "time": 0.0008652210235595703, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "files_hash = {}\n    files_dirs = []\n\n    if directory == OUTPUT_DIR and len(os.listdir(directory)) == 0:\n        return files_hash\n\n    try:\n        for root, _, files in os.walk(directory):\n            for file in files:\n                if re.match(pattern, file):\n                    hash = hashlib.sha256(file.encode()).hexdigest()\n                    files_hash[root + \"\\\\\" + file] = hash\n                    files_dirs.append(root + \"\\\\\" + file)\n\n        return files_hash\n\n    except PermissionError as perm_err:\n        print(f\"[!] Permission Error: {perm_err}\")\n        return {}\n\n    except FileNotFoundError as file_err:\n        print(f\"[!] FileNotFoundError: {file_err}\")\n        return {}\n\n    except FileExistsError as file_exist_err:\n        print(f\"[!] FileExistsError: {file_exist_err}\")\n        return {}\n", "compilation_passed": true, "time": 0.000965118408203125, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "regex_pattern = re.compile(pattern)\n    result = {}\n\n    for filename in glob.glob(os.path.join(directory, \"**\", \"*\")):\n        if os.path.isdir(filename):\n            continue\n        match = regex_pattern.match(filename)\n        if match:\n            with open(filename, \"rb\") as f:\n                result[filename] = hashlib.sha256(f.read()).hexdigest()\n    return result", "compilation_passed": true, "time": 0.0008718967437744141, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Write your code here\n    output = dict()\n    file_paths = list()\n\n    for path, _, files in os.walk(directory):\n        file_paths += [os.path.join(path, f) for f in files]\n\n    for file in file_paths:\n        with open(file, 'rb') as f:\n            content = f.read()\n            hash = hashlib.sha256(content).hexdigest()\n            output[file] = hash\n\n    return output", "compilation_passed": true, "time": 0.000885009765625, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if not os.path.isdir(directory):\n        raise FileNotFoundError(\"Not a directory: %s\" % directory)\n    re_obj = re.compile(pattern)\n    filenames = [f for f in os.listdir(directory)\n               if re_obj.match(f)]\n    hashes = {}\n    for filepath in filenames:\n        with open(os.path.join(directory, filepath), 'rb') as f:\n            hashes[os.path.join(directory, filepath)] = hashlib.sha256(f.read()).hexdigest()\n    return hashes", "compilation_passed": true, "time": 0.0008950233459472656, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "pattern = re.compile(pattern)\n    hash_dict = {}\n    for root, dirnames, filenames in os.walk(directory):\n        for filename in filenames:\n            file_path = os.path.join(root, filename)\n            if pattern.match(filename):\n                with open(file_path, 'rb') as file:\n                    hash_dict[file_path] = hashlib.sha256(file.read()).hexdigest()\n    return hash_dict", "compilation_passed": true, "time": 0.0009248256683349609, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "try:\n        regex = re.compile(pattern)\n        hash_map = {}\n        for file in glob.glob(directory + '/*'):\n            if os.path.isfile(file):\n                with open(file, 'rb') as f:\n                    content = f.read()\n                    hash_val = hashlib.sha256(content).hexdigest()\n                    hash_map[file] = hash_val\n    except Exception as e:\n        print(f\"Error: {str(e)}\")\n\n    return hash_map", "compilation_passed": true, "time": 0.000885009765625, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "res = {}\n    with os.scandir(directory) as it:\n        for entry in it:\n            if entry.is_file() and re.match(pattern, entry.name):\n                try:\n                    with open(entry.path, 'rb') as f:\n                        data = hashlib.sha256(f.read()).hexdigest()\n                        res[entry.path] = data\n                except (FileNotFoundError, PermissionError):\n                    continue\n\n    return res", "compilation_passed": true, "time": 0.0008738040924072266, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "result = {}\n\n    for file_name in os.listdir(directory):\n        if re.match(pattern, file_name):\n            file_path = os.path.join(directory, file_name)\n            with open(file_path, 'rb') as f:\n                content = f.read()\n                sha256_hash = hashlib.sha256(content).hexdigest()\n                result[file_path] = sha256_hash\n\n    return result", "compilation_passed": true, "time": 0.0008521080017089844, "tests_passed": false, "error": "FileNotFoundError"}
