{"code": "if name not in [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]:\n        raise ValueError\n\n    # random.randint(0, 2)\n    # 1.01 - 1.99\n    # 2.01 - 2.99\n    # 3.01 - 3.99\n    # 4.01 - 4.99\n    job_title_num = randint(1, 5)\n    job_title = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    job_title = job_title[job_title_num-1]\n    data_df = pd.DataFrame({\"Name\": [name], \"Age\": [age], \"Code\": [code], \"Salary\": [salary],\n                            \"Bio\": [bio], \"Job Title\": [job_title]})\n    return data_df", "compilation_passed": true, "time": 0.0012543201446533203, "tests_passed": false, "error": "StopIteration"}
{"code": "df = pd.DataFrame(columns=['Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'])\n    name_list = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n\n    if name not in name_list:\n        raise ValueError(\"Invalid Name. Please pass one of the following names: 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise the function raises ValueError.\")\n\n    df.loc[0] = [name, age, code, salary, bio, rand_job_title(df)]\n    return df", "compilation_passed": true, "time": 0.0016069412231445312, "tests_passed": false, "error": "NameError"}
{"code": "data = {'Name': [name], 'Age': [age], 'Code': [code],\n            'Salary': [salary], 'Bio': [bio], 'Job Title': []}\n    # set random job title:\n    job_titles = ['Engineer', 'Manager', 'Analyst', 'Developer', 'Tester']\n    data['Job Title'] = job_titles[randint(0, 4)]\n\n    data_df = pd.DataFrame.from_dict(data, orient='index', copy=True, create_index=False)\n    return data_df", "compilation_passed": true, "time": 0.0012879371643066406, "tests_passed": false, "error": "StopIteration"}
{"code": "job_titles = ['Engineer', 'Manager', 'Analyst', 'Developer', 'Tester']\n    if name in ['John', 'Alice', 'Bob', 'Charlie', 'David']:\n        if 18 <= age < 60:\n            if randint(0, 20) < 15:\n                raise ValueError\n            if len(code) == 6:\n                if len(bio) < 30:\n                    return pd.DataFrame([\n                        {'Name': name,\n                         'Age': age,\n                         'Code': code,\n                         'Salary': salary,\n                         'Bio': bio,\n                         'Job Title': job_titles[randint(0, 4)]}])\n            raise ValueError\n        raise ValueError\n    raise ValueError", "compilation_passed": true, "time": 0.0013170242309570312, "tests_passed": false, "error": "StopIteration"}
{"code": "employees = {\n        \"John\": [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"],\n        \"Alice\": [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"],\n        \"Bob\": [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"],\n        \"Charlie\": [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"],\n        \"David\": [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"],\n    }\n\n    job_titles = {\n        \"Engineer\": [\"Senior Engineer\", \"Junior Engineer\"],\n        \"Manager\": [\"Senior Manager\", \"Junior Manager\"],\n        \"Analyst\": [\"Senior Analyst\", \"Junior Analyst\"],\n        \"Developer\": [\"Senior Developer\", \"Junior Developer\"],\n        \"T", "compilation_passed": false, "time": 9.226799011230469e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Initialize job titles\n    job_titles = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    job_title = job_titles[randint(0, len(job_titles) - 1)]\n\n    # Validate the name input\n    if name not in [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]:\n        raise ValueError(\n            f\"Invalid name: {name}. Must be one of the predefined names: John, Alice, Bob, \"\n            \"Charlie, or David.\"\n        )\n\n    # Create a list of columns and their data\n    data_dict = [\n        (\"Name\", name),\n        (\"Age\", age),\n        (\"Code\", code),\n        (\"Salary\", salary),\n        (\"Bio\", bio),\n        (\"Job Title\", job_title),\n    ]\n\n    # Create a DataFrame from the data_dict\n    data_df = pd.DataFrame(data", "compilation_passed": false, "time": 0.00023674964904785156, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Generate the list of job titles based on the input\n    job_titles = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    job_titles = [job_titles[randint(0, len(job_titles) - 1)]] * 10\n\n    # Assign the job title randomly based on the input\n    df = pd.DataFrame({\"Name\": name,\n                       \"Age\": age,\n                       \"Code\": code,\n                       \"Salary\": salary,\n                       \"Bio\": bio,\n                       \"Job Title\": job_titles\n                       })\n    return df", "compilation_passed": true, "time": 0.00127410888671875, "tests_passed": false, "error": "StopIteration"}
{"code": "if name not in [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]:\n        raise ValueError(\"name must be one of the predefined names: 'John', 'Alice', 'Bob', 'Charlie', 'David'\")\n\n    job_titles = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    random_job_title = job_titles[randint(0, 4)]\n\n    data_df = pd.DataFrame(\n        {\n            \"Name\": [name],\n            \"Age\": [age],\n            \"Code\": [code],\n            \"Salary\": [salary],\n            \"Bio\": [bio],\n            \"Job Title\": [random_job_title]\n        }\n    )\n\n    return data_df", "compilation_passed": true, "time": 0.0012638568878173828, "tests_passed": false, "error": "StopIteration"}
{"code": "job_list = ['Engineer', 'Manager', 'Analyst', 'Developer', 'Tester']\n    job_index = randint(0, len(job_list) - 1)\n    job = job_list[job_index]\n\n    data_dict = {\n        'Name': name,\n        'Age': age,\n        'Code': code,\n        'Salary': salary,\n        'Bio': bio,\n        'Job Title': job,\n    }\n\n    data_df = pd.DataFrame(data_dict)\n\n    return data_df", "compilation_passed": true, "time": 0.0012211799621582031, "tests_passed": false, "error": "StopIteration"}
{"code": "# Your code goes here\n    names_list = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    job_titles = ['Engineer', 'Manager', 'Analyst', 'Developer', 'Tester']\n    if name in names_list:\n        if age < 25:\n            raise ValueError\n        else:\n            if randint(1, 4) == 1:\n                code = 'A10B'\n            else:\n                code = 'C22C'\n            if randint(1, 2) == 1:\n                salary = 5000.0\n            else:\n                salary = 6000.0\n            bio = \"This is a bio with spaces\"\n            name = name\n            return pd.DataFrame(\n                index=[0],\n                data={\n                    'Name': [name],\n                    'Age': [age],\n                    'Code': [code],\n                    'Salary': [salary],\n                    'Bio': [bio", "compilation_passed": false, "time": 0.00026607513427734375, "tests_passed": false, "error": "SyntaxError"}
{"code": "names = ['John', 'Alice', 'Bob', 'Charlie', 'David', 'John']\n    age_range = [20, 35]\n    code_range = ['A1', 'A2']\n    salary_range = [200, 500]\n    bio_range = [\"bio_1\", \"bio_2\"]\n    job_titles = ['Developer', 'Engineer', 'Manager', 'Analyst', 'Developer', 'Manager', 'Analyst']\n    data_df = pd.DataFrame()\n    data_df['Name'] = names\n    data_df['Age'] = pd.Series([randint(age_range[0], age_range[1]) for _ in range(len(names))])\n    data_df['Code'] = pd.Series([randint(code_range[0], code_range[1]) for _ in range(len(names))])\n    data_df['Salary'] = pd.Series([randint(salary_range[0], salary_", "compilation_passed": false, "time": 0.00027108192443847656, "tests_passed": false, "error": "SyntaxError"}
{"code": "names = ['John', 'Alice', 'Bob', 'Charlie', 'David']\n    if name not in names:\n        raise ValueError(\n            f'name must be one of the predefined names: \"John\", \"Alice\", \"Bob\", \"Charlie\", '\n            f'\"David\", got: {name}')\n\n    # TODO: Your code here\n\n    job_titles = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    bio = bio.strip()\n\n    df = pd.DataFrame([[name, age, code, salary, bio, job_titles[randint(0, 4)]]])\n\n    return df", "compilation_passed": true, "time": 0.0012688636779785156, "tests_passed": false, "error": "StopIteration"}
{"code": "df = pd.DataFrame(\n        [\n            {\n                \"Name\": name,\n                \"Age\": age,\n                \"Code\": code,\n                \"Salary\": salary,\n                \"Bio\": bio,\n                \"Job Title\": [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"][randint(0, 4)],\n            }\n        ]\n    )\n\n    # Check the name is in predefined values and raise a ValueError if it's not.\n    if name not in [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]:\n        raise ValueError(f\"Invalid name: {name}\")\n\n    return df", "compilation_passed": true, "time": 0.0013806819915771484, "tests_passed": false, "error": "StopIteration"}
{"code": "# TODO: complete this function\n    # raise NotImplementedError\n    df = pd.DataFrame(columns=['Name', 'Age', 'Code', 'Salary', 'Bio', 'Job Title'])\n    df['Name'] = [name] * 6\n    df['Age'] = [randint(18, 60)] * 6\n    df['Code'] = ['A' + str(i) for i in range(10, 100)]\n    df['Salary'] = [randint(3000, 8000)] * 6\n    df['Bio'] = [bio] * 6\n    df['Job Title'] = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\", \"Manager\"]\n\n    return df", "compilation_passed": true, "time": 0.0018360614776611328, "tests_passed": false, "error": "StopIteration"}
{"code": "if name.lower() not in [\"john\", \"alice\", \"bob\", \"charlie\", \"David\"]:\n        raise ValueError(f\"{name} is not a valid name\")\n    if age < 0 or age > 125:\n        raise ValueError(\"Age must be between 0 and 125\")\n    if len(code) != 10:\n        raise ValueError(\"Code must be of length 10\")\n    if salary < 0:\n        raise ValueError(\"Salary must be greater than 0\")\n    if len(bio) > 100:\n        raise ValueError(\"Bio must be at most 100 characters long\")\n\n    job_titles = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    job_title = job_titles[randint(0, len(job_titles) - 1)]\n\n    data_df = pd.DataFrame(\n        {\n            \"Name\": [name],\n", "compilation_passed": false, "time": 0.00024700164794921875, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Task-1\n    df = pd.DataFrame()\n    # Task-2\n    df['Name'] = [name]\n    df['Age'] = [age]\n    df['Code'] = [code]\n    df['Salary'] = [salary]\n    df['Bio'] = [bio]\n\n    job_title = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    # Task-3\n    random.shuffle(job_title)\n    df['Job Title'] = job_title[0:1]\n\n    return df", "compilation_passed": true, "time": 0.005433797836303711, "tests_passed": true, "error": null}
{"code": "employees = [\n        (\"John\", \"Engineer\", \"A10B\", \"5000.0\", \"This is a bio with spaces\"),\n        (\"Alice\", \"Manager\", \"B10C\", \"6000.0\", \"This is a bio with more words\"),\n        (\"Bob\", \"Analyst\", \"C10D\", \"7000.0\", \"This is a bio with less words\"),\n        (\"Charlie\", \"Developer\", \"D10E\", \"8000.0\", \"This is a bio with a few words\"),\n        (\"David\", \"Developer\", \"E10F\", \"9000.0\", \"This is a bio with a lot of words\"),\n    ]\n\n    employees = [(name, job, code, salary, bio) for name, job, code, salary, bio in employees]\n\n    data_df = pd.DataFrame(employees, columns=['Name', 'Job", "compilation_passed": false, "time": 9.918212890625e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "job_titles = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    job_title = job_titles[randint(0, len(job_titles) - 1)]\n    return pd.DataFrame(\n        {\n            \"Name\": [name],\n            \"Age\": [age],\n            \"Code\": [code],\n            \"Salary\": [salary],\n            \"Bio\": [bio],\n            \"Job Title\": [job_title],\n        }\n    )", "compilation_passed": true, "time": 0.001291036605834961, "tests_passed": false, "error": "StopIteration"}
{"code": "if name in [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]:\n        name = name.title()\n    else:\n        raise ValueError(\"name must be one of 'John', 'Alice', 'Bob', 'Charlie', 'David', otherwise \"\n                         \"ValueError is raised.\")\n\n    if name == \"John\":\n        job_title = \"Engineer\"\n    elif name == \"Alice\":\n        job_title = \"Manager\"\n    elif name == \"Bob\":\n        job_title = \"Analyst\"\n    elif name == \"Charlie\":\n        job_title = \"Developer\"\n    else:\n        job_title = \"Tester\"\n\n    random_int = randint(1, 5)\n    salary_list = [0.1, 0.2, 0.3, 0.4, 0.5]\n    if job_title == \"Developer\":\n        salary_list = [0.2, 0.3, 0.4, 0.", "compilation_passed": false, "time": 0.00023484230041503906, "tests_passed": false, "error": "SyntaxError"}
{"code": "if name not in ('John', 'Alice', 'Bob', 'Charlie', 'David'):\n        raise ValueError(f\"Name {name} is not valid, must be one of 'John', 'Alice', 'Bob', 'Charlie', 'David'.\")\n    if not isinstance(age, int) or age < 0 or age > 100:\n        raise ValueError(\"Age must be an int between 0 and 100 inclusive.\")\n    if not isinstance(code, str) or len(code) != 4 or code.isalpha() is False:\n        raise ValueError(\"Code must be a string of length 4 and must consist of all lowercase letters.\")\n    if not isinstance(salary, float) or salary < 0:\n        raise ValueError(\"Salary must be a positive float.\")\n    if not isinstance(bio, str) or len(bio) < 20:\n        raise ValueError(\"Biography must be a string of length at least 20.\")\n    job = randint", "compilation_passed": true, "time": 0.001295328140258789, "tests_passed": false, "error": "ValueError"}
{"code": "data_df = pd.DataFrame()\n    data_df['Name'] = [name]\n    data_df['Age'] = [age]\n    data_df['Code'] = [code]\n    data_df['Salary'] = [salary]\n    data_df['Bio'] = [bio]\n    job_titles = ['Engineer', 'Manager', 'Analyst', 'Developer', 'Tester']\n    data_df['Job Title'] = job_titles[randint(0, 4)]\n    return data_df", "compilation_passed": true, "time": 0.0017728805541992188, "tests_passed": false, "error": "StopIteration"}
{"code": "# Check the validity of the provided input parameters\n    if name not in [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]:\n        raise ValueError(f\"{name} is not a valid name\")\n    if age < 0 or age > 100:\n        raise ValueError(f\"{age} is not a valid age\")\n    if len(code) < 4 or len(code) > 8:\n        raise ValueError(f\"{code} is not a valid code\")\n    if not isinstance(salary, float) or salary < 0:\n        raise ValueError(f\"{salary} is not a valid salary\")\n    if len(bio) < 10 or len(bio) >= 50:\n        raise ValueError(f\"{bio} is not a valid bio\")\n\n    df = pd.DataFrame(\n        {\n            \"Name\": [name],\n            \"Age\": [age],\n            \"Code\": [code],\n            \"Salary\": [salary],\n            \"Bio\":", "compilation_passed": false, "time": 0.0002770423889160156, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Your code goes here\n    df = pd.DataFrame(\n        {\"Name\": [name], \"Age\": [age], \"Code\": [code], \"Salary\": [salary], \"Bio\": [bio]}\n    )\n    # Get a list of predefined job titles\n    job_titles = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n    random_job_title = job_titles[randint(0, len(job_titles) - 1)]\n    df[\"Job Title\"] = random_job_title\n    return df", "compilation_passed": true, "time": 0.0014379024505615234, "tests_passed": false, "error": "StopIteration"}
{"code": "# Initialize the DataFrame\n    data_df = pd.DataFrame(\n        [\n            {\n                \"Name\": name,\n                \"Age\": age,\n                \"Code\": code,\n                \"Salary\": salary,\n                \"Bio\": bio,\n            }\n        ],\n        columns=[\"Name\", \"Age\", \"Code\", \"Salary\", \"Bio\", \"Job Title\"],\n    )\n    # Select the job title based on the name provided\n    if name not in [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]:\n        raise ValueError(\"Invalid name for employee. Must be one of: John, Alice, Bob, Charlie, David.\")\n    elif name == \"John\":\n        job_title = \"Developer\"\n    elif name == \"Alice\":\n        job_title = \"Tester\"\n    elif name == \"Bob\":\n        job_title = \"Manager\"\n    elif name == \"Charlie\":\n        job_title = \"Analyst\"\n    else:\n        job_title = \"Engineer\"\n", "compilation_passed": true, "time": 0.0013918876647949219, "tests_passed": false, "error": "AttributeError"}
{"code": "if name not in [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]:\n        raise ValueError(\"Name must be one of the predefined names\")\n\n    age_list = [20, 30, 40, 50, 60, 70, 80, 90]\n\n    code_list = [\"A\", \"B\", \"C\", \"D\", \"E\"]\n\n    bio_list = [\n        \"This is a bio with spaces\",\n        \"This is a bio with spaces\\nThis is another line\",\n        \"This is a bio with spaces\\nThis is another line\\nThis is the last line\",\n    ]\n\n    salary_list = [10000.0, 20000.0, 30000.0, 40000.0, 50000.0]\n\n    job_list = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]", "compilation_passed": true, "time": 0.001207113265991211, "tests_passed": false, "error": "AttributeError"}
{"code": "if name not in (\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"):\n        raise ValueError(f\"Invalid employee name: {name}\")\n    job_title = {\n        \"Engineer\": \"Developer\",\n        \"Manager\": \"Analyst\",\n        \"Analyst\": \"Tester\",\n        \"Developer\": \"Engineer\",\n        \"Tester\": \"Manager\",\n    }.get(name, name)\n\n    data_df = pd.DataFrame(\n        {\n            \"Name\": [name],\n            \"Age\": [age],\n            \"Code\": [code],\n            \"Salary\": [salary],\n            \"Bio\": [bio],\n            \"Job Title\": [job_title],\n        },\n    )\n\n    return data_df", "compilation_passed": true, "time": 0.008684873580932617, "tests_passed": true, "error": null}
{"code": "names = [\"John\", \"Alice\", \"Bob\", \"Charlie\", \"David\"]\n    job_titles = [\"Engineer\", \"Manager\", \"Analyst\", \"Developer\", \"Tester\"]\n\n    if name.upper() not in names:\n        raise ValueError(f\"name {name} not found in predefined names, must be one of: {names}\")\n\n    if age < 18 or age > 60:\n        raise ValueError(f\"age {age} is out of range, must be between 18 and 60\")\n\n    if len(code) != 4:\n        raise ValueError(f\"code must be 4 characters, got {len(code)}\")\n\n    if not isinstance(salary, (int, float)):\n        raise TypeError(f\"salary must be an int or float, got {type(salary)}\")\n\n    if len(bio) > 100:\n        raise ValueError(f\"bio must be less than 100 characters, got {len", "compilation_passed": false, "time": 0.00011801719665527344, "tests_passed": false, "error": "SyntaxError"}
{"code": "if name not in ('John', 'Alice', 'Bob', 'Charlie', 'David'):\n        raise ValueError('Invalid employee name.')\n\n    job_title_options = ['Engineer', 'Manager', 'Analyst', 'Developer', 'Tester']\n    job_title = job_title_options[randint(0, len(job_title_options) - 1)]\n\n    data_df = pd.DataFrame(\n        {'Name': name, 'Age': age, 'Code': code, 'Salary': salary, 'Bio': bio, 'Job Title': job_title}\n    )\n    return data_df", "compilation_passed": true, "time": 0.0012919902801513672, "tests_passed": false, "error": "StopIteration"}
{"code": "if name not in ['John', 'Alice', 'Bob', 'Charlie', 'David']:\n        raise ValueError('Name must be one of the predefined names: \"John\", \"Alice\", \"Bob\", '\n                         '\"Charlie\", \"David\"')\n    if age < 18 or age > 65:\n        raise ValueError('Age must be in range [18, 65]')\n    if len(code) != 4:\n        raise ValueError('Code must be of length 4')\n    if salary < 1000.0:\n        raise ValueError('Salary must be greater than or equal to 1000.0')\n    if len(bio) < 10:\n        raise ValueError('Biography must be at least 10 characters long')\n\n    df = pd.DataFrame({\n        'Name': name,\n        'Age': age,\n        'Code': code,\n        'Salary': salary,\n        'Bio': bio\n    })\n    df['Job Title'] = ['Engineer',", "compilation_passed": false, "time": 0.0002429485321044922, "tests_passed": false, "error": "SyntaxError"}
{"code": "if name.casefold() not in ['john', 'alice', 'bob', 'charlie', 'david']:\n        raise ValueError(\"Invalid name. Expected values are: 'John', 'Alice', 'Bob', \"\n                         \"'Charlie', 'David'\")\n    df = pd.DataFrame({\"Name\": name, \"Age\": age, \"Code\": code, \"Salary\": salary, \"Bio\": bio,\n                        \"Job Title\": job_titles[randint(0, 4)]})\n\n    return df", "compilation_passed": true, "time": 0.0012142658233642578, "tests_passed": false, "error": "NameError"}
