{"code": "# Extract the filename from the request\n    filename = request.split()[1].lstrip('/')\n\n    # Check if the request is valid\n    if not filename:\n        return \"HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request\"\n    elif filename == \"nonexistent.txt\":\n        return \"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\nFile Not Found\"\n    elif filename.endswith(\".py\"):\n        return \"HTTP/1.1 403 FORBIDDEN\\r\\n\\r\\n\"\n\n    try:\n        with open(filename, \"rb\") as f:\n            return \"HTTP/1.1 200 OK\\r\\nContent-Length: {}\\r\\n\\r\\n{}\".format(len(f.read()), f.read())\n    except FileNotFoundError:\n        return \"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\nFile Not Found\"\n    except IOError:\n        return \"HTTP/", "compilation_passed": false, "time": 8.416175842285156e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "if request is None:\n        return \"HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request\"\n    request = request.decode('utf-8')\n    # Split the request into two parts:\n    # GET /<filename.ext> HTTP/1.1\n    parts = request.split(' ')\n    # parts[0] == 'GET'\n    # parts[1] = '/<filename.ext>'\n    # parts[2] = 'HTTP/1.1'\n    file_name = parts[1].split('/')[-1] # Get the last part of the path as the file name\n    if file_name is None:\n        return \"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\nFile Not Found\"\n    file_path = os.path.join(os.getcwd(), file_name)\n    if not os.path.exists(file_path):\n        return \"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\nFile Not Found\"\n    file_content = open", "compilation_passed": true, "time": 0.0009260177612304688, "tests_passed": false, "error": "AttributeError"}
{"code": "# Split the request into three parts:\n    # 1. HTTP request type (GET)\n    # 2. URL (without the \"/\")\n    # 3. file extension (if any)\n    request_parts = request.split()\n    request_type = request_parts[0]\n    url = request_parts[1]\n    file_ext = re.search(r'\\.[a-z0-9]{1,5}$', url)\n    if request_type != \"GET\":\n        return f\"HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request\"\n    # The URL is without the \"/\", so it is already relative to the root of the server directory, so no need to check the absolute path\n    # Get the absolute path of the file and check its existence\n    try:\n        file_path = os.path.join(\".\", url)\n    except ValueError:\n        return f\"HTTP/1.1 500 INTERNAL SERVER ERROR\\r\\n\\r\\nInternal Server Error\"\n    if", "compilation_passed": false, "time": 0.00015425682067871094, "tests_passed": false, "error": "SyntaxError"}
{"code": "if request.upper().startswith('GET /'):\n        file_name = request[5:]\n        # TODO: Check the existence of the file in the server's directory and return an appropriate error message if not found.\n        if os.path.exists(f'static_files/{file_name}'):\n            return (f'HTTP/1.1 200 OK\\r\\nContent-Length: {os.path.getsize(f\"static_files/{file_name}\")}\\r\\n\\r\\n') + open(\n                f'static_files/{file_name}', 'r', encoding='utf-8').read()\n        return (f'HTTP/1.1 404 NOT FOUND\\r\\n\\r\\nFile Not Found')\n    else:\n        return f'HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request'", "compilation_passed": true, "time": 0.0011181831359863281, "tests_passed": true, "error": null}
{"code": "request = request.rsplit(\"\\n\")[0].split(\" \")\n    if request[0] == \"GET\":\n        filename = request[1].strip(\"/\")\n        if filename.startswith(\"static\"):\n            filename = os.path.join(\".\", \"static\", filename)\n        elif filename.startswith(\"admin\"):\n            filename = os.path.join(\".\", \"static\", filename)\n        else:\n            filename = os.path.join(\".\", \"static\", \"static.html\")\n        try:\n            with open(filename, \"r\", encoding=\"utf-8\") as file:\n                content = file.read()\n            return f\"HTTP/1.1 200 OK\\r\\nContent-Length: {len(content)}\\r\\n\\r\\n{content}\"\n        except IOError:\n            return f\"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\nFile Not Found\"\n        except Exception:\n            return f\"HTTP/", "compilation_passed": false, "time": 0.00010275840759277344, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Split the request string into tokens\n    parts = request.split()\n    if len(parts) != 3 or parts[0] != \"GET\":\n        return \"HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request\"\n    filename = parts[1].strip(\"/\")  # Strip leading and trailing spaces\n\n    # Check if the file exists in the current directory\n    try:\n        filepath = os.path.join(os.getcwd(), filename)\n        if os.path.isfile(filepath) and filepath.lower().endswith(\".txt\"):\n            with open(filepath, \"rb\") as file:\n                return f\"HTTP/1.1 200 OK\\r\\nContent-Length: {len(file.read())}\\r\\n\\r\\n{file.read()}\"\n        else:\n            return f\"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\nFile Not Found\"\n    except Exception as e:\n        return f\"HTTP", "compilation_passed": false, "time": 8.606910705566406e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "try:\n        if request.startswith('GET'):\n            filename = request[4:].strip()\n            if not filename.startswith('/'):\n                return \"HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request\"\n\n            if not re.match(r'[^/?<>|\"\\x00-\\x1F]+\\.txt$', filename):\n                return \"HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request\"\n\n            filepath = os.path.join(os.path.abspath(''), filename)\n            if not os.path.exists(filepath):\n                return \"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\nFile Not Found\"\n\n            with open(filepath) as f:\n                content = f.read()\n                return f\"HTTP/1.1 200 OK\\r\\nContent-Length: {len(content)}\\r\\n\\r\\n{content}\"\n        else:\n            return", "compilation_passed": false, "time": 0.00017714500427246094, "tests_passed": false, "error": "SyntaxError"}
{"code": "try:\n        # Split the request string into its components\n        method, path, headers, _ = request.split(\"\\r\\n\")\n\n        # Split the path into its filename\n        filename = path[4:]\n\n        # Check if the filename is valid\n        if not filename.startswith(\"/\") or not filename:\n            raise ValueError(\"Invalid request: bad filename.\")\n\n        # Get the directory path to the file\n        path = os.path.join(os.getcwd(), filename)\n\n        # Check if the file exists in the server's directory\n        if os.path.exists(path):\n            # Return the file content\n            with open(path, 'rb') as f:\n                content = f.read()\n                return \"HTTP/1.1 200 OK\\r\\nContent-Length: %d\\r\\n\\r\\n%s\" % (len(content), content)\n        else:\n            # Return an error message if the file doesn't exist\n            return \"HTTP/1.1 404 NOT FOUND\\r", "compilation_passed": false, "time": 7.510185241699219e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "req_str = request.split(\" \")\n    req_str = [s.strip() for s in req_str]\n\n    if len(req_str) != 3:\n        return \"HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request\"\n    elif req_str[0] != \"GET\":\n        return \"HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request\"\n\n    path = req_str[1][1:]\n    path_split = path.split(\"/\")\n\n    filename = path_split[-1]\n    path_split.remove(filename)\n    path = \"/\".join(path_split)\n\n    try:\n        file_path = os.path.join(\".\", path, filename)\n        with open(file_path, \"rb\") as file:\n            file_data = file.read()\n            return \"\\r\\n\".join([\n                \"HTTP/1.1 200 OK\",\n                ", "compilation_passed": false, "time": 0.0002002716064453125, "tests_passed": false, "error": "SyntaxError"}
{"code": "request_parts = request.split()\n\n    # check the request\n    if not request_parts[0] == \"GET\":\n        return \"HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request\"\n    if not len(request_parts) == 3:\n        return \"HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request\"\n\n    file_name = request_parts[1]\n\n    # check for an invalid file name\n    if file_name[0] == \"/\" and file_name[-1] == \".\" and file_name[1:-1].isalpha():\n        return \"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\nFile Not Found\"\n\n    if os.path.isfile(file_name):\n        file = open(file_name, \"rb\")\n        file_content = file.read()\n        file.close()\n        return f\"HTTP/1.1 200 OK\\r\\nContent-Length: {len(file", "compilation_passed": false, "time": 7.390975952148438e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "req = request.split()\n    if len(req) != 3:\n        return \"HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request\"\n    if req[0] != \"GET\":\n        return \"HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request\"\n\n    filename = req[1][1:]\n    try:\n        if not os.path.isfile(filename):\n            return \"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\nFile Not Found\"\n        file = open(filename, \"rb\")\n        content = file.read()\n        file.close()\n        return \"HTTP/1.1 200 OK\\r\\nContent-Length: \" + str(len(content)) + \"\\r\\n\\r\\n\" + content\n    except:\n        return \"HTTP/1.1 500 INTERNAL SERVER ERROR\\r\\n\\r\\nInternal Server Error\"", "compilation_passed": true, "time": 0.0012211799621582031, "tests_passed": true, "error": null}
{"code": "try:\n        # Check if the request is valid and contains a filename\n        match = re.match(r\"GET /([a-z0-9]+)\\.txt HTTP/1.1\", request, re.I)\n        if match:\n            file_name = match.group(1)\n\n            # Check if the file exists\n            if os.path.isfile(f\"{file_name}.txt\"):\n                file = open(f\"{file_name}.txt\", \"rb\")\n                content = file.read()\n                content_size = len(content)\n                file.close()\n                response = f\"HTTP/1.1 200 OK\\r\\nContent-Length: {content_size}\\r\\n\\r\\n{content}\"\n                return response\n\n            else:\n                return \"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\nFile Not Found\"\n        else:\n            return \"HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request\"\n    except:\n        return", "compilation_passed": true, "time": 0.002248048782348633, "tests_passed": true, "error": null}
{"code": "try:\n        # Extract the filename from the request\n        filename = request.split('/')[-1]\n        filepath = os.path.join(os.getcwd(), 'static', filename)\n        if not os.path.exists(filepath):\n            return f\"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\nFile Not Found\"\n        file_size = os.path.getsize(filepath)\n        with open(filepath, \"rb\") as f:\n            content = f.read()\n            content_size = len(content)\n            return (\n                f\"HTTP/1.1 200 OK\\r\\nContent-Length: {content_size}\\r\\n\\r\\n{content}\"\n            )\n    except Exception as e:\n        return f\"HTTP/1.1 500 INTERNAL SERVER ERROR\\r\\n\\r\\nInternal Server Error\"", "compilation_passed": true, "time": 0.0010280609130859375, "tests_passed": true, "error": null}
{"code": "try:\n        # Extract filename from request\n        match = re.match(r'GET \\/(?P<filename>.*) HTTP/1.1', request, re.IGNORECASE)\n        if match:\n            filename = match.group('filename')\n            # Check if file exists\n            if os.path.exists(filename):\n                # Open file for reading\n                with open(filename, 'rb') as file:\n                    # Extract content length\n                    content_length = os.fstat(file.fileno()).st_size\n                    # Construct HTTP response\n                    response = f\"HTTP/1.1 200 OK\\r\\nContent-Length: {content_length}\\r\\n\\r\\n\"\n                    # Write file content to response\n                    response += file.read()\n                    return response\n            else:\n                # If file not found\n                return f\"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\nFile Not Found\"\n        else:\n            # If request is invalid\n            return f\"HTTP/1.1 ", "compilation_passed": false, "time": 7.987022399902344e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Split the request into parts based on the expected format\n    method, uri, http_version, *rest = request.split()\n\n    # Verify the request is valid\n    if method != \"GET\":\n        return (\"HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request\")\n    if not uri.startswith(\"/static/\"):\n        return (\"HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request\")\n\n    # Extract the filename\n    filename = uri[9:]\n    if not filename.endswith(\".jpg\") and not filename.endswith(\".png\"):\n        return (\"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\nFile Not Found\")\n\n    # Get the absolute path of the file and its size\n    full_path = f\"{os.path.dirname(__file__)}{filename}\"\n    size = os.stat(full_path).st_size\n\n    # Construct the HTTP response\n    ", "compilation_passed": true, "time": 0.0008578300476074219, "tests_passed": false, "error": "ValueError"}
{"code": "try:\n        request_parts = request.split()\n        if len(request_parts) != 3 or request_parts[0] != \"GET\":\n            return \"HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request\"\n\n        file_name = request_parts[1].strip(\"/\")\n\n        if not file_name.endswith(\".txt\") and not file_name.endswith(\".json\") and not file_name.endswith(\".bin\") and not file_name.endswith(\".jpg\"):\n            return \"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\nFile Not Found\"\n\n        file_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), file_name)\n\n        if not os.path.isfile(file_path):\n            return \"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\nFile Not Found\"\n\n", "compilation_passed": false, "time": 0.00017309188842773438, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Split the request into the method and URI parts\n    parts = request.split(' ')\n    if len(parts) != 3:  # Request is not of the form \"GET /<file> HTTP/1.1\"\n        return \"HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request\"\n    method, url, protocol = parts\n\n    # Check the URL for an invalid filename\n    url_parts = url.split('/')\n    if len(url_parts) < 2:  # Not enough segments in the URL\n        return \"HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request\"\n    file_name = url_parts[1]\n    if os.path.isfile(file_name):  # File found\n        content = None  # File not accessed\n        try:\n            with open(file_name, 'rb') as file:\n                content = file.read()\n        except OSError:  # Assuming I/O error occurs\n            return \"HTTP/1.1 500", "compilation_passed": false, "time": 7.390975952148438e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Parse the request line\n    request_line = request.split('\\r\\n', 1)[0]\n    match = re.match(r'GET\\s+(\\S+?)\\s+', request_line)\n    if match:\n        filename = match.group(1)\n        filename = re.sub(r'[^a-z0-9-]+', '', filename.strip())\n        if not filename.endswith('.html'):\n            filename += '.html'\n        path = os.path.join(\"src/views\", filename)\n        if not os.path.exists(path):\n            return \"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\nFile Not Found\"\n        with open(path, 'rb') as f:\n            response = f.read()\n        return f'HTTP/1.1 200 OK\\r\\nContent-Length: {len(response)}\\r\\n\\r\\n{response}'\n    return \"HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\", "compilation_passed": false, "time": 8.606910705566406e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "try:\n        # Extract the request line\n        request_line = request.split('\\r\\n', 1)[0]\n        match = re.search(r'GET (\\S*) HTTP/1.1', request_line)\n        if not match:\n            return \"HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request\"\n        filename = match.group(1)\n        # Check if the request is valid (e.g., the filename starts with / and contains no illegal characters)\n        if not filename.startswith('/') or re.search(r'[<>:\"/\\\\|?*\\x00]', filename):\n            return \"HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request\"\n\n        # Generate the full filename using the request's filename and the server's directory path\n        filename = os.path.join(SERVER_PATH, filename)\n        # Check if the file exists in the server's directory\n        if not os.path.exists(filename):\n            return \"HTTP", "compilation_passed": false, "time": 6.818771362304688e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "request = request.split(\"/\")[-1]\n\n    # Check the request for validity\n    if not re.match(r\"^(?P<filename>[^\\s/?#=]+)$\", request):\n        return \"HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request\"\n\n    # Check for an access control error\n    if not os.path.exists(\"restricted.txt\"):\n        return \"HTTP/1.1 500 INTERNAL SERVER ERROR\\r\\n\\r\\nInternal Server Error\"\n\n    filename = \"./restricted.txt\"\n    response_lines = []\n    response_lines.append(\"HTTP/1.1 200 OK\")\n\n    with open(filename, \"r\") as f:\n        file_length = 0\n        response_lines.append(f\"Content-Length: {os.path.getsize(filename)}\")\n        response_lines.append(\"\")\n        response_lines.append(f.read())\n\n    return \"\\r\\n", "compilation_passed": false, "time": 7.677078247070312e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "# split the request to get the filename\n    request_parts = request.split()\n    # if the request is invalid, return an error message\n    if len(request_parts) != 3:\n        return \"HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request\"\n\n    # get the filename from the request\n    filename = request_parts[1].strip('/')\n    # check if the file exists in the server directory\n    filepath = os.path.join(\"static\", filename)\n    if not os.path.exists(filepath):\n        return \"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\nFile Not Found\"\n\n    # read the file content\n    with open(filepath, \"rb\") as file:\n        file_content = file.read()\n    # calculate the file size in bytes\n    content_length = len(file_content)\n\n    # return the file content\n    return f\"HTTP/1.1 200 OK\\r\\nContent-Length: {content_length}\\", "compilation_passed": false, "time": 6.508827209472656e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "if request.strip().lower().startswith(\"get /\"):\n        path, filename = request[5:].split()\n        if not filename:\n            return \"HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request\"\n\n        filename = filename.replace(\" \", \"_\").lower()\n        full_path = os.path.join(path, filename)\n        full_path = os.path.expanduser(full_path)\n        if not os.path.exists(full_path):\n            return f\"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\nFile Not Found\"\n\n        try:\n            with open(full_path, \"rb\") as file:\n                file_content = file.read()\n                return f\"HTTP/1.1 200 OK\\r\\nContent-Length: {len(file_content)}\\r\\n\\r\\n{file_content}\"\n        except:\n            return f\"HTTP/1.1 500 INTERNAL SERVER ERROR\\", "compilation_passed": false, "time": 8.0108642578125e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "try:\n        request_lines = request.split(\"\\r\\n\")\n        request_type, request_path = request_lines[0].split(\" \")\n        request_path = request_path.strip()\n        request_path = re.sub(r\"^\\/\", \"\", request_path)\n        request_path = re.sub(r\"\\/$\", \"\", request_path)\n        request_path = os.path.join(\"static\", request_path)\n        request_path = os.path.join(\"..\", request_path)\n\n        with open(request_path, \"rb\") as f:\n            contents = f.read()\n\n        response_lines = [\"HTTP/1.1 200 OK\", f\"Content-Length: {len(contents)}\"]\n        response_lines.append(\"\\r\\n\")\n        response_lines.append(contents)\n        response = \"\\r\\n\".join(response_lines)\n        return response\n    except FileNotFoundError:\n        return f\"", "compilation_passed": false, "time": 9.107589721679688e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Split the request into a list of strings\n    request_list = request.split(' ')\n    # Extract the file name from the request\n    file_name = re.search(r'([^\\\\/]+)', request_list[1]).group(1)\n    # Construct the path to the file\n    path = os.path.join(os.getcwd(), 'files', file_name)\n    # Check if the file exists and is a regular file\n    if not os.path.exists(path) or not os.path.isfile(path):\n        return \"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\nFile Not Found\"\n    # Open the file for reading\n    with open(path, 'rb') as file:\n        # Calculate the content length\n        content_length = os.path.getsize(path)\n        # Construct the response string\n        response = f\"HTTP/1.1 200 OK\\r\\nContent-Length: {content_length}\\r\\n\\r\\n\"\n        # Add the file content to the response\n        ", "compilation_passed": true, "time": 0.001024007797241211, "tests_passed": true, "error": null}
{"code": "try:\n        match = re.match(r'GET (?P<filename>.*) HTTP/1.1', request)\n        if not match:\n            return \"HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request\"\n\n        filename = match.group('filename')\n        if not os.path.isfile(filename):\n            return f\"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\nFile Not Found\"\n\n        with open(filename, 'rb') as f:\n            content = f.read()\n\n        return f\"HTTP/1.1 200 OK\\r\\nContent-Length: {len(content)}\\r\\n\\r\\n{content}\"\n\n    except:\n        return \"HTTP/1.1 500 INTERNAL SERVER ERROR\\r\\n\\r\\nInternal Server Error\"", "compilation_passed": true, "time": 0.0011420249938964844, "tests_passed": true, "error": null}
{"code": "request_split = request.split(\" \")\n    request_method = request_split[0].upper()\n    request_path = request_split[1]\n\n    if request_method != \"GET\":\n        return \"HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request\"\n\n    # Check if the file exists and is readable\n    filename = os.path.join(os.path.dirname(__file__), request_path)\n    if not os.path.isfile(filename):\n        return \"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\nFile Not Found\"\n    elif not os.access(filename, os.R_OK):\n        return \"HTTP/1.1 500 INTERNAL SERVER ERROR\\r\\n\\r\\nInternal Server Error\"\n\n    # Load the file contents\n    with open(filename, \"r\") as f:\n        file_contents = f.read()\n\n    # Return the response\n    return f\"HTTP/1.1 200 OK", "compilation_passed": false, "time": 7.796287536621094e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Extract the path from the request string\n    path = request.split()[1]\n\n    # Check if the path is valid and a file\n    if path.startswith('/') and os.path.isfile(path):\n\n        # Open the file and get the content\n        with open(path, 'rb') as file:\n            content = file.read()\n\n            # Generate the HTTP response\n            response = f\"HTTP/1.1 200 OK\\r\\n\" \\\n                       f\"Content-Length: {len(content)}\\r\\n\\r\\n\" \\\n                       f\"{content}\"\n\n            return response\n    else:\n        # Generate the HTTP response for invalid path\n        response = \"HTTP/1.1 404 NOT FOUND\\r\\n\" \\\n                   \"\\r\\nFile Not Found\"\n\n        return response", "compilation_passed": true, "time": 0.0009250640869140625, "tests_passed": true, "error": null}
{"code": "# Extract the filename from the request.\n    filename = re.sub(\"GET /([^/]+) HTTP/1.1\", r\"\\1\", request)\n    # Check if the request is valid.\n    if filename == \"\":\n        return \"HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request\"\n\n    # Get the file path from the filename.\n    filepath = \"./static_files/\" + filename\n\n    # Check if the file exists.\n    try:\n        if not os.path.isfile(filepath):\n            return \"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\nFile Not Found\"\n\n        with open(filepath) as f:\n            return f\"HTTP/1.1 200 OK\\r\\nContent-Length: {os.path.getsize(filepath)}\\r\\n\\r\\n{f.read()}\"\n\n    except FileNotFoundError:\n        return \"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\nFile", "compilation_passed": false, "time": 6.794929504394531e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Task 1.1\n    if request.lower().startswith(\"get /\"):\n        try:\n            filename = request.split(\"/\")[-1]\n            filepath = os.path.join(\"data\", filename)\n            if os.path.isfile(filepath):\n                return f\"HTTP/1.1 200 OK\\r\\nContent-Length: {os.path.getsize(filepath)}\\r\\n\\r\\n\" \\\n                       f\"{open(filepath, 'rb').read().decode()}\"\n            else:\n                return f\"HTTP/1.1 404 NOT FOUND\\r\\n\\r\\nFile Not Found\"\n        except:\n            return f\"HTTP/1.1 500 INTERNAL SERVER ERROR\\r\\n\\r\\nInternal Server Error\"\n    else:\n        return f\"HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request\"", "compilation_passed": true, "time": 0.001110076904296875, "tests_passed": true, "error": null}
{"code": "# Split the request into separate parts using the pipe '|' character\n    request_parts = request.split(\"|\")\n    # Check if the request is valid (i.e., contains the correct number of parts)\n    if len(request_parts) != 2:\n        return \"HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request\"\n    # Extract the request type and filename from the request\n    request_type, filename = request_parts\n    # Check if the request type is \"GET\"\n    if request_type != \"GET\":\n        return \"HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request\"\n    # Check if the filename is valid\n    if not re.match(\"^\\/[a-zA-Z0-9_.-]+$\", filename):\n        return \"HTTP/1.1 400 BAD REQUEST\\r\\n\\r\\nBad Request\"\n    # Calculate the full filename\n    full_filename = os.path.join(os", "compilation_passed": false, "time": 0.00014591217041015625, "tests_passed": false, "error": "SyntaxError"}
