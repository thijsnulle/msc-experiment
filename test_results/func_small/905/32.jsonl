{"code": "output = {}\n    files_to_read = glob.glob(directory_path + '/*' + file_extension)\n    for file_name in files_to_read:\n        with open(file_name, 'r') as csv_file:\n            reader = csv.reader(csv_file)\n            headers = next(reader)\n            output[os.path.basename(file_name)[:-len(file_extension)]] = list(reader)\n    return output", "compilation_passed": true, "time": 0.0019352436065673828, "tests_passed": true, "error": null}
{"code": "output = {}\n    if not directory_path.endswith(os.sep):\n        directory_path += os.sep\n    for filename in glob.glob(directory_path + '*' + file_extension):\n        with open(filename, 'r') as file:\n            reader = csv.reader(file)\n            headers = next(reader)\n            output[os.path.basename(filename).split('.')[0]] = list(reader)\n    return output", "compilation_passed": true, "time": 0.0018489360809326172, "tests_passed": true, "error": null}
{"code": "rows_data = {}\n    for file in glob.glob(directory_path + file_extension):\n        with open(file, 'r', encoding='utf8') as csv_file:\n            file_rows = list(csv.reader(csv_file))\n            filename = os.path.basename(file).replace(file_extension, '')\n            rows_data[filename] = file_rows\n    return rows_data", "compilation_passed": true, "time": 0.0016319751739501953, "tests_passed": true, "error": null}
{"code": "extension_list = glob.glob(os.path.join(directory_path, f'*.{file_extension}'))\n    if len(extension_list) == 0:\n        return {}\n    elif len(extension_list) > 1:\n        extension = file_extension\n    else:\n        extension = os.path.splitext(extension_list[0])[1]\n    with open(extension_list[0], 'r') as file:\n        reader = csv.reader(file)\n        header = next(reader)\n        data_dict = {os.path.splitext(extension_list[0])[0]: list(reader)}\n    return data_dict", "compilation_passed": true, "time": 0.0018508434295654297, "tests_passed": true, "error": null}
{"code": "# Step 1: Create an empty dictionary to hold the data\n    data = {}\n\n    # Step 2: Iterate through each file in the directory\n    for filename in glob.glob(os.path.join(directory_path, '*' + file_extension)):\n        # Step 3: Read the file contents into a list\n        with open(filename, 'r') as file:\n            reader = csv.reader(file)\n            headers = next(reader)\n            data[os.path.basename(filename).rstrip(file_extension)] = list(reader)\n\n    return data", "compilation_passed": true, "time": 0.0019540786743164062, "tests_passed": true, "error": null}
{"code": "files_list = glob.glob(os.path.join(directory_path, file_extension))\n    output = {}\n\n    for file_path in files_list:\n        with open(file_path, encoding='utf-8') as file:\n            rows = csv.reader(file, delimiter=';')\n\n            # Get the name of the file (without the extension)\n            filename = os.path.basename(file_path).split('.')[0]\n            output[filename] = list(rows)[1:]\n\n    return output", "compilation_passed": true, "time": 0.0018341541290283203, "tests_passed": true, "error": null}
{"code": "file_pattern = glob.glob(os.path.join(directory_path, f'*.{file_extension}'))\n\n    if len(file_pattern) == 0:\n        return {}\n\n    output = {}\n\n    for file_path in file_pattern:\n        with open(file_path, 'r') as file:\n            reader = csv.reader(file, delimiter=',')\n            header = next(reader)\n            output[os.path.basename(file_path).replace(file_extension, '')] = list(reader)\n\n    return output", "compilation_passed": true, "time": 0.0017879009246826172, "tests_passed": true, "error": null}
{"code": "try:\n        result = {}\n        extensions = glob.glob(os.path.join(directory_path, '*' + file_extension))\n        for path in extensions:\n            with open(path, 'r') as f:\n                data = list(csv.reader(f))\n                # data.pop(0)\n                result[os.path.basename(path)[:-len(file_extension)]] = data\n        return result\n    except Exception as exc:\n        print(\"error: \", exc)", "compilation_passed": true, "time": 0.005166292190551758, "tests_passed": true, "error": null}
{"code": "files = glob.glob(os.path.join(directory_path, f'*{file_extension}'))\n    output = {}\n\n    for file_path in files:\n        with open(file_path, 'r') as f:\n            reader = csv.reader(f)\n            data = [list(row) for row in reader][1:]\n            file_name = os.path.splitext(os.path.basename(file_path))[0]\n            output[file_name] = data\n\n    return output", "compilation_passed": true, "time": 0.002145051956176758, "tests_passed": true, "error": null}
{"code": "rows = {}\n    for file in glob.glob(f\"{directory_path}/*{file_extension}\"):\n        with open(file, 'r', newline='', encoding='utf-8') as f:\n            reader = csv.reader(f)\n            rows[os.path.splitext(os.path.basename(file))[0]] = list(reader)[1:]\n    return rows", "compilation_passed": true, "time": 0.001978158950805664, "tests_passed": true, "error": null}
{"code": "result_data = {}\n    file_extension_length = len(file_extension)\n    files = glob.glob(f'{directory_path}/{file_extension}')\n    for file in files:\n        with open(file) as file_stream:\n            file_data = csv.reader(file_stream, delimiter=',', quotechar='\"')\n            file_data_list = list(file_data)\n            file_name = os.path.basename(file)[: -file_extension_length]\n            result_data[file_name] = file_data_list\n    return result_data", "compilation_passed": true, "time": 0.0019690990447998047, "tests_passed": true, "error": null}
{"code": "file_data = {}\n    if os.path.exists(directory_path):\n        file_names = glob.glob(f'{directory_path}/*{file_extension}')\n        if file_names:\n            for filename in file_names:\n                file_data.update({os.path.basename(filename)[:-len(file_extension)]: csv.reader(open(filename, 'r'), delimiter=';')})\n        return file_data\n    else:\n        return {}", "compilation_passed": true, "time": 0.0020799636840820312, "tests_passed": true, "error": null}
{"code": "files = glob.glob(f\"{directory_path}/*{file_extension}\")\n\n    data = {}\n    for file in files:\n        with open(file, 'r', newline='') as csv_file:\n            rows = csv.reader(csv_file, delimiter=',')\n            next(rows)  # skip the header\n            data[os.path.splitext(file)[0]] = list(rows)\n\n    return data", "compilation_passed": true, "time": 0.0020139217376708984, "tests_passed": true, "error": null}
{"code": "file_list = glob.glob(directory_path + '/*' + file_extension)\n    file_data = {}\n    for file in file_list:\n        if os.path.isfile(file):\n            with open(file, newline='') as csv_file:\n                file_data[os.path.basename(file).split('.')[0]] = []\n                reader = csv.reader(csv_file)\n                headers = next(reader)\n                file_data[os.path.basename(file).split('.')[0]].append(headers)\n                for row in reader:\n                    file_data[os.path.basename(file).split('.')[0]].append(row)\n        else:\n            continue\n    return file_data", "compilation_passed": true, "time": 0.005171298980712891, "tests_passed": true, "error": null}
{"code": "all_files_with_extension = glob.glob(directory_path + '/*' + file_extension)\n    all_files_without_extension = [\n        file_name.split('.', maxsplit=1)[0] for file_name in all_files_with_extension\n    ]\n\n    data = {}\n    for file_name in all_files_without_extension:\n        file_path = os.path.join(directory_path, file_name + file_extension)\n        try:\n            with open(file_path, 'r') as csv_file:\n                csv_reader = csv.reader(csv_file, delimiter=',')\n                header_row = next(csv_reader)\n                data[file_name] = list(csv_reader)\n        except FileNotFoundError:\n            # file_not_found.txt\n            pass\n\n    return data", "compilation_passed": true, "time": 0.00201416015625, "tests_passed": true, "error": null}
{"code": "if not os.path.isdir(directory_path):\n        return {}\n\n    files = glob.glob(f'{directory_path}/**/*{file_extension}', recursive=True)\n    data = {os.path.splitext(os.path.basename(f))[0]: [] for f in files}\n    for f in files:\n        with open(f, 'r') as file:\n            rows = list(csv.reader(file, delimiter=','))\n            data[os.path.splitext(os.path.basename(f))[0]].append(rows)\n    return data", "compilation_passed": true, "time": 0.0021600723266601562, "tests_passed": true, "error": null}
{"code": "output = {}\n    file_names = glob.glob(os.path.join(directory_path, '*' + file_extension))\n\n    for filename in file_names:\n        with open(filename, mode='r', encoding='utf-8') as f:\n            reader = csv.reader(f, skipinitialspace=True)\n            output[filename] = list(reader)\n\n    return output", "compilation_passed": true, "time": 0.0018749237060546875, "tests_passed": true, "error": null}
{"code": "data = dict()\n    filenames = glob.glob(directory_path + f'/*{file_extension}')\n    for filename in filenames:\n        with open(filename, 'r') as f:\n            rows = csv.reader(f)\n            rows = list(rows)[1:]\n            data[os.path.basename(filename)[:-len(file_extension)]] = rows\n    return data", "compilation_passed": true, "time": 0.0020956993103027344, "tests_passed": true, "error": null}
{"code": "directory_path = directory_path.rstrip(os.sep)\n    if not os.path.isdir(directory_path):\n        return {}\n    output = {}\n    for filename in glob.glob(os.path.join(directory_path, f\"*{file_extension}\")):\n        with open(filename, 'rt') as csvfile:\n            reader = csv.reader(csvfile)\n            header_row = next(reader)\n            output[filename.split(file_extension)[0]] = list(reader)\n    return output", "compilation_passed": true, "time": 0.0019850730895996094, "tests_passed": true, "error": null}
{"code": "# Check if the directory exists and is a valid directory.\n    if not os.path.isdir(directory_path):\n        print('Directory {} does not exist!'.format(directory_path))\n        return {}\n\n    # Extract the file extension.\n    extension = os.path.splitext(file_extension)[-1]\n\n    # Check if the file extension is valid.\n    if len(extension) < 2 or not extension[1:].lower() == 'csv':\n        print('Extension must be CSV.')\n        return {}\n\n    # Extract the filename without the extension.\n    file_extension = os.path.splitext(file_extension)[-1]\n    filename_wo_ext = file_extension\n\n    # Check if the file exists.\n    file_path = os.path.join(directory_path, filename_wo_ext)\n    if not os.path.isfile(file_path):\n        print('File {} does not exist!'.format(file_path))\n        return {}\n\n    # Check if the file is a CSV file.\n", "compilation_passed": true, "time": 0.0018732547760009766, "tests_passed": true, "error": null}
{"code": "if not os.path.isdir(directory_path):\n        return {}\n\n    if not os.path.isfile(directory_path):\n        return {}\n\n    file_list = glob.glob(directory_path + '/**/*' + file_extension, recursive=True)\n    if not file_list:\n        return {}\n\n    output = {}\n\n    for file in file_list:\n        try:\n            with open(file, encoding='utf-8') as f:\n                reader = csv.reader(f)\n                output[os.path.basename(file).split('.')[0]] = list(reader)\n        except Exception as e:\n            print(f\"Error processing {file}: {e}\")\n\n    return output", "compilation_passed": true, "time": 0.002064228057861328, "tests_passed": true, "error": null}
{"code": "file_names = glob.glob(f\"{directory_path}/*.{file_extension}\")\n    if not file_names:\n        return {}\n    data = {}\n    for file_name in file_names:\n        with open(file_name, 'r') as file:\n            reader = csv.reader(file)\n            rows = list(reader)\n            data[os.path.basename(file_name)[:-len(file_extension)]] = rows\n    return data", "compilation_passed": true, "time": 0.0019040107727050781, "tests_passed": true, "error": null}
{"code": "path_list = glob.glob(os.path.join(directory_path, f\"*\" + file_extension))\n    return {\n        os.path.splitext(os.path.split(file)[-1])[0]: [\n            [x.strip() for x in row.split(',')] for row in open(file).read().split('\\n')[1:]]\n        for file in path_list}", "compilation_passed": true, "time": 0.0022509098052978516, "tests_passed": true, "error": null}
{"code": "data = {}\n    try:\n        for file in glob.glob(os.path.join(directory_path, '*' + file_extension)):\n            if os.path.isfile(file):\n                with open(file, encoding='utf-8') as f:\n                    reader = csv.reader(f)\n                    data[os.path.basename(file).split('.')[0]] = list(reader)\n    except Exception:\n        pass\n\n    return data", "compilation_passed": true, "time": 0.004708766937255859, "tests_passed": true, "error": null}
{"code": "try:\n        file_list = glob.glob(os.path.join(directory_path, file_extension))\n        data = {}\n        for file_path in file_list:\n            with open(file_path) as file:\n                data.update({os.path.basename(file_path).split('.')[0]: [line.strip().split(',') for line in file.readlines()[1:]]})\n        return data\n    except:\n        print(\"Something went wrong while reading files from the directory.\")", "compilation_passed": true, "time": 0.0017137527465820312, "tests_passed": true, "error": null}
{"code": "output_dict = {}\n    files = glob.glob(os.path.join(directory_path, '*' + file_extension))\n\n    for file in files:\n        with open(file, 'r') as f:\n            reader = csv.reader(f)\n            headers = next(reader)\n            output_dict[os.path.basename(file).split('.')[0]] = [headers] + [row for row in reader]\n    return output_dict", "compilation_passed": true, "time": 0.005164623260498047, "tests_passed": true, "error": null}
{"code": "try:\n        data_dict = {}\n        for file in glob.glob(os.path.join(directory_path, '*' + file_extension)):\n            with open(file, 'r', encoding='utf-8') as csv_file:\n                csv_reader = csv.reader(csv_file, delimiter=',')\n                next(csv_reader, None)  # To skip the header row\n                file_name = file.replace('/home/user/data' + file_extension, '').replace('\\\\', '/')\n                data_dict[file_name] = list(csv_reader)\n        return data_dict\n    except (IOError, OSError) as err:\n        print(err)\n        return {}", "compilation_passed": true, "time": 0.002029895782470703, "tests_passed": true, "error": null}
{"code": "output = {}\n\n    try:\n        for file_name in glob.glob(os.path.join(directory_path, '*' + file_extension)):\n            with open(file_name, 'r') as file:\n                reader = csv.reader(file)\n\n                headers = next(reader)\n\n                output[os.path.basename(file_name)[:-len(file_extension)]] = [headers] + [list(row) for row in reader]\n    except FileNotFoundError:\n        return {}\n    except Exception as e:\n        print(f'Error reading file: {str(e)}')\n        return {}\n\n    return output", "compilation_passed": true, "time": 0.005506038665771484, "tests_passed": true, "error": null}
{"code": "all_files = glob.glob(os.path.join(directory_path, f'*.{file_extension}'))\n    csv_files = dict()\n    for file in all_files:\n        try:\n            with open(file, encoding='utf-8') as csv_file:\n                file_reader = csv.reader(csv_file, delimiter=',')\n                first_row = next(file_reader)\n                csv_files[os.path.basename(file).split(\".\")[0]] = list(file_reader)\n        except Exception as e:\n            print(\"An error occurred while processing file\", file, \": \", e)\n\n    return csv_files", "compilation_passed": true, "time": 0.00186920166015625, "tests_passed": true, "error": null}
{"code": "# Check the file extension and return an empty dictionary if the file extension doesn't match\n    if file_extension != '.csv':\n        return {}\n\n    data = {}\n    for filename in glob.glob(f'{directory_path}/**/*{file_extension}', recursive=True):\n        with open(filename) as f:\n            reader = csv.reader(f)\n            headers = next(reader)\n            data[os.path.basename(filename)] = [headers] + [row for row in reader]\n\n    return data", "compilation_passed": true, "time": 0.0021462440490722656, "tests_passed": true, "error": null}
