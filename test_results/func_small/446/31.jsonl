{"code": "rng = np.random.RandomState(random_seed)\n    n_features = 2\n\n    # Generate X\n    X, y = make_blobs(n_samples=n_samples,\n                       centers=centers,\n                       random_state=rng,\n                       cluster_std=.2,\n                       n_features=n_features)\n\n    # Create axes\n    fig, ax = plt.subplots(n_samples//10, 1)\n    ax = ax.flatten()\n\n    # Plot points\n    for i, sample in enumerate(X.T):\n        ax[i].scatter(sample[::2], sample[1::2])\n\n    ax[-1].set_title(\"y: {}\".format(y))\n    return X, y, ax", "compilation_passed": true, "time": 0.0012249946594238281, "tests_passed": false, "error": "NameError"}
{"code": "# create a dataset of blobs\n    X, y = make_blobs(n_samples=n_samples, centers=centers, n_features=n_features, random_state=random_seed)\n    # create a figure and axes to plot the points\n    fig, ax = plt.subplots()\n    # scatter plot the points\n    ax.scatter(X[:, 0], X[:, 1], c=y, s=15)\n    # set the title and labels\n    ax.set_title('Blobs')\n    ax.set_xlabel('Feature 1')\n    ax.set_ylabel('Feature 2')\n    return X, y, ax", "compilation_passed": true, "time": 0.05001521110534668, "tests_passed": true, "error": null}
{"code": "X, y = make_blobs(\n        n_samples=n_samples, centers=centers, random_state=random_seed,\n        cluster_std=0.1, n_features=n_features,\n        shuffle=True,  # to reproduce the results\n    )\n\n    fig = plt.figure(figsize=(5, 3.5))\n    ax = fig.add_subplot(1, 1, 1)\n\n    ax.set_title('Gaussian Blobs')\n    ax.scatter(X[:, 0], X[:, 1], c=y, cmap='tab20')\n\n    return X, y, ax", "compilation_passed": true, "time": 0.3234708309173584, "tests_passed": true, "error": null}
{"code": "# TODO\n    X, y = make_blobs(n_samples=n_samples, centers=centers, n_features=n_features, random_state=random_seed,\n                       cluster_std=0.5)\n    fig, ax = plt.subplots()\n    ax.scatter(X[:, 0], X[:, 1])\n    ax.set_title('Blobs')\n    return X, y, ax", "compilation_passed": true, "time": 0.0498960018157959, "tests_passed": true, "error": null}
{"code": "X, y = make_blobs(n_samples, centers, n_features, random_state=random_seed,\n                       random_scale_min=0.001, random_scale_max=0.01)\n    fig, ax = plt.subplots()\n    ax.scatter(X[:, 0], X[:, 1], c=y, cmap=plt.cm.get_cmap('hsv'), edgecolor='k')\n    ax.set_xticks([])\n    ax.set_yticks([])\n    return X, y, ax", "compilation_passed": true, "time": 0.0012428760528564453, "tests_passed": false, "error": "TypeError"}
{"code": "rng = np.random.RandomState(42)\n    X, y = make_blobs(n_samples=n_samples, centers=centers,\n                       n_features=n_features, random_state=rng)\n    plt.scatter(X[:, 0], X[:, 1], c=y)\n    fig, ax = plt.subplots()\n    plt.show()\n    return X, y, ax", "compilation_passed": true, "time": 0.000988006591796875, "tests_passed": false, "error": "NameError"}
{"code": "n_features = 2  # two features per sample\n    X, y = make_blobs(\n        n_samples=n_samples, centers=centers, random_state=random_seed,\n        n_features=n_features, cluster_std=0.5\n    )\n    plt.plot(X[:, 0], X[:, 1], 'k.')\n    plt.scatter(X[:, 0], X[:, 1], c=y, cmap='Spectral')\n    plt.show()\n    return X, y, plt.gca()", "compilation_passed": true, "time": 0.022159099578857422, "tests_passed": true, "error": null}
{"code": "random_state = np.random.RandomState(random_seed)\n    X, y = make_blobs(n_samples=n_samples, centers=centers, random_state=random_state,\n                      cluster_std=.2, n_features=n_features, random_state=random_seed)\n    return X, y, plt.figure().add_subplot(1, 1, 1)", "compilation_passed": false, "time": 0.0007078647613525391, "tests_passed": false, "error": "SyntaxError"}
{"code": "# TODO\n\n    np.random.seed(random_seed)\n\n    X, y = make_blobs(n_samples=n_samples, centers=centers, n_features=n_features, random_state=random_seed)\n    fig, ax = plt.subplots()\n    ax.scatter(X[:, 0], X[:, 1], c=y, cmap=\"tab10\")\n    return X, y, ax", "compilation_passed": true, "time": 0.0009748935699462891, "tests_passed": false, "error": "NameError"}
{"code": "# Create blobs with numpy's `make_blobs` function.\n    X, y = make_blobs(\n        n_samples=n_samples,\n        centers=centers,\n        n_features=n_features,\n        random_state=random_seed,\n    )\n\n    # Plot the points.\n    plt.figure()\n    plt.scatter(X[:, 0], X[:, 1], c=y, s=5, cmap=\"tab20\")\n\n    # Return the data to be analyzed by `test_task_func`.\n    return X, y, plt.gca()", "compilation_passed": true, "time": 0.0493161678314209, "tests_passed": true, "error": null}
{"code": "X, y = make_blobs(\n        n_samples=n_samples, centers=centers, n_features=n_features, random_state=random_seed\n    )\n    ax = plt.gca()\n    ax.scatter(X[:, 0], X[:, 1], c=y)\n    return X, y, ax", "compilation_passed": true, "time": 0.029804229736328125, "tests_passed": true, "error": null}
{"code": "random_state = np.random.RandomState(random_seed)\n    X, y = make_blobs(n_samples=n_samples, centers=centers, n_features=n_features, random_state=random_state)\n    plt.figure()\n    ax = plt.subplot(1,1,1)\n    ax.scatter(X[:,0], X[:,1], c=y)\n    return X,y,ax", "compilation_passed": true, "time": 0.001111745834350586, "tests_passed": false, "error": "NameError"}
{"code": "# Generate 3-D data\n    X, y = make_blobs(n_samples=n_samples, centers=centers, n_features=n_features, random_state=random_seed)\n\n    # Create a plot and show the scatter plot\n    fig, ax = plt.subplots(figsize=(8, 8))\n    ax.scatter(X[:, 0], X[:, 1], c=y, s=50, edgecolor='k')\n    ax.set_xticks(np.arange(-1, 1, 0.25))\n    ax.set_yticks(np.arange(-1, 1, 0.25))\n    ax.set_title('Iris dataset')\n    ax.grid(True)\n\n    # Return the data for the scatter plot\n    return X, y, ax", "compilation_passed": true, "time": 0.004549980163574219, "tests_passed": false, "error": "NameError"}
{"code": "rng = np.random.RandomState(random_seed)\n    X, y = make_blobs(n_samples=n_samples, n_features=n_features, centers=centers, cluster_std=0.3, random_state=42, n_informative=5)\n    fig, ax = plt.subplots(figsize=(5,5))\n    ax.scatter(X[:,0], X[:,1], c=y)\n    return X, y, ax", "compilation_passed": true, "time": 0.0010848045349121094, "tests_passed": false, "error": "NameError"}
{"code": "rng = np.random.RandomState(random_seed)\n    X, y = make_blobs(n_samples=n_samples, centers=centers, n_features=n_features, centers_assignment_random=rng, cluster_std=0.2, random_state=rng)\n    fig, ax = plt.subplots()\n    ax.scatter(X[:,0], X[:,1], c=y, cmap=\"tab20\")\n    ax.set_xlabel('x1')\n    ax.set_ylabel('x2')\n    return X, y, ax", "compilation_passed": true, "time": 0.0009949207305908203, "tests_passed": false, "error": "NameError"}
{"code": "# Generate random data\n    np.random.seed(random_seed)\n    centers = np.random.randint(low=1, high=5, size=centers)\n    X, y = make_blobs(\n        n_samples=n_samples, centers=centers, n_features=n_features, random_state=42,\n    )\n\n    # Plot data\n    plt.figure()\n    ax = plt.gca()\n    ax.set_title(f\"{centers=}, {n_features=}, {random_seed=}\")\n    ax.scatter(X[:, 0], X[:, 1], c=y, cmap=\"rainbow\")\n\n    return X, y, ax", "compilation_passed": true, "time": 0.001004934310913086, "tests_passed": false, "error": "NameError"}
{"code": "# TODO 1\n    # Use sklearn to generate the data.\n    X, y = make_blobs(n_samples=n_samples, centers=centers, n_features=n_features, random_state=random_seed)\n\n    # Use plt to visualize the data.\n    ax = plt.axes()\n    ax.scatter(X[:, 0], X[:, 1], c=y, cmap=\"tab10\")\n\n    return X, y, ax", "compilation_passed": true, "time": 0.04884505271911621, "tests_passed": true, "error": null}
{"code": "rng = np.random.RandomState(random_seed)\n    X, y = make_blobs(n_samples=n_samples, centers=centers, random_state=random_seed, n_features=n_features)\n    fig, ax = plt.subplots(1, 1, figsize=(10, 10))\n    ax.scatter(X[:, 0], X[:, 1], c=y, s=30, edgecolor='none', alpha=0.7, linewidths=1)\n    return X, y, ax", "compilation_passed": true, "time": 0.0011510848999023438, "tests_passed": false, "error": "NameError"}
{"code": "X, y = make_blobs(n_samples=n_samples, centers=centers, n_features=n_features,\n                      random_state=random_seed, cluster_std=0.5)\n    fig, ax = plt.subplots()\n\n    ax.scatter(X[:, 0], X[:, 1], c=y)\n\n    return X, y, ax", "compilation_passed": true, "time": 0.048838138580322266, "tests_passed": true, "error": null}
{"code": "X, y = make_blobs(n_samples=n_samples, centers=centers,\n                       n_features=n_features, random_state=random_seed,\n                       shuffle=True)\n    ax = plt.gca()\n    ax.scatter(X[:, 0], X[:, 1], c=y)\n    return X, y, ax", "compilation_passed": true, "time": 0.029134273529052734, "tests_passed": true, "error": null}
{"code": "X, y = make_blobs(n_samples=n_samples, centers=centers, n_features=n_features, random_state=random_seed)\n    fig, ax = plt.subplots()\n    ax.scatter(X[:, 0], X[:, 1], c=y, cmap='rainbow')\n    return X, y, ax", "compilation_passed": true, "time": 0.05039215087890625, "tests_passed": true, "error": null}
{"code": "# ===== YOUR CODE =====\n    X, y = make_blobs(n_samples=n_samples, centers=centers, n_features=n_features, random_state=random_seed)\n\n    # ======================\n    return X, y, plt.gca()", "compilation_passed": true, "time": 0.022595882415771484, "tests_passed": true, "error": null}
{"code": "X, y = make_blobs(n_samples=n_samples, centers=centers, random_state=random_seed,\n                      n_features=n_features)\n    fig, ax = plt.subplots(1)\n    ax.scatter(X[:, 0], X[:, 1], c=y)\n    return X, y, ax", "compilation_passed": true, "time": 0.04929089546203613, "tests_passed": true, "error": null}
{"code": "random.seed(random_seed)\n\n    centers = [random.randint(1, 8) for _ in range(centers)]\n    centers = sorted(centers)\n\n    n_samples_per_center = round((n_samples / len(centers)) * 5)\n\n    X, y = make_blobs(\n        n_samples=n_samples_per_center * len(centers),\n        n_features=n_features,\n        cluster_std=0.35,\n        centers=centers,\n        random_state=random_seed\n    )\n\n    X, y = np.asarray(X), np.asarray(y)\n    n_features = np.asarray(n_features)\n    ax = plt.subplots()[1]\n\n    colors = ['b', 'r', 'y', 'g', 'm', 'c']\n\n    for i, center in enumerate(centers):\n        ax.scatter(\n            X[y == center],\n            X[y == center],\n", "compilation_passed": false, "time": 0.000270843505859375, "tests_passed": false, "error": "SyntaxError"}
{"code": "plt.figure(figsize=(4, 3))\n\n    # TODO: generate samples with make_blobs\n    # TODO: visualize them with ax.scatter()\n\n    X, y = make_blobs(n_samples=n_samples, centers=centers, random_state=random_seed, n_features=n_features)\n    ax = plt.axes()\n    ax.scatter(X, y)\n\n    return X, y, ax", "compilation_passed": true, "time": 0.004281759262084961, "tests_passed": false, "error": "ValueError"}
{"code": "rng = np.random.RandomState(random_seed)\n    X, y = make_blobs(\n        n_samples=n_samples,\n        centers=centers,\n        cluster_std=0.3,\n        random_state=random_seed,\n        n_features=n_features\n    )\n    return (X, y, plt.gca())", "compilation_passed": true, "time": 0.00185394287109375, "tests_passed": false, "error": "NameError"}
{"code": "X, y = make_blobs(n_samples=n_samples, centers=centers, n_features=n_features, random_state=random_seed, return_centers=False)\n    plt.scatter(X[:,0], X[:,1], c=y, cmap='viridis', s=5)\n    ax = plt.gca()\n    return X, y, ax", "compilation_passed": true, "time": 0.02918720245361328, "tests_passed": true, "error": null}
{"code": "rng = np.random.RandomState(random_seed)\n    X, y = make_blobs(n_samples=n_samples, n_features=n_features, centers=centers, cluster_std=0.5, random_state=rng)\n    ax = plt.gca()\n    ax.scatter(X[:, 0], X[:, 1], c=y, cmap=plt.cm.Spectral)\n    return X, y, ax", "compilation_passed": true, "time": 0.0011000633239746094, "tests_passed": false, "error": "NameError"}
{"code": "X, y = make_blobs(n_samples=n_samples, centers=centers, n_features=n_features, random_state=random_seed)\n    plt.scatter(X[:, 0], X[:, 1], c=y, cmap='viridis')\n    plt.show()\n    return X, y, plt.gca()", "compilation_passed": true, "time": 0.03019094467163086, "tests_passed": true, "error": null}
{"code": "# ----------------------------------------------------------------\n    # TODO: Create a Gaussian blobs data generator and plot the resulting\n    #       blobs.\n    # ----------------------------------------------------------------\n    # Your code goes here\n    #\n    # ----------------------------------------------------------------\n    # Hint:\n    #   - You can create your data generator using `make_blobs`.\n    #   - You can use `plt.scatter` to visualize the data points.\n    # ----------------------------------------------------------------\n    #\n    # ----------------------------------------------------------------\n    # Note:\n    #   - The function should return a tuple of the data (X, y, ax).\n    #   - When your code is correct, the plot should be the following:\n    #", "compilation_passed": true, "time": 0.000985860824584961, "tests_passed": false, "error": "TypeError"}
