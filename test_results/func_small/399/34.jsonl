{"code": "if frequency < 0:\n        raise ValueError(\"The frequency must be a non-negative float.\")\n\n    if sample_size <= 0:\n        raise ValueError(\"The sample size must be positive.\")\n\n    t = np.linspace(0, 1, sample_size)\n    y = np.sin(2 * math.pi * frequency * t)\n\n    fig, ax = plt.subplots()\n    ax.plot(t, y)\n\n    return fig, ax", "compilation_passed": true, "time": 0.012192964553833008, "tests_passed": true, "error": null}
{"code": "if frequency < 0:\n        raise ValueError(\"Invalid frequency. Must be a non-negative float.\")\n\n    if sample_size <= 0:\n        raise ValueError(\"Invalid sample size. Must be a positive integer.\")\n\n    x = np.linspace(0, 2 * math.pi, sample_size)\n    y_sin = np.sin(x * frequency)\n    y_cos = np.cos(x * frequency)\n\n    plt.plot(x, y_sin, label='Sine Wave', color='#87CEEB')\n    plt.plot(x, y_cos, label='Cosine Wave', color='#FFD700')\n    plt.xlabel('X')\n    plt.ylabel('Y')\n    plt.legend(loc='upper right')\n    plt.title('Sine and Cosine Wave')\n    plt.grid(True)\n    return plt.figure(), plt.gca()", "compilation_passed": true, "time": 0.0126190185546875, "tests_passed": true, "error": null}
{"code": "if frequency < 0:\n        raise ValueError('The frequency must be a non-negative number.')\n    if sample_size <= 0:\n        raise ValueError('The number of sample points must be a positive integer.')\n\n    # Generate samples of both sine and cosine functions\n    x = np.arange(0, sample_size, 1)\n    sin_vals = np.sin(2 * np.pi * frequency * x / sample_size)\n    cos_vals = np.cos(2 * np.pi * frequency * x / sample_size)\n\n    # Plot the sine and cosine functions\n    ax.plot(x, sin_vals, label='sin')\n    ax.plot(x, cos_vals, label='cos')\n\n    # Set plot properties\n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n    ax.set_title('Sine and Cosine Wave')\n    ax.legend(loc='best')\n\n    return fig, ax", "compilation_passed": true, "time": 0.0009908676147460938, "tests_passed": false, "error": "NameError"}
{"code": "if frequency < 0:\n        raise ValueError(\"The frequency must be non-negative.\")\n    if sample_size <= 0:\n        raise ValueError(\"The sample size must be a positive integer.\")\n\n    x = np.linspace(0, 2 * np.pi, sample_size)\n    y1 = np.sin(x)\n    y2 = np.cos(x)\n    plt.plot(x, y1)\n    plt.plot(x, y2)\n\n    fig = plt.gcf()\n    ax = plt.gca()\n    ax.set_title(\"Sine wave and Cosine wave\")\n\n    return fig, ax", "compilation_passed": true, "time": 0.0012161731719970703, "tests_passed": true, "error": null}
{"code": "if frequency < 0:\n        raise ValueError(\"Invalid frequency value: {}\".format(frequency))\n    if sample_size <= 0:\n        raise ValueError(\"Invalid sample size: {}\".format(sample_size))\n\n    # Calculate the period and increment value\n    period = 1 / frequency\n    increment = 1 / sample_size\n\n    # Initialize the arrays to store the data points\n    x = np.arange(0, 2 * np.pi, increment)\n    y1 = np.sin(x)\n    y2 = np.cos(x)\n\n    # Create the figure and axes objects\n    fig, ax = plt.subplots(1, 1)\n\n    # Plot the two curves with the specified colors and labels\n    ax.plot(x, y1, label=\"Sine Wave\", color=\"green\")\n    ax.plot(x, y2, label=\"Cosine Wave\", color=\"orange\")\n\n    # Set the plot properties, such as the title, labels, and ticks, etc.\n    ax.set_title(", "compilation_passed": false, "time": 0.0002110004425048828, "tests_passed": false, "error": "SyntaxError"}
{"code": "if frequency < 0:\n        raise ValueError(\"Invalid frequency. Must be a non-negative float.\")\n    if sample_size < 1:\n        raise ValueError(\"Invalid sample size. Must be a positive integer.\")\n\n    t = np.linspace(-0.5, 1.5, sample_size)\n    y_sine = np.sin(2 * np.pi * frequency * t)\n    y_cosine = np.cos(2 * np.pi * frequency * t)\n\n    fig, ax = plt.subplots(figsize=(8, 5))\n    ax.plot(t, y_sine, label=\"Sine Wave\")\n    ax.plot(t, y_cosine, label=\"Cosine Wave\")\n    ax.set(ylabel=\"Amplitude\", title=\"Wave Plot\",\n           xlabel=\"Time\")\n    ax.legend(loc='upper left')\n    return fig, ax", "compilation_passed": true, "time": 0.012377023696899414, "tests_passed": true, "error": null}
{"code": "if frequency < 0:\n        raise ValueError(\"Frequency must be a non-negative floating number.\")\n    if sample_size <= 0:\n        raise ValueError(\"Sample size must be a positive integer.\")\n\n    # Generate data with numpy\n    t_vec = np.linspace(0, 1, sample_size)\n    x_vec = np.sin(2*math.pi*frequency*t_vec)\n    y_vec = np.cos(2*math.pi*frequency*t_vec)\n\n    # Create plot\n    fig, ax = plt.subplots(figsize=(10,5))\n    ax.plot(t_vec, x_vec, color='g', label=\"x\")\n    ax.plot(t_vec, y_vec, color='b', label=\"y\")\n    ax.set(xlabel='Time [s]', ylabel='Amplitude')\n    ax.grid()\n    ax.legend(loc='best')\n    return fig, ax", "compilation_passed": true, "time": 0.012334108352661133, "tests_passed": true, "error": null}
{"code": "# raise error if frequency is negative\n    if frequency < 0:\n        raise ValueError(\"The frequency must be a non-negative float.\")\n\n    # generate x-axis data using numpy array with step size 1/sample_size\n    x = np.linspace(0, math.pi/2, sample_size, endpoint=False)\n\n    # generate sine wave\n    y_sin = np.sin(x * 2 * np.pi * frequency)\n\n    # generate cosine wave\n    y_cos = np.cos(x * 2 * np.pi * frequency)\n\n    # create figure with axes\n    fig, ax = plt.subplots(figsize=(9, 3))\n\n    # set axis limits\n    ax.set_xlim(0, math.pi / 2)\n    ax.set_ylim(-1, 1)\n\n    # plot sine wave\n    ax.plot(x, y_sin, label='Sine')\n\n    # plot cosine wave\n    ax.plot(x, y_cos, label='Cosine')\n\n    #", "compilation_passed": true, "time": 0.01223611831665039, "tests_passed": false, "error": "TypeError"}
{"code": "if frequency < 0:\n        raise ValueError('The frequency must be non-negative')\n    if sample_size <= 0:\n        raise ValueError('The sample size must be positive')\n\n    # Generate samples\n    x = np.linspace(-math.pi, math.pi, sample_size)  # Samples in the interval [-\u03c0, \u03c0]\n    y_sin = np.sin(x * frequency)  # Sin wave\n    y_cos = np.cos(x * frequency)  # Cosine wave\n    fig, ax = plt.subplots()\n    ax.plot(x, y_sin, label=f'$\\sin(x\\cdot {frequency})$')\n    ax.plot(x, y_cos, label=f'$\\cos(x\\cdot {frequency})')\n    ax.set(xlabel='x', ylabel=r'$y(x)$', legend=True,\n           title='Sine and Cosine Wave')\n    return fig, ax", "compilation_passed": true, "time": 0.012635231018066406, "tests_passed": false, "error": "AttributeError"}
{"code": "if frequency < 0:\n        raise ValueError(f\"frequency must be a non-negative float, received {frequency}\")\n    if sample_size <= 0:\n        raise ValueError(f\"sample_size must be a positive integer, received {sample_size}\")\n    if frequency == 0:\n        raise ValueError(f\"frequency can't be 0\")\n\n    x_vals = np.linspace(0, 2 * np.pi, sample_size, endpoint=True)\n    y_vals = np.sin(x_vals)\n    ax.plot(x_vals, y_vals, linewidth=2.0)\n    ax.set_xlabel(\"x\")\n    ax.set_ylabel(\"sin(x)\")\n    ax.set_ylim(-1.1, 1.1)\n    ax.set_xlim(0, 2 * np.pi)\n    plt.show()\n    return fig, ax", "compilation_passed": true, "time": 0.0009789466857910156, "tests_passed": false, "error": "NameError"}
{"code": "if not isinstance(frequency, float) or not np.isfinite(frequency) or not frequency >= 0:\n        raise ValueError('frequency must be a non-negative float')\n    if not isinstance(sample_size, int) or not np.isfinite(sample_size) or sample_size <= 0:\n        raise ValueError('sample size must be a positive integer')\n\n    # Generate sample data\n    t = np.linspace(0, 2 * np.pi, sample_size)\n    x = np.sin(t * 2 * math.pi * frequency)\n    y = np.cos(t * 2 * math.pi * frequency)\n\n    # Plot the data\n    fig, ax = plt.subplots()\n    ax.plot(t, x, label='sin')\n    ax.plot(t, y, label='cos')\n    ax.legend()\n    ax.grid()\n    return fig, ax", "compilation_passed": true, "time": 0.0008611679077148438, "tests_passed": false, "error": "ValueError"}
{"code": "if frequency < 0:\n        raise ValueError(\"frequency must be a non-negative number.\")\n    if sample_size <= 0:\n        raise ValueError(\"sample_size must be a positive number.\")\n\n    t = np.linspace(0, sample_size*math.pi, sample_size)\n    sine = np.sin(t*frequency)\n    cosine = np.cos(t*frequency)\n\n    fig, ax = plt.subplots(figsize=(12, 8))\n\n    ax.plot(t, sine)\n    ax.set(xlabel='Time (s)', ylabel='Amplitude', title=f'Sine wave with frequency {frequency}')\n    ax.grid(True)\n    return fig, ax", "compilation_passed": true, "time": 0.011842966079711914, "tests_passed": true, "error": null}
{"code": "if not (isinstance(frequency, float) or isinstance(frequency, int)):\n        raise TypeError(\"The frequency should be a non-negative float\")\n    if frequency < 0:\n        raise ValueError(\"The frequency must be non-negative\")\n    if not isinstance(sample_size, int) or sample_size < 0:\n        raise ValueError(\"The sample size should be a positive integer\")\n\n    x = np.arange(0, sample_size)\n    y1 = np.sin(2 * np.pi * frequency * x / sample_size)\n    y2 = np.cos(2 * np.pi * frequency * x / sample_size)\n    fig, ax = plt.subplots(1, 2, figsize=(10, 5))\n    ax[0].plot(x, y1, 'b')\n    ax[1].plot(x, y2, 'r')\n    return fig, ax", "compilation_passed": true, "time": 0.014580011367797852, "tests_passed": false, "error": "AttributeError"}
{"code": "if frequency < 0:\n        raise ValueError(\"frequency must be a non-negative float.\")\n    elif sample_size <= 0:\n        raise ValueError(\"sample_size must be a positive integer.\")\n\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n\n    x = np.linspace(-sample_size/2,sample_size/2,sample_size)\n\n    ax.plot(x, np.sin(2*np.pi*frequency*x))\n    ax.plot(x, np.cos(2*np.pi*frequency*x))\n\n    return fig, ax", "compilation_passed": true, "time": 0.011628150939941406, "tests_passed": true, "error": null}
{"code": "if sample_size < 1:\n        raise ValueError(\"Sample size cannot be negative.\")\n\n    # x is the vector of sample points, ranging from -pi to pi, in steps of 0.1\n    x = np.arange(-math.pi, math.pi, 0.1)\n    # y is the corresponding sine and cosine waves for x\n    y = np.sin(2 * np.pi * frequency * x)\n    y_cos = np.cos(2 * np.pi * frequency * x)\n    # Plotting the sine and cosine waves\n    fig, ax = plt.subplots()\n    ax.plot(x, y, label=f'sin({2*np.pi*frequency}x)')\n    ax.plot(x, y_cos, label=f'cos({2*np.pi*frequency}x)')\n    ax.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.011931896209716797, "tests_passed": true, "error": null}
{"code": "if frequency < 0:\n        raise ValueError(\"The frequency must be a non-negative float.\")\n    if sample_size < 1:\n        raise ValueError(\"The sample size must be a positive integer.\")\n\n    frequency = np.pi / frequency\n    x = np.linspace(-np.pi, np.pi, sample_size)\n    y = np.sin(frequency * x)\n    fig, ax = plt.subplots()\n    ax.plot(x, y)\n    return fig, ax", "compilation_passed": true, "time": 0.01169586181640625, "tests_passed": true, "error": null}
{"code": "if frequency < 0:\n        raise ValueError('frequency must be a positive number')\n    if sample_size <= 0:\n        raise ValueError('sample size must be a positive number')\n\n    x_values = np.linspace(-np.pi, np.pi, sample_size)\n\n    y_sine = np.sin(2 * np.pi * frequency * x_values)\n    y_cosine = np.cos(2 * np.pi * frequency * x_values)\n\n    fig = plt.figure()\n    ax = fig.add_subplot(111)\n\n    ax.plot(x_values, y_sine, 'b', label='Sine')\n    ax.plot(x_values, y_cosine, 'g', label='Cosine')\n\n    ax.grid(True)\n    ax.legend(loc=\"upper left\")\n\n    return fig, ax", "compilation_passed": true, "time": 0.012244939804077148, "tests_passed": true, "error": null}
{"code": "if frequency < 0:\n        raise ValueError(\"Frequency must be non-negative.\")\n    if sample_size < 1:\n        raise ValueError(\"Sample size must be positive.\")\n\n    x = np.linspace(0, 100, sample_size)\n    y1 = np.sin(2 * math.pi * frequency * x)\n    y2 = np.cos(2 * math.pi * frequency * x)\n\n    fig, ax = plt.subplots()\n    ax.plot(x, y1, label='Sine')\n    ax.plot(x, y2, label='Cosine')\n    ax.legend()\n    ax.grid()\n    return fig, ax", "compilation_passed": true, "time": 0.012061119079589844, "tests_passed": true, "error": null}
{"code": "# check if frequency is negative\n    if frequency < 0:\n        raise ValueError(f'Frequency must be non-negative, received {frequency}')\n\n    # check if sample size is non-positive\n    if sample_size <= 0:\n        raise ValueError(f'Sample size must be positive, received {sample_size}')\n\n    # generate the data using numpy\n    t = np.linspace(0, 2*math.pi, sample_size)\n    x = np.sin(t)\n    y = np.cos(t)\n\n    # create figure and axes\n    fig, ax = plt.subplots(1, 1)\n\n    # set title, xlabel, ylabel\n    ax.set_title(f'Sine & Cosine waves of frequency {frequency}')\n    ax.set_xlabel('Time')\n    ax.set_ylabel('Amplitude')\n\n    # plot the data\n    ax.plot(t, x, 'r', label='Sine')\n    ax.plot(t, y, 'b', label='Cosine')\n\n    ", "compilation_passed": true, "time": 0.012826204299926758, "tests_passed": false, "error": "TypeError"}
{"code": "if frequency < 0:\n        raise ValueError('The frequency of the wave should be non-negative')\n\n    if sample_size <= 0:\n        raise ValueError('The number of samples must be a positive number.')\n\n    t = np.linspace(0, 2 * math.pi, sample_size)\n    ax.plot(t, np.sin(frequency * t), label='sine_wave')\n    ax.plot(t, np.cos(frequency * t), label='cosine_wave')\n    return fig, ax", "compilation_passed": true, "time": 0.0009579658508300781, "tests_passed": false, "error": "NameError"}
{"code": "if frequency < 0:\n        raise ValueError(f\"The frequency ({frequency}) must be non-negative.\")\n    if sample_size <= 0:\n        raise ValueError(f\"The sample size ({sample_size}) must be a positive integer.\")\n\n    x = np.linspace(-math.pi, math.pi, sample_size)\n    y1 = np.sin(2 * np.pi * frequency * x)\n    y2 = np.cos(2 * np.pi * frequency * x)\n\n    fig, ax = plt.subplots()\n    ax.plot(x, y1, label='sin')\n    ax.plot(x, y2, label='cos')\n    ax.set(xlabel=\"x axis\", ylabel=\"y axis\", title=f\"Frequency: {frequency}\")\n    ax.legend(loc='upper right')\n\n    return fig, ax", "compilation_passed": true, "time": 0.04730582237243652, "tests_passed": true, "error": null}
{"code": "if frequency < 0:\n        raise ValueError(\"Frequency must be non-negative.\")\n    if sample_size <= 0:\n        raise ValueError(\"Sample size must be a positive integer.\")\n    x = np.linspace(0, np.pi * 2, sample_size)\n    y = np.sin(2 * np.pi * frequency * x)\n    y1 = np.cos(2 * np.pi * frequency * x)\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    ax.plot(x, y, label=\"Sine Wave\")\n    ax.plot(x, y1, label=\"Cosine Wave\")\n    ax.set_xlabel('x')\n    ax.set_ylabel('y')\n    ax.set_title(\"Sine and Cosine Waves\")\n    ax.legend()\n    return fig, ax", "compilation_passed": true, "time": 0.012163877487182617, "tests_passed": true, "error": null}
{"code": "# Validate arguments\n    if not isinstance(sample_size, int):\n        raise ValueError(f\"sample_size must be an int, not {type(sample_size)}.\")\n    if sample_size <= 0:\n        raise ValueError(f\"sample_size must be a positive integer, not {sample_size}.\")\n\n    # Generate data for both the sine and cosine waves\n    freq_factor = 2*math.pi\n    time_range = np.linspace(0, 1/freq_factor, sample_size)\n    sine_x_axis = time_range * freq_factor\n    sine_y_axis = np.sin(sine_x_axis)\n    cosine_x_axis = time_range * freq_factor*2\n    cosine_y_axis = np.cos(cosine_x_axis)\n\n    # Create a figure and axes for plotting\n    fig, ax = plt.subplots()\n\n    # Plot both sine and cosine waves on the axes\n    ax.plot(time_range, sine_y_", "compilation_passed": false, "time": 0.00021910667419433594, "tests_passed": false, "error": "SyntaxError"}
{"code": "if frequency < 0:\n        raise ValueError(\"The frequency must be a non-negative floating point value.\")\n    if sample_size <= 0:\n        raise ValueError(\"The sample size must be a positive integer.\")\n\n    x = np.linspace(-math.pi, math.pi, sample_size)\n    sin_wave = np.sin(x)\n    cos_wave = np.cos(x)\n\n    fig, ax = plt.subplots()\n    ax.plot(x, sin_wave)\n    ax.plot(x, cos_wave)\n    ax.set(xlabel='x', ylabel='y', title='Sine and Cosine Wave')\n    ax.grid()\n\n    return fig, ax", "compilation_passed": true, "time": 0.012392282485961914, "tests_passed": true, "error": null}
{"code": "# Checking parameters\n    if type(frequency) is not int or type(sample_size) is not int:\n        raise TypeError(f\"frequency: {type(frequency)} and sample_size: {type(sample_size)} must be of type int\")\n    if frequency < 0:\n        raise ValueError(f\"frequency must be non-negative: {frequency}\")\n    if sample_size < 1:\n        raise ValueError(f\"sample_size must be positive: {sample_size}\")\n\n    # Plotting\n    x = np.linspace(-np.pi, np.pi, sample_size)\n    fig, ax = plt.subplots()\n    y = np.sin(x)\n    y_cos = np.cos(x)\n    ax.plot(x, y, linewidth=4, color='#85144b')\n    ax.plot(x, y_cos, linewidth=4, color='#644b32')\n    return fig, ax", "compilation_passed": true, "time": 0.011767864227294922, "tests_passed": true, "error": null}
{"code": "if frequency < 0:\n        raise ValueError(\"The frequency must be a non-negative number\")\n    if sample_size <= 0:\n        raise ValueError(\"The sample size must be a positive integer\")\n\n    sample_range = np.linspace(0, sample_size - 1, sample_size)\n\n    sine = np.sin(2 * np.pi * frequency * sample_range / sample_size)\n    cosine = np.cos(2 * np.pi * frequency * sample_range / sample_size)\n\n    fig, ax = plt.subplots()\n    ax.set_title(\"Task_Function\")\n    ax.plot(sample_range, sine, 'r')\n    ax.plot(sample_range, cosine, 'g')\n\n    ax.set_xlabel(\"X\")\n    ax.set_ylabel(\"Y\")\n\n    plt.show()\n\n    return fig, ax", "compilation_passed": true, "time": 0.011904001235961914, "tests_passed": true, "error": null}
{"code": "if frequency <= 0:\n        raise ValueError(\"frequency must be a non-negative number\")\n    if sample_size <= 0:\n        raise ValueError(\"sample size must be positive\")\n\n    # Generate X data for sine wave\n    x = np.linspace(-5*math.pi, 5*math.pi, sample_size)\n    y_sin = np.sin(x)\n\n    # Generate X data for cosine wave\n    x_cos = np.linspace(-5*math.pi, 5*math.pi, sample_size)\n    y_cos = np.cos(x_cos)\n\n    # Create figure and axes\n    fig, ax = plt.subplots()\n\n    # Plot the waves\n    ax.plot(x, y_sin, label='Sine Wave')\n    ax.plot(x_cos, y_cos, label='Cosine Wave')\n\n    # Add title and labels\n    ax.set_title(\"Sine and Cosine Wave\")\n    ax.set_xlabel(\"X\")\n    ax.set_ylabel", "compilation_passed": true, "time": 0.01216578483581543, "tests_passed": false, "error": "TypeError"}
{"code": "# ------------------------------------------------------------------------------------------------------------------\n    # 1. Implement this function in such a way that it does not use any external libraries other than numpy and\n    # matplotlib.\n    #\n    # 2. The frequency argument is a float.\n    #\n    # 3. If the sample_size argument is non-positive, it should be treated as if it were 10000.\n    #\n    # 4. The result should be a plot with two lines with the label on each line. The function should not create the plot,\n    # but rather return it.\n    #\n    # 5. The functions should work with both positive and negative frequency.\n    #\n    # 6. The functions should work with both positive and negative sample sizes.\n    # ------------------------------------------------------------------------------------------------------------------\n    if frequency < 0:\n        ", "compilation_passed": false, "time": 0.00011110305786132812, "tests_passed": false, "error": "IndentationError"}
{"code": "if frequency < 0:\n        raise ValueError(\"frequency must be a non-negative float\")\n    if sample_size <= 0:\n        raise ValueError(\"sample_size must be a positive integer\")\n    freq = 2 * math.pi * frequency\n    x_values = np.linspace(-(sample_size - 1) // 2, (sample_size - 1) // 2, sample_size)\n    y_sin = np.sin(x_values * freq)\n    y_cos = np.cos(x_values * freq)\n    fig = plt.figure()\n    ax = fig.add_subplot(1, 1, 1)\n    ax.plot(x_values, y_sin, color=\"blue\", label=\"sin\")\n    ax.plot(x_values, y_cos, color=\"red\", label=\"cos\")\n    ax.legend(loc=\"upper left\")\n    ax.grid(True)\n    return fig, ax", "compilation_passed": true, "time": 0.03573918342590332, "tests_passed": true, "error": null}
{"code": "# Check the frequency value\n    if not isinstance(frequency, float):\n        raise ValueError(f\"frequency should be a float, got {type(frequency)}\")\n    if frequency < 0:\n        raise ValueError(\"frequency must be non-negative\")\n    # Check the sample_size value\n    if not isinstance(sample_size, int) or sample_size <= 0:\n        raise ValueError(f\"sample_size should be an int and positive, got {type(sample_size)}\")\n\n    t_span = 0.1\n\n    dt = t_span / sample_size\n\n    x = np.arange(0, t_span, dt)\n\n    # Plot the figure\n    fig, ax = plt.subplots(1, 1, figsize=(8, 8))\n\n    ax.plot(x, math.sin(2 * np.pi * frequency * x), label=\"sin wave\")\n    ax.plot(x, math.cos(2 * np.pi * frequency * x), label=\"cos wave\")\n\n    # Set the", "compilation_passed": true, "time": 0.0010569095611572266, "tests_passed": false, "error": "ValueError"}
