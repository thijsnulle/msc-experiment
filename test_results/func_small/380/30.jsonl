{"code": "# Split directory path into parent directory and directory name\n    directory_name = os.path.basename(directory)\n    parent_dir = os.path.dirname(directory)\n\n    # Create new directory for each extension\n    for ext in [\".txt\", \".jpg\", \".jpeg\", \".gif\", \".png\", \".bmp\", \".pdf\", \".zip\", \".mp3\", \".mp4\", \".wav\", \".ogg\", \".doc\", \".docx\", \".txt\"]:\n        ext_dir = os.path.join(parent_dir, directory_name + ext)\n        os.makedirs(ext_dir, exist_ok=True)\n\n    # Move files to corresponding directories\n    for root, dirs, files in os.walk(directory):\n        for file_name in files:\n            ext = file_name.split(\".\")[-1]\n            ext_dir = os.path.join(parent_dir, directory_name + ext)\n            new_path = os.", "compilation_passed": false, "time": 0.00020313262939453125, "tests_passed": false, "error": "SyntaxError"}
{"code": "for file in os.listdir(directory):\n        match = re.match(r'(\\w+)\\.(\\w+)', file)\n        if match:\n            extension = match.group(2)\n            path = os.path.join(directory, extension)\n            if not os.path.exists(path):\n                os.mkdir(path)\n            shutil.move(os.path.join(directory, file), path)", "compilation_passed": true, "time": 0.005221843719482422, "tests_passed": true, "error": null}
{"code": "files = os.listdir(directory)\n    if not files:\n        print(\"There are no files in this directory.\")\n    else:\n        extensions = [f.split('.')[-1] for f in files]\n        extensions_to_files = collections.defaultdict(list)\n        for f in files:\n            extension = f.split('.')[-1]\n            extensions_to_files[extension].append(f)\n        for extension, files in extensions_to_files.items():\n            os.mkdir(os.path.join(directory, extension))\n            for f in files:\n                shutil.move(os.path.join(directory, f), os.path.join(directory, extension))", "compilation_passed": true, "time": 0.0017819404602050781, "tests_passed": false, "error": "NameError"}
{"code": "# Initialize a dictionary to store file extensions and directories\n    file_exts = {}\n    # Loop through all files in the directory\n    for file in os.listdir(directory):\n        # Get the extension of the file\n        extension = os.path.splitext(file)[1]\n        # Create a directory for the extension if it doesn't exist\n        if extension not in file_exts:\n            file_exts[extension] = os.path.join(directory, extension.lstrip('.'))\n        # Move the file to the corresponding directory\n        shutil.move(os.path.join(directory, file), file_exts[extension])", "compilation_passed": true, "time": 0.0026519298553466797, "tests_passed": false, "error": "shutil.Error"}
{"code": "exts = [('txt', os.path.join(directory, 'txt')),\n            ('bin', os.path.join(directory, 'bin')),\n            ('jpg', os.path.join(directory, 'jpg'))]\n\n    for ext, dirname in exts:\n        if not os.path.exists(dirname):\n            os.makedirs(dirname)\n\n        file_list = []\n        for path, dirnames, filenames in os.walk(directory):\n            for filename in filenames:\n                if filename.endswith(ext):\n                    file_list.append(filename)\n\n        for filename in file_list:\n            shutil.move(os.path.join(directory, filename), os.path.join(dirname, filename))", "compilation_passed": true, "time": 0.0026221275329589844, "tests_passed": true, "error": null}
{"code": "if not os.path.isdir(directory):\n        raise Exception(\"Provided path is not a directory!\")\n\n    file_map = {}\n\n    # Loop through all files in the directory\n    for root, _, files in os.walk(directory):\n        for file in files:\n            # Check if the file has an extension\n            if file.endswith('.txt'):\n                # Extract the extension and add it to the file map\n                extension = '.txt'\n                file_map.setdefault(extension, []).append(os.path.join(root, file))\n            else:\n                # If the file has no extension, add it to a separate key\n                file_map.setdefault('_', []).append(os.path.join(root, file))\n\n    for extension, files in file_map.items():\n        # Create a new directory for each extension and move the files to the corresponding directories\n        extension_dir = os.path.join(directory, extension)\n        if not os.path.exists(extension_dir):\n            os.mkdir(extension", "compilation_passed": false, "time": 0.00022029876708984375, "tests_passed": false, "error": "SyntaxError"}
{"code": "file_extensions = {}\n\n    # For each file in the directory\n    for file_name in os.listdir(directory):\n        # Get the extension of the file\n        extension = os.path.splitext(file_name)[1]\n        if extension:\n            # Remove the initial '.' from the extension\n            extension = extension[1:]\n            # Get the list of files with the same extension\n            if extension in file_extensions:\n                file_extensions[extension].append(file_name)\n            else:\n                file_extensions[extension] = [file_name]\n        else:\n            print(f'Skipped file {file_name} with no extension.')\n\n    # For each extension\n    for extension, files in file_extensions.items():\n        # Create a new directory with the extension\n        new_directory = os.path.join(directory, extension)\n        # Create the new directory\n        os.makedirs(new_directory, exist_ok=True)\n        # Move the files to the new directory\n        for file in files:\n            shutil.move(os.path", "compilation_passed": false, "time": 0.00020360946655273438, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Split the directory path into directory and file name\n    directory, _ = os.path.split(directory)\n\n    # Iterate over the files in the directory\n    for filename in os.listdir(directory):\n        # Get the file name and extension\n        file_name, extension = os.path.splitext(filename)\n        # Create a new directory with the same name as the extension\n        directory_name = os.path.join(directory, extension)\n        os.makedirs(directory_name, exist_ok=True)\n        # Move the file to the corresponding directory\n        shutil.move(os.path.join(directory, filename), directory_name)", "compilation_passed": true, "time": 0.001725912094116211, "tests_passed": false, "error": "shutil.Error"}
{"code": "directory = Path(directory)\n    directory.mkdir(exist_ok=True)\n    extensions = {}\n    for path in directory.iterdir():\n        extension = path.suffix.lstrip('.').lower()\n        if not extension:\n            extension = 'other'\n        extensions.setdefault(extension, []).append(path)\n\n    for extension, files in extensions.items():\n        extension_dir = directory / extension\n        extension_dir.mkdir(exist_ok=True)\n        for file in files:\n            shutil.move(file, extension_dir / file.name)", "compilation_passed": true, "time": 0.001611948013305664, "tests_passed": false, "error": "NameError"}
{"code": "directory = os.path.abspath(directory)\n    os.mkdir(os.path.join(directory, 'txt'))\n    os.mkdir(os.path.join(directory, 'jpg'))\n    os.mkdir(os.path.join(directory, 'xml'))\n    files = os.listdir(directory)\n    for file in files:\n        if file.endswith('.jpg'):\n            shutil.move(os.path.join(directory, file), os.path.join(directory, 'jpg'))\n        elif file.endswith('.txt'):\n            shutil.move(os.path.join(directory, file), os.path.join(directory, 'txt'))\n        else:\n            shutil.move(os.path.join(directory, file), os.path.join(directory, 'xml'))", "compilation_passed": true, "time": 0.0028400421142578125, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(directory):\n        print('Error: The directory does not exist')\n        return\n\n    extension_to_files = {}\n\n    for filename in os.listdir(directory):\n        _, extension = os.path.splitext(filename)\n        extension = extension.lower()\n        if extension == '':\n            print('Error: The filename must have an extension.')\n            return\n        if extension not in extension_to_files:\n            extension_to_files[extension] = [filename]\n        else:\n            extension_to_files[extension].append(filename)\n\n    for extension, files in extension_to_files.items():\n        extension_dir = os.path.join(directory, extension)\n        os.mkdir(extension_dir)\n        for file in files:\n            shutil.move(os.path.join(directory, file), extension_dir)\n\n    print('Task completed.')", "compilation_passed": true, "time": 0.0023322105407714844, "tests_passed": true, "error": null}
{"code": "files = os.listdir(directory)\n    files.sort(key=lambda x: os.path.splitext(x)[1])\n    for extension in files:\n        new_dir = os.path.join(directory, os.path.splitext(extension)[0])\n        if not os.path.isdir(new_dir):\n            os.mkdir(new_dir)\n    for file in files:\n        file_name = os.path.join(directory, file)\n        os.rename(file_name, os.path.join(directory, os.path.splitext(file)[0]))", "compilation_passed": true, "time": 0.002361297607421875, "tests_passed": false, "error": "IsADirectoryError"}
{"code": "directory = Path(directory)\n    if not directory.exists():\n        return\n    files_by_ext = {}\n    for filename in directory.iterdir():\n        if filename.is_file():\n            name, ext = os.path.splitext(filename)\n            ext = ext[1:]\n            if ext in files_by_ext:\n                files_by_ext[ext].append(filename)\n            else:\n                files_by_ext[ext] = [filename]\n    for ext, files in files_by_ext.items():\n        ext_dir = directory / f'.{ext}'\n        ext_dir.mkdir(parents=True, exist_ok=True)\n        for file in files:\n            shutil.move(file, ext_dir)", "compilation_passed": true, "time": 0.0016469955444335938, "tests_passed": false, "error": "NameError"}
{"code": "for file_name in os.listdir(directory):\n        match = re.match(r'.*\\.([a-zA-Z]+)', file_name)\n        if match:\n            file_extension = match.group(1)\n            file_path = os.path.join(directory, file_name)\n            file_dir = os.path.join(directory, file_extension)\n            if not os.path.exists(file_dir):\n                os.mkdir(file_dir)\n            shutil.move(file_path, file_dir)", "compilation_passed": true, "time": 0.004353046417236328, "tests_passed": true, "error": null}
{"code": "if os.path.isdir(directory):\n        for root, dirs, files in os.walk(directory):\n            for file_name in files:\n                file_path = os.path.join(root, file_name)\n                file_name, file_extension = os.path.splitext(file_name)\n                file_extension = file_extension.strip('.')\n                new_dir = os.path.join(directory, file_extension)\n                if not os.path.exists(new_dir):\n                    os.mkdir(new_dir)\n                shutil.move(file_path, new_dir)", "compilation_passed": true, "time": 0.003033876419067383, "tests_passed": false, "error": "shutil.Error"}
{"code": "exts = re.compile(r'(\\.\\w+$)', re.M).findall(directory)\n    exts = [i[1:] for i in exts]\n\n    for ext in exts:\n        folder = f\"{ext}\"\n        os.mkdir(folder)\n\n    for root, dirs, files in os.walk(directory):\n        for filename in files:\n            ext = filename.split(\".\")[-1]\n            file_path = os.path.join(root, filename)\n            shutil.move(file_path, os.path.join(folder, filename))", "compilation_passed": true, "time": 0.0016641616821289062, "tests_passed": false, "error": "UnboundLocalError"}
{"code": "extension_dict = {}\n    files = os.listdir(directory)\n\n    # Loop through each file in the directory\n    for filename in files:\n        # Get the extension of the file\n        extension = os.path.splitext(filename)[1].lower()\n\n        # Check if the extension already exists in the dictionary\n        if extension not in extension_dict:\n            extension_dict[extension] = []\n\n        # Move the file to the corresponding directory\n        shutil.move(os.path.join(directory, filename), os.path.join(directory, 'txt'))\n        extension_dict[extension].append(filename)\n\n    # Sort the files in each directory alphabetically\n    for extension, filenames in extension_dict.items():\n        filenames.sort(key=str.lower)\n\n    # Print the final directory structure\n    print('{}:'.format(extension))\n    for filename in extension_dict['txt']:\n        print('\\t{}'.format(filename))", "compilation_passed": true, "time": 0.0019288063049316406, "tests_passed": false, "error": "KeyError"}
{"code": "if not os.path.exists(directory):\n        os.makedirs(directory)\n\n    ext_list = []\n    for file_name in os.listdir(directory):\n        _, ext = os.path.splitext(file_name)\n        ext = ext[1:]\n        if ext not in ext_list:\n            ext_list.append(ext)\n\n    for ext in ext_list:\n        ext_dir = os.path.join(directory, ext)\n        if not os.path.exists(ext_dir):\n            os.mkdir(ext_dir)\n        for file_name in os.listdir(directory):\n            _, ext2 = os.path.splitext(file_name)\n            ext2 = ext2[1:]\n            if ext2 == ext:\n                file_path = os.path.join(directory, file_name)\n                shutil.move(file_path, ext_dir)", "compilation_passed": true, "time": 0.0033478736877441406, "tests_passed": false, "error": "shutil.Error"}
{"code": "directory = os.path.abspath(directory)\n    os.mkdir(os.path.join(directory, 'txt'))\n    for file in os.listdir(directory):\n        if file.endswith('.txt'):\n            shutil.move(os.path.join(directory, file), os.path.join(directory, 'txt'))", "compilation_passed": true, "time": 0.0019316673278808594, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(directory):\n        os.makedirs(directory)\n    for filename in os.listdir(directory):\n        filename_root, filename_ext = os.path.splitext(filename)\n        full_filename = os.path.join(directory, filename)\n        if filename_ext:\n            extension = filename_ext[1:]\n            file_dir = os.path.join(directory, extension)\n            if not os.path.exists(file_dir):\n                os.mkdir(file_dir)\n            shutil.move(full_filename, file_dir)", "compilation_passed": true, "time": 0.004675149917602539, "tests_passed": true, "error": null}
{"code": "os.makedirs(directory + '/txt', exist_ok=True)\n    os.makedirs(directory + '/csv', exist_ok=True)\n    os.makedirs(directory + '/txt/txt_dir', exist_ok=True)\n    shutil.move(directory + '/file1.txt', directory + '/txt/txt_dir')\n    shutil.move(directory + '/file2.csv', directory + '/csv')", "compilation_passed": true, "time": 0.002346038818359375, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "for dirpath, dirnames, filenames in os.walk(directory):\n        for filename in filenames:\n            basename, ext = os.path.splitext(filename)\n            if ext in ('.txt', '.csv'):\n                try:\n                    os.mkdir(f'{dirpath}/{ext.lstrip(\".\")}')\n                except OSError:\n                    pass\n                shutil.move(f'{dirpath}/{filename}', f'{dirpath}/{ext.lstrip(\".\")}')", "compilation_passed": true, "time": 0.0020341873168945312, "tests_passed": true, "error": null}
{"code": "# Create an empty dictionary to store the files by extension\n    files_by_extension = {}\n\n    # Iterate through each file in the directory\n    for file in os.listdir(directory):\n        # Split the file name and extension\n        name, extension = os.path.splitext(file)\n        # Check if the extension is already in the dictionary\n        if extension in files_by_extension:\n            # If it is, append the file name to the list\n            files_by_extension[extension].append(name)\n        else:\n            # If it isn't, create a new list and append it to the dictionary\n            files_by_extension[extension] = [name]\n\n    # Create a new directory for each extension\n    for extension, files in files_by_extension.items():\n        new_dir = os.path.join(directory, extension.lstrip('.'))\n        os.mkdir(new_dir)\n        for file in files:\n            # Move the file to the corresponding directory\n            shutil.move(os.path.join(directory, file), new_dir)\n", "compilation_passed": true, "time": 0.0020542144775390625, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "os.makedirs(directory, exist_ok=True)\n    for root, dirs, files in os.walk(directory):\n        for name in files:\n            path = os.path.join(root, name)\n            match = re.search(r'(\\.txt)', path)\n            if match:\n                extension = match.group(1)\n                new_dir = os.path.join(directory, 'new_dir')\n                os.makedirs(new_dir, exist_ok=True)\n                shutil.move(path, new_dir)", "compilation_passed": true, "time": 0.002009153366088867, "tests_passed": true, "error": null}
{"code": "for root, _dirs, files in os.walk(directory):\n        for file in files:\n            file_path = os.path.join(root, file)\n            file_ext = os.path.splitext(file_path)[1].lower()\n            file_name, file_ext = os.path.splitext(file)\n            directory = '{0}/{1}'.format(directory, file_ext)\n            if not os.path.isdir(directory):\n                os.mkdir(directory)\n            shutil.move(file_path, '{0}/{1}'.format(directory, file_name))", "compilation_passed": true, "time": 0.0023508071899414062, "tests_passed": true, "error": null}
{"code": "# TODO: Write a function that takes a directory as input and returns None.\n    # The function should arrange files in a directory by their extensions.\n    # Create a new directory for each extension and move the files to the corresponding directories.\n    for root, dirs, files in os.walk(directory):\n        for file in files:\n            extension = os.path.splitext(file)[1]\n            if not os.path.exists(os.path.join(directory, extension)):\n                os.mkdir(os.path.join(directory, extension))\n            shutil.move(os.path.join(root, file), os.path.join(directory, extension))", "compilation_passed": true, "time": 0.0024690628051757812, "tests_passed": true, "error": null}
{"code": "directory = os.path.abspath(directory)\n    files_dir = os.path.join(directory, 'files')\n    if not os.path.exists(files_dir):\n        os.makedirs(files_dir)\n    for root, dirs, files in os.walk(directory):\n        for file in files:\n            ext = os.path.splitext(file)[1]\n            if ext == '':\n                continue\n            new_path = os.path.join(files_dir, ext)\n            if not os.path.exists(new_path):\n                os.makedirs(new_path)\n            shutil.move(os.path.join(root, file), new_path)", "compilation_passed": true, "time": 0.0026962757110595703, "tests_passed": false, "error": "shutil.Error"}
{"code": "directory = Path(directory)\n\n    files = [os.path.join(directory, file) for file in os.listdir(directory)]\n    extension_map = {}\n    for file in files:\n        extension = os.path.splitext(file)[1][1:]\n        if extension:\n            extension_map.setdefault(extension, []).append(file)\n\n    for extension, files in extension_map.items():\n        extension_dir = os.path.join(directory, extension)\n        os.mkdir(extension_dir)\n        for file in files:\n            shutil.move(file, extension_dir)", "compilation_passed": true, "time": 0.0015349388122558594, "tests_passed": false, "error": "NameError"}
{"code": "extensions = {}\n\n    for root, _, files in os.walk(directory):\n        for file in files:\n            filename, extension = os.path.splitext(file)\n            if extension not in extensions:\n                extensions[extension] = []\n            extensions[extension].append(os.path.join(root, file))\n\n    for extension, files in extensions.items():\n        new_directory = os.path.join(directory, extension)\n        os.makedirs(new_directory, exist_ok=True)\n        for file in files:\n            shutil.move(file, new_directory)", "compilation_passed": true, "time": 0.002584218978881836, "tests_passed": true, "error": null}
{"code": "for root, dirs, files in os.walk(directory, topdown=False):\n        for name in files:\n            ext = name.split('.')[-1]\n            if ext not in os.listdir(os.path.dirname(root)):\n                os.mkdir(os.path.join(os.path.dirname(root), ext))\n                shutil.move(name, os.path.join(os.path.dirname(root), ext))", "compilation_passed": true, "time": 0.0018808841705322266, "tests_passed": false, "error": "FileNotFoundError"}
