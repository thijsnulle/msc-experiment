{"code": "dict_ = collections.defaultdict(list)\n    for i in range(1, n_values + 1):\n        key = random.choice(LETTERS)\n        dict_[key].append(i)\n    return dict_", "compilation_passed": true, "time": 0.0006930828094482422, "tests_passed": true, "error": null}
{"code": "return {\n        random.choice(LETTERS): [\n            i + 1\n            for i in range(n_values)\n        ]\n        for _ in range(n_keys)\n    }", "compilation_passed": true, "time": 0.000997781753540039, "tests_passed": true, "error": null}
{"code": "dict_ = collections.defaultdict(list)\n    for i in range(n_keys):\n        key = random.choice(LETTERS)\n        for j in range(n_values):\n            dict_[key].append(j + 1)\n    return dict_", "compilation_passed": true, "time": 0.0007369518280029297, "tests_passed": true, "error": null}
{"code": "result = collections.OrderedDict()\n    for _ in range(n_keys):\n        key = random.choice(LETTERS)\n        result[key] = [x + 1 for x in range(n_values)]\n    return result", "compilation_passed": true, "time": 0.000993967056274414, "tests_passed": true, "error": null}
{"code": "# ...\n    result = collections.defaultdict(list)\n\n    keys = LETTERS[:n_keys]\n    random.shuffle(keys)\n\n    for key in keys:\n        values = [i for i in range(1, n_values+1)]\n        random.shuffle(values)\n        result[key].extend(values)\n    # ...\n\n    return result", "compilation_passed": true, "time": 0.0007750988006591797, "tests_passed": true, "error": null}
{"code": "keys = [random.choice(LETTERS) for _ in range(n_keys)]\n\n    values = []\n    for key in keys:\n        value = [i for i in range(1, n_values + 1)]\n        random.shuffle(value)\n        values.append(value)\n\n    return dict(zip(keys, values))", "compilation_passed": true, "time": 0.0008161067962646484, "tests_passed": true, "error": null}
{"code": "d = {}\n    for key in random.sample(LETTERS, n_keys):\n        values = [x for x in range(1, n_values + 1)]\n        d[key] = values\n    return d", "compilation_passed": true, "time": 0.0008609294891357422, "tests_passed": true, "error": null}
{"code": "return collections.defaultdict(lambda: [1 + n for n in range(n_values)])", "compilation_passed": true, "time": 0.0007050037384033203, "tests_passed": true, "error": null}
{"code": "keys = []\n    values = []\n    for i in range(1, n_values + 1):\n        values.append(i)\n\n    for i in range(n_keys):\n        keys.append(random.choice(LETTERS))\n    return dict(zip(keys, values))", "compilation_passed": true, "time": 0.0006818771362304688, "tests_passed": true, "error": null}
{"code": "assert isinstance(n_keys, int) and n_keys >= 1\n    assert isinstance(n_values, int) and n_values >= 1\n\n    letters = LETTERS[:n_keys]\n    keys = collections.defaultdict(list)\n    for i in range(1, n_keys + 1):\n        keys[random.choice(letters)].append(i)\n    return keys", "compilation_passed": true, "time": 0.0007879734039306641, "tests_passed": true, "error": null}
{"code": "return dict(zip(random.sample(LETTERS, n_keys), [i for _ in range(1, n_values + 1)]))", "compilation_passed": true, "time": 0.0006468296051025391, "tests_passed": false, "error": "NameError"}
{"code": "dict_ = {}\n\n    for i in range(n_keys):\n        key = random.choice(LETTERS)\n        values = [i + 1 for i in range(n_values)]\n        dict_[key] = values\n\n    return dict_", "compilation_passed": true, "time": 0.0009667873382568359, "tests_passed": true, "error": null}
{"code": "keys = []\n    for i in range(n_keys):\n        key = random.choice(LETTERS)\n        values = [j for j in range(1, n_values + 1)]\n        keys.append(key)\n    result = collections.OrderedDict()\n    for key, value in zip(keys, values):\n        result[key] = list(range(1, value + 1))\n    return result", "compilation_passed": true, "time": 0.0007441043853759766, "tests_passed": true, "error": null}
{"code": "return {random.choice(LETTERS): [i for i in range(1, n_values + 1)] for i in range(1, n_keys + 1)}", "compilation_passed": true, "time": 0.0008733272552490234, "tests_passed": true, "error": null}
{"code": "return dict(zip(random.sample(LETTERS, n_keys), list(map(lambda i: [i for i in range(1, n_values + 1)], range(1, n_values + 1)))))", "compilation_passed": true, "time": 0.0188448429107666, "tests_passed": true, "error": null}
{"code": "return collections.OrderedDict({\n        random.choice(LETTERS):\n        [\n            num for num in range(1, n_values + 1)\n        ]\n        for _ in range(n_keys)\n    })", "compilation_passed": true, "time": 0.0009760856628417969, "tests_passed": true, "error": null}
{"code": "keys = collections.deque(LETTERS)\n    result = {}\n    for i in range(1, n_keys + 1):\n        key = random.sample(keys, 1)\n        keys.remove(key[0])\n        result[key[0]] = [i for _ in range(1, n_values + 1)]\n    return result", "compilation_passed": true, "time": 0.0007932186126708984, "tests_passed": true, "error": null}
{"code": "random.seed(0)\n    return {random.choice(LETTERS): list(range(1, n_values + 1)) for i in range(n_keys)}", "compilation_passed": true, "time": 0.0008540153503417969, "tests_passed": true, "error": null}
{"code": "keys = []\n    for _ in range(n_keys):\n        key_index = random.randint(0, len(LETTERS) - 1)\n        keys.append(LETTERS[key_index])\n\n    return collections.OrderedDict(zip(keys, [i for i in range(1, n_values + 1)]))", "compilation_passed": true, "time": 0.0006949901580810547, "tests_passed": true, "error": null}
{"code": "result = collections.defaultdict(list)\n    for key in LETTERS[:n_keys]:\n        values = [i for i in range(1, n_values + 1)]\n        random.shuffle(values)\n        result[key] += values\n    return dict(result)", "compilation_passed": true, "time": 0.00080108642578125, "tests_passed": true, "error": null}
{"code": "# Create a list of keys, and fill it with n_keys random elements\n    keys = []\n    for i in range(n_keys):\n        keys.append(random.choice(LETTERS))\n\n    # Create a list of values, and fill it with n_values consecutive integers starting from 1\n    values = []\n    for i in range(1, n_values + 1):\n        values.append(i)\n\n    # Create a dictionary using keys and values\n    return dict(zip(keys, values))", "compilation_passed": true, "time": 0.0006878376007080078, "tests_passed": true, "error": null}
{"code": "result = collections.defaultdict(list)\n    for i in range(1, n_values + 1):\n        key = LETTERS[random.randint(0, n_keys - 1)]\n        result[key].append(i)\n    return result", "compilation_passed": true, "time": 0.0007810592651367188, "tests_passed": true, "error": null}
{"code": "d = collections.OrderedDict()\n\n    keys = random.sample(LETTERS, n_keys)\n\n    for key in keys:\n        values = [n + 1 for n in range(n_values)]\n        random.shuffle(values)\n\n        d[key] = values\n\n    return d", "compilation_passed": true, "time": 0.0007398128509521484, "tests_passed": true, "error": null}
{"code": "d = collections.defaultdict(list)\n    for k in LETTERS[:n_keys]:\n        for i in range(1, n_values + 1):\n            d[k].append(i)\n    return dict(d)", "compilation_passed": true, "time": 0.0010287761688232422, "tests_passed": true, "error": null}
{"code": "result = collections.defaultdict(list)\n    for k in LETTERS[:n_keys]:\n        for v in range(1, n_values + 1):\n            result[k].append(v)\n    return result", "compilation_passed": true, "time": 0.0009720325469970703, "tests_passed": true, "error": null}
{"code": "random.seed(n_keys + n_values)\n    return {key: [i for i in range(1, n_values + 1)] for key in LETTERS[0:n_keys]}", "compilation_passed": true, "time": 0.0008950233459472656, "tests_passed": true, "error": null}
{"code": "dct = collections.defaultdict(list)\n\n    for k in range(1, n_keys + 1):\n        dct[random.choice(LETTERS)].append(k)\n\n    return dct", "compilation_passed": true, "time": 0.0006856918334960938, "tests_passed": true, "error": null}
{"code": "if n_keys < 1 or n_values < 1:\n        return None\n\n    random.seed()\n    result = collections.OrderedDict()\n    for letter in LETTERS:\n        values = [i for i in range(1, n_values + 1)]\n        random.shuffle(values)\n        result[letter] = values\n\n    return result", "compilation_passed": true, "time": 0.0007772445678710938, "tests_passed": true, "error": null}
{"code": "d = collections.OrderedDict()\n    for i in range(n_keys):\n        key = LETTERS[i]\n        values = [j for j in range(1, n_values+1)]\n        random.shuffle(values)\n        d[key] = values\n    return d", "compilation_passed": true, "time": 0.0007419586181640625, "tests_passed": true, "error": null}
{"code": "keys = [random.choice(LETTERS) for _ in range(n_keys)]\n    values = [[i + 1 for i in range(j)] for j in range(1, n_values + 1)]\n    result = dict(zip(keys, values))\n    return result", "compilation_passed": true, "time": 0.0007698535919189453, "tests_passed": true, "error": null}
