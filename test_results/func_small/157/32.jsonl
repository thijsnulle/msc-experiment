{"code": "try:\n        rows, cols = np.shape(data)\n        if rows < 2 or cols < 2:\n            raise ValueError(\"Input data must be a 2D array.\")\n        cols_names = []\n        for i in range(cols):\n            cols_names.append(str(i))\n\n        df = pd.DataFrame(data, columns=cols_names)\n        df['Average'] = df.mean(axis=1)\n        ax = sns.heatmap(df.corr(), cmap='RdYlGn', cbar=False)\n        return df, ax\n\n    except TypeError as e:\n        raise TypeError(\"Input data must be a 2D array.\")\n    except ValueError as e:\n        raise ValueError(\"Input data must be a 2D array.\")", "compilation_passed": true, "time": 0.06197977066040039, "tests_passed": true, "error": null}
{"code": "# Check if input data is a 2D array\n    if not isinstance(data, np.ndarray) or data.ndim != 2:\n        raise ValueError(\"Input data is not a 2D array.\")\n\n    # Check if the input data contains non-numeric data\n    if data.dtype.char not in 'fdFD':\n        raise ValueError(\"Input data contains non-numeric data.\")\n\n    # Calculate the mean across each row\n    avg = data.mean(axis=1)\n    # Add the 'Average' column to the dataframe\n    data_df = pd.DataFrame(data, columns=['Feature ' + str(i) for i in range(data.shape[1])] + ['Average'])\n    data_df['Average'] = avg\n\n    # Visualize the correlation matrix as a heatmap\n    sns.set(rc={\"figure.figsize\": (15, 15)})\n    sns.heatmap(data_df.corr(), annot=True)\n    # The heatmap shows the correlation between the average across the rows, which is", "compilation_passed": true, "time": 0.001135110855102539, "tests_passed": false, "error": "ValueError"}
{"code": "# Checking if data is a 2D numpy array.\n    if isinstance(data, np.ndarray) and data.ndim == 2:\n        # Checking if data has only numeric values.\n        try:\n            data = pd.DataFrame(data, index=range(data.shape[0]))\n        except ValueError:\n            raise ValueError(\"Input data must only contain numeric values.\")\n    # Checking if data has only numeric values.\n    if isinstance(data, np.ndarray) and data.ndim == 2:\n        # Calculate the mean of each row.\n        data['Average'] = data.mean(axis=1)\n    else:\n        raise ValueError(\"Input data must be a 2D array.\")\n    # Create a Seaborn heatmap.\n    _, ax = plt.subplots(figsize=(15, 15))\n    ax.set_title(\"Correlation Matrix\")\n    sns.heatmap(data.corr(), vmin=-1, vmax=1, annot=True, cmap=\"RdBu\",", "compilation_passed": false, "time": 0.00022292137145996094, "tests_passed": false, "error": "SyntaxError"}
{"code": "try:\n        # Ensure that the input data is a 2D array and contains only numeric data.\n        df = pd.DataFrame(data)\n        if not (df.ndim == 2 and df.apply(pd.api.types.is_numeric_dtype).all()):\n            raise ValueError(\"The data must be a 2D array with only numeric data.\")\n        else:\n            # Calculate the average of each row and create a new column 'Average'.\n            df['Average'] = df.apply(lambda row: np.mean(row), axis=1)\n\n        # Create a heatmap to visualize the correlations.\n        sns.heatmap(df.corr(), annot=True, cmap='seismic', fmt='.2f', linewidths=0.5)\n        return df, plt.gcf()\n\n    except:\n        raise ValueError(\"Invalid input.\")", "compilation_passed": true, "time": 0.09829306602478027, "tests_passed": true, "error": null}
{"code": "# Check if the input data is valid\n    if data.shape != (2, len(data[0])) or not np.array([isinstance(d, (int, float)) for d in data.flat]).all():\n        raise ValueError(\"Invalid input data. Data must be a 2D numpy array of integers or floats.\")\n\n    # Calculate the average value across each row in the data\n    avg = np.mean(data, axis=0)\n\n    # Create a DataFrame with the new column\n    df = pd.DataFrame(data)\n    df[\"Average\"] = avg\n\n    # Create a heatmap of the correlation matrix\n    fig, ax = plt.subplots()\n    ax.set(xticklabels=[], yticklabels=[], xtickcolor=\"white\", ytickcolor=\"white\", title=\"Correlation Matrix\",\n           xlabel=\"Row\", ylabel=\"Row\")\n    ax.grid(False)\n    sns.heatmap(df.corr(), cmap=\"RdBu\", annot=True, c", "compilation_passed": false, "time": 0.00026226043701171875, "tests_passed": false, "error": "SyntaxError"}
{"code": "try:\n        if data.ndim != 2:\n            raise ValueError(\"Data must be a 2D array.\")\n\n        for row in data:\n            if not all(isinstance(cell, (int, float)) for cell in row):\n                raise ValueError(\"Data must contain only numeric data.\")\n\n    except Exception as e:\n        raise ValueError(f\"Error: {str(e)}\") from None\n\n    df = pd.DataFrame(data).mean(axis=1, numeric_only=True)\n    df.loc['Average'] = df.mean()\n\n    with plt.style.context('seaborn'):\n        return df, plt.subplot(111)", "compilation_passed": true, "time": 0.001165151596069336, "tests_passed": false, "error": "ValueError"}
{"code": "# Check if the input is a 2D array\n    if data.ndim != 2:\n        raise ValueError(\"Input data is not a 2D array.\")\n\n    # Convert the data into a pandas DataFrame\n    df = pd.DataFrame(data)\n\n    # Calculate the column-wise mean of each row\n    df['Average'] = df.mean(axis=1)\n\n    # Create a heatmap using Seaborn\n    sns.heatmap(df, cbar=False)\n\n    # Return the DataFrame and Axes objects\n    return df, plt.gca()", "compilation_passed": true, "time": 0.2885901927947998, "tests_passed": true, "error": null}
{"code": "try:\n        df = pd.DataFrame(data)\n    except Exception:\n        raise ValueError('Data must be a 2D array')\n    df = df.apply(lambda x: x.mean())\n    df.columns = ['Average']\n    return df, sns.heatmap(df.corr(), cmap='RdYlGn')", "compilation_passed": true, "time": 0.0014579296112060547, "tests_passed": false, "error": "TypeError"}
{"code": "try:\n        df = pd.DataFrame(data)\n\n        if df.dtypes.dtype != 'float64':\n            raise ValueError(f\"Data must be numeric, but got dtypes {df.dtypes}\")\n\n        avg = df.mean(axis=1)\n        df['Average'] = avg\n\n        return df, sns.heatmap(avg)\n\n    except TypeError as e:\n        raise ValueError(f\"Data must be 2D array, but got {type(data)}\")", "compilation_passed": true, "time": 0.0011630058288574219, "tests_passed": false, "error": "dtype"}
{"code": "# check if data is a numpy array with 2 dimensions\n    if len(data.shape) != 2:\n        raise ValueError(\"Data must be a 2D array.\")\n\n    # check if data contains non-numeric values\n    if np.any(np.issubclass_(data.dtype.type, np.bool_)):\n        raise ValueError(\"Data must contain numeric values.\")\n\n    # compute the average of each row\n    mean = data.mean(axis=1)\n    df = pd.DataFrame(data, columns=['Feature'])\n    df[\"Average\"] = mean\n    df = df.rename(index={0: \"Row 1\", 1: \"Row 2\"})\n\n    # visualize the correlation matrix as a heatmap\n    sns.heatmap(df.corr(), annot=True, cmap=\"RdYlGn\", square=True)\n    return df, sns.axes_subplot(plot_type='heatmap')", "compilation_passed": true, "time": 0.0012269020080566406, "tests_passed": false, "error": "ValueError"}
{"code": "# Check if the input is a 2D array\n    if len(data.shape) != 2:\n        raise ValueError(\"The input is not a 2D array\")\n\n    # Check if the input contains non-numeric data\n    if np.issubdtype(data.dtype, np.number):\n        # Calculate the mean for each row\n        means = data.mean(axis=1)\n\n        # Calculate the correlation matrix\n        corr = np.corrcoef(data, rowvar=0, colvar=None)\n\n        # Create a DataFrame with the 'Average' column\n        df = pd.DataFrame({'Average': means})\n\n        # Plot the correlation matrix as a heatmap\n        f, ax = plt.subplots(figsize=(8, 8))\n        sns.heatmap(corr, ax=ax, cmap='RdBu', annot=False)\n        return df, ax\n\n    raise ValueError(\"The input data contains non-numeric data\")", "compilation_passed": true, "time": 0.0008821487426757812, "tests_passed": false, "error": "TypeError"}
{"code": "try:\n        rows, columns = data.shape\n        if rows != 2 or columns < 3:\n            raise ValueError\n\n        for row in data:\n            for value in row:\n                if not np.issubdtype(type(value), (int, float)):\n                    raise ValueError\n    except (ValueError, TypeError):\n        raise ValueError(\"Input data must be a 2D numpy array containing only numerical values.\")\n\n    df = pd.DataFrame(data)\n    df.columns = [\"Feature\", \"Average\"]\n\n    mean_values = df.groupby(\"Feature\").agg({\"Average\": np.mean}).reset_index()\n    df = pd.merge(df, mean_values, on=\"Feature\")\n\n    mean_values.to_csv(\"mean_values.csv\", index=False)\n\n    df = df.rename(columns={\"Feature\": \"Average\"})\n    df[\"Average\"] = df[\"Average\"].apply(float)\n\n    mean_values[\"Average\"", "compilation_passed": false, "time": 0.0002532005310058594, "tests_passed": false, "error": "SyntaxError"}
{"code": "try:\n        # Check if data is a 2D array\n        if len(data.shape) != 2:\n            raise ValueError(\"The input data should be a 2D array.\")\n\n        # Check for non-numeric data\n        if not data.dtype.isnumeric():\n            raise ValueError(\"The input data should only contain numeric values.\")\n\n        # Calculate the average of each row and add it to the dataframe\n        df = pd.DataFrame(data).mean(axis=1)\n        df.insert(0, \"Average\", df)\n\n        # Plot the correlation matrix\n        sns.heatmap(data, annot=True, cbar=False, cmap='Blues')\n        plt.title('Correlation Matrix')\n        plt.show()\n\n        # Return the dataframe and the axis object\n        return df, plt.gca()\n\n    except ValueError as e:\n        print(e)", "compilation_passed": true, "time": 0.0008609294891357422, "tests_passed": false, "error": "AttributeError"}
{"code": "# Check if the input data is valid\n    if not isinstance(data, np.ndarray) or len(data.shape) != 2 or data.dtype.char not in np.typecodes['AllFloat']:\n        raise ValueError(\"Invalid input data\")\n\n    # Calculate the average value for each row\n    mean_data = np.mean(data, axis=1)\n\n    # Create a pandas DataFrame\n    df = pd.DataFrame(data)\n    df.columns = [\"Feature1\", \"Feature2\", \"Feature3\", \"Feature4\", \"Feature5\", \"Feature6\", \"Feature7\", \"Feature8\"]\n    df[\"Average\"] = mean_data\n\n    # Create a matplotlib Axes\n    fig, ax = plt.subplots()\n    sns.heatmap(df[\"Average\"], ax=ax, cbar_position=\"right\", cbar_size=0.1, linewidths=0, annot=True,\n                fmt=\".2f\", cmap='RdBu_r', square=", "compilation_passed": false, "time": 0.00022602081298828125, "tests_passed": false, "error": "SyntaxError"}
{"code": "if data.ndim != 2 or data.dtype.name not in [\"int32\", \"int64\", \"float64\", \"uint32\", \"uint64\"]:\n        raise ValueError(\"Data must be a 2D numpy array with numeric values.\")\n\n    df = pd.DataFrame(data)\n    df[\"Average\"] = df.mean(axis=1)\n\n    if \"Average\" in df.columns:\n        return df, None\n    else:\n        return df, ax", "compilation_passed": true, "time": 0.032430171966552734, "tests_passed": true, "error": null}
{"code": "# Check if the input data is valid\n    if data.ndim != 2:\n        raise ValueError(\"Input data must be a 2D array.\")\n\n    if (data.dtype != np.int).any() or (data.dtype != np.float).any():\n        raise ValueError(\"Input data must only contain numerical values.\")\n\n    # Calculate the mean and append to the original array\n    result = data.copy()\n    result[:] = np.mean(data, axis=1)\n    return pd.DataFrame(data=result), sns.heatmap(data=data, ax=ax)", "compilation_passed": true, "time": 0.0018229484558105469, "tests_passed": false, "error": "    https"}
{"code": "try:\n        if data.shape[0] != data.shape[1]:\n            raise ValueError(\"The data must be a square matrix.\")\n\n        # Check if the data is numeric\n        if not pd.api.types.is_numeric_dtype(data):\n            raise ValueError(\"The data must contain only numeric values.\")\n\n        # Calculate the average of each row\n        avg_df = data.mean(axis=1).reset_index(name='Average')\n\n        # Plot the correlation matrix as a heatmap\n        sns.heatmap(pd.DataFrame(pd.corr(avg_df, data)))\n        sns.set()\n\n        return avg_df, plt.gca()\n    except:\n        raise ValueError(\"Invalid data\")", "compilation_passed": true, "time": 0.0010170936584472656, "tests_passed": false, "error": "ValueError"}
{"code": "data = np.array(data)\n    if data.ndim != 2:\n        raise ValueError(\"Expected a 2D array\")\n\n    for i in data:\n        if not np.issubdtype(type(i), np.number):\n            raise ValueError(\"Array must be numeric\")\n\n    mean_rows = np.mean(data, axis=1)\n\n    df = pd.DataFrame(mean_rows, columns=['Average'])\n\n    return df, sns.heatmap(data, cmap='Blues')", "compilation_passed": true, "time": 0.0008399486541748047, "tests_passed": false, "error": "ValueError"}
{"code": "if len(np.shape(data)) != 2:\n        raise ValueError('The data should be a 2D array.')\n\n    if data.dtype != 'float64':\n        raise ValueError('The data should contain only float numbers.')\n\n    data_df = pd.DataFrame(data)\n    data_df['Average'] = data_df.mean(axis=1)\n\n    fig, ax = plt.subplots()\n    sns.heatmap(data_df, ax=ax, annot=True, cbar=False, fmt='')\n\n    return data_df, ax", "compilation_passed": true, "time": 0.0008218288421630859, "tests_passed": false, "error": "ValueError"}
{"code": "if data.ndim != 2:\n        raise ValueError(\"Input data must be a 2D array.\")\n    try:\n        data = data.astype('float')\n    except:\n        raise ValueError(\"Input data must contain numeric values.\")\n\n    df = pd.DataFrame(data).mean(axis=1)\n    df.columns = ['Average']\n    fig, ax = plt.subplots(figsize=(16, 7))\n    sns.heatmap(data, cmap='RdYlBu', annot=True, fmt='.2f', ax=ax, vmax=8, vmin=0)\n    return df, ax", "compilation_passed": true, "time": 0.02565908432006836, "tests_passed": false, "error": "KeyError"}
{"code": "if data.ndim != 2 or not np.issubdtype(data.dtype, np.number):\n        raise ValueError(\"The input data must be a 2D array containing numbers\")\n    mean = np.nanmean(data, axis=1)\n    df = pd.DataFrame(mean, index=data.index, columns=['Average'])\n    ax = sns.heatmap(data, cmap='Blues', cbar_kws={'label': 'Correlation'}, cbar=False, square=True, annot=False)\n    return df, ax", "compilation_passed": true, "time": 0.0010609626770019531, "tests_passed": false, "error": "AttributeError"}
{"code": "try:\n        if len(data.shape) != 2:\n            raise ValueError(\"The input data is not a 2D array.\")\n        if data.dtype.kind not in 'biufc':\n            raise ValueError(\"The input data contains non-numeric data.\")\n\n        # Calculate the average of each row\n        df = pd.DataFrame(data).apply(lambda row: row.mean())\n        df['Average'] = df.mean(axis=1)\n\n        # Create the heatmap and plot\n        ax = sns.heatmap(df, xticklabels=False, yticklabels=False, annot=True)\n    except (AttributeError, ValueError):\n        raise ValueError(\"The input data is not valid for the task function.\")", "compilation_passed": true, "time": 0.0014851093292236328, "tests_passed": false, "error": "ValueError"}
{"code": "data = pd.DataFrame(data)\n    if data.ndim != 2 or data.dtypes.isin(['object', 'bool', 'category']).any().any():\n        raise ValueError(\"The input data must be a 2D array of numeric values.\")\n    mean = np.mean(data, axis=1)\n    data['Average'] = mean\n    df = data.groupby(by='Average').first()\n    df.set_index('Average', inplace=True)\n    ax = sns.heatmap(df.corr().T, cmap='RdYlGn', annot=True, vmin=-1, vmax=1, square=True)\n    return df, ax", "compilation_passed": true, "time": 0.0033311843872070312, "tests_passed": false, "error": "KeyError"}
{"code": "if len(data.shape) != 2 or (data.ndim > 2 and not all([item.is_numeric() for item in data.flat])):\n        raise ValueError(\"Input data must be 2D numpy array with only numeric values.\")\n\n    mean_column = pd.Series(data.mean(axis=1))\n    data = pd.DataFrame({'Average': mean_column, *data.columns})\n\n    fig, ax = plt.subplots(figsize=(8, 8))\n\n    sns.heatmap(data.corr(), vmax=1.0, vmin=-1.0, linewidths=0.25, cmap='RdYlGn', square=True, ax=ax)\n\n    return (data, ax)", "compilation_passed": false, "time": 0.00015211105346679688, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not isinstance(data, np.ndarray) or data.ndim != 2:\n        raise ValueError(\"The input data must be a 2D numpy array.\")\n    data = pd.DataFrame(data)\n    data['Average'] = data.mean(axis=1)\n    ax = sns.heatmap(data, annot=True, cmap='coolwarm', fmt='')\n    return (data, ax)", "compilation_passed": true, "time": 0.07816600799560547, "tests_passed": true, "error": null}
{"code": "# Check if the input is a 2D array\n    if data.ndim != 2:\n        raise ValueError(\"The input must be a 2D array\")\n\n    # Check for non-numeric data and raise an error if found\n    if not np.issubdtype(data.dtype, np.number):\n        raise ValueError(\"The input must contain only numeric data\")\n\n    # Calculate the mean of each row\n    data_mean = np.mean(data, axis=1)\n\n    # Create a DataFrame with a 'Average' column and the mean values\n    df = pd.DataFrame({\"Average\": data_mean})\n\n    # Create a matplotlib Axes object and plot the heatmap of the correlations\n    fig, ax = plt.subplots()\n    sns.heatmap(df.corr(), annot=True, ax=ax)\n\n    return df, ax", "compilation_passed": true, "time": 0.06526374816894531, "tests_passed": true, "error": null}
{"code": "# Check if the input data is a 2D array and contains only numeric data\n    if isinstance(data, np.ndarray) and data.ndim == 2 and np.issubdtype(data.dtype, np.number):\n        # Calculate the mean across each row\n        avg = data.mean(axis=1)\n\n        # Create a DataFrame with the 'Average' column\n        df = pd.DataFrame(avg, columns=['Average'])\n\n        # Create a pair grid and plot the heatmap\n        g = sns.pairplot(df, hue=\"Average\", palette=\"Reds_r\")\n        return df, g.ax_heatmap\n\n    else:\n        raise ValueError(\"Input data is not valid!\")", "compilation_passed": true, "time": 0.0022907257080078125, "tests_passed": false, "error": "ValueError"}
{"code": "# Check if the input data is a 2D array\n    if not isinstance(data, np.ndarray):\n        raise ValueError(\"The data must be a 2D numpy array.\")\n\n    # Check if the data is all numeric\n    if data.dtype.kind not in \"iu\":\n        raise ValueError(\"The data must be a numpy array of numeric data.\")\n\n    # Get the average of each row\n    data = data.mean(axis=1)\n\n    # Create a DataFrame with an 'Average' column\n    df = pd.DataFrame(\n        {\"Average\": pd.Series(data, name=\"Average\")}\n    )\n\n    # Create a heatmap of the correlation matrix\n    sns.heatmap(df.corr(), cmap=\"coolwarm\", annot=True, fmt=\".2f\")\n\n    # Return the DataFrame and matplotlib Axes objects\n    return df, plt.gcf().axes[0]", "compilation_passed": true, "time": 0.06513118743896484, "tests_passed": true, "error": null}
{"code": "# Check if the input data is a 2D array or not\n    if not isinstance(data, np.ndarray) or data.ndim != 2:\n        raise ValueError(\"The input data must be a 2D array.\")\n\n    # Check for non-numeric values in the data array\n    if not np.issubdtype(data.dtype, np.number):\n        raise ValueError(\"The input data contains non-numeric values.\")\n\n    # Calculate the average value for each row\n    mean_rows = [data[i].mean() for i in range(len(data))]\n\n    # Create a pandas DataFrame with the averaged values and an 'Average' column\n    df = pd.DataFrame(mean_rows, columns=['Average'])\n\n    # Plot a heatmap of the correlations using Seaborn\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(df.corr(), vmin=-1, vmax=1, cmap='RdYlGn', annot=True, square=", "compilation_passed": false, "time": 0.00026798248291015625, "tests_passed": false, "error": "SyntaxError"}
{"code": "# check input data type\n    if data.ndim != 2:\n        raise ValueError('Data must be a 2D array')\n\n    # calculate the mean across each row\n    mean_by_row = data.mean(axis=1)\n    df = pd.DataFrame(mean_by_row, columns=['Average'])\n    sns.heatmap(df.corr(), cmap='RdYlGn')\n    ax = plt.gca()\n    return df, ax", "compilation_passed": true, "time": 0.06403183937072754, "tests_passed": true, "error": null}
