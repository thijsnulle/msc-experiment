{"code": "# Use glob to get a list of script files\n    script_list = glob.glob(os.path.join(test_dir, \"*.py\"))\n    results = {}\n\n    # Loop through the list of script files\n    for script in script_list:\n        start_time = time.time()\n        # Run the Python file and capture the output\n        try:\n            subprocess.run([\"python3\", script], check=True)\n        except subprocess.CalledProcessError as e:\n            print(\"Error executing\", script, e.cmd)\n\n        end_time = time.time()\n        results[os.path.basename(script)] = end_time - start_time\n    return results", "compilation_passed": true, "time": 0.0009751319885253906, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "start = time.time()\n\n    with subprocess.Popen(\n        ['python', '-i'], stdout=subprocess.PIPE, stderr=subprocess.PIPE,\n        stdin=subprocess.PIPE, cwd=test_dir\n    ) as proc:\n        output, _ = proc.communicate()\n    end = time.time()\n\n    print(output)\n\n    script_dir = os.path.dirname(os.path.realpath(__file__))\n\n    script_files = glob.glob(\n        os.path.join(script_dir, \"*.py\")\n    )\n\n    result = {}\n    for script_file in script_files:\n        result[script_file] = round(end - start, 7)\n    return result", "compilation_passed": true, "time": 0.001032114028930664, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "results = {}\n    for file in glob.glob(f\"{test_dir}/*.py\"):\n        print(file)\n        start_time = time.time()\n        proc = subprocess.Popen([\"python\", file], shell=False, stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        out, err = proc.communicate()\n        elapsed_time = time.time() - start_time\n        results[os.path.basename(file)] = elapsed_time\n        print(f\"Processed {file} in {elapsed_time} seconds\")\n    return results", "compilation_passed": true, "time": 0.0009999275207519531, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Create an empty dictionary to store the results\n    results = {}\n\n    # Iterate through all Python code files in the directory\n    for filename in glob.glob(os.path.join(test_dir, \"*.py\")):\n        # Execute the code in a subprocess and capture its output\n        start_time = time.perf_counter()\n        with subprocess.Popen([sys.executable, filename], stdout=subprocess.PIPE, stderr=subprocess.PIPE) as process:\n            stdout, stderr = process.communicate()\n            results[filename] = (time.perf_counter() - start_time) * 1000  # Convert to milliseconds\n\n    return results", "compilation_passed": true, "time": 0.0009670257568359375, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Get all Python script files in the specified directory\n    script_list = [script for script in glob.glob(os.path.join(test_dir, \"*.py\"))]\n\n    # Execute each script and return the execution time\n    result = {}\n    for script in script_list:\n        start = time.time()\n        subprocess.check_call([sys.executable, script])\n        result[script] = time.time() - start\n\n    return result", "compilation_passed": true, "time": 0.0010302066802978516, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "script_path = test_dir\n    times = {}\n    for script_name in glob.glob(os.path.join(script_path, '*.py')):\n        print(\"Executing: \", script_name)\n        start_time = time.time()\n        subprocess.run(['python', script_name])\n        end_time = time.time()\n        execution_time = end_time - start_time\n        times[os.path.basename(script_name)] = execution_time\n\n    return times", "compilation_passed": true, "time": 0.0009322166442871094, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "script_path = test_dir\n    result = {}\n    if os.path.isdir(test_dir):\n        for file in glob.glob(os.path.join(test_dir, \"*.py\")):\n            start_time = time.time()\n            subprocess.check_output(\"python3 {}\".format(file), shell=True)\n            end_time = time.time()\n            result[os.path.basename(file)] = (end_time - start_time)\n        return result\n    else:\n        raise Exception(\"Invalid input: not a directory\")", "compilation_passed": true, "time": 0.0009407997131347656, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "script_paths = glob.glob(\"{}/*\".format(test_dir))\n    scripts = []\n    times = {}\n    for path in script_paths:\n        script_name = os.path.basename(path)\n        script = (path, script_name)\n        scripts.append(script)\n\n    for script_path, script_name in scripts:\n        print(\"Running {}...\".format(script_name))\n        start_time = time.perf_counter()\n        proc = subprocess.Popen([sys.executable, script_path],\n                                stdout=subprocess.PIPE,\n                                stderr=subprocess.PIPE,\n                                shell=False,\n                                encoding='utf-8')\n        proc.wait()\n        output, error = proc.communicate()\n        print(\"Output: {}\".format(output.strip()))\n        print(\"Error: {}\".format(error.strip()))\n        times[script_name] = time.perf_counter() - start_time\n    return times", "compilation_passed": true, "time": 0.0010409355163574219, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "scripts = glob.glob(os.path.join(test_dir, \"*.py\"))\n\n    script_dict = {}\n    for script in scripts:\n        start_time = time.time()\n        subprocess.run(f\"python {script}\")\n        end_time = time.time()\n        script_dict[script] = (end_time - start_time)\n    return script_dict", "compilation_passed": true, "time": 0.0009610652923583984, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Extract all Python files from the test directory\n    all_script_paths = glob.glob(\"{}/*.py\".format(test_dir))\n\n    # Execute all Python scripts and collect their execution times\n    script_execution_time = {}\n    for script_path in all_script_paths:\n        start_time = time.time()\n        subprocess.check_call([\"python\", script_path])\n        end_time = time.time()\n        script_execution_time[script_path.split(\"/\")[-1]] = end_time - start_time\n    return script_execution_time", "compilation_passed": true, "time": 0.0011048316955566406, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "execution_times = {}\n    for file in glob.glob(os.path.join(test_dir, \"*.py\")):\n        if os.path.isfile(file):\n            start = time.perf_counter()\n            subprocess.run([\"python3\", file])\n            end = time.perf_counter()\n            execution_times[os.path.basename(file)[:-3]] = end - start\n    return execution_times", "compilation_passed": true, "time": 0.00102996826171875, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# print(\"test_dir:\", test_dir)\n    # print(test_dir.split(\"/\")[-1].split(\".\")[0])\n    script_dir = test_dir.split(\"/\")[-1].split(\".\")[0]\n    print(\"script_dir\", script_dir)\n    print(\"script_path\", test_dir)\n    all_times = {}\n    all_times.update(\n        {\n            os.path.basename(filename).split(\".\")[0]: time.perf_counter()\n            for filename in glob.glob(test_dir + \"/*.py\")\n        }\n    )\n    print(all_times)\n    return all_times", "compilation_passed": true, "time": 0.0009698867797851562, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "result_dict = {}\n    for code_dir in glob.iglob(os.path.join(test_dir, '*')):\n        script_names = glob.glob(os.path.join(code_dir, \"*.py\"))\n        if os.path.isdir(code_dir):\n            print(f\"Running all Python scripts in {code_dir}\")\n            for script in script_names:\n                result_dict[os.path.basename(script)] = 0.0\n\n            for script in script_names:\n                process = subprocess.Popen([script], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n                time.sleep(0.5)\n                process.kill()\n                stdout, stderr = process.communicate()\n                print(f\"Finished running {script}\")\n                if len(stderr) == 0:\n                    result_dict[os.path.basename(script)] = time.perf_counter() - start_time\n                else:\n                    result_dict[os.path.basename", "compilation_passed": false, "time": 0.00024819374084472656, "tests_passed": false, "error": "SyntaxError"}
{"code": "result = {}\n    for subdir, dirs, files in os.walk(test_dir):\n        for file in files:\n            if file.endswith(\".py\"):\n                start = time.perf_counter()\n                script_path = os.path.join(subdir, file)\n                print(script_path)\n                try:\n                    # print(glob.glob(\"**/*.py\", recursive=True))\n                    process = subprocess.Popen([script_path, '--do-not-start-gui', '--do-not-save-settings',\n                                               '--do-not-save-results', '--do-not-start-profiler'])\n                    process.wait()\n                except Exception as e:\n                    print(\"ERROR: \", e)\n                finally:\n                    stop = time.perf_counter()\n                    result[file] = stop-start\n    return result", "compilation_passed": true, "time": 0.0010199546813964844, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Convert test_dir to a list of files matching *.py pattern\n    py_files = glob.glob(os.path.join(os.getcwd(), test_dir, '*.py'))\n\n    # Create a dict to hold the execution times\n    execution_times = {}\n\n    # Run the Python codes in the test directory\n    for py_file in py_files:\n        start_time = time.time()\n        subprocess.run(['python', py_file],\n                        stdout=subprocess.DEVNULL,\n                        stderr=subprocess.DEVNULL)\n        end_time = time.time()\n        execution_time = end_time - start_time\n        execution_times[os.path.basename(py_file)] = execution_time\n\n    return execution_times", "compilation_passed": true, "time": 0.0009660720825195312, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if not os.path.isdir(test_dir):\n        raise FileNotFoundError(f\"{test_dir} is not a directory.\")\n\n    execution_times = {}\n\n    for file_name in glob.glob(f\"{test_dir}/*.py\"):\n        start_time = time.time()\n        try:\n            subprocess.check_call(f\"python {file_name}\", shell=True)\n        except subprocess.CalledProcessError as e:\n            print(\"Error executing\", file_name)\n        finally:\n            execution_times[os.path.basename(file_name)] = (\n                time.time() - start_time\n            )\n\n    return execution_times", "compilation_passed": true, "time": 0.0009889602661132812, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Initialize a dictionary to hold the execution times of the script.\n    times = {}\n\n    # Use the glob.glob() function to find all Python script files in the directory.\n    files = glob.glob(os.path.join(test_dir, '*.py'))\n\n    # For each Python script file, execute it in a subprocess.\n    for f in files:\n        try:\n            # Measure the execution time of the script.\n            start = time.time()\n            # subprocess.call([\"python\", f])\n            # subprocess.Popen([\"python\", f], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)\n            subprocess.check_output([\"python\", f])\n            end = time.time()\n\n            # Store the execution time as the value of the script name in the dictionary.\n            times[os.path.basename(f)] = (end - start)\n        except FileNotFoundError:\n            pass\n    return times", "compilation_passed": true, "time": 0.0009667873382568359, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "execution_times = {}\n\n    script_files = glob.glob(f'{test_dir}/*.py')\n\n    for script_file in script_files:\n        start_time = time.time()\n        print(f'Executing {script_file}')\n        subprocess.call([\"python3\", script_file])\n        end_time = time.time()\n        execution_times[os.path.basename(script_file)] = end_time - start_time\n    return execution_times", "compilation_passed": true, "time": 0.001004934310913086, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "results = {}\n    for file_name in os.listdir(test_dir):\n        if file_name.endswith(\".py\"):\n            script_path = os.path.join(test_dir, file_name)\n            process = subprocess.Popen(\n                [sys.executable, script_path],\n                stdout=subprocess.PIPE,\n                stderr=subprocess.STDOUT,\n                encoding=\"utf-8\",\n            )\n            stdout, stderr = process.communicate()\n            execution_time = time.perf_counter()\n            results[file_name] = execution_time\n\n    return results", "compilation_passed": true, "time": 0.0009448528289794922, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "print(test_dir)\n    script_path = glob.glob(f\"{test_dir}/*.py\")\n    print(script_path)\n    start_time = time.perf_counter()\n    result = {}\n    for script_path in script_path:\n        with open(script_path, \"r\") as file:\n            script = file.read()\n        try:\n            compiled = compile(script, script_path, 'exec')\n            result[os.path.basename(script_path)] = time.perf_counter() - start_time\n            print(result[os.path.basename(script_path)])\n            subprocess.run([sys.executable, '-i', '-u', script_path], env={\"PYTHONSTARTUP\": os.path.abspath(sys.__file__)})\n        except:\n            result[os.path.basename(script_path)] = time.perf_counter() - start_time\n            print(result[os.path.basename(script_path)])\n            pass\n        # subprocess", "compilation_passed": true, "time": 0.0010471343994140625, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "print(\"Started task.\")\n\n    python_files = glob.glob(os.path.join(os.getcwd(), test_dir) + '/*.py')\n\n    task_times = {}\n    for script in python_files:\n        print(\"Executing: \", script)\n        task_times[script] = 0\n        start = time.time()\n        proc = subprocess.Popen(args=[script], stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n        output, error = proc.communicate()\n        task_times[script] = time.time() - start\n\n        # If an error occurs, print the error\n        if proc.returncode != 0:\n            print(f\"An error occurred while executing {script}:\\n{error}\")\n\n    print(\"Finished task.\")\n    print(task_times)\n    return task_times", "compilation_passed": true, "time": 0.001010894775390625, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "start = time.perf_counter()\n    os.chdir(test_dir)\n    result = {}\n    for script in glob.glob('*'):\n        if script.endswith('py'):\n            result[script] = subprocess.run([\"python\", script], capture_output=True,\n                                            timeout=None, shell=False, text=True).elapsed.seconds\n    print(\"{} execution time: {}s\".format(result, time.perf_counter() - start))\n    return result", "compilation_passed": true, "time": 0.0009610652923583984, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# Run all Python code in the specified directory\n    cmd = f'python {test_dir}/*.py'\n    start_time = time.time()\n    output = subprocess.check_output(cmd, shell=True)\n    elapsed_time = time.time() - start_time\n\n    # Extract the script names and execution times\n    script_names = []\n    script_execution_times = {}\n    for line in output.splitlines():\n        script_name = line.decode().strip().split()[0]\n        script_names.append(script_name)\n        script_execution_times[script_name] = elapsed_time\n\n    return script_execution_times", "compilation_passed": true, "time": 0.0009496212005615234, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if not os.path.isdir(test_dir):\n        print(f\"{test_dir} is not a directory\")\n        return {}\n\n    files = glob.glob(os.path.join(test_dir, '*.py'))\n\n    if not files:\n        print(f\"No Python files found in {test_dir}\")\n        return {}\n\n    # print(files)\n    exec_times = {}\n    for file in files:\n        exec_time = run_python_script(file, time_flag=True)\n        exec_times[os.path.basename(file)] = exec_time\n\n    return exec_times", "compilation_passed": true, "time": 0.0009868144989013672, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "start_time = time.perf_counter()\n    processes = []\n    for filename in glob.glob(f\"{test_dir}/*\"):\n        if os.path.isdir(filename):\n            continue\n        if filename.endswith('.py'):\n            print(f\"Running {filename}\")\n            process = subprocess.Popen([\n                sys.executable,\n                filename\n            ],\n            stdout=subprocess.PIPE,\n            stderr=subprocess.PIPE\n            )\n            processes.append(process)\n    for process in processes:\n        process.wait()\n    elapsed = time.perf_counter() - start_time\n    result = {\n        os.path.basename(filename).replace(\".py\", \"\"): elapsed\n        for filename in glob.glob(f\"{test_dir}/*\")\n        if os.path.isdir(filename) or filename.endswith('.py')}\n\n    return result", "compilation_passed": true, "time": 0.0010788440704345703, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "script_paths = glob.glob(os.path.join(test_dir, \"*.py\"))\n    result = {}\n    for path in script_paths:\n        script_name = os.path.basename(path)\n        # print(script_name)\n        start = time.perf_counter()\n        subprocess.call(\n            f\"python3 {path}\",\n            shell=True,\n        )\n        end = time.perf_counter()\n        time_elapsed = end - start\n        result[script_name] = time_elapsed\n        print(\n            f\"Execution time for script {script_name} is {time_elapsed} seconds\")\n    return result", "compilation_passed": true, "time": 0.0009908676147460938, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "with os.scandir(test_dir) as it:\n        for entry in it:\n            if entry.name.endswith(\".py\"):\n                with subprocess.Popen([sys.executable, entry.path], stdout=subprocess.PIPE, stderr=subprocess.PIPE) as proc:\n                    stdout, stderr = proc.communicate()\n\n                    # Useful when debugging with PDB\n                    if stdout:\n                        print(\"stdout:\", stdout)\n                    if stderr:\n                        print(\"stderr:\", stderr)\n\n                    if stderr:\n                        proc.kill()\n                        # stdout and stderr are both here because of communicate()\n                        proc.wait()\n                        print(\"Process terminated: \", proc.returncode)\n                        print(entry.name)\n                    else:\n                        print(entry.name, \"-\", time.time())\n                    time.sleep(0.5)\n                    if os.name == 'posix':\n                        os.kill", "compilation_passed": true, "time": 0.001062154769897461, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "all_codes = glob.glob(test_dir + \"/*.py\")\n    execution_times = {}\n    for code in all_codes:\n        print(\"Executing \", code, \"...\")\n        start_time = time.time()\n        try:\n            subprocess.check_call([\"python3\", code])\n        except subprocess.CalledProcessError as e:\n            print(\"Error occurred when executing\", code, \"\\nError details: \", e)\n        end_time = time.time()\n        execution_time = end_time - start_time\n        print(\"Execution time for \", code, \":\", execution_time)\n        execution_times[os.path.basename(code)] = execution_time\n    return execution_times", "compilation_passed": true, "time": 0.0009748935699462891, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "script_paths = glob.glob(os.path.join(test_dir, \"*.py\"))\n    scripts_times = {}\n    for script in script_paths:\n        print(\"running \", script)\n        start = time.perf_counter()\n        subprocess.call(['python', script])\n        end = time.perf_counter()\n        execution_time = end - start\n        scripts_times[script.split(\"/\")[-1]] = execution_time\n    return scripts_times", "compilation_passed": true, "time": 0.0009579658508300781, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "start = time.time()\n    output_dict = {}\n    script_path = glob.glob(os.path.join(test_dir, \"*.py\"))\n    for script in script_path:\n        process = subprocess.Popen(f'python {script} --dir_name=test --test_name=mix_files',\n                                   shell=True,\n                                   stdin=subprocess.PIPE,\n                                   stdout=subprocess.PIPE)\n        process.wait()\n        output_dict[script.split(\"/\")[-1]] = time.time() - start\n    return output_dict", "compilation_passed": true, "time": 0.0010039806365966797, "tests_passed": false, "error": "FileNotFoundError"}
