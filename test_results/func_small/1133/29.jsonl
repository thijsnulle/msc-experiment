{"code": "file_name = PREFIX + endpoint + \".json\"\n    response = requests.get(API_URL+endpoint)\n    if response.status_code != 200:\n        raise RuntimeError(f\"Error fetching data from {endpoint}.\")\n    with open(file_name, 'w') as f:\n        f.write(json.dumps(response.json()))\n    return file_name", "compilation_passed": true, "time": 0.003158092498779297, "tests_passed": true, "error": null}
{"code": "try:\n        response = requests.get(API_URL + endpoint, timeout=3)\n\n        if response.status_code != 200:\n            raise RuntimeError(\n                f\"Failed to retrieve data from API endpoint: {endpoint}\")\n\n        filename = f\"{PREFIX}{endpoint.split('/')[-1]}.json\"\n        with open(filename, 'w') as f:\n            f.write(json.dumps(response.json(), indent=4))\n\n        return filename\n\n    except json.decoder.JSONDecodeError as e:\n        raise RuntimeError(f\"Failed to parse data: {endpoint}\")", "compilation_passed": true, "time": 0.002972126007080078, "tests_passed": true, "error": null}
{"code": "try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = json.loads(response.content)\n        filename = PREFIX + endpoint + '.json'\n        with open(filename, 'w') as f:\n            json.dump(data, f)\n        return filename\n    except requests.RequestException as exc:\n        raise RuntimeError(f\"Error fetching data from API: {exc}\")\n    except json.decoder.JSONDecodeError as exc:\n        raise RuntimeError(f\"Error decoding JSON data: {exc}\")", "compilation_passed": true, "time": 0.001631021499633789, "tests_passed": false, "error": "TypeError"}
{"code": "filename = PREFIX + endpoint + '.json'\n\n    try:\n        response = requests.get(f\"{API_URL}{endpoint}\", timeout=5)\n        response.raise_for_status()\n        data = response.json()\n        with open(filename, 'w') as file:\n            json.dump(data, file, indent=4)\n    except requests.exceptions.RequestException:\n        raise RuntimeError(\"Error fetching data from the API.\")\n    except json.decoder.JSONDecodeError:\n        raise RuntimeError(\"Error writing data to the file.\")\n\n    return filename", "compilation_passed": true, "time": 0.00333404541015625, "tests_passed": true, "error": null}
{"code": "# Define a dictionary of headers and URL for the API call\n    headers = {'Authorization': f'token {API_KEY}'}\n    url = API_URL + endpoint\n\n    try:\n        # Call the API and get the JSON response\n        response = requests.get(url, headers=headers, timeout=10)\n        data = response.json()\n\n        # Save the JSON data as a file\n        with open(PREFIX + endpoint.replace(\"/\", \"_\") + \".json\", 'w') as f:\n            json.dump(data, f, indent=2)\n\n    except requests.RequestException as e:\n        raise RuntimeError(f\"Error retrieving data from {url}: {e}\")\n\n    except json.JSONDecodeError as e:\n        raise RuntimeError(f\"Error decoding JSON data from {url}: {e}\")\n\n    return PREFIX + endpoint.replace(\"/\", \"_\")", "compilation_passed": true, "time": 0.0014760494232177734, "tests_passed": false, "error": "NameError"}
{"code": "url = API_URL + endpoint\n\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n    except requests.RequestException as exc:\n        raise RuntimeError(f'There was a problem while fetching data from {url}: {exc}')\n\n    try:\n        with open(f'{PREFIX}{endpoint}.json', 'w', encoding='utf-8') as f:\n            f.write(response.text)\n        return f'{PREFIX}{endpoint}.json'\n    except FileNotFoundError:\n        raise RuntimeError(f\"Couldn't create the file {PREFIX}{endpoint}.json\")", "compilation_passed": true, "time": 0.0016210079193115234, "tests_passed": false, "error": "TypeError"}
{"code": "API_URL = API_URL + endpoint\n    try:\n        response = requests.get(API_URL)\n        if response.status_code != 200:\n            raise RuntimeError('An error occurred: {}.'.format(response.text))\n        response = response.json()\n        filename = PREFIX + endpoint + '.json'\n        with open(filename, 'w') as fp:\n            json.dump(response, fp, indent=4, ensure_ascii=False)\n        return filename\n    except RuntimeError as e:\n        print(e)\n        sys.exit(1)", "compilation_passed": true, "time": 0.0030820369720458984, "tests_passed": true, "error": null}
{"code": "try:\n        response = requests.get(f'{API_URL}{endpoint}')\n        response.raise_for_status()\n        json_data = response.json()\n        filename = PREFIX + endpoint + '.json'\n        with open(filename, 'w') as file:\n            json.dump(json_data, file, indent=4)\n        return filename\n    except Exception as e:\n        raise RuntimeError(f\"An error occurred while fetching data from the API: {str(e)}\")", "compilation_passed": true, "time": 0.003409147262573242, "tests_passed": true, "error": null}
{"code": "try:\n        resp = requests.get(API_URL + endpoint)\n        resp.raise_for_status()\n        data = resp.json()\n        with open(PREFIX + endpoint + '.json', 'w') as f:\n            json.dump(data, f, indent=4)\n        return PREFIX + endpoint + '.json'\n    except (requests.RequestException, ValueError) as e:\n        raise RuntimeError(f\"Error fetching data from {API_URL + endpoint}: {e}\")", "compilation_passed": true, "time": 0.00334930419921875, "tests_passed": true, "error": null}
{"code": "try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        filename = PREFIX + endpoint + '.json'\n        with open(filename, 'w') as file:\n            json.dump(response.json(), file)\n    except requests.exceptions.RequestException as exc:\n        raise RuntimeError(f\"Failed to retrieve data from the API: {exc}\")", "compilation_passed": true, "time": 0.0016448497772216797, "tests_passed": true, "error": null}
{"code": "API_URL = \"https://api.github.com/\"\n    endpoint = \"users\"\n    PREFIX = \"ME\"\n    data = requests.get(API_URL + endpoint).json()\n    try:\n        with open(f\"{PREFIX}{endpoint}.json\", \"w\") as f:\n            json.dump(data, f, indent=2)\n            f.close()\n    except Exception as e:\n        print(e)\n        raise RuntimeError(\"Error while writing to file.\")\n    return PREFIX + endpoint + \".json\"", "compilation_passed": true, "time": 0.0014758110046386719, "tests_passed": true, "error": null}
{"code": "try:\n        data = requests.get(API_URL + endpoint, timeout=5).json()\n        filename = PREFIX + endpoint.replace('/', '_') + '.json'\n        with open(filename, 'w') as file:\n            json.dump(data, file, indent=2)\n        return filename\n\n    except requests.exceptions.RequestException as error:\n        raise RuntimeError(f'There is an error fetching data from the API. Error: {error}')\n    except json.decoder.JSONDecodeError as error:\n        raise RuntimeError(f'There is an error decoding the JSON data. Error: {error}')", "compilation_passed": true, "time": 0.002914905548095703, "tests_passed": true, "error": null}
{"code": "url = API_URL + endpoint\n    response = requests.get(url)\n    if response.status_code != 200:\n        raise RuntimeError(f'Error fetching data from {url}')\n    data = response.json()\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as file:\n        json.dump(data, file)\n    return filename", "compilation_passed": true, "time": 0.0031659603118896484, "tests_passed": true, "error": null}
{"code": "# create a JSON dictionary representing the user data\n    user_data = {'id': '123456789'}\n\n    # convert the dictionary to a JSON string\n    user_json = json.dumps(user_data)\n\n    # construct the full API URL\n    url = API_URL + endpoint\n\n    # make a GET request to the API endpoint and receive the response\n    response = requests.get(url)\n\n    # check for errors in the response\n    if response.status_code == 200:\n\n        # extract the JSON data from the response\n        response_json = response.json()\n\n        # extract the 'id' field from the JSON response\n        id_number = response_json['id']\n\n        # build the output filename\n        output_filename = PREFIX + endpoint + str(id_number) + '.json'\n\n        # open the output file in write mode\n        try:\n            output_file = open(output_filename, 'w')\n        except Exception as e:\n            print(f'Error opening output file: {e}')\n            return\n", "compilation_passed": true, "time": 0.001489877700805664, "tests_passed": false, "error": "KeyError"}
{"code": "filename = PREFIX + endpoint.replace('/', '_') + '.json'\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        json_data = json.dumps(response.json())\n        with open(filename, 'w') as f:\n            f.write(json_data)\n    except requests.exceptions.RequestException as e:\n        print(e)\n        raise RuntimeError(e)\n\n    return filename", "compilation_passed": true, "time": 0.0035009384155273438, "tests_passed": true, "error": null}
{"code": "filename = f\"{PREFIX}{endpoint}.json\"\n\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        with open(filename, \"w\") as file:\n            json.dump(response.json(), file)\n    except requests.RequestException as e:\n        raise RuntimeError(str(e))\n\n    return filename", "compilation_passed": true, "time": 0.003351926803588867, "tests_passed": true, "error": null}
{"code": "try:\n        url = API_URL + endpoint\n        response = requests.get(url)\n        response.raise_for_status()\n        data = response.json()\n        filename = PREFIX + endpoint + '.json'\n        with open(filename, 'w', encoding='utf-8') as file:\n            json.dump(data, file)\n        return filename\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(e)", "compilation_passed": true, "time": 0.003368854522705078, "tests_passed": true, "error": null}
{"code": "# Create a dictionary object to store data\n    data = {}\n    # Fetch data from API\n    response = requests.get(f\"{API_URL}{endpoint}\")\n    # If there is an error fetching data from the API, raise a RuntimeError\n    if not response.ok:\n        raise RuntimeError\n\n    # Get the response in JSON format\n    data = json.loads(response.text)\n    # Write data to a file. The filename is generated by concatenating\n    # the prefix with the endpoint name, followed by '.json'.\n    filename = f\"{PREFIX}{endpoint}.json\"\n    with open(filename, \"w\") as file_handle:\n        json.dump(data, file_handle)\n    # Return the filename into which the JSON data was written\n    return filename", "compilation_passed": true, "time": 0.0015289783477783203, "tests_passed": false, "error": "TypeError"}
{"code": "url = API_URL + endpoint\n\n    try:\n        response = requests.get(url)\n        response.raise_for_status()\n        with open(f'{PREFIX}{endpoint}.json', 'w') as f:\n            json.dump(response.json(), f, indent=4)\n        return f'{PREFIX}{endpoint}.json'\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f'Error fetching data from API: {e}')\n    except json.decoder.JSONDecodeError as e:\n        raise RuntimeError(f'Error parsing data from API: {e}')", "compilation_passed": true, "time": 0.0034911632537841797, "tests_passed": true, "error": null}
{"code": "# Get the JSON data from the API endpoint\n    url = API_URL + endpoint\n    response = requests.get(url)\n\n    if response.status_code == 200:\n        data = response.json()\n        # Write JSON data to a file\n        filename = PREFIX + endpoint + '.json'\n        with open(filename, 'w') as file:\n            json.dump(data, file, indent=2)\n        return filename\n    else:\n        raise RuntimeError(f\"Error fetching data from {url}.\")", "compilation_passed": true, "time": 0.002969980239868164, "tests_passed": true, "error": null}
{"code": "response = requests.get(API_URL + endpoint)\n    if not response.ok:\n        raise RuntimeError(f'Error fetching data from API: {response.status_code}')\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as file:\n        json.dump(response.json(), file)\n    return filename", "compilation_passed": true, "time": 0.0030820369720458984, "tests_passed": true, "error": null}
{"code": "try:\n        url = API_URL + endpoint\n        response = requests.get(url)\n        response.raise_for_status()\n\n        # Get the JSON data from the response\n        data = response.json()\n\n        # Write the JSON data to a file\n        filename = PREFIX + endpoint + '.json'\n        with open(filename, 'w') as file:\n            json.dump(data, file, indent=2, ensure_ascii=False)\n\n        return filename\n\n    except (requests.RequestException, json.decoder.JSONDecodeError) as e:\n        raise RuntimeError(f\"Error fetching data from the API: {e}\")", "compilation_passed": true, "time": 0.0033969879150390625, "tests_passed": true, "error": null}
{"code": "filename = PREFIX + endpoint + '.json'\n    data = None\n    try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        data = json.loads(response.text)\n        with open(filename, 'w') as file:\n            json.dump(data, file)\n        print(filename)\n    except requests.exceptions.RequestException:\n        raise RuntimeError(\"Error fetching data from API\")\n    except ValueError as err:\n        print(f\"Error: {err}\")\n    return filename", "compilation_passed": true, "time": 0.001608133316040039, "tests_passed": false, "error": "TypeError"}
{"code": "try:\n        response = requests.get(f\"{API_URL}{endpoint}\")\n        response.raise_for_status()\n        filename = PREFIX + endpoint + '.json'\n        with open(filename, 'w') as file:\n            json.dump(response.json(), file, indent=4)\n    except requests.exceptions.RequestException as e:\n        raise RuntimeError(f\"Error fetching data from API: {e}\")\n    except json.decoder.JSONDecodeError as e:\n        raise RuntimeError(f\"Error decoding JSON data: {e}\")\n\n    return filename", "compilation_passed": true, "time": 0.0033721923828125, "tests_passed": true, "error": null}
{"code": "try:\n        response = requests.get(API_URL + endpoint)\n        response.raise_for_status()\n        json_data = json.dumps(response.json())\n        filename = PREFIX + endpoint.replace('/', '') + '.json'\n        with open(filename, 'w') as file:\n            file.write(json_data)\n    except (requests.RequestException, json.JSONDecodeError) as e:\n        raise RuntimeError(e)\n    return filename", "compilation_passed": true, "time": 0.003635883331298828, "tests_passed": true, "error": null}
{"code": "try:\n        url = API_URL + endpoint\n        response = requests.get(url, timeout=5)\n        response.raise_for_status()\n        data = response.json()\n        filename = PREFIX + endpoint + '.json'\n        with open(filename, 'w') as file:\n            json.dump(data, file, indent=4)\n        return filename\n    except Exception as e:\n        raise RuntimeError(e)", "compilation_passed": true, "time": 0.003643035888671875, "tests_passed": true, "error": null}
{"code": "filepath = PREFIX+endpoint+'.json'\n    try:\n        response = requests.get(API_URL+endpoint, allow_redirects=True)\n        response.raise_for_status()\n        with open(filepath, 'w') as file:\n            file.write(response.text)\n    except Exception as e:\n        raise RuntimeError(\"Error fetching data from API: {}\".format(e))\n    return filepath", "compilation_passed": true, "time": 0.0017609596252441406, "tests_passed": false, "error": "RuntimeError"}
{"code": "url = API_URL + endpoint\n    response = requests.get(url)\n    if response.status_code != 200:\n        raise RuntimeError(\"Unable to fetch data from the API\")\n    filename = PREFIX + endpoint + '.json'\n    with open(filename, 'w') as file:\n        json.dump(response.json(), file, indent=2)", "compilation_passed": true, "time": 0.001558065414428711, "tests_passed": true, "error": null}
{"code": "URL = API_URL + endpoint\n    headers = {'Accept': 'application/vnd.github.v3+json'}\n    try:\n        response = requests.get(URL, headers=headers)\n        response.raise_for_status()\n        filename = PREFIX + endpoint + '.json'\n        with open(filename, 'w') as file:\n            json.dump(response.json(), file, indent=2)\n        return filename\n    except requests.exceptions.RequestException as exc:\n        print(f\"Error while retrieving data from API: {exc}\")\n        raise RuntimeError from exc", "compilation_passed": true, "time": 0.003504037857055664, "tests_passed": true, "error": null}
{"code": "try:\n        res = requests.get(API_URL+endpoint)\n        res.raise_for_status()\n\n        filename = PREFIX + endpoint + '.json'\n\n        with open(filename, 'w') as f:\n            f.write(res.json())\n\n        return filename\n\n    except requests.exceptions.RequestException:\n        raise RuntimeError(\"Error fetching data from API or writing to file.\")", "compilation_passed": true, "time": 0.0016369819641113281, "tests_passed": false, "error": "TypeError"}
