{"code": "try:\n        with open(f'{log_dir}/{filename}', 'a') as file:\n            timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')\n            for key, value in metrics.items():\n                file.write(f'{key}={value}, {timestamp}\\n')\n            return True\n    except (OSError, ValueError) as e:\n        return False", "compilation_passed": true, "time": 0.0018079280853271484, "tests_passed": true, "error": null}
{"code": "if not os.path.isdir(log_dir):\n        os.mkdir(log_dir)\n    with open(os.path.join(log_dir, filename), 'a') as f:\n        timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n        for key, val in metrics.items():\n            f.write(f\"{timestamp} - {key} : {val} \\n\")\n    return True", "compilation_passed": true, "time": 0.0020580291748046875, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "log_file = os.path.join(log_dir, filename)\n    try:\n        with open(log_file, 'a') as f:\n            timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S') + ' - '\n            for metric, value in metrics.items():\n                f.write(timestamp + metric + ' = ' + str(value) + '\\n')\n        return True\n    except FileNotFoundError:\n        print('An error occurred: ' + str(log_file))\n        return False", "compilation_passed": true, "time": 0.0017168521881103516, "tests_passed": true, "error": null}
{"code": "if not os.path.isdir(log_dir):\n        return False\n    try:\n        now = datetime.now()\n        now_str = now.strftime('%Y%m%d%H%M%S')\n        logfile_path = os.path.join(log_dir, filename)\n        with open(logfile_path, 'a') as f:\n            f.write(\"%s\\n\" % \", \".join([\"%s=%s\" % (k, metrics[k]) for k in metrics]))\n    except Exception as err:\n        return False\n    return True", "compilation_passed": true, "time": 0.00150299072265625, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(os.path.join(log_dir, filename)):\n        with open(os.path.join(log_dir, filename), 'w') as f:\n            now = datetime.now()\n            f.write(f'At {now}: \\n')\n            for metric in metrics:\n                f.write(f' - {metric}: {metrics[metric]}\\n')\n            return True\n    return False", "compilation_passed": true, "time": 0.0015628337860107422, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(log_dir):\n        os.mkdir(log_dir)\n    log_path = os.path.join(log_dir, filename)\n\n    try:\n        # Create the log file if it doesn't already exist\n        if not os.path.exists(log_path):\n            with open(log_path, 'w') as f:\n                pass\n        # Write metrics to the log file\n        with open(log_path, 'a') as f:\n            for metric in metrics:\n                f.write(f\"{metric}: {metrics[metric]}{os.linesep}\")\n        return True\n    except FileNotFoundError as e:\n        print(e)\n        return False", "compilation_passed": true, "time": 0.0019047260284423828, "tests_passed": true, "error": null}
{"code": "try:\n        if os.path.exists(os.path.join(log_dir, filename)):\n            print('An error occurred: [Errno 2] No such file or directory:', os.path.join(log_dir, filename))\n            return False\n        else:\n            with open(os.path.join(log_dir, filename), 'a') as file:\n                timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n                for key, value in metrics.items():\n                    file.write(f'{timestamp} - {key} = {value}\\n')\n        return True\n    except Exception as e:\n        print(f'An error occurred: {e}')\n        return False", "compilation_passed": true, "time": 0.00152587890625, "tests_passed": true, "error": null}
{"code": "try:\n        # Create the directory if it doesn't exist\n        if not os.path.isdir(log_dir):\n            os.makedirs(log_dir)\n        # Write the metrics to the file\n        now = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n        log_file = os.path.join(log_dir, filename)\n        with open(log_file, 'a') as f:\n            for key, value in metrics.items():\n                f.write(f\"{now}, {key}: {value}\\n\")\n        return True\n    except Exception as e:\n        print(f'An error occurred: {e}')\n        return False", "compilation_passed": true, "time": 0.0021009445190429688, "tests_passed": true, "error": null}
{"code": "try:\n        with open(os.path.join(log_dir, filename), 'a', encoding='utf-8') as f:\n            f.write('\\n' + datetime.now().isoformat(sep=' ', timespec='minutes') + '\\n')\n            for k, v in metrics.items():\n                f.write(k + ': ' + str(v) + '\\n')\n    except OSError as e:\n        print(f'An error occurred: {e}')\n        return False\n    except Exception as e:\n        print(f'An error occurred: {e}')\n        return False\n    return True", "compilation_passed": true, "time": 0.001844167709350586, "tests_passed": true, "error": null}
{"code": "try:\n        if os.path.exists(log_dir):\n            with open(os.path.join(log_dir, filename), 'w') as file:\n                for metric in metrics:\n                    file.write(metric + ': ' + str(metrics[metric]) + '\\n')\n                file.write('Timestamp: ' + datetime.now().strftime('%Y-%m-%d %H:%M:%S'))\n                file.write('\\n')\n        else:\n            os.makedirs(log_dir)\n            task_func(metrics, filename, log_dir)\n\n    except IOError as e:\n        print(str(e) + ':', file=sys.stderr)\n        return False\n    return True", "compilation_passed": true, "time": 0.0018458366394042969, "tests_passed": true, "error": null}
{"code": "# Check for missing requirements\n    if not os.path.isdir(log_dir):\n        print('An error occurred: [Errno 2] No such file or directory: \\'' + log_dir + '\\'')\n        return False\n\n    # Create a log file\n    try:\n        with open(os.path.join(log_dir, filename), 'w') as f:\n            f.write(str(datetime.now()) + ':' + os.linesep)\n            f.write(str(metrics) + os.linesep)\n        print('Metrics written to: ' + os.path.join(log_dir, filename))\n    except Exception as e:\n        print('An error occurred: ' + str(e))\n        return False\n    return True", "compilation_passed": true, "time": 0.0016112327575683594, "tests_passed": true, "error": null}
{"code": "try:\n        # Check if the directory exists\n        if not os.path.isdir(log_dir):\n            os.makedirs(log_dir)\n\n        # Create the log file\n        logfile = os.path.join(log_dir, filename)\n        with open(logfile, 'a') as f:\n            for k, v in metrics.items():\n                timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n                f.write(f'{k}: {v}, {timestamp}\\n')\n\n        # Log success\n        print(f\"Metrics written to {logfile} successfully!\")\n        return True\n\n    # Handle errors\n    except Exception as e:\n        print(f\"An error occurred: {str(e)}\")\n        return False", "compilation_passed": true, "time": 0.0018451213836669922, "tests_passed": true, "error": null}
{"code": "try:\n        if not os.path.exists(log_dir):\n            os.makedirs(log_dir)\n\n        with open(os.path.join(log_dir, filename), 'a', encoding='utf-8') as f:\n            f.write('-' * 40 + '\\n')\n            f.write('{datetime}'.format(**locals()))\n            f.write('-' * 40 + '\\n')\n            for key, value in metrics.items():\n                f.write('{key}: {value}'.format(**locals()))\n                f.write('\\n')\n            f.write('-' * 80 + '\\n')\n    except Exception:\n        print(\"An error occurred:\", sys.exc_info()[1])\n    return False", "compilation_passed": true, "time": 0.0019099712371826172, "tests_passed": false, "error": "NameError"}
{"code": "if not os.path.exists(log_dir):\n        print(f'An error occurred: [Errno 2] No such file or directory: {log_dir}')\n        return False\n    # Write the dictionary of metrics to the file\n    with open(os.path.join(log_dir, filename), 'a') as f:\n        for metric, value in metrics.items():\n            f.write(f'{metric} = {value}\\n')\n    return True", "compilation_passed": true, "time": 0.0022690296173095703, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(log_dir):\n        os.makedirs(log_dir, exist_ok=True)\n    filename = os.path.join(log_dir, filename)\n\n    try:\n        with open(filename, 'a') as file:\n            for key, value in metrics.items():\n                file.write(f\"{key} {value} {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\\n\")\n        return True\n    except IOError:\n        return False", "compilation_passed": true, "time": 0.0016658306121826172, "tests_passed": true, "error": null}
{"code": "try:\n        with open(os.path.join(log_dir, filename), 'a', encoding='utf-8') as f:\n            for key, val in metrics.items():\n                f.write(f\"{datetime.now():%H:%M:%S} - {key}: {val}\\n\")\n        return True\n    except:\n        return False", "compilation_passed": true, "time": 0.0016262531280517578, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(log_dir):\n        os.makedirs(log_dir)\n\n    try:\n        with open(os.path.join(log_dir, filename), 'a') as f:\n            for metric, value in metrics.items():\n                timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n                f.write(f'{metric}: {value}, {timestamp}\\n')\n            f.close()\n        return True\n    except Exception as err:\n        print('An error occurred: ', err)\n        return False", "compilation_passed": true, "time": 0.0017940998077392578, "tests_passed": true, "error": null}
{"code": "# Check if the log directory exists and create it if it doesn't\n    if not os.path.exists(log_dir):\n        os.makedirs(log_dir)\n\n    # Create the timestamped file name\n    timestamp = datetime.now().strftime(\"%Y-%m-%d_%H-%M-%S\")\n    file_name = f'{timestamp}.log'\n    log_file = os.path.join(log_dir, filename)\n\n    # Check if the file already exists and append the timestamp to the file name\n    if os.path.exists(log_file):\n        count = 1\n        while os.path.exists(f\"{log_file}{count}\"):\n            count += 1\n        file_name = f\"{count}.log\"\n        timestamp = datetime.now().strftime(\"%Y-%m-%d_%H-%M-%S\")\n        log_file = os.path.join(log_dir, f\"{timestamp}{file_name}\")\n\n    # Write the metrics to the log file\n    with open(", "compilation_passed": false, "time": 0.00021982192993164062, "tests_passed": false, "error": "SyntaxError"}
{"code": "try:\n        metrics_dict = {key.upper(): val for key, val in metrics.items()}\n        if log_dir is not None:\n            logfile = os.path.join(log_dir, filename)\n        else:\n            logfile = filename\n\n        with open(logfile, 'w') as f:\n            for metric_name, metric_value in metrics_dict.items():\n                f.write(f\"{metric_name} - {metric_value}\\n\")\n    except Exception as e:\n        print(e)\n        return False\n\n    return True", "compilation_passed": true, "time": 0.0017178058624267578, "tests_passed": true, "error": null}
{"code": "log_file_path = os.path.join(log_dir, filename)\n    try:\n        with open(log_file_path, 'a') as f:\n            f.write('[{}]\\n'.format(datetime.now().strftime(\"%Y-%m-%d %H:%M:%S.%f\")))\n            for k, v in metrics.items():\n                f.write('{}: {}\\n'.format(k, v))\n            f.write('\\n')\n    except FileNotFoundError:\n        print('An error occurred: [Errno 2] No such file or directory: %s' % (log_file_path))\n        return False\n    return True", "compilation_passed": true, "time": 0.0017168521881103516, "tests_passed": true, "error": null}
{"code": "# Ensure the log directory exists.\n    os.makedirs(log_dir, exist_ok=True)\n\n    # Open the log file for writing.\n    with open(os.path.join(log_dir, filename), 'a') as file:\n        # Get the current timestamp.\n        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n\n        # Write the metrics to the file.\n        file.write(f'Time: {timestamp}\\n')\n        for metric, value in metrics.items():\n            file.write(f'{metric}: {value}\\n')\n        file.write('\\n')\n\n    return True", "compilation_passed": true, "time": 0.0023779869079589844, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "log_path = os.path.join(log_dir, filename)\n\n    try:\n        log_file = open(log_path, \"a+\")\n\n    except OSError as err:\n        print(f'An error occurred: {err}')\n        return False\n\n    else:\n        try:\n            now = datetime.now()\n            log_file.write(f'{now}, {metrics}\\n')\n            log_file.write(f'--------------------------------------------\\n')\n\n            log_file.close()\n            return True\n\n        except Exception:\n            print(f'An error occurred: {err}')\n            return False\n\n    finally:\n        if os.path.isfile(log_path):\n            os.remove(log_path)", "compilation_passed": true, "time": 0.0019392967224121094, "tests_passed": true, "error": null}
{"code": "# check if file exists or create it\n    file_path = os.path.join(log_dir, filename)\n    try:\n        with open(file_path, 'a') as f:\n            for key, value in metrics.items():\n                # append each metric to the file with a timestamp\n                f.write(f\"{datetime.now()},{key}: {value},\\n\")\n            f.close()\n    except Exception as e:\n        print(\"An error occurred:\", str(e))\n        return False\n    return True", "compilation_passed": true, "time": 0.0018031597137451172, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(log_dir):\n        os.makedirs(log_dir)\n\n    if os.path.isdir(log_dir):\n        logfile = os.path.join(log_dir, filename)\n        with open(logfile, 'a', encoding='utf-8') as f:\n            f.write(\"Metrics written to file: \")\n            f.write('\\n')\n            f.write(\"Time: \")\n            f.write(\" \")\n            f.write(str(datetime.now()))\n            f.write('\\n')\n            for key, value in metrics.items():\n                f.write(key)\n                f.write(':')\n                f.write(' ')\n                f.write(str(value))\n                f.write('\\n')\n        return True\n    else:\n        return False", "compilation_passed": true, "time": 0.0015320777893066406, "tests_passed": true, "error": null}
{"code": "try:\n        log_file = os.path.join(log_dir, filename)\n        with open(log_file, 'a') as file:\n            timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n            for name, value in metrics.items():\n                file.write(f'{name}: {value} | {timestamp}\\n')\n        return True\n    except Exception as e:\n        print(f'An error occurred: {str(e)}')\n        return False", "compilation_passed": true, "time": 0.0017108917236328125, "tests_passed": true, "error": null}
{"code": "try:\n        os.makedirs(log_dir, exist_ok=True)\n        with open(os.path.join(log_dir, filename), 'w') as file:\n            for key, value in metrics.items():\n                file.write(f\"{key}: {value}\\n\")\n        return True\n    except PermissionError as e:\n        print(e)\n        return False", "compilation_passed": true, "time": 0.0017101764678955078, "tests_passed": true, "error": null}
{"code": "try:\n        # Get the current timestamp\n        timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n\n        # Construct the path for the log file\n        path = os.path.join(log_dir, filename)\n\n        # Open the file in append mode\n        with open(path, 'a') as f:\n            f.write(f\"{timestamp}: {metrics}\\n\")\n\n        return True\n    except Exception as e:\n        # Print the error message and return False\n        print(f\"An error occurred: {e}\")\n        return False", "compilation_passed": true, "time": 0.002232074737548828, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(log_dir):\n        os.makedirs(log_dir)\n    with open(f'{log_dir}/{filename}', 'w') as file:\n        for key, value in metrics.items():\n            file.write(f'{key}: {value}\\n')\n    return True", "compilation_passed": true, "time": 0.001628875732421875, "tests_passed": true, "error": null}
{"code": "try:\n        if not os.path.exists(log_dir):\n            os.mkdir(log_dir)\n        filepath = os.path.join(log_dir, filename)\n        with open(filepath, 'a') as file:\n            for key, value in metrics.items():\n                timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')\n                file.write(f\"{key}: {value}, {timestamp}\\n\")\n    except Exception as e:\n        print(f\"An error occurred: {str(e)}\")\n        return False\n    else:\n        return True", "compilation_passed": true, "time": 0.0016698837280273438, "tests_passed": true, "error": null}
{"code": "try:\n        with open(os.path.join(log_dir, filename), 'a') as f:\n            f.write(\n                \"metrics: {}\\n\\t\".format(metrics) + datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\") + \"\\n\")\n        return True\n    except IOError as e:\n        print(\"An error occurred: %s\" % (e,))\n        return False", "compilation_passed": true, "time": 0.0016942024230957031, "tests_passed": true, "error": null}
