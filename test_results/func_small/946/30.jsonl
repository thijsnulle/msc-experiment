{"code": "random.seed(seed)\n    np.random.seed(seed)\n\n    arr = np.random.randint(min_val, max_val, size=(rows, cols))\n    df = pd.DataFrame(arr, dtype=np.int)\n    return df", "compilation_passed": true, "time": 0.0008761882781982422, "tests_passed": false, "error": "    https"}
{"code": "np.random.seed(seed)\n    result = np.random.randint(min_val, max_val + 1, size=(rows, cols))\n    df = pd.DataFrame(result)\n    return df", "compilation_passed": true, "time": 0.0008599758148193359, "tests_passed": true, "error": null}
{"code": "random.seed(seed)\n    df = pd.DataFrame(np.random.randint(low=min_val, high=max_val, size=(rows, cols)))\n    return df", "compilation_passed": true, "time": 0.0009679794311523438, "tests_passed": true, "error": null}
{"code": "# Generate a 2-dimensional array of random integers within the specified range using NumPy's random.randint() function.\n    # The seed value is optional, and can be specified via the optional keyword argument.\n    random.seed(seed)\n    array = np.random.randint(min_val, max_val, (rows, cols))\n\n    # Convert the 2-dimensional array to a pandas DataFrame using the pandas.DataFrame() function.\n    df = pd.DataFrame(array)\n\n    return df", "compilation_passed": true, "time": 0.3404271602630615, "tests_passed": true, "error": null}
{"code": "# generate random matrix\n    rand_matrix = np.random.randint(min_val, max_val, size=(rows, cols))\n\n    # convert to pandas DataFrame\n    df = pd.DataFrame(rand_matrix)\n\n    # return DataFrame\n    return df", "compilation_passed": true, "time": 0.0009241104125976562, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    random_numbers = np.random.randint(min_val, max_val, (rows, cols))\n    return pd.DataFrame(random_numbers)", "compilation_passed": true, "time": 0.0008521080017089844, "tests_passed": true, "error": null}
{"code": "random.seed(seed)\n    data = random.randint(min_val, max_val, size=(rows, cols))\n    return pd.DataFrame(data)", "compilation_passed": true, "time": 0.0007407665252685547, "tests_passed": false, "error": "TypeError"}
{"code": "random.seed(seed)\n    np.random.seed(seed)\n    arr = np.random.randint(low=min_val, high=max_val, size=(rows, cols))\n    df = pd.DataFrame(arr)\n    return df", "compilation_passed": true, "time": 0.0008788108825683594, "tests_passed": true, "error": null}
{"code": "random.seed(seed)\n    matrix = np.random.randint(min_val, max_val, (rows, cols))\n    return pd.DataFrame(matrix)", "compilation_passed": true, "time": 0.0008549690246582031, "tests_passed": true, "error": null}
{"code": "random.seed(seed)\n    # Generating a matrix of the specified dimensions\n    matrix = []\n    for _ in range(rows):\n        row = []\n        for _ in range(cols):\n            row.append(random.randint(min_val, max_val))\n        matrix.append(row)\n\n    # Converting the matrix into a DataFrame\n    df = pd.DataFrame(matrix)\n\n    return df", "compilation_passed": true, "time": 0.0011038780212402344, "tests_passed": true, "error": null}
{"code": "random.seed(seed)\n    np.random.seed(seed)\n    df = pd.DataFrame([[random.randint(min_val, max_val) for _ in range(cols)] for _ in range(rows)])\n    return df", "compilation_passed": true, "time": 0.0010900497436523438, "tests_passed": true, "error": null}
{"code": "random.seed(seed)\n    array = []\n    for _ in range(rows):\n        row = [random.randint(min_val, max_val) for _ in range(cols)]\n        array.append(row)\n    return pd.DataFrame(array)", "compilation_passed": true, "time": 0.0010492801666259766, "tests_passed": true, "error": null}
{"code": "if rows <= 0 or cols <= 0:\n        raise ValueError(\"Dimensions must be positive values\")\n    if not isinstance(rows, int) or not isinstance(cols, int):\n        raise TypeError(\"Rows and columns must be integer values\")\n\n    np.random.seed(seed)\n    matrix = np.random.randint(min_val, max_val, size=(rows, cols))\n    df = pd.DataFrame(matrix)\n    return df", "compilation_passed": true, "time": 0.0009479522705078125, "tests_passed": true, "error": null}
{"code": "random.seed(seed)\n\n    mat = []\n\n    for row in range(rows):\n        mat.append([random.randint(min_val, max_val) for _ in range(cols)])\n\n    df = pd.DataFrame(mat)\n\n    return df", "compilation_passed": true, "time": 0.0010309219360351562, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    rand_matrix = np.random.randint(min_val, max_val + 1, size=(rows, cols))\n    df = pd.DataFrame(rand_matrix)\n    return df", "compilation_passed": true, "time": 0.000997304916381836, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    return pd.DataFrame(np.random.randint(low=min_val, high=max_val, size=(rows, cols)),\n                        columns=[\"Col1\", \"Col2\"])", "compilation_passed": true, "time": 0.0010249614715576172, "tests_passed": true, "error": null}
{"code": "random.seed(seed)\n    matrix = [[random.randint(min_val, max_val) for _ in range(cols)] for _ in range(rows)]\n    return pd.DataFrame(matrix)", "compilation_passed": true, "time": 0.0010399818420410156, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    arr = np.random.randint(low=min_val, high=max_val, size=(rows, cols))\n    return pd.DataFrame(arr)", "compilation_passed": true, "time": 0.0008492469787597656, "tests_passed": true, "error": null}
{"code": "random.seed(seed)\n    np.random.seed(seed)\n    np.set_printoptions(threshold=np.inf)\n    arr = [[random.randint(min_val, max_val) for _ in range(cols)] for _ in range(rows)]\n    df = pd.DataFrame(arr)\n    return df", "compilation_passed": true, "time": 0.0011038780212402344, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    random_data = [[random.randint(min_val, max_val) for _ in range(cols)] for _ in range(rows)]\n    return pd.DataFrame(random_data)", "compilation_passed": true, "time": 0.0008938312530517578, "tests_passed": true, "error": null}
{"code": "rng = random.Random(seed)\n    return pd.DataFrame(data=rng.randint(low=min_val, high=max_val, size=(rows, cols)), dtype=int, index=None, columns=None)", "compilation_passed": true, "time": 0.0007529258728027344, "tests_passed": false, "error": "TypeError"}
{"code": "random.seed(seed)\n    np.random.seed(seed)\n    df = pd.DataFrame(\n        np.random.randint(low=min_val, high=max_val, size=(rows, cols)),\n        index=list(range(1, rows + 1)),\n        columns=list(range(1, cols + 1)),\n    )\n\n    return df", "compilation_passed": true, "time": 0.0009260177612304688, "tests_passed": true, "error": null}
{"code": "# initialize the random number generator with the given seed value\n    random.seed(seed)\n\n    # create a matrix of size rows x cols filled with random integers within the given range\n    matrix = np.random.randint(min_val, max_val + 1, (rows, cols))\n\n    # convert the matrix into a pandas DataFrame\n    df = pd.DataFrame(matrix)\n\n    # return the DataFrame\n    return df", "compilation_passed": true, "time": 0.0008471012115478516, "tests_passed": true, "error": null}
{"code": "random.seed(seed)\n    matrix = np.random.randint(min_val, max_val + 1, size=(rows, cols))\n    return pd.DataFrame(matrix)", "compilation_passed": true, "time": 0.0008730888366699219, "tests_passed": true, "error": null}
{"code": "np.random.seed(seed)\n    rand_arr = np.random.randint(low=min_val, high=max_val, size=(rows, cols))\n    df = pd.DataFrame(rand_arr)\n    return df", "compilation_passed": true, "time": 0.0008440017700195312, "tests_passed": true, "error": null}
{"code": "rnd_matrix = np.random.randint(min_val, max_val, size=(rows, cols))\n    return pd.DataFrame(rnd_matrix)", "compilation_passed": true, "time": 0.000759124755859375, "tests_passed": true, "error": null}
{"code": "random.seed(seed)\n    r = np.random.randint(low=min_val, high=max_val, size=(rows, cols))\n    return pd.DataFrame(r)", "compilation_passed": true, "time": 0.000865936279296875, "tests_passed": true, "error": null}
{"code": "random.seed(seed)\n    df = pd.DataFrame({'col1': random.randint(min_val, max_val, size=(rows, cols)),\n                       'col2': random.randint(min_val, max_val, size=(rows, cols))})\n    return df", "compilation_passed": true, "time": 0.000766754150390625, "tests_passed": false, "error": "TypeError"}
{"code": "np.random.seed(seed)\n    df = pd.DataFrame(np.random.randint(min_val, max_val + 1, size=(rows, cols)))\n    return df", "compilation_passed": true, "time": 0.0009009838104248047, "tests_passed": true, "error": null}
{"code": "if seed is None or seed == 0:\n        seed = np.random.randint(0, 2 ** 32 - 1)\n    if seed is not None:\n        np.random.seed(seed)\n        random.seed(seed)\n\n    matrix = np.random.randint(min_val, max_val + 1, size=(rows, cols))\n    df = pd.DataFrame(matrix)\n    return df", "compilation_passed": true, "time": 0.0009028911590576172, "tests_passed": true, "error": null}
