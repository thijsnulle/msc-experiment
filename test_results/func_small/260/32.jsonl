{"code": "counter = 0\n    for filename in glob.iglob(os.path.join(directory, '**/*.json'), recursive=True):\n        with open(filename, 'r+') as file:\n            data = json.load(file)\n\n            # Update the value of the key if it doesn't exist\n            if KEY not in data:\n                data[KEY] = VALUE\n                counter += 1\n\n            file.seek(0)\n            json.dump(data, file, indent=4, sort_keys=True)\n            file.truncate()\n\n    return counter", "compilation_passed": true, "time": 0.003451108932495117, "tests_passed": true, "error": null}
{"code": "count = 0\n    for filename in glob.glob(f\"{directory}/*.json\"):\n        with open(filename, \"r+\") as file:\n            data = json.load(file)\n            if not data.get(KEY): # check if the key doesn't already exist\n                data[KEY] = VALUE\n                file.seek(0)\n                json.dump(data, file, indent=4) # indent is a parameter of json dump\n                count += 1\n    return count", "compilation_passed": true, "time": 0.0031270980834960938, "tests_passed": true, "error": null}
{"code": "updated = 0\n\n    for json_file in glob.glob(f\"{directory}/**/*.json\", recursive=True):\n        with open(json_file, \"r\") as file:\n            contents = json.load(file)\n\n        if contents.get(KEY) is None:\n            contents[KEY] = VALUE\n\n            with open(json_file, \"w\") as file:\n                json.dump(contents, file, indent=4)\n                updated += 1\n\n    return updated", "compilation_passed": true, "time": 0.0033767223358154297, "tests_passed": true, "error": null}
{"code": "updated_json_files = 0\n    json_files = glob.glob(f\"{directory}/*.json\")\n    for file in json_files:\n        with open(file, 'r') as f:\n            json_data = json.load(f)\n            if not KEY in json_data:\n                json_data[KEY] = VALUE\n                updated_json_files += 1\n            with open(file, 'w') as f:\n                json.dump(json_data, f)\n    return updated_json_files", "compilation_passed": true, "time": 0.0035660266876220703, "tests_passed": true, "error": null}
{"code": "# Define the function to add the new key-value pair to each JSON file\n    def add_key_value(filename):\n        with open(filename, 'r+') as f:\n            data = json.load(f)\n            # If the key doesn't already exist in the JSON, add it with its value\n            if KEY not in data:\n                data[KEY] = VALUE\n            f.seek(0)\n            json.dump(data, f, indent=2, sort_keys=True)\n            f.truncate()\n\n    # Loop through all JSON files in the provided directory and add the new key-value pair\n    file_count = 0\n    for filename in glob.glob(os.path.join(directory, '*.json')):\n        try:\n            add_key_value(filename)\n            file_count += 1\n        except json.decoder.JSONDecodeError as e:\n            print(f'Error while parsing {filename}: {e}')\n\n    return file_count", "compilation_passed": true, "time": 0.001996755599975586, "tests_passed": true, "error": null}
{"code": "files_updated = 0\n    for filename in glob.glob(f'{directory}/*.json'):\n        try:\n            with open(filename, 'r') as f:\n                data = json.load(f)\n                if not KEY in data:\n                    data[KEY] = VALUE\n                    with open(filename, 'w') as f:\n                        json.dump(data, f, indent=4)\n                    files_updated += 1\n        except (FileNotFoundError, json.JSONDecodeError, json.decoder.JSONDecodeError) as e:\n            print(f'File not found or invalid JSON format: {filename}. Error: {e}')\n    return files_updated", "compilation_passed": true, "time": 0.003259897232055664, "tests_passed": true, "error": null}
{"code": "json_files = glob.glob(f'{directory}/*.json')\n\n    json_files = [f for f in json_files if not os.path.isdir(f)]\n\n    if len(json_files) == 0:\n        print('No JSON files found in the provided directory.')\n        return 0\n    elif len(json_files) == 1:\n        print('One JSON file found in the provided directory.')\n        update_json_file(json_files[0], KEY, VALUE)\n        return 1\n    else:\n        updated_json_files_count = 0\n        for file in json_files:\n            updated_json_files_count += update_json_file(file, KEY, VALUE)\n        return updated_json_files_count", "compilation_passed": true, "time": 0.0016345977783203125, "tests_passed": false, "error": "NameError"}
{"code": "# get a list of all JSON files in the provided directory\n    json_files = glob.glob(os.path.join(directory, '**/*.json'))\n\n    updated_files = 0  # initialize the counter\n\n    for file_path in json_files:\n        try:\n            # try to open the file, raise an error if it cannot be opened\n            with open(file_path, 'r') as file:\n                data = json.load(file)\n\n                # if the key exists, skip the file\n                if KEY in data:\n                    continue\n\n                # add the new key-value pair to the file\n                data[KEY] = VALUE\n                json.dump(data, file, indent=2)\n                file.write('\\n')  # new line after each JSON file\n                updated_files += 1\n        except (FileNotFoundError, json.decoder.JSONDecodeError):\n            # print the file path that caused an error\n            print(file_path)\n\n    return updated_files", "compilation_passed": true, "time": 0.0015299320220947266, "tests_passed": true, "error": null}
{"code": "# TODO: write code here\n    # You may use the following variables\n    files = glob.glob(directory+'/*.json')\n    file_num = 0\n    for f in files:\n        with open(f) as j_file:\n            json_data = json.load(j_file)\n            if KEY not in json_data.keys():\n                json_data[KEY] = VALUE\n                with open(f, 'w') as outfile:\n                    json.dump(json_data, outfile)\n                file_num += 1\n    return file_num", "compilation_passed": true, "time": 0.0031659603118896484, "tests_passed": true, "error": null}
{"code": "json_files = glob.glob(os.path.join(directory, \"*.json\"))\n    modified_json_files = 0\n\n    # Update the JSON files\n    for filepath in json_files:\n        with open(filepath, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0) # rewind the file object\n                f.truncate() # clear the current contents\n                json.dump(data, f, indent=4, sort_keys=True) # save the updated data back to the JSON file\n                f.close()\n                modified_json_files += 1\n\n    return modified_json_files", "compilation_passed": true, "time": 0.003325939178466797, "tests_passed": true, "error": null}
{"code": "# Count of JSON files updated\n    count = 0\n    # Iterate over all JSON files in the specified directory\n    for file_path in glob.glob(os.path.join(directory, '*.json')):\n        # Read the JSON file content\n        with open(file_path) as json_file:\n            data = json.load(json_file)\n\n        # Check if the key already exists\n        if not KEY in data:\n            # Add the new key-value pair to the JSON file\n            data[KEY] = VALUE\n            # Update the JSON file content with the updated data\n            with open(file_path, 'w') as json_file:\n                json.dump(data, json_file, indent=4)\n            # Increment the count of JSON files updated\n            count += 1\n\n    return count", "compilation_passed": true, "time": 0.003220796585083008, "tests_passed": true, "error": null}
{"code": "if os.path.isdir(directory):\n        filenames = glob.glob(f\"{directory}/*.json\")\n        counter = 0\n        for filename in filenames:\n            try:\n                with open(filename, 'r') as file:\n                    data = json.load(file)\n                    if KEY not in data:\n                        data[KEY] = VALUE\n                        counter += 1\n                    with open(filename, 'w') as file:\n                        json.dump(data, file)\n            except Exception:\n                continue\n        return counter\n    return 0", "compilation_passed": true, "time": 0.003381013870239258, "tests_passed": true, "error": null}
{"code": "files = glob.glob(os.path.join(directory, '*.json'))\n    num_files = len(files)\n    num_files_updated = 0\n    for file in files:\n        try:\n            with open(file, 'r+') as f:\n                contents = json.load(f)\n                if KEY not in contents:\n                    contents[KEY] = VALUE\n                    f.seek(0)\n                    json.dump(contents, f)\n                    f.truncate()\n                    num_files_updated += 1\n        except json.JSONDecodeError:\n            print(f'Error loading {file}')\n            pass\n    return num_files_updated", "compilation_passed": true, "time": 0.003147125244140625, "tests_passed": true, "error": null}
{"code": "json_files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n\n    for json_file in json_files:\n        try:\n            with open(json_file, 'r') as f:\n                json_data = json.load(f)\n\n            if KEY not in json_data:\n                json_data[KEY] = VALUE\n                updated_files += 1\n                with open(json_file, 'w') as f:\n                    json.dump(json_data, f, indent=4)\n\n        except json.JSONDecodeError:\n            pass\n        except FileNotFoundError:\n            pass\n\n    return updated_files", "compilation_passed": true, "time": 0.003203153610229492, "tests_passed": true, "error": null}
{"code": "counter = 0\n    files = glob.glob(f\"{directory}/*.json\")\n    if len(files) == 0:\n        return 0\n    for file in files:\n        with open(file, 'r+') as file:\n            try:\n                data = json.load(file)\n            except json.decoder.JSONDecodeError:\n                continue\n            if not data.get(KEY):\n                data[KEY] = VALUE\n                counter += 1\n                json.dump(data, file, indent=2)\n    return counter", "compilation_passed": true, "time": 0.0017991065979003906, "tests_passed": false, "error": "json.decoder.JSONDecodeError"}
{"code": "updated = 0\n    for file in glob.glob(directory + '/*.json'):\n        try:\n            with open(file, 'r') as f:\n                contents = json.load(f)\n                if KEY not in contents:\n                    contents[KEY] = VALUE\n                    updated += 1\n                    with open(file, 'w') as f:\n                        json.dump(contents, f, indent=4)\n        except (ValueError, TypeError):\n            pass\n    return updated", "compilation_passed": true, "time": 0.0032041072845458984, "tests_passed": true, "error": null}
{"code": "file_list = glob.glob(\"*.json\")\n    # Check if the provided directory exists and contains at least one JSON file\n    if len(file_list) == 0:\n        print('No JSON files found')\n        return 0\n    # Check if the directory exists and contains at least one JSON file\n    if not os.path.isdir(directory):\n        print('Invalid directory')\n        return 0\n\n    updated = 0\n    for file_name in file_list:\n        try:\n            with open(os.path.join(directory, file_name), 'r') as file:\n                json_data = json.load(file)\n            if KEY not in json_data:\n                json_data[KEY] = VALUE\n                updated += 1\n            with open(os.path.join(directory, file_name), 'w') as file:\n                json.dump(json_data, file, indent=2, separators=(',', ': '))\n        except Exception:\n            print(f\"Error processing {file_name}\")\n    print(updated", "compilation_passed": false, "time": 0.0002548694610595703, "tests_passed": false, "error": "SyntaxError"}
{"code": "updated_json_files = 0\n    for filename in glob.glob('%s/*.json' % directory):\n        with open(filename, 'r') as file:\n            json_file = json.load(file)\n\n        if not (KEY in json_file):\n            json_file[KEY] = VALUE\n            updated_json_files += 1\n            with open(filename, 'w') as file:\n                json.dump(json_file, file, indent=4)\n    print(updated_json_files)\n    return updated_json_files", "compilation_passed": true, "time": 0.003217935562133789, "tests_passed": true, "error": null}
{"code": "updated_count = 0\n    for path in glob.glob(os.path.join(directory, \"*.json\")):\n        with open(path, \"r\") as json_file:\n            data = json.load(json_file)\n        for key, value in data.items():\n            if key != 'mynewkey':\n                continue\n            data[KEY] = VALUE\n            updated_count += 1\n            with open(path, \"w\") as updated_file:\n                json.dump(data, updated_file)\n    return updated_count", "compilation_passed": true, "time": 0.0018351078033447266, "tests_passed": true, "error": null}
{"code": "count = 0\n\n    for filename in glob.glob(f'{directory}/*.json'):\n        # Check if file is already modified\n        if os.path.exists(filename + '.mod'):\n            continue\n\n        try:\n            with open(filename, 'r') as file:\n                data = json.load(file)\n        except:\n            continue\n        else:\n            if KEY not in data:\n                data[KEY] = VALUE\n                os.mknod(filename)\n                os.rename(filename, f'{filename}.mod')\n                os.replace(filename + '.mod', filename)\n                os.remove(filename + '.mod')\n                count += 1\n\n    return count", "compilation_passed": true, "time": 0.0016231536865234375, "tests_passed": false, "error": "PermissionError"}
{"code": "files_list = glob.glob(f\"{directory}/*.json\")\n    counter = 0\n\n    for fname in files_list:\n        with open(fname, 'r') as file:\n            data = json.load(file)\n\n        if not KEY in data:\n            data[KEY] = VALUE\n            counter += 1\n\n        with open(fname, 'w') as file:\n            json.dump(data, file)\n\n    return counter", "compilation_passed": true, "time": 0.003203868865966797, "tests_passed": true, "error": null}
{"code": "json_files = glob.glob(f\"{directory}/*.json\")\n\n    updated_json_files_count = 0\n    for json_file in json_files:\n        try:\n            with open(json_file, 'r+') as json_file_object:\n                json_object = json.load(json_file_object)\n\n                # Check if the key exists in the JSON object already\n                if KEY in json_object:\n                    continue\n\n                # Add the new key-value pair if it doesn't exist\n                json_object[KEY] = VALUE\n\n                json_file_object.seek(0)\n                json.dump(json_object, json_file_object)\n                json_file_object.truncate()\n\n                updated_json_files_count += 1\n        except json.JSONDecodeError:\n            continue\n        except PermissionError:\n            continue\n\n    return updated_json_files_count", "compilation_passed": true, "time": 0.0030968189239501953, "tests_passed": true, "error": null}
{"code": "count = 0\n    for filename in glob.glob(os.path.join(directory, \"*.json\")):\n        with open(filename, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                json.dump(data, f, indent=4, sort_keys=True)\n                f.truncate()\n                count += 1\n    return count", "compilation_passed": true, "time": 0.0031180381774902344, "tests_passed": true, "error": null}
{"code": "# 0. Init variables\n    modified_json_files_count = 0\n\n    # 1. Get all JSON files\n    json_files = glob.glob(os.path.join(directory, \"**/*.json\"), recursive=True)\n\n    # 2. Loop through all JSON files\n    for file_path in json_files:\n        try:\n            # 2.1 Load the JSON file into a Python data structure\n            with open(file_path, 'r') as file:\n                file_data = json.load(file)\n\n            # 2.2 Check if the key already exists\n            if KEY in file_data:\n                continue\n            else:\n                # 2.3 Modify the JSON file in place\n                file_data[KEY] = VALUE\n                file_data['another_key'] = VALUE\n\n                # 2.4 Save the modified JSON file back to the original file\n                with open(file_path, 'w') as file:\n                    json.dump(file_data, file, indent=4, ensure_ascii=False, sort_", "compilation_passed": false, "time": 0.00019407272338867188, "tests_passed": false, "error": "SyntaxError"}
{"code": "counter = 0\n\n    for filename in glob.glob(os.path.join(directory, '*.json')):\n        with open(filename, 'r+') as file:\n            content = json.load(file)\n\n            if KEY not in content:\n                content[KEY] = VALUE\n                file.seek(0)\n                json.dump(content, file, indent=2)\n                file.truncate()\n                counter += 1\n\n    return counter", "compilation_passed": true, "time": 0.0031189918518066406, "tests_passed": true, "error": null}
{"code": "# Count the number of updated files\n    count = 0\n\n    # Find all JSON files in the directory\n    json_files = glob.glob(directory + '/*.json')\n\n    # Iterate over the JSON files\n    for json_file in json_files:\n        # Read the JSON file\n        with open(json_file, 'r') as file:\n            json_data = json.load(file)\n\n        # Check if the key already exists\n        if KEY not in json_data:\n            # Add the new key-value pair\n            json_data[KEY] = VALUE\n\n            # Write the updated JSON data back to the file\n            with open(json_file, 'w') as file:\n                json.dump(json_data, file)\n\n            # Increment the count\n            count += 1\n\n    # Return the number of updated files\n    return count", "compilation_passed": true, "time": 0.0032749176025390625, "tests_passed": true, "error": null}
{"code": "updated_files = 0\n    for filename in glob.glob(f'{directory}/*.json'):\n        with open(filename, 'r+') as f:\n            data = json.load(f)\n            if not KEY in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                json.dump(data, f)\n                f.truncate()\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0038192272186279297, "tests_passed": true, "error": null}
{"code": "updated_files = []\n    file_count = 0\n    for root, dirs, files in os.walk(directory):\n        for file in glob.glob(os.path.join(root, '*.json')):\n            with open(file, 'r+') as file:\n                # print(\"File:\", file)\n                data = json.load(file)\n                if KEY in data:\n                    print(\"Key already exists in the JSON file.\")\n                else:\n                    data[KEY] = VALUE\n                    file.seek(0)\n                    json.dump(data, file)\n                    updated_files.append(file)\n                    file_count += 1\n\n    for file in updated_files:\n        file.close()\n\n    print(f\"{file_count} JSON files updated.\")", "compilation_passed": true, "time": 0.0017979145050048828, "tests_passed": true, "error": null}
{"code": "updated_json_files = []\n    for json_file in glob.glob(os.path.join(directory, '**', '*.json')):\n        try:\n            with open(json_file, 'r+') as f:\n                data = json.load(f)\n\n            if KEY not in data:\n                data[KEY] = VALUE\n\n                updated_json_files.append(json_file)\n                f.seek(0) # set file pointer back to the beginning of the file\n                json.dump(data, f, indent=2, ensure_ascii=False)\n                f.truncate() # set file pointer to the beginning of the file\n\n        except:\n            pass\n\n    return len(updated_json_files)", "compilation_passed": true, "time": 0.0015778541564941406, "tests_passed": true, "error": null}
{"code": "count = 0\n\n    for json_file in glob.glob(os.path.join(directory, '*.json')):\n        try:\n            with open(json_file, 'r') as f:\n                json_data = json.load(f)\n                if KEY not in json_data:\n                    json_data[KEY] = VALUE\n                    with open(json_file, 'w') as f:\n                        json.dump(json_data, f)\n                    count += 1\n        except FileNotFoundError:\n            continue\n\n    return count", "compilation_passed": true, "time": 0.0032579898834228516, "tests_passed": true, "error": null}
