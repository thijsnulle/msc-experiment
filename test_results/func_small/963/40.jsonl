{"code": "# check if the source directory exists\n    source_dir_exists = os.path.exists(source_directory)\n    if not source_dir_exists:\n        raise OSError(f\"Source directory {source_directory} doesn't exist.\")\n\n    # get the list of file extensions in the source directory\n    valid_extensions = ['.txt', '.docx', '.xlsx', '.csv']\n    file_extensions = [os.path.splitext(file)[1] for file in glob.glob(f\"{source_directory}/*\") if not os.path.isdir(file)]\n\n    valid_file_extensions = [extension for extension in file_extensions if extension in valid_extensions]\n    print(f'Valid file extensions: {valid_file_extensions}')\n\n    # if the target directory does not exist, create it\n    if not os.path.exists(target_directory):\n        os.makedirs(target_directory)\n\n    # create a zipfile from the valid files in the source directory\n    path = Path(target_directory, f", "compilation_passed": false, "time": 0.0002491474151611328, "tests_passed": false, "error": "SyntaxError"}
{"code": "extensions = ['.txt', '.docx', '.xlsx', '.csv']\n    extensions_str = \"/\" + \"/\".join(extensions)\n    valid_exts_str = \".\".join(extensions)\n    exts = []\n\n    # Create the target directory if it does not exist\n    try:\n        if not Path(target_directory).exists():\n            os.mkdir(target_directory)\n    except OSError as e:\n        raise OSError(f\"Cannot create target directory: {target_directory}\") from e\n\n    # Look for valid extensions in the source directory\n    for filename in glob.glob(source_directory + extensions_str):\n        ext = os.path.splitext(filename)[-1]\n        if ext not in valid_exts_str:\n            raise FileNotFoundError(f\"The extension '{ext}' is invalid. Valid extensions are: {valid_exts_str}\")\n        exts.append(ext)\n\n    # Create the zip file\n    zf = zipfile.ZipFile(target", "compilation_passed": false, "time": 0.00023102760314941406, "tests_passed": false, "error": "SyntaxError"}
{"code": "os.chdir(source_directory)\n\n    source_file_list = []\n    for path_ in glob.glob(\"*\", recursive=True):\n        for ext in ['.txt', '.docx', '.xlsx', '.csv']:\n            if str(path_).endswith(ext):\n                source_file_list.append(Path(path_))\n\n    if not os.path.exists(target_directory):\n        os.makedirs(target_directory)\n\n    with zipfile.ZipFile(os.path.join(target_directory, zip_name + \".zip\"), \"w\") as zf:\n        for source_path in source_file_list:\n            zf.write(source_path)\n\n    return os.path.join(target_directory, zip_name + \".zip\")", "compilation_passed": true, "time": 0.030519962310791016, "tests_passed": true, "error": null}
{"code": "if not os.path.isdir(source_directory):\n        raise OSError(\n            f\"The source directory {source_directory} does not exist.\"\n        )\n\n    target_directory_path = Path(target_directory)\n    target_directory_path.mkdir(parents=True, exist_ok=True)\n\n    zip_name_with_ext = f\"{zip_name}.zip\"\n    zip_path = os.path.join(target_directory, zip_name_with_ext)\n\n    zip_file = zipfile.ZipFile(zip_path, 'w')\n\n    for file in glob.glob(os.path.join(source_directory, \"**/*.txt\")):\n        zip_file.write(file)\n\n    for file in glob.glob(os.path.join(source_directory, \"**/*.docx\")):\n        zip_file.write(file)\n\n    for file in glob.glob(os.path.join(source_directory, \"**/*.xlsx\")):\n        zip_file.write", "compilation_passed": true, "time": 0.006833076477050781, "tests_passed": false, "error": "AttributeError"}
{"code": "# Check for source_directory existence\n    if not os.path.exists(source_directory):\n        raise OSError('Source directory does not exist')\n\n    # Create zip file path\n    zip_file_path = Path(target_directory) / f'{zip_name}.zip'\n\n    # Create a zip file containing the specified extension files\n    with zipfile.ZipFile(zip_file_path, 'w', zipfile.ZIP_DEFLATED) as zip_file:\n        for filename in glob.glob(os.path.join(source_directory, '**', '*.*')):\n            if os.path.splitext(filename)[-1] in ['.txt', '.docx', '.xlsx', '.csv']:\n                zip_file.write(filename)\n\n    # Return the full path of the zip file\n    return str(zip_file_path)", "compilation_passed": true, "time": 0.02135300636291504, "tests_passed": true, "error": null}
{"code": "path = None\n\n    if not os.path.exists(source_directory):\n        raise OSError(\"Source directory does not exist\")\n\n    extension_list = ['.txt', '.docx', '.xlsx', '.csv']\n    files = glob.glob(f\"{source_directory}/*.*\")\n\n    if len(files) > 0:\n        path = os.path.join(target_directory, f\"{zip_name}.zip\")\n\n        with zipfile.ZipFile(path, 'w') as zip_file:\n            for file in files:\n                file_name = os.path.basename(file)\n\n                if file_name.endswith(extension_list):\n                    zip_file.write(file)\n\n    return path", "compilation_passed": true, "time": 0.006796836853027344, "tests_passed": false, "error": "AttributeError"}
{"code": "if not os.path.exists(source_directory):\n        raise OSError(f\"The directory {source_directory} does not exist.\")\n    target_path = os.path.join(target_directory, f\"{zip_name}.zip\")\n    if not os.path.exists(target_directory):\n        os.mkdir(target_directory)\n    with zipfile.ZipFile(target_path, 'w', zipfile.ZIP_DEFLATED) as zip_file:\n        for path in glob.glob(os.path.join(source_directory, \"**/*.txt\")):\n            zip_file.write(path)\n        for path in glob.glob(os.path.join(source_directory, \"**/*.docx\")):\n            zip_file.write(path)\n        for path in glob.glob(os.path.join(source_directory, \"**/*.xlsx\")):\n            zip_file.write(path)\n        for path in glob.glob(os.path.join(source_directory, \"**/*.", "compilation_passed": false, "time": 0.00010585784912109375, "tests_passed": false, "error": "SyntaxError"}
{"code": "path = os.path.join(target_directory, zip_name + '.zip')\n\n    if not os.path.isdir(source_directory):\n        raise OSError('Invalid source directory!')\n\n    zip_file = zipfile.ZipFile(path, 'w')\n\n    extensions = ['.txt', '.docx', '.xlsx', '.csv']\n    files = glob.glob(os.path.join(source_directory, '*.*'))\n\n    for file in files:\n        if os.path.isfile(file):\n            for ext in extensions:\n                if file.endswith(ext):\n                    zip_file.write(file)\n\n    zip_file.close()\n\n    return path", "compilation_passed": true, "time": 0.027975082397460938, "tests_passed": true, "error": null}
{"code": "source_directory = os.path.abspath(source_directory)\n    if not os.path.exists(source_directory):\n        raise OSError(f\"{source_directory} does not exist!\")\n    target_directory = os.path.abspath(target_directory)\n    target_directory = os.path.join(target_directory, zip_name)\n    if not os.path.isdir(target_directory):\n        os.makedirs(target_directory)\n    # Find all the files with the correct extensions\n    files_to_zip = glob.glob(os.path.join(source_directory, \"*.txt\")) + glob.glob(os.path.join(source_directory, \"*.docx\")) + glob.glob(os.path.join(source_directory, \"*.xlsx\")) + glob.glob(os.path.join(source_directory, \"*.csv\"))\n    # Create the zip file\n    with zipfile.ZipFile(os.path.join(target_directory, zip_name + '.zip'),", "compilation_passed": false, "time": 0.0002307891845703125, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not os.path.isdir(source_directory):\n        raise OSError('Source directory does not exist.')\n    valid_extensions = ['.txt', '.docx', '.xlsx', '.csv']\n    files_to_zip = [f for f in Path(source_directory).glob(\"**/*\") if f.suffix in valid_extensions]\n    with zipfile.ZipFile(os.path.join(target_directory, zip_name + '.zip'), 'w') as zip_file:\n        for file in files_to_zip:\n            zip_file.write(file, os.path.relpath(file, source_directory))\n    return os.path.join(target_directory, zip_name + '.zip')", "compilation_passed": true, "time": 0.040138959884643555, "tests_passed": true, "error": null}
{"code": "extensions = ['.txt', '.docx', '.xlsx', '.csv']\n\n    for ext in extensions:\n        source_files = glob.glob(f\"{source_directory}/**/*{ext}\", recursive=True)\n        for file in source_files:\n            try:\n                if os.path.isfile(file):\n                    try:\n                        os.makedirs(target_directory, exist_ok=True)\n                        with zipfile.ZipFile(f\"{target_directory}/{zip_name}.zip\", \"a\") as archive:\n                            archive.write(file)\n                    except Exception:\n                        os.remove(file)\n            except OSError:\n                raise OSError(f\"Source directory {source_directory} does not exist\")", "compilation_passed": true, "time": 0.006387948989868164, "tests_passed": false, "error": "AttributeError"}
{"code": "if not os.path.isdir(source_directory):\n        raise OSError('The source_directory does not exist!')\n    file_list = [source_directory]\n    extensions = ['.txt', '.docx', '.xlsx', '.csv']\n\n    for file in glob.glob(os.path.join(source_directory, '**', '*')):\n        file = Path(file)\n        if file.suffix in extensions:\n            file_list.append(str(file))\n\n    with ZipFile(f'{target_directory}/{zip_name}.zip', 'w') as z:\n        z.write(file_list)\n\n    return f'{target_directory}/{zip_name}.zip'", "compilation_passed": true, "time": 0.006246089935302734, "tests_passed": false, "error": "NameError"}
{"code": "target_directory = Path(target_directory)\n    if not target_directory.exists():\n        os.makedirs(target_directory)\n\n    valid_extensions = [\n        '.txt',\n        '.docx',\n        '.xlsx',\n        '.csv'\n    ]\n    filenames = glob.glob(os.path.join(source_directory, '*'))\n    for filename in filenames:\n        if filename.endswith(valid_extensions):\n            file_name = os.path.basename(filename)\n            new_file = target_directory / f'{zip_name}.zip'\n            with zipfile.ZipFile(new_file, 'w', compression=zipfile.ZIP_DEFLATED) as zipf:\n                zipf.write(filename, os.path.relpath(filename, source_directory))\n\n    return str(new_file)", "compilation_passed": true, "time": 0.00612187385559082, "tests_passed": false, "error": "UnboundLocalError"}
{"code": "# create a Zip file object\n    zipf = zipfile.ZipFile(\n        os.path.join(target_directory, f\"{zip_name}.zip\"), \"w\", compression=zipfile.ZIP_DEFLATED\n    )\n\n    # create a list of filenames to zip\n    filenames = []\n    for extension in ['.txt', '.docx', '.xlsx', '.csv']:\n        files_to_zip = glob.glob(os.path.join(source_directory, f\"*{extension}\"))\n        filenames.extend(files_to_zip)\n\n    # compress the list of filenames into a zip file\n    for filename in filenames:\n        zipf.write(filename)\n\n    # close the zip file\n    zipf.close()\n    return os.path.join(target_directory, f\"{zip_name}.zip\")", "compilation_passed": true, "time": 0.03133106231689453, "tests_passed": true, "error": null}
{"code": "if os.path.exists(source_directory) is False:\n        raise OSError(f'The source directory does not exist: {source_directory}')\n    zipped_files_path = os.path.join(target_directory, f'{zip_name}.zip')\n    if os.path.exists(zipped_files_path):\n        raise OSError(f'The zipped file already exists: {zipped_files_path}')\n\n    exts = ['.txt', '.docx', '.xlsx', '.csv']\n    target_files = [\n        filename\n        for filename in glob.glob(os.path.join(source_directory, '**/*.txt')) + glob.glob(\n            os.path.join(source_directory, '**/*.docx')) + glob.glob(\n            os.path.join(source_directory, '**/*.xlsx')) + glob.glob(\n            os.path.join(source_directory, '**/*.csv'))\n        if os.path.splitext(filename)[1] in", "compilation_passed": false, "time": 0.0002510547637939453, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Check for file existence\n    if not os.path.exists(source_directory):\n        raise OSError('No such file or directory: source_directory')\n\n    # Find all the files with valid extensions\n    valid_extensions = ['.txt', '.docx', '.xlsx', '.csv']\n    file_extensions = [file for file in os.listdir(source_directory) if file.endswith(tuple(valid_extensions))]\n\n    # Save the path to the zipfile to a variable\n    zipfile_path = os.path.join(target_directory, zip_name) + '.zip'\n\n    # Create the zipfile if it doesn't exist\n    if not os.path.exists(zipfile_path):\n        zip_file = zipfile.ZipFile(zipfile_path, mode='w')\n\n    # Iterate through all the valid file extensions and add each file to the zipfile\n    for file_extension in file_extensions:\n        zip_file.write(os.path.join(source_directory, file_extension))\n\n    ", "compilation_passed": true, "time": 0.006476163864135742, "tests_passed": false, "error": "AttributeError"}
{"code": "if not os.path.isdir(source_directory):\n        raise OSError(f\"{source_directory} is not a valid directory.\")\n\n    file_list = []\n    for root, _, files in os.walk(source_directory):\n        for file in files:\n            file_path = os.path.join(root, file)\n            if os.path.isfile(file_path):\n                extension = Path(file_path).suffix.lower()\n                if extension in ['.txt', '.docx', '.xlsx', '.csv']:\n                    file_list.append(file_path)\n\n    with zipfile.ZipFile(target_directory + os.sep + zip_name + '.zip', 'w') as zip_file:\n        for file in file_list:\n            zip_file.write(file, os.path.relpath(file, source_directory))\n\n    return target_directory + os.sep + zip_name + '.zip'", "compilation_passed": true, "time": 0.04013323783874512, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(source_directory):\n        raise OSError('Source directory does not exist')\n\n    zip_file_path = f\"{target_directory}/{zip_name}.zip\"\n    with zipfile.ZipFile(zip_file_path, 'w', zipfile.ZIP_DEFLATED) as zip_file:\n        for file_path in glob.glob(f\"{source_directory}/*\"):\n            file = Path(file_path)\n            extension = file.suffix.lower()\n            if extension in ['.txt', '.docx', '.xlsx', '.csv']:\n                zip_file.write(file, arcname=file.relative_to(source_directory))\n\n    return zip_file_path", "compilation_passed": true, "time": 0.02820110321044922, "tests_passed": true, "error": null}
{"code": "if not Path(source_directory).exists():\n        raise OSError('Directory {} does not exist'.format(source_directory))\n\n    # Get all file paths in the source directory with the right extensions\n    file_paths = glob.glob(os.path.join(source_directory, '*.txt'))\n    file_paths += glob.glob(os.path.join(source_directory, '*.docx'))\n    file_paths += glob.glob(os.path.join(source_directory, '*.xlsx'))\n    file_paths += glob.glob(os.path.join(source_directory, '*.csv'))\n\n    # Create a ZipFile object and add the file paths to it\n    with zipfile.ZipFile(os.path.join(target_directory, zip_name + '.zip'), 'w') as zip_file:\n        for file_path in file_paths:\n            zip_file.write(file_path, os.path.basename(file_path))\n\n    return os.path.join(target_directory, zip_name + '", "compilation_passed": false, "time": 0.00010275840759277344, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Check if the source_directory exists\n    if not os.path.exists(source_directory):\n        raise OSError(\"Source directory does not exist.\")\n\n    # Get all files with .txt, .docx, .xlsx, .csv extensions\n    files = glob.glob(os.path.join(source_directory, '*.txt')) + glob.glob(os.path.join(source_directory, '*.docx')) + \\\n            glob.glob(os.path.join(source_directory, '*.xlsx')) + glob.glob(os.path.join(source_directory, '*.csv'))\n\n    # Check if the target_directory exists, if not, create it\n    if not os.path.exists(target_directory):\n        os.makedirs(target_directory)\n\n    # Create the full path to the zip file\n    zip_file = os.path.join(target_directory, zip_name + '.zip')\n\n    # Create a zip file with the files\n    with zipfile.ZipFile(zip_", "compilation_passed": false, "time": 0.00019216537475585938, "tests_passed": false, "error": "SyntaxError"}
{"code": "target_path = Path(target_directory) / Path(zip_name + '.zip')\n\n    try:\n        source_path = Path(source_directory)\n    except FileNotFoundError:\n        raise OSError(\n            f\"Source directory {source_directory} does not exist!\")\n\n    files_to_zip = []\n    for ext in ['txt', 'docx', 'xlsx', 'csv']:\n        files_to_zip.extend(glob.glob(str(source_path / f'*{ext}'), recursive=True))\n\n    with zipfile.ZipFile(target_path, 'w', zipfile.ZIP_DEFLATED) as zip_file:\n        for file in files_to_zip:\n            zip_file.write(str(file))\n\n    return str(target_path)", "compilation_passed": true, "time": 0.03179597854614258, "tests_passed": true, "error": null}
{"code": "source_directory = Path(source_directory)\n    target_directory = Path(target_directory)\n    if not source_directory.is_dir():\n        raise OSError(\"Invalid source directory\")\n\n    zip_path = target_directory / (zip_name + \".zip\")\n\n    valid_extensions = ['.txt', '.docx', '.xlsx', '.csv']\n\n    # Iterate through the files in the source directory and extract the ones with the right extensions\n    files_to_zip = glob.glob(os.path.join(source_directory, '*.*'))\n    files_to_zip = [file for file in files_to_zip if os.path.splitext(file)[-1] in valid_extensions]\n    zip_archive = zipfile.ZipFile(zip_path, 'w', compression=zipfile.ZIP_DEFLATED)\n    for file in files_to_zip:\n        zip_archive.write(file)\n    zip_archive.close()\n\n    return str(zip_path)\n\n", "compilation_passed": true, "time": 0.028692007064819336, "tests_passed": true, "error": null}
{"code": "# Checking if the source directory exists\n    try:\n        os.path.exists(source_directory)\n    except FileNotFoundError:\n        raise OSError(f\"The source directory {source_directory} does not exist.\")\n\n    # List all files in the source directory\n    source_files = glob.glob(os.path.join(source_directory, \"*\"))\n\n    # Filtering the list of files based on file extensions\n    txt_files = [\n        file for file in source_files if os.path.splitext(file)[1] == \".txt\"\n    ]\n    docx_files = [\n        file for file in source_files if os.path.splitext(file)[1] == \".docx\"\n    ]\n    xlsx_files = [\n        file for file in source_files if os.path.splitext(file)[1] == \".xlsx\"\n    ]\n    csv_files = [\n        file for file in source_files if os.path.splitext(file)[1] == \".csv\"\n    ", "compilation_passed": false, "time": 0.00023698806762695312, "tests_passed": false, "error": "SyntaxError"}
{"code": "# check that the source directory exists\n    source_directory_path = Path(source_directory)\n    if not source_directory_path.exists():\n        raise OSError('Source directory does not exist')\n\n    # create the target directory if it doesn't exist\n    if not os.path.exists(target_directory):\n        os.makedirs(target_directory)\n\n    # get the list of files in the source directory\n    file_extensions = ['.txt', '.docx', '.xlsx', '.csv']\n    source_files = []\n    for extension in file_extensions:\n        source_files.extend(glob.glob(source_directory + '/**/*' + extension, recursive=True))\n\n    # get the path to the zip file\n    zip_file_path = os.path.join(target_directory, zip_name + '.zip')\n\n    # create the zip file\n    with zipfile.ZipFile(zip_file_path, 'w', zipfile.ZIP_DEFLATED) as zip_file:\n        for source_file", "compilation_passed": false, "time": 0.00019884109497070312, "tests_passed": false, "error": "SyntaxError"}
{"code": "try:\n        Path(source_directory).is_dir()\n    except FileNotFoundError as err:\n        raise OSError from err\n\n    if Path(target_directory).exists() is False:\n        os.makedirs(target_directory, exist_ok=True)\n\n    extensions = ['.txt', '.docx', '.xlsx', '.csv']\n    for extension in extensions:\n        for file_name in glob.glob(source_directory + extension):\n            if Path(file_name).exists():\n                zip_file_name = f\"{Path(target_directory) / zip_name}.zip\"\n                zip_file_path = f\"{Path(target_directory) / zip_file_name}\"\n\n                if zipfile.is_zipfile(zip_file_path):\n                    zipfile.ZipFile(zip_file_path, 'a').close()\n                else:\n                    with zipfile.ZipFile(zip_file_path, 'w') as zip_file:\n                        zip_file.write(", "compilation_passed": false, "time": 0.00024008750915527344, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Check if the source_directory exists\n    if not os.path.exists(source_directory):\n        raise OSError(\"The source directory does not exist.\")\n\n    # Define the extensions to zip\n    extensions_to_zip = ['.txt', '.docx', '.xlsx', '.csv']\n\n    # Create a list of paths to files to be zipped\n    file_paths = [p for p in Path(source_directory).glob(\"*.*\") if p.suffix.lower() in extensions_to_zip]\n\n    # Create a new zip file with the specified name and save it in the target directory\n    with zipfile.ZipFile(os.path.join(target_directory, zip_name + \".zip\"), 'w', zipfile.ZIP_DEFLATED) as zip_file:\n        for file_path in file_paths:\n            zip_file.write(file_path)\n\n    # Return the path to the created zip file\n    return os.path.join(target_directory, zip_name + \"", "compilation_passed": false, "time": 7.915496826171875e-05, "tests_passed": false, "error": "SyntaxError"}
{"code": "source_directory = Path(source_directory)\n    target_directory = Path(target_directory)\n    target_directory.mkdir(exist_ok=True, parents=True)\n    zip_name = f\"{zip_name}.zip\"\n\n    for file_name in glob.glob(str(source_directory / '**/*.txt')):\n        zipfile.ZipFile(target_directory / zip_name, 'a').write(file_name)\n\n    for file_name in glob.glob(str(source_directory / '**/*.docx')):\n        zipfile.ZipFile(target_directory / zip_name, 'a').write(file_name)\n\n    for file_name in glob.glob(str(source_directory / '**/*.xlsx')):\n        zipfile.ZipFile(target_directory / zip_name, 'a').write(file_name)\n\n    for file_name in glob.glob(str(source_directory / '**/*.csv')):\n        zipfile.ZipFile(target_directory / zip_", "compilation_passed": false, "time": 0.00021409988403320312, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Ensure the source_directory exists\n    if not os.path.exists(source_directory):\n        raise OSError(\"Source directory does not exist\")\n\n    # Get all files with a .txt or .docx or .xlsx or .csv extension in source_directory\n    source_files = glob.glob(f\"{source_directory}/*.{['txt', 'docx', 'xlsx', 'csv']}\")\n\n    # Create the target directory if it doesn't exist\n    os.makedirs(target_directory, exist_ok=True)\n\n    # Get the full path to the zip file\n    zip_file_path = os.path.join(target_directory, f\"{zip_name}.zip\")\n\n    # Create the zip file\n    with zipfile.ZipFile(zip_file_path, 'w') as zip_file:\n        for source_file in source_files:\n            # Get the relative path from the source_directory to the source_file\n            relative_path = os.path.relpath(source_", "compilation_passed": false, "time": 0.00017690658569335938, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not os.path.isdir(source_directory):\n        raise OSError(f\"Source directory {source_directory} doesn't exist.\")\n\n    valid_extensions = ['.txt', '.docx', '.xlsx', '.csv']\n\n    file_paths = []\n    for root, dirs, files in os.walk(source_directory):\n        for file in files:\n            file_path = os.path.join(root, file)\n            file_extension = os.path.splitext(file_path)[-1].lower()\n            if file_extension not in valid_extensions:\n                continue\n            file_paths.append(file_path)\n\n    zip_file_path = os.path.join(target_directory, zip_name) + '.zip'\n    with zipfile.ZipFile(zip_file_path, 'w') as zip_file:\n        for file_path in file_paths:\n            zip_file.write(file_path)\n\n    return zip_file_path", "compilation_passed": true, "time": 0.042283058166503906, "tests_passed": true, "error": null}
{"code": "# Create target directory if it does not exist\n    if not os.path.isdir(target_directory):\n        os.makedirs(target_directory)\n\n    # Extract files that match the given extensions and save them as a zip file\n    zip_path = os.path.join(target_directory, zip_name + '.zip')\n    with zipfile.ZipFile(zip_path, 'w') as zip_file:\n        for file_path in glob.glob(os.path.join(source_directory, '**', '*')):\n            file_extension = os.path.splitext(file_path)[-1]\n            if file_extension in ['.txt', '.docx', '.xlsx', '.csv']:\n                zip_file.write(file_path)\n\n    # Return the full path to the created zip file\n    return zip_path", "compilation_passed": true, "time": 0.018225908279418945, "tests_passed": true, "error": null}
