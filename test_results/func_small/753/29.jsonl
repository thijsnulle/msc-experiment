{"code": "points = [(random.random(), random.random()) for _ in range(n)]\n    distances = [math.sqrt(x ** 2 + y ** 2) for x, y in points]\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.001119852066040039, "tests_passed": true, "error": null}
{"code": "points = []\n    for _ in range(n):\n        x = random.uniform(-RADIUS, RADIUS)\n        y = random.uniform(-RADIUS, RADIUS)\n        z = math.sqrt(x*x + y*y)\n        if z < RADIUS:\n            points.append((x, y))\n    mean = statistics.mean([(p[0]**2 + p[1]**2)**0.5 for p in points])\n    return mean", "compilation_passed": true, "time": 0.0016810894012451172, "tests_passed": true, "error": null}
{"code": "# Generate n points within the unit circle\n    points = [\n        (random.uniform(-RADIUS, RADIUS), random.uniform(-RADIUS, RADIUS))\n        for _ in range(n)\n    ]\n\n    # Calculate the average distance from the center of the circle\n    sum_distance = sum(\n        math.sqrt(point[0] ** 2 + point[1] ** 2) for point in points\n    )\n    avg_distance = sum_distance / n\n    return avg_distance", "compilation_passed": true, "time": 0.0009012222290039062, "tests_passed": true, "error": null}
{"code": "points = []\n    for i in range(n):\n        x, y = random.uniform(0, RADIUS*2), random.uniform(0, RADIUS*2)\n        distance = math.sqrt(x**2 + y**2)\n        points.append(distance)\n\n    return statistics.mean(points)", "compilation_passed": true, "time": 0.001111745834350586, "tests_passed": true, "error": null}
{"code": "if not isinstance(n, int):\n        raise TypeError(f\"n must be an integer, not a {type(n)}\")\n\n    if n < 0:\n        raise ValueError(f\"n must be a positive number, not {n}\")\n\n    # generate n random points within a circle of radius RADIUS (default value is 5)\n    points = [(random.uniform(-RADIUS, RADIUS), random.uniform(-RADIUS, RADIUS)) for _ in range(n)]\n\n    # calculate the average distance from the center of the circle\n    mean_distance = statistics.mean([math.sqrt(math.pow(x, 2) + math.pow(y, 2)) for x, y in points])\n\n    # return the average distance\n    return mean_distance", "compilation_passed": true, "time": 0.0012331008911132812, "tests_passed": true, "error": null}
{"code": "points = []\n    for _ in range(n):\n        x, y = random.uniform(-RADIUS, RADIUS), random.uniform(-RADIUS, RADIUS)\n        points.append((x, y))\n    return statistics.mean([math.dist(points[i], (0, 0)) for i in range(n)])", "compilation_passed": true, "time": 0.0011508464813232422, "tests_passed": true, "error": null}
{"code": "points = []\n    for _ in range(n):\n        x = random.uniform(-RADIUS, RADIUS)\n        y = random.uniform(-RADIUS, RADIUS)\n        points.append((x, y))\n    x_avg = sum(x for (x, y) in points) / n\n    y_avg = sum(y for (x, y) in points) / n\n    average_distance = math.sqrt(x_avg ** 2 + y_avg ** 2)\n    return average_distance", "compilation_passed": true, "time": 0.0008692741394042969, "tests_passed": true, "error": null}
{"code": "points = [(random.uniform(0, RADIUS * 2), random.uniform(0, RADIUS * 2)) for _ in range(n)]\n    average_distance = statistics.mean([math.hypot(x, y) for x, y in points])\n    return average_distance", "compilation_passed": true, "time": 0.001071929931640625, "tests_passed": true, "error": null}
{"code": "# Generate n random points within a circle\n    points = [\n        (random.uniform(0, 100), random.uniform(0, 100)) for _ in range(n)\n    ]\n\n    # Calculate the average distance from the center\n    total_distance = sum(\n        math.sqrt(\n            (point[0] - 50)**2 + (point[1] - 50)**2\n        )\n        for point in points\n    )\n    average_distance = total_distance / n\n\n    return average_distance", "compilation_passed": true, "time": 0.0014269351959228516, "tests_passed": true, "error": null}
{"code": "points = []\n\n    for i in range(n):\n        x = random.uniform(0, 2 * RADIUS)\n        y = random.uniform(0, 2 * RADIUS)\n        points.append((x, y))\n\n    distance = statistics.mean([math.sqrt((x - 1) ** 2 + (y - 1) ** 2) for x, y in points])\n    return distance", "compilation_passed": true, "time": 0.0011570453643798828, "tests_passed": true, "error": null}
{"code": "points = [(random.uniform(-RADIUS, RADIUS), random.uniform(-RADIUS, RADIUS)) for _ in range(n)]\n    return statistics.mean(math.sqrt(sum(point[0] ** 2 for point in points)), math.sqrt(sum(point[1] ** 2 for point in points)))", "compilation_passed": true, "time": 0.0009250640869140625, "tests_passed": false, "error": "TypeError"}
{"code": "points = []\n    for _ in range(n):\n        x = random.random()\n        y = random.random()\n        points.append((x, y))\n\n    x_sum = y_sum = 0\n    for x, y in points:\n        x_sum += x\n        y_sum += y\n    return math.sqrt((x_sum / n) ** 2 + (y_sum / n) ** 2) / n", "compilation_passed": true, "time": 0.0006988048553466797, "tests_passed": true, "error": null}
{"code": "# Generate random points within a circle of radius RADIUS\n    points = [(random.uniform(-RADIUS, RADIUS), random.uniform(-RADIUS, RADIUS)) for _ in range(n)]\n\n    # Compute the average distance from the center of the circle\n    average_distance = statistics.mean([math.dist(points[i], (0, 0)) for i in range(n)])\n\n    return average_distance", "compilation_passed": true, "time": 0.0011200904846191406, "tests_passed": true, "error": null}
{"code": "points = []\n    for i in range(n):\n        x = random.uniform(0, RADIUS)\n        y = random.uniform(0, RADIUS)\n        points.append((x, y))\n\n    total_distance = 0\n    for i in range(n - 1):\n        x1, y1 = points[i]\n        x2, y2 = points[i + 1]\n        distance = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\n        total_distance += distance\n\n    average_distance = total_distance / n\n    return average_distance", "compilation_passed": true, "time": 0.0009579658508300781, "tests_passed": true, "error": null}
{"code": "points = [(random.uniform(0, RADIUS * 2), random.uniform(0, RADIUS * 2)) for _ in range(n)]\n    centroid = sum((point[0], point[1]), (0, 0)) / n\n    distances = [math.sqrt(sum(map(lambda x: (x[0] - centroid[0]) ** 2 + (x[1] - centroid[1]) ** 2, points))) for _ in range(n)]\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0008809566497802734, "tests_passed": false, "error": "NameError"}
{"code": "points = [random.uniform(-RADIUS, RADIUS) for _ in range(n)]\n    points += [random.uniform(-RADIUS, RADIUS) for _ in range(n)]\n    distance = statistics.mean([math.sqrt(math.pow(point[0], 2) + math.pow(point[1], 2)) for point in points])\n    return distance", "compilation_passed": true, "time": 0.0007627010345458984, "tests_passed": false, "error": "TypeError"}
{"code": "# Generate n random points within a circle of radius RADIUS\n    points = [(random.uniform(-RADIUS, RADIUS), random.uniform(-RADIUS, RADIUS)) for _ in range(n)]\n\n    # Calculate the average distance from the center\n    distance_sum = 0\n    for point in points:\n        x, y = point\n        distance_sum += (x ** 2 + y ** 2) ** 0.5\n    return distance_sum / n", "compilation_passed": true, "time": 0.0008859634399414062, "tests_passed": true, "error": null}
{"code": "# Calculate the area of the circle\n    PI = math.pi\n    area = PI * RADIUS ** 2\n    # Calculate the circumference of the circle\n    circumference = 2 * PI * RADIUS\n    # Calculate the average distance from the center\n    average_distance = circumference / n\n    # Return the average distance\n    return average_distance", "compilation_passed": true, "time": 0.0004901885986328125, "tests_passed": true, "error": null}
{"code": "x = random.sample(range(n), n)  # random points\n    y = random.sample(range(n), n)\n    result = statistics.mean([math.sqrt(i ** 2 + j ** 2) for i, j in zip(x, y) if math.sqrt(i ** 2 + j ** 2) < RADIUS])\n    return result", "compilation_passed": true, "time": 0.0018613338470458984, "tests_passed": false, "error": "statistics.StatisticsError"}
{"code": "# Generate n random points within a circle of radius RADIUS\n    points = [\n        [random.uniform(-RADIUS, RADIUS) for _ in range(2)]\n        for _ in range(n)\n    ]\n\n    # Calculate the average distance from the center\n    distance_from_center = statistics.mean(\n        [sum(point ** 2) ** 0.5 for point in points]\n    )\n\n    return distance_from_center", "compilation_passed": true, "time": 0.001074075698852539, "tests_passed": false, "error": "TypeError"}
{"code": "# Generate n random points in the circle\n    points = [complex(random.gauss(0, RADIUS), random.gauss(0, RADIUS)) for _ in range(n)]\n\n    # Calculate the average distance from the center\n    center = complex(0, 0)\n    total_distance = sum(abs(point - center) for point in points)\n    average_distance = total_distance / n\n\n    return average_distance", "compilation_passed": true, "time": 0.0012707710266113281, "tests_passed": true, "error": null}
{"code": "x = []\n    y = []\n    for i in range(0, n):\n        x.append(random.randint(0, 20))\n        y.append(random.randint(0, 20))\n    dist = 0\n    for i in range(n):\n        dist += math.sqrt(x[i] ** 2 + y[i] ** 2)\n    return dist / n", "compilation_passed": true, "time": 0.0012059211730957031, "tests_passed": true, "error": null}
{"code": "points = []\n    for _ in range(n):\n        x = random.uniform(-RADIUS, RADIUS)\n        y = random.uniform(-RADIUS, RADIUS)\n        points.append((x, y))\n    x_avg = sum(x for x, _ in points) / len(points)\n    y_avg = sum(y for _, y in points) / len(points)\n    avg_distance = math.sqrt(x_avg ** 2 + y_avg ** 2)\n    return avg_distance", "compilation_passed": true, "time": 0.0008661746978759766, "tests_passed": true, "error": null}
{"code": "points = [(random.uniform(-RADIUS, RADIUS), random.uniform(-RADIUS, RADIUS)) for _ in range(n)]\n    x = [point[0] for point in points]\n    y = [point[1] for point in points]\n    distance = math.sqrt(sum((x_i - x) ** 2 + (y_i - y) ** 2 for x_i, y_i in zip(x, y)) / n)\n    return distance", "compilation_passed": true, "time": 0.0009317398071289062, "tests_passed": false, "error": "TypeError"}
{"code": "# Generate n random points within a circle of radius RADIUS\n    points = []\n    for i in range(n):\n        x = random.uniform(-RADIUS, RADIUS)\n        y = random.uniform(-RADIUS, RADIUS)\n        points.append((x, y))\n\n    # Calculate the average distance from the center of the circle\n    distance_sum = 0\n    for i in range(len(points)):\n        for j in range(i+1, len(points)):\n            x1, y1 = points[i]\n            x2, y2 = points[j]\n            distance_sum += math.sqrt((x1-x2)**2+(y1-y2)**2)\n    return distance_sum/n", "compilation_passed": true, "time": 0.06748175621032715, "tests_passed": true, "error": null}
{"code": "points = []\n    for _ in range(n):\n        x = random.uniform(-RADIUS, RADIUS)\n        y = random.uniform(-RADIUS, RADIUS)\n        points.append((x, y))\n    centre_x, centre_y = statistics.mean([point[0] for point in points]), statistics.mean([point[1] for point in points])\n    distances = [math.sqrt(math.pow(x - centre_x, 2) + math.pow(y - centre_y, 2)) for x, y in points]\n    return statistics.mean(distances)", "compilation_passed": true, "time": 0.0018770694732666016, "tests_passed": true, "error": null}
{"code": "# Generate a list of points inside a circle\n    points = [\n        (random.gauss(0, RADIUS), random.gauss(0, RADIUS)) for i in range(n)]\n    # Compute the average distance between the points\n    total_dist = sum([(point[0] ** 2 + point[1] ** 2) ** 0.5 for point in points])\n    avg_dist = total_dist / n\n    return avg_dist", "compilation_passed": true, "time": 0.0013141632080078125, "tests_passed": true, "error": null}
{"code": "random.seed(n)\n    points = [(random.uniform(0, 100), random.uniform(0, 100)) for _ in range(n)]\n    x_avg, y_avg = statistics.mean(x for x, _ in points), statistics.mean(y for _, y in points)\n    total_dist = sum((x - x_avg) ** 2 + (y - y_avg) ** 2 for x, y in points)\n    avg_dist = math.sqrt(total_dist / n)\n    return avg_dist", "compilation_passed": true, "time": 0.0015289783477783203, "tests_passed": true, "error": null}
{"code": "# TODO: Implement this function\n    pass", "compilation_passed": true, "time": 0.0004749298095703125, "tests_passed": false, "error": "TypeError"}
{"code": "x = [random.uniform(-RADIUS, RADIUS) for _ in range(n)]\n    y = [random.uniform(-RADIUS, RADIUS) for _ in range(n)]\n    coords = [(x[i], y[i]) for i in range(n)]\n\n    return statistics.mean([math.sqrt(x**2 + y**2) for x, y in coords])", "compilation_passed": true, "time": 0.0012521743774414062, "tests_passed": true, "error": null}
