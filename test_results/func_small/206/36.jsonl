{"code": "with open(file_name, \"r\") as csv_file:\n        fieldnames = [\"id\", \"name\", \"age\"]\n        reader = csv.DictReader(csv_file, fieldnames=fieldnames)\n        data = []\n        for row in reader:\n            data.append(row)\n        with open(file_name.replace(\"csv\", \"json\"), \"w+\") as json_file:\n            json.dump(data, json_file)\n    return file_name.replace(\"csv\", \"json\")", "compilation_passed": true, "time": 0.001811981201171875, "tests_passed": true, "error": null}
{"code": "if not os.path.exists(file_name):\n        raise FileNotFoundError(f'File not found: {file_name}')\n    with open(file_name, 'r', newline='') as csvfile:\n        reader = csv.DictReader(csvfile, skipinitialspace=True)\n        data = [dict(row) for row in reader]\n        with open(f'{file_name}.json', 'w', newline='') as jsonfile:\n            json.dump(data, jsonfile, indent=4, ensure_ascii=False)\n    return f'{file_name}.json'", "compilation_passed": true, "time": 0.002814054489135742, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if not os.path.isfile(file_name):\n        raise FileNotFoundError('File not found.')\n\n    with open(file_name, newline='') as csvfile:\n        fieldnames = ['id', 'name', 'age']\n        reader = csv.DictReader(csvfile, fieldnames=fieldnames)\n        with open(file_name.replace('csv', 'json'), 'w') as json_file:\n            json.dump(list(reader), json_file, indent=2)", "compilation_passed": true, "time": 0.0017428398132324219, "tests_passed": false, "error": "TypeError"}
{"code": "# TODO:\n    # 1. Verify if file exist\n    if not os.path.exists(file_name):\n        raise FileNotFoundError(f\"File '{file_name}' does not exist.\")\n\n    # TODO:\n    # 2. Convert the csv to json file\n    with open(file_name, 'r', encoding='utf8') as csvfile, open(file_name + '.json', 'w') as json_file:\n        fieldnames = ['id', 'name', 'age']\n        csv_reader = csv.DictReader(csvfile, fieldnames=fieldnames)\n        json_writer = json.JsonWriter(json_file)\n\n        # Write the header to the JSON file\n        json_writer.write_dict(csv_reader.fieldnames)\n\n        # Write each row as a JSON object\n        for row in csv_reader:\n            json_writer.write_dict(row)\n\n    # TODO:\n    # 3. Return the created json file\n    return file_name + '.json'", "compilation_passed": true, "time": 0.001676797866821289, "tests_passed": false, "error": "AttributeError"}
{"code": "# TODO: Create a json file with the content of the csv file.\n    with open(file_name, newline='') as csvfile:\n        reader = csv.DictReader(csvfile)\n        json_file_name = file_name[:-4] + '.json'\n        with open(json_file_name, 'w') as jsonfile:\n            json.dump(reader.fieldnames, jsonfile)\n            for row in reader:\n                json.dump(row, jsonfile)\n                jsonfile.write(\",\")\n        jsonfile.truncate(len(jsonfile.name)-1)\n    return json_file_name", "compilation_passed": true, "time": 0.0016977787017822266, "tests_passed": false, "error": "ValueError"}
{"code": "with open(file_name, \"r\") as csvfile:\n        fieldnames = csv.Sniffer()._field_names(csvfile)\n        csv_reader = csv.DictReader(csvfile, fieldnames=fieldnames)\n        json_data = []\n        for row in csv_reader:\n            json_data.append(row)\n    with open(os.path.splitext(file_name)[0] + \".json\", 'w') as jsonfile:\n        json.dump(json_data, jsonfile, indent=4)\n    return os.path.splitext(file_name)[0] + \".json\"", "compilation_passed": true, "time": 0.001680135726928711, "tests_passed": false, "error": "AttributeError"}
{"code": "with open(file_name, newline='') as csvfile:\n        reader = csv.DictReader(csvfile)\n        fieldnames = reader.fieldnames\n        json_file = f'{file_name[:-4]}.json'\n        with open(json_file, 'w', newline='') as jsonfile:\n            writer = json.dump(fieldnames, jsonfile)\n    return json_file", "compilation_passed": true, "time": 0.0016529560089111328, "tests_passed": true, "error": null}
{"code": "with open(file_name, newline='', encoding=\"utf-8-sig\") as csvfile:\n        reader = csv.DictReader(csvfile)\n        json.dump(list(reader), open(f'{file_name}.json', 'w'))\n        return f'{file_name}.json'", "compilation_passed": true, "time": 0.0030357837677001953, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "# if not os.path.exists(file_name):\n    #     raise FileNotFoundError(f\"File not found: {file_name}\")\n    with open(file_name, \"r\", encoding='utf-8') as f:\n        csv_data = f.read()\n\n    data = csv.reader(csv_data.splitlines())\n    new_data = list(data)\n    data = new_data[1:]\n\n    json_data = []\n    for line in data:\n        json_data.append(dict(zip(new_data[0], line)))\n\n    with open(file_name.replace(\"csv\", \"json\"), \"w\", encoding='utf-8') as f:\n        json.dump(json_data, f)\n\n    return file_name.replace(\"csv\", \"json\")", "compilation_passed": true, "time": 0.003284931182861328, "tests_passed": true, "error": null}
{"code": "with open(file_name, 'r', newline='') as csvfile:\n        reader = csv.DictReader(csvfile)\n        file_name = '{0}.json'.format(file_name)\n        with open(file_name, 'w', newline='') as jsonfile:\n            json.dump(reader.fieldnames, jsonfile)\n            json.dump(list(reader), jsonfile)\n    return file_name", "compilation_passed": true, "time": 0.0018045902252197266, "tests_passed": false, "error": "json.decoder.JSONDecodeError"}
{"code": "csv_file = os.path.join(\"files\", file_name)\n    with open(csv_file, newline='') as csvfile:\n        fieldnames = ['id', 'name', 'age']\n        reader = csv.DictReader(csvfile)\n        json_file = os.path.join(\"files\", f\"{file_name[:-4]}.json\")\n        with open(json_file, \"w\") as jsonfile:\n            json.dump(list(reader), jsonfile, indent=4)\n    return json_file", "compilation_passed": true, "time": 0.0015821456909179688, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "try:\n        with open(file_name, mode='r', newline='') as csvfile:\n            fieldnames = csv.DictReader(csvfile).fieldnames\n            data = [row for row in csv.DictReader(csvfile)]\n        with open(file_name + '.json', mode='w', newline='') as jsonfile:\n            json.dump(data, jsonfile, indent=4, ensure_ascii=False)\n    except FileNotFoundError:\n        print(\"File not found!\")\n        raise FileNotFoundError\n    return file_name + '.json'", "compilation_passed": true, "time": 0.0016880035400390625, "tests_passed": true, "error": null}
{"code": "file_path = os.path.join(os.path.dirname(__file__), file_name)\n    if not os.path.isfile(file_path):\n        raise FileNotFoundError('File not found')\n\n    fieldnames = ['id', 'name', 'age']\n    with open(file_path, 'r', newline='') as csvfile:\n        reader = csv.DictReader(csvfile, fieldnames=fieldnames)\n        with open(file_path.replace('.csv', '.json'), 'w') as jsonfile:\n            json.dump([dict(row) for row in reader], jsonfile, indent=4)\n\n    return file_path.replace('.csv', '.json')", "compilation_passed": true, "time": 0.001692056655883789, "tests_passed": false, "error": "NameError"}
{"code": "with open(file_name, newline='') as csvfile:\n        reader = csv.DictReader(csvfile)\n        file_name, extension = os.path.splitext(file_name)\n        json_file = file_name + '.json'\n        with open(json_file, 'w', encoding='utf8') as json_file:\n            json.dump(reader.fieldnames, json_file, indent=4)\n            for row in reader:\n                json.dump(row, json_file, indent=None)\n            json.dump([], json_file, indent=None)\n    return json_file", "compilation_passed": true, "time": 0.0016782283782958984, "tests_passed": false, "error": "TypeError"}
{"code": "path, ext = os.path.splitext(file_name)\n    return f'{path}.json'", "compilation_passed": true, "time": 0.001416921615600586, "tests_passed": true, "error": null}
{"code": "csv_file = os.path.join(os.path.dirname(file_name), 'report_' + os.path.basename(file_name))\n    with open(file_name, 'r') as csv_file, open(csv_file, 'w') as json_file:\n        reader = csv.DictReader(csv_file)\n        writer = csv.DictWriter(json_file, fieldnames=reader.fieldnames)\n        writer.writeheader()\n        for row in reader:\n            writer.writerow(row)\n    return csv_file", "compilation_passed": true, "time": 0.001489877700805664, "tests_passed": false, "error": "TypeError"}
{"code": "with open(file_name, newline='') as csvfile:\n        reader = csv.DictReader(csvfile)\n        data = [r for r in reader]\n\n    file_name = file_name[:-4] + '.json'\n    with open(file_name, 'w') as json_file:\n        json.dump(data, json_file, indent=4)\n\n    return file_name", "compilation_passed": true, "time": 0.003387928009033203, "tests_passed": true, "error": null}
{"code": "with open(file_name, 'r', newline='') as csvfile:\n        fieldnames = csv.reader(csvfile, delimiter=',').next()\n        json.dump(list(csv.reader(csvfile, delimiter=',')), open(os.path.join(file_name, '.json'), 'w'))\n    return os.path.join(file_name, '.json')", "compilation_passed": true, "time": 0.001627206802368164, "tests_passed": false, "error": "AttributeError"}
{"code": "path = os.path.join(os.path.dirname(__file__), file_name)\n\n    with open(path) as file:\n        reader = csv.DictReader(file)\n        json.dumps(list(reader), indent=4)\n\n    file_name_json = file_name[:-4] + '.json'\n    with open(file_name_json, 'w') as file_json:\n        json.dump(list(reader), file_json)\n    return file_name_json", "compilation_passed": true, "time": 0.0015158653259277344, "tests_passed": false, "error": "NameError"}
{"code": "csv_file_path = file_name\n    json_file_path = os.path.splitext(csv_file_path)[0] + '.json'\n    with open(csv_file_path, 'r') as csv_file, open(json_file_path, 'w') as json_file:\n        csv_reader = csv.DictReader(csv_file, delimiter=',')\n        json.dump(list(csv_reader), json_file, default=str, indent=4)\n    return json_file_path", "compilation_passed": true, "time": 0.003242015838623047, "tests_passed": true, "error": null}
{"code": "file_dir, file_name = os.path.split(file_name)\n    file_name, file_ext = os.path.splitext(file_name)\n    file_ext = file_ext.lstrip(\".\")\n    file_name = file_name.lstrip(\"_\")\n    return f'{file_dir}/report_{file_name}.{file_ext}.json'", "compilation_passed": true, "time": 0.0015239715576171875, "tests_passed": true, "error": null}
{"code": "path = os.path.realpath(file_name)\n\n    if not os.path.exists(path):\n        raise FileNotFoundError(f'{file_name} not found')\n\n    if not path.endswith(\".csv\"):\n        raise TypeError(f'{file_name} is not a csv file')\n\n    with open(path, newline='') as csvfile:\n        reader = csv.DictReader(csvfile, delimiter=',')\n\n        json_file = os.path.splitext(path)[0] + \".json\"\n        with open(json_file, \"w\") as json_file:\n            json.dump([r._asdict() for r in reader], json_file)\n\n    return json_file", "compilation_passed": true, "time": 0.0018160343170166016, "tests_passed": false, "error": "AttributeError"}
{"code": "if not os.path.exists(file_name):\n        raise FileNotFoundError\n    with open(file_name, mode='r') as csv_file:\n        reader = csv.DictReader(csv_file)\n        data = []\n        for row in reader:\n            data.append(row)\n    with open(file_name + '.json', mode='w') as json_file:\n        json.dump(data, json_file)\n        return json_file.name", "compilation_passed": true, "time": 0.002824068069458008, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "with open(file_name) as csv_file:\n        file = csv.DictReader(csv_file)\n        data = list(file)\n\n    with open(file_name[:-4] + '.json', 'w') as json_file:\n        json.dump(data, json_file)\n\n    return file_name[:-4] + '.json'", "compilation_passed": true, "time": 0.0035538673400878906, "tests_passed": true, "error": null}
{"code": "if not os.path.isfile(file_name):\n        raise FileNotFoundError(f\"File '{file_name}' does not exist.\")\n    with open(file_name, 'r') as csvfile:\n        with open(file_name + \".json\", \"w\") as json_file:\n            reader = csv.reader(csvfile, delimiter=',')\n            headers = next(reader)\n            json.dump(headers, json_file)\n            for row in reader:\n                json.dump(row, json_file)\n                json.dump(\",\", json_file)\n    return file_name + \".json\"", "compilation_passed": true, "time": 0.0018630027770996094, "tests_passed": false, "error": "json.decoder.JSONDecodeError"}
{"code": "with open(file_name, newline='') as csvfile:\n        reader = csv.DictReader(csvfile)\n        data = []\n        for row in reader:\n            data.append(row)\n\n    with open(f'{file_name}.json', 'w', newline='') as jsonfile:\n        json.dump(data, jsonfile, indent=4)\n\n    return f'{file_name}.json'", "compilation_passed": true, "time": 0.0027260780334472656, "tests_passed": false, "error": "FileNotFoundError"}
{"code": "if not os.path.isfile(file_name):\n        raise FileNotFoundError(file_name)\n\n    with open(file_name) as file:\n        reader = csv.DictReader(file, skipinitialspace=True)\n        json_data = list(reader)\n\n    json_data = [{\"id\": item[\"id\"], \"name\": item[\"name\"], \"age\": item[\"age\"]} for item in json_data]\n    with open(file_name.replace('.csv', '.json'), 'w') as json_file:\n        json.dump(json_data, json_file, indent=4)\n\n    return file_name.replace('.csv', '.json')", "compilation_passed": true, "time": 0.002015829086303711, "tests_passed": false, "error": "KeyError"}
{"code": "with open(file_name, encoding='utf8') as csvfile, open(f\"{file_name.split('.')[0]}_report.json\", 'w', encoding='utf8') as jsonfile:\n        reader = csv.DictReader(csvfile)\n        writer = json.dump(reader, jsonfile)\n    return f\"{file_name.split('.')[0]}_report.json\"", "compilation_passed": true, "time": 0.0016219615936279297, "tests_passed": false, "error": "TypeError"}
{"code": "with open(file_name) as f:\n        rows = csv.DictReader(f)\n        data = []\n        for row in rows:\n            data.append(dict(row))\n        json.dump(data, open(f.name.replace(\".csv\", \".json\"), \"w\"), indent=2)\n        return f.name.replace(\".csv\", \".json\")", "compilation_passed": true, "time": 0.0032548904418945312, "tests_passed": true, "error": null}
{"code": "path = os.path.join(os.path.dirname(__file__), file_name)\n    with open(path, 'r') as csvfile:\n        reader = csv.DictReader(csvfile)\n        result = [{key: row[key] for key in row.keys()} for row in reader]\n    json_file = f'temp_{os.path.splitext(file_name)[1]}'\n    with open(json_file, 'w') as f:\n        json.dump(result, f)\n    return json_file", "compilation_passed": true, "time": 0.0015690326690673828, "tests_passed": false, "error": "NameError"}
