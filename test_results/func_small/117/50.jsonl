{"code": "set_seed(seed)\n    if name_list is None:\n        name_list = ['John', 'Mike', 'Sara', 'Emma', 'Nick']\n    if gender_list is None:\n        gender_list = ['Male', 'Female']\n\n    df = pd.DataFrame(\n        data=dict(\n            Name=pd.Series(map(choice, name_list)),\n            Age=np.random.randint(*age_range, size=num_of_students),\n            Gender=pd.Series(map(choice, gender_list)),\n            Score=np.random.randint(*score_range, size=num_of_students)\n        )\n    )\n    return df", "compilation_passed": true, "time": 0.0015418529510498047, "tests_passed": false, "error": "ValueError"}
{"code": "# Check that num_of_students is positive\n    if not num_of_students > 0:\n        raise ValueError(\"num_of_students must be a positive integer.\")\n\n    # Set seed for the random number generator\n    set_seed(seed)\n\n    # Default lists to be used\n    name_list = name_list or ['John', 'Mike', 'Sara', 'Emma', 'Nick']\n    gender_list = gender_list or ['Male', 'Female']\n\n    # Generate DataFrame\n    student_data = pd.DataFrame(\n        np.random.randint(low=age_range[0], high=age_range[1] + 1, size=(num_of_students, 4)),\n        columns=['Age', 'Gender', 'Score']\n    )\n\n    # Generate column 'Name' with values randomly drawn from the list 'name_list'\n    student_data['Name'] = student_data.apply(lambda row: choice(name_list), axis=1)\n\n    ", "compilation_passed": true, "time": 0.001241922378540039, "tests_passed": false, "error": "ValueError"}
{"code": "set_seed(seed)\n\n    if num_of_students < 1:\n        raise ValueError(\"num_of_students must be a positive integer.\")\n\n    if name_list is None:\n        name_list = ['John', 'Mike', 'Sara', 'Emma', 'Nick']\n    if gender_list is None:\n        gender_list = ['Male', 'Female']\n\n    # Generate student names\n    name_choices = list(name_list)\n    students_name = [choice(name_choices) for _ in range(num_of_students)]\n\n    # Generate student ages\n    students_age = np.random.randint(*age_range, num_of_students)\n\n    # Generate student genders\n    gender_choices = list(gender_list)\n    students_gender = [choice(gender_choices) for _ in range(num_of_students)]\n\n    # Generate student scores\n    students_score = np.random.randint(*score_range, num", "compilation_passed": false, "time": 0.0002460479736328125, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Validate num_of_students\n    if num_of_students < 1:\n        raise ValueError('num_of_students must be a positive integer.')\n    # Create student data frame\n    # Define lists for student names, ages, genders, and scores\n    if name_list is None:\n        name_list = ['John', 'Mike', 'Sara', 'Emma', 'Nick']\n    if gender_list is None:\n        gender_list = ['Male', 'Female']\n\n    student_names = [choice(name_list) for i in range(num_of_students)]\n    ages = [np.random.randint(age_range[0], age_range[1], i) for i in range(num_of_students)]\n    genders = [choice(gender_list) for _ in range(num_of_students)]\n    scores = [np.random.randint(score_range[0], score_range[1], i) for i in range(num_of_students)]\n", "compilation_passed": true, "time": 0.0010991096496582031, "tests_passed": false, "error": "TypeError"}
{"code": "# validate input parameters\n    if num_of_students <= 0:\n        raise ValueError(\"'num_of_students' must be a positive integer.\")\n\n    # initialize data frame with default column names and index\n    student_data = pd.DataFrame({\n        'Name': ['John', 'Mike', 'Sara', 'Emma', 'Nick'],\n        'Age': [20, 19, 16, 17, 16],\n        'Gender': ['Male', 'Female', 'Male', 'Female', 'Male'],\n        'Score': [52, 84, 69, 72, 82]\n    }, index=[i+1 for i in range(num_of_students)])\n\n    # seed random number generator with specified seed value\n    set_seed(seed)\n\n    # set name list for students\n    name_list = name_list or ['John', 'Mike', 'Sara', 'Emma', 'Nick']", "compilation_passed": true, "time": 0.0012259483337402344, "tests_passed": false, "error": "ValueError"}
{"code": "if num_of_students <= 0:\n        raise ValueError(\"Number of students must be a positive integer.\")\n\n    name_list = name_list or ['John', 'Mike', 'Sara', 'Emma', 'Nick']\n    gender_list = gender_list or ['Male', 'Female']\n\n    seed(seed)\n    np.random.seed(seed)\n    set_seed(seed)\n\n    if not (len(name_list) >= num_of_students and len(gender_list) == num_of_students):\n        raise ValueError(\"The length of name_list must be >= num_of_students.\")\n\n    age_list = list(np.random.choice(age_range, num_of_students))\n\n    name_list = choice(name_list, size=num_of_students)\n\n    gender_list = choice(gender_list, size=num_of_students)\n\n    score_list = list(np.random.choice(score_range, num_", "compilation_passed": false, "time": 0.0002522468566894531, "tests_passed": false, "error": "SyntaxError"}
{"code": "set_seed(seed)\n    name_list = name_list or ['John', 'Mike', 'Sara', 'Emma', 'Nick']\n    gender_list = gender_list or ['Male', 'Female']\n    names = [name_list[random.randrange(len(name_list))] for _ in range(num_of_students)]\n    ages = [random.randint(age_range[0], age_range[1]) for _ in range(num_of_students)]\n    genders = [gender_list[random.randrange(len(gender_list))] for _ in range(num_of_students)]\n    scores = [random.randint(score_range[0], score_range[1]) for _ in range(num_of_students)]\n    students = pd.DataFrame({\n        'Name': names,\n        'Age': ages,\n        'Gender': genders,\n        'Score': scores\n    })\n\n    return students", "compilation_passed": true, "time": 0.0010287761688232422, "tests_passed": false, "error": "NameError"}
{"code": "if not num_of_students > 0:\n        raise ValueError(\"Number of students must be a positive integer.\")\n\n    if name_list is None:\n        name_list = ['John', 'Mike', 'Sara', 'Emma', 'Nick']\n    if gender_list is None:\n        gender_list = ['Male', 'Female']\n\n    np.random.seed(seed)\n    set_seed(seed)\n\n    # Create student names randomly from name_list\n    name_lst = [name for name in choice(name_list, num_of_students)]\n\n    # Create student gender randomly from gender_list\n    gender_lst = [choice(gender_list) for i in range(num_of_students)]\n\n    # Create student age randomly within the specified range, inclusive\n    age_lst = [int(np.random.randint(*age_range)) for _ in range(num_of_students)]\n\n    # Create student scores randomly within the specified range, inclusive\n    score_lst = [int(np.random", "compilation_passed": false, "time": 0.00023889541625976562, "tests_passed": false, "error": "SyntaxError"}
{"code": "name_list = name_list or ['John', 'Mike', 'Sara', 'Emma', 'Nick']\n    gender_list = gender_list or ['Male', 'Female']\n    # The pandas DataFrame class is instantiated with columns corresponding to student names, ages, genders, and scores\n    student_data = pd.DataFrame(columns=['Name', 'Age', 'Gender', 'Score'])\n\n    # The function uses random.choice() to generate randomly selected names and genders\n    student_data['Name'] = [choice(name_list) for _ in range(num_of_students)]\n    student_data['Gender'] = [choice(gender_list) for _ in range(num_of_students)]\n\n    # The function uses random.sample() to generate randomly generated age values within the specified range\n    student_data['Age'] = np.random.randint(age_range[0], age_range[1], num_of_students)\n\n    # The function uses random.sample() to generate randomly generated score values within the specified range", "compilation_passed": true, "time": 0.0014622211456298828, "tests_passed": false, "error": "TypeError"}
{"code": "if name_list is None:\n        name_list = ['John', 'Mike', 'Sara', 'Emma', 'Nick']\n    if gender_list is None:\n        gender_list = ['Male', 'Female']\n\n    set_seed(seed)\n\n    names = [choice(name_list) for _ in range(num_of_students)]\n    ages = [np.random.randint(age_range[0], age_range[1] + 1) for _ in range(num_of_students)]\n    genders = [choice(gender_list) for _ in range(num_of_students)]\n    scores = [np.random.randint(score_range[0], score_range[1] + 1) for _ in range(num_of_students)]\n\n    student_data = pd.DataFrame({'Name': names, 'Age': ages, 'Gender': genders, 'Score': scores})\n\n    return student_data", "compilation_passed": true, "time": 0.0016450881958007812, "tests_passed": true, "error": null}
{"code": "# check if the total number of students is positive\n    if num_of_students <= 0:\n        raise ValueError('num_of_students must be a positive integer')\n\n    # generate list of names if not provided\n    if not name_list:\n        name_list = ['John', 'Mike', 'Sara', 'Emma', 'Nick']\n\n    # generate list of genders if not provided\n    if not gender_list:\n        gender_list = ['Male', 'Female']\n\n    # generate list of scores if not provided\n    score_list = list(range(*score_range))\n\n    # set random seed for reproducibility\n    set_seed(seed)\n\n    # randomly generate names and ages from the provided lists or default values\n    name_list = choice(name_list)\n    name_list = choice(name_list)\n    name_list = choice(name_list)\n    name_list = choice(name_list)\n    name_list = choice(name_list)\n    name_list = choice(name_list)\n", "compilation_passed": true, "time": 0.0009710788726806641, "tests_passed": false, "error": "TypeError"}
{"code": "seed(seed)\n    set_seed(seed)\n\n    name_list = name_list if name_list else ['John', 'Mike', 'Sara', 'Emma', 'Nick']\n    gender_list = gender_list if gender_list else ['Male', 'Female']\n\n    if num_of_students <= 0:\n        raise ValueError('num_of_students must be a positive integer')\n\n    students_data = {'Name': [], 'Age': [], 'Gender': [], 'Score': []}\n\n    for i in range(num_of_students):\n        name = choice(name_list)\n        age = np.random.randint(age_range[0], age_range[1] + 1)\n        gender = choice(gender_list)\n        score = np.random.randint(score_range[0], score_range[1] + 1)\n\n        students_data['Name'].append(name)\n        students_data['Age'].append(age)\n        stud", "compilation_passed": true, "time": 0.0009946823120117188, "tests_passed": false, "error": "TypeError"}
{"code": "seed(seed)\n    if num_of_students <= 0:\n        raise ValueError(\"Number of students must be positive.\")\n\n    if name_list is None:\n        name_list = [\"John\", \"Mike\", \"Sara\", \"Emma\", \"Nick\"]\n\n    if gender_list is None:\n        gender_list = [\"Male\", \"Female\"]\n\n    # Selecting names randomly from name_list\n    random_name_list = [choice(name_list) for _ in range(num_of_students)]\n\n    # Selecting genders randomly from gender_list\n    random_gender_list = [choice(gender_list) for _ in range(num_of_students)]\n\n    # Generating random ages between 15 and 20, inclusive\n    ages = np.random.randint(age_range[0], age_range[1], num_of_students)\n\n    # Generating random scores between 50 and 100, inclusive\n    scores = np.random.", "compilation_passed": false, "time": 0.00022292137145996094, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Check for valid input\n    if num_of_students <= 0:\n        raise ValueError(\"num_of_students must be a positive integer\")\n    # If name_list is not provided, set to default ['John', 'Mike', 'Sara', 'Emma', 'Nick']\n    if name_list is None:\n        name_list = ['John', 'Mike', 'Sara', 'Emma', 'Nick']\n    # If gender_list is not provided, set to default ['Male', 'Female']\n    if gender_list is None:\n        gender_list = ['Male', 'Female']\n    # Set random seed\n    set_seed(seed)\n\n    # Select random name values from name_list\n    name_df = pd.DataFrame(name_list, columns=['Name'])\n    name_df['Name'] = pd.Series(name_df['Name'].apply(lambda x: choice(name_list)))\n\n    # Select random gender values from gender_list\n    gender_df = pd.DataFrame(gender", "compilation_passed": false, "time": 0.00021123886108398438, "tests_passed": false, "error": "SyntaxError"}
{"code": "student_data = pd.DataFrame(columns=['Name', 'Age', 'Gender', 'Score'])\n    if num_of_students < 1:\n        raise ValueError(\"Invalid number of students. Must be a positive integer.\")\n\n    if name_list:\n        student_data['Name'] = pd.Series(name_list, index=range(1, num_of_students+1))\n    else:\n        name_list = ['John', 'Mike', 'Sara', 'Emma', 'Nick']\n        student_data['Name'] = np.random.choice(name_list, num_of_students)\n\n    if gender_list:\n        student_data['Gender'] = np.random.choice(gender_list, num_of_students)\n    else:\n        gender_list = ['Male', 'Female']\n        student_data['Gender'] = np.random.choice(gender_list, num_of_students)\n\n    student_data['Age'] = np.random.randint(age_", "compilation_passed": false, "time": 0.0002377033233642578, "tests_passed": false, "error": "SyntaxError"}
{"code": "seed(seed)\n\n    name_list = ['John', 'Mike', 'Sara', 'Emma', 'Nick'] if name_list is None else name_list\n    gender_list = ['Male', 'Female'] if gender_list is None else gender_list\n\n    # Generate names\n    name_list = np.asarray(name_list)\n    set_seed(seed)\n    names = np.random.choice(name_list, num_of_students)\n\n    # Generate ages\n    age = np.random.randint(age_range[0], age_range[1], size=num_of_students)\n\n    # Generate genders\n    gender = np.random.choice(gender_list, num_of_students)\n\n    # Generate scores\n    score = np.random.randint(score_range[0], score_range[1], size=num_of_students)\n\n    # Convert the arrays to a list of dictionaries and assign each attribute\n    data = [{'Name': name, 'Age':", "compilation_passed": false, "time": 0.00023293495178222656, "tests_passed": false, "error": "SyntaxError"}
{"code": "if num_of_students < 1:\n        raise ValueError(\"'num_of_students' should be a positive integer.\")\n\n    name_list = ['John', 'Mike', 'Sara', 'Emma', 'Nick'] if name_list is None else name_list\n    gender_list = ['Male', 'Female'] if gender_list is None else gender_list\n\n    # Use the provided seed value to ensure the same seed for the random number generator\n    set_seed(seed)\n\n    df = pd.DataFrame({'Name': [choice(name_list) for _ in range(num_of_students)],\n                       'Age': np.random.randint(age_range[0], age_range[1], num_of_students),\n                       'Gender': [choice(gender_list) for _ in range(num_of_students)],\n                       'Score': np.random.randint(score_range[0], score_range[1], num_of_students)})\n    return", "compilation_passed": true, "time": 0.001146078109741211, "tests_passed": false, "error": "TypeError"}
{"code": "if num_of_students <= 0:\n        raise ValueError('Num of students must be a positive integer.')\n\n    set_seed(seed)\n\n    if not name_list:\n        name_list = ['John', 'Mike', 'Sara', 'Emma', 'Nick']\n    else:\n        name_list = list(name_list)\n\n    if not gender_list:\n        gender_list = ['Male', 'Female']\n    else:\n        gender_list = list(gender_list)\n\n    names = [choice(name_list) for _ in range(num_of_students)]\n    ages = [choice(range(*age_range)) for _ in range(num_of_students)]\n    genders = [choice(gender_list) for _ in range(num_of_students)]\n    scores = [choice(range(*score_range)) for _ in range(num_of_students)]\n\n    student_data = pd.DataFrame(\n        {\n            'Name': names,\n            'Age': ages,\n", "compilation_passed": false, "time": 0.0002701282501220703, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not isinstance(num_of_students, int) or num_of_students <= 0:\n        raise ValueError(\"num_of_students must be a positive integer.\")\n    if name_list is None:\n        name_list = ['John', 'Mike', 'Sara', 'Emma', 'Nick']\n    if gender_list is None:\n        gender_list = ['Male', 'Female']\n    if not isinstance(name_list, list):\n        raise TypeError(\"name_list must be a list of strings.\")\n    if not isinstance(gender_list, list):\n        raise TypeError(\"gender_list must be a list of strings.\")\n    if not isinstance(age_range, tuple) or not isinstance(age_range[0], int) \\\n            or not isinstance(age_range[1], int):\n        raise TypeError(\"age_range must be a tuple of integers.\")\n    if not isinstance(score_range, tuple) or not isinstance(score_range[0], int) \\\n            ", "compilation_passed": false, "time": 0.00023508071899414062, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Validate the input\n    if not isinstance(num_of_students, int) or num_of_students <= 0:\n        raise ValueError(\"Invalid input for num_of_students: should be a positive integer.\")\n\n    # Set a random seed if not explicitly set\n    set_seed(seed)\n\n    # Initialize lists to store student data\n    name_list = name_list or ['John', 'Mike', 'Sara', 'Emma', 'Nick']\n    gender_list = gender_list or ['Male', 'Female']\n\n    # Generate student names randomly from the name list\n    names = [choice(name_list) for _ in range(num_of_students)]\n\n    # Generate student ages randomly within the specified range\n    ages = np.random.randint(age_range[0], age_range[1] + 1, num_of_students)\n\n    # Generate student genders randomly from the gender list\n    genders = [choice(gender_list) for _ in range(num_of_students)]", "compilation_passed": true, "time": 0.0009682178497314453, "tests_passed": false, "error": "TypeError"}
{"code": "if not isinstance(num_of_students, int) or num_of_students <= 0:\n        raise ValueError(\"Number of students must be a positive integer.\")\n\n    seed(seed)\n\n    if name_list is None:\n        name_list = ['John', 'Mike', 'Sara', 'Emma', 'Nick']\n    if gender_list is None:\n        gender_list = ['Male', 'Female']\n\n    set_seed(seed)\n    df = pd.DataFrame({'Name': [], 'Age': [], 'Gender': [], 'Score': []})\n\n    for _ in range(num_of_students):\n        name = choice(name_list)\n        age = np.random.randint(age_range[0], age_range[1] + 1)\n        gender = choice(gender_list)\n        score = np.random.randint(score_range[0], score_range[1] + 1)\n        df.loc[len(df.index)] = [name,", "compilation_passed": false, "time": 0.0002760887145996094, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Check if num_of_students is non-positive\n    if num_of_students < 1:\n        raise ValueError(\"num_of_students must be a positive integer.\")\n\n    # Select names from the 'name_list' if provided, else use defaults\n    name_list = name_list if name_list is not None else ['John', 'Mike', 'Sara', 'Emma', 'Nick']\n    gender_list = gender_list if gender_list is not None else ['Male', 'Female']\n\n    # Initialize empty lists to store names, ages, genders, and scores\n    names = []\n    ages = []\n    genders = []\n    scores = []\n\n    # Generate random values for the 'num_of_students'\n    set_seed(seed)\n    for _ in range(num_of_students):\n        # Select a name randomly from the 'name_list'\n        name = choice(name_list)\n\n        # Generate random age within the specified range\n        age = np.random.randint(age", "compilation_passed": false, "time": 0.0001971721649169922, "tests_passed": false, "error": "SyntaxError"}
{"code": "random.seed(seed)\n    name_list = ['John', 'Mike', 'Sara', 'Emma', 'Nick'] if name_list is None else name_list\n    gender_list = ['Male', 'Female'] if gender_list is None else gender_list\n    age = np.random.randint(*age_range, size=num_of_students)\n    gender = np.random.choice(gender_list, size=num_of_students)\n    score = np.random.randint(*score_range, size=num_of_students)\n\n    students = {'Name': name_list, 'Age': age, 'Gender': gender, 'Score': score}\n    df = pd.DataFrame(students)\n    df.columns = ['Name', 'Age', 'Gender', 'Score']\n    return df", "compilation_passed": true, "time": 0.0010428428649902344, "tests_passed": false, "error": "NameError"}
{"code": "# Ensure num_of_students is a positive integer\n    if num_of_students <= 0:\n        raise ValueError(\"num_of_students must be a positive integer.\")\n\n    # Set the seed for random number generation\n    set_seed(seed)\n\n    # Initialize variables for generating student data\n    names_list = ['John', 'Mike', 'Sara', 'Emma', 'Nick'] if name_list is None else name_list\n    gender_list = ['Male', 'Female'] if gender_list is None else gender_list\n    ages = [choice(range(age_range[0], age_range[1])) for _ in range(num_of_students)]\n    scores = [choice(range(score_range[0], score_range[1])) for _ in range(num_of_students)]\n\n    # Create a Pandas DataFrame using the selected attributes\n    student_data = pd.DataFrame({'Name': names_list, 'Age': ages, 'Gender': gender_list, 'Score': scores})\n", "compilation_passed": true, "time": 0.0012488365173339844, "tests_passed": false, "error": "ValueError"}
{"code": "if not isinstance(num_of_students, int) or num_of_students <= 0:\n        raise ValueError(\"'num_of_students' must be a positive integer\")\n    if name_list is None:\n        name_list = ['John', 'Mike', 'Sara', 'Emma', 'Nick']\n    if gender_list is None:\n        gender_list = ['Male', 'Female']\n    seed(seed)  # Set seed to ensure reproducibility\n    names = []  # List to store name combinations\n    ages = []  # List to store age combinations\n    genders = []  # List to store gender combinations\n    scores = []  # List to store score combinations\n\n    for i in range(num_of_students):\n        name = choice(name_list)  # Choose a random name from the list\n        age = choice(range(age_range[0], age_range[1] + 1))  # Choose a random age within the specified range\n        gender = choice(gender_list)  # Choose a random gender", "compilation_passed": true, "time": 0.0009617805480957031, "tests_passed": false, "error": "TypeError"}
{"code": "if seed is not None:\n        set_seed(seed)\n\n    name_list = name_list or ['John', 'Mike', 'Sara', 'Emma', 'Nick']\n    gender_list = gender_list or ['Male', 'Female']\n    name_options = name_list * num_of_students\n    gender_options = gender_list * num_of_students\n    age_range = (age_range[0], age_range[1])\n    score_range = (score_range[0], score_range[1])\n\n    names = np.random.choice(name_options, size=num_of_students, replace=False)\n    ages = np.random.randint(low=age_range[0], high=age_range[1] + 1, size=num_of_students)\n    genders = np.random.choice(gender_options, size=num_of_students, replace=False)\n    scores = np.random.randint(low=score_range[0], high", "compilation_passed": false, "time": 0.000270843505859375, "tests_passed": false, "error": "SyntaxError"}
{"code": "if not isinstance(num_of_students, int) or num_of_students <= 0:\n        raise ValueError(\"num_of_students must be a positive integer\")\n    name_list = name_list or ['John', 'Mike', 'Sara', 'Emma', 'Nick']\n    gender_list = gender_list or ['Male', 'Female']\n    random.set_state(random.getstate())  # reset state to avoid overlapping values\n    seed(seed)\n    df = pd.DataFrame(\n        data={\n            'Name': [random.choice(name_list) for _ in range(num_of_students)],\n            'Age': [random.randint(*age_range) for _ in range(num_of_students)],\n            'Gender': [random.choice(gender_list) for _ in range(num_of_students)],\n            'Score': [random.randint(*score_range) for _ in range(num_of_students)],\n        },\n        index=[f\"Student", "compilation_passed": false, "time": 0.0001068115234375, "tests_passed": false, "error": "SyntaxError"}
{"code": "set_seed(seed)  # Ensure reproducible random number generation across function calls\n\n    # Create the list of names if it's not provided\n    name_list = name_list or ['John', 'Mike', 'Sara', 'Emma', 'Nick']\n\n    # Create the list of genders if it's not provided\n    gender_list = gender_list or ['Male', 'Female']\n\n    # Create a list of random ages within the specified range\n    ages = [np.random.randint(*age_range) for _ in range(num_of_students)]\n\n    # Create a list of random names from the name_list\n    names = [choice(name_list) for _ in range(num_of_students)]\n\n    # Create a list of random genders from the gender_list\n    genders = [choice(gender_list) for _ in range(num_of_students)]\n\n    # Create a list of random scores within the specified range\n    scores = [np.random.randint(*score_range) for _ in range(num_", "compilation_passed": false, "time": 0.00020384788513183594, "tests_passed": false, "error": "SyntaxError"}
{"code": "# TODO\n    set_seed(seed)\n\n    df = pd.DataFrame(columns=['Name', 'Age', 'Gender', 'Score'])\n\n    df['Name'] = ['John', 'Mike', 'Sara', 'Emma', 'Nick'] if name_list is None else np.random.choice(name_list, num_of_students)\n    df['Age'] = pd.Series(np.random.randint(age_range[0], age_range[1], num_of_students).astype(int))\n    df['Gender'] = ['Male', 'Female'] if gender_list is None else np.random.choice(gender_list, num_of_students)\n    df['Score'] = pd.Series(np.random.randint(score_range[0], score_range[1], num_of_students).astype(int))\n\n    return df", "compilation_passed": true, "time": 0.0016891956329345703, "tests_passed": false, "error": "ValueError"}
{"code": "# Validate input\n    if not isinstance(num_of_students, int):\n        raise TypeError(\"num_of_students must be an integer\")\n    elif num_of_students <= 0:\n        raise ValueError(\"num_of_students must be a positive integer\")\n    elif seed < 0:\n        raise ValueError(\"seed must be a non-negative integer\")\n\n    # Initialize lists to be used\n    if not name_list:\n        name_list = ['John', 'Mike', 'Sara', 'Emma', 'Nick']\n    if not gender_list:\n        gender_list = ['Male', 'Female']\n    if not age_range:\n        age_range = (15, 20)\n    if not score_range:\n        score_range = (50, 100)\n\n    # Use set_seed to initialize the random number generator\n    np.random.seed(seed)\n    set_seed(seed)\n\n    # Generate random names, ages, genders, and scores", "compilation_passed": true, "time": 0.0009720325469970703, "tests_passed": false, "error": "TypeError"}
