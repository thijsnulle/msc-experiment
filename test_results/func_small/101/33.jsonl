{"code": "np.random.seed(seed)\n    # get the Boston Housing data\n    boston = pd.read_csv(data_url, sep=\",\")\n\n    # create a list of column names\n    col_list = list(boston.columns)\n\n    # create a correlation matrix\n    corr_matrix = boston.corr()\n\n    # Create a heatmap\n    sns.set()\n    ax = sns.heatmap(corr_matrix, vmax=1, square=True, linewidths=.5, cbar_kws={'shrink': .7})\n    plt.xticks(rotation=45)\n    plt.yticks(rotation=45)\n    plt.title(\"Correlation Heatmap\")\n\n    if 'file_name' in locals():\n        plt.savefig(file_name, dpi=300, bbox_inches=\"tight\")\n\n    return plt.gca()", "compilation_passed": true, "time": 0.6864597797393799, "tests_passed": false, "error": ""}
{"code": "np.random.seed(seed)\n    data = pd.read_csv(data_url, delimiter=\"\\s+\", header=None)\n    plt.figure()\n    plt.title(\"Correlation Heatmap of Boston Housing Dataset\")\n    sns.heatmap(\n        data.corr().round(2),\n        cmap=\"RdYlGn\",\n        linewidth=.5,\n        annot=True,\n        fmt=\".2f\",\n        cbar_kws={'location': 'bottom', 'label': 'Correlation Coefficient'},\n    )\n    plt.savefig(\"./output/task-func.png\")\n    return plt.gca()", "compilation_passed": true, "time": 0.6818690299987793, "tests_passed": false, "error": ""}
{"code": "# import necessary libraries\n    import matplotlib.pyplot as plt\n    import os\n    import pandas as pd\n    import seaborn as sns\n    import numpy as np\n\n    # seed random number generator\n    np.random.seed(seed)\n\n    # Load the Boston Housing dataset from a URL\n    try:\n        url = data_url\n        os.getcwd()\n        df = pd.read_csv(url, index_col=0)\n    except Exception as e:\n        print(f\"An error occurred while loading the Boston Housing dataset from {url}: {e}\")\n        raise ValueError(f\"An error occurred while loading the Boston Housing dataset from {url}\")\n\n    # Create a heatmap of the dataset\n    try:\n        cmap = \"Blues\"\n        ax = sns.heatmap(df, annot=True, cmap=cmap)\n    except Exception as e:\n        print(f\"An error occurred while creating a heatmap of the Boston Housing dataset using Seaborn: {e}\")\n        raise ValueError(f\"An error occurred while creating a heatmap of the", "compilation_passed": false, "time": 0.00038123130798339844, "tests_passed": false, "error": "SyntaxError"}
{"code": "np.random.seed(seed)\n    df = pd.read_csv(data_url)\n\n    sns.heatmap(df.corr(), annot=True, cmap=\"RdYlGn\", fmt='.3f', linewidths=0.5, annot_kws={\"size\": 15})\n\n    fig = plt.gcf()\n    fig.set_size_inches(9, 8)\n\n    return ax", "compilation_passed": true, "time": 0.6773529052734375, "tests_passed": false, "error": ""}
{"code": "# Generate a random dataset.\n    np.random.seed(seed)\n    X = np.random.normal(loc=5, scale=1, size=10)\n    Y = np.random.normal(loc=2, scale=3, size=10)\n    Z = np.random.normal(loc=0, scale=1, size=10)\n\n    # Compute correlation matrix using seaborn.\n    corr = sns.heatmap(pd.DataFrame(data=[X, Y, Z]).corr(), annot=True, fmt='.2f', linewidths=.5, cmap='RdYlGn',\n                       cbar=False, cbar_kws={'shrink': .8})\n\n    # Save the plot as an image.\n    plt.savefig(\"task_output.png\")\n\n    # Display the plot using matplotlib.\n    plt.show()\n\n    return corr", "compilation_passed": true, "time": 1.0051000118255615, "tests_passed": false, "error": "TimeoutError"}
{"code": "# Use seed 42 to generate the same data for each test run\n    np.random.seed(seed)\n\n    # Read the data from a local file or from the data URL\n    if data_url is None:\n        local_file_name = \"boston_housing.csv\"\n        try:\n            with open(local_file_name, \"rb\") as f:\n                df = pd.read_csv(f)\n        except FileNotFoundError:\n            with open(\"boston_housing.csv\", \"rb\") as f:\n                df = pd.read_csv(f)\n        except:\n            df = pd.read_csv(local_file_name)\n    else:\n        try:\n            df = pd.read_csv(data_url)\n        except:\n            df = pd.read_csv(data_url)\n    # Get the index of the target column\n    target_index = df.columns.get_loc(\"MDEV\")\n    # Create a scatter plot of the target column\n    plt.scatter(df[\"MDEV\"],", "compilation_passed": false, "time": 0.00025010108947753906, "tests_passed": false, "error": "SyntaxError"}
{"code": "np.random.seed(seed)\n    df = pd.read_csv(data_url)\n    df.dropna(inplace=True)\n    df.columns = [\n        \"CRIM\",\n        \"ZN\",\n        \"INDUS\",\n        \"CHAS\",\n        \"NMIGRPS\",\n        \"RAD\",\n        \"AGE\",\n        \"RM\",\n        \"DIS\",\n        \"TAX\",\n        \"PTRATIO\",\n        \"B\",\n        \"LBGRV\",\n        \"LUFI\",\n    ]\n\n    sns.heatmap(df.corr(), annot=True)\n    plt.title(\"Correlation Heatmap\")\n    plt.xlabel(\"CORRELATION\")\n    plt.ylabel(\"CORRELATION\")\n    plt.savefig(\"boston_heatmap.png\", bbox_inches=\"tight\")", "compilation_passed": true, "time": 0.6788589954376221, "tests_passed": false, "error": ""}
{"code": "# Check for the matplotlib.pyplot package\n    if not importlib.util.find_spec(\"matplotlib.pyplot\"):\n        raise ImportError(\"The matplotlib.pyplot package is not installed. Please install it and try again.\")\n\n    # Check for the os package\n    if not importlib.util.find_spec(\"os\"):\n        raise ImportError(\"The os package is not installed. Please install it and try again.\")\n\n    # Check for the pandas package\n    if not importlib.util.find_spec(\"pandas\"):\n        raise ImportError(\"The pandas package is not installed. Please install it and try again.\")\n\n    # Check for the seaborn package\n    if not importlib.util.find_spec(\"seaborn\"):\n        raise ImportError(\"The seaborn package is not installed. Please install it and try again.\")\n\n    # Check for the numpy package\n    if not importlib.util.find_spec(\"numpy\"):\n        raise ImportError(\"The numpy package is not installed. Please install it and try again", "compilation_passed": false, "time": 0.0002989768981933594, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Generate a random number seed if no seed is provided\n    np.random.seed(seed)\n\n    # Download the data\n    data_url = f\"http://lib.stat.cmu.edu/datasets/boston/{data_url}.csv\"\n    df = pd.read_csv(data_url, header=None, skiprows=1, index_col=False, names=[\"label\", \"CRIM\", \"ZN\", \"INDUS\", \"RAD\", \"CHAS\", \"PTRATIO\", \"B\", \"LSTAT\"])\n\n    # Create a correlation heatmap\n    sns.set(font_scale=1.5)\n    sns.heatmap(\n        df.corr(),\n        cmap=\"RdYlGn\",\n        center=0,\n        annot=True,\n        linewidths=.5,\n        fmt=\".2g\",\n        cbar_kws={\"shrink\": .75, \"pad\": 0.5},\n    )\n\n    # Save the plot\n", "compilation_passed": true, "time": 0.48756980895996094, "tests_passed": false, "error": "urllib.error.HTTPError"}
{"code": "# Generate a random dataset\n    np.random.seed(seed)\n    np.set_printoptions(linewidth=10000, precision=4)\n    x = np.random.rand(50)\n    y = np.random.rand(50)\n\n    # Draw the plot\n    plt.scatter(x, y)\n    plt.show()\n    # Save the plot as a PNG image\n    # fig = plt.gcf()\n    # fig.set_dpi(300)\n    # fig.set_size_inches(15, 10)\n    # plt.savefig('./images/example_1.png')\n    # plt.close()\n    return plt.gca()", "compilation_passed": true, "time": 0.004166126251220703, "tests_passed": false, "error": "AttributeError"}
{"code": "# Your code here\n    np.random.seed(seed)\n    df = pd.read_csv(data_url, header=None)\n    df.columns = [\"CRIM\", \"ZN\", \"INDUS\", \"CHAS\", \"RAD\", \"PTRATIO\",\n                  \"B\", \"LSTAT\", \"MEDV\"]\n    ax = sns.heatmap(df.corr(), cmap=\"Blues\", annot=True, linewidths=.2)\n    return ax", "compilation_passed": true, "time": 0.6774728298187256, "tests_passed": false, "error": ""}
{"code": "np.random.seed(seed)\n    # Download data\n    path = os.path.join(\"boston.csv\")\n    if not os.path.exists(path):\n        import requests\n        data = requests.get(data_url)\n        with open(path, \"wb\") as f:\n            f.write(data.content)\n    # Load the data\n    df = pd.read_csv(path)\n    # Remove outliers and perform log transformation\n    df = df.query(\"MEDV > 35\")\n    df = np.log(df[\"MEDV\"])\n    # Correlation heatmap\n    ax = sns.heatmap(\n        df.corr(),\n        annot=True,\n        fmt=\".2f\",\n        linewidths=0.5,\n        linecolor=\"white\",\n        vmin=-1, vmax=1,\n    )\n    ax.set_title(\"Boston Housing Dataset\")\n    ax.set_xticklabels(ax.get_xticklabels(), rotation=45)\n    ax", "compilation_passed": true, "time": 0.0037047863006591797, "tests_passed": false, "error": "NameError"}
{"code": "# Your code here\n    np.random.seed(seed)\n    df = pd.read_csv(data_url)\n    return sns.heatmap(\n        pd.DataFrame(\n            np.random.rand(10, 10),\n            columns=list(\"abcdefghij\"),\n            index=list(\"abcdefghij\"),\n        ).corr()\n    )\n    # Your code here", "compilation_passed": true, "time": 0.679718017578125, "tests_passed": false, "error": ""}
{"code": "# Create a random seed\n    np.random.seed(seed)\n\n    # Load the Boston Housing dataset from a URL\n    df = pd.read_csv(data_url)\n\n    # Plot the correlation matrix using Seaborn\n    sns.heatmap(df.corr(), annot=True)\n\n    return plt.gca()", "compilation_passed": true, "time": 0.6672027111053467, "tests_passed": false, "error": ""}
{"code": "try:\n        df = pd.read_csv(data_url, delimiter=\",\")\n    except IOError:\n        print('Error when reading the CSV file, maybe the link is invalid')\n    else:\n        # Remove the label of the last column\n        df.pop(df.columns.tolist()[-1])\n        # Convert the column from string to numeric\n        df = df.apply(lambda x: pd.to_numeric(x))\n        # Compute the correlation matrix\n        corr_matrix = df.corr()\n\n        # Create a heatmap with a specific font size and font weight\n        fig, ax = plt.subplots()\n        sns.heatmap(corr_matrix, annot=True, fmt=\".2f\", linewidths=.5,\n                    square=True, cmap=\"Blues\")\n        #ax.tick_params(fontsize=8)\n        ax.tick_params(axis='x', labelsize=10)\n        ax.tick_params(axis='y', labelsize=10)\n\n        plt.xticks(", "compilation_passed": false, "time": 0.0006718635559082031, "tests_passed": false, "error": "SyntaxError"}
{"code": "np.random.seed(seed)\n\n    df = pd.read_csv(data_url)\n\n    # Your code here ...\n\n    return ax", "compilation_passed": true, "time": 0.6880741119384766, "tests_passed": false, "error": ""}
{"code": "if os.name == \"posix\":  # Check if operating system is Linux\n        os.system(\"clear\")  # Clear the console\n    else:  # If not, assume Windows\n        os.system(\"cls\")  # Clear the console\n    # Check for missing dependencies\n    try:\n        import matplotlib\n        import os\n        import pandas\n        import seaborn\n        import numpy\n    except:\n        print(\"You need to install matplotlib, pandas, numpy, and seaborn.\")\n        exit(0)\n\n    df = pd.read_csv(data_url)\n    df.drop(columns=[\"MEDV\"], inplace=True)\n    corr = df.corr()\n\n    try:  # Try to create a heatmap using Seaborn\n        sns.heatmap(corr, annot=True, cmap=\"RdBu_r\", fmt=\".2g\", center=0, cbar_kws={\"shrink\": .7},\n                    vmin=0, vmax=1, square=True)\n        plt.title", "compilation_passed": false, "time": 0.00037789344787597656, "tests_passed": false, "error": "SyntaxError"}
{"code": "np.random.seed(seed)\n\n    try:\n        df = pd.read_csv(data_url, delimiter=\",\")\n        sns.set_style(\"white\")\n        sns.heatmap(df.corr(), cmap=\"YlGnBu\", annot=False)\n        # save_url = \"../../../images/homework_plots/boston_corr.png\"\n        # plt.savefig(save_url)\n        # ax.imshow(data_url, cmap=\"coolwarm\")\n        return plt.gca()\n    except ValueError as e:\n        raise ValueError(\"Problem generating or saving the plot: \" + str(e))\n        # ...\n    # ...\n    # return ax", "compilation_passed": true, "time": 0.6655340194702148, "tests_passed": false, "error": ""}
{"code": "try:\n        np.random.seed(seed)\n        import numpy\n        import matplotlib\n        import matplotlib.pyplot as plt\n        import pandas as pd\n        import seaborn as sns\n        from os import makedirs\n        if not os.path.isdir(\"./output\"):\n            makedirs(\"./output\")\n        df = pd.read_csv(data_url)\n        ax = sns.heatmap(df.corr(), cmap='YlGnBu', annot=False)\n        return ax\n    except ImportError:\n        raise ImportError(\"You need to install matplotlib, pandas, seaborn and numpy libraries in your system to run this code.\")\n    except Exception:\n        raise ValueError(\"Something unexpected occurred. Please try again later.\")", "compilation_passed": true, "time": 0.004266023635864258, "tests_passed": false, "error": "ValueError"}
{"code": "\"\"\"\n    Draw the correlation heatmap of the Boston Housing dataset using Seaborn, with an option to save it to a specified file.\n\n    Parameters:\n        seed (int, optional): Random seed for reproducibility. Defaults to 42.\n    The font should be in the family of sans-serif and Arial.\n\n    Returns:\n        matplotlib.axes.Axes: The Axes object containing the heatmap plot.\n\n    Raises:\n        ValueError: If an error occurs in generating or saving the plot.\n\n    Requirements:\n        - matplotlib\n        - os\n        - pandas\n        - seaborn\n        - numpy\n\n    Example:\n        >>> ax = task_func()\n        >>> type(ax)\n        <class 'matplotlib.axes._axes.Axes'>\n    \"\"\"\n    # Read in the dataset\n    df = pd.read_csv(data_url)\n    # Drop the target column, if present\n    if \"target\" in df.columns:\n        df.drop(\"target\", axis=1, inplace=True)\n    ", "compilation_passed": true, "time": 0.6845870018005371, "tests_passed": false, "error": ""}
{"code": "# -----------------------------------------------------------------------------------------\n    # 1. download and load the Boston housing dataset from a link.\n    # -----------------------------------------------------------------------------------------\n    # 2. draw the correlation heatmap for the dataset.\n    # -----------------------------------------------------------------------------------------\n    # 3. save the plot to a file with a specified extension.\n    # -----------------------------------------------------------------------------------------\n    # 4. return the matplotlib Axes object.\n    # -----------------------------------------------------------------------------------------\n    # 5. check the requirements are installed and available.\n    # ------------------------", "compilation_passed": true, "time": 0.003614187240600586, "tests_passed": true, "error": null}
{"code": "# download the data if it doesn't exist on the server\n    try:\n        df = pd.read_csv(data_url)\n    except:\n        os.system(f\"wget {data_url}\")\n        df = pd.read_csv(data_url)\n    # generate the heatmap\n    ax = sns.heatmap(df.corr(), annot=False, cmap='coolwarm')\n    # save the plot to a file if specified\n    if \"save\" in locals() and save is not None:\n        plt.savefig(save)\n    return ax", "compilation_passed": true, "time": 0.6842079162597656, "tests_passed": false, "error": "NameError"}
{"code": "random_state = np.random.RandomState(seed)\n    df = pd.read_csv(data_url)\n    corr = df.corr().abs()\n    fig, ax = plt.subplots(figsize=(20, 10))\n    sns.heatmap(corr, cmap='coolwarm', square=True, annot=True)\n    plt.xticks(rotation=45, ha='right')\n    plt.savefig('correlation.png', bbox_inches='tight')\n    plt.show()\n    return ax", "compilation_passed": true, "time": 0.6806731224060059, "tests_passed": false, "error": ""}
{"code": "# your code here\n    # plt.rc(\"font\", family=\"Arial\")\n    data = pd.read_csv(data_url, delim_whitespace=True, header=None,\n                       names=[\"CRIM\", \"ZN\", \"INDUS\", \"CHAS\", \"RAD\", \"TAX\", \"PGDC\", \"AGE\", \"RM\", \"DIS\", \"NOX\",\n                       \"OOX\", \"PTRAC\", \"B\", \"LSTAT\", \"MEDV\"])\n    return sns.heatmap(data.corr(), annot=True, cbar=True, cbar_kws={\"rotation\": 45, \"label\": \"correlation\"},\n                       square=True, fmt=\".2f\", linewidth=0.5, vmin=-1, vmax=1, ax=ax)", "compilation_passed": true, "time": 0.6775579452514648, "tests_passed": false, "error": "ValueError"}
{"code": "# Initialize the matplotlib and random number generators\n    random_state = np.random.RandomState(seed)\n    matplotlib.rcParams[\"font.family\"] = \"sans-serif\"\n    matplotlib.rcParams[\"font.sans-serif\"] = \"Arial\"\n\n    # Download the data\n    df = pd.read_csv(data_url)\n    df.loc[:, 'target'] = np.log10(df.loc[:, 'target'])\n\n    # Generate a color map with 50 colors\n    color_map = sns.color_palette(n_colors=50, as_cmap=True)\n    cmap = color_map[random_state.randint(0, 50, 1)[0]]\n\n    # Correlation heatmap using Seaborn\n    ax = sns.heatmap(df.corr(), annot=True, cmap=cmap, fmt=\".2f\", square=True, linewidths=0.5)\n\n    # Save the plot to an image file\n    image_file = \"", "compilation_passed": false, "time": 0.0003018379211425781, "tests_passed": false, "error": "SyntaxError"}
{"code": "# create a new random state for reproducibility\n    np.random.seed(seed)\n\n    # Load the Boston Housing dataset using pandas\n    df = pd.read_csv(data_url)\n\n    # Plot the correlation heatmap using seaborn\n    fig, ax = plt.subplots(figsize=(10, 10))\n    sns.heatmap(df.corr(), annot=True, cmap='Blues', ax=ax)\n\n    # Set the figure title, x and y axis labels, and the font family of the title and axis labels\n    ax.set_title(\"Correlation Heatmap\", fontdict={\"family\": \"sans-serif\", \"size\": 18, \"color\": \"black\"})\n    ax.set_xlabel(\"\")\n    ax.set_ylabel(\"\")\n    ax.set_xticklabels([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\", \"", "compilation_passed": false, "time": 0.00022101402282714844, "tests_passed": false, "error": "SyntaxError"}
{"code": "df = pd.read_csv(data_url, dtype=str)\n\n    # Your code here\n    sns.set()\n    sns.heatmap(df.corr(), annot=True, fmt=\"g\", cmap=\"Reds\", annot_kws={\"size\": 8})\n    plt.title('Heatmap of Correlation', fontdict={'family': 'sans-serif', 'Arial'})\n    plt.savefig('heatmap.png')\n\n    return plt.gcf().axes[0]", "compilation_passed": false, "time": 0.00021791458129882812, "tests_passed": false, "error": "SyntaxError"}
{"code": "# Load the Boston Housing data and convert to a Pandas DataFrame\n    try:\n        boston = pd.read_csv(data_url, header=None).iloc[:, 1:]\n    except:\n        raise ValueError(f\"Cannot load the Boston Housing dataset from {data_url}\")\n\n    # Use Seaborn to generate the correlation heatmap\n    ax = sns.heatmap(boston.corr(), annot=True, fmt='.2f',\n                     cmap='RdBu', mask='#FFFFFF')\n\n    # Define a list of file paths for saving the plot\n    paths = [os.path.join(\"plots\", f\"corr_heatmap_{seed}.png\")]\n\n    # Save the plot using Matplotlib and Seaborn\n    for path in paths:\n        try:\n            if os.path.exists(path):\n                os.remove(path)\n            plt.savefig(path)\n        except:\n            raise ValueError(f\"Cannot save the plot to {path}\")\n\n    # Return the Axes object\n", "compilation_passed": true, "time": 0.6836910247802734, "tests_passed": false, "error": "ValueError"}
{"code": "np.random.seed(seed)\n    try:\n        df = pd.read_csv(data_url, header=None)\n        df.columns = [\"CRIM\", \"ZN\", \"INDUS\", \"CHAS\", \"NOX\", \"RM\", \"AGE\",\n                      \"DIS\", \"RAD\", \"TAX\", \"PTRATIO\", \"B\", \"USY\", \"IHOPTR\"]\n        df = df.sample(frac=1)\n        corr_matrix = df.corr()\n        ax = sns.heatmap(corr_matrix, vmin=-1, vmax=1, center=0,\n                         cmap=\"RdBu\", annot=False, linewidths=0.5, cbar=False, ax=None, square=True)\n        # plt.tick_params(axis='x', labelsize=14, fontproperties=prop, rotation=30, rotation_mode='anchor')\n        # plt.tick_params(axis='y', labelsize=14, fontproperties=prop,", "compilation_passed": false, "time": 0.0006687641143798828, "tests_passed": false, "error": "SyntaxError"}
{"code": "# TODO: complete function\n\n    df = pd.read_csv(data_url)\n    print(type(df))\n    ax = sns.heatmap(df.corr(), annot=True, fmt=\"\", linewidths=.5, cmap=\"YlGnBu\")\n    print(ax)\n    print(type(ax))\n\n    return ax", "compilation_passed": true, "time": 0.6719150543212891, "tests_passed": false, "error": ""}
