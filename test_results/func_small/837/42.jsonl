{"code": "if random_seed is None:\n        random_state = np.random.RandomState()\n    else:\n        random_state = np.random.RandomState(seed=random_seed)\n    df = pd.DataFrame()\n    df[columns] = random_state.randint(0, 100, (n_rows, len(columns)))\n\n    if len(scale_cols) > 0:\n        scaler = StandardScaler()\n        df_scaled = scaler.fit_transform(df[columns[scale_cols]])\n        df[columns[scale_cols]] = df_scaled\n    return df", "compilation_passed": true, "time": 0.002112865447998047, "tests_passed": false, "error": "TypeError"}
{"code": "# --------------------------------------------------------------------------------------------------------------\n    # TODO: Your code here ...\n    # --------------------------------------------------------------------------------------------------------------\n\n    rng = np.random.RandomState(random_seed)\n    df = pd.DataFrame(rng.random_sample((n_rows, len(columns))), columns=columns)\n\n    if len(scale_cols) != 0:\n        scale_cols = [df.columns.get_loc(col) for col in columns]\n\n    scaler = StandardScaler(with_mean=True, with_std=True)\n    scaler.fit(df.iloc[:, scale_cols])\n    df.iloc[:, scale_cols] = scaler.transform(df.iloc[:, scale_cols])\n\n    return df", "compilation_passed": true, "time": 0.0033669471740722656, "tests_passed": true, "error": null}
{"code": "rng = np.random.default_rng(random_seed)\n    columns = columns\n\n    df = pd.DataFrame(rng.uniform(low=-10, high=10, size=(n_rows, len(columns))), columns=columns)\n\n    if len(scale_cols) == 0:\n        return df\n\n    scale = StandardScaler()\n    for i in scale_cols:\n        df[columns[i]] = scale.fit_transform(df[columns[i]].values.reshape(-1, 1))\n\n    return df", "compilation_passed": true, "time": 0.0025877952575683594, "tests_passed": true, "error": null}
{"code": "rng = np.random.default_rng(random_seed)\n    df = pd.DataFrame(rng.random(n_rows, columns=columns), columns=columns)\n\n    for i, scale_col in enumerate(scale_cols):\n        df[columns[scale_col]] = StandardScaler().fit_transform(\n            df[[columns[scale_col]]])\n\n    return df", "compilation_passed": true, "time": 0.0014088153839111328, "tests_passed": false, "error": "TypeError"}
{"code": "random_state = np.random.default_rng(random_seed)\n\n    data = random_state.uniform(size=(n_rows, len(columns)))\n    df = pd.DataFrame(data, columns=columns)\n\n    if len(scale_cols) > 0:\n        scaler = StandardScaler()\n        for idx in scale_cols:\n            df.iloc[:, idx] = scaler.fit_transform(df.iloc[:, idx].values.reshape(-1, 1))\n\n    return df", "compilation_passed": true, "time": 0.0026319026947021484, "tests_passed": true, "error": null}
{"code": "if random_seed is not None:\n        np.random.seed(random_seed)\n    df = pd.DataFrame(np.random.rand(n_rows, len(columns)), columns=columns)\n\n    if len(scale_cols) == 0:\n        return df\n\n    scaler = StandardScaler()\n    df[columns[scale_cols]] = scaler.fit_transform(df[columns[scale_cols]])\n\n    return df", "compilation_passed": true, "time": 0.001405954360961914, "tests_passed": false, "error": "TypeError"}
{"code": "# TODO\n    # -------------------------------------------------------------------------\n    # Instructions\n    # 1. generate a random dataset using random.seed(random_seed)\n    # 2. shuffle the data\n    # 3. use a numpy random function to generate random values between -500 and 500\n    # 4. create a DataFrame using pandas (columns) with the columns provided and the random values\n\n    # -------------------------------------------------------------------------\n    rng = np.random.RandomState(random_seed)\n\n    x = rng.normal(0, 1, (n_rows, len(columns)))\n\n    df = pd.DataFrame(x, columns=columns)\n    if scale_cols:\n        for i in scale_cols:\n            scaler = StandardScaler()\n            df.iloc[:,i] = scaler.fit_transform(df.iloc[:,i].values.reshape(-1,", "compilation_passed": false, "time": 0.00021696090698242188, "tests_passed": false, "error": "SyntaxError"}
{"code": "rng = np.random.RandomState(random_seed)\n\n    df = pd.DataFrame(columns=columns, index=range(n_rows))\n    for column in columns:\n        df[column] = rng.randint(0, 100, n_rows)\n\n    if scale_cols:\n        scaler = StandardScaler()\n        for col in columns:\n            if col in columns:\n                if col in columns:\n                    df[col] = scaler.fit_transform(df[col].to_numpy())\n\n    return df", "compilation_passed": true, "time": 0.002441883087158203, "tests_passed": false, "error": "Reshape your data either using array.reshape(-1, 1) if your data has a single feature or array.reshape(1, -1) if it contains a single sample."}
{"code": "rng = np.random.default_rng(random_seed)\n    df = pd.DataFrame(columns=columns)\n\n    if len(scale_cols) == 0:\n        for i, col in enumerate(df.columns):\n            df[col] = rng.integers(0, n_rows, (n_rows, 1), endpoint=True)\n\n    for i in scale_cols:\n        df[columns[i]] = np.array([rng.standard_normal(0, 1, (1, n_rows)) for i in range(n_rows)])\n\n    if len(scale_cols) != 0:\n        scaler = StandardScaler()\n        for i in scale_cols:\n            df[columns[i]] = scaler.fit_transform(df[columns[i]].values)\n\n    return df", "compilation_passed": true, "time": 0.0017399787902832031, "tests_passed": false, "error": "TypeError"}
{"code": "np.random.seed(random_seed)\n    data = np.random.randint(10, size=(n_rows, len(columns)))\n    df = pd.DataFrame(data, columns=columns)\n    if len(scale_cols):\n        scaler = StandardScaler()\n        scaled_data = scaler.fit_transform(data[:, scale_cols])\n        df.iloc[:, scale_cols] = scaled_data\n    return df", "compilation_passed": true, "time": 0.0025742053985595703, "tests_passed": true, "error": null}
{"code": "rng = np.random.default_rng(random_seed)\n    df = pd.DataFrame(data=dict(zip(columns, rng.random((n_rows, len(columns))))))\n    if len(scale_cols) > 0:\n        scaler = StandardScaler()\n        scaler.fit(df.iloc[:, scale_cols])\n        df = df.copy()\n        df.iloc[:, scale_cols] = scaler.transform(df.iloc[:, scale_cols])\n\n    return df", "compilation_passed": true, "time": 0.0023758411407470703, "tests_passed": true, "error": null}
{"code": "np.random.seed(random_seed)\n    columns = pd.DataFrame(columns)\n    df = pd.DataFrame(index=np.arange(n_rows), columns=columns)\n    df.insert(0, 'A', np.random.random(n_rows), inplace=True)\n    df.insert(1, 'B', np.random.random(n_rows), inplace=True)\n    df.insert(2, 'C', np.random.random(n_rows), inplace=True)\n    df.insert(3, 'D', np.random.random(n_rows), inplace=True)\n    df.insert(4, 'E', np.random.random(n_rows), inplace=True)\n    df['A'].astype(float)\n    df['B'].astype(float)\n    df['C'].astype(float)\n    df['D'].astype(float)\n    df['E'].astype(float)\n    if scale_cols != []:\n", "compilation_passed": false, "time": 0.00030493736267089844, "tests_passed": false, "error": "IndentationError"}
{"code": "np.random.seed(random_seed)\n    df = pd.DataFrame(np.random.randint(10, size=(n_rows, len(columns))), columns=columns)\n    if len(scale_cols):\n        scaler = StandardScaler()\n        df[columns[scale_cols]] = scaler.fit_transform(df[columns[scale_cols]])\n    return df", "compilation_passed": true, "time": 0.0014431476593017578, "tests_passed": false, "error": "TypeError"}
{"code": "np.random.seed(random_seed)\n    df = pd.DataFrame()\n    df[columns] = np.random.randint(-10, 10, size=(n_rows, len(columns)))\n    df['F'] = df['A'] + df['B']\n\n    if len(scale_cols) > 0:\n        scaler = StandardScaler()\n        df[list(columns[i] for i in scale_cols)] = scaler.fit_transform(\n            df[list(columns[i] for i in scale_cols)].values.reshape(-1, len(columns[i]))\n        )\n\n    return df", "compilation_passed": true, "time": 0.002213716506958008, "tests_passed": false, "error": "NameError"}
{"code": "assert isinstance(n_rows, int) and n_rows >= 0\n    assert isinstance(columns, list)\n\n    if columns:\n        columns = ['column' + str(i) for i in range(len(columns))]\n    else:\n        columns = []\n    # your code goes here\n\n    # rng = np.random.default_rng(random_seed)\n    rng = np.random.default_rng()\n    df = pd.DataFrame(rng.randint(100, size=(n_rows, len(columns))))\n\n    if scale_cols:\n        scaler = StandardScaler()\n        df[columns] = scaler.fit_transform(df[columns])\n    return df", "compilation_passed": true, "time": 0.0014429092407226562, "tests_passed": false, "error": "AttributeError"}
{"code": "rng = np.random.RandomState(random_seed)\n    df = pd.DataFrame(columns=columns, index=range(n_rows))\n    df = df.apply(lambda x: rng.randint(100, size=n_rows))\n    if len(scale_cols) > 0:\n        scaler = StandardScaler()\n        for col in columns[scale_cols]:\n            df[col] = scaler.fit_transform(df[col].values.reshape(-1, 1))\n    return df", "compilation_passed": true, "time": 0.0018558502197265625, "tests_passed": false, "error": "TypeError"}
{"code": "rng = np.random.RandomState(random_seed)\n    df = pd.DataFrame(rng.randn(n_rows, len(columns)), columns=columns)\n    if not scale_cols:\n        return df\n    scaler = StandardScaler()\n    scaled_df = scaler.fit_transform(df.iloc[:, scale_cols])\n    return pd.DataFrame(scaled_df, columns=columns)", "compilation_passed": true, "time": 0.0025069713592529297, "tests_passed": false, "error": "ValueError"}
{"code": "random_state = np.random.RandomState(seed=random_seed)\n    df = pd.DataFrame(columns=columns)\n    df['A'] = random_state.randint(100, size=(n_rows,))\n    df['B'] = random_state.randint(10, 50, size=(n_rows,))\n    df['C'] = random_state.randint(50, 100, size=(n_rows,))\n    df['D'] = random_state.randint(-50, 50, size=(n_rows,))\n    df['E'] = random_state.randint(10, size=(n_rows,))\n\n    if not scale_cols:\n        return df\n\n    scaler = StandardScaler()\n    scaler.fit(df.loc[:, columns[scale_cols]])\n    return df.loc[:, columns].apply(scaler.transform, axis=1)", "compilation_passed": true, "time": 0.0021572113037109375, "tests_passed": false, "error": "TypeError"}
{"code": "random_state = np.random.RandomState(random_seed)\n    data_frame = pd.DataFrame(random_state.uniform(size=(n_rows, len(columns))), columns=columns)\n    scaler = StandardScaler()\n    if len(scale_cols) != 0:\n        data_frame.iloc[:, scale_cols] = scaler.fit_transform(data_frame.iloc[:, scale_cols])\n    return data_frame", "compilation_passed": true, "time": 0.0031828880310058594, "tests_passed": true, "error": null}
{"code": "rng = np.random.default_rng(seed=random_seed)\n\n    df = pd.DataFrame(index=range(n_rows))\n    for col in columns:\n        df[col] = rng.integers(100, 200, n_rows)\n\n    if len(scale_cols) == 0:\n        return df\n\n    scaler = StandardScaler()\n    scaler.fit(df[columns[scale_cols]])\n\n    df[columns[scale_cols]] = scaler.transform(df[columns[scale_cols]])\n    return df", "compilation_passed": true, "time": 0.0018889904022216797, "tests_passed": false, "error": "TypeError"}
{"code": "columns = columns\n    random_state = np.random.RandomState(random_seed)\n    df = pd.DataFrame(random_state.randint(low=0, high=100, size=(n_rows, len(columns))), columns=columns)\n    df['B'] = np.array(df['B'].astype(np.float))\n    if scale_cols:\n        scaler = StandardScaler()\n        df[columns[scale_cols]] = scaler.fit_transform(df[columns[scale_cols]])\n    return df", "compilation_passed": true, "time": 0.0015969276428222656, "tests_passed": false, "error": "    https"}
{"code": "random_state = np.random.RandomState(random_seed)\n\n    # Generate random values\n    values = random_state.random(n_rows) * 100\n    df = pd.DataFrame({'A': values, 'B': values, 'C': values, 'D': values, 'E': values}, columns=columns)\n\n    if scale_cols:\n        # Standardize the selected columns\n        scaler = StandardScaler()\n        scaled_values = scaler.fit_transform(df[columns[scale_cols]])\n        df[columns[scale_cols]] = scaled_values\n    return df", "compilation_passed": true, "time": 0.0016870498657226562, "tests_passed": false, "error": "TypeError"}
{"code": "np.random.seed(random_seed)\n    df = pd.DataFrame(np.random.randint(100, size=(n_rows, len(columns))), columns=columns)\n    df = df.apply(lambda x: StandardScaler().fit_transform(x[scale_cols]))\n\n    return df", "compilation_passed": true, "time": 0.002043008804321289, "tests_passed": false, "error": "ValueError"}
{"code": "np.random.seed(random_seed)\n\n    scaler = StandardScaler()\n    df = pd.DataFrame()\n    df[\"A\"] = np.random.uniform(low=10, high=100, size=(n_rows,))\n    df[\"B\"] = np.random.uniform(low=-10, high=10, size=(n_rows,))\n    df[\"C\"] = np.random.uniform(low=-10, high=10, size=(n_rows,))\n    df[\"D\"] = np.random.uniform(low=-10, high=10, size=(n_rows,))\n    df[\"E\"] = np.random.uniform(low=-10, high=10, size=(n_rows,))\n\n    df = df[columns]\n\n    for index in scale_cols:\n        col = df.columns[index]\n        if len(col) > 0:\n            scaler.fit(df[col])\n            df[col] = scaler.transform(df[col])", "compilation_passed": true, "time": 0.0024628639221191406, "tests_passed": false, "error": "ValueError"}
{"code": "# Initialize RNG\n    if random_seed is not None:\n        np.random.seed(random_seed)\n\n    # Create a random DataFrame\n    df = pd.DataFrame(np.random.randint(low=0, high=100, size=(n_rows, len(columns))), columns=columns)\n\n    # Initialize scaler\n    scaler = StandardScaler()\n\n    if len(scale_cols) > 0:\n        scaler.fit(df.iloc[:, scale_cols])\n\n        df.iloc[:, scale_cols] = scaler.transform(df.iloc[:, scale_cols])\n\n    return df", "compilation_passed": true, "time": 0.009733200073242188, "tests_passed": true, "error": null}
{"code": "# set seed\n    if random_seed is not None:\n        np.random.seed(random_seed)\n        pd.set_option('display.max_rows', None)\n\n    # generate random values\n    random_values = np.random.randint(0, 100, size=(n_rows, len(columns)))\n    df = pd.DataFrame(random_values, columns=columns)\n\n    # scale selected columns\n    scaler = StandardScaler()\n    scaler.fit(df[scale_cols])\n    df[scale_cols] = scaler.transform(df[scale_cols])\n\n    return df", "compilation_passed": true, "time": 0.0018839836120605469, "tests_passed": false, "error": "KeyError"}
{"code": "rng = np.random.RandomState(random_seed)\n    df = pd.DataFrame(columns=columns)\n    for i in range(n_rows):\n        row = {}\n        for c in df.columns:\n            row[c] = rng.randint(0, 100)\n        df.loc[i] = row\n\n    scaler = StandardScaler()\n    df.iloc[:, scale_cols] = scaler.fit_transform(\n        df.iloc[:, scale_cols])\n    return df", "compilation_passed": true, "time": 0.1966538429260254, "tests_passed": false, "error": "ValueError"}
{"code": "# Create an array filled with random values in the range [-10, 10] for each column in columns.\n    df = pd.DataFrame({column: np.random.randint(-10, 10, n_rows) for column in columns})\n    df = df.set_index(range(n_rows))\n\n    # If scale_cols is not empty, apply the StandardScaler to the columns at the specified indexes.\n    if scale_cols:\n        scaler = StandardScaler()\n        scaler.fit(df.iloc[:, scale_cols])\n        df.iloc[:, scale_cols] = scaler.transform(df.iloc[:, scale_cols])\n\n    return df", "compilation_passed": true, "time": 0.0017299652099609375, "tests_passed": false, "error": "KeyError"}
{"code": "columns = columns\n    rng = np.random.RandomState(random_seed)\n    df = pd.DataFrame(np.zeros(shape=(n_rows, len(columns))),\n                      index=range(n_rows), columns=columns)\n    for i in range(len(df.columns)):\n        if i not in scale_cols:\n            df[i] = rng.randint(1, 50000, n_rows)\n        else:\n            df[i] = rng.randint(1, 50000, n_rows)\n            df.iloc[:, i].std()\n\n    if len(scale_cols) > 0:\n        df.iloc[:, scale_cols] = StandardScaler().fit_transform(df.iloc[:, scale_cols])\n\n    return df", "compilation_passed": true, "time": 0.0029287338256835938, "tests_passed": true, "error": null}
{"code": "random_state = np.random.RandomState(random_seed)\n    df = pd.DataFrame(np.random.normal(0, 1, (n_rows, len(columns))), columns=columns)\n    scaler = StandardScaler()\n    df.iloc[0:3, [0, 1, 2, 3, 4]] = scaler.fit_transform(df.iloc[0:3, [0, 1, 2, 3, 4]])\n    df.iloc[3:, [0, 1, 2, 3, 4]] = scaler.transform(df.iloc[3:, [0, 1, 2, 3, 4]])\n\n    return df", "compilation_passed": true, "time": 0.0027968883514404297, "tests_passed": true, "error": null}
