{"code": " 2 * X + 0.2 * np.random.randn(num_samples, 1) * noise_strength", "compilation_passed": true, "time": 0.009830951690673828, "tests_passed": true, "error": null}
{"code": " X * 4 + np.random.normal(0, noise_strength, (num_samples, 1))", "compilation_passed": true, "time": 0.010010004043579102, "tests_passed": true, "error": null}
{"code": " np.random.rand(num_samples, 1) * noise_strength + X", "compilation_passed": true, "time": 0.008496999740600586, "tests_passed": true, "error": null}
{"code": " 3 + X * 4 + np.random.normal(0, noise_strength, size=num_samples)", "compilation_passed": true, "time": 0.09271001815795898, "tests_passed": true, "error": null}
{"code": " 2 * X + np.random.randn(num_samples, 1) * noise_strength", "compilation_passed": true, "time": 0.012199878692626953, "tests_passed": true, "error": null}
{"code": " 3 * X + np.random.normal(0, noise_strength, size=num_samples)", "compilation_passed": true, "time": 0.06820130348205566, "tests_passed": true, "error": null}
{"code": " 3 + X + noise_strength * np.random.randn(num_samples, 1)", "compilation_passed": true, "time": 0.010059118270874023, "tests_passed": true, "error": null}
{"code": " np.random.rand(num_samples, 1) + X * noise_strength", "compilation_passed": true, "time": 0.01305699348449707, "tests_passed": true, "error": null}
{"code": " 2 * X + noise_strength * np.random.rand(num_samples, 1)", "compilation_passed": true, "time": 0.010391950607299805, "tests_passed": true, "error": null}
{"code": " 5 * X + 3 + noise_strength * np.random.randn(num_samples, 1)", "compilation_passed": true, "time": 0.011691093444824219, "tests_passed": true, "error": null}
{"code": " X * 4 + noise_strength * np.random.normal(size=num_samples)", "compilation_passed": true, "time": 0.06711697578430176, "tests_passed": true, "error": null}
{"code": " (4 * X).ravel() + noise_strength * np.random.rand(num_samples)", "compilation_passed": true, "time": 0.00932002067565918, "tests_passed": true, "error": null}
{"code": " -0.3 + 3*X.squeeze(axis=1) + 0.1*np.random.randn(num_samples)*noise_strength", "compilation_passed": true, "time": 0.010319709777832031, "tests_passed": true, "error": null}
{"code": " 3*X + np.random.randn(num_samples)*noise_strength", "compilation_passed": true, "time": 0.06834101676940918, "tests_passed": true, "error": null}
{"code": " 3 * X + 4 + noise_strength * np.random.rand(num_samples, 1)", "compilation_passed": true, "time": 0.012267827987670898, "tests_passed": true, "error": null}
{"code": " 3 * X + 0.4 + noise_strength * np.random.randn(num_samples, 1)", "compilation_passed": true, "time": 0.024087905883789062, "tests_passed": true, "error": null}
{"code": " X * 4.5 + 3 + noise_strength * np.random.rand(num_samples, 1)", "compilation_passed": true, "time": 0.011261940002441406, "tests_passed": true, "error": null}
{"code": " X * 2 + np.random.normal(0, noise_strength, num_samples)", "compilation_passed": true, "time": 0.06885504722595215, "tests_passed": true, "error": null}
{"code": " X * 3 + np.random.normal(0, noise_strength, (num_samples, 1))", "compilation_passed": true, "time": 0.010651111602783203, "tests_passed": true, "error": null}
{"code": " 3*X + 2 + noise_strength*np.random.randn(num_samples, 1)", "compilation_passed": true, "time": 0.00928497314453125, "tests_passed": true, "error": null}
{"code": " 3 * X + 1", "compilation_passed": true, "time": 0.01416778564453125, "tests_passed": true, "error": null}
{"code": " 4 * X + 3 + np.random.normal(0, noise_strength, (num_samples, 1))", "compilation_passed": true, "time": 0.00935506820678711, "tests_passed": true, "error": null}
{"code": " 3 * X + 4 * np.random.rand(num_samples, 1) + noise_strength * np.random.normal(size=(num_samples, 1))", "compilation_passed": true, "time": 0.013171911239624023, "tests_passed": true, "error": null}
{"code": " X * 100 + np.random.randn(num_samples) * noise_strength", "compilation_passed": true, "time": 0.06395912170410156, "tests_passed": true, "error": null}
{"code": " 3 * X + np.random.randn(num_samples, 1) * noise_strength", "compilation_passed": true, "time": 0.009181976318359375, "tests_passed": true, "error": null}
{"code": " 5*X + 5 + noise_strength*np.random.rand(num_samples, 1)", "compilation_passed": true, "time": 0.008521080017089844, "tests_passed": true, "error": null}
{"code": " 2 * X + np.random.normal(0, noise_strength, size=num_samples)", "compilation_passed": true, "time": 0.07291173934936523, "tests_passed": true, "error": null}
{"code": " 3 + 4*X + noise_strength * np.random.randn(num_samples, 1)", "compilation_passed": true, "time": 0.012403011322021484, "tests_passed": true, "error": null}
{"code": " 5 + X * 3", "compilation_passed": true, "time": 0.01320028305053711, "tests_passed": true, "error": null}
{"code": " (5 + 3 * X + np.random.randn(num_samples, 1) * noise_strength).ravel()", "compilation_passed": true, "time": 0.009519815444946289, "tests_passed": true, "error": null}
