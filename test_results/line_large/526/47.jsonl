{"code": " np.array(stats[k]) for k in all_keys", "compilation_passed": true, "time": 0.02101302146911621, "tests_passed": false, "error": "KeyError"}
{"code": " {\"mean\": np.nanmean(v), \"median\": np.nanmedian(v)}", "compilation_passed": true, "time": 0.010212182998657227, "tests_passed": false, "error": "NameError"}
{"code": " {", "compilation_passed": false, "time": 0.0002460479736328125, "tests_passed": false, "error": "SyntaxError"}
{"code": " [np.mean(v), np.median(v)] if np.any(~np.isnan(v)) else [np.nan, np.nan]", "compilation_passed": true, "time": 0.010882139205932617, "tests_passed": false, "error": "NameError"}
{"code": " {\"mean\": np.mean(values), \"median\": np.median(values)}", "compilation_passed": true, "time": 0.009994983673095703, "tests_passed": false, "error": "NameError"}
{"code": " {'mean': np.mean(stats[k]), 'median': np.median(stats[k])}", "compilation_passed": true, "time": 0.00989389419555664, "tests_passed": false, "error": "NameError"}
{"code": " [np.nanmean(np.array(v)), np.nanmedian(np.array(v))]", "compilation_passed": true, "time": 0.009238719940185547, "tests_passed": false, "error": "NameError"}
{"code": " [np.mean(stats[k]), np.median(stats[k])]", "compilation_passed": true, "time": 0.009357929229736328, "tests_passed": false, "error": "NameError"}
{"code": " {\"mean\": np.mean(stats[k]), \"median\": np.median(stats[k])}", "compilation_passed": true, "time": 0.00913095474243164, "tests_passed": false, "error": "NameError"}
{"code": " [np.mean([v for v in stats[k] if not np.isnan(v)]),", "compilation_passed": false, "time": 0.00016188621520996094, "tests_passed": false, "error": "SyntaxError"}
{"code": " {\"mean\": np.mean(v), \"median\": np.median(v)} if np.any(np.isfinite(v)) else {}", "compilation_passed": true, "time": 0.009269952774047852, "tests_passed": false, "error": "NameError"}
{"code": " {'mean': np.nanmean(v), 'median': np.nanmedian(v)}", "compilation_passed": true, "time": 0.00953817367553711, "tests_passed": false, "error": "NameError"}
{"code": " {'mean': np.mean(v), 'median': np.median(v)}", "compilation_passed": true, "time": 0.009418010711669922, "tests_passed": false, "error": "NameError"}
{"code": " pd.Series(stats[k]).describe([\"mean\", \"median\"]).drop(\"count\")", "compilation_passed": true, "time": 0.009118795394897461, "tests_passed": false, "error": "NameError"}
{"code": " {\"mean\": np.mean(v), \"median\": np.median(v)}", "compilation_passed": true, "time": 0.009531021118164062, "tests_passed": false, "error": "NameError"}
{"code": " [np.mean(v), np.median(v)] for k, v in stats.items()", "compilation_passed": true, "time": 0.008270025253295898, "tests_passed": false, "error": "KeyError"}
{"code": " pd.Series(stats[k]).dropna().agg([\"mean\", \"median\"])", "compilation_passed": true, "time": 0.009393930435180664, "tests_passed": false, "error": "NameError"}
{"code": " {\"mean\": np.mean(v), \"median\": np.median(v)} for k, v in stats.items()", "compilation_passed": true, "time": 0.014848947525024414, "tests_passed": true, "error": null}
{"code": " {\"mean\": np.mean(v), \"median\": np.median(v)} if len(v) > 0 else np.nan", "compilation_passed": true, "time": 0.00953817367553711, "tests_passed": false, "error": "NameError"}
{"code": " (np.nanmean(stats[k]), np.nanmedian(stats[k]))", "compilation_passed": true, "time": 0.00916290283203125, "tests_passed": false, "error": "NameError"}
{"code": " [np.nanmean(v) if any(isinstance(x, (int, float)) for x in v) else np.nan,", "compilation_passed": false, "time": 0.0002009868621826172, "tests_passed": false, "error": "SyntaxError"}
