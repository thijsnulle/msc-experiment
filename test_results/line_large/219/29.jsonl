{"code": " np.fft.rfft([cmath.exp(i * cmath.pi / 180 * 1j).real for i in input_list])", "compilation_passed": true, "time": 0.021362781524658203, "tests_passed": false, "error": "NameError"}
{"code": " abs(np.fft.rfft(np.array([x for x in input_list]).astype(np.float)))", "compilation_passed": true, "time": 0.013811826705932617, "tests_passed": true, "error": null}
{"code": " np.fft.fft(np.radians(input_list))", "compilation_passed": true, "time": 0.021480083465576172, "tests_passed": false, "error": "TypeError"}
{"code": " np.fft.fft(input_list)", "compilation_passed": true, "time": 0.01644301414489746, "tests_passed": false, "error": "TypeError"}
{"code": " [np.absolute(np.fft.fft(int(i * np.pi / 180)))", "compilation_passed": false, "time": 0.0002040863037109375, "tests_passed": false, "error": "SyntaxError"}
{"code": " np.abs(np.fft.fft(input_list))", "compilation_passed": true, "time": 0.01131892204284668, "tests_passed": true, "error": null}
{"code": " np.fft.fft([el.degree() for el in input_list])", "compilation_passed": true, "time": 0.021003007888793945, "tests_passed": false, "error": "AttributeError"}
{"code": " np.fft.fft(np.array(input_list))", "compilation_passed": true, "time": 0.016460895538330078, "tests_passed": false, "error": "TypeError"}
{"code": " np.fft.fft(np.deg2rad(input_list))", "compilation_passed": true, "time": 0.016523122787475586, "tests_passed": false, "error": "TypeError"}
{"code": " np.fft.fft(input_list).real", "compilation_passed": true, "time": 0.010967016220092773, "tests_passed": true, "error": null}
{"code": " []", "compilation_passed": true, "time": 0.016072750091552734, "tests_passed": false, "error": "statistics.StatisticsError"}
{"code": " abs(np.fft.fft(np.array(input_list)))", "compilation_passed": true, "time": 0.011137008666992188, "tests_passed": true, "error": null}
{"code": " abs(np.fft.fft(np.deg2rad([elem.degree for elem in input_list])))", "compilation_passed": true, "time": 0.020997047424316406, "tests_passed": false, "error": "AttributeError"}
{"code": " np.abs(np.fft.fft([np.deg2rad(num) for num in input_list]))", "compilation_passed": true, "time": 0.010843276977539062, "tests_passed": true, "error": null}
{"code": " [abs(cmath.exp(complex(0, math.pi * element / 180))) for element in input_list]", "compilation_passed": true, "time": 0.02110600471496582, "tests_passed": false, "error": "NameError"}
{"code": " lambda lst: np.absolute(np.fft.fft(list(map(lambda x: math.radians(x), lst))))[:int(len(lst)/2)]", "compilation_passed": true, "time": 0.016273021697998047, "tests_passed": false, "error": "TypeError"}
