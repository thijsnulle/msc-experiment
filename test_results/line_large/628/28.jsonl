{"code": " [amplitude*math.sin(2*math.pi*frequency*t + phase_shift) for t in x]", "compilation_passed": true, "time": 0.07102799415588379, "tests_passed": true, "error": null}
{"code": " [amplitude*math.sin(frequency*math.pi*x_val+phase_shift/180*math.pi) for x_val in x]", "compilation_passed": true, "time": 0.07234406471252441, "tests_passed": true, "error": null}
{"code": " [amplitude * math.sin(2 * math.pi * frequency * xi + phase_shift) for xi in x]", "compilation_passed": true, "time": 0.0832209587097168, "tests_passed": true, "error": null}
{"code": " [amplitude*math.sin(2*math.pi*frequency*i+phase_shift) for i in x]", "compilation_passed": true, "time": 0.07136893272399902, "tests_passed": true, "error": null}
{"code": " [amplitude * math.sin(2*math.pi*frequency*t + phase_shift) for t in x]", "compilation_passed": true, "time": 0.07217288017272949, "tests_passed": true, "error": null}
{"code": " [amplitude * math.sin(2*math.pi*frequency*t+phase_shift) for t in x]", "compilation_passed": true, "time": 0.07267022132873535, "tests_passed": true, "error": null}
{"code": " [amplitude * math.sin(frequency * math.pi * x_i + phase_shift) for x_i in x]", "compilation_passed": true, "time": 0.07475996017456055, "tests_passed": true, "error": null}
{"code": " [amplitude * math.sin(2*math.pi*frequency*x_i+phase_shift) for x_i in x]", "compilation_passed": true, "time": 0.07657122611999512, "tests_passed": true, "error": null}
{"code": " [amplitude * math.sin(2 * math.pi * frequency * i + phase_shift) for i in x]", "compilation_passed": true, "time": 0.07571125030517578, "tests_passed": true, "error": null}
{"code": " [amplitude * math.sin(2 * math.pi * frequency * x_i + phase_shift) for x_i in x]", "compilation_passed": true, "time": 0.07367181777954102, "tests_passed": true, "error": null}
{"code": " [amplitude*math.sin(2*math.pi*frequency*t+phase_shift) for t in x]", "compilation_passed": true, "time": 0.07796025276184082, "tests_passed": true, "error": null}
{"code": " [amplitude * math.sin(2*math.pi*frequency*i + phase_shift) for i in x]", "compilation_passed": true, "time": 0.07397818565368652, "tests_passed": true, "error": null}
{"code": " [amplitude * math.sin(frequency * i + phase_shift) for i in x]", "compilation_passed": true, "time": 0.08311772346496582, "tests_passed": true, "error": null}
{"code": " [amplitude * math.sin(2*math.pi*frequency*x_ + phase_shift) for x_ in x]", "compilation_passed": true, "time": 0.07639503479003906, "tests_passed": true, "error": null}
{"code": " [amplitude*math.sin(2*math.pi*frequency*x + phase_shift) for x in x]", "compilation_passed": true, "time": 0.08195996284484863, "tests_passed": true, "error": null}
{"code": " [amplitude * math.sin(frequency*2*math.pi*i+phase_shift) for i in x]", "compilation_passed": true, "time": 0.07859301567077637, "tests_passed": true, "error": null}
{"code": " [amplitude * math.sin(2 * math.pi * frequency * t + phase_shift) for t in x]", "compilation_passed": true, "time": 0.07937192916870117, "tests_passed": true, "error": null}
{"code": " [amplitude * math.sin(frequency * 2 * math.pi * i + phase_shift) for i in x]", "compilation_passed": true, "time": 0.07491898536682129, "tests_passed": true, "error": null}
{"code": " [math.sin(frequency * 2 * math.pi * i + phase_shift) * amplitude for i in x]", "compilation_passed": true, "time": 0.07578802108764648, "tests_passed": true, "error": null}
{"code": " [amplitude * math.sin(2*math.pi*frequency*x_val + phase_shift) for x_val in x]", "compilation_passed": true, "time": 0.07671904563903809, "tests_passed": true, "error": null}
{"code": " [amplitude*math.sin(frequency*(2*math.pi*(i/100) - (phase_shift*(math.pi/180)))) for i in x]", "compilation_passed": true, "time": 0.08009481430053711, "tests_passed": true, "error": null}
{"code": " [amplitude * math.sin(2 * math.pi * frequency * (i-phase_shift)) for i in x]", "compilation_passed": true, "time": 0.07697272300720215, "tests_passed": true, "error": null}
