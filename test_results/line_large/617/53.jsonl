{"code": " results_df['Match Result'].str.extract(r'\\((\\d+) goals, \\$(\\d+)\\)', expand=False).astype(int)", "compilation_passed": true, "time": 0.01368093490600586, "tests_passed": false, "error": "ValueError"}
{"code": " results_df['Match Result'].str.extract(r'\\((\\d+) goals', expand=False).astype(int)", "compilation_passed": true, "time": 0.6577019691467285, "tests_passed": true, "error": null}
{"code": " results_df['Match Result'].apply(lambda x: int(re.search(r'\\((\\d+) goals', x).group(1)))", "compilation_passed": true, "time": 0.6376388072967529, "tests_passed": true, "error": null}
{"code": " results_df['Match Result'].str.extract(r'\\((\\d+) goals', expand=False)", "compilation_passed": true, "time": 0.28046488761901855, "tests_passed": false, "error": "TypeError"}
{"code": " results_df['Match Result'].str.extract(r'\\((\\d+)')", "compilation_passed": true, "time": 0.26252007484436035, "tests_passed": false, "error": "TypeError"}
{"code": " results_df['Match Result'].apply(lambda x: int(re.search(r\"\\((\\d+) goals\", x).group(1)))", "compilation_passed": true, "time": 0.667884111404419, "tests_passed": true, "error": null}
{"code": " results_df['Match Result'].apply(lambda x: int(re.search('\\((\\d+) goals', x).group(1)))", "compilation_passed": true, "time": 0.679131031036377, "tests_passed": true, "error": null}
{"code": " results_df['Match Result'].apply(lambda x: int(re.search(r\"(\\d+) goals\", x).group(1)))", "compilation_passed": true, "time": 0.6583700180053711, "tests_passed": true, "error": null}
{"code": " results_df['Match Result'].str.extract(r'(\\d+) goals', expand=False).astype(int)", "compilation_passed": true, "time": 0.6822569370269775, "tests_passed": true, "error": null}
{"code": " results_df['Match Result'].apply(lambda x: int(re.search(r'\\((\\d+) goals,', x).group(1)))", "compilation_passed": true, "time": 0.7471292018890381, "tests_passed": true, "error": null}
{"code": " results_df['Match Result'].apply(lambda x: int(re.search(r'\\(([0-9]+) goals', x).group(1)))", "compilation_passed": true, "time": 0.7345399856567383, "tests_passed": true, "error": null}
{"code": " results_df['Match Result'].str.extract(r'(\\d+) goals').astype(int)", "compilation_passed": true, "time": 0.6686999797821045, "tests_passed": true, "error": null}
{"code": " results_df['Match Result'].apply(lambda x: int(re.search('\\(([^)]+)', x).group(1).split()[0]))", "compilation_passed": true, "time": 0.8109569549560547, "tests_passed": true, "error": null}
{"code": " results_df['Match Result'].apply(lambda x: int(re.findall(r'\\((\\d+) goals', x)[0]))", "compilation_passed": true, "time": 0.8008778095245361, "tests_passed": true, "error": null}
{"code": " results_df['Match Result'].apply(", "compilation_passed": false, "time": 0.0007250308990478516, "tests_passed": false, "error": "SyntaxError"}
{"code": " results_df['Match Result'].apply(lambda x: int(re.findall(r'\\(([0-9]+) goals', x)[0]))", "compilation_passed": true, "time": 0.8654987812042236, "tests_passed": true, "error": null}
{"code": " results_df['Match Result'].apply(lambda x: int(re.search(r'(\\d+) goals', x).group(1)))", "compilation_passed": true, "time": 0.49701595306396484, "tests_passed": true, "error": null}
{"code": " results_df['Match Result'].apply(lambda x: int(re.findall(r'\\((\\d+) goals, \\$(\\d+)', x)[0][0]))", "compilation_passed": true, "time": 0.4872400760650635, "tests_passed": true, "error": null}
