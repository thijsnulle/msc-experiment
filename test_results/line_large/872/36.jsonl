{"code": " [np.mean([x for x in column if np.issubdtype(np.asarray(x).dtype, np.number)]) for column in unzipped_data]", "compilation_passed": true, "time": 0.008762836456298828, "tests_passed": true, "error": null}
{"code": " [np.mean([value for value in column if isinstance(value, (int, float, np.number))]) for column in unzipped_data]", "compilation_passed": true, "time": 0.005688905715942383, "tests_passed": true, "error": null}
{"code": " []", "compilation_passed": true, "time": 0.005330085754394531, "tests_passed": true, "error": null}
{"code": " [np.nanmean([val for val in column if isinstance(val, (int, float))])", "compilation_passed": false, "time": 0.00016927719116210938, "tests_passed": false, "error": "SyntaxError"}
{"code": " [np.mean([float(elem) for elem in position if isinstance(elem, (int, float))]) for position in unzipped_data]", "compilation_passed": true, "time": 0.0056171417236328125, "tests_passed": true, "error": null}
{"code": " [np.mean([val for val in unzipped_tuple if isinstance(val, (int, float))]) for unzipped_tuple in unzipped_data]", "compilation_passed": true, "time": 0.005705833435058594, "tests_passed": true, "error": null}
{"code": " [np.nanmean([float(x) for x in values if x != \"\"]) for values in unzipped_data]", "compilation_passed": true, "time": 0.009286880493164062, "tests_passed": false, "error": "ValueError"}
{"code": " [np.mean(values) if all(np.isreal(v) for v in values) else np.nan", "compilation_passed": false, "time": 0.00015997886657714844, "tests_passed": false, "error": "SyntaxError"}
{"code": " [np.mean([x for x in values if isinstance(x, (int, float))]) for values in unzipped_data]", "compilation_passed": true, "time": 0.004940986633300781, "tests_passed": true, "error": null}
{"code": " [np.mean([float(num) for num in col if isinstance(num, (int, float))]) for col in unzipped_data]", "compilation_passed": true, "time": 0.0047223567962646484, "tests_passed": true, "error": null}
{"code": " [np.mean([float(value) for value in position if isinstance(value, (int, float))]) for position in unzipped_data]", "compilation_passed": true, "time": 0.005519866943359375, "tests_passed": true, "error": null}
{"code": " [np.mean([x for x in col if isinstance(x, (int, float))]) for col in unzipped_data]", "compilation_passed": true, "time": 0.005899190902709961, "tests_passed": true, "error": null}
{"code": " [np.mean([x for x in data_tuple if isinstance(x, (int, float))]) for data_tuple in unzipped_data]", "compilation_passed": true, "time": 0.004719734191894531, "tests_passed": true, "error": null}
{"code": " [np.mean([val for val in row if isinstance(val, (int, float))]) for row in unzipped_data]", "compilation_passed": true, "time": 0.004669189453125, "tests_passed": true, "error": null}
{"code": " [np.nanmean([float(item) for item in sublist if isinstance(item, (float, int))]) for sublist in unzipped_data]", "compilation_passed": true, "time": 0.002723217010498047, "tests_passed": true, "error": null}
{"code": " [np.mean([x for x in position if isinstance(x, (int, float))]) for position in unzipped_data]", "compilation_passed": true, "time": 0.004559755325317383, "tests_passed": true, "error": null}
{"code": " [np.mean(filter(lambda x: isinstance(x, (int, float)), row)) for row in unzipped_data]", "compilation_passed": true, "time": 0.013773202896118164, "tests_passed": false, "error": "TypeError"}
{"code": " [np.nanmean([value for value in sublist if isinstance(value, (int, float))]) for sublist in unzipped_data]", "compilation_passed": true, "time": 0.002366781234741211, "tests_passed": true, "error": null}
{"code": " [np.mean([val for val in position if isinstance(val, (int, float))]) for position in unzipped_data]", "compilation_passed": true, "time": 0.004797935485839844, "tests_passed": true, "error": null}
{"code": " np.nanmean(unzipped_data, axis=1, where=[isinstance(val, (int, float)) for val in unzipped_data], dtype=np.float64)", "compilation_passed": true, "time": 0.007574796676635742, "tests_passed": false, "error": "TypeError"}
{"code": " [np.nanmean([value for value in unzipped_row if isinstance(value, (int, float, np.integer, np.floating))]) for unzipped_row in unzipped_data]", "compilation_passed": true, "time": 0.0025260448455810547, "tests_passed": true, "error": null}
{"code": " [np.mean([float(val) for val in values if isinstance(val, (int, float, np.number))]) for values in unzipped_data]", "compilation_passed": true, "time": 0.004645824432373047, "tests_passed": true, "error": null}
{"code": " [np.nanmean([val for val in unzip if np.isreal(val)]) for unzip in unzipped_data]", "compilation_passed": true, "time": 0.0025870800018310547, "tests_passed": true, "error": null}
{"code": " [np.mean([float(x) for x in values if isinstance(x, (int, float))]) for values in unzipped_data]", "compilation_passed": true, "time": 0.004477977752685547, "tests_passed": true, "error": null}
{"code": " [np.mean([float(x) for x in sublist if isinstance(x, (int, float, complex)) and not np.isnan(x)]) for sublist in unzipped_data]", "compilation_passed": true, "time": 0.0023679733276367188, "tests_passed": true, "error": null}
{"code": " [np.mean([float(val) for val in pos if isinstance(val, (int, float, np.integer, np.floating))])", "compilation_passed": false, "time": 0.00021314620971679688, "tests_passed": false, "error": "SyntaxError"}
