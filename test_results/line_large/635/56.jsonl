{"code": " CountVectorizer(ngram_range=(n, n), token_pattern=r'\\b\\w+\\b', max_df=1.0, min_df=1)", "compilation_passed": true, "time": 0.3177762031555176, "tests_passed": true, "error": null}
{"code": " CountVectorizer(ngram_range=(n, n))", "compilation_passed": true, "time": 0.35656189918518066, "tests_passed": true, "error": null}
{"code": " CountVectorizer(ngram_range=(n, n), analyzer='word')", "compilation_passed": true, "time": 0.3531918525695801, "tests_passed": true, "error": null}
{"code": " CountVectorizer(ngram_range=(n, n), token_pattern=r'\\b\\w+\\b')", "compilation_passed": true, "time": 0.39255309104919434, "tests_passed": true, "error": null}
{"code": " CountVectorizer(ngram_range=(n, n), token_pattern='\\\\b\\\\w+\\\\b')", "compilation_passed": true, "time": 0.3891901969909668, "tests_passed": true, "error": null}
{"code": " CountVectorizer(ngram_range=(n, n), stop_words=stop_words, max_features=1)", "compilation_passed": true, "time": 0.02769780158996582, "tests_passed": false, "error": "sklearn.utils._param_validation.InvalidParameterError"}
{"code": " CountVectorizer(ngram_range=(n, n), token_pattern='(?u)\\\\b\\\\w+\\\\b')", "compilation_passed": true, "time": 0.5169100761413574, "tests_passed": true, "error": null}
{"code": " CountVectorizer(ngram_range=(n, n), token_pattern=r'\\b[^\\W_]+\\b')", "compilation_passed": true, "time": 0.570547342300415, "tests_passed": true, "error": null}
{"code": " CountVectorizer(ngram_range=(n, n), min_df=1)", "compilation_passed": true, "time": 0.19965887069702148, "tests_passed": true, "error": null}
