{"code": " np.array([start_date_np + np.timedelta64(day, 'D') for day in selected_dates]).reshape((rows, columns))", "compilation_passed": true, "time": 0.0021910667419433594, "tests_passed": true, "error": null}
{"code": " [[start_date_np + np.timedelta64(selected_dates[i*columns + j], 'D') for j in range(columns)] for i in range(rows)]", "compilation_passed": true, "time": 0.006896257400512695, "tests_passed": false, "error": "AttributeError"}
{"code": " np.array([start_date_np + np.timedelta64(i, 'D') for i in selected_dates]).reshape(rows, columns)", "compilation_passed": true, "time": 0.002359151840209961, "tests_passed": true, "error": null}
{"code": " np.array([start_date_np + np.timedelta64(day, 'D').astype('datetime64[us]') for day in selected_dates]).reshape(rows, columns)", "compilation_passed": true, "time": 0.016190052032470703, "tests_passed": false, "error": "numpy.core._exceptions._UFuncBinaryResolutionError"}
{"code": " np.zeros((rows, columns), dtype='datetime64[D]')", "compilation_passed": true, "time": 0.006536960601806641, "tests_passed": true, "error": null}
{"code": " [[(start_date + np.timedelta64(selected_dates[i], 'D')).strftime('%Y-%m-%d')", "compilation_passed": false, "time": 0.0002830028533935547, "tests_passed": false, "error": "SyntaxError"}
{"code": " np.array([start_date_np + np.timedelta64(d, 'D') for d in selected_dates]).reshape(rows, columns)", "compilation_passed": true, "time": 0.0023279190063476562, "tests_passed": true, "error": null}
{"code": " np.zeros((rows, columns), dtype='datetime64[us]')", "compilation_passed": true, "time": 0.006312131881713867, "tests_passed": true, "error": null}
{"code": " np.empty((rows, columns), dtype='datetime64[D]')", "compilation_passed": true, "time": 0.008289098739624023, "tests_passed": true, "error": null}
{"code": " np.array([start_date_np + np.timedelta64(x, 'D') for x in selected_dates])", "compilation_passed": true, "time": 0.006681919097900391, "tests_passed": true, "error": null}
{"code": " [[start_date_np + np.timedelta64(selected_dates[i*columns+j], 'D') for j in range(columns)] for i in range(rows)]", "compilation_passed": true, "time": 0.006308078765869141, "tests_passed": false, "error": "AttributeError"}
{"code": " np.array(selected_dates)", "compilation_passed": true, "time": 0.006025075912475586, "tests_passed": true, "error": null}
{"code": " np.array([start_date_np + np.timedelta64(day, 'D') for day in selected_dates]).reshape(rows, columns)", "compilation_passed": true, "time": 0.0025141239166259766, "tests_passed": true, "error": null}
{"code": " [[(start_date + datetime.timedelta(days=i)).strftime('%Y-%m-%dT%H:%M:%S.%f')", "compilation_passed": false, "time": 0.00038123130798339844, "tests_passed": false, "error": "SyntaxError"}
{"code": " [['' for _ in range(columns)] for _ in range(rows)]", "compilation_passed": true, "time": 0.006986141204833984, "tests_passed": false, "error": "AttributeError"}
{"code": " np.array([start_date_np + np.timedelta64(d, 'D') for d in selected_dates])", "compilation_passed": true, "time": 0.006660938262939453, "tests_passed": true, "error": null}
{"code": " np.array(selected_dates) + int(start_date_np.astype(int))", "compilation_passed": true, "time": 0.007440805435180664, "tests_passed": true, "error": null}
{"code": " []", "compilation_passed": true, "time": 0.006092071533203125, "tests_passed": false, "error": "AttributeError"}
{"code": " np.array([start_date_np + np.timedelta64(x, 'D') for x in selected_dates]).reshape(rows, columns)", "compilation_passed": true, "time": 0.0025222301483154297, "tests_passed": true, "error": null}
{"code": " [str(start_date_np + np.timedelta64(date, 'D')) for date in selected_dates]", "compilation_passed": true, "time": 0.006546974182128906, "tests_passed": false, "error": "AttributeError"}
{"code": " np.array(selected_dates, dtype=np.datetime64).reshape(rows, columns) + start_date_np", "compilation_passed": true, "time": 0.010844945907592773, "tests_passed": false, "error": "ValueError"}
{"code": " np.array([start_date_np + np.timedelta64(date, 'D') for date in selected_dates]).reshape(rows, columns)", "compilation_passed": true, "time": 0.002830028533935547, "tests_passed": true, "error": null}
{"code": " [[datetime(start_date.year, start_date.month, start_date.day) + datetime.timedelta(days=day) for day in selected_dates[i*columns:(i+1)*columns]] for i in range(rows)]", "compilation_passed": true, "time": 0.02263188362121582, "tests_passed": false, "error": "AttributeError"}
{"code": " np.array(selected_dates).reshape(rows, columns)", "compilation_passed": true, "time": 0.00676417350769043, "tests_passed": true, "error": null}
{"code": " np.array([start_date + np.timedelta64(x, 'D') for x in selected_dates]).reshape(rows, columns)", "compilation_passed": true, "time": 0.013895988464355469, "tests_passed": false, "error": "numpy.core._exceptions._UFuncBinaryResolutionError"}
