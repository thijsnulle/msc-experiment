{"code": " pd.Series(weekdays).value_counts(dropna=False)", "compilation_passed": true, "time": 0.012340068817138672, "tests_passed": true, "error": null}
{"code": " pd.Series(weekdays).value_counts(normalize=False, sort=False)", "compilation_passed": true, "time": 0.01252603530883789, "tests_passed": true, "error": null}
{"code": " pd.Series(np.zeros(len(DAYS_OF_WEEK)), index=DAYS_OF_WEEK)", "compilation_passed": true, "time": 0.012145757675170898, "tests_passed": true, "error": null}
{"code": " np.bincount(weekdays, minlength=7)", "compilation_passed": true, "time": 0.005244255065917969, "tests_passed": true, "error": null}
{"code": " {DAYS_OF_WEEK[weekday]: weekdays.count(weekday) for weekday in range(7)}", "compilation_passed": true, "time": 0.005355119705200195, "tests_passed": true, "error": null}
{"code": " {day: weekdays.count(i) for i, day in enumerate(DAYS_OF_WEEK)}", "compilation_passed": true, "time": 0.008967876434326172, "tests_passed": true, "error": null}
{"code": " {day: weekdays.count(day_index) for day_index, day in enumerate(DAYS_OF_WEEK)}", "compilation_passed": true, "time": 0.0075337886810302734, "tests_passed": true, "error": null}
{"code": " pd.Series(weekdays).value_counts(dropna=False).reindex(range(7)).fillna(0)", "compilation_passed": true, "time": 0.013098955154418945, "tests_passed": true, "error": null}
{"code": " pd.Series(np.bincount(weekdays, minlength=len(DAYS_OF_WEEK))).reindex(range(len(DAYS_OF_WEEK))).fillna(0).astype(int)", "compilation_passed": true, "time": 0.009196043014526367, "tests_passed": true, "error": null}
{"code": " np.array([weekdays.count(i) for i in range(7)])", "compilation_passed": true, "time": 0.0046977996826171875, "tests_passed": true, "error": null}
{"code": " pd.Series(np.zeros(7), index=DAYS_OF_WEEK)", "compilation_passed": true, "time": 0.006926059722900391, "tests_passed": true, "error": null}
{"code": " np.bincount(weekdays, minlength=len(DAYS_OF_WEEK))", "compilation_passed": true, "time": 0.004818916320800781, "tests_passed": true, "error": null}
{"code": " pd.Series(weekdays).value_counts().reindex(range(7)).fillna(0).astype(int)", "compilation_passed": true, "time": 0.00693511962890625, "tests_passed": true, "error": null}
{"code": " pd.Series([weekdays.count(day) for day in range(7)], index=DAYS_OF_WEEK)", "compilation_passed": true, "time": 0.005819797515869141, "tests_passed": true, "error": null}
{"code": " pd.Series(weekdays).value_counts(sort=False).reindex(range(7)).fillna(0).astype(int)", "compilation_passed": true, "time": 0.0077779293060302734, "tests_passed": true, "error": null}
{"code": " pd.Series(np.zeros(7))", "compilation_passed": true, "time": 0.0071201324462890625, "tests_passed": true, "error": null}
{"code": " {day: weekdays.count(idx) for idx, day in enumerate(DAYS_OF_WEEK)}", "compilation_passed": true, "time": 0.005562782287597656, "tests_passed": true, "error": null}
{"code": " np.zeros(7)", "compilation_passed": true, "time": 0.0069119930267333984, "tests_passed": true, "error": null}
{"code": " pd.Series(weekdays).value_counts(sort=False)", "compilation_passed": true, "time": 0.00688624382019043, "tests_passed": true, "error": null}
{"code": " pd.Series([weekdays.count(i) for i in range(7)], index=DAYS_OF_WEEK)", "compilation_passed": true, "time": 0.004973888397216797, "tests_passed": true, "error": null}
{"code": " dict(zip(DAYS_OF_WEEK, [weekdays.count(day) for day in range(7)]))", "compilation_passed": true, "time": 0.005576133728027344, "tests_passed": true, "error": null}
{"code": " [weekdays.count(i) for i in range(7)]", "compilation_passed": true, "time": 0.0047571659088134766, "tests_passed": true, "error": null}
{"code": " pd.Series(weekdays).value_counts(sort=False).reindex(range(7), fill_value=0).rename_axis('weekday').rename('count')", "compilation_passed": true, "time": 0.008043766021728516, "tests_passed": true, "error": null}
{"code": " [weekdays.count(day) for day in range(7)]", "compilation_passed": true, "time": 0.005175113677978516, "tests_passed": true, "error": null}
{"code": " np.array([weekdays.count(day) for day in range(7)])", "compilation_passed": true, "time": 0.004750967025756836, "tests_passed": true, "error": null}
