{"code": " [np.mean([val for val in col if isinstance(val, (int, float))]) for col in unzipped_data[1:]]", "compilation_passed": true, "time": 0.005990028381347656, "tests_passed": true, "error": null}
{"code": " [np.mean([v for v in col if isinstance(v, (int, float))]) for col in unzipped_data[1:]]", "compilation_passed": true, "time": 0.0047910213470458984, "tests_passed": true, "error": null}
{"code": " [np.mean([x for x in column if isinstance(x, (int, float))]) for column in unzipped_data[1:]]", "compilation_passed": true, "time": 0.005151987075805664, "tests_passed": true, "error": null}
{"code": " [np.nanmean([value for value in column if isinstance(value, (int, float))])", "compilation_passed": false, "time": 0.00022721290588378906, "tests_passed": false, "error": "SyntaxError"}
{"code": " [np.mean([x for x in col if isinstance(x, (int, float))]) for col in unzipped_data]", "compilation_passed": true, "time": 0.007882118225097656, "tests_passed": true, "error": null}
{"code": " [np.mean([d for d in column if isinstance(d, (int, float))])", "compilation_passed": false, "time": 0.00019288063049316406, "tests_passed": false, "error": "SyntaxError"}
{"code": " [np.nanmean([val for val in col if isinstance(val, (int, float))]) for col in unzipped_data[1:]]", "compilation_passed": true, "time": 0.005125284194946289, "tests_passed": true, "error": null}
{"code": " [np.mean([val for val in col[1:] if isinstance(val, (int, float))]) for col in unzipped_data[1:]]", "compilation_passed": true, "time": 0.0049591064453125, "tests_passed": true, "error": null}
{"code": " [np.mean(filter(np.issubdtype, np.array(col[1:]).astype(np.float64))) for col in unzipped_data]", "compilation_passed": true, "time": 0.009830713272094727, "tests_passed": false, "error": "ValueError"}
{"code": " [np.mean([value for value in column if isinstance(value, (int, float))]) for column in unzipped_data]", "compilation_passed": true, "time": 0.0064640045166015625, "tests_passed": true, "error": null}
{"code": " [np.mean([v for v in col[1:] if isinstance(v, (int, float))]) for col in unzipped_data]", "compilation_passed": true, "time": 0.005315065383911133, "tests_passed": true, "error": null}
{"code": " [np.mean(list(filter(lambda x: isinstance(x, (int, float)), column))) for column in unzipped_data]", "compilation_passed": true, "time": 0.007959127426147461, "tests_passed": true, "error": null}
{"code": " [np.mean([val for val in column if isinstance(val, (int, float))])", "compilation_passed": false, "time": 0.00035309791564941406, "tests_passed": false, "error": "SyntaxError"}
{"code": " [np.nanmean([value for value in column if isinstance(value, (int, float))]) for column in unzipped_data[1:]]", "compilation_passed": true, "time": 0.006426811218261719, "tests_passed": true, "error": null}
{"code": " [np.mean([float(x) for x in col if isinstance(x, (int, float))])", "compilation_passed": false, "time": 0.0002110004425048828, "tests_passed": false, "error": "SyntaxError"}
{"code": " [np.mean([value for value in column[1:] if isinstance(value, (int, float))]) for column in unzipped_data]", "compilation_passed": true, "time": 0.0060961246490478516, "tests_passed": true, "error": null}
{"code": " [np.mean(filter(np.issubdtype, col)) for col in unzipped_data[1:]]", "compilation_passed": true, "time": 0.015421867370605469, "tests_passed": false, "error": "TypeError"}
{"code": " [np.mean([x for x in col if isinstance(x, (int, float))]) for col in unzipped_data[1:]]", "compilation_passed": true, "time": 0.005168914794921875, "tests_passed": true, "error": null}
{"code": " [np.mean([val for val in col[1:] if isinstance(val, (int, float))]) for col in unzipped_data]", "compilation_passed": true, "time": 0.0065343379974365234, "tests_passed": true, "error": null}
{"code": " [np.mean([val for val in col if isinstance(val, (int, float))]) for col in unzipped_data]", "compilation_passed": true, "time": 0.007436990737915039, "tests_passed": true, "error": null}
{"code": " [np.mean([val for val in column if isinstance(val, (int, float))]) for column in unzipped_data[1:]]", "compilation_passed": true, "time": 0.005050182342529297, "tests_passed": true, "error": null}
{"code": " [np.mean(np.array(col[1:], dtype=np.float64)) if np.array(col[1:], dtype=np.float64).size > 0 else np.nan for col in unzipped_data[1:]]", "compilation_passed": true, "time": 0.005491971969604492, "tests_passed": true, "error": null}
{"code": " [np.mean([value for value in column if isinstance(value, (int, float))])", "compilation_passed": false, "time": 0.00022292137145996094, "tests_passed": false, "error": "SyntaxError"}
{"code": " [np.mean([x for x in column[1:] if isinstance(x, (int, float))]) for column in unzipped_data[1:]]", "compilation_passed": true, "time": 0.0058460235595703125, "tests_passed": true, "error": null}
{"code": " [np.mean([val for val in column if isinstance(val, (int, float))]) for column in unzipped_data]", "compilation_passed": true, "time": 0.007003307342529297, "tests_passed": true, "error": null}
