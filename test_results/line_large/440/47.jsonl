{"code": " np.tensordot(P, T, axes=([1], [0]))", "compilation_passed": true, "time": 0.0030269622802734375, "tests_passed": false, "error": "ValueError"}
{"code": " np.einsum(\"ij,kjl->ikl\", P, T)", "compilation_passed": true, "time": 0.0023279190063476562, "tests_passed": false, "error": "ValueError"}
{"code": " np.tensordot(T, P, axes=([2], [1]))", "compilation_passed": true, "time": 0.002156972885131836, "tests_passed": false, "error": "ValueError"}
{"code": " (P @ T).flatten()", "compilation_passed": true, "time": 0.0016040802001953125, "tests_passed": false, "error": "ValueError"}
{"code": " np.dot(P, T).reshape(-1, T.shape[2])", "compilation_passed": true, "time": 0.0015871524810791016, "tests_passed": false, "error": "ValueError"}
{"code": " np.einsum(\"ij, ajk -> ik\", P, T)", "compilation_passed": true, "time": 0.0016450881958007812, "tests_passed": false, "error": "ValueError"}
{"code": " np.tensordot(T, P, axes=([0], [1]))", "compilation_passed": true, "time": 0.002357006072998047, "tests_passed": true, "error": null}
{"code": " np.einsum(\"ik, jkl -> jl\", P, T).flatten()", "compilation_passed": true, "time": 0.0016398429870605469, "tests_passed": false, "error": "ValueError"}
{"code": " np.einsum(\"ij, jkl -> ikl\", P, T).flatten()", "compilation_passed": true, "time": 0.002485990524291992, "tests_passed": false, "error": "ValueError"}
{"code": " np.matmul(P, T).flatten()", "compilation_passed": true, "time": 0.0015821456909179688, "tests_passed": false, "error": "ValueError"}
{"code": " np.matmul(P, T)", "compilation_passed": true, "time": 0.001592874526977539, "tests_passed": false, "error": "ValueError"}
{"code": " np.einsum(\"ij, kij -> ik\", P, T)", "compilation_passed": true, "time": 0.001627206802368164, "tests_passed": false, "error": "ValueError"}
{"code": " np.matmul(P, T.reshape(T.shape[0], -1)).reshape(-1, T.shape[1], T.shape[2])", "compilation_passed": true, "time": 0.002257823944091797, "tests_passed": false, "error": "ValueError"}
{"code": " P @ np.swapaxes(T, 1, 2)", "compilation_passed": true, "time": 0.0016341209411621094, "tests_passed": false, "error": "ValueError"}
{"code": " np.dot(P, T.reshape((T.shape[0], -1)))", "compilation_passed": true, "time": 0.0022940635681152344, "tests_passed": false, "error": "ValueError"}
{"code": " np.dot(P, T).reshape(-1, 1)", "compilation_passed": true, "time": 0.0015990734100341797, "tests_passed": false, "error": "ValueError"}
{"code": " np.einsum(\"ab,bij->aij\", P, T)", "compilation_passed": true, "time": 0.002270221710205078, "tests_passed": false, "error": "ValueError"}
{"code": " np.einsum(\"ij,aik->aj\", P, T).flatten()", "compilation_passed": true, "time": 0.001641988754272461, "tests_passed": false, "error": "ValueError"}
{"code": " np.einsum(\"ik, jkl -> il\", P, T).reshape(-1, 1)", "compilation_passed": true, "time": 0.001603841781616211, "tests_passed": false, "error": "ValueError"}
{"code": " np.einsum(\"ij, ajk -> iak\", P, T).reshape(-1, T.shape[1])", "compilation_passed": true, "time": 0.0016930103302001953, "tests_passed": false, "error": "ValueError"}
{"code": " P.dot(T.reshape(T.shape[0], -1))", "compilation_passed": true, "time": 0.002293825149536133, "tests_passed": false, "error": "ValueError"}
{"code": " np.matmul(P, T).reshape(T.shape[1], -1)  # reshaping the array into 2D", "compilation_passed": true, "time": 0.0016140937805175781, "tests_passed": false, "error": "ValueError"}
{"code": " np.einsum(\"ik, jkl -> ijl\", P, T)", "compilation_passed": true, "time": 0.0016460418701171875, "tests_passed": false, "error": "ValueError"}
{"code": " P @ T.reshape(T.shape[0], T.shape[1] * T.shape[2])", "compilation_passed": true, "time": 0.002335071563720703, "tests_passed": false, "error": "ValueError"}
{"code": " np.tensordot(P, T, axes=[[1], [0]]).squeeze()", "compilation_passed": true, "time": 0.002299070358276367, "tests_passed": false, "error": "ValueError"}
