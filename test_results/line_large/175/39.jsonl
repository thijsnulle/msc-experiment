{"code": " df[df['Title'].str.lower().str.contains(pattern)]", "compilation_passed": true, "time": 0.1349201202392578, "tests_passed": true, "error": null}
{"code": " df[df['Title'].str.contains(pattern)]", "compilation_passed": true, "time": 0.12488985061645508, "tests_passed": true, "error": null}
{"code": " df[df['Title'].str.contains(pattern) & (df['Views'] > 0)]", "compilation_passed": true, "time": 0.12250590324401855, "tests_passed": true, "error": null}
{"code": " df[df['Title'].apply(lambda x: pattern.search(x))]", "compilation_passed": true, "time": 0.022511959075927734, "tests_passed": false, "error": "KeyError"}
{"code": " df[(df['Title'].str.contains(pattern)) &", "compilation_passed": false, "time": 0.0002548694610595703, "tests_passed": false, "error": "SyntaxError"}
{"code": " df[(df['Title'].str.lower().str.contains(pattern))]", "compilation_passed": true, "time": 0.11837172508239746, "tests_passed": true, "error": null}
{"code": " df[df['Title'].str.contains(pattern) & df['Views'].notnull() & df['Likes'].notnull()]", "compilation_passed": true, "time": 0.1278400421142578, "tests_passed": true, "error": null}
{"code": " df[df['Title'].str.contains(pattern, case=False, na=False)].dropna()", "compilation_passed": true, "time": 0.025928974151611328, "tests_passed": false, "error": "ValueError"}
{"code": " df[df['Title'].apply(lambda x: bool(pattern.search(x)))]", "compilation_passed": true, "time": 6.359580993652344, "tests_passed": false, "error": "TimeoutError"}
{"code": " df.loc[df['Title'].str.contains(pattern)]", "compilation_passed": true, "time": 0.15215301513671875, "tests_passed": true, "error": null}
{"code": " df[df['Title'].str.contains(pattern, case=False)]", "compilation_passed": true, "time": 0.025784015655517578, "tests_passed": false, "error": "ValueError"}
{"code": " df.loc[df['Title'].apply(lambda x: pattern.search(x))]", "compilation_passed": true, "time": 0.0358738899230957, "tests_passed": false, "error": "KeyError"}
{"code": " df[(df['Title'].apply(lambda x: pattern.search(x) is not None))]", "compilation_passed": true, "time": 0.13412904739379883, "tests_passed": true, "error": null}
{"code": " df[df.Title.str.contains(pattern)]", "compilation_passed": true, "time": 0.125014066696167, "tests_passed": true, "error": null}
{"code": " df[(df['Title'].str.contains(pattern)) & (df['Views'] > 0)]", "compilation_passed": true, "time": 0.12421178817749023, "tests_passed": true, "error": null}
{"code": " df.loc[df['Title'].str.contains(pattern)].copy()", "compilation_passed": true, "time": 0.13032293319702148, "tests_passed": true, "error": null}
{"code": " df[df['Title'].apply(lambda x: pattern.search(str(x)))]", "compilation_passed": true, "time": 0.01543879508972168, "tests_passed": false, "error": "KeyError"}
{"code": " df[df['Title'].astype(str).str.lower().apply(lambda x: pattern.search(x) is not None)]", "compilation_passed": true, "time": 0.13338708877563477, "tests_passed": true, "error": null}
{"code": " df[df['Title'].str.contains(pattern)][['Title', 'Likes', 'Views']]", "compilation_passed": true, "time": 0.13170814514160156, "tests_passed": true, "error": null}
{"code": " df[df['Title'].apply(lambda x: pattern.search(str(x)) is not None)]", "compilation_passed": true, "time": 0.9304168224334717, "tests_passed": true, "error": null}
{"code": " df[(df['Title'].str.contains(pattern))]", "compilation_passed": true, "time": 0.13411402702331543, "tests_passed": true, "error": null}
{"code": " df[(df['Title'].apply(lambda x: bool(pattern.search(x))))]", "compilation_passed": true, "time": 0.13390111923217773, "tests_passed": true, "error": null}
{"code": " df.loc[df['Title'].apply(lambda x: pattern.search(x)), ['Likes', 'Views']]", "compilation_passed": true, "time": 0.009941816329956055, "tests_passed": false, "error": "KeyError"}
