{"code": " max(", "compilation_passed": false, "time": 0.00020599365234375, "tests_passed": false, "error": "SyntaxError"}
{"code": " SOLAR_CYCLE_YEARS[", "compilation_passed": false, "time": 0.00021696090698242188, "tests_passed": false, "error": "SyntaxError"}
{"code": " np.min(np.abs(SOLAR_CYCLE_YEARS - converted_date.year))", "compilation_passed": true, "time": 0.004316806793212891, "tests_passed": true, "error": null}
{"code": " np.max(SOLAR_CYCLE_YEARS[SOLAR_CYCLE_YEARS <= converted_date.year])", "compilation_passed": true, "time": 0.012700080871582031, "tests_passed": false, "error": "ValueError"}
{"code": " int(converted_date.strftime('%Y')) - 10", "compilation_passed": true, "time": 0.008849859237670898, "tests_passed": true, "error": null}
{"code": " np.min(SOLAR_CYCLE_YEARS[SOLAR_CYCLE_YEARS > converted_date.year], initial=converted_date.year)", "compilation_passed": true, "time": 0.008582830429077148, "tests_passed": true, "error": null}
{"code": " min(SOLAR_CYCLE_YEARS, key=lambda x: abs(x - converted_date.year))", "compilation_passed": true, "time": 0.0028569698333740234, "tests_passed": true, "error": null}
{"code": " np.max(SOLAR_CYCLE_YEARS[SOLAR_CYCLE_YEARS < converted_date.year])", "compilation_passed": true, "time": 0.013666868209838867, "tests_passed": false, "error": "ValueError"}
{"code": " int(np.min(SOLAR_CYCLE_YEARS[SOLAR_CYCLE_YEARS <= converted_date.year]) + 11)", "compilation_passed": true, "time": 0.013495206832885742, "tests_passed": false, "error": "ValueError"}
{"code": " np.array([given_date.year - (year - 2000) for year in SOLAR_CYCLE_YEARS])", "compilation_passed": true, "time": 0.010728120803833008, "tests_passed": false, "error": "TypeError"}
{"code": " max([year for year in SOLAR_CYCLE_YEARS if year <= converted_date.year])", "compilation_passed": true, "time": 0.011962890625, "tests_passed": false, "error": "ValueError"}
{"code": " [x for x in SOLAR_CYCLE_YEARS if converted_date.year - x < 11]", "compilation_passed": true, "time": 0.007828950881958008, "tests_passed": false, "error": "TypeError"}
{"code": " closest_solar_cycle_year(given_date.year)", "compilation_passed": true, "time": 0.006888866424560547, "tests_passed": false, "error": "NameError"}
{"code": " np.min(SOLAR_CYCLE_YEARS[SOLAR_CYCLE_YEARS <= converted_date.year])", "compilation_passed": true, "time": 0.011943817138671875, "tests_passed": false, "error": "ValueError"}
{"code": " SOLAR_CYCLE_YEARS[np.argmin(np.abs(given_date.year - SOLAR_CYCLE_YEARS))]", "compilation_passed": true, "time": 0.0024259090423583984, "tests_passed": true, "error": null}
{"code": " [i for i in SOLAR_CYCLE_YEARS if i <= converted_date.year][-1]", "compilation_passed": true, "time": 0.009882211685180664, "tests_passed": false, "error": "IndexError"}
{"code": " np.argmin(", "compilation_passed": false, "time": 0.00020313262939453125, "tests_passed": false, "error": "SyntaxError"}
{"code": " closest_solar_cycle_year(converted_date.year)", "compilation_passed": true, "time": 0.011588096618652344, "tests_passed": false, "error": "NameError"}
{"code": " closest(SOLAR_CYCLE_YEARS, converted_date.year)", "compilation_passed": true, "time": 0.0103759765625, "tests_passed": false, "error": "NameError"}
{"code": " min(SOLAR_CYCLE_YEARS, key=lambda y: abs(y - converted_date.year))", "compilation_passed": true, "time": 0.002081155776977539, "tests_passed": true, "error": null}
{"code": " np.min(SOLAR_CYCLE_YEARS[SOLAR_CYCLE_YEARS > converted_date.year])", "compilation_passed": true, "time": 0.006134033203125, "tests_passed": true, "error": null}
{"code": " np.max(np.where(converted_date.year >= SOLAR_CYCLE_YEARS)[0])", "compilation_passed": true, "time": 0.012032032012939453, "tests_passed": false, "error": "ValueError"}
{"code": " np.select(", "compilation_passed": false, "time": 0.00020885467529296875, "tests_passed": false, "error": "SyntaxError"}
