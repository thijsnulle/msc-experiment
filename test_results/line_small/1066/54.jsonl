{"code": " data[np.abs(np.percentile(data, 75) - np.percentile(data, 25)) > 1.5 * np.std(data)]", "compilation_passed": true, "time": 0.2531611919403076, "tests_passed": true, "error": null}
{"code": " np.median(np.diff(np.percentile(data, [25, 75]))[::2], axis=0)", "compilation_passed": true, "time": 0.24291300773620605, "tests_passed": false, "error": "TypeError"}
{"code": " np.where(np.abs(np.percentile(normal_data, [25, 75]) - outliers) < np.percentile(normal_data, [75, 25]) * 1.5)[0]", "compilation_passed": true, "time": 0.008463859558105469, "tests_passed": false, "error": "ValueError"}
{"code": " data[(np.median(data) - 1.5 * np.interquartile(data)):", "compilation_passed": false, "time": 0.00023293495178222656, "tests_passed": false, "error": "SyntaxError"}
{"code": " np.unique(data[(np.abs(np.subtract(np.quantile(data, [0.75, 0.25]), data)) > NUM_OUTLIERS)])", "compilation_passed": true, "time": 0.008003950119018555, "tests_passed": false, "error": "ValueError"}
{"code": " None", "compilation_passed": true, "time": 0.25684094429016113, "tests_passed": false, "error": "TypeError"}
{"code": " np.sort(data)[-num_outliers * 2:]", "compilation_passed": true, "time": 0.2888357639312744, "tests_passed": true, "error": null}
{"code": " np.unique(", "compilation_passed": false, "time": 0.00028586387634277344, "tests_passed": false, "error": "SyntaxError"}
{"code": " np.zeros_like(data)", "compilation_passed": true, "time": 0.256439208984375, "tests_passed": true, "error": null}
{"code": " data[np.abs(np.diff(np.sort(data))[6:]) > 1.5]", "compilation_passed": true, "time": 0.007519960403442383, "tests_passed": false, "error": "IndexError"}
{"code": " np.empty_like(data)", "compilation_passed": true, "time": 0.26805996894836426, "tests_passed": true, "error": null}
{"code": " np.array(", "compilation_passed": false, "time": 0.0005371570587158203, "tests_passed": false, "error": "SyntaxError"}
{"code": " np.array([])", "compilation_passed": true, "time": 0.2534828186035156, "tests_passed": true, "error": null}
{"code": " data[", "compilation_passed": false, "time": 0.0004899501800537109, "tests_passed": false, "error": "SyntaxError"}
{"code": " np.sort(data)[num_samples:]", "compilation_passed": true, "time": 0.2747809886932373, "tests_passed": true, "error": null}
{"code": " data[np.abs(np.percentile(data, [25, 75]) - np.percentile(data, [0, 100])).max() * 2]", "compilation_passed": true, "time": 0.009259939193725586, "tests_passed": false, "error": "IndexError"}
{"code": " []", "compilation_passed": true, "time": 0.25158190727233887, "tests_passed": true, "error": null}
{"code": " np.sort(data)[int(0.25 * num_samples):int(0.75 * num_samples)]", "compilation_passed": true, "time": 0.2620890140533447, "tests_passed": true, "error": null}
{"code": " np.where(np.any(np.abs(data - np.median(data)) > 1.5 * np.quantile(data, 0.75) - np.quantile(data, 0.25)))[0]", "compilation_passed": true, "time": 0.25516796112060547, "tests_passed": true, "error": null}
{"code": " np.array([data[i] for i in range(len(data)) if np.median(data) - (1.5 * np.std(data)) < data[i] < np.median(data) + (1.5 * np.std(data))])", "compilation_passed": true, "time": 0.31391310691833496, "tests_passed": true, "error": null}
{"code": " np.argwhere(np.abs(data - np.median(data)) >= 1.5 * np.percentile(data, 75) - 1.5 * np.percentile(data, 25))", "compilation_passed": true, "time": 0.3457479476928711, "tests_passed": true, "error": null}
