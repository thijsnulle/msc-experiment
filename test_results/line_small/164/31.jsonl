{"code": " {col: np.random.choice(range(data_range[0], data_range[1]), 10) for col in columns}", "compilation_passed": true, "time": 0.012994050979614258, "tests_passed": false, "error": "AttributeError"}
{"code": " pd.DataFrame(columns=columns)", "compilation_passed": true, "time": 0.008570194244384766, "tests_passed": true, "error": null}
{"code": " pd.DataFrame(np.random.randint(data_range[0], data_range[1], size=(10, num_labels)),", "compilation_passed": false, "time": 0.00022125244140625, "tests_passed": false, "error": "SyntaxError"}
{"code": " pd.DataFrame({c: np.random.randint(*data_range, size=100) for c in columns})", "compilation_passed": true, "time": 0.00852203369140625, "tests_passed": true, "error": null}
{"code": " pd.DataFrame([np.random.randint(*data_range, size=num_labels) for _ in range(100)], columns=columns)", "compilation_passed": true, "time": 0.01502084732055664, "tests_passed": true, "error": null}
{"code": " pd.DataFrame(", "compilation_passed": false, "time": 0.00020360946655273438, "tests_passed": false, "error": "SyntaxError"}
{"code": " pd.DataFrame(np.random.uniform(data_range[0], data_range[1], (100, num_labels)))", "compilation_passed": true, "time": 0.007034778594970703, "tests_passed": true, "error": null}
{"code": " pd.DataFrame(np.random.uniform(data_range[0], data_range[1], size=(25, num_labels)), columns=columns)", "compilation_passed": true, "time": 0.007023334503173828, "tests_passed": true, "error": null}
{"code": " pd.DataFrame(np.random.randint(low=data_range[0], high=data_range[1], size=(num_labels, num_labels)), columns=columns)", "compilation_passed": true, "time": 0.012138128280639648, "tests_passed": true, "error": null}
{"code": " pd.DataFrame(np.random.randint(*data_range, size=(100, num_labels)), columns=columns)", "compilation_passed": true, "time": 0.009325027465820312, "tests_passed": true, "error": null}
{"code": " pd.DataFrame({column: np.random.randint(*data_range, 5) for column in columns})", "compilation_passed": true, "time": 0.007580757141113281, "tests_passed": true, "error": null}
{"code": " pd.DataFrame(np.random.uniform(low=data_range[0], high=data_range[1], size=(100, num_labels)), columns=columns)", "compilation_passed": true, "time": 0.007601022720336914, "tests_passed": true, "error": null}
{"code": " pd.DataFrame(data={columns[i]: np.random.uniform(data_range[0], data_range[1], np.random.randint(10, 50)) for i in range(num_labels)})", "compilation_passed": true, "time": 0.01208186149597168, "tests_passed": false, "error": "ValueError"}
{"code": " pd.DataFrame(np.random.random(num_labels), columns=columns)", "compilation_passed": true, "time": 0.011933088302612305, "tests_passed": false, "error": "ValueError"}
{"code": " pd.Series(index=columns, data=np.random.random(num_labels))", "compilation_passed": true, "time": 0.036110877990722656, "tests_passed": false, "error": "IndexError"}
{"code": " pd.Series(pd.random.uniform(0, 1, 10), columns=columns)", "compilation_passed": true, "time": 0.011893987655639648, "tests_passed": false, "error": "AttributeError"}
{"code": " {column: np.random.uniform(data_range[0], data_range[1], (1000, 1)) for column in columns}", "compilation_passed": true, "time": 0.01493382453918457, "tests_passed": false, "error": "AttributeError"}
{"code": " pd.DataFrame(np.random.randint(*data_range, (1000, num_labels)))", "compilation_passed": true, "time": 0.008114099502563477, "tests_passed": true, "error": null}
{"code": " {col: np.random.uniform(data_range[0], data_range[1], (500, )) for col in columns}", "compilation_passed": true, "time": 0.015563011169433594, "tests_passed": false, "error": "AttributeError"}
{"code": " pd.DataFrame(np.random.randint(*data_range, size=(num_labels, 100000)), columns=columns)", "compilation_passed": true, "time": 0.02440810203552246, "tests_passed": false, "error": "ValueError"}
{"code": " pd.Series(np.random.uniform(data_range[0], data_range[1], size=num_labels))", "compilation_passed": true, "time": 0.025022029876708984, "tests_passed": false, "error": "IndexError"}
{"code": " np.random.random(num_labels) * (data_range[1] - data_range[0]) + data_range[0]", "compilation_passed": true, "time": 0.013627290725708008, "tests_passed": false, "error": "AttributeError"}
{"code": " {col: np.random.uniform(data_range[0], data_range[1], 10) for col in columns}", "compilation_passed": true, "time": 0.017697811126708984, "tests_passed": false, "error": "AttributeError"}
