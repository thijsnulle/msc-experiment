{"code": " pd.DataFrame(grade_counts.items(), columns=[\"Grade\", \"Count\"]).set_index(\"Grade\")", "compilation_passed": true, "time": 0.0157320499420166, "tests_passed": false, "error": "TypeError"}
{"code": " []", "compilation_passed": true, "time": 0.021851062774658203, "tests_passed": false, "error": "TypeError"}
{"code": " pd.DataFrame(grade_counts)", "compilation_passed": true, "time": 0.013962030410766602, "tests_passed": false, "error": "ValueError"}
{"code": " [{\"Grade\": grade, \"Count\": grade_counts[grade], \"Percentage\": round(grade_counts[grade] / len(student_grades) * 100, 2)} for grade in possible_grades]", "compilation_passed": true, "time": 0.013033866882324219, "tests_passed": false, "error": "AttributeError"}
{"code": " pd.DataFrame(grade_counts.items(), columns=[\"Grade\", \"Count\"])", "compilation_passed": true, "time": 0.014101982116699219, "tests_passed": false, "error": "TypeError"}
{"code": " pd.Series(", "compilation_passed": false, "time": 0.00026988983154296875, "tests_passed": false, "error": "SyntaxError"}
{"code": " pd.DataFrame({\"Count\": [grade_counts[g] for g in possible_grades]}, index=possible_grades)", "compilation_passed": true, "time": 0.013765811920166016, "tests_passed": false, "error": "TypeError"}
{"code": " list()", "compilation_passed": true, "time": 0.014926910400390625, "tests_passed": false, "error": "TypeError"}
{"code": " {grade: count for grade, count in grade_counts.items() if grade in possible_grades}", "compilation_passed": true, "time": 0.20259499549865723, "tests_passed": true, "error": null}
{"code": " [{\"Grade\": grade, \"Count\": count} for grade, count in grade_counts.items()]", "compilation_passed": true, "time": 0.013833045959472656, "tests_passed": false, "error": "AttributeError"}
{"code": " pd.DataFrame(", "compilation_passed": false, "time": 0.00032901763916015625, "tests_passed": false, "error": "SyntaxError"}
{"code": " [(grade, grade_counts.get(grade.upper(), 0)) for grade in possible_grades]", "compilation_passed": true, "time": 0.014460086822509766, "tests_passed": false, "error": "AttributeError"}
{"code": " {}", "compilation_passed": true, "time": 0.015390872955322266, "tests_passed": false, "error": "TypeError"}
{"code": " pd.DataFrame(grade_counts, index=[\"Count\"])", "compilation_passed": true, "time": 0.014536857604980469, "tests_passed": false, "error": "TypeError"}
{"code": " pd.DataFrame(data=grade_counts.items(), columns=[\"Grade\", \"Count\"])", "compilation_passed": true, "time": 0.01455998420715332, "tests_passed": false, "error": "TypeError"}
{"code": " pd.DataFrame(grade_counts.items())", "compilation_passed": true, "time": 0.017752885818481445, "tests_passed": false, "error": "TypeError"}
{"code": " {", "compilation_passed": false, "time": 0.0004050731658935547, "tests_passed": false, "error": "SyntaxError"}
{"code": " [{key: grade_counts[key] for key in possible_grades}]", "compilation_passed": true, "time": 0.01971888542175293, "tests_passed": false, "error": "AttributeError"}
{"code": " {g: grade_counts.get(g, 0) for g in possible_grades}", "compilation_passed": true, "time": 0.5855090618133545, "tests_passed": true, "error": null}
