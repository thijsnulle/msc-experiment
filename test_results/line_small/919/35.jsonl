{"code": " df[column].value_counts().reindex(CATEGORIES)", "compilation_passed": true, "time": 0.02388620376586914, "tests_passed": true, "error": null}
{"code": " [df[column].value_counts(normalize=True).loc[c].values[0] for c in CATEGORIES]", "compilation_passed": true, "time": 0.009816169738769531, "tests_passed": false, "error": "AttributeError"}
{"code": " df[column].value_counts()", "compilation_passed": true, "time": 0.025033950805664062, "tests_passed": true, "error": null}
{"code": " df.groupby(column)[column].count()", "compilation_passed": true, "time": 0.02678990364074707, "tests_passed": true, "error": null}
{"code": " df.value_counts()", "compilation_passed": true, "time": 0.04704403877258301, "tests_passed": true, "error": null}
{"code": " df[column].value_counts(sort=True)", "compilation_passed": true, "time": 0.028843164443969727, "tests_passed": true, "error": null}
{"code": " [df[column].value_counts(normalize=True).loc[c].values[0] if c in df[column].unique() else 0 for c in CATEGORIES]", "compilation_passed": true, "time": 0.010068893432617188, "tests_passed": false, "error": "AttributeError"}
{"code": " [df[column].apply(lambda x: CATEGORIES.index(x) if x in CATEGORIES else 0).value_counts()]", "compilation_passed": true, "time": 0.007481098175048828, "tests_passed": false, "error": "TypeError"}
{"code": " df[column].value_counts(dropna=False).sort_index()", "compilation_passed": true, "time": 0.030018091201782227, "tests_passed": true, "error": null}
{"code": " [df[column].value_counts()[i] for i in CATEGORIES]", "compilation_passed": true, "time": 0.007752895355224609, "tests_passed": false, "error": "TypeError"}
{"code": " df.groupby(column).size().reindex(CATEGORIES, fill_value=0)", "compilation_passed": true, "time": 0.0285336971282959, "tests_passed": true, "error": null}
{"code": " [df[column].str.contains(category).sum() for category in CATEGORIES]", "compilation_passed": true, "time": 0.008018255233764648, "tests_passed": false, "error": "TypeError"}
{"code": " df.groupby(column)[column].count().reset_index(name='Count')", "compilation_passed": true, "time": 0.17856502532958984, "tests_passed": true, "error": null}
{"code": " [df[column].str.contains(i).sum() for i in CATEGORIES]", "compilation_passed": true, "time": 0.00785684585571289, "tests_passed": false, "error": "TypeError"}
{"code": " [df[column].str.contains(cat).sum() for cat in CATEGORIES]", "compilation_passed": true, "time": 0.007877111434936523, "tests_passed": false, "error": "TypeError"}
{"code": " [df[column].apply(lambda x: x in CATEGORIES).sum()]", "compilation_passed": true, "time": 0.007117271423339844, "tests_passed": false, "error": "TypeError"}
