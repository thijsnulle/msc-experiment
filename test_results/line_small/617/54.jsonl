{"code": " results_df['Match Result'].apply(lambda x: int(re.search(r', \\$\\d+', x).group(1)))", "compilation_passed": true, "time": 0.016368865966796875, "tests_passed": false, "error": "IndexError"}
{"code": " results_df['Match Result'].apply(lambda x: int(re.search(r'(\\d+) goals', x).group(1)))", "compilation_passed": true, "time": 0.2256183624267578, "tests_passed": true, "error": null}
{"code": " results_df['Match Result'].apply(lambda x: int(re.search(r',\\s*(\\d+) dollars', x).group(1)))", "compilation_passed": true, "time": 0.013050079345703125, "tests_passed": false, "error": "AttributeError"}
{"code": " results_df['Match Result'].apply(lambda x: int(re.search(r', (\\d+)\\)', x).group(1)))", "compilation_passed": true, "time": 0.012553930282592773, "tests_passed": false, "error": "AttributeError"}
{"code": " results_df['Match Result'].apply(lambda x: int(re.search(r'(\\d+) goals, ', x).group(1)))", "compilation_passed": true, "time": 0.19026589393615723, "tests_passed": true, "error": null}
{"code": " results_df['Match Result'].apply(lambda x: int(re.search(r'[^$](\\d+) [^$]', x).group(1)))", "compilation_passed": true, "time": 0.1940469741821289, "tests_passed": true, "error": null}
{"code": " results_df['Match Result'].apply(lambda x: int(re.search(r'costs (\\d+)', x).group(1)))", "compilation_passed": true, "time": 0.016161680221557617, "tests_passed": false, "error": "AttributeError"}
{"code": " results_df['Match Result'].apply(lambda x: int(re.search(r'\\)$', x).group(0).replace('$', '')))", "compilation_passed": true, "time": 0.012782096862792969, "tests_passed": false, "error": "ValueError"}
{"code": " results_df['Match Result'].apply(lambda x: int(re.search(r'(\\d+) penalty cost', x).group(1)))", "compilation_passed": true, "time": 0.014392852783203125, "tests_passed": false, "error": "AttributeError"}
{"code": " results_df['Match Result'].apply(lambda x: int(re.search(r'(\\$\\d+)', x).group(1)))", "compilation_passed": true, "time": 0.020432233810424805, "tests_passed": false, "error": "ValueError"}
{"code": " results_df['Match Result'].apply(lambda x: int(re.search(r'(\\d+)', x).group(1)))", "compilation_passed": true, "time": 0.20113897323608398, "tests_passed": true, "error": null}
{"code": " results_df['Match Result'].apply(lambda x: int(re.search(r', \\$(\\d+)', x).group(1)))", "compilation_passed": true, "time": 0.49133992195129395, "tests_passed": true, "error": null}
{"code": " results_df['Match Result'].apply(lambda x: int(re.search(r'(\\d+) goals,\\s\\$([\\d,]+)', x).group(2).replace(',', '')))", "compilation_passed": true, "time": 0.5054850578308105, "tests_passed": true, "error": null}
{"code": " results_df['Match Result'].apply(lambda x: int(re.search(r'cost (\\d+) dollars', x).group(1)))", "compilation_passed": true, "time": 0.015939950942993164, "tests_passed": false, "error": "AttributeError"}
{"code": " results_df['Match Result'].apply(lambda x: int(re.search(r'(\\$\\d+) dollars', x).group(1)))", "compilation_passed": true, "time": 0.013612985610961914, "tests_passed": false, "error": "AttributeError"}
{"code": " results_df['Match Result'].apply(lambda x: int(re.search(r'(\\d+) penalties', x).group(1)))", "compilation_passed": true, "time": 0.014124870300292969, "tests_passed": false, "error": "AttributeError"}
{"code": " results_df['Match Result'].apply(lambda x: int(re.search(r'(\\d+)$', x).group(1)))", "compilation_passed": true, "time": 0.019459009170532227, "tests_passed": false, "error": "AttributeError"}
{"code": " results_df['Match Result'].apply(lambda x: int(re.search(r'(\\d+) penalties', x).group(1)) * PENALTY_COST)", "compilation_passed": true, "time": 0.012472867965698242, "tests_passed": false, "error": "AttributeError"}
{"code": " results_df['Match Result'].apply(lambda x: int(re.search(r', (\\d+) dollars', x).group(1)))", "compilation_passed": true, "time": 0.012742996215820312, "tests_passed": false, "error": "AttributeError"}
{"code": " results_df['Match Result'].apply(lambda x: int(re.search(r'\\(\\d+ goals, \\$\\d+', x).group(2)))", "compilation_passed": true, "time": 0.012691020965576172, "tests_passed": false, "error": "IndexError"}
{"code": " results_df['Match Result'].apply(lambda x: int(re.search(r',\\s+(\\d+)', x).group(1)))", "compilation_passed": true, "time": 0.01345205307006836, "tests_passed": false, "error": "AttributeError"}
{"code": " results_df['Match Result'].apply(lambda x: int(re.search(r', \\$([0-9]+)', x).group(1)))", "compilation_passed": true, "time": 0.4986259937286377, "tests_passed": true, "error": null}
{"code": " results_df['Match Result'].apply(lambda x: int(re.search(r'(\\d+) penalty', x).group(1)) * PENALTY_COST)", "compilation_passed": true, "time": 0.013315677642822266, "tests_passed": false, "error": "AttributeError"}
{"code": " results_df['Match Result'].apply(lambda x: int(re.search(r'[^\\d]+(\\d+) dollars', x).group(1)))", "compilation_passed": true, "time": 0.01498866081237793, "tests_passed": false, "error": "AttributeError"}
{"code": " results_df['Match Result'].apply(lambda x: int(re.search(r'\\d+ (\\d+)', x).group(1)))", "compilation_passed": true, "time": 0.02883291244506836, "tests_passed": false, "error": "AttributeError"}
{"code": " results_df['Match Result'].apply(lambda x: int(re.search(r'\\(\\d+ goals, \\$\\d+', x).group(1)))", "compilation_passed": true, "time": 0.015530109405517578, "tests_passed": false, "error": "IndexError"}
