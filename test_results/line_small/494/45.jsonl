{"code": " re.compile(r\"^UTC\\+[0-9]{1,2}(:([0-9]{1,2}))?$\")", "compilation_passed": true, "time": 0.02058696746826172, "tests_passed": true, "error": null}
{"code": " re.compile(r\"([-+]\\d+:\\d+)\")", "compilation_passed": true, "time": 0.01365518569946289, "tests_passed": true, "error": null}
{"code": " r'^UTC[\\+-]\\d\\d:\\d\\d$'", "compilation_passed": true, "time": 0.020754098892211914, "tests_passed": true, "error": null}
{"code": " re.compile(r\"UTC\\+\\d{2}:\\d{2}$\")", "compilation_passed": true, "time": 0.02085590362548828, "tests_passed": true, "error": null}
{"code": " r\"(^UTC[\\+-][0-9:]+$)\"", "compilation_passed": true, "time": 0.02047109603881836, "tests_passed": true, "error": null}
{"code": " re.compile(r\"^UTC\\+[0-9]+:[0-9]+$\")", "compilation_passed": true, "time": 0.021509885787963867, "tests_passed": true, "error": null}
{"code": " re.compile(r\"^UTC(\\+|-)(\\d{2}):(\\d{2})$\")", "compilation_passed": true, "time": 0.020993947982788086, "tests_passed": true, "error": null}
{"code": " re.compile(r\"UTC[+-][0-9]+:[0-5][0-9]\")", "compilation_passed": true, "time": 0.02008199691772461, "tests_passed": true, "error": null}
{"code": " re.compile(r'^UTC[+-]\\d{1,2}:\\d{2}$')", "compilation_passed": true, "time": 0.0206298828125, "tests_passed": true, "error": null}
{"code": " re.compile(r\"UTC(\\+|-)(\\d{2}):(\\d{2})\")", "compilation_passed": true, "time": 0.020988941192626953, "tests_passed": true, "error": null}
{"code": " re.compile(r'[+-]?\\d{2}:\\d{2}$')", "compilation_passed": true, "time": 0.013072967529296875, "tests_passed": true, "error": null}
{"code": " r'UTC\\+?(?P<hours>[0-9]+):?(?P<minutes>[0-9]*)'", "compilation_passed": true, "time": 0.02084803581237793, "tests_passed": true, "error": null}
{"code": " re.compile(r\"^(UTC[\\+-][0-2]\\d:?\\d?)$\")", "compilation_passed": true, "time": 0.012878894805908203, "tests_passed": true, "error": null}
{"code": " r\"UTC(?P<offset_hrs>[-+]\\d+):(?P<offset_min>\\d+)\"", "compilation_passed": true, "time": 0.022176742553710938, "tests_passed": true, "error": null}
{"code": " r\"UTC\\s*(?:([-+]?\\d{1,3})\\:\\d{2})?$\"", "compilation_passed": true, "time": 0.020186901092529297, "tests_passed": true, "error": null}
{"code": " r\"^UTC\\+(?P<hours>[-+]\\d{2})(?::(?P<minutes>\\d{2}))?$\"", "compilation_passed": true, "time": 0.01266622543334961, "tests_passed": true, "error": null}
{"code": " re.compile(\"[+-]?\\d{2}(:\\d{2})?\")", "compilation_passed": true, "time": 0.012869119644165039, "tests_passed": true, "error": null}
{"code": " re.compile(r\"^[+-]\\d{2}:[0-5]\\d$\")", "compilation_passed": true, "time": 0.014123201370239258, "tests_passed": true, "error": null}
{"code": " r\"([+-]\\d{4})\"", "compilation_passed": true, "time": 0.013168811798095703, "tests_passed": true, "error": null}
{"code": " re.compile(r'(?:^|[-+])00:00$')", "compilation_passed": true, "time": 0.015496969223022461, "tests_passed": true, "error": null}
{"code": " re.compile(", "compilation_passed": false, "time": 0.0001990795135498047, "tests_passed": false, "error": "SyntaxError"}
{"code": " r'\\+0[0-9]{2}:[0-9]{2}'  # e.g. +01:30", "compilation_passed": true, "time": 0.015170097351074219, "tests_passed": true, "error": null}
{"code": " re.compile(r\"^UTC[+-]\\d{1,2}(:\\d{2})?$\")", "compilation_passed": true, "time": 0.02036309242248535, "tests_passed": true, "error": null}
{"code": " r\"UTC(\\+|\\-)(\\d{1,2})(:?\\d{1,2})?$\"", "compilation_passed": true, "time": 0.02051568031311035, "tests_passed": true, "error": null}
{"code": " \"UTC\u00b1[+-]\\d{2}:?\\d{2}\"", "compilation_passed": true, "time": 0.014142990112304688, "tests_passed": true, "error": null}
{"code": " re.compile(r\"[-+]?\\d+:\\d+$\")", "compilation_passed": true, "time": 0.012774944305419922, "tests_passed": true, "error": null}
{"code": " r\"\\+([01]?[0-9]):([0-5][0-9])\"", "compilation_passed": true, "time": 0.01269388198852539, "tests_passed": true, "error": null}
{"code": " r\"UTC\\+\\d{2}:\\d{2}\"", "compilation_passed": true, "time": 0.020859956741333008, "tests_passed": true, "error": null}
{"code": " re.compile(r\"\\+([0-9]{1,2}):([0-9]{2})\")", "compilation_passed": true, "time": 0.014824867248535156, "tests_passed": true, "error": null}
{"code": " re.compile(r\"[+-]?\\d\\d:[0-5]\\d$\")", "compilation_passed": true, "time": 0.012789011001586914, "tests_passed": true, "error": null}
