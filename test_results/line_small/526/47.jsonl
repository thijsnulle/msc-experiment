{"code": " (np.nanmean(v), np.nanmedian(v))", "compilation_passed": true, "time": 0.016144990921020508, "tests_passed": false, "error": "NameError"}
{"code": " {", "compilation_passed": false, "time": 0.00024700164794921875, "tests_passed": false, "error": "SyntaxError"}
{"code": " pd.Series(", "compilation_passed": false, "time": 0.0001468658447265625, "tests_passed": false, "error": "SyntaxError"}
{"code": " (np.mean(stats[k]), np.median(stats[k]))", "compilation_passed": true, "time": 0.008041143417358398, "tests_passed": false, "error": "NameError"}
{"code": " [np.nanmean(v), np.nanmedian(v)]", "compilation_passed": true, "time": 0.009348869323730469, "tests_passed": false, "error": "NameError"}
{"code": " {\"mean\": np.mean(v), \"median\": np.median(v)}", "compilation_passed": true, "time": 0.008706092834472656, "tests_passed": false, "error": "NameError"}
{"code": " (np.nanmean(v), np.nanmedian(v)) for k, v in stats.items()", "compilation_passed": true, "time": 0.011085987091064453, "tests_passed": false, "error": "KeyError"}
{"code": " (np.nanmean(stats[k]), np.nanmedian(stats[k]))", "compilation_passed": true, "time": 0.007914066314697266, "tests_passed": false, "error": "NameError"}
{"code": " np.nanmean(v) if len(v) > 0 else np.nan", "compilation_passed": true, "time": 0.008901834487915039, "tests_passed": false, "error": "NameError"}
{"code": " {\"mean\": np.nanmean(v), \"median\": np.median(v)} for k, v in stats.items()", "compilation_passed": true, "time": 0.013279914855957031, "tests_passed": true, "error": null}
{"code": " np.nanmean(v) if len(v) > 1 else np.nan", "compilation_passed": true, "time": 0.008328914642333984, "tests_passed": false, "error": "NameError"}
{"code": " {'mean': np.nanmean(v), 'median': np.nanmedian(v)}", "compilation_passed": true, "time": 0.008085012435913086, "tests_passed": false, "error": "NameError"}
{"code": " pd.Series(stats[k]).agg([np.mean, np.median])", "compilation_passed": true, "time": 0.008310079574584961, "tests_passed": false, "error": "NameError"}
{"code": " [np.mean(v), np.median(v)]", "compilation_passed": true, "time": 0.00791311264038086, "tests_passed": false, "error": "NameError"}
{"code": " pd.Series(v, dtype=int if np.issubdtype(v.dtype, np.integer) else float)", "compilation_passed": true, "time": 0.007939815521240234, "tests_passed": false, "error": "NameError"}
{"code": " (pd.Series(v).mean(), pd.Series(v).median())", "compilation_passed": true, "time": 0.008141040802001953, "tests_passed": false, "error": "NameError"}
{"code": " pd.Series(np.nanmean(v, dtype=np.float64), index=data[0].keys())", "compilation_passed": true, "time": 0.00829172134399414, "tests_passed": false, "error": "NameError"}
{"code": " (np.mean(v), np.median(v))", "compilation_passed": true, "time": 0.008572816848754883, "tests_passed": false, "error": "NameError"}
{"code": " pd.Series(stats[k], index=all_keys).apply(", "compilation_passed": false, "time": 0.0001850128173828125, "tests_passed": false, "error": "SyntaxError"}
{"code": " np.mean(np.array(v), axis=0) if v else np.nan for k, v in stats.items()", "compilation_passed": true, "time": 0.009492158889770508, "tests_passed": false, "error": "ValueError"}
{"code": " np.array(stats[k], dtype=object).mean()", "compilation_passed": true, "time": 0.007869243621826172, "tests_passed": false, "error": "NameError"}
