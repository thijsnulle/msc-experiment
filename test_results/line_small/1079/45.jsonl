{"code": " df[\"Price_String\"].apply(lambda x: int(x.replace(',', '')) / 100)", "compilation_passed": true, "time": 0.002079010009765625, "tests_passed": false, "error": "ValueError"}
{"code": " df[\"Price_String\"].astype(float).str.replace(\",\", \"\").astype(float)", "compilation_passed": true, "time": 0.002763986587524414, "tests_passed": false, "error": "AttributeError"}
{"code": " df[\"Price_String\"].apply(lambda x: x.replace(\",\", \"\")).astype(float)", "compilation_passed": true, "time": 0.07588887214660645, "tests_passed": true, "error": null}
{"code": " df[\"Price_String\"].map(lambda x: float(x.replace(',', '')))", "compilation_passed": true, "time": 0.07570362091064453, "tests_passed": true, "error": null}
{"code": " df[\"Price_String\"].astype(np.float64).str.replace(',', '').astype(np.float64)", "compilation_passed": true, "time": 0.0018401145935058594, "tests_passed": false, "error": "AttributeError"}
{"code": " df[\"Price_String\"].apply(lambda x: x.replace(\",\", \"\").replace(\".\", \"\")).astype(float)", "compilation_passed": true, "time": 0.04502701759338379, "tests_passed": true, "error": null}
{"code": " pd.to_numeric(df[\"Price_String\"], errors='coerce')", "compilation_passed": true, "time": 0.04354596138000488, "tests_passed": true, "error": null}
{"code": " pd.to_numeric(df[\"Price_String\"], errors=\"coerce\")", "compilation_passed": true, "time": 0.04313802719116211, "tests_passed": true, "error": null}
{"code": " df[\"Price_String\"].apply(lambda x: float(x.replace(\",\", \"\").replace(\".\", \"\")))", "compilation_passed": true, "time": 0.0388641357421875, "tests_passed": true, "error": null}
{"code": " df[\"Price_String\"].apply(lambda x: x.replace(',', '').replace('.', '').replace('-', ''))", "compilation_passed": true, "time": 0.002864837646484375, "tests_passed": false, "error": "TypeError"}
{"code": " df[\"Price_String\"].str.replace(r\",\", \"\").astype(float)", "compilation_passed": true, "time": 0.08134698867797852, "tests_passed": true, "error": null}
{"code": " df[\"Price_String\"].apply(lambda x: float(x.replace(',', '')))", "compilation_passed": true, "time": 0.08103394508361816, "tests_passed": true, "error": null}
{"code": " pd.to_numeric(df.Price_String, errors='coerce')", "compilation_passed": true, "time": 0.03702712059020996, "tests_passed": true, "error": null}
{"code": " pd.to_numeric(df[\"Price_String\"])", "compilation_passed": true, "time": 0.020817041397094727, "tests_passed": false, "error": "ValueError"}
{"code": " df[\"Price_String\"].apply(lambda x: pd.to_numeric(x, errors=\"coerce\").fillna(0).astype(float))", "compilation_passed": true, "time": 0.0016949176788330078, "tests_passed": false, "error": "AttributeError"}
{"code": " df[\"Price_String\"].str.replace(\",\", \"\").astype(float)", "compilation_passed": true, "time": 0.07934093475341797, "tests_passed": true, "error": null}
{"code": " df[\"Price_String\"].apply(lambda x: x.replace(\",\", \"\").replace(\".\", \"\").replace(\",\", \"\").replace(\".\", \"\"))", "compilation_passed": true, "time": 0.001958131790161133, "tests_passed": false, "error": "TypeError"}
{"code": " df[\"Price_String\"].apply(lambda x: x.replace(',', '').replace('.', '')).astype(\"float64\")", "compilation_passed": true, "time": 0.03798794746398926, "tests_passed": true, "error": null}
{"code": " pd.to_numeric(df[\"Price_String\"], errors='coerce', na_strings=[])", "compilation_passed": true, "time": 0.0012249946594238281, "tests_passed": false, "error": "TypeError"}
{"code": " df[\"Price_String\"].astype(str).str.replace(\",\", \"\").astype(float)", "compilation_passed": true, "time": 0.0818338394165039, "tests_passed": true, "error": null}
{"code": " df[\"Price_String\"].astype(str).replace(\",\", \"\", regex=True).astype(float)", "compilation_passed": true, "time": 0.07659792900085449, "tests_passed": true, "error": null}
{"code": " df[\"Price_String\"].apply(lambda price: float(price.replace(\",\", \"\")))", "compilation_passed": true, "time": 0.08344388008117676, "tests_passed": true, "error": null}
{"code": " df[\"Price_String\"].apply(lambda x: x.replace(\",\", \"\").strip().replace(\",\", \"\")).astype(float)", "compilation_passed": true, "time": 0.07974410057067871, "tests_passed": true, "error": null}
{"code": " df[\"Price_String\"].apply(lambda x: float(x.replace(\",\", \"\")))", "compilation_passed": true, "time": 0.08597779273986816, "tests_passed": true, "error": null}
{"code": " df[\"Price_String\"].apply(lambda price: float(price.replace(',', '')))", "compilation_passed": true, "time": 0.08436417579650879, "tests_passed": true, "error": null}
