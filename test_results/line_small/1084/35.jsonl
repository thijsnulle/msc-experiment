{"code": " df[col].astype(\"float64\")", "compilation_passed": true, "time": 0.1049659252166748, "tests_passed": false, "error": "ValueError"}
{"code": " df[col].astype('float')", "compilation_passed": true, "time": 0.09114217758178711, "tests_passed": false, "error": "ValueError"}
{"code": " pd.to_numeric(df[col], errors=\"coerce\")", "compilation_passed": true, "time": 0.1933438777923584, "tests_passed": false, "error": "KeyError"}
{"code": " df[col].apply(", "compilation_passed": false, "time": 0.00019407272338867188, "tests_passed": false, "error": "SyntaxError"}
{"code": " pd.to_numeric(df[col], errors='coerce')", "compilation_passed": true, "time": 0.1890418529510498, "tests_passed": false, "error": "KeyError"}
{"code": " df[col].apply(lambda x: pd.to_numeric(x, errors=\"coerce\"))", "compilation_passed": true, "time": 0.20955204963684082, "tests_passed": false, "error": "KeyError"}
{"code": " df[col].apply(lambda x: pd.to_numeric(x, errors='coerce'))", "compilation_passed": true, "time": 0.20887494087219238, "tests_passed": false, "error": "KeyError"}
{"code": " df[col].apply(pd.to_numeric, errors='coerce')", "compilation_passed": true, "time": 0.194854736328125, "tests_passed": false, "error": "KeyError"}
{"code": " df[col].str.replace(',', '.').astype(float)", "compilation_passed": true, "time": 0.020186901092529297, "tests_passed": false, "error": "AttributeError"}
{"code": " df[col].str.replace(',', '.')", "compilation_passed": true, "time": 0.015593767166137695, "tests_passed": false, "error": "AttributeError"}
{"code": " df[col].apply(lambda x: float(x.replace(',', '')))", "compilation_passed": true, "time": 0.021560192108154297, "tests_passed": false, "error": "AttributeError"}
{"code": " df[col].astype('float64')", "compilation_passed": true, "time": 0.09838390350341797, "tests_passed": false, "error": "ValueError"}
{"code": " df[col].apply(lambda x: x.replace(\",\", \".\"))", "compilation_passed": true, "time": 0.016686677932739258, "tests_passed": false, "error": "AttributeError"}
{"code": " df[col].apply(lambda x: x.replace(',', '.'))", "compilation_passed": true, "time": 0.016424894332885742, "tests_passed": false, "error": "AttributeError"}
{"code": " df[col].apply(lambda x: float(x.replace(\",\", \".\")))", "compilation_passed": true, "time": 0.025082826614379883, "tests_passed": false, "error": "AttributeError"}
