{"code": " np.sin(ANGLES)", "compilation_passed": true, "time": 0.061273813247680664, "tests_passed": true, "error": null}
{"code": " np.sin(frequency*ANGLES)", "compilation_passed": true, "time": 0.0888979434967041, "tests_passed": true, "error": null}
{"code": " np.cos(frequency*ANGLES)", "compilation_passed": true, "time": 0.06130528450012207, "tests_passed": true, "error": null}
{"code": " np.sin(ANGLES*frequency)", "compilation_passed": true, "time": 0.08855485916137695, "tests_passed": true, "error": null}
{"code": " np.random.normal(loc=0, scale=2, size=len(ANGLES)) * np.sin(", "compilation_passed": false, "time": 0.0002460479736328125, "tests_passed": false, "error": "SyntaxError"}
{"code": " np.sin(ANGLES * frequency)", "compilation_passed": true, "time": 0.08835530281066895, "tests_passed": true, "error": null}
{"code": " np.sin(ANGLES * frequency) * 0.5 * np.ones(ANGLES.size)", "compilation_passed": true, "time": 0.062254905700683594, "tests_passed": true, "error": null}
{"code": " np.random.normal(0, 1)", "compilation_passed": true, "time": 0.013875007629394531, "tests_passed": false, "error": "IndexError"}
{"code": " np.cos(ANGLES)", "compilation_passed": true, "time": 0.06068611145019531, "tests_passed": true, "error": null}
{"code": " np.array([np.sin(2*np.pi*frequency*angle) for angle in ANGLES])", "compilation_passed": true, "time": 0.06640887260437012, "tests_passed": true, "error": null}
{"code": " np.array([", "compilation_passed": false, "time": 0.0002338886260986328, "tests_passed": false, "error": "SyntaxError"}
{"code": " np.array(", "compilation_passed": false, "time": 0.00021219253540039062, "tests_passed": false, "error": "SyntaxError"}
{"code": " np.array([np.sin(angle * frequency) for angle in ANGLES])", "compilation_passed": true, "time": 0.09384822845458984, "tests_passed": true, "error": null}
{"code": " np.random.uniform(low=0.01, high=np.pi, size=int(2*np.pi/0.01))", "compilation_passed": true, "time": 0.0637669563293457, "tests_passed": true, "error": null}
{"code": " np.sin(ANGLES) * np.sqrt(0.01 * frequency)", "compilation_passed": true, "time": 0.061517953872680664, "tests_passed": true, "error": null}
{"code": " np.array(np.sin(frequency*ANGLES))", "compilation_passed": true, "time": 0.09032893180847168, "tests_passed": true, "error": null}
{"code": " np.sin(np.arange(frequency * np.pi, (frequency + 1) * np.pi, 0.01)", "compilation_passed": false, "time": 0.0002560615539550781, "tests_passed": false, "error": "SyntaxError"}
{"code": " np.random.randn(len(ANGLES)) + frequency * np.sin(ANGLES)", "compilation_passed": true, "time": 0.06226611137390137, "tests_passed": true, "error": null}
{"code": " np.random.normal(0, 1, size=len(ANGLES))", "compilation_passed": true, "time": 0.062400102615356445, "tests_passed": true, "error": null}
{"code": " np.sin(np.linspace(0, 2*np.pi, len(ANGLES), endpoint=False)*frequency)", "compilation_passed": true, "time": 0.06299710273742676, "tests_passed": true, "error": null}
{"code": " 2*np.sin(2*np.pi*(frequency*ANGLES))", "compilation_passed": true, "time": 0.06260991096496582, "tests_passed": true, "error": null}
