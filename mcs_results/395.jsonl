{"selected_lines": [46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.012943744659423828, "tests_passed": true, "error": null}}
{"selected_lines": [47, 49, 46, 52, 50, 54, 43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(\"No files matching the pattern were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read().strip().splitlines()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 54, 45, 47, 50, 52, 43, 48], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.01318669319152832, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching the pattern '{file_pattern}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.013466835021972656, "tests_passed": true, "error": null}}
{"selected_lines": [46, 52, 47, 43, 45, 49, 53, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"{directory} does not exist\")\n    files = glob.glob(f\"{directory}{file_pattern}\")\n    if len(files) == 0:\n        raise ValueError(\"No files matching the pattern found in the directory.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 45, 47, 46, 54, 43, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'Directory {directory} not found')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(\"No files matching the pattern were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename) as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.011139869689941406, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [45, 49, 47, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = [pd.read_csv(path, sep=',')['Column'].to_list() for path in files]\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.readlines()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 49, 45, 46, 42, 53, 51, 52, 50, 54, 47, 48], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(\"No files matching the pattern found in the directory.\")\n    data = []\n    for filename in files:\n        with open(filename, \"r\") as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 45, 50, 48, 46, 42, 49, 44, 51], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(f'{directory}{file_pattern}')\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.02362799644470215, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(\"No files matching the pattern '{}' were found.\".format(file_pattern))\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.013102054595947266, "tests_passed": true, "error": null}}
{"selected_lines": [45, 51, 43, 42, 52, 46, 44, 49, 48, 53, 47, 54], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 45, 50, 43, 48, 54, 47, 44, 49, 53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.readlines()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 44, 50, 46, 47, 54, 52, 45, 43, 48, 51], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError\n    files = glob.glob(directory + file_pattern)\n    if not files:\n        raise ValueError(f\"No files found matching '{file_pattern}' in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.013211965560913086, "tests_passed": true, "error": null}}
{"selected_lines": [48, 42, 50, 43, 51, 54, 53, 44, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory does not exist: {}\".format(directory))\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.readlines()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 51, 46, 45, 43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"{directory} does not exist\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.005477190017700195, "tests_passed": true, "error": null}}
{"selected_lines": [52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.008790016174316406, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [50, 47, 44, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0052258968353271484, "tests_passed": true, "error": null}}
{"selected_lines": [48, 49, 54, 45, 51, 53, 43, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"The specified directory does not exist!\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 42, 52, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename.split(os.path.sep)[-1], numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.005089998245239258, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.012943744659423828, "tests_passed": true, "error": null}}
{"selected_lines": [48, 49, 42, 50, 51, 54, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 54, 53, 44, 47, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 45, 51, 48, 50, 53, 49, 43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 47, 46, 42, 54, 43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f'{directory} not found.')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(\"No files matching the pattern '{}' were found.\".format(file_pattern))\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 52, 54, 53, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(\"No files matching the pattern '{}' were found.\".format(file_pattern))\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 46, 50, 43, 54], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory does not exist\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching '{file_pattern}' in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.004945993423461914, "tests_passed": true, "error": null}}
{"selected_lines": [49, 54, 53, 43, 51, 50, 52, 42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 48, 50, 53, 42, 44, 54, 45, 51, 46, 47], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(\"No files matching the pattern found in the directory.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.010045051574707031, "tests_passed": true, "error": null}}
{"selected_lines": [53, 46, 49, 50, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(\"No files matching the pattern found in the directory.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'Directory {directory} does not exist.')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.013503074645996094, "tests_passed": true, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.016765117645263672, "tests_passed": true, "error": null}}
{"selected_lines": [42, 53, 50, 52, 48, 54, 49, 45, 44, 51, 46, 43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found.')\n    files = glob.glob(f\"{directory}{file_pattern}\")\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 46, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46, 51, 44, 52, 42, 53, 48, 50, 47, 45, 54], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(f'{directory}{file_pattern}')\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 53, 45, 52, 44, 54, 48, 49, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.014767885208129883, "tests_passed": true, "error": null}}
{"selected_lines": [46, 42, 45, 50, 44, 49, 48, 47, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(\"No files matching the pattern found in the directory.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 48, 42, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0054988861083984375, "tests_passed": true, "error": null}}
{"selected_lines": [49, 52, 53, 45, 46, 47, 54], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename.split(os.path.sep)[-1], numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.005988121032714844, "tests_passed": true, "error": null}}
{"selected_lines": [44, 47, 42, 49, 52, 50, 43, 51, 53, 48, 54, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 44, 54], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(f\"{directory}{file_pattern}\")\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.006207942962646484, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(\"No files matching the pattern were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.013576984405517578, "tests_passed": true, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(f\"{directory}/{file_pattern}\")\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.01627373695373535, "tests_passed": true, "error": null}}
{"selected_lines": [45, 42, 44, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0052280426025390625, "tests_passed": true, "error": null}}
{"selected_lines": [43, 51, 52, 49, 44, 42, 50, 48, 45, 53, 47], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read().strip()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 44, 48, 54, 46, 49, 45, 42, 53, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(\"No files matching the pattern found in the directory.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.readlines()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.011302947998046875, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [47, 49, 42, 52, 46, 51, 44, 54], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching the pattern '{file_pattern}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = [int(match.group()) for match in re.finditer(regex, content)]\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.014767885208129883, "tests_passed": true, "error": null}}
{"selected_lines": [54, 45, 51, 50, 47, 44, 48], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(f\"{directory}/{file_pattern}\")\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = [int(match) for match in re.findall(regex, content)]\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0030879974365234375, "tests_passed": true, "error": null}}
{"selected_lines": [42, 51, 44, 47, 53, 46, 50, 52, 48, 45, 43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    files = glob.glob(directory + file_pattern)\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read().strip().splitlines()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.011302947998046875, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [54, 46, 51, 45, 43, 48, 44, 50, 53, 47, 42, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'Directory {directory} does not exist.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(\"No files matching the pattern were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 48, 46, 52, 50, 47], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.016765117645263672, "tests_passed": true, "error": null}}
{"selected_lines": [48, 52, 51, 45, 42, 47, 46, 43, 49, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 48, 43, 51, 49, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory does not exist\")\n    files = glob.glob(f\"{directory}{file_pattern}\")\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 48, 46, 54, 53, 47, 51, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(\"No files matching the pattern were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 54, 52, 53, 42, 49, 44, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(f\"{directory}{file_pattern}\")\n    if not files:\n        raise ValueError(\"No files matching the pattern '{}' were found.\".format(file_pattern))\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 44, 42, 43, 47, 54, 52, 48, 51], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Specified directory does not exist.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.004761219024658203, "tests_passed": true, "error": null}}
{"selected_lines": [53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.014767885208129883, "tests_passed": true, "error": null}}
{"selected_lines": [46, 48, 52, 44, 51, 53, 49, 50, 54, 42, 45, 47], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 50, 52, 48, 44, 47, 51, 46, 54, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 46, 50, 49, 44, 51], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, \"r\") as f:\n            content = file.read()\n        numeric_data = [int(num) for num in re.findall(regex, content)]\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 42, 47, 43, 45, 49, 46, 51, 54, 52, 44, 48], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f'The specified directory does not exist: {directory}')\n    files = glob.glob(directory + file_pattern)\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.01318669319152832, "tests_passed": true, "error": null}}
{"selected_lines": [47, 51, 49, 54, 48, 53, 50, 52, 42, 43, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'{directory} not found.')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 42, 46, 48, 53, 44, 49, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 46, 51, 49, 48, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(f'{directory}{file_pattern}')\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.012928962707519531, "tests_passed": true, "error": null}}
{"selected_lines": [52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.009068012237548828, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [49, 43, 42, 50, 48, 46, 52, 47, 54], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found.')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(\"No files matching the given pattern were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 52, 46, 42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.readlines()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 44, 54, 52, 51, 45, 46, 50, 42, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, encoding=\"utf-8\") as file:\n            content = file.readlines()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 44, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0052258968353271484, "tests_passed": true, "error": null}}
{"selected_lines": [44, 48, 51, 42, 54, 52, 47, 45, 43, 46, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    files = glob.glob(f\"{directory}{file_pattern}\")\n    if len(files) == 0:\n        raise ValueError(\"No files matching the pattern were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = [int(match) for match in re.findall(regex, content)]\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 54, 52, 48, 42, 51, 45, 46, 53, 43, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.013211965560913086, "tests_passed": true, "error": null}}
{"selected_lines": [45, 52, 49, 48, 43, 46, 44, 53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'Directory {directory} not found')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 42, 51, 47, 48], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(\"No files matching the pattern found in the directory.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.00477910041809082, "tests_passed": true, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(f'{directory}{file_pattern}')\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.016178131103515625, "tests_passed": true, "error": null}}
{"selected_lines": [53, 48, 54, 43, 49, 50, 51, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename.split(os.path.sep)[-1], numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.004904270172119141, "tests_passed": true, "error": null}}
{"selected_lines": [43, 47, 53, 44, 52, 49, 50, 46, 42, 54], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f'Directory {directory} not found.')\n    files = glob.glob(f\"{directory}{file_pattern}\")\n    if not files:\n        raise ValueError(\"No files matching the pattern '{}' were found.\".format(file_pattern))\n    data = []\n    for filename in files:\n        with open(filename, encoding=\"utf-8\") as file:\n            content = file.read().strip()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.013026952743530273, "tests_passed": true, "error": null}}
{"selected_lines": [47, 44, 42, 48, 51, 49, 52, 54, 50, 45, 53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.readlines()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 51, 46, 54, 43, 48, 49, 44, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Specified directory does not exist.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching the pattern '{file_pattern}' in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.004902839660644531, "tests_passed": true, "error": null}}
{"selected_lines": [46, 45, 48, 47, 52, 49, 54, 44, 53, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 53, 52, 45, 50, 54, 44, 47, 46, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"{directory} does not exist\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.readlines()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 43, 52, 49, 54, 46, 50, 45, 53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 42, 52, 54, 50, 48, 46, 47, 43, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"{directory} does not exist\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.readlines()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 42, 48, 43, 52, 47, 54, 46, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching '{file_pattern}' in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49, 46, 44, 45, 47, 43, 51, 52, 54, 50, 42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError('Directory not found')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(\"No files matching the pattern '{}' were found.\".format(file_pattern))\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 47, 43, 54, 42, 51], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f'{directory} not found.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0051310062408447266, "tests_passed": true, "error": null}}
{"selected_lines": [50, 53, 51, 49, 43, 52, 46, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(\"No files matching the pattern were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = [int(match) for match in re.findall(regex, content)]\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46, 53, 45, 42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(\"No files matching the given pattern were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 46, 51], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.006971120834350586, "tests_passed": true, "error": null}}
{"selected_lines": [48, 44, 45, 46, 52, 49, 47], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(directory + file_pattern)\n    if len(files) == 0:\n        raise ValueError(f\"No files matching '{file_pattern}' found in '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.014767885208129883, "tests_passed": true, "error": null}}
{"selected_lines": [53, 47, 52, 54, 48, 46, 44, 45, 50, 42, 43, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f'The specified directory does not exist: {directory}')\n    files = glob.glob(f\"{directory}{file_pattern}\")\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = [pd.read_csv(path, sep=',')['Column'].to_list() for path in files]\n    for filename in files:\n        with open(filename, 'r', encoding='utf-8') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.009068012237548828, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [51, 45, 52, 48, 50, 46, 53, 43, 44, 42, 54], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 46, 45, 47, 44, 54, 49, 51], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found.\")\n    files = glob.glob(f\"{directory}{file_pattern}\")\n    if len(files) == 0:\n        raise ValueError(\"No files matching the pattern were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 51, 53, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.005064964294433594, "tests_passed": true, "error": null}}
{"selected_lines": [53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.014767885208129883, "tests_passed": true, "error": null}}
{"selected_lines": [50, 47, 44, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0052258968353271484, "tests_passed": true, "error": null}}
{"selected_lines": [49, 42, 48, 45, 52, 53, 46, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 44, 51, 50, 43, 46, 42, 47, 48], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'Directory {directory} not found')\n    files = glob.glob(f\"{directory}{file_pattern}\")\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.009068012237548828, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [43, 50, 49, 52, 44, 51, 46, 53, 54], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.014767885208129883, "tests_passed": true, "error": null}}
{"selected_lines": [48, 49, 45, 54, 52, 46, 50, 51, 43, 53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 43, 45, 46, 50, 53, 42, 49, 44, 48], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError('The directory specified does not exist.')\n    files = glob.glob(f'{directory}{file_pattern}')\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49, 45, 44, 54], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 45, 47, 44, 54, 48, 43, 52, 46, 53, 51, 42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f'Directory {directory} not found')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.013013839721679688, "tests_passed": true, "error": null}}
{"selected_lines": [52, 51, 45, 43, 50, 48, 47, 49, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'The specified directory does not exist: {directory}')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.readlines()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r', encoding='utf-8') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.013033866882324219, "tests_passed": true, "error": null}}
{"selected_lines": [49, 53, 50, 45, 47, 42, 54, 51], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 45, 52, 42, 44, 49, 54, 53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.014767885208129883, "tests_passed": true, "error": null}}
{"selected_lines": [46, 43, 42, 45, 52, 47, 53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(\"Directory does not exist: {}\".format(directory))\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.013211965560913086, "tests_passed": true, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.016765117645263672, "tests_passed": true, "error": null}}
{"selected_lines": [49, 43, 50, 54, 48, 47, 45, 51, 42, 46, 53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError('Directory not found.')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 52, 46, 53, 48], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching '{file_pattern}' found in '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 53, 50, 52, 42, 47, 46, 48, 51, 43, 54, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError('Directory not found')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(\"No files matching the pattern were found.\")\n    data = []\n    for filename in files:\n        with open(filename) as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 51, 43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('The directory specified does not exist.')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching the pattern '{file_pattern}' in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.005460977554321289, "tests_passed": true, "error": null}}
{"selected_lines": [44, 49, 42, 50, 45, 47, 52, 46, 43, 53, 54], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r', encoding='utf-8') as file:\n            content = file.read().strip()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 45, 53, 49, 47, 44, 51], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename) as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 53, 47, 42, 43, 51, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(\"Directory does not exist: {}\".format(directory))\n    files = glob.glob(directory + file_pattern)\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.004967927932739258, "tests_passed": true, "error": null}}
{"selected_lines": [47, 49, 43, 48, 50, 51, 42, 53, 46, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching '{file_pattern}' found in '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.readlines()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.009068012237548828, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.014767885208129883, "tests_passed": true, "error": null}}
{"selected_lines": [44, 46, 51, 42, 48, 50, 54, 53, 43, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching the pattern '{file_pattern}'.\")\n    data = []\n    for filename in files:\n        with open(filename) as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 50, 42, 45, 49, 48, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 42, 47, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename) as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 54, 48, 52, 49, 42, 43, 47, 53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(\"No files matching the given pattern were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r', encoding='utf-8') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.013267993927001953, "tests_passed": true, "error": null}}
{"selected_lines": [53, 44, 45, 50, 54, 51, 47, 43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0047800540924072266, "tests_passed": true, "error": null}}
{"selected_lines": [53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.014767885208129883, "tests_passed": true, "error": null}}
{"selected_lines": [42, 48, 44, 53, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(f'{directory}{file_pattern}')\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read().strip()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.004820823669433594, "tests_passed": true, "error": null}}
{"selected_lines": [43, 44, 54, 50, 42, 52, 51, 47, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'The directory {directory} does not exist.')\n    files = glob.glob(f'{directory}{file_pattern}')\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.readlines()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 43, 44, 51, 45, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read().strip()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.004886150360107422, "tests_passed": true, "error": null}}
{"selected_lines": [45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.013211965560913086, "tests_passed": true, "error": null}}
{"selected_lines": [44, 51, 52, 50, 46, 42, 53, 43, 54, 48, 47, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'Directory {directory} does not exist.')\n    files = glob.glob(directory + file_pattern)\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 48, 47, 49, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching '{file_pattern}' found in '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 52, 51, 48, 53, 50, 54], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = [int(match.group()) for match in re.finditer(regex, content)]\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.013267993927001953, "tests_passed": true, "error": null}}
{"selected_lines": [54, 50, 53, 49, 47, 46, 45, 44, 48, 42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(f\"{directory}{file_pattern}\")\n    if len(files) == 0:\n        raise ValueError(f\"No files matching '{file_pattern}' were found.\")\n    data = [pd.read_csv(path, sep=',')['Column'].to_list() for path in files]\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 42, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0056209564208984375, "tests_passed": true, "error": null}}
{"selected_lines": [52, 47, 51, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(\"No files matching the pattern were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.016765117645263672, "tests_passed": true, "error": null}}
{"selected_lines": [45, 48, 49, 47, 51, 43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 51, 50, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(\"No files matching the pattern '{}' were found.\".format(file_pattern))\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read().strip()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.005553007125854492, "tests_passed": true, "error": null}}
{"selected_lines": [45, 47, 44, 52, 49, 51, 46, 48], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.013013839721679688, "tests_passed": true, "error": null}}
{"selected_lines": [52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.009068012237548828, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [50, 43, 48, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"The specified directory does not exist!\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(\"No files matching the pattern found in the directory.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0057489871978759766, "tests_passed": true, "error": null}}
{"selected_lines": [45, 53, 42, 47, 44, 51, 49, 48, 50, 54, 43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError('Directory not found')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(\"No files matching the pattern '{}' were found.\".format(file_pattern))\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.013102054595947266, "tests_passed": true, "error": null}}
{"selected_lines": [48, 52, 44, 51, 54, 53, 47, 50, 42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read().strip()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 48, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(\"No files matching the pattern were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 53, 43, 42, 52, 46, 49, 51, 54, 48, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 45, 42, 54, 48, 52, 49, 46, 51, 43, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'The directory {directory} does not exist.')\n    files = glob.glob(f\"{directory}/{file_pattern}\")\n    if not files:\n        raise ValueError(\"No files matching the pattern found in the directory.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 44, 54, 53, 45, 51, 48, 42, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(\"No files matching the pattern '{}' were found.\".format(file_pattern))\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.004861116409301758, "tests_passed": true, "error": null}}
{"selected_lines": [42, 50, 43, 54, 46, 44, 48, 52, 53, 47, 51, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 49, 47, 53, 51], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(\"No files matching the pattern found in the directory.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = [int(match) for match in re.findall(regex, content)]\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 54, 50, 49, 52, 53, 46, 42, 43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f'Directory {directory} not found.')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(f'{directory}{file_pattern}')\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.016178131103515625, "tests_passed": true, "error": null}}
{"selected_lines": [52, 43, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read().strip()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 53, 49, 48, 47, 54, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(\"No files matching the pattern '{}' were found.\".format(file_pattern))\n    data = []\n    for filename in files:\n        with open(filename) as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 42, 45, 43, 49, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found.')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 43, 42, 51, 47, 52, 44, 53, 48, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'The specified directory does not exist: {directory}')\n    files = glob.glob(f\"{directory}{file_pattern}\")\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 54, 49, 47, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename) as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 44, 48, 46, 49, 45, 42, 47, 50, 43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('The directory specified does not exist.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, encoding=\"utf-8\") as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 50, 48, 52, 45, 47, 53, 54, 43, 46, 51, 42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f'Directory {directory} not found')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read().strip().splitlines()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 44, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.004936933517456055, "tests_passed": true, "error": null}}
{"selected_lines": [43, 49, 53, 45, 44, 47, 46, 54, 42, 51, 48], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(\"No files matching the pattern '{}' were found.\".format(file_pattern))\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.014767885208129883, "tests_passed": true, "error": null}}
{"selected_lines": [50, 49, 43, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching '{file_pattern}' in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read().strip()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 52, 48, 42, 43, 51, 44, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError('Specified directory does not exist.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 45, 43, 51, 50, 46, 42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"{directory} directory not found\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = [int(match) for match in re.findall(regex, content)]\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.003439188003540039, "tests_passed": true, "error": null}}
{"selected_lines": [51, 45, 42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.004745960235595703, "tests_passed": true, "error": null}}
{"selected_lines": [43, 51, 48, 44, 50, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory does not exist: {}\".format(directory))\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = [int(match.group()) for match in re.finditer(regex, content)]\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.003162860870361328, "tests_passed": true, "error": null}}
{"selected_lines": [44, 54, 45, 46, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(directory + file_pattern)\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 43, 44, 48, 52, 54], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    files = glob.glob(f\"{directory}{file_pattern}\")\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 44, 46, 43, 54, 45, 42, 51, 47], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(\"No files matching the pattern found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.014767885208129883, "tests_passed": true, "error": null}}
{"selected_lines": [49, 47, 52, 54], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r', encoding='utf-8') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 53, 45, 43, 47, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 48, 43, 44, 53, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"The specified directory does not exist!\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read().strip().splitlines()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(f\"{directory}{file_pattern}\")\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.016038894653320312, "tests_passed": true, "error": null}}
{"selected_lines": [54, 44, 43, 46, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"{directory} directory not found\")\n    files = glob.glob(f'{directory}{file_pattern}')\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.005511045455932617, "tests_passed": true, "error": null}}
{"selected_lines": [53, 54, 48, 50, 44, 51, 47, 42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read().strip()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0064601898193359375, "tests_passed": true, "error": null}}
{"selected_lines": [45, 48, 43, 52, 50, 53, 42, 46, 54], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(\"No files matching the pattern were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read().strip()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 43, 50, 45, 52, 51, 53, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'{directory} not found.')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.014767885208129883, "tests_passed": true, "error": null}}
{"selected_lines": [52, 49, 54, 51, 42, 47], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename) as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 42, 44, 54, 49, 50, 53, 46, 52, 47, 43, 51], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f'Directory {directory} not found')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 51, 53, 43, 45, 44, 50, 52, 42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"{directory} directory not found\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = [int(match.group()) for match in re.finditer(regex, content)]\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 50, 47, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found.')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 50, 48, 51], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.007792949676513672, "tests_passed": true, "error": null}}
{"selected_lines": [52, 54, 44, 50, 45, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 53, 45, 43, 44, 50, 52, 54], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read().strip()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 52, 47, 54, 51, 49, 50, 46, 42, 53, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 48, 44, 45, 43, 52, 51, 47, 50, 42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError('Directory not found.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.016765117645263672, "tests_passed": true, "error": null}}
{"selected_lines": [51, 49, 54, 46, 48, 42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 52, 48, 51, 42, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(f\"{directory}{file_pattern}\")\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename) as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.011139869689941406, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [48, 51, 50, 52, 44, 47], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(f'{directory}{file_pattern}')\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.readlines()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 43, 49, 54, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"The specified directory does not exist!\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.007668018341064453, "tests_passed": true, "error": null}}
{"selected_lines": [43, 47, 44, 49, 42, 48], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"The specified directory does not exist!\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = [pd.read_csv(path, sep=',')['Column'].to_list() for path in files]\n    for filename in files:\n        with open(filename, \"r\") as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.013211965560913086, "tests_passed": true, "error": null}}
{"selected_lines": [53, 46, 45, 49, 51, 54, 50, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 43, 42, 48], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f'Directory {directory} not found')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.005977153778076172, "tests_passed": true, "error": null}}
{"selected_lines": [47, 48, 44, 43, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    files = glob.glob(f\"{directory}{file_pattern}\")\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.005347013473510742, "tests_passed": true, "error": null}}
{"selected_lines": [44, 52, 47, 48, 51, 50, 54, 46, 42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 49, 45, 48, 43, 51, 42, 47], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 54, 47, 42, 44, 51, 49, 50, 53, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 42, 43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f'The directory {directory} does not exist.')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.006367921829223633, "tests_passed": true, "error": null}}
{"selected_lines": [46, 50, 43, 53, 54], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.010679006576538086, "tests_passed": true, "error": null}}
{"selected_lines": [53, 42, 45, 43, 44, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(\"Directory does not exist: {}\".format(directory))\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 53, 51, 42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 43, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"{directory} does not exist\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 48, 45, 49, 50, 47], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.readlines()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 45, 46, 47, 50, 54, 53, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = [pd.read_csv(path, sep=',')['Column'].to_list() for path in files]\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 44, 52, 45, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(f\"{directory}{file_pattern}\")\n    if len(files) == 0:\n        raise ValueError(\"No files matching the pattern found in the directory.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 45, 42, 43, 49, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 42, 49, 48, 52, 50, 54, 53, 43, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(\"No files matching the pattern found in the directory.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 46, 45, 43, 48, 42, 53, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'The directory {directory} does not exist.')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 48, 49, 50, 46, 43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(\"No files matching the pattern found in the directory.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.007076263427734375, "tests_passed": true, "error": null}}
{"selected_lines": [54, 52, 53, 45, 46, 49, 51, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching '{file_pattern}' found in '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 48, 53, 51, 46, 49, 50, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(directory + file_pattern)\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, \"r\") as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename.split(os.path.sep)[-1], numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 48, 49, 52, 46, 43, 47], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'Directory {directory} not found')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(\"No files matching the pattern were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r', encoding='utf-8') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 49, 43, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    files = glob.glob(directory + file_pattern)\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 42, 52, 50, 48, 51, 43, 54, 45, 46, 49, 53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found.')\n    files = glob.glob(directory + file_pattern)\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.013042211532592773, "tests_passed": true, "error": null}}
{"selected_lines": [45, 49, 52, 46, 50, 54], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 42, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(\"No files matching the pattern were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.005652904510498047, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.013013839721679688, "tests_passed": true, "error": null}}
{"selected_lines": [44, 49, 52, 43, 54, 42, 47, 46, 51, 53, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 54, 49, 52, 50, 44, 46, 42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching the pattern '{file_pattern}' in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.009068012237548828, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [43, 53, 48, 47, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read().strip().splitlines()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 46, 45, 51, 43, 44, 53, 52, 49, 54], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    files = glob.glob(f\"{directory}{file_pattern}\")\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching the pattern '{file_pattern}' in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 44, 53, 43, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 42, 44, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0052280426025390625, "tests_passed": true, "error": null}}
{"selected_lines": [46, 47, 45, 43, 52, 53, 48, 50, 42, 44, 51, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = [int(x) for x in re.findall(regex, content)]\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 42, 54, 43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.005628108978271484, "tests_passed": true, "error": null}}
{"selected_lines": [46, 45, 52, 44, 54, 47, 48, 50, 42, 43, 53, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError('Directory not found.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(\"No files matching the pattern '{}' were found.\".format(file_pattern))\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 51], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = [int(match) for match in re.findall(regex, content)]\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.003988027572631836, "tests_passed": true, "error": null}}
{"selected_lines": [45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.013211965560913086, "tests_passed": true, "error": null}}
{"selected_lines": [50, 45, 49, 54, 52, 47, 48, 44, 51, 42, 53, 43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f'Directory {directory} does not exist.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 51, 42, 45, 49, 54, 50, 53, 43, 46, 44, 47], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory does not exist: {}\".format(directory))\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 42, 46, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(directory + file_pattern)\n    if not files:\n        raise ValueError(\"No files found matching the given pattern in the directory.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0063018798828125, "tests_passed": true, "error": null}}
{"selected_lines": [46, 50, 52, 48, 47, 51, 45, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(\"No files matching the pattern were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 50, 42, 49, 53, 45, 54, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename) as f:\n            content = file.readlines()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 46, 42, 52, 49, 48, 53, 44, 50, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"{directory} directory not found\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read().strip().splitlines()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 42, 51, 47, 45, 46, 50, 53, 43, 52, 48], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('The directory specified does not exist.')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching the pattern '{file_pattern}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching the pattern '{file_pattern}' in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.013510942459106445, "tests_passed": true, "error": null}}
{"selected_lines": [54, 42, 47, 50, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.readlines()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 46, 44, 50, 52, 51, 42, 49, 54, 48, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f'The specified directory does not exist: {directory}')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching '{file_pattern}' in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, \"r\") as f:\n            content = file.read().strip().splitlines()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 43, 54, 47, 44, 49, 50, 42, 48, 51, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read().strip().splitlines()\n        numeric_data = [int(x) for x in re.findall(regex, content)]\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 49, 48, 52, 45, 43, 50, 44, 51, 46, 47, 53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'{directory} not found.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 44, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 44, 49, 52, 54, 48, 43, 53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 47, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 43, 54, 48, 47, 50, 44, 51, 42, 52, 49, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'The specified directory does not exist: {directory}')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.015726089477539062, "tests_passed": true, "error": null}}
{"selected_lines": [43, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"The specified directory does not exist!\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.007735729217529297, "tests_passed": true, "error": null}}
{"selected_lines": [51, 43, 46, 53, 54, 45, 48, 47], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(\"No files matching the pattern '{}' were found.\".format(file_pattern))\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.007719993591308594, "tests_passed": true, "error": null}}
{"selected_lines": [53, 46, 47, 44, 48, 54, 43, 50, 42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(\"Directory not found.\")\n    files = glob.glob(f\"{directory}/{file_pattern}\")\n    if not files:\n        raise ValueError(\"No files matching the pattern found in the directory.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.readlines()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 43, 47, 50, 48, 46, 45, 42, 53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError('Directory not found')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 43, 47, 45, 53, 52, 50, 54, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Specified directory does not exist.')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, \"r\") as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 52, 46, 53, 42, 44, 49, 43, 51], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(f\"{directory}{file_pattern}\")\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.016038894653320312, "tests_passed": true, "error": null}}
{"selected_lines": [53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.014767885208129883, "tests_passed": true, "error": null}}
{"selected_lines": [43, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('The directory specified does not exist.')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.readlines()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.01277303695678711, "tests_passed": true, "error": null}}
{"selected_lines": [52, 42, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 52, 50, 51, 47, 54, 43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.014767885208129883, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.013297080993652344, "tests_passed": true, "error": null}}
{"selected_lines": [54, 46, 53, 49, 47, 48, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 48, 52, 54, 53, 46, 51, 42, 43, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 54, 49, 45, 53, 51, 42, 50, 46, 43, 47, 48], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError('Directory not found.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(\"No files matching the pattern were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.014767885208129883, "tests_passed": true, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.016765117645263672, "tests_passed": true, "error": null}}
{"selected_lines": [47, 43, 53, 48, 49, 44, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'Directory {directory} not found.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 49, 54, 46, 43, 44, 45, 42, 50, 52, 47], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f'Directory {directory} does not exist.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(\"No files found matching the given pattern in the directory.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 54, 48, 42, 51, 45, 44, 49, 53, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = [int(match) for match in re.findall(regex, content)]\n        data.append([filename.split(os.path.sep)[-1], numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.014767885208129883, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = [int(num) for num in re.findall(regex, content)]\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.011169910430908203, "tests_passed": true, "error": null}}
{"selected_lines": [53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.014767885208129883, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(\"No files matching the pattern were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.013576984405517578, "tests_passed": true, "error": null}}
{"selected_lines": [42, 49, 43, 44, 46, 47, 51, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f'Directory {directory} does not exist.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(\"No files matching the pattern were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = [int(match) for match in re.findall(regex, content)]\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 42, 46, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(directory + file_pattern)\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.005166053771972656, "tests_passed": true, "error": null}}
{"selected_lines": [49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.011302947998046875, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [52, 44, 48, 47, 53, 51, 46, 43, 42, 54], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(\"The specified directory does not exist!\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(\"No files matching the pattern '{}' were found.\".format(file_pattern))\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 54, 51, 53, 49, 50, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching '{file_pattern}' found in '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 50, 51, 48, 47, 45, 46, 44, 53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(directory + file_pattern)\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = [int(num) for num in re.findall(regex, content)]\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.003453969955444336, "tests_passed": true, "error": null}}
{"selected_lines": [53, 48, 44, 46, 51, 52, 54], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching the pattern '{file_pattern}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 54, 43, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found.')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.011302947998046875, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.016765117645263672, "tests_passed": true, "error": null}}
{"selected_lines": [42, 49, 46, 45, 50, 54, 51, 53, 47, 52, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching '{file_pattern}' in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.readlines()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 47, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(directory + file_pattern)\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.readlines()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 52, 46, 50, 45, 53, 42, 49, 51, 44, 48], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.013013839721679688, "tests_passed": true, "error": null}}
{"selected_lines": [48, 42, 54, 45, 52, 49, 44, 53, 43, 51, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError\n    files = glob.glob(directory + file_pattern)\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 53, 45, 50, 43, 42, 48, 49, 52, 46, 51], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError('Directory not found.')\n    files = glob.glob(directory + file_pattern)\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename) as f:\n            content = file.readlines()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 47, 51, 45, 42, 48, 52, 46, 50, 43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = [pd.read_csv(path, sep=',')['Column'].to_list() for path in files]\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read().strip()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 47, 53, 46, 44, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(\"No files found matching the given pattern in the directory.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.00586700439453125, "tests_passed": true, "error": null}}
{"selected_lines": [49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.011302947998046875, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.016765117645263672, "tests_passed": true, "error": null}}
{"selected_lines": [52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.009068012237548828, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [43, 51, 53, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.005064964294433594, "tests_passed": true, "error": null}}
{"selected_lines": [42, 47, 43, 44, 50, 51], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory does not exist: {}\".format(directory))\n    files = glob.glob(f\"{directory}{file_pattern}\")\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.00603795051574707, "tests_passed": true, "error": null}}
{"selected_lines": [44, 42, 50, 45, 49, 46, 48], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 45, 47, 43, 54, 49, 44, 48, 42, 52, 53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'{directory} not found.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(\"No files matching the pattern were found.\")\n    data = []\n    for filename in files:\n        with open(filename, encoding=\"utf-8\") as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 43, 50, 46, 44, 47, 45, 42, 51, 49, 52, 53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 52, 50, 47, 44, 53, 54, 42, 49, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 49, 45, 47, 48], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory does not exist: {}\".format(directory))\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.016765117645263672, "tests_passed": true, "error": null}}
{"selected_lines": [44, 43, 49, 48, 52, 47, 51, 46, 54, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.01277303695678711, "tests_passed": true, "error": null}}
{"selected_lines": [52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.009068012237548828, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.013013839721679688, "tests_passed": true, "error": null}}
{"selected_lines": [50, 47, 45, 52, 44, 43, 42, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"{directory} directory not found\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 54, 44, 47], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = [int(num) for num in re.findall(regex, content)]\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0032808780670166016, "tests_passed": true, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(directory + file_pattern)\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.016625165939331055, "tests_passed": true, "error": null}}
{"selected_lines": [51, 45, 43, 50, 52, 49, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 45, 42, 48, 46, 47, 54, 50, 44, 49, 53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f'Directory {directory} does not exist.')\n    files = glob.glob(directory + file_pattern)\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0050051212310791016, "tests_passed": true, "error": null}}
{"selected_lines": [43, 49, 46, 47, 52, 53, 42, 44, 51, 54, 45, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 50, 43, 47, 54, 48, 52, 53, 49, 51, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 48, 47, 46, 42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(\"No files matching the pattern found in the directory.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.016765117645263672, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.013541221618652344, "tests_passed": true, "error": null}}
{"selected_lines": [45, 54, 49, 46, 51, 47, 52, 48, 50, 44, 53, 43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found.')\n    files = glob.glob(f\"{directory}{file_pattern}\")\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 44, 42, 43, 47, 54, 52, 48, 51], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Specified directory does not exist.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.004761219024658203, "tests_passed": true, "error": null}}
{"selected_lines": [53, 51, 48, 49, 54, 52, 42, 47, 46, 44, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(\"No files matching the pattern '{}' were found.\".format(file_pattern))\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.014767885208129883, "tests_passed": true, "error": null}}
{"selected_lines": [46, 50, 52, 54, 43, 47, 51, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory does not exist\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(\"No files found matching the given pattern in the directory.\")\n    data = [pd.read_csv(path, sep=',')['Column'].to_list() for path in files]\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 43, 48, 53, 42, 51, 49, 44, 50, 54], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found.')\n    files = glob.glob(f\"{directory}{file_pattern}\")\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read().strip()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.00576019287109375, "tests_passed": true, "error": null}}
{"selected_lines": [43, 50, 52, 42, 49, 45, 44, 46, 48], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f'Directory {directory} does not exist.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 47, 42, 51, 54, 43, 44, 53, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 45, 44, 50, 49, 51, 52, 54, 42, 46, 48, 47], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(\"No files matching the pattern '{}' were found.\".format(file_pattern))\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.009668827056884766, "tests_passed": true, "error": null}}
{"selected_lines": [46, 49, 42, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching the pattern '{file_pattern}' in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 51, 52, 47, 43, 53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found.')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = [pd.read_csv(path, sep=',')['Column'].to_list() for path in files]\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 51, 46, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 43, 42, 48], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"{directory} does not exist\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = [pd.read_csv(path, sep=',')['Column'].to_list() for path in files]\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 47, 54, 52, 49, 46, 43, 53, 48, 45, 51], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(\"Directory does not exist: {}\".format(directory))\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 50, 52, 51, 46, 43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(\"No files found matching the given pattern in the directory.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = [int(match) for match in re.findall(regex, content)]\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 53, 50, 45, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.readlines()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 42, 50, 45, 43, 51, 53, 54], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.005475044250488281, "tests_passed": true, "error": null}}
{"selected_lines": [49, 48, 44, 54, 46, 52, 42, 51, 47, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(\"No files matching the pattern were found.\")\n    data = []\n    for filename in files:\n        with open(filename, \"r\") as f:\n            content = file.readlines()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.016765117645263672, "tests_passed": true, "error": null}}
{"selected_lines": [53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.014767885208129883, "tests_passed": true, "error": null}}
{"selected_lines": [44, 43, 54, 52, 50, 51, 45, 48, 42, 49, 53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.readlines()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 43, 51, 54, 52, 53, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 51, 54, 50, 43, 47, 46, 48, 49, 42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(\"Directory does not exist\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = [int(num) for num in re.findall(regex, content)]\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 47, 44, 46, 52, 53, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 44, 48, 45, 51, 53, 46, 50, 52, 54, 49, 42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(f\"{directory}{file_pattern}\")\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.012721061706542969, "tests_passed": true, "error": null}}
{"selected_lines": [45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.013211965560913086, "tests_passed": true, "error": null}}
{"selected_lines": [48, 54, 42, 46, 44, 50, 53, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(directory + file_pattern)\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read().strip().splitlines()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 44, 46, 42, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.004984617233276367, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.012943744659423828, "tests_passed": true, "error": null}}
{"selected_lines": [48, 53, 45, 42, 52, 54, 43, 44, 46, 49, 51], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'The directory {directory} does not exist.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(\"No files matching the given pattern were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 51, 44, 42, 48, 50, 52, 54, 43, 47, 46, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 49, 42, 48, 45, 46, 47, 50, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 51, 53, 44, 42, 43, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 47, 43, 48, 46, 53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Specified directory does not exist.')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(\"No files matching the pattern found in the directory.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.005638837814331055, "tests_passed": true, "error": null}}
{"selected_lines": [50, 54, 42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.readlines()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 49, 47, 54, 45, 43, 50, 48], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('The directory specified does not exist.')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 44, 42, 52, 54, 48, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(directory + file_pattern)\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 51, 48, 50, 43, 53, 46, 52, 49, 47, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 48, 51, 43, 53, 54, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'The directory {directory} does not exist.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.005418062210083008, "tests_passed": true, "error": null}}
{"selected_lines": [45, 52, 44, 54, 48, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 45, 50, 43, 47, 52, 44, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'{directory} not found.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read().strip().splitlines()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 46, 48, 54, 42, 51, 44, 52, 50, 47, 53, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('The directory specified does not exist.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 44, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0052258968353271484, "tests_passed": true, "error": null}}
{"selected_lines": [45, 54, 51, 43, 47, 44, 50, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'{directory} not found.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 52, 44, 54, 48, 51, 50, 53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(f\"{directory}{file_pattern}\")\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 47, 52, 54, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 46, 51, 47], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.005062103271484375, "tests_passed": true, "error": null}}
{"selected_lines": [52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.009068012237548828, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.013013839721679688, "tests_passed": true, "error": null}}
{"selected_lines": [46, 49, 47, 42, 50, 48, 51, 45, 44, 53, 43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = [int(x) for x in re.findall(regex, content)]\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.009068012237548828, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [54, 50, 42, 45, 48, 46, 52, 53, 43, 47, 51], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"{directory} does not exist\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 43, 45, 44, 48, 47, 53, 51, 42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('The directory specified does not exist.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r', encoding='utf-8') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0051250457763671875, "tests_passed": true, "error": null}}
{"selected_lines": [46, 51, 45, 50, 42, 48, 43, 47], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f'Directory {directory} not found.')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching '{file_pattern}' in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.005520820617675781, "tests_passed": true, "error": null}}
{"selected_lines": [51, 49, 52, 53, 48, 47, 50, 54], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47, 46, 54, 50, 48, 44, 49, 51, 53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read().strip()\n        numeric_data = [int(match.group()) for match in re.finditer(regex, content)]\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read().strip()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.01305532455444336, "tests_passed": true, "error": null}}
{"selected_lines": [54, 49, 45, 46, 50, 47, 52, 42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(\"No files matching the pattern found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 46, 53, 42, 48, 50, 43, 51, 52, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError('Directory not found')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(\"No files matching the pattern found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.013705968856811523, "tests_passed": true, "error": null}}
{"selected_lines": [42, 43, 54, 44, 50, 45, 53, 47, 51, 49, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 54, 44, 42, 51, 49, 52, 48, 46, 50, 43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(\"No files matching the pattern found in the directory.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 47, 43, 53, 42, 49, 51, 46, 52, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = [int(num) for num in re.findall(regex, content)]\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 54, 43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"The specified directory does not exist!\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read().strip()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.005137920379638672, "tests_passed": true, "error": null}}
{"selected_lines": [48, 47, 46, 45, 42, 53, 49, 44, 50, 43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = [pd.read_csv(path, sep=',')['Column'].to_list() for path in files]\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.014767885208129883, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.013042211532592773, "tests_passed": true, "error": null}}
{"selected_lines": [53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.014767885208129883, "tests_passed": true, "error": null}}
{"selected_lines": [54, 47, 46, 49, 52, 50, 51, 44, 53, 43, 42, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'{directory} not found.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = [int(num) for num in re.findall(regex, content)]\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 47, 46, 50, 42, 43, 53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found.')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching the pattern '{file_pattern}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 43, 53, 54, 44, 48, 47, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('The directory specified does not exist.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename) as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename.split(os.path.sep)[-1], numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 52, 51, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Specified directory does not exist.')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = [int(match) for match in re.findall(regex, content)]\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 50, 52, 42, 54, 49, 47, 48, 46, 53, 51], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 53, 46, 48, 44, 42, 43, 52, 50, 51], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError('Specified directory does not exist.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(\"No files matching the pattern were found.\")\n    data = [pd.read_csv(path, sep=',')['Column'].to_list() for path in files]\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.readlines()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 43, 47, 48], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('The directory specified does not exist.')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 51, 44, 43, 53, 54, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"{directory} does not exist\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 45, 51, 52, 42, 49, 48, 43, 47, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found.')\n    files = glob.glob(f'{directory}{file_pattern}')\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = [int(num) for num in re.findall(regex, content)]\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 42, 44, 51, 46, 50, 47, 53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(\"No files matching the pattern '{}' were found.\".format(file_pattern))\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 52, 49, 47, 45, 42, 48], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError('Directory not found')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = [pd.read_csv(path, sep=',')['Column'].to_list() for path in files]\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'{directory} not found.')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.014220952987670898, "tests_passed": true, "error": null}}
{"selected_lines": [50, 49, 44, 52, 42, 53, 54, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.readlines()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 51, 45, 53, 48, 42, 43, 44, 46, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching '{file_pattern}' in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 53, 49, 50, 47, 52, 54, 42, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found.\")\n    data = [pd.read_csv(path, sep=',')['Column'].to_list() for path in files]\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 43, 46, 51, 45, 44, 54, 52, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(\"No files matching the pattern '{}' were found in '{}'.\".format(file_pattern, directory))\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 50, 49, 54, 52, 46, 43, 42, 45, 44, 48, 51], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 45, 43, 46, 42, 44, 53, 54, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory does not exist: {}\".format(directory))\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.005012989044189453, "tests_passed": true, "error": null}}
{"selected_lines": [45, 52, 54, 50, 42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 43, 42, 51], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f'Directory {directory} not found.')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 46, 42, 49, 53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching the pattern '{file_pattern}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.014767885208129883, "tests_passed": true, "error": null}}
{"selected_lines": [45, 50, 52, 51, 54, 46, 49, 43, 47, 48, 53, 42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"{directory} directory not found\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching the pattern '{file_pattern}' in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read().strip()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.016765117645263672, "tests_passed": true, "error": null}}
{"selected_lines": [52, 53, 51, 47, 45, 42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 52, 53, 54, 46, 50, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 53, 52, 43, 44, 54, 50, 48, 47, 46, 42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'Directory {directory} does not exist.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename.split(os.path.sep)[-1], numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0055429935455322266, "tests_passed": true, "error": null}}
{"selected_lines": [45, 54, 43, 48, 47, 52, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'Directory {directory} not found')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 50, 48, 42, 47, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = [pd.read_csv(path, sep=',')['Column'].to_list() for path in files]\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read().strip().splitlines()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.014767885208129883, "tests_passed": true, "error": null}}
{"selected_lines": [53, 54, 51, 52, 42, 48, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename) as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 47, 48, 51, 46, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 44, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0052258968353271484, "tests_passed": true, "error": null}}
{"selected_lines": [44, 54, 47, 49, 48, 52, 53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, encoding=\"utf-8\") as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 44, 54, 49, 53, 48, 46, 47, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 45, 43, 46, 47, 42, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError('The directory specified does not exist.')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(\"No files matching the pattern found in the directory.\")\n    data = []\n    for filename in files:\n        with open(filename, \"r\") as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 42, 49, 52, 43, 54, 53, 50, 47, 46, 51], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory does not exist: {}\".format(directory))\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.readlines()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 48, 43, 53, 50, 54, 47], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Specified directory does not exist.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.readlines()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 43, 49, 52, 54, 45, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError('Directory not found.')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(\"No files matching the pattern '{}' were found.\".format(file_pattern))\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.013102054595947266, "tests_passed": true, "error": null}}
{"selected_lines": [42, 51, 45, 44, 53, 49, 43, 52, 48, 54], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f'Directory {directory} not found.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = [int(x) for x in re.findall(regex, content)]\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 49, 47, 51, 50, 43, 48, 53, 46, 42, 52, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    files = glob.glob(f\"{directory}{file_pattern}\")\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49, 45, 51, 42, 52, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, encoding=\"utf-8\") as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 54, 44, 48, 43, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(\"No files matching the given pattern were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0062329769134521484, "tests_passed": true, "error": null}}
{"selected_lines": [44, 52, 48, 50, 49, 43, 54, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 48, 52, 46, 42, 45, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 51, 48, 54, 52, 47, 42, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 44, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0052258968353271484, "tests_passed": true, "error": null}}
{"selected_lines": [50, 49, 42, 44, 53, 43, 52, 51, 45, 47, 48, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.readlines()\n        numeric_data = [int(num) for num in re.findall(regex, content)]\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 53, 48, 44, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 42, 47, 54, 52, 53, 44, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 52, 54, 51, 48, 47, 49, 50, 45, 42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(\"No files matching the given pattern were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 47, 54, 51, 49, 48, 43, 53, 52, 44, 45, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"{directory} directory not found\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(\"No files found matching the given pattern in the directory.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 42, 49, 44, 50, 53, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching '{file_pattern}' in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 53, 50, 45, 46, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read().strip()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0058629512786865234, "tests_passed": true, "error": null}}
{"selected_lines": [54, 46, 47, 45, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.016765117645263672, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.013042211532592773, "tests_passed": true, "error": null}}
{"selected_lines": [43, 49, 46, 52, 53, 48, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(\"No files matching the pattern found in the directory.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.008790016174316406, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [51, 49, 54, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 44, 52, 53, 43, 51], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'Directory {directory} not found.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.008790016174316406, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [53, 51, 49, 42, 45, 48, 54, 50, 47, 43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f'The specified directory does not exist: {directory}')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.readlines()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 52, 53, 51, 46, 49, 48, 54, 42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(f\"{directory}/{file_pattern}\")\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename) as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 42, 43, 49, 44, 51, 47, 50, 54, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(\"No files matching the pattern '{}' were found in '{}'.\".format(file_pattern, directory))\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.readlines()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 43, 50, 47, 51, 48, 44, 53, 54], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.005549192428588867, "tests_passed": true, "error": null}}
{"selected_lines": [53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.014767885208129883, "tests_passed": true, "error": null}}
{"selected_lines": [50, 49, 43, 54, 46, 52, 51], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = [int(x) for x in re.findall(regex, content)]\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 46, 52, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 52, 50, 42, 54, 53, 46, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 49, 45, 44, 53, 42, 54, 43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"{directory} directory not found\")\n    files = glob.glob(f\"{directory}{file_pattern}\")\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 53, 43, 54, 48], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'Directory {directory} not found.')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 43, 48, 47, 50, 45, 51, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read().strip()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.01318669319152832, "tests_passed": true, "error": null}}
{"selected_lines": [51, 50, 44, 46, 54, 45, 52, 48, 43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching '{file_pattern}' in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 51, 48, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.005303144454956055, "tests_passed": true, "error": null}}
{"selected_lines": [42, 44, 45, 46, 43, 52, 54, 51], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'The specified directory does not exist: {directory}')\n    files = glob.glob(f'{directory}{file_pattern}')\n    if len(files) == 0:\n        raise ValueError(\"No files matching the pattern found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 53, 47, 49, 48, 52, 46, 42, 51, 50, 44, 54], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory does not exist\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(\"No files matching the pattern were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 53, 50, 46, 42, 48, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(f\"{directory}{file_pattern}\")\n    if not files:\n        raise ValueError(f\"No files found matching the pattern '{file_pattern}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0057239532470703125, "tests_passed": true, "error": null}}
{"selected_lines": [53, 43, 42, 54, 45, 47, 46, 49, 52, 50, 51], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'{directory} not found.')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = [pd.read_csv(path, sep=',')['Column'].to_list() for path in files]\n    for filename in files:\n        with open(filename, 'r', encoding='utf-8') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.014767885208129883, "tests_passed": true, "error": null}}
{"selected_lines": [51, 44, 43, 46, 48, 54, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 54, 42, 43, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError('Directory not found.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(\"No files matching the pattern found in the directory.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.005391120910644531, "tests_passed": true, "error": null}}
{"selected_lines": [43, 54, 45, 51], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"{directory} directory not found\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.005282878875732422, "tests_passed": true, "error": null}}
{"selected_lines": [45, 49, 51, 53, 43, 47, 54, 46, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching the pattern '{file_pattern}'.\")\n    data = []\n    for filename in files:\n        with open(filename) as f:\n            content = file.read().strip().splitlines()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.014767885208129883, "tests_passed": true, "error": null}}
{"selected_lines": [47, 45, 51, 49, 42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 50, 47, 45, 52, 44, 54, 49, 51], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = [int(x) for x in re.findall(regex, content)]\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 51, 50, 44, 45, 42, 52, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read().strip()\n        numeric_data = re.findall(regex, content)\n        data.append([filename.split(os.path.sep)[-1], numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.014767885208129883, "tests_passed": true, "error": null}}
{"selected_lines": [43, 42, 51, 53, 49, 52, 54, 50, 47, 44, 48, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    files = glob.glob(directory + file_pattern)\n    if not files:\n        raise ValueError(\"No files matching the pattern found in the directory.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r', encoding='utf-8') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.009068012237548828, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [50, 47, 44, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0052258968353271484, "tests_passed": true, "error": null}}
{"selected_lines": [46, 44, 51, 42, 48], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.005284786224365234, "tests_passed": true, "error": null}}
{"selected_lines": [44, 53, 49, 51, 54, 45, 48, 46, 50, 47, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(f'{directory}{file_pattern}')\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = [int(x) for x in re.findall(regex, content)]\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 46, 54, 53, 45, 52, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"The specified directory does not exist!\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.013146162033081055, "tests_passed": true, "error": null}}
{"selected_lines": [52, 45, 46, 47, 50, 49, 51, 53, 54, 48, 42, 43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(\"No files matching the pattern were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read().strip()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.013297080993652344, "tests_passed": true, "error": null}}
{"selected_lines": [52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.009068012237548828, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [49, 42, 46, 50, 51, 54, 44, 52, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(\"No files matching the pattern found in the directory.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 45, 52, 42, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(\"No files matching the given pattern were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.005290985107421875, "tests_passed": true, "error": null}}
{"selected_lines": [51, 48, 49, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r', encoding='utf-8') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0052089691162109375, "tests_passed": true, "error": null}}
{"selected_lines": [49, 52, 54, 43, 47, 46, 53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 45, 43, 49, 52, 51], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('The directory specified does not exist.')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename.split(os.path.sep)[-1], numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.005110979080200195, "tests_passed": true, "error": null}}
{"selected_lines": [53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.014767885208129883, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching the pattern '{file_pattern}' in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.013510942459106445, "tests_passed": true, "error": null}}
{"selected_lines": [52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.009068012237548828, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [46, 43, 52, 42, 51, 44, 53, 54], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError('Specified directory does not exist.')\n    files = glob.glob(f\"{directory}/{file_pattern}\")\n    if not files:\n        raise ValueError(\"No files matching the pattern were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 54, 51, 49, 42, 52, 46, 53, 48, 43, 47, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'The specified directory does not exist: {directory}')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47, 54, 44, 49, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(directory + file_pattern)\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r', encoding='utf-8') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.005231142044067383, "tests_passed": true, "error": null}}
{"selected_lines": [48, 46, 45, 47, 53, 49, 51, 43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'Directory {directory} not found.')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = [pd.read_csv(path, sep=',')['Column'].to_list() for path in files]\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 46, 51, 50, 54, 49, 53, 52, 45, 43, 47], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 43, 54, 52, 47, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 48, 47, 54, 50, 44, 53, 46, 42, 51, 43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 51, 47, 43, 52, 49, 42, 54, 53, 46, 44, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f'Directory {directory} does not exist.')\n    files = glob.glob(directory + file_pattern)\n    if len(files) == 0:\n        raise ValueError(\"No files matching the pattern found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r', encoding='utf-8') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.009068012237548828, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [49, 45, 54, 50, 48, 46, 43, 42, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'The directory {directory} does not exist.')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(\"No files matching the pattern '{}' were found.\".format(file_pattern))\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 44, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 42, 49, 54, 50, 52, 43, 53, 48, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'The specified directory does not exist: {directory}')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 54, 43, 46, 48, 52, 53, 45, 51, 44, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(\"No files matching the pattern were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read().strip().splitlines()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 45, 42, 43, 50, 51, 47], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = [int(match) for match in re.findall(regex, content)]\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.006832122802734375, "tests_passed": true, "error": null}}
{"selected_lines": [53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.014767885208129883, "tests_passed": true, "error": null}}
{"selected_lines": [48, 47, 42, 43, 51, 52, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 46, 54, 45, 50, 47], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(\"No files matching the pattern found in the directory.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read().strip()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.005247831344604492, "tests_passed": true, "error": null}}
{"selected_lines": [49, 48, 44, 43, 46, 53, 54, 52, 47, 50, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'Directory {directory} not found.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.readlines()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 44, 47, 43, 53, 45, 46, 51, 49, 50, 54, 42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError('Specified directory does not exist.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching the pattern '{file_pattern}' in the directory '{directory}'.\")\n    data = [pd.read_csv(path, sep=',')['Column'].to_list() for path in files]\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 52, 48, 50, 47, 46, 43, 42, 51, 53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f'Directory {directory} does not exist.')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(\"No files matching the pattern found in the directory.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 50, 44, 52, 42, 45, 53, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 45, 47, 48, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read().strip().splitlines()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.009068012237548828, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.01277303695678711, "tests_passed": true, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.016765117645263672, "tests_passed": true, "error": null}}
{"selected_lines": [46, 44, 49, 48, 45, 50, 42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(\"No files matching the pattern were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read().strip()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.005593061447143555, "tests_passed": true, "error": null}}
{"selected_lines": [53, 50, 44, 42, 43, 51, 45, 54, 47, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"{directory} directory not found\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.005449056625366211, "tests_passed": true, "error": null}}
{"selected_lines": [43, 53, 48, 42, 46, 50, 45, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 52, 42, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(\"Directory does not exist: {}\".format(directory))\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 53, 54, 50, 46, 48, 44, 52, 47, 51], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(\"No files matching the pattern were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = [int(num) for num in re.findall(regex, content)]\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.013013839721679688, "tests_passed": true, "error": null}}
{"selected_lines": [45, 42, 44, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0052280426025390625, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('The directory specified does not exist.')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.012919187545776367, "tests_passed": true, "error": null}}
{"selected_lines": [46, 42, 49, 43, 45, 53, 48, 51, 47, 52, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 48, 47, 43, 44, 54, 46, 49, 45, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(\"No files found matching the given pattern in the directory.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 52, 51, 50, 48], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = [int(match.group()) for match in re.finditer(regex, content)]\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 48, 43, 53, 51, 45, 42, 47, 44, 52, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 48, 43, 42, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 48, 51, 44, 52, 42, 49, 43, 53, 50, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"{directory} does not exist\")\n    files = glob.glob(f\"{directory}/{file_pattern}\")\n    if len(files) == 0:\n        raise ValueError(\"No files matching the given pattern were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 48, 52, 49, 53, 46, 54, 51, 47, 42, 44, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read().strip()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 43, 46, 48, 52, 54, 50, 42, 45, 53, 44, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'{directory} not found.')\n    files = glob.glob(f\"{directory}{file_pattern}\")\n    if len(files) == 0:\n        raise ValueError(\"No files matching the pattern were found.\")\n    data = []\n    for filename in files:\n        with open(filename) as f:\n            content = file.read().strip()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.016765117645263672, "tests_passed": true, "error": null}}
{"selected_lines": [52, 48, 43, 53, 47, 45, 44, 51, 50, 46, 42, 54], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(\"Directory does not exist: {}\".format(directory))\n    files = glob.glob(f\"{directory}/{file_pattern}\")\n    if len(files) == 0:\n        raise ValueError(\"No files found matching the given pattern in the directory.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.readlines()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.013211965560913086, "tests_passed": true, "error": null}}
{"selected_lines": [49, 52, 44, 46, 53, 51], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(\"No files matching the given pattern were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 53, 49, 42, 46, 44, 45, 54, 47, 52, 51, 48], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory does not exist: {}\".format(directory))\n    files = glob.glob(directory + file_pattern)\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = [int(num) for num in re.findall(regex, content)]\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 48, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(\"No files matching the pattern found in the directory.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.005443096160888672, "tests_passed": true, "error": null}}
{"selected_lines": [53, 46, 50, 44, 49, 48, 43, 51, 47, 54, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"{directory} does not exist\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(\"No files found matching the given pattern in the directory.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read().strip()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 43, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 45, 44, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.004936933517456055, "tests_passed": true, "error": null}}
{"selected_lines": [52, 51, 46, 47, 44, 42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(\"No files matching the pattern '{}' were found in '{}'.\".format(file_pattern, directory))\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = [int(match.group()) for match in re.finditer(regex, content)]\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.009068012237548828, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.009068012237548828, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [46, 44, 51, 49, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 46, 49, 52, 51, 47, 53, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(\"No files matching the pattern were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 51, 49, 42, 50, 44, 54, 47, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError('Directory not found.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 44, 45, 50, 54, 51, 47, 43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0047800540924072266, "tests_passed": true, "error": null}}
{"selected_lines": [54, 42, 43, 46, 51, 50, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching the pattern '{file_pattern}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read().strip()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 50, 42, 46, 48, 43, 44, 54, 51], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory does not exist\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching '{file_pattern}' found in '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = [int(match.group()) for match in re.finditer(regex, content)]\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.003576993942260742, "tests_passed": true, "error": null}}
{"selected_lines": [42, 45, 54, 43, 52, 47, 53, 51, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f'Directory {directory} does not exist.')\n    files = glob.glob(f\"{directory}/{file_pattern}\")\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 44, 48, 46, 47, 51], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = [int(match.group()) for match in re.finditer(regex, content)]\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.004058837890625, "tests_passed": true, "error": null}}
{"selected_lines": [54, 49, 48, 45, 44, 53, 50, 43, 42, 47, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename) as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 47, 50, 42, 46, 49, 45, 51, 43, 44, 48], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0055348873138427734, "tests_passed": true, "error": null}}
{"selected_lines": [43, 53, 52, 42, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError('Directory not found')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 44, 45, 50, 51, 53, 52, 54, 43, 42, 49, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"{directory} directory not found\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(\"No files matching the pattern found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.016765117645263672, "tests_passed": true, "error": null}}
{"selected_lines": [48, 47, 52, 51, 54, 50, 44, 43, 45, 46, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(\"No files matching the pattern found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 42, 47, 52, 51, 49, 54, 48, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.01277303695678711, "tests_passed": true, "error": null}}
{"selected_lines": [46, 53, 45, 43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(\"No files matching the pattern were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.005504131317138672, "tests_passed": true, "error": null}}
{"selected_lines": [48, 46, 43, 50, 42, 51], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found.')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.00473785400390625, "tests_passed": true, "error": null}}
{"selected_lines": [53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.014767885208129883, "tests_passed": true, "error": null}}
{"selected_lines": [54, 51, 43, 50, 45, 49, 52, 53, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(\"No files matching the pattern found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.013211965560913086, "tests_passed": true, "error": null}}
{"selected_lines": [51, 44, 48, 42, 50, 54, 46, 43, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching the pattern '{file_pattern}' in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.013541221618652344, "tests_passed": true, "error": null}}
{"selected_lines": [51], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = [int(num) for num in re.findall(regex, content)]\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.011169910430908203, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.012721061706542969, "tests_passed": true, "error": null}}
{"selected_lines": [48, 46, 45, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.00480198860168457, "tests_passed": true, "error": null}}
{"selected_lines": [52, 51, 54, 42, 46, 45, 48], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 49, 48, 45, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename) as f:\n            content = file.readlines()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 51, 44, 42, 53, 48, 43, 54, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    files = glob.glob(f'{directory}{file_pattern}')\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.readlines()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 46, 49, 42, 47, 52, 48, 51, 45, 54], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError('The directory specified does not exist.')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = [int(match) for match in re.findall(regex, content)]\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 51, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.013541221618652344, "tests_passed": true, "error": null}}
{"selected_lines": [43, 47, 45, 53, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Specified directory does not exist.')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r', encoding='utf-8') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.00483393669128418, "tests_passed": true, "error": null}}
{"selected_lines": [43, 49, 53, 42, 52, 45, 51, 54], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError('Directory not found.')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 54, 44, 42, 51, 43, 53, 50, 45, 47, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.readlines()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50, 53, 47, 43, 51, 48, 44, 42, 54, 46, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    files = glob.glob(directory + file_pattern)\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.016765117645263672, "tests_passed": true, "error": null}}
{"selected_lines": [44, 45, 46, 54, 43, 53, 50, 42, 51], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(\"No files matching the given pattern were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read().strip()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.005837917327880859, "tests_passed": true, "error": null}}
{"selected_lines": [42, 54, 46, 44, 53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(\"No files matching the given pattern were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.005525827407836914, "tests_passed": true, "error": null}}
{"selected_lines": [52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.009068012237548828, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [48, 47, 53, 45, 50, 46, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(\"No files matching the pattern '{}' were found.\".format(file_pattern))\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.013102054595947266, "tests_passed": true, "error": null}}
{"selected_lines": [53, 51, 49, 46, 48, 45, 50, 42, 43, 44, 47], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    files = glob.glob(f\"{directory}{file_pattern}\")\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.readlines()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 51, 47, 52, 50, 53, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 42, 50, 44, 47], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.005446910858154297, "tests_passed": true, "error": null}}
{"selected_lines": [52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.009068012237548828, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [45, 52, 50, 43, 46, 51], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(\"No files matching the pattern '{}' were found.\".format(file_pattern))\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 50, 43, 46, 45, 44, 42, 54, 47, 48], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, encoding=\"utf-8\") as file:\n            content = file.read().strip()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.005175113677978516, "tests_passed": true, "error": null}}
{"selected_lines": [45, 46, 42, 52, 47, 53, 48, 44, 51, 49, 50, 43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 48, 52, 43, 51], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 51, 53, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.005064964294433594, "tests_passed": true, "error": null}}
{"selected_lines": [50, 47, 43, 54, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.readlines()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 45, 46, 43, 53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'Directory {directory} not found')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0062181949615478516, "tests_passed": true, "error": null}}
{"selected_lines": [45, 43, 51, 47, 42, 46, 52, 53, 48], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Specified directory does not exist.')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 50, 47, 51, 45, 48, 54, 43, 46, 44, 53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'The specified directory does not exist: {directory}')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 53, 42, 49, 46, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 49, 48, 51, 53, 43, 54], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'Directory {directory} not found.')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 51, 47, 44, 52, 53, 42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(directory + file_pattern)\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.016625165939331055, "tests_passed": true, "error": null}}
{"selected_lines": [46, 47, 44, 51, 42, 43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError('Directory not found.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = [int(match) for match in re.findall(regex, content)]\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0036211013793945312, "tests_passed": true, "error": null}}
{"selected_lines": [54, 49, 44, 48, 45, 53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 47, 52, 51, 50, 42, 43, 48, 49, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read().strip()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 46, 52, 54], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(\"No files matching the pattern '{}' were found in '{}'.\".format(file_pattern, directory))\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.014767885208129883, "tests_passed": true, "error": null}}
{"selected_lines": [45, 50, 52, 51, 48, 47, 43, 46, 49, 54, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory does not exist\")\n    files = glob.glob(directory + file_pattern)\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 48, 49, 43, 44, 52, 45, 53, 51, 46, 50, 42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError('Directory not found.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, \"r\") as f:\n            content = file.read().strip().splitlines()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 52, 50, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename) as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 44, 42, 51, 50, 46, 53, 49, 54], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(f\"{directory}{file_pattern}\")\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 50, 49, 52, 53, 47, 51, 48, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 52, 47, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(\"No files matching the pattern '{}' were found in '{}'.\".format(file_pattern, directory))\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 43, 42, 47, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.009068012237548828, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [53, 48, 52, 49, 51, 47, 50, 46, 43, 54, 45, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename) as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 49, 43, 46, 48, 45, 42, 47], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory does not exist\")\n    files = glob.glob(directory + file_pattern)\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename) as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 45, 42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.004745960235595703, "tests_passed": true, "error": null}}
{"selected_lines": [46, 42, 44, 53, 43, 47, 51, 54, 52, 50, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(\"The specified directory does not exist!\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 48, 52, 54, 49, 43, 46, 42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError('Directory not found')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching '{file_pattern}' in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 54, 43, 50, 42, 44, 45, 47, 53, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f'The directory {directory} does not exist.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 52, 47, 46, 43, 53, 50, 45, 42, 54, 48], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(\"Directory not found.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(\"No files matching the pattern were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 44, 42, 48, 47, 49, 43, 54], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 51, 47, 48, 53, 43, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'{directory} not found.')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 47, 50, 45, 52, 51, 49, 54, 48, 43, 42, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = [int(match) for match in re.findall(regex, content)]\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 50, 48, 44, 52, 49, 54, 42, 51, 45, 43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f'The specified directory does not exist: {directory}')\n    files = glob.glob(f'{directory}{file_pattern}')\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read().strip()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 46, 50, 48, 51], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.007792949676513672, "tests_passed": true, "error": null}}
{"selected_lines": [47, 46, 51, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching the pattern '{file_pattern}' in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 49, 44, 46, 54, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching '{file_pattern}' in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.014767885208129883, "tests_passed": true, "error": null}}
{"selected_lines": [47, 46, 48, 42, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0054988861083984375, "tests_passed": true, "error": null}}
{"selected_lines": [42, 48, 51, 46, 45, 44, 53, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(\"No files matching the pattern found in the directory.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 53, 50, 48, 44, 51, 49, 47, 42, 52, 43, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f'Directory {directory} not found.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read().strip()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 45, 51, 54, 44, 43, 49, 46, 53, 47, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(\"No files matching the pattern found in the directory.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 49, 50, 51, 43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"{directory} directory not found\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read().strip()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.004899263381958008, "tests_passed": true, "error": null}}
{"selected_lines": [46, 50, 48, 49, 43, 42, 47], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 42, 54, 47, 44, 43, 49, 50, 46, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError('Directory not found.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(\"No files matching the pattern '{}' were found.\".format(file_pattern))\n    data = []\n    for filename in files:\n        with open(filename, encoding=\"utf-8\") as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"{directory} does not exist\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.01328897476196289, "tests_passed": true, "error": null}}
{"selected_lines": [49, 47, 53, 42, 44, 54, 51, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename, encoding=\"utf-8\") as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.004812955856323242, "tests_passed": true, "error": null}}
{"selected_lines": [51, 44, 47, 49, 54, 45, 53, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 45, 54, 51, 44, 48, 53, 52, 50, 42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.014767885208129883, "tests_passed": true, "error": null}}
{"selected_lines": [48, 44, 52, 42, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.016765117645263672, "tests_passed": true, "error": null}}
{"selected_lines": [53, 54, 50, 49, 42, 51, 46, 45, 44, 52, 43, 47], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f'Directory {directory} not found.')\n    files = glob.glob(directory + file_pattern)\n    if not files:\n        raise ValueError(\"No files matching the pattern were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read().strip()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 48, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 48, 46, 44, 54, 52, 47, 49, 42, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 53, 48, 51, 49, 50, 44, 45, 54], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(f\"{directory}/{file_pattern}\")\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching the pattern '{file_pattern}' in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.005385875701904297, "tests_passed": true, "error": null}}
{"selected_lines": [48, 54, 46, 52, 44, 42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 49, 53, 42, 50, 54, 48, 51, 47, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 53, 46, 44, 45, 54, 49, 48, 50, 51, 43, 42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 51, 47, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(\"No files found matching the given pattern in the directory.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.005814075469970703, "tests_passed": true, "error": null}}
{"selected_lines": [53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.014767885208129883, "tests_passed": true, "error": null}}
{"selected_lines": [46, 50, 45, 42, 47, 48, 52, 49, 54], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(\"No files matching the given pattern were found.\")\n    data = []\n    for filename in files:\n        with open(filename) as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 46, 52, 47, 53, 42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 51, 49, 52, 54, 44, 43, 42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r', encoding='utf-8') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 54, 49, 51, 53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.014767885208129883, "tests_passed": true, "error": null}}
{"selected_lines": [52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.009068012237548828, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [52, 54, 47, 42, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 50, 42, 44, 51, 45, 49, 52, 47, 46, 53, 54], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.readlines()\n        numeric_data = [int(match) for match in re.findall(regex, content)]\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 45, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = [int(match.group()) for match in re.finditer(regex, content)]\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.004032135009765625, "tests_passed": true, "error": null}}
{"selected_lines": [45, 42, 44, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0052280426025390625, "tests_passed": true, "error": null}}
{"selected_lines": [50, 43, 45, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'Directory {directory} does not exist.')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.readlines()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 42, 54, 49, 53, 44, 48, 50, 43, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'The directory {directory} does not exist.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 48, 52, 51, 49, 45, 43, 42, 44, 54, 53, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.readlines()\n        numeric_data = re.findall(regex, content)\n        data.append([filename.split(os.path.sep)[-1], numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'The specified directory does not exist: {directory}')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.015726089477539062, "tests_passed": true, "error": null}}
{"selected_lines": [49, 52, 54, 42, 46, 50, 43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory does not exist: {}\".format(directory))\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(\"No files matching the pattern found in the directory.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 54, 48, 52, 50, 53, 51, 44, 46, 47], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('The directory specified does not exist.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.016765117645263672, "tests_passed": true, "error": null}}
{"selected_lines": [48, 53, 42, 47, 44, 54, 49, 51, 46, 50, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(\"No files matching the pattern were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.readlines()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 43, 54, 42, 52, 44, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError('Specified directory does not exist.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 44, 48, 51, 42, 47, 43, 46, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    files = glob.glob(f\"{directory}{file_pattern}\")\n    if len(files) == 0:\n        raise ValueError(\"No files matching the pattern found in the directory.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0055370330810546875, "tests_passed": true, "error": null}}
{"selected_lines": [49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.011302947998046875, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [47, 49, 51, 54, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = [int(match.group()) for match in re.finditer(regex, content)]\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 49, 51, 43, 42, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"{directory} directory not found\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.readlines()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.009068012237548828, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [51, 42, 53, 45, 49, 48, 54, 47, 44, 46, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(f\"{directory}/{file_pattern}\")\n    if not files:\n        raise ValueError(\"No files matching the pattern were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.00603175163269043, "tests_passed": true, "error": null}}
{"selected_lines": [53, 51, 47, 45, 44, 49, 48, 54, 42, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.005052089691162109, "tests_passed": true, "error": null}}
{"selected_lines": [49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, encoding=\"utf-8\") as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.01458287239074707, "tests_passed": true, "error": null}}
{"selected_lines": [42, 50, 45, 46, 47, 52, 43, 49, 51], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"{directory} directory not found\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(\"No files matching the pattern were found.\")\n    data = []\n    for filename in files:\n        with open(filename) as f:\n            content = file.read().strip()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 53, 46, 47, 45, 48, 51], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.005619049072265625, "tests_passed": true, "error": null}}
{"selected_lines": [45, 43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"The specified directory does not exist!\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.006282806396484375, "tests_passed": true, "error": null}}
{"selected_lines": [52, 43, 51, 46, 48, 42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError('Directory not found.')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(\"No files matching the pattern were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = [int(x) for x in re.findall(regex, content)]\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 45, 50, 47, 53, 44, 54, 52, 42, 51, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read().strip()\n        numeric_data = [int(num) for num in re.findall(regex, content)]\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 44, 51, 42, 46, 48, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(\"No files matching the pattern found in the directory.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.005064964294433594, "tests_passed": true, "error": null}}
{"selected_lines": [44, 53, 45, 49, 51, 42, 52, 50, 54], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.013211965560913086, "tests_passed": true, "error": null}}
{"selected_lines": [54, 50, 45, 51, 42, 48, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 51, 44, 46, 43, 48, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = [int(match.group()) for match in re.finditer(regex, content)]\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 45, 53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 43, 45, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = [int(match.group()) for match in re.finditer(regex, content)]\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 48, 42, 52, 53, 50, 44, 51], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(f\"{directory}{file_pattern}\")\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read().strip().splitlines()\n        numeric_data = [int(match.group()) for match in re.finditer(regex, content)]\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.014767885208129883, "tests_passed": true, "error": null}}
{"selected_lines": [54, 44, 49, 43, 51, 42, 45, 50, 47, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found')\n    files = glob.glob(directory + file_pattern)\n    if len(files) == 0:\n        raise ValueError(\"No files matching the pattern found in the directory.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read().strip()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.005033969879150391, "tests_passed": true, "error": null}}
{"selected_lines": [49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.011302947998046875, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [48, 54, 51, 49, 53, 47, 50, 43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'The directory {directory} does not exist.')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 46, 52, 50, 51, 42, 45, 44, 43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f'The directory {directory} does not exist.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(\"No files matching the pattern were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = [int(num) for num in re.findall(regex, content)]\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 52, 47, 53, 44, 45, 54], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 52, 51, 45, 46, 42, 48, 43, 54, 44, 47], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    files = glob.glob(directory + file_pattern)\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 47, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.014767885208129883, "tests_passed": true, "error": null}}
{"selected_lines": [43, 47, 46, 51, 42, 54, 44, 49, 45, 48, 53, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Specified directory does not exist.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 53, 43, 52, 44, 50, 48, 49, 51, 54], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"The specified directory does not exist!\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(\"No files matching the given pattern were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0061800479888916016, "tests_passed": true, "error": null}}
{"selected_lines": [49, 47, 46, 42, 44, 52, 43, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Specified directory does not exist.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.011302947998046875, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [52, 46, 44, 42, 53, 51, 49, 48, 54, 50, 45, 43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f'Directory {directory} not found')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.readlines()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 47, 46, 51, 54, 43, 45, 53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.005235910415649414, "tests_passed": true, "error": null}}
{"selected_lines": [46, 44, 48, 51, 53, 52, 43, 49, 47], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'{directory} not found.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching the pattern '{file_pattern}' in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.011302947998046875, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [42, 46, 48, 54, 45, 43, 49, 44, 53, 52, 51], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError('Directory not found.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching the pattern '{file_pattern}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 53, 48, 43, 49, 51, 42, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(\"Directory not found.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 53, 49, 54, 51, 43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory does not exist: {}\".format(directory))\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 52, 49, 50, 51, 45, 53, 47, 54, 48, 44, 42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 44, 54, 42, 48], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError('Directory not found')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0060689449310302734, "tests_passed": true, "error": null}}
{"selected_lines": [44, 47, 46, 50, 43, 54, 49, 45, 51, 52, 42, 53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'Directory {directory} not found.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 52, 42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 42, 44, 49, 54, 51, 46, 45, 52, 47, 43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename) as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 48, 53, 52, 45, 47, 51], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'The specified directory does not exist: {directory}')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = [int(match.group()) for match in re.finditer(regex, content)]\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 54, 42, 44, 52, 51, 46, 49, 47, 45, 48], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching '{file_pattern}' in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = [int(match) for match in re.findall(regex, content)]\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 46, 44, 53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(directory + file_pattern)\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.005084037780761719, "tests_passed": true, "error": null}}
{"selected_lines": [54, 51, 52, 48, 43, 53, 49, 45, 47, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 54, 44, 53, 48, 51, 43, 45, 46, 42, 47, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory does not exist: {}\".format(directory))\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 42, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'{directory} not found.')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching the pattern '{file_pattern}' in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.004960060119628906, "tests_passed": true, "error": null}}
{"selected_lines": [42, 52, 47, 50, 43, 53, 51, 46, 49, 54, 48, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"The specified directory does not exist!\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.013146162033081055, "tests_passed": true, "error": null}}
{"selected_lines": [53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.014767885208129883, "tests_passed": true, "error": null}}
{"selected_lines": [45, 42, 47, 53, 48, 54, 50, 49, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename) as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.016765117645263672, "tests_passed": true, "error": null}}
{"selected_lines": [49, 48, 43, 53, 46, 42, 44, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(\"No files matching the pattern found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.readlines()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.012202978134155273, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.01318669319152832, "tests_passed": true, "error": null}}
{"selected_lines": [50, 47, 49, 42, 44, 54, 45, 43, 48], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(\"Directory does not exist\")\n    files = glob.glob(directory + file_pattern)\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 43, 44, 48, 53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('The directory specified does not exist.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r', encoding='utf-8') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.005354166030883789, "tests_passed": true, "error": null}}
{"selected_lines": [52, 46, 50, 43, 51, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found.')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 43, 42, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.004926919937133789, "tests_passed": true, "error": null}}
{"selected_lines": [54, 44, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(directory + file_pattern)\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.005696773529052734, "tests_passed": true, "error": null}}
{"selected_lines": [53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.014767885208129883, "tests_passed": true, "error": null}}
{"selected_lines": [50, 54, 53, 42, 43, 52, 49, 51], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = [int(x) for x in re.findall(regex, content)]\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.014767885208129883, "tests_passed": true, "error": null}}
{"selected_lines": [52, 42, 49, 50, 46, 47, 45, 54], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(\"No files matching the pattern were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 46, 45, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(\"No files matching the pattern found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read().strip()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 49, 48, 43, 42, 44, 51, 50, 52, 54, 53, 47], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f'The specified directory does not exist: {directory}')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read().strip()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching '{file_pattern}' found in '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.014414787292480469, "tests_passed": true, "error": null}}
{"selected_lines": [50, 46, 54, 51, 49, 48, 47, 44, 53, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(\"No files matching the pattern found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 44, 47, 52, 54, 48, 51, 53, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 44, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0052258968353271484, "tests_passed": true, "error": null}}
{"selected_lines": [43, 53, 52, 51, 49, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, encoding=\"utf-8\") as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 48, 47, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(f\"{directory}{file_pattern}\")\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 53, 54, 48, 42, 52, 49, 50, 46, 44, 45, 43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError('Specified directory does not exist.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 53, 49, 48, 52, 46, 51, 47, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, encoding=\"utf-8\") as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 47, 45, 43, 52, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 47, 46, 53, 49, 43, 42, 48, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 43, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'Directory {directory} not found.')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.013142108917236328, "tests_passed": true, "error": null}}
{"selected_lines": [42, 43, 50, 47, 51, 48, 44, 53, 54], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.005549192428588867, "tests_passed": true, "error": null}}
{"selected_lines": [45, 43, 49, 44, 42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'Directory {directory} not found')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0052471160888671875, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(\"No files matching the pattern '{}' were found in '{}'.\".format(file_pattern, directory))\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.013618230819702148, "tests_passed": true, "error": null}}
{"selected_lines": [53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.014767885208129883, "tests_passed": true, "error": null}}
{"selected_lines": [51, 47, 42, 52, 53, 43, 54, 45, 50, 46, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'Directory {directory} does not exist.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(\"No files found matching the given pattern in the directory.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.readlines()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 53, 50, 42, 54, 49, 47, 51, 46, 48, 45, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(directory + file_pattern)\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 53, 49, 44, 47, 52, 43, 42, 45, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 54, 51, 44, 49, 52, 47, 46, 42, 48, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError('Directory not found')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = [int(match) for match in re.findall(regex, content)]\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 49, 42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename) as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 52, 42, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 54, 50, 52, 45, 51, 46, 42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 47, 45, 53, 43, 54, 50, 44, 48, 42, 49, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching the pattern '{file_pattern}' in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read().strip().splitlines()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 52, 47, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 46, 47, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(\"No files found matching the given pattern in the directory.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 47, 51, 42, 49, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(\"No files matching the pattern '{}' were found.\".format(file_pattern))\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 43, 47, 45, 50, 51, 49, 53, 48], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 51, 49, 48, 53, 50, 43, 46, 42, 47], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError('Directory not found')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, encoding=\"utf-8\") as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.004805803298950195, "tests_passed": true, "error": null}}
{"selected_lines": [49, 48, 45, 42, 43, 46, 44, 54], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching '{file_pattern}' in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 42, 51, 43, 48, 45, 53, 54, 52, 47, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory does not exist: {}\".format(directory))\n    files = glob.glob(f\"{directory}{file_pattern}\")\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"{directory} directory not found\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.012950897216796875, "tests_passed": true, "error": null}}
{"selected_lines": [44, 45, 53, 52, 46, 43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename) as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 52, 47, 49, 44, 42, 54, 43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(\"Directory does not exist: {}\".format(directory))\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 43, 51, 46, 49, 48, 47, 53, 45, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'Directory {directory} does not exist.')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.readlines()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 42, 44, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0052280426025390625, "tests_passed": true, "error": null}}
{"selected_lines": [46, 42, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(\"No files matching the pattern '{}' were found in '{}'.\".format(file_pattern, directory))\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0046539306640625, "tests_passed": true, "error": null}}
{"selected_lines": [51, 48, 52, 47, 43, 49, 46, 42, 45, 53, 44, 54], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'The specified directory does not exist: {directory}')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 44, 43, 52, 49, 42, 53, 47], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('The directory specified does not exist.')\n    files = glob.glob(f\"{directory}/{file_pattern}\")\n    if not files:\n        raise ValueError(\"No files matching the pattern '{}' were found in '{}'.\".format(file_pattern, directory))\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 44, 45, 43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0057790279388427734, "tests_passed": true, "error": null}}
{"selected_lines": [47, 51, 53, 43, 42, 48, 50, 45, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = [int(match) for match in re.findall(regex, content)]\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0031642913818359375, "tests_passed": true, "error": null}}
{"selected_lines": [47, 53, 52, 43, 54], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"{directory} directory not found\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 43, 51, 53, 50, 52, 46, 44, 42, 45, 54, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError('Directory not found.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 43, 45, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError('Specified directory does not exist.')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read().strip().splitlines()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 48, 49, 43, 46, 52, 53, 54], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Specified directory does not exist.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 43, 53, 44, 46, 45, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'Directory {directory} does not exist.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.013042211532592773, "tests_passed": true, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.016765117645263672, "tests_passed": true, "error": null}}
{"selected_lines": [48, 44, 49, 42, 51, 52, 47, 43, 54], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 52, 45, 49, 53, 48, 47, 51], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 43, 54, 50, 49, 44, 51, 47, 42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f'The directory {directory} does not exist.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.readlines()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 42, 46, 44, 43, 54, 48, 45, 52, 49, 51, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f'The directory {directory} does not exist.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching '{file_pattern}' in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read().strip()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 51, 45, 53, 47, 48, 49, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename) as f:\n            content = file.read()\n        numeric_data = [int(match) for match in re.findall(regex, content)]\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 50, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read().strip()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.005690097808837891, "tests_passed": true, "error": null}}
{"selected_lines": [44, 52, 47, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename) as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 54, 42, 49, 47, 50, 53, 43, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError('Directory not found')\n    files = glob.glob(f\"{directory}{file_pattern}\")\n    if not files:\n        raise ValueError(\"No files matching the pattern were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 48, 51, 47, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(\"No files matching the pattern '{}' were found in '{}'.\".format(file_pattern, directory))\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.004994869232177734, "tests_passed": true, "error": null}}
{"selected_lines": [52, 53, 42, 51, 44, 43, 54, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.014767885208129883, "tests_passed": true, "error": null}}
{"selected_lines": [54, 47, 46, 49, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(\"No files matching the pattern were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 52, 51, 50, 43, 44, 45, 48, 47, 42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    files = glob.glob(f'{directory}{file_pattern}')\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read().strip().splitlines()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 48, 51, 44, 50, 46, 52, 49, 45, 54], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename) as f:\n            content = file.readlines()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 53, 48, 45, 44, 43, 47, 54, 51, 52, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'The directory {directory} does not exist.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching the pattern '{file_pattern}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = [int(match.group()) for match in re.finditer(regex, content)]\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename.split(os.path.sep)[-1], numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.01320195198059082, "tests_passed": true, "error": null}}
{"selected_lines": [50, 46, 54, 48, 51, 47, 42, 52, 43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f'The directory {directory} does not exist.')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 49, 42, 48, 52, 47, 50, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 43, 49, 54, 46, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found.')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 45, 42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.004745960235595703, "tests_passed": true, "error": null}}
{"selected_lines": [43, 52, 50, 51], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory does not exist: {}\".format(directory))\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read().strip()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 46, 43, 48, 50, 52, 53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(\"No files matching the pattern found in the directory.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 43, 45, 46, 51], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Specified directory does not exist.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.009763956069946289, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Specified directory does not exist.')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.01296091079711914, "tests_passed": true, "error": null}}
{"selected_lines": [52, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r', encoding='utf-8') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.013042211532592773, "tests_passed": true, "error": null}}
{"selected_lines": [44, 46, 43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory does not exist\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(\"No files matching the pattern were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.006457090377807617, "tests_passed": true, "error": null}}
{"selected_lines": [53, 46, 49, 51, 47, 45, 48, 44, 43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.005946159362792969, "tests_passed": true, "error": null}}
{"selected_lines": [44, 45, 52, 42, 49, 50, 46, 47, 54, 48, 53, 43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r', encoding='utf-8') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 49, 47], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 53, 52, 43, 44, 54, 51, 42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory does not exist: {}\".format(directory))\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 48, 42, 54, 46, 51, 53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(\"No files matching the pattern were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read().strip().splitlines()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 44, 46, 49, 51, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(f\"{directory}{file_pattern}\")\n    if not files:\n        raise ValueError(f\"No files found matching '{file_pattern}' in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename.split(os.path.sep)[-1], numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 45, 42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.004745960235595703, "tests_passed": true, "error": null}}
{"selected_lines": [43, 50, 45, 46, 53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"{directory} directory not found\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0059359073638916016, "tests_passed": true, "error": null}}
{"selected_lines": [53, 48, 52, 44, 43, 50, 46, 45, 54, 49, 47], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    files = glob.glob(directory + file_pattern)\n    if not files:\n        raise ValueError(\"No files matching the pattern found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 54, 45, 50, 43, 53, 48, 51], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.readlines()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 44, 47, 54], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'Directory {directory} not found.')\n    files = glob.glob(f\"{directory}/{file_pattern}\")\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.005339145660400391, "tests_passed": true, "error": null}}
{"selected_lines": [52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.009068012237548828, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [48, 51, 49, 47, 44, 53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 54, 51, 46, 53, 50, 49, 47, 52, 42, 45, 48], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.009068012237548828, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [43, 53, 50, 42, 47, 48, 54, 51], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError('Directory not found')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.00507807731628418, "tests_passed": true, "error": null}}
{"selected_lines": [42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.013013839721679688, "tests_passed": true, "error": null}}
{"selected_lines": [49, 45, 54, 47, 48, 50, 43, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 50, 49, 43, 47, 42, 53, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('The directory specified does not exist.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read().strip()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 42, 43, 53, 44, 46, 45, 47, 51, 48, 49, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    files = glob.glob(directory + file_pattern)\n    if not files:\n        raise ValueError(f\"No files found matching the pattern '{file_pattern}' in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = [int(x) for x in re.findall(regex, content)]\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 46, 45, 42, 50, 47, 52, 51, 49, 53, 54, 43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'{directory} not found.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(\"No files matching the pattern '{}' were found.\".format(file_pattern))\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 49, 44, 48, 46, 50, 53, 52, 51, 43, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(\"Directory not found.\")\n    files = glob.glob(f\"{directory}{file_pattern}\")\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching the pattern '{file_pattern}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read().strip().splitlines()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 43, 49, 50, 44, 51], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'Directory {directory} does not exist.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.005216121673583984, "tests_passed": true, "error": null}}
{"selected_lines": [49, 45, 43, 44, 53, 48, 47, 54, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 48, 42, 50, 52, 44, 46, 45, 49, 53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Specified directory does not exist.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(\"No files matching the pattern were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 44, 50, 51, 49, 43, 47], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 52, 46, 51, 54, 49, 53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(\"No files matching the pattern found.\")\n    data = []\n    for filename in files:\n        with open(filename, encoding=\"utf-8\") as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 43, 52, 45, 44, 49, 46, 47, 51, 50, 54, 53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read().strip()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 49, 44, 48, 50, 54, 53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found')\n    files = glob.glob(directory + file_pattern)\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 54, 43, 47, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.readlines()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 44, 53, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(directory + file_pattern)\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 42, 51, 44, 47, 50, 45, 46, 49, 43, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found.')\n    files = glob.glob(directory + file_pattern)\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read().strip()\n        numeric_data = [int(match) for match in re.findall(regex, content)]\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 46, 54], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(f\"{directory}{file_pattern}\")\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.005251169204711914, "tests_passed": true, "error": null}}
{"selected_lines": [49, 46, 45, 42, 54, 48, 47], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(\"No files matching the pattern found in the directory.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.013211965560913086, "tests_passed": true, "error": null}}
{"selected_lines": [42, 43, 50, 47, 51, 48, 44, 53, 54], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.005549192428588867, "tests_passed": true, "error": null}}
{"selected_lines": [45, 48, 54, 50, 47, 43, 42, 46, 51, 44, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read().strip().splitlines()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.014767885208129883, "tests_passed": true, "error": null}}
{"selected_lines": [52, 46, 43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.009068012237548828, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.013211965560913086, "tests_passed": true, "error": null}}
{"selected_lines": [53, 45, 54, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 44, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 46, 49, 47, 44, 50, 43, 52, 51, 53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching '{file_pattern}' found in '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 54, 53, 44, 43, 47, 51, 45, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Specified directory does not exist.')\n    files = glob.glob(directory + file_pattern)\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 52, 46, 42, 48, 47, 51, 44, 43, 53, 54], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"The specified directory does not exist!\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching the pattern '{file_pattern}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(\"No files found matching the given pattern in the directory.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.013054132461547852, "tests_passed": true, "error": null}}
{"selected_lines": [54, 51, 52, 53, 50, 49, 45, 47, 48, 43, 44, 42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError('Directory not found')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 49, 44, 48, 52, 42, 47, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError('Directory not found.')\n    files = glob.glob(directory + file_pattern)\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 54, 47, 46, 52, 48, 43, 53, 49, 45, 42, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    files = glob.glob(directory + file_pattern)\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching the pattern '{file_pattern}' in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read().strip()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 53, 51, 49, 44, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, \"r\") as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 53, 48, 42, 46, 47, 51, 52, 45, 54, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 43, 54, 44, 53, 52, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found.')\n    files = glob.glob(f'{directory}{file_pattern}')\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 47, 44, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0052258968353271484, "tests_passed": true, "error": null}}
{"selected_lines": [45, 42, 44, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0052280426025390625, "tests_passed": true, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(f\"{directory}/{file_pattern}\")\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.01627373695373535, "tests_passed": true, "error": null}}
{"selected_lines": [42, 44, 46, 49, 50, 52, 51, 47, 43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'The directory {directory} does not exist.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(\"No files matching the pattern '{}' were found.\".format(file_pattern))\n    data = []\n    for filename in files:\n        with open(filename) as f:\n            content = file.read().strip()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 43, 48, 47, 54, 45, 42, 52, 49, 46, 53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"{directory} directory not found\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(\"No files matching the pattern '{}' were found in '{}'.\".format(file_pattern, directory))\n    data = []\n    for filename in files:\n        with open(filename, \"r\") as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename.split(os.path.sep)[-1], numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 53, 42, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.014767885208129883, "tests_passed": true, "error": null}}
{"selected_lines": [44, 42, 54, 48, 43, 47, 46, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0047931671142578125, "tests_passed": true, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.016765117645263672, "tests_passed": true, "error": null}}
{"selected_lines": [45, 49, 50, 51, 52, 46, 47], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 46, 43, 49, 48, 47, 53, 50, 52, 54], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f'Directory {directory} not found.')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename) as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 50, 48, 43, 44, 45, 51, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError('Directory not found.')\n    files = glob.glob(f'{directory}{file_pattern}')\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read().strip()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.005310773849487305, "tests_passed": true, "error": null}}
{"selected_lines": [45, 52, 46, 53, 47, 44, 42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in '{directory}'.\")\n    data = [pd.read_csv(path, sep=',')['Column'].to_list() for path in files]\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 43, 44, 47, 52, 54, 48], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"The specified directory does not exist!\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.013013839721679688, "tests_passed": true, "error": null}}
{"selected_lines": [52, 43, 46, 42, 51, 54, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(\"Directory does not exist\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 48, 43, 52, 53, 51, 50, 49, 47, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'{directory} not found.')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = [int(x) for x in re.findall(regex, content)]\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 54, 44, 42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.004890918731689453, "tests_passed": true, "error": null}}
{"selected_lines": [48, 49, 42, 52, 54], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.013042211532592773, "tests_passed": true, "error": null}}
{"selected_lines": [45, 50, 48, 47, 42, 52, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.014767885208129883, "tests_passed": true, "error": null}}
{"selected_lines": [45, 42, 46, 43, 54, 48, 52, 51, 44, 49, 47, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(\"No files matching the pattern found in the directory.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 48, 50, 44, 49, 53, 45, 51, 54, 47, 42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(\"No files found matching the given pattern in the directory.\")\n    data = []\n    for filename in files:\n        with open(filename) as f:\n            content = file.read()\n        numeric_data = [int(match) for match in re.findall(regex, content)]\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 48, 44, 49, 47, 46, 43, 53, 51, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"The specified directory does not exist!\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 45, 49, 52, 48], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename) as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.014767885208129883, "tests_passed": true, "error": null}}
{"selected_lines": [47, 44, 48, 54, 45, 43, 50, 42, 51, 53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError('Directory not found')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read().strip().splitlines()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.014767885208129883, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.01318669319152832, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.013297080993652344, "tests_passed": true, "error": null}}
{"selected_lines": [53, 48, 54, 52, 50, 49, 45, 43, 51], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Specified directory does not exist.')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 44, 43, 48, 53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 52, 48, 44, 51, 42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 44, 50, 43, 54, 45, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 44, 45, 49, 48, 50, 42, 53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.009068012237548828, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [51, 46, 44, 53, 50, 48, 45, 42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = [int(match.group()) for match in re.finditer(regex, content)]\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0072498321533203125, "tests_passed": true, "error": null}}
{"selected_lines": [45, 42, 49, 50, 43, 47], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 52, 48, 47, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 43, 45, 51, 47, 44, 52, 49, 42, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    files = glob.glob(f\"{directory}{file_pattern}\")\n    if not files:\n        raise ValueError(\"No files matching the pattern found in the directory.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.readlines()\n        numeric_data = [int(match) for match in re.findall(regex, content)]\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 46, 52, 49, 51, 43, 48, 45, 47, 42, 53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 50, 42, 47, 54, 48, 43, 45, 52, 49, 44, 51], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.014767885208129883, "tests_passed": true, "error": null}}
{"selected_lines": [49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.011302947998046875, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [48, 44, 42, 54, 47, 52, 50, 51], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 44, 43, 53, 48, 52, 50, 51, 46, 54], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 50, 48, 46, 47, 52, 54], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(\"No files matching the pattern '{}' were found in '{}'.\".format(file_pattern, directory))\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 48, 43, 53, 52, 50, 51, 44, 49, 45, 42], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory '{directory}' not found.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read().strip()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.014767885208129883, "tests_passed": true, "error": null}}
{"selected_lines": [50, 47, 44, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0052258968353271484, "tests_passed": true, "error": null}}
{"selected_lines": [45, 49, 47, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = [pd.read_csv(path, sep=',')['Column'].to_list() for path in files]\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read().strip()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 54, 43, 49, 46, 50, 45, 51, 53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found.')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, \"r\") as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 42, 49, 52, 44, 54, 43, 51, 50, 46, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching '{file_pattern}' in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [49, 51, 47, 48, 43, 42, 54, 44, 50, 46, 52, 53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"{directory} directory not found\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(\"No files matching the given pattern were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = [int(num) for num in re.findall(regex, content)]\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 53, 47, 42, 48, 51, 49, 54, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(f\"{directory}/{file_pattern}\")\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename) as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 52, 53, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 48, 51, 50, 52, 42, 53, 49, 44, 54, 43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(\"Directory not found.\")\n    files = glob.glob(f\"{directory}/{file_pattern}\")\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [46, 53, 54, 43, 42, 47, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f'{directory} not found.')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.005256175994873047, "tests_passed": true, "error": null}}
{"selected_lines": [46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching the pattern '{file_pattern}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.013466835021972656, "tests_passed": true, "error": null}}
{"selected_lines": [54, 42, 50, 45, 44, 49, 53, 43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(\"The specified directory does not exist!\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.readlines()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 47, 52, 54, 50, 42, 46, 48, 51], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = [int(x) for x in re.findall(regex, content)]\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [48, 46, 49, 45, 42, 54, 51, 52, 50, 47, 53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'The directory {directory} does not exist.')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.013865947723388672, "tests_passed": true, "error": null}}
{"selected_lines": [53, 44, 46, 42, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.004984617233276367, "tests_passed": true, "error": null}}
{"selected_lines": [52, 45, 47, 51, 54], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [51, 50, 49, 43, 54, 53, 45, 52, 44, 47, 48, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'The specified directory does not exist: {directory}')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(\"No files matching the pattern were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read().strip()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [47, 50, 51, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(\"No files matching the pattern were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = [int(x) for x in re.findall(regex, content)]\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0037376880645751953, "tests_passed": true, "error": null}}
{"selected_lines": [42, 46, 44, 51, 53], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.005275249481201172, "tests_passed": true, "error": null}}
{"selected_lines": [43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'The directory {directory} does not exist.')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.013865947723388672, "tests_passed": true, "error": null}}
{"selected_lines": [50, 53, 42, 52, 43, 51, 54, 48, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory not found: {directory}\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(\"No files matching the pattern were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.readlines()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 44, 52, 50, 51, 47, 49, 43, 42, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(\"No files matching the given pattern were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = [int(x) for x in re.findall(regex, content)]\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 52, 44, 43, 45, 50, 49, 51], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found')\n    files = glob.glob(f\"{directory}/{file_pattern}\")\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [45, 42, 44, 50], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0052280426025390625, "tests_passed": true, "error": null}}
{"selected_lines": [49, 51, 47, 46, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(f\"{directory}{file_pattern}\")\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 49, 45, 42, 51, 48, 50, 46, 47, 52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, encoding=\"utf-8\") as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.008790016174316406, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [54, 47, 52, 45, 50, 49, 44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read().strip().splitlines()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.009068012237548828, "tests_passed": false, "error": "IndexError"}}
{"selected_lines": [48, 53, 52, 50, 51, 44, 43, 54, 49, 47], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory does not exist\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.01318669319152832, "tests_passed": true, "error": null}}
{"selected_lines": [51, 49, 47, 50, 54, 46, 53, 45], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r', encoding='utf-8') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.005157947540283203, "tests_passed": true, "error": null}}
{"selected_lines": [49, 44, 53, 47, 46, 51], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"The directory '{directory}' does not exist.\")\n    files = glob.glob(f\"{directory}{file_pattern}\")\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.016038894653320312, "tests_passed": true, "error": null}}
{"selected_lines": [51, 43, 53, 44, 49, 46, 47, 42, 50, 52, 45, 48], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f'Directory {directory} not found.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching '{file_pattern}' were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as f:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 54, 53, 45, 43, 50, 47, 51, 42, 44, 46, 48], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if len(files) == 0:\n        raise ValueError(f\"No files matching '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [50, 52, 53, 43, 48], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError('Directory not found')\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read().strip().splitlines()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [53, 43, 48, 42, 44, 50, 47, 52, 51, 46], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError(f'Directory {directory} not found.')\n    files = glob.glob(os.path.join(directory, file_pattern))\n    if not files:\n        raise ValueError(f\"No files matching the pattern '{file_pattern}' found in the directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = [int(match) for match in re.findall(regex, content)]\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [54, 45, 43, 51], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(\"Directory not found\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([os.path.basename(filename), numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.006118059158325195, "tests_passed": true, "error": null}}
{"selected_lines": [54, 47, 48, 43, 46, 53, 42, 51, 52, 50, 49], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.exists(directory):\n        raise FileNotFoundError(f\"Directory {directory} does not exist.\")\n    files = natsort.natsorted(glob.glob(os.path.join(directory, file_pattern)))\n    if not files:\n        raise ValueError(\"No files matching the pattern were found.\")\n    data = []\n    for filename in files:\n        with open(filename, 'r') as file:\n            content = file.read()\n        numeric_data = re.findall(regex, content)\n        data.append([filename, numeric_data])\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [52, 49, 53, 45, 42, 51, 44, 48, 43], "result": {"code": "import re\nimport os\nimport glob\nimport natsort\nimport pandas as pd\n\ndef task_func(directory='./', file_pattern='*.txt', regex=r'([0-9]+)'):\n    \"\"\"\n    Extract numeric data from all text files matching a given pattern in a directory and compile it into a Pandas DataFrame.\n\n    Parameters:\n    - directory (str): The directory to search for text files. Default is './'.\n    - file_pattern (str): The glob pattern to match text files. Default is '*.txt'.\n    - regex (str): The regular expression used to extract numeric data. Default is r'([0-9]+)'.\n\n    Returns:\n    - DataFrame: A pandas DataFrame with two columns: 'Filename' and 'Numeric Data'. Each row represents a file and its extracted numeric data.\n\n    Raises:\n    - FileNotFoundError: If the specified directory does not exist.\n    - ValueError: If no files matching the pattern are found.\n\n    Requirements:\n    - re\n    - os\n    - glob\n    - natsort\n    - pandas\n\n    Example:\n    >>> data_dir = './data/'\n    >>> create_dummy_files(data_dir)\n    >>> df = task_func('./data/', '*.txt', r'([0-9]+)')\n    >>> tear_down_files(data_dir)\n    >>> print(df)\n              Filename Numeric Data\n    0        empty.txt           []\n    1        file1.txt   [123, 456]\n    2        file2.txt        [789]\n    3        mixed.txt   [123, 456]\n    4  non_numeric.txt           []\n    \"\"\"\n    if not os.path.isdir(directory):\n        raise FileNotFoundError('The directory specified does not exist.')\n    files = glob.glob(directory + file_pattern)\n    if len(files) == 0:\n        raise ValueError(f\"No files found matching pattern '{file_pattern}' in directory '{directory}'.\")\n    data = []\n    for filename in files:\n        with open(filename, encoding=\"utf-8\") as file:\n            content = file.read()\n        numeric_data = [int(num) for num in re.findall(regex, content)]\n        data.append((filename, numeric_data))\n    df = pd.DataFrame(data, columns=['Filename', 'Numeric Data'])\n    return df", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
