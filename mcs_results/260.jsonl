{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [39, 42, 32, 34, 40, 35, 33], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data, indent=4))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0093841552734375, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [33, 34, 38, 43, 35, 41, 39, 37, 42], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r+') as json_file:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 37, 33, 32, 42, 41, 40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file) as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f'{directory}/*.json')\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.009259939193725586, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.013105154037475586, "tests_passed": false, "error": "io.UnsupportedOperation"}}
{"selected_lines": [41, 43, 32, 38, 37, 36, 39, 35, 42, 33, 34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f\"{directory}/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.00438237190246582, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.013105154037475586, "tests_passed": false, "error": "io.UnsupportedOperation"}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.010384321212768555, "tests_passed": true, "error": null}}
{"selected_lines": [40, 43, 35, 39, 42, 33, 38, 32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('./' + directory + '/*.json')\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data, indent=4))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40, 42, 43, 39, 35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)  # reset the file pointer to the beginning\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.011023283004760742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 32, 43, 36, 39, 34, 41, 40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f\"{directory}/*.json\")\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()  # Erase the existing JSON content\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [43, 37, 38, 32, 42, 39, 40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0) # Rewrite file contents from beginning\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0038542747497558594, "tests_passed": true, "error": null}}
{"selected_lines": [39, 33, 41, 40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 39, 40, 36, 42, 33, 35, 34, 32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r') as file_:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + '/**/*.json')\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.007534980773925781, "tests_passed": true, "error": null}}
{"selected_lines": [42, 39, 33, 32, 40, 34, 37], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)  # Reset the file pointer\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0036301612854003906, "tests_passed": true, "error": null}}
{"selected_lines": [43, 33, 41, 42, 36, 39, 32, 35, 34, 38, 40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 36, 42, 33, 41, 39, 35, 40, 32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0) # Rewrite file contents from beginning\n                f.write(json.dumps(data))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 42, 43, 33, 41, 35, 40, 36, 34, 39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0037908554077148438, "tests_passed": true, "error": null}}
{"selected_lines": [32, 42, 40, 39, 43, 38, 36, 41, 37, 35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as file_:\n            data = json.load(f)\n            if not data.get(KEY):\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 40, 39, 43, 37, 35, 33, 32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f'{directory}/*.json')\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if not KEY in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 39, 43, 40, 36, 41, 35, 37, 34, 42], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)  # Reset the file pointer\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as json_file:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.009605884552001953, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f\"{directory}/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.00933074951171875, "tests_passed": true, "error": null}}
{"selected_lines": [43, 35, 41, 32, 33], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('**/*.json', recursive=True)\n    updated_files = []\n    for file in files:\n        with open(file, 'r') as file_:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, separators=(', ', ': '), sort_keys=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.00834798812866211, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0093841552734375, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [37, 39, 34, 40, 41, 35, 43, 42, 33, 32, 36], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('./' + directory + '/*.json')\n    updated_files = 0\n    for file in files:\n        with open(file) as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)  # reset the file pointer to the beginning of the file\n                f.write(json.dumps(data))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 32, 39, 36, 34, 37, 43], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if not data.get(KEY):\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, separators=(', ', ': '), sort_keys=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0044171810150146484, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 37, 35, 40, 39, 42, 38, 43], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as json_file:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)  # Move the file pointer to the beginning of the file\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, ensure_ascii=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.009418964385986328, "tests_passed": true, "error": null}}
{"selected_lines": [33, 43, 38, 37, 36, 35, 41, 40, 34, 42], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for filepath in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '**/*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0066111087799072266, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, ensure_ascii=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.009418964385986328, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + '/**/*.json', recursive=True)\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.009073019027709961, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0) # Rewrite the file\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008636951446533203, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [42, 41, 32, 35, 38, 33, 37, 43, 34, 40, 36], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008520841598510742, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('./' + directory + '/*.json')\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as json_file:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 42, 37, 33, 39, 36, 32, 35, 43, 34, 41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('./' + directory + '/*.json')\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0) # Rewrite the file\n                f.truncate()\n                json.dump(data, f, indent=4, separators=(', ', ': '), sort_keys=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0017507076263427734, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 33, 41, 39, 38, 37, 32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if not KEY in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0093841552734375, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [37, 41, 42, 33, 32, 38, 43, 35, 39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if not KEY in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, ensure_ascii=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 33, 35, 37, 42, 34, 32, 39, 41, 43], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '**/*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as json_file:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, separators=(',', ': '))\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 42, 33, 37, 41, 43, 35, 39, 32, 34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f'{directory}/*.json')\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=2, sort_keys=True)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.00501704216003418, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0073320865631103516, "tests_passed": false, "error": "json.decoder.JSONDecodeError"}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as json_file:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.009605884552001953, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.013105154037475586, "tests_passed": false, "error": "io.UnsupportedOperation"}}
{"selected_lines": [32, 42, 35, 39, 41, 36, 38, 37], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f\"{directory}/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 39, 35, 43, 41, 36, 40, 38], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data, indent=4))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.011124134063720703, "tests_passed": false, "error": "json.decoder.JSONDecodeError"}}
{"selected_lines": [37], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if not data.get(KEY):\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008156061172485352, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 39, 43, 36, 35, 40, 42, 32, 33, 34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('%s/**/*.json' % os.path.abspath(directory))\n    updated_files = []\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 36, 42, 32, 43, 34, 38], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.009982109069824219, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f\"{directory}/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.00933074951171875, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008520841598510742, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.010384321212768555, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 33, 34, 35, 42, 43, 40, 39, 37, 32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0) # Rewrite file contents from beginning\n                f.write(json.dumps(data))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 36, 37, 32, 35, 39, 34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.013105154037475586, "tests_passed": false, "error": "io.UnsupportedOperation"}}
{"selected_lines": [40, 39, 35, 36, 43, 33, 38, 42, 34, 41, 32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f'{directory}/*.json')\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 32, 34, 43, 38, 41, 39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + '/**/*.json')\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if data.get(KEY, None) is None:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 37, 33, 39, 36, 41, 34, 35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f'{directory}/*.json')\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)  # reset the file pointer to the beginning of the file\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.003582000732421875, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.009982109069824219, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [43, 34, 39, 42, 33, 37, 36, 38, 40, 35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r+') as json_file:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008520841598510742, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('./' + directory + '/*.json')\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.007353067398071289, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [39, 42, 41, 37, 35, 38], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as json_file:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)  # reset the file pointer to the beginning of the file\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 42, 34, 35, 32, 40, 38, 36], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 39, 37, 36, 35, 41, 32, 40, 34, 38, 43], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, ensure_ascii=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.003439188003540039, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)  # reset the file pointer to the beginning of the file\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [37, 40, 38, 32, 36, 41, 43, 39, 34, 35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)  # reset the file pointer to the beginning of the file\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0034689903259277344, "tests_passed": true, "error": null}}
{"selected_lines": [39, 43, 41, 42, 36, 32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0) # Rewrite the file\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0030777454376220703, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [41, 40, 35, 38, 34, 37, 32, 42, 43, 39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.003229856491088867, "tests_passed": true, "error": null}}
{"selected_lines": [39, 37, 41, 38, 32, 43, 33, 36, 40, 34, 35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f'{directory}/**/*.json', recursive=True)\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0037987232208251953, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008520841598510742, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if data.get(KEY, None) is None:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.00853109359741211, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, separators=(',', ': '))\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008137941360473633, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 34, 41, 43, 37, 39, 42, 38, 36], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [39, 36, 40, 32, 37, 35, 42, 34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '**', '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.010094642639160156, "tests_passed": true, "error": null}}
{"selected_lines": [39, 33, 37, 32, 36, 43, 42, 41, 38, 40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '**', '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 32, 33, 41, 36, 43, 34, 42, 38], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f'{directory}/*.json')\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0) # Rewrite the file\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.004065036773681641, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.013105154037475586, "tests_passed": false, "error": "io.UnsupportedOperation"}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [33, 39, 40, 34, 41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38, 42, 33, 37, 41, 43, 35, 39, 32, 34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f'{directory}/*.json')\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=2, sort_keys=True)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.00501704216003418, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32, 43, 35, 37, 42, 33, 36, 40, 41, 34, 39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f\"{directory}/*.json\")\n    updated_files = 0\n    for file_path in files:\n        with open(file) as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 37, 39, 40, 35, 42], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f, indent=4, ensure_ascii=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [43, 39, 36, 40, 37, 41, 33, 32, 42, 34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('**/*.json', recursive=True)\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data, indent=4))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as file_:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.01084589958190918, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as json_file:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.009605884552001953, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [33, 42, 32, 34, 40, 41, 43], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()  # Erase the existing JSON content\n                json.dump(data, f, indent=4, separators=(', ', ': '), sort_keys=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 41, 34, 37, 40, 35, 36, 39, 33, 42, 38], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file_path in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for filepath in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.011053085327148438, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.013105154037475586, "tests_passed": false, "error": "io.UnsupportedOperation"}}
{"selected_lines": [41, 35, 37], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if data.get(KEY) is None:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 34, 43, 40, 32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data, indent=4))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [36, 39, 37, 34, 40, 33, 42, 41, 43, 35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()  # Erase the existing JSON content\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.013105154037475586, "tests_passed": false, "error": "io.UnsupportedOperation"}}
{"selected_lines": [41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=2, sort_keys=True)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.015546083450317383, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [43, 35, 39, 32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40, 34, 33, 38, 37, 39, 42, 36, 43], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if data.get(KEY) is None:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 38, 33, 35, 34, 43, 36, 39, 37, 32, 42], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + '/**/*.json', recursive=True)\n    updated_files = 0\n    for file_path in files:\n        with open(file) as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.011023283004760742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [41, 43, 32, 38, 37, 36, 39, 35, 42, 33, 34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f\"{directory}/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.00438237190246582, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0093841552734375, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [40, 35, 38, 32, 33, 37, 39, 41, 42, 43, 34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + '/**/*.json')\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if data.get(KEY, None) is None:\n                data[KEY] = VALUE\n                f.seek(0)  # reset the file pointer to the beginning\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0011959075927734375, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, ensure_ascii=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.009418964385986328, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 36, 39, 41, 40, 37, 33, 42], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data, indent=4))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 38, 37, 40, 35, 32, 42, 39, 36, 43], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as json_file:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)  # Move the file pointer to the beginning of the file\n                f.write(json.dumps(data, indent=4))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 32, 34, 41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=2, sort_keys=True)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 32, 42, 43, 41, 36, 40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('%s/**/*.json' % os.path.abspath(directory))\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.010384321212768555, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.011023283004760742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32, 40, 38, 33, 34, 42, 41, 37], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('./' + directory + '/*')\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, ensure_ascii=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0012819766998291016, "tests_passed": true, "error": null}}
{"selected_lines": [35, 42, 36, 41, 37, 33, 32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + '/**/*.json', recursive=True)\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as json_file:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, separators=(',', ': '))\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=2, sort_keys=True)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.015546083450317383, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0093841552734375, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [33, 43, 38, 42, 35, 40, 36, 39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)  # reset the file pointer to the beginning of the file\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 34, 36], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.010094642639160156, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40, 38, 37, 32, 43, 39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + '/**/*.json', recursive=True)\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.009073019027709961, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008520841598510742, "tests_passed": true, "error": null}}
{"selected_lines": [39, 38, 41, 37, 32, 40, 43], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data, indent=4))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 34, 39, 38, 40, 43, 36, 41, 32, 33], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()  # Erase the existing JSON content\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 38, 34, 39, 37, 41, 33, 40, 35, 32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + '/**/*.json', recursive=True)\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if not data.get(KEY):\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 42, 38, 34, 37, 43, 32, 36, 41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('./' + directory + '/*')\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if data.get(KEY) is None:\n                data[KEY] = VALUE\n                f.seek(0)  # reset the file pointer to the beginning of the file\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008520841598510742, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('./' + directory + '/*')\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.007217884063720703, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f'{directory}/*.json')\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.009259939193725586, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()  # Erase the existing JSON content\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.009872913360595703, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.011023283004760742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 34, 40, 33, 35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()  # Clear the file\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()  # Erase the existing JSON content\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.009872913360595703, "tests_passed": true, "error": null}}
{"selected_lines": [38, 32, 36, 34, 43, 37, 41, 35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 38, 36, 34, 43], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()  # Clear the file\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 41, 40, 36, 35, 43, 37, 39, 38, 34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f, indent=2, sort_keys=True)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 35, 37, 34, 41, 39, 32, 40, 38], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('./' + directory + '/*')\n    updated_files = 0\n    for file_path in files:\n        with open(file) as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data, indent=4))\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 42, 39, 41, 33, 38, 35, 37, 32, 43], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f'{directory}/*.json')\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f'{directory}/**/*.json', recursive=True)\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008365869522094727, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008520841598510742, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f\"{directory}/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.00933074951171875, "tests_passed": true, "error": null}}
{"selected_lines": [40, 42, 39, 43, 41, 33, 32, 38, 35, 37, 36], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, ensure_ascii=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 32, 40, 38, 36, 34, 39, 35, 42, 41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0) # Rewrite file contents from beginning\n                f.truncate()  # Erase the existing JSON content\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.013105154037475586, "tests_passed": false, "error": "io.UnsupportedOperation"}}
{"selected_lines": [41, 40, 32, 38, 42, 43], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 35, 39, 37, 38, 36], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)  # Move the file pointer to the beginning of the file\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)  # Move the file pointer to the beginning of the file\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.007830142974853516, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.013105154037475586, "tests_passed": false, "error": "io.UnsupportedOperation"}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + '/**/*.json', recursive=True)\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.009073019027709961, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [43, 37, 38, 33, 32, 39, 34, 40, 36, 42, 41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if data.get(KEY) is None:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('%s/**/*.json' % os.path.abspath(directory))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.007158041000366211, "tests_passed": true, "error": null}}
{"selected_lines": [42, 36, 35, 34, 40, 37, 38, 32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('**/*.json', recursive=True)\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [36, 41, 40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 40, 35, 34, 39, 43, 33, 42], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('./' + directory + '/*')\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f'{directory}/*.json')\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.009259939193725586, "tests_passed": true, "error": null}}
{"selected_lines": [36, 39, 35, 32, 38, 41, 42, 40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('./' + directory + '/*.json')\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, ensure_ascii=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.010094642639160156, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data, indent=4))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.011124134063720703, "tests_passed": false, "error": "json.decoder.JSONDecodeError"}}
{"selected_lines": [41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.010094642639160156, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.013105154037475586, "tests_passed": false, "error": "io.UnsupportedOperation"}}
{"selected_lines": [36, 39, 38, 35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0) # Rewrite the file\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008520841598510742, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 39, 40, 43, 41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('**/*.json', recursive=True)\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data, indent=4))\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, ensure_ascii=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.009418964385986328, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.009982109069824219, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('%s/**/*.json' % os.path.abspath(directory))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.007158041000366211, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0093841552734375, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [41, 40, 35, 38, 34, 37, 32, 42, 43, 39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.003229856491088867, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f'{directory}/*.json')\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.009259939193725586, "tests_passed": true, "error": null}}
{"selected_lines": [41, 39, 40, 37, 42, 34, 38, 33, 32, 43, 35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file) as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, separators=(', ', ': '), sort_keys=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if not data.get(KEY):\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008156061172485352, "tests_passed": true, "error": null}}
{"selected_lines": [38, 37, 42, 41, 32, 39, 43], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f'{directory}/*.json')\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if not KEY in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0066280364990234375, "tests_passed": true, "error": null}}
{"selected_lines": [42, 40, 34, 35, 43, 37, 41, 33, 32, 38], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('./' + directory + '/*.json')\n    updated_files = []\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data, indent=4))\n                json.dump(data, f, indent=4, separators=(',', ': '))\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 40, 32, 36, 34, 41, 39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if not KEY in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40, 38, 35, 33, 42, 37, 32, 34, 39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)  # Move the file pointer to the beginning of the file\n                f.truncate()  # Erase the existing JSON content\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.003506183624267578, "tests_passed": true, "error": null}}
{"selected_lines": [35, 43, 41, 38, 34, 33, 32, 37, 36, 39, 42], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f\"{directory}/*.json\")\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as json_file:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0) # Rewrite file contents from beginning\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as json_file:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.009605884552001953, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, separators=(', ', ': '), sort_keys=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.00834798812866211, "tests_passed": true, "error": null}}
{"selected_lines": [38, 41, 43, 33, 37, 36, 39, 32, 35, 42, 34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 41, 34, 35, 32, 36, 39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file) as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=2, sort_keys=True)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 36, 37, 32, 34, 40, 38, 39, 42, 43, 35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r') as file_:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0) # Rewrite the file\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 37, 43, 41, 40, 32, 33, 42, 34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('**/*.json', recursive=True)\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, ensure_ascii=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 36, 32, 35, 41, 42, 34, 38, 43, 33], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.010094642639160156, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 40, 43, 42], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as json_file:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data, indent=4))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if data.get(KEY, None) is None:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.00853109359741211, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.010384321212768555, "tests_passed": true, "error": null}}
{"selected_lines": [43, 42, 32, 36, 34, 38], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '**/*.json'))\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 36, 32, 42, 35, 39, 33, 38], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f'{directory}/*.json')\n    updated_files = []\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0) # Rewrite the file\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f'{directory}/**/*.json', recursive=True)\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008365869522094727, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 41, 38], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()  # Erase the existing JSON content\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.002899169921875, "tests_passed": true, "error": null}}
{"selected_lines": [32, 39, 38, 40, 36, 43, 42, 34, 33], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 41, 39, 37, 40, 42, 36, 43, 35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 41, 32, 38, 42, 35, 36, 43, 40, 37, 34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f'{directory}/*.json')\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.009259939193725586, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008520841598510742, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008520841598510742, "tests_passed": true, "error": null}}
{"selected_lines": [35, 43, 37, 39, 32, 40, 38, 34, 42, 33], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 39, 35, 38, 43, 32, 33, 40, 36], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [38, 39, 41, 42, 32, 35, 40, 43, 37], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('./' + directory + '/*.json')\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if not KEY in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008289813995361328, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [33, 32, 41, 37, 39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, separators=(', ', ': '), sort_keys=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [36, 42, 32, 35, 43, 41, 34, 39, 37, 38, 40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '**', '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0012221336364746094, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 34, 42, 41, 36, 37, 32, 43, 33], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if not KEY in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [41, 38, 42, 37, 36, 43, 40, 35, 34, 39, 32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if data.get(KEY, None) is None:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.013105154037475586, "tests_passed": false, "error": "io.UnsupportedOperation"}}
{"selected_lines": [36, 32, 34, 38, 33, 43, 37, 35, 39, 42, 40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('%s/**/*.json' % os.path.abspath(directory))\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if data.get(KEY) is None:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data, indent=4))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 32, 41, 36, 42, 43, 34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 32, 43, 38, 33, 35, 37, 41, 39, 34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 42, 38, 35, 32, 37, 33, 43, 36], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('./' + directory + '/*.json')\n    updated_files = []\n    for file in files:\n        with open(file) as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data, indent=4))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f'{directory}/*.json')\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.009259939193725586, "tests_passed": true, "error": null}}
{"selected_lines": [39, 35, 32, 34, 42, 36, 33, 43], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)  # Move the file pointer to the beginning of the file\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 40, 35, 37, 41, 38, 36, 39, 34, 33], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.010094642639160156, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.010384321212768555, "tests_passed": true, "error": null}}
{"selected_lines": [33, 43, 35, 39, 34, 38, 41, 42, 40, 36], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file_name in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data, indent=4))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f\"{directory}/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.00933074951171875, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()  # Clear the file\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.00824284553527832, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as json_file:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.009605884552001953, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [37], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if data.get(KEY) is None:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008862972259521484, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008520841598510742, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008520841598510742, "tests_passed": true, "error": null}}
{"selected_lines": [40, 33, 36, 42, 41, 32, 37, 38, 39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('%s/**/*.json' % os.path.abspath(directory))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.007158041000366211, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 41, 43, 35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 40, 41, 33, 37, 43, 36, 35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, separators=(', ', ': '), sort_keys=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)  # Move the file pointer to the beginning of the file\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.007830142974853516, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as json_file:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.009605884552001953, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [33], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.011023283004760742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [40, 34, 32, 39, 36, 33, 42, 38, 35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 36, 41, 43, 40, 42, 34, 32, 35, 38], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('**/*.json', recursive=True)\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0) # Rewrite file contents from beginning\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.010094642639160156, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0073320865631103516, "tests_passed": false, "error": "json.decoder.JSONDecodeError"}}
{"selected_lines": [34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0093841552734375, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32, 34, 42, 36, 33, 43, 40, 41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f'{directory}/*.json')\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, separators=(', ', ': '), sort_keys=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.005059242248535156, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32, 42, 40, 33, 37, 36, 41, 39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data, indent=4))\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if data.get(KEY) is None:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008862972259521484, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)  # reset the file pointer to the beginning\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008706092834472656, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, ensure_ascii=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.009418964385986328, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.009982109069824219, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32, 41, 35, 40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + '/**/*.json')\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0011510848999023438, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 41, 43, 39, 32, 40, 33, 42, 36], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()  # Clear the file\n                json.dump(data, f, indent=4, separators=(', ', ': '), sort_keys=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0031156539916992188, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008520841598510742, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008520841598510742, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.010384321212768555, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.009982109069824219, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.010094642639160156, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0093841552734375, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32, 38, 40, 41, 36, 43, 35, 33, 42, 34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '**', '*.json'))\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data, indent=4))\n                json.dump(data, f, indent=4, separators=(', ', ': '), sort_keys=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 32, 42, 43, 33, 41, 35, 40, 36, 34, 39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0037908554077148438, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, ensure_ascii=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.009418964385986328, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [41, 34, 33], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.013105154037475586, "tests_passed": false, "error": "io.UnsupportedOperation"}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [34, 41, 40, 32, 37, 43], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 38, 32, 41, 40, 33, 35, 39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f'{directory}/**/*.json', recursive=True)\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 39, 34, 38, 35, 40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)  # reset the file pointer to the beginning\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 39, 37, 35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f'{directory}/*.json')\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as json_file:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as json_file:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.009605884552001953, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)  # Reset the file pointer\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.007885932922363281, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0073320865631103516, "tests_passed": false, "error": "json.decoder.JSONDecodeError"}}
{"selected_lines": [38, 34, 40, 42, 36, 43, 32, 33, 35, 37, 39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f'{directory}/*.json')\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if data.get(KEY) is None:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008862972259521484, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.013105154037475586, "tests_passed": false, "error": "io.UnsupportedOperation"}}
{"selected_lines": [32, 43, 39, 36, 35, 42, 38, 40, 41, 33, 37], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + '/**/*.json', recursive=True)\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('**/*.json', recursive=True)\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.02817082405090332, "tests_passed": false, "error": "json.decoder.JSONDecodeError"}}
{"selected_lines": [39, 33, 42, 32, 34, 36, 38, 43, 35, 41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f\"{directory}/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as file_:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 34, 40, 41, 43, 38, 42, 37, 35, 33], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0) # Rewrite the file\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 39, 38, 33, 41, 36, 40, 42, 32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 35, 38, 34, 37, 32, 42, 43, 39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.003229856491088867, "tests_passed": true, "error": null}}
{"selected_lines": [38, 32, 35, 42, 39, 34, 43, 37, 33, 41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('./' + directory + '/*.json')\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.013105154037475586, "tests_passed": false, "error": "io.UnsupportedOperation"}}
{"selected_lines": [34, 38, 42, 32, 40, 41, 43, 37, 36, 35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('**/*.json', recursive=True)\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 43, 41, 35, 42, 38], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 32, 37, 41, 42, 43, 33], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0) # Rewrite file contents from beginning\n                f.truncate()\n                json.dump(data, f, indent=4, ensure_ascii=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0031158924102783203, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data, indent=4))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.011124134063720703, "tests_passed": false, "error": "json.decoder.JSONDecodeError"}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008520841598510742, "tests_passed": true, "error": null}}
{"selected_lines": [34, 43, 36, 41, 35, 42, 40, 32, 38, 37, 33], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('%s/**/*.json' % os.path.abspath(directory))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if data.get(KEY) is None:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 36, 39, 33, 40, 35, 34, 37, 41, 38], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('./' + directory + '/*.json')\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.007353067398071289, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 35, 34, 39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)  # Reset the file pointer\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('./' + directory + '/*.json')\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.007353067398071289, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as file_:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.01084589958190918, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [36, 34, 33, 40, 38, 32, 35, 42], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '**', '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data, indent=4))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.010094642639160156, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.013105154037475586, "tests_passed": false, "error": "io.UnsupportedOperation"}}
{"selected_lines": [37, 33, 36, 34, 39, 43, 32, 41, 38], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if not KEY in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, separators=(',', ': '))\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008137941360473633, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32, 41, 43, 34, 38, 33, 36, 37, 35, 42], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f\"{directory}/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if data.get(KEY, None) is None:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, separators=(',', ': '))\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.013105154037475586, "tests_passed": false, "error": "io.UnsupportedOperation"}}
{"selected_lines": [32, 40, 43, 37, 35, 42], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.013105154037475586, "tests_passed": false, "error": "io.UnsupportedOperation"}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [40, 41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data, indent=4))\n                json.dump(data, f, indent=4, ensure_ascii=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [36, 39, 41, 37, 42, 34, 32, 33, 35, 43], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('./' + directory + '/*.json')\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 42, 36, 43, 32, 33], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f'{directory}/*.json')\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as json_file:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data, indent=4))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.011124134063720703, "tests_passed": false, "error": "json.decoder.JSONDecodeError"}}
{"selected_lines": [43, 35, 33], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 34, 42, 43, 35, 40, 39, 36, 37, 33, 38], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 41, 38, 33, 37, 36, 32, 40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('**/*.json', recursive=True)\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.011023283004760742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [39, 42, 34, 38, 33, 41, 36, 40, 32, 35, 43], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = []\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=2, sort_keys=True)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file) as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.010399818420410156, "tests_passed": false, "error": "io.UnsupportedOperation"}}
{"selected_lines": [35, 42, 33, 43, 38, 40, 41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data, indent=4))\n                json.dump(data, f, indent=4, separators=(', ', ': '), sort_keys=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 41, 37, 43], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as file_:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, separators=(', ', ': '), sort_keys=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 40, 38, 35, 36, 33], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()  # Clear the file\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 32, 41, 34, 38, 35, 39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, separators=(', ', ': '), sort_keys=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0034322738647460938, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 37, 35, 36, 43, 42, 32, 40, 39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0) # Rewrite file contents from beginning\n                f.write(json.dumps(data, indent=4))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 39, 37, 36, 35, 41, 32, 40, 34, 38, 43], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, ensure_ascii=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.003439188003540039, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008520841598510742, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as file_:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.01084589958190918, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008520841598510742, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('./' + directory + '/*')\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.007217884063720703, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 40, 42, 36], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f\"{directory}/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file) as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.010399818420410156, "tests_passed": false, "error": "io.UnsupportedOperation"}}
{"selected_lines": [32, 41, 35, 40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + '/**/*.json')\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0011510848999023438, "tests_passed": true, "error": null}}
{"selected_lines": [33, 43, 35, 39, 32, 40, 36, 41, 42, 37], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if not KEY in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 33, 32, 43, 36, 37, 41, 35, 38, 42], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if data.get(KEY, None) is None:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 38, 43, 34, 40, 36, 37, 33, 42], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if not data.get(KEY):\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=2, sort_keys=True)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.006255149841308594, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '**', '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.012286901473999023, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 36, 37], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 39, 41, 35, 43, 34, 38, 42, 33], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for filepath in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.010094642639160156, "tests_passed": true, "error": null}}
{"selected_lines": [36, 43, 32, 37, 38, 39, 35, 34, 33, 41, 42], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f'{directory}/**/*.json', recursive=True)\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 41, 32, 42, 39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [43, 35, 36, 34, 37, 40, 33, 42, 32, 41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('./' + directory + '/*.json')\n    updated_files = []\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if not KEY in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 43, 37, 39, 40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data, indent=4))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [41, 42, 36, 35, 33, 37, 39, 38, 32, 40, 34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 38, 32, 34, 33], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f'{directory}/**/*.json', recursive=True)\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 43, 38, 36, 35, 40, 37, 42], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f, indent=4, ensure_ascii=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [40, 33, 35, 42, 37, 36, 38, 34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('./' + directory + '/*')\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.007217884063720703, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 37, 42, 32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + '/**/*.json')\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 42, 32, 38, 34, 36, 41, 35, 33, 39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0) # Rewrite file contents from beginning\n                f.write(json.dumps(data))\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [39, 36, 33, 35, 38, 32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 37, 39, 35, 43, 32, 34, 42], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)  # Move the file pointer to the beginning of the file\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.007830142974853516, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f'{directory}/**/*.json', recursive=True)\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008365869522094727, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [42, 37, 35, 39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0) # Rewrite file contents from beginning\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 41, 42, 32, 40, 38, 34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('%s/**/*.json' % os.path.abspath(directory))\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f, indent=4, ensure_ascii=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.011023283004760742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32, 37, 43, 36, 39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)  # reset the file pointer to the beginning of the file\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.003047943115234375, "tests_passed": true, "error": null}}
{"selected_lines": [32, 39, 36, 38, 42, 35, 40, 37, 33, 41, 34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for filepath in files:\n        with open(file, 'r+') as json_file:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 32, 42, 43, 33, 41, 35, 40, 36, 34, 39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0037908554077148438, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008520841598510742, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.010384321212768555, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '**', '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.012286901473999023, "tests_passed": true, "error": null}}
{"selected_lines": [34, 42, 40, 39, 38, 37, 36, 41, 33, 32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('./' + directory + '/*.json')\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, ensure_ascii=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.00131988525390625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [43, 39, 33, 40, 34, 36, 42], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0) # Rewrite the file\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 41, 39, 37, 40, 32, 35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data, indent=4))\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 35, 41, 43, 39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [38, 41, 32, 33, 37, 35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, ensure_ascii=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 42, 35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.011023283004760742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [34, 33, 35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r+') as json_file:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as json_file:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.009605884552001953, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008520841598510742, "tests_passed": true, "error": null}}
{"selected_lines": [32, 33, 37, 35, 40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008520841598510742, "tests_passed": true, "error": null}}
{"selected_lines": [37, 43, 39, 35, 42, 41, 38, 34, 40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if not data.get(KEY):\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0031480789184570312, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [34, 35, 32, 40, 39, 38, 37], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 32, 41, 40, 39, 35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for filepath in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()  # Clear the file\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 32, 42, 43, 35, 37, 40, 36], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f\"{directory}/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 43, 35, 36, 42, 32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 41, 33, 39, 42, 37, 34, 43, 40, 38, 36], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)  # reset the file pointer to the beginning\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 42, 34, 32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '**', '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data, indent=4))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 40, 39, 41, 33, 34, 32, 38, 42, 35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data, indent=4))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '**/*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0066111087799072266, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as file_:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.01084589958190918, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [36, 35, 43, 34, 40, 39, 38, 32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 33, 35, 37, 43, 42, 39, 41, 34, 36], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if not KEY in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, ensure_ascii=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.003859996795654297, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 42, 36, 33, 43, 40, 41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f'{directory}/*.json')\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, separators=(', ', ': '), sort_keys=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.005059242248535156, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, ensure_ascii=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.009418964385986328, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0093841552734375, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [38, 33, 37, 43, 32, 35, 40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('./' + directory + '/*')\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [35, 33, 36], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as json_file:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '**/*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0066111087799072266, "tests_passed": true, "error": null}}
{"selected_lines": [43, 33, 42, 36, 41, 39, 34, 38, 37, 35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, separators=(', ', ': '), sort_keys=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.011023283004760742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.010094642639160156, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 34, 39, 40, 43, 32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if not data.get(KEY):\n                data[KEY] = VALUE\n                f.seek(0)  # reset the file pointer to the beginning of the file\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.003120899200439453, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()  # Clear the file\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.00824284553527832, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.010094642639160156, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.010094642639160156, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f\"{directory}/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.00933074951171875, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 34, 39, 37, 40, 36, 43, 33, 38, 42], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0) # Rewrite file contents from beginning\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 39, 34, 42, 40, 33, 38, 36, 37, 41, 43], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f'{directory}/*.json')\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.011023283004760742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [39, 33, 32, 43, 41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f'{directory}/**/*.json', recursive=True)\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 43, 40, 32, 34, 35, 39, 37], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, ensure_ascii=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.009418964385986328, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [41, 35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file) as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data, indent=4))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.011124134063720703, "tests_passed": false, "error": "json.decoder.JSONDecodeError"}}
{"selected_lines": [37, 41, 34, 32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 37, 42, 36, 32, 41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=2, sort_keys=True)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0030410289764404297, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 38, 37, 34, 32, 40, 43, 39, 42, 41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('./' + directory + '/*')\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 39, 42, 37, 38, 36, 32, 41, 40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('%s/**/*.json' % os.path.abspath(directory))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)  # reset the file pointer to the beginning\n                f.truncate()  # Clear the file\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0013477802276611328, "tests_passed": true, "error": null}}
{"selected_lines": [35, 32, 41, 38, 34, 40, 36, 37, 39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)  # Move the file pointer to the beginning of the file\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.010094642639160156, "tests_passed": true, "error": null}}
{"selected_lines": [39, 32, 34, 36, 33, 38, 35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('%s/**/*.json' % os.path.abspath(directory))\n    updated_files = []\n    for file_name in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.010384321212768555, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008520841598510742, "tests_passed": true, "error": null}}
{"selected_lines": [37, 41, 43, 39, 33, 35, 38, 42, 36, 40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)  # reset the file pointer to the beginning\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008520841598510742, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [43, 32, 40, 37, 42, 35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data, indent=4))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.010094642639160156, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [41, 35, 34, 33, 37, 32, 43], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for filepath in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=2, sort_keys=True)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 33, 34, 42, 32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [37, 41, 39, 42, 35, 36, 43, 33, 32, 38, 34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file) as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0073320865631103516, "tests_passed": false, "error": "json.decoder.JSONDecodeError"}}
{"selected_lines": [35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.013105154037475586, "tests_passed": false, "error": "io.UnsupportedOperation"}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 40, 42, 33, 32, 38, 34, 41, 39, 43], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data, indent=4))\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0093841552734375, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [34, 32, 39, 33, 37, 42, 43, 41, 38, 40, 35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '**', '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)  # reset the file pointer to the beginning\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [41, 43, 32, 38, 37, 36, 39, 35, 42, 33, 34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f\"{directory}/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.00438237190246582, "tests_passed": true, "error": null}}
{"selected_lines": [35, 42, 43, 36, 37, 34, 39, 33], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if data.get(KEY) is None:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 34, 36], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('**/*.json', recursive=True)\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.02817082405090332, "tests_passed": false, "error": "json.decoder.JSONDecodeError"}}
{"selected_lines": [34, 35, 39, 36, 41, 37, 38, 42, 32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f'{directory}/**/*.json', recursive=True)\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=2, sort_keys=True)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38, 42, 33, 32, 39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 38, 40, 34, 35, 42, 43, 37, 39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + '/**/*.json', recursive=True)\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if not KEY in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 39, 34, 37, 33, 40, 42, 36, 38, 35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0) # Rewrite the file\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 34, 41, 43, 42, 39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, separators=(',', ': '))\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 34, 43, 37, 40, 35, 41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if data.get(KEY) is None:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, separators=(', ', ': '), sort_keys=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [34, 43, 32, 35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as json_file:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=2, sort_keys=True)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.015546083450317383, "tests_passed": true, "error": null}}
{"selected_lines": [43, 34, 42, 35, 38, 36, 33, 32, 40, 37, 41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f'{directory}/*.json')\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if data.get(KEY, None) is None:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data, indent=4))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.011023283004760742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.010384321212768555, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [41, 34, 40, 42, 35, 32, 33, 37, 36, 39, 38], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008520841598510742, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.010094642639160156, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 43, 34, 40, 39, 37, 35, 32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.011023283004760742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [39, 35, 36, 38, 37, 40, 43, 41, 32, 42, 33], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)  # Reset the file pointer\n                f.write(json.dumps(data, indent=4))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file) as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.010399818420410156, "tests_passed": false, "error": "io.UnsupportedOperation"}}
{"selected_lines": [39, 36, 35, 41, 34, 40, 42], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r+') as json_file:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)  # Move the file pointer to the beginning of the file\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 38, 35, 33, 42], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if data.get(KEY) is None:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('%s/**/*.json' % os.path.abspath(directory))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.007158041000366211, "tests_passed": true, "error": null}}
{"selected_lines": [41, 36, 43, 35, 39, 37, 42, 38], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as file_:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0) # Rewrite file contents from beginning\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 37, 40, 41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=2, sort_keys=True)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 32, 33, 41, 39, 43, 34, 40, 35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 33, 41, 35, 39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 39, 34, 33, 41, 43, 36], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if data.get(KEY, None) is None:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 34, 39, 43, 40, 37, 41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file_name in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 37, 39, 38, 41, 42, 34, 33, 36, 40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('%s/**/*.json' % os.path.abspath(directory))\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0) # Rewrite the file\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=2, sort_keys=True)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.015546083450317383, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '**/*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0066111087799072266, "tests_passed": true, "error": null}}
{"selected_lines": [41, 37, 42, 40, 38, 39, 36, 35, 32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + '/**/*.json')\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if data.get(KEY) is None:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0011692047119140625, "tests_passed": true, "error": null}}
{"selected_lines": [40, 42, 36, 35, 33, 43, 38, 32, 34, 41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f'{directory}/*.json')\n    updated_files = []\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data, indent=4))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32, 38, 42, 43, 33, 41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('./' + directory + '/*.json')\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0014109611511230469, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008520841598510742, "tests_passed": true, "error": null}}
{"selected_lines": [43, 37, 38, 32, 42, 39, 40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0) # Rewrite file contents from beginning\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0038542747497558594, "tests_passed": true, "error": null}}
{"selected_lines": [34, 40, 39, 36, 32, 41, 42, 33, 35, 43], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r+') as json_file:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)  # Reset the file pointer\n                f.truncate()\n                json.dump(data, f, indent=4, separators=(',', ': '))\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 40, 42, 37, 34, 43, 38, 33, 32, 36], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '**/*.json'))\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r+') as json_file:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file) as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.010399818420410156, "tests_passed": false, "error": "io.UnsupportedOperation"}}
{"selected_lines": [40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0073320865631103516, "tests_passed": false, "error": "json.decoder.JSONDecodeError"}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.013105154037475586, "tests_passed": false, "error": "io.UnsupportedOperation"}}
{"selected_lines": [35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.013105154037475586, "tests_passed": false, "error": "io.UnsupportedOperation"}}
{"selected_lines": [32, 33, 43, 34, 42, 35, 40, 37, 39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file_name in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.011023283004760742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0093841552734375, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.010384321212768555, "tests_passed": true, "error": null}}
{"selected_lines": [41, 43, 34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 32, 43, 33, 42, 37, 41, 38, 35, 36], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f, indent=2, sort_keys=True)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008520841598510742, "tests_passed": true, "error": null}}
{"selected_lines": [43, 36, 40, 32, 41, 33, 35, 42, 38, 34, 37], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file_path in files:\n        with open(file) as f:\n            data = json.load(f)\n            if not KEY in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + '/**/*.json', recursive=True)\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.009073019027709961, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 32, 37, 43, 34, 42, 40, 35, 36], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_path in files:\n        with open(file) as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 43, 36, 37, 42, 35, 39, 32, 38, 33, 41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f'{directory}/**/*.json', recursive=True)\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, separators=(',', ': '))\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 34, 37, 40, 39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()  # Erase the existing JSON content\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 32, 43, 40, 33, 37, 38], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as file_:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 32, 43, 34, 40, 35, 37, 42, 39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('**/*.json', recursive=True)\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 39, 34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 33, 32, 36, 40, 42, 39, 38, 43, 35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f\"{directory}/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.010094642639160156, "tests_passed": true, "error": null}}
{"selected_lines": [40, 37, 41, 35, 32, 34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('%s/**/*.json' % os.path.abspath(directory))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0011372566223144531, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('%s/**/*.json' % os.path.abspath(directory))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.007158041000366211, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.013105154037475586, "tests_passed": false, "error": "io.UnsupportedOperation"}}
{"selected_lines": [43, 40, 34, 38, 42, 41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, ensure_ascii=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 39, 42, 35, 41, 33, 40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file) as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 34, 42, 41, 39, 43, 35, 40, 38], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data, indent=4))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for filepath in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.011053085327148438, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [35, 38, 34, 37, 32, 42, 41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.010384321212768555, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.011023283004760742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)  # reset the file pointer to the beginning of the file\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.009042978286743164, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + '/**/*.json')\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.007534980773925781, "tests_passed": true, "error": null}}
{"selected_lines": [34, 40, 39, 42, 37, 33, 36, 41, 32, 35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=2, sort_keys=True)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.015546083450317383, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [36, 40, 41, 38], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()  # Erase the existing JSON content\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.002899169921875, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.010094642639160156, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 38, 39, 41, 32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('**/*.json', recursive=True)\n    updated_files = []\n    for file_name in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 41, 38, 32, 43, 33, 36, 40, 34, 35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f'{directory}/**/*.json', recursive=True)\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0037987232208251953, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008520841598510742, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 35, 39, 43, 42, 41, 38, 40, 32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0) # Rewrite file contents from beginning\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.004235029220581055, "tests_passed": true, "error": null}}
{"selected_lines": [35, 42, 41, 39, 43, 37, 34, 38, 40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for filepath in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 38, 39, 43], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('**/*.json', recursive=True)\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)  # Move the file pointer to the beginning of the file\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if not data.get(KEY):\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008156061172485352, "tests_passed": true, "error": null}}
{"selected_lines": [37, 42, 33, 41, 35, 43, 40, 39, 38, 32, 36], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.013105154037475586, "tests_passed": false, "error": "io.UnsupportedOperation"}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if not KEY in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008289813995361328, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('%s/**/*.json' % os.path.abspath(directory))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.007158041000366211, "tests_passed": true, "error": null}}
{"selected_lines": [34, 41, 42, 32, 43, 39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)  # Move the file pointer to the beginning of the file\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0033087730407714844, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if not KEY in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008289813995361328, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.010384321212768555, "tests_passed": true, "error": null}}
{"selected_lines": [39, 34, 32, 37, 40, 33, 41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('./' + directory + '/*.json')\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, ensure_ascii=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 35, 42, 32, 38, 41, 37, 34, 43, 39, 33], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if data.get(KEY) is None:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.004244804382324219, "tests_passed": true, "error": null}}
{"selected_lines": [36, 32, 38, 37, 40, 35, 34, 41, 43], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 33, 41, 32, 39, 36, 40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 33, 36, 35, 32, 42, 39, 37, 40, 41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = []\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=2, sort_keys=True)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 32, 43, 39, 42, 41, 33, 35, 40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f\"{directory}/*.json\")\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data, indent=4))\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f'{directory}/*.json')\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.009259939193725586, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 39, 34, 41, 43, 35, 33, 42, 38, 32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 38, 34, 41, 42, 39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [34, 37, 38, 39, 42, 32, 36, 40, 35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data, indent=4))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 36, 43, 34, 35, 40, 42, 32, 41, 39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)  # Move the file pointer to the beginning of the file\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.002866983413696289, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if data.get(KEY, None) is None:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.00853109359741211, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if data.get(KEY) is None:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008862972259521484, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.013105154037475586, "tests_passed": false, "error": "io.UnsupportedOperation"}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.010384321212768555, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('./' + directory + '/*.json')\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.007353067398071289, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.011023283004760742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [41, 32, 37, 40, 38, 34, 43, 42, 35, 33, 36], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as json_file:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 39, 35, 36, 42, 33, 43, 38, 37, 40, 34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for filepath in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)  # reset the file pointer to the beginning\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.013105154037475586, "tests_passed": false, "error": "io.UnsupportedOperation"}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f'{directory}/*.json')\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.009259939193725586, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 36, 41, 32, 39, 42, 34, 38], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('**/*.json', recursive=True)\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, ensure_ascii=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 42, 43, 38, 37, 34, 39, 33, 41, 36], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=2, sort_keys=True)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.003144979476928711, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.011023283004760742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [34, 41, 42, 43, 39, 35, 33, 36, 32, 37], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)  # reset the file pointer to the beginning of the file\n                f.truncate()\n                json.dump(data, f, indent=2, sort_keys=True)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 42, 32, 35, 43, 41, 34, 39, 37, 38, 40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '**', '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0012221336364746094, "tests_passed": true, "error": null}}
{"selected_lines": [41, 38, 40, 33], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()  # Clear the file\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0029189586639404297, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.011023283004760742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [35, 36, 34, 33, 32, 39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + '/**/*.json', recursive=True)\n    updated_files = 0\n    for file in files:\n        with open(file) as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.010384321212768555, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.009982109069824219, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=2, sort_keys=True)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.015546083450317383, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0093841552734375, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [39, 37, 41, 38, 32, 43, 33, 36, 40, 34, 35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f'{directory}/**/*.json', recursive=True)\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0037987232208251953, "tests_passed": true, "error": null}}
{"selected_lines": [38, 35, 33, 43, 37, 32, 41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f'{directory}/**/*.json', recursive=True)\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.013105154037475586, "tests_passed": false, "error": "io.UnsupportedOperation"}}
{"selected_lines": [40, 37, 42, 32, 34, 41, 36, 39, 43, 33, 38], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 34, 32, 41, 37, 39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('./' + directory + '/*.json')\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 34, 37, 39, 35, 42, 40, 36], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for filepath in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)  # Move the file pointer to the beginning of the file\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 33, 40, 36, 41, 35, 39, 34, 37], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file) as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, separators=(', ', ': '), sort_keys=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 37, 40, 35, 34, 39, 36, 41, 42], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if not data.get(KEY):\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 38, 33, 41, 34, 39, 43, 32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '**', '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)  # Reset the file pointer\n                f.truncate()\n                json.dump(data, f, indent=4, ensure_ascii=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0011489391326904297, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008520841598510742, "tests_passed": true, "error": null}}
{"selected_lines": [33, 41, 39, 38, 35, 43, 42, 36, 34, 32, 37], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if not KEY in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 39, 40, 36, 32, 43, 41, 38, 34, 33, 35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for filepath in files:\n        with open(file, 'r+') as json_file:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('./' + directory + '/*')\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.007217884063720703, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 32, 41, 40, 39, 38, 43, 33], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()  # Erase the existing JSON content\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0028018951416015625, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '**', '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.012286901473999023, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if not KEY in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008289813995361328, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 41, 34, 33, 43, 32, 42, 40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + '/**/*.json', recursive=True)\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if not data.get(KEY):\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, separators=(',', ': '))\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0030918121337890625, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, ensure_ascii=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.009418964385986328, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [39, 42, 40, 33, 32, 37, 35, 41, 36], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f\"{directory}/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()  # Clear the file\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 38, 36, 37, 34, 35, 43, 33, 40, 39, 32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + '/**/*.json', recursive=True)\n    updated_files = 0\n    for filepath in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if data.get(KEY) is None:\n                data[KEY] = VALUE\n                f.seek(0)  # Move the file pointer to the beginning of the file\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 33, 40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()  # Clear the file\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 43, 32, 42, 37, 36, 34, 41, 35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '**', '*.json'))\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r') as file_:\n            data = json.load(f)\n            if data.get(KEY, None) is None:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, separators=(', ', ': '), sort_keys=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + '/**/*.json', recursive=True)\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.002930879592895508, "tests_passed": true, "error": null}}
{"selected_lines": [42, 41, 38, 35, 40, 32, 33, 43], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as json_file:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data, indent=4))\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.010384321212768555, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if data.get(KEY, None) is None:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.00853109359741211, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [38, 32, 33, 37, 35, 39, 36, 41, 40, 43], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if data.get(KEY) is None:\n                data[KEY] = VALUE\n                f.seek(0)  # reset the file pointer to the beginning of the file\n                f.write(json.dumps(data))\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 41, 33, 39, 38, 32, 43, 35, 37, 34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('./' + directory + '/*.json')\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)  # Move the file pointer to the beginning of the file\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.007830142974853516, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.010384321212768555, "tests_passed": true, "error": null}}
{"selected_lines": [38, 43, 35, 33, 32, 37], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008520841598510742, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [40, 35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [42, 40, 32, 34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('%s/**/*.json' % os.path.abspath(directory))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.007158041000366211, "tests_passed": true, "error": null}}
{"selected_lines": [32, 38, 43, 39, 33, 35, 37, 41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)  # reset the file pointer to the beginning\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 38, 32, 33, 34, 35, 41, 37, 43, 36, 40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, separators=(', ', ': '), sort_keys=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.003826141357421875, "tests_passed": true, "error": null}}
{"selected_lines": [32, 41, 43, 42, 40, 34, 39, 37, 35, 33], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, ensure_ascii=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '**/*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0066111087799072266, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 37, 42, 36, 32, 41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=2, sort_keys=True)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0030410289764404297, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '**/*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0066111087799072266, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008520841598510742, "tests_passed": true, "error": null}}
{"selected_lines": [39, 34, 42, 41, 38, 36, 35, 43, 37, 32, 40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if data.get(KEY) is None:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.002763986587524414, "tests_passed": true, "error": null}}
{"selected_lines": [38, 43, 40, 37], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if not data.get(KEY):\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()  # Clear the file\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.002894878387451172, "tests_passed": true, "error": null}}
{"selected_lines": [39, 35, 33, 32, 37, 42, 41, 38, 36], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('./' + directory + '/*')\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as file_:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 32, 38, 41, 43, 39, 34, 36, 42, 33, 35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f'{directory}/*.json')\n    updated_files = 0\n    for filepath in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)  # Reset the file pointer\n                f.write(json.dumps(data, indent=4))\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 35, 37, 39, 40, 42, 38, 43, 36, 41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008520841598510742, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.010094642639160156, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 40, 32, 36, 33, 41, 43, 34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.010384321212768555, "tests_passed": true, "error": null}}
{"selected_lines": [42, 40, 35, 37, 34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data, indent=4))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f'{directory}/*.json')\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.009259939193725586, "tests_passed": true, "error": null}}
{"selected_lines": [35, 42, 37, 38, 39, 34, 41, 36], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, separators=(', ', ': '), sort_keys=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 35, 38, 34, 37, 32, 42, 43, 39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.003229856491088867, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 43, 41, 33, 38, 36, 35, 39, 42], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as file_:\n            data = json.load(f)\n            if data.get(KEY, None) is None:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()  # Clear the file\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.00824284553527832, "tests_passed": true, "error": null}}
{"selected_lines": [42, 39, 34, 32, 40, 43, 35, 33, 37, 41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)  # reset the file pointer to the beginning of the file\n                f.truncate()\n                json.dump(data, f, indent=4, ensure_ascii=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 34, 39, 36, 40, 37, 42, 32, 35, 38], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('%s/**/*.json' % os.path.abspath(directory))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.007158041000366211, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [37, 38, 33, 41, 43, 35, 42, 34, 39, 40, 32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file_path in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if not data.get(KEY):\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data, indent=4))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.011124134063720703, "tests_passed": false, "error": "json.decoder.JSONDecodeError"}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 38, 39, 43, 35, 40, 36], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 43, 41, 36, 39, 33, 34, 35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file_path in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=2, sort_keys=True)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008520841598510742, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 42, 43, 33, 41, 35, 40, 36, 34, 39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0037908554077148438, "tests_passed": true, "error": null}}
{"selected_lines": [37, 41, 33, 43, 36, 38, 34, 32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [40, 32, 35, 41, 43], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '**', '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.012286901473999023, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [33, 41, 35, 34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, separators=(',', ': '))\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 34, 41, 37, 36, 40, 42, 39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 43, 35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as json_file:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.009605884552001953, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32, 41, 39, 37, 33, 42, 34, 35, 38], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if not data.get(KEY):\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.009982109069824219, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [40, 33, 42, 34, 41, 37], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, separators=(',', ': '))\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [40, 37, 41, 32, 39, 42, 36, 33, 34, 38, 35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file_name in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.011023283004760742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.013105154037475586, "tests_passed": false, "error": "io.UnsupportedOperation"}}
{"selected_lines": [35, 33, 43, 34, 38], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file) as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.010399818420410156, "tests_passed": false, "error": "io.UnsupportedOperation"}}
{"selected_lines": [37, 42, 36, 33, 32, 39, 40, 38, 41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0) # Rewrite the file\n                f.write(json.dumps(data))\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0093841552734375, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [37, 32, 43, 40, 36], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('./' + directory + '/*.json')\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if data.get(KEY) is None:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0) # Rewrite the file\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008636951446533203, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 32, 38], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f'{directory}/**/*.json', recursive=True)\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as json_file:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 33, 40, 34, 43, 41, 42, 37, 39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [35, 41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, ensure_ascii=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data, indent=4))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.011124134063720703, "tests_passed": false, "error": "json.decoder.JSONDecodeError"}}
{"selected_lines": [34, 32, 40, 39, 37, 35, 43, 33], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('./' + directory + '/*.json')\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data, indent=4))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 41, 35, 39, 33, 43, 32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, separators=(',', ': '))\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0027968883514404297, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.013105154037475586, "tests_passed": false, "error": "io.UnsupportedOperation"}}
{"selected_lines": [33, 34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file_name in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if not data.get(KEY):\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008156061172485352, "tests_passed": true, "error": null}}
{"selected_lines": [39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0) # Rewrite file contents from beginning\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.009402036666870117, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [35, 40, 41, 34, 39, 32, 43, 37], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + '/**/*.json')\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0) # Rewrite the file\n                f.write(json.dumps(data))\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [41, 38, 35, 32, 33, 36, 39, 43, 37, 40, 34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('./' + directory + '/*')\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as json_file:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32, 37, 39, 35, 33, 41, 38], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('%s/**/*.json' % os.path.abspath(directory))\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if data.get(KEY, None) is None:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f'{directory}/**/*.json', recursive=True)\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008365869522094727, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, separators=(',', ': '))\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008137941360473633, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()  # Clear the file\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.00824284553527832, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data, indent=4))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.011124134063720703, "tests_passed": false, "error": "json.decoder.JSONDecodeError"}}
{"selected_lines": [37, 35, 41, 32, 34, 42, 33, 36, 39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if data.get(KEY) is None:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.004875898361206055, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 43, 38, 32, 40, 42], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f\"{directory}/*.json\")\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 39, 43, 42, 34, 32, 41, 37], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('./' + directory + '/*')\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)  # reset the file pointer to the beginning of the file\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0014300346374511719, "tests_passed": true, "error": null}}
{"selected_lines": [35, 42, 32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f'{directory}/**/*.json', recursive=True)\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as json_file:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 37, 43, 38, 42, 39, 35, 33, 41, 40, 34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()  # Erase the existing JSON content\n                json.dump(data, f, indent=4, ensure_ascii=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.002989053726196289, "tests_passed": true, "error": null}}
{"selected_lines": [36, 39, 34, 38, 40, 32, 42, 35, 37], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 35, 40, 38, 42, 34, 36, 43, 33, 32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f, indent=4, separators=(',', ': '))\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.013105154037475586, "tests_passed": false, "error": "io.UnsupportedOperation"}}
{"selected_lines": [41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.010094642639160156, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 41, 36, 42, 38, 33], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 38, 36, 34, 37, 32, 41, 42], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f'{directory}/**/*.json', recursive=True)\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if not data.get(KEY):\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 33, 42, 35, 37, 43, 32, 36, 41, 40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 40, 35, 33], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32, 39, 43, 42], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0) # Rewrite file contents from beginning\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.002986907958984375, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 36, 41, 39, 40, 37], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if not KEY in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 35, 38, 42, 43, 34, 32, 39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('**/*.json', recursive=True)\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if data.get(KEY, None) is None:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 41, 33, 37, 32, 43], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if not KEY in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.002792835235595703, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.010094642639160156, "tests_passed": true, "error": null}}
{"selected_lines": [37, 35, 33, 42, 32, 39, 36, 38, 34, 41, 40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if data.get(KEY, None) is None:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, ensure_ascii=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 42, 39, 41, 38, 40, 43, 35, 33], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f, indent=4, ensure_ascii=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 32, 34, 41, 35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, separators=(', ', ': '), sort_keys=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 43, 41, 33, 42, 37, 32, 40, 38], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('**/*.json', recursive=True)\n    updated_files = []\n    for file in files:\n        with open(file, 'r') as file_:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()  # Clear the file\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.00824284553527832, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0093841552734375, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [39, 43, 38, 40, 34, 33, 35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r+') as json_file:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data, indent=4))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 42, 38, 35, 32, 33, 36, 41, 40, 43], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file) as f:\n            data = json.load(f)\n            if not KEY in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 34, 42, 33, 32, 40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if data.get(KEY) is None:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 33, 39, 32, 34, 36, 38], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '**', '*.json'))\n    updated_files = []\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 39, 38, 37, 41, 43, 40, 33], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as json_file:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.009605884552001953, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.009982109069824219, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [43, 32, 36, 40, 34, 37], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('./' + directory + '/*')\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 43, 34, 37], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f'{directory}/**/*.json', recursive=True)\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '**/*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0066111087799072266, "tests_passed": true, "error": null}}
{"selected_lines": [37, 43, 39, 35, 42, 41, 38, 34, 40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if not data.get(KEY):\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0031480789184570312, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=2, sort_keys=True)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.015546083450317383, "tests_passed": true, "error": null}}
{"selected_lines": [42, 43, 34, 35, 41, 39, 36, 37, 33, 32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f'{directory}/**/*.json', recursive=True)\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [37, 43, 33, 40, 38, 32, 39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + '/**/*.json')\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0) # Rewrite the file\n                f.truncate()  # Clear the file\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 43, 38, 40, 36, 33, 41, 35, 37, 34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 41, 32, 42, 38, 36, 40, 43, 34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as json_file:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, ensure_ascii=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 41, 39, 37, 42, 35, 36, 33, 40, 34, 32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '**', '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [42, 32, 38, 36, 39, 41, 37, 40, 33, 34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f, indent=4, ensure_ascii=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 35, 36, 39, 34, 43, 40, 33], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)  # Move the file pointer to the beginning of the file\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 33, 43, 42, 34, 35, 39, 41, 40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 33, 34, 42], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, separators=(', ', ': '), sort_keys=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.00834798812866211, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34, 40, 41, 37, 42], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 40, 33, 32, 43, 36, 41, 38, 34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, separators=(', ', ': '), sort_keys=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, separators=(',', ': '))\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008137941360473633, "tests_passed": true, "error": null}}
{"selected_lines": [42, 35, 41, 38, 32, 33, 40, 37], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [40, 35, 39, 36, 38, 32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as json_file:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 34, 38, 41, 43, 39, 37, 32, 36], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '**', '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)  # reset the file pointer to the beginning\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0011970996856689453, "tests_passed": true, "error": null}}
{"selected_lines": [32, 38, 40, 34, 41, 33, 35, 39, 36, 42], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for filepath in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.011053085327148438, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [39, 36, 32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('**/*.json', recursive=True)\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)  # reset the file pointer to the beginning of the file\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 37, 33, 32, 35, 41, 43], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = []\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [43, 37, 41, 34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for filepath in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, ensure_ascii=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 32, 34, 43, 35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 41, 38, 35, 39, 32, 40, 34, 43], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + '/**/*.json')\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 32, 40, 34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0) # Rewrite file contents from beginning\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 41, 34, 33, 36, 42, 39, 35, 40, 32, 43], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if not KEY in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 42, 32, 33, 34, 35, 39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data, indent=4))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 38, 34, 36, 32, 41, 39, 43], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f'{directory}/**/*.json', recursive=True)\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0073320865631103516, "tests_passed": false, "error": "json.decoder.JSONDecodeError"}}
{"selected_lines": [34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0093841552734375, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.013105154037475586, "tests_passed": false, "error": "io.UnsupportedOperation"}}
{"selected_lines": [37], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if data.get(KEY) is None:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008862972259521484, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f'{directory}/*.json')\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.009259939193725586, "tests_passed": true, "error": null}}
{"selected_lines": [32, 34, 41, 37, 36, 33], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('**/*.json', recursive=True)\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 32, 40, 38, 43, 33], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f\"{directory}/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.00933074951171875, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32, 39, 40, 33, 34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('**/*.json', recursive=True)\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.013105154037475586, "tests_passed": false, "error": "io.UnsupportedOperation"}}
{"selected_lines": [36, 42, 32, 35, 43, 41, 34, 39, 37, 38, 40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '**', '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0012221336364746094, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 34, 33, 38, 35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()  # Clear the file\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 34, 37, 43, 36, 42, 39, 40, 38, 32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f'{directory}/*.json')\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if data.get(KEY) is None:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [38, 42, 33, 36, 32, 41, 40, 35, 37, 34, 39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('%s/**/*.json' % os.path.abspath(directory))\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, separators=(', ', ': '), sort_keys=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 43, 32, 40, 33, 35, 41, 37, 36, 38], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + '/**/*.json')\n    updated_files = []\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if data.get(KEY, None) is None:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=2, sort_keys=True)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.010094642639160156, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data, indent=4))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.011124134063720703, "tests_passed": false, "error": "json.decoder.JSONDecodeError"}}
{"selected_lines": [37, 38, 34, 43, 42, 36, 32, 40, 41, 39, 35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('%s/**/*.json' % os.path.abspath(directory))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)  # Move the file pointer to the beginning of the file\n                f.truncate()\n                json.dump(data, f, indent=4, ensure_ascii=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.001142740249633789, "tests_passed": true, "error": null}}
{"selected_lines": [43, 32, 42, 33, 38, 40, 39, 36, 34, 41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('**/*.json', recursive=True)\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)  # reset the file pointer to the beginning of the file\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 43, 40, 38, 36, 35, 34, 37, 32, 42, 41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f'{directory}/*.json')\n    updated_files = []\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 39, 34, 37, 40, 33, 38, 41, 43, 35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for filepath in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data, indent=4))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.011124134063720703, "tests_passed": false, "error": "json.decoder.JSONDecodeError"}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + '/**/*.json', recursive=True)\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.009073019027709961, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 43, 35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if not data.get(KEY):\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40, 35, 32, 37], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f\"{directory}/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if not data.get(KEY):\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [37, 43, 34, 38, 33, 40, 41, 36, 39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)  # Move the file pointer to the beginning of the file\n                f.write(json.dumps(data))\n                json.dump(data, f, indent=4, ensure_ascii=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.010094642639160156, "tests_passed": true, "error": null}}
{"selected_lines": [37, 32, 42, 43, 33, 41, 35, 40, 36, 34, 39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0037908554077148438, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.013105154037475586, "tests_passed": false, "error": "io.UnsupportedOperation"}}
{"selected_lines": [33], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.011023283004760742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32, 35, 34, 39, 38, 40, 37, 36, 43, 42], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 43, 32, 34, 33, 36, 42, 40, 39, 41, 38], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('./' + directory + '/*')\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0) # Rewrite file contents from beginning\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0010979175567626953, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 40, 37, 41, 35, 39, 36, 43, 33], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0) # Rewrite the file\n                f.truncate()\n                json.dump(data, f, indent=2, sort_keys=True)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0029790401458740234, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [42, 32, 33, 34, 41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f'{directory}/**/*.json', recursive=True)\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, ensure_ascii=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.010094642639160156, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 39, 36, 43, 37, 40, 32, 41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data, indent=4))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 34, 36, 33, 37, 41, 35, 39, 32, 40, 38], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data, indent=4))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.011023283004760742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if not KEY in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008289813995361328, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 38, 33, 35, 39, 41, 32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)  # Move the file pointer to the beginning of the file\n                f.truncate()\n                json.dump(data, f, indent=2, sort_keys=True)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 34, 33, 36, 32, 39, 42, 41, 43, 38], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(f'{directory}/*.json')\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data, indent=4))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40, 43, 35, 39, 34, 42, 32, 38], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 33, 34, 40, 43, 36, 37, 39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0073320865631103516, "tests_passed": false, "error": "json.decoder.JSONDecodeError"}}
{"selected_lines": [33], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.011023283004760742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008520841598510742, "tests_passed": true, "error": null}}
{"selected_lines": [34, 42, 32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + '/**/*.json')\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.007534980773925781, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 37, 32, 40, 41, 33, 42], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('./' + directory + '/*')\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()  # Clear the file\n                json.dump(data, f, indent=2, sort_keys=True)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 32, 34, 43, 35, 37], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('**/*.json', recursive=True)\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [34, 33, 35, 38, 36, 43, 39, 37, 41, 40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, ensure_ascii=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 41, 32, 34, 42, 33, 36, 39], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if data.get(KEY) is None:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.004875898361206055, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008520841598510742, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008520841598510742, "tests_passed": true, "error": null}}
{"selected_lines": [42, 39, 32, 35, 36, 40, 38, 37, 34, 33, 43], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('%s/**/*.json' % os.path.abspath(directory))\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if not data.get(KEY):\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [39, 35, 37, 32, 40, 33, 42, 38], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if data.get(KEY) is None:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data, indent=4))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 37, 34, 42, 40, 38, 39, 33, 41, 43, 36], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)  # Move the file pointer to the beginning of the file\n                f.write(json.dumps(data))\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.009982109069824219, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0093841552734375, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as json_file:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.009605884552001953, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [33], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.011023283004760742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [38, 37, 39, 35, 34, 40, 42, 32, 36, 43, 41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 40, 42, 35, 32, 37, 36], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()  # Erase the existing JSON content\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40, 38, 35, 34, 39, 41, 43, 33, 42, 37], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r') as file_:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if data.get(KEY, None) is None:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.00853109359741211, "tests_passed": true, "error": null}}
{"selected_lines": [37], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if data.get(KEY) is None:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008862972259521484, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.013105154037475586, "tests_passed": false, "error": "io.UnsupportedOperation"}}
{"selected_lines": [34, 35, 37, 32, 40, 33, 39, 41, 36, 38, 43], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + '/**/*.json')\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)  # reset the file pointer to the beginning\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0011298656463623047, "tests_passed": true, "error": null}}
{"selected_lines": [35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.013105154037475586, "tests_passed": false, "error": "io.UnsupportedOperation"}}
{"selected_lines": [33], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.011023283004760742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [38, 37, 34, 42, 35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 32, 43, 40, 42, 34, 37], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_path in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, \"*.json\"))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008520841598510742, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0093841552734375, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0073320865631103516, "tests_passed": false, "error": "json.decoder.JSONDecodeError"}}
{"selected_lines": [40, 42, 39, 43, 37, 36], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)  # Move the file pointer to the beginning of the file\n                f.truncate()  # Clear the file\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0028328895568847656, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.010094642639160156, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, separators=(', ', ': '), sort_keys=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.00834798812866211, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 43, 33], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data, indent=4))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, ensure_ascii=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.009418964385986328, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, ensure_ascii=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.009418964385986328, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 32, 36, 42, 40, 33, 43, 41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as json_file:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.011023283004760742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [33, 38, 41, 34, 42, 40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, ensure_ascii=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 35, 34, 38, 39, 36, 37, 32, 43, 33], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)  # Reset the file pointer\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32, 35, 34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('./' + directory + '/*.json')\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.write(json.dumps(data))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0073320865631103516, "tests_passed": false, "error": "json.decoder.JSONDecodeError"}}
{"selected_lines": [41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4, separators=(', ', ': '), sort_keys=False)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.00834798812866211, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.011023283004760742, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.010094642639160156, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0093841552734375, "tests_passed": false, "error": "NameError"}}
{"selected_lines": [35], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.013105154037475586, "tests_passed": false, "error": "io.UnsupportedOperation"}}
{"selected_lines": [35, 39, 33, 43, 34, 32, 41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('%s/**/*.json' % os.path.abspath(directory))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as json_file:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 36, 38, 42, 33, 39, 43], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)  # Move the file pointer to the beginning of the file\n                f.write(json.dumps(data))\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 41, 32, 39, 40, 43, 35, 33, 34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob('%s/**/*.json' % os.path.abspath(directory))\n    updated_files = 0\n    for file_name in files:\n        with open(file, 'r') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)  # reset the file pointer to the beginning of the file\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [32], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.008405923843383789, "tests_passed": true, "error": null}}
{"selected_lines": [41], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(os.path.join(directory, '*.json'))\n    updated_files = 0\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f, indent=4)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.010094642639160156, "tests_passed": true, "error": null}}
{"selected_lines": [32, 43, 35, 41, 33, 34], "result": {"code": "import json\nimport os\nimport glob\n\n\n# Constants\nKEY = 'mynewkey'\nVALUE = 'mynewvalue'\n\ndef task_func(directory):\n    \"\"\"\n    Add a new key-value pair to all JSON files in a specific directory and save the updated JSON files.\n    \n    Specifically, the function searches for all JSON files within the provided directory and \n    updates each JSON file by adding a new key-value pair ('mynewkey': 'mynewvalue') if the key \n    doesn't already exist. The function modifies the JSON files in place.\n\n    Parameters:\n    directory (str): The directory containing the JSON files.\n\n    Returns:\n    int: The number of JSON files updated.\n\n    Requirements:\n    - json\n    - os\n    - glob\n\n    Example:\n    >>> task_func('./json_files') # Random test case with no JSON files\n    0\n    \"\"\"\n    files = glob.glob(directory + \"/*.json\")\n    updated_files = []\n    for file in files:\n        with open(file, 'r+') as f:\n            data = json.load(f)\n            if KEY not in data:\n                data[KEY] = VALUE\n                f.seek(0)\n                f.truncate()\n                json.dump(data, f)\n                updated_files += 1\n    return updated_files", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
