{"selected_lines": [33, 35, 39, 44, 42, 43, 36, 40], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 44, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and less than or equal to the length of the password.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 44, 42, 40, 35, 43, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(321)\n    if length <= 0:\n        raise ValueError(\"Length of the password must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 42, 36, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length < 0 or not isinstance(num_digits, int):\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007562637329101562, "tests_passed": true, "error": null}}
{"selected_lines": [34, 40, 33, 39, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)  # Shuffle letters and digits\n    if length < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 42, 34, 38, 33, 39, 40, 44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 1 or not isinstance(length, int):\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to the total length.\")\n    password = \"\".join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 36, 38, 42, 43, 34, 44, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Invalid length: length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.choices(LETTERS, k=length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(LETTERS[random.randint(0, len(LETTERS) - 1)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 37, 34, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be a non-negative integer and less than or equal to the length of the password.\")\n    password = \"\".join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 43, 36, 37, 44, 40, 42, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num digits must be between 0 and total length of password.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005261898040771484, "tests_passed": true, "error": null}}
{"selected_lines": [36, 43, 41, 39, 44, 40, 37, 35, 33, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise Exception(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be between 0 and the length of the password.\")\n    password = []\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 43, 37, 33, 42, 36, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(3)  # Seed for reproducibility\n    if length < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 42, 36, 34, 33, 44, 41, 35, 40, 43, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if num_digits > length or num_digits < 0:\n        raise Exception('Invalid input length')\n    if num_digits < 0:\n        raise ValueError(\n    password = \"\".join([random.choice(LETTERS + DIGITS) for _ in range(length)])\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 43, 34, 35, 36, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits >= length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0005052089691162109, "tests_passed": true, "error": null}}
{"selected_lines": [36, 43, 41, 39, 44, 40, 37, 35, 33, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise Exception(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be between 0 and the length of the password.\")\n    password = []\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 43, 37, 33, 42, 36, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(3)  # Seed for reproducibility\n    if length < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 42, 36, 34, 33, 44, 41, 35, 40, 43, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if num_digits > length or num_digits < 0:\n        raise Exception('Invalid input length')\n    if num_digits < 0:\n        raise ValueError(\n    password = \"\".join([random.choice(LETTERS + DIGITS) for _ in range(length)])\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 43, 34, 35, 36, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits >= length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0005052089691162109, "tests_passed": true, "error": null}}
{"selected_lines": [36, 43, 38, 33, 44, 39, 41, 35, 40, 34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 40, 35, 37, 42, 34, 38, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits >= length or length < 0 or num_digits < 0:\n        raise ValueError(\"length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be non-negative and less than or equal to the total length of the password.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 41, 40, 34, 39, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length < 1:\n        raise ValueError(\"Invalid length: length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005130767822265625, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 42, 34, 38, 33, 39, 40, 44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 1 or not isinstance(length, int):\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to the total length.\")\n    password = \"\".join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 36, 38, 42, 43, 34, 44, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Invalid length: length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.choices(LETTERS, k=length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(LETTERS[random.randint(0, len(LETTERS) - 1)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 37, 34, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be a non-negative integer and less than or equal to the length of the password.\")\n    password = \"\".join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 43, 36, 37, 44, 40, 42, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num digits must be between 0 and total length of password.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005261898040771484, "tests_passed": true, "error": null}}
{"selected_lines": [39, 43, 35, 38, 41, 33, 36, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0:\n        raise ValueError(\"Num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007832050323486328, "tests_passed": true, "error": null}}
{"selected_lines": [42, 44, 39, 35, 41, 37, 34, 33, 38, 40, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS)\n    if length < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be non-negative and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 33, 39, 41, 35, 37, 42, 34, 36, 43, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer \"\n    password = \"\".join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 41, 43, 38, 40, 37, 44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be non-negative and less than or equal to the total length of the password.\")\n    password = random.sample(LETTERS, length - num_digits) + random.sample(DIGITS, num_digits)\n    for _ in range(length - num_digits):\n        password.append(LETTERS[random.randint(0, 51)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005700588226318359, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 44, 42, 40, 35, 33, 41, 43, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise ValueError(\"length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 36, 37, 43, 40, 42, 44, 38, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"The number of digits must be between 0 and the length of the password.\")\n    password = []\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005922317504882812, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if num_digits <= 0 or num_digits > length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 33, 41, 36, 39, 34, 44, 37, 35, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if num_digits > length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be between 0 and password length.\")\n    password = []\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005297660827636719, "tests_passed": true, "error": null}}
{"selected_lines": [34, 40, 33, 39, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)  # Shuffle letters and digits\n    if length < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 42, 34, 38, 33, 39, 40, 44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 1 or not isinstance(length, int):\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to the total length.\")\n    password = \"\".join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 36, 38, 42, 43, 34, 44, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Invalid length: length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.choices(LETTERS, k=length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(LETTERS[random.randint(0, len(LETTERS) - 1)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 37, 34, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be a non-negative integer and less than or equal to the length of the password.\")\n    password = \"\".join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 43, 36, 37, 44, 40, 42, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num digits must be between 0 and total length of password.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005261898040771484, "tests_passed": true, "error": null}}
{"selected_lines": [39, 43, 35, 38, 41, 33, 36, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0:\n        raise ValueError(\"Num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007832050323486328, "tests_passed": true, "error": null}}
{"selected_lines": [42, 44, 39, 35, 41, 37, 34, 33, 38, 40, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS)\n    if length < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be non-negative and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 33, 39, 41, 35, 37, 42, 34, 36, 43, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer \"\n    password = \"\".join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 41, 43, 38, 40, 37, 44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be non-negative and less than or equal to the total length of the password.\")\n    password = random.sample(LETTERS, length - num_digits) + random.sample(DIGITS, num_digits)\n    for _ in range(length - num_digits):\n        password.append(LETTERS[random.randint(0, 51)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005700588226318359, "tests_passed": true, "error": null}}
{"selected_lines": [41, 37, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(321)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)  # Shuffle letters and digits\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007898807525634766, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37, 34, 42, 35, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 0 or not isinstance(num_digits, int):\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be a non-negative integer and less than or equal to the total \"\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 43, 37, 42, 40, 38, 44, 36, 41, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS)\n    if length <= 0:\n        raise ValueError(\"Length of password must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be between 0 and length.\")\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 42, 39, 33, 44, 41, 40, 34, 43, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if num_digits < 0:\n        raise ValueError(\"The length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(LETTERS[random.randint(0, 51)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005917549133300781, "tests_passed": true, "error": null}}
{"selected_lines": [39, 38, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.choices(LETTERS, k=length - num_digits))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length < 1:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005431175231933594, "tests_passed": true, "error": null}}
{"selected_lines": [41, 37, 34, 38, 43, 35, 44, 40], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits <= 0:\n        raise ValueError('Length must be a positive integer.')\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be a non-negative integer and not greater than length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 42, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if not isinstance(length, int):\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be within the range [0, {length}].\".format(length=length))\n    password = ''.join(random.choices(LETTERS + DIGITS, k=length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 42, 41, 43, 40, 37, 39, 36], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 0 or not isinstance(num_digits, int):\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be between 0 and the total password length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005438327789306641, "tests_passed": true, "error": null}}
{"selected_lines": [40, 42, 37, 33, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS)\n    if length <= 0:\n        raise ValueError(\"Length of password must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be non-negative and less than or equal to the length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 43, 39, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0 or num_digits < 0 or num_digits > length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007507801055908203, "tests_passed": true, "error": null}}
{"selected_lines": [34, 41, 37, 38, 36, 43, 33, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be between 0 and the length of the password.\")\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be a non-negative integer \"\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": false, "time": 0.0001239776611328125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [38, 44, 36, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(f\"Number of digits must be within range(0, length), inclusive.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0009169578552246094, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 37, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be non-negative and less than or equal to the length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005230903625488281, "tests_passed": true, "error": null}}
{"selected_lines": [40, 42, 37, 33, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS)\n    if length <= 0:\n        raise ValueError(\"Length of password must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be non-negative and less than or equal to the length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 43, 39, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0 or num_digits < 0 or num_digits > length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007507801055908203, "tests_passed": true, "error": null}}
{"selected_lines": [34, 41, 37, 38, 36, 43, 33, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be between 0 and the length of the password.\")\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be a non-negative integer \"\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": false, "time": 0.0001239776611328125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [38, 44, 36, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(f\"Number of digits must be within range(0, length), inclusive.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0009169578552246094, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 37, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be non-negative and less than or equal to the length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005230903625488281, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005848407745361328, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 36, 44, 35, 37, 34, 40, 39, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if num_digits >= length or length < 0 or num_digits < 0:\n        raise ValueError(\"Length of password must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer \"\n    password = \"\".join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007421970367431641, "tests_passed": true, "error": null}}
{"selected_lines": [38, 39, 35, 33, 40, 37, 34, 44, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length < 1 or not isinstance(length, int):\n        raise ValueError(\"length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"The number of digits must be a non-negative integer and less than or equal to the total length.\")\n    password = \"\".join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0004889965057373047, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 42, 34, 38, 33, 39, 40, 44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 1 or not isinstance(length, int):\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to the total length.\")\n    password = \"\".join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 36, 38, 42, 43, 34, 44, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Invalid length: length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.choices(LETTERS, k=length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(LETTERS[random.randint(0, len(LETTERS) - 1)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 37, 34, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be a non-negative integer and less than or equal to the length of the password.\")\n    password = \"\".join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 43, 36, 37, 44, 40, 42, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num digits must be between 0 and total length of password.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005261898040771484, "tests_passed": true, "error": null}}
{"selected_lines": [39, 43, 35, 38, 41, 33, 36, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0:\n        raise ValueError(\"Num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007832050323486328, "tests_passed": true, "error": null}}
{"selected_lines": [42, 44, 39, 35, 41, 37, 34, 33, 38, 40, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS)\n    if length < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be non-negative and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 33, 39, 41, 35, 37, 42, 34, 36, 43, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer \"\n    password = \"\".join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 41, 43, 38, 40, 37, 44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be non-negative and less than or equal to the total length of the password.\")\n    password = random.sample(LETTERS, length - num_digits) + random.sample(DIGITS, num_digits)\n    for _ in range(length - num_digits):\n        password.append(LETTERS[random.randint(0, 51)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005700588226318359, "tests_passed": true, "error": null}}
{"selected_lines": [41, 37, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(321)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)  # Shuffle letters and digits\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007898807525634766, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37, 34, 42, 35, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 0 or not isinstance(num_digits, int):\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be a non-negative integer and less than or equal to the total \"\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 43, 37, 42, 40, 38, 44, 36, 41, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS)\n    if length <= 0:\n        raise ValueError(\"Length of password must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be between 0 and length.\")\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 42, 39, 33, 44, 41, 40, 34, 43, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if num_digits < 0:\n        raise ValueError(\"The length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(LETTERS[random.randint(0, 51)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005917549133300781, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 41, 33, 39, 38, 37, 35, 43, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length <= 0:\n        raise ValueError(\"length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and less than or equal to the total \"\n    password = ''.join(random.choices(LETTERS, k=length - num_digits))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 39, 44, 43, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\n    password = []\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 35, 41, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length <= 0:\n        raise Exception('Invalid input length')\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 39, 42, 36, 40, 33, 38, 41, 35, 37, 34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0 or num_digits < 0 or num_digits > length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num digits must be a non-negative integer and\"\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 35, 38, 39, 36, 43, 44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Invalid input: length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join([random.choice(LETTERS + DIGITS) for _ in range(length)])\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 36, 34, 33, 44, 43, 38, 37, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if num_digits > length:\n        raise Exception(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be non-negative and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 36, 40, 35, 43, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits < 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be within the range [0, {length}].\".format(length=length))\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005371570587158203, "tests_passed": true, "error": null}}
{"selected_lines": [40, 42, 37, 33, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS)\n    if length <= 0:\n        raise ValueError(\"Length of password must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be non-negative and less than or equal to the length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 43, 39, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0 or num_digits < 0 or num_digits > length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007507801055908203, "tests_passed": true, "error": null}}
{"selected_lines": [34, 41, 37, 38, 36, 43, 33, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be between 0 and the length of the password.\")\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be a non-negative integer \"\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": false, "time": 0.0001239776611328125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [38, 44, 36, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(f\"Number of digits must be within range(0, length), inclusive.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0009169578552246094, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 37, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be non-negative and less than or equal to the length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005230903625488281, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005848407745361328, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 36, 38, 42, 41, 40, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to the total length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length):\n        password.append(LETTERS[random.randint(0, len(LETTERS) - 1)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 37, 42, 39, 44, 35, 34, 38, 36, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 1:\n        raise ValueError(\"The length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num digits must be between 0 and total length of password.\")\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 39, 43, 40, 37, 41, 33, 38, 35, 36, 44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 0:\n        raise ValueError(\"length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to length.\")\n    password = \"\".join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 34, 37, 44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 1 or not isinstance(length, int):\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be between 0 and password length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005002021789550781, "tests_passed": true, "error": null}}
{"selected_lines": [36, 43, 41, 39, 44, 40, 37, 35, 33, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise Exception(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be between 0 and the length of the password.\")\n    password = []\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 43, 37, 33, 42, 36, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(3)  # Seed for reproducibility\n    if length < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 42, 36, 34, 33, 44, 41, 35, 40, 43, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if num_digits > length or num_digits < 0:\n        raise Exception('Invalid input length')\n    if num_digits < 0:\n        raise ValueError(\n    password = \"\".join([random.choice(LETTERS + DIGITS) for _ in range(length)])\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 43, 34, 35, 36, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits >= length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0005052089691162109, "tests_passed": true, "error": null}}
{"selected_lines": [36, 43, 38, 33, 44, 39, 41, 35, 40, 34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 40, 35, 37, 42, 34, 38, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits >= length or length < 0 or num_digits < 0:\n        raise ValueError(\"length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be non-negative and less than or equal to the total length of the password.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 41, 40, 34, 39, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length < 1:\n        raise ValueError(\"Invalid length: length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005130767822265625, "tests_passed": true, "error": null}}
{"selected_lines": [42, 34, 39, 44, 40, 37, 35, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 38, 34, 37, 39, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits > length or num_digits < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to the total length.\")\n    password = \"\".join(random.choice(LETTERS) for i in range(length - num_digits))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 41, 34, 37, 36, 42, 44, 39, 33, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if num_digits <= 0:\n        raise Exception(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be within the range [0, {length}].\".format(length=length))\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 42, 34, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 0 or not isinstance(num_digits, int):\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 44, 40, 41, 43, 42, 37, 38, 36, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 44, 34, 36, 43, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if num_digits > length or num_digits < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if not isinstance(length, int):\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007448196411132812, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if num_digits >= length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 41, 35, 40, 44, 39, 43, 38, 34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0 or num_digits < 0 or num_digits > length:\n        raise ValueError('Length must be a positive integer.')\n    if num_digits < 0:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0007498264312744141, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\"\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.00080108642578125, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [36, 44, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0004968643188476562, "tests_passed": true, "error": null}}
{"selected_lines": [36, 43, 41, 39, 44, 40, 37, 35, 33, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise Exception(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be between 0 and the length of the password.\")\n    password = []\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 43, 37, 33, 42, 36, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(3)  # Seed for reproducibility\n    if length < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 42, 36, 34, 33, 44, 41, 35, 40, 43, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if num_digits > length or num_digits < 0:\n        raise Exception('Invalid input length')\n    if num_digits < 0:\n        raise ValueError(\n    password = \"\".join([random.choice(LETTERS + DIGITS) for _ in range(length)])\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 43, 34, 35, 36, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits >= length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0005052089691162109, "tests_passed": true, "error": null}}
{"selected_lines": [36, 43, 38, 33, 44, 39, 41, 35, 40, 34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 40, 35, 37, 42, 34, 38, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits >= length or length < 0 or num_digits < 0:\n        raise ValueError(\"length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be non-negative and less than or equal to the total length of the password.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 41, 40, 34, 39, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length < 1:\n        raise ValueError(\"Invalid length: length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005130767822265625, "tests_passed": true, "error": null}}
{"selected_lines": [42, 34, 39, 44, 40, 37, 35, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 38, 34, 37, 39, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits > length or num_digits < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to the total length.\")\n    password = \"\".join(random.choice(LETTERS) for i in range(length - num_digits))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 41, 34, 37, 36, 42, 44, 39, 33, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if num_digits <= 0:\n        raise Exception(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be within the range [0, {length}].\".format(length=length))\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 42, 34, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 0 or not isinstance(num_digits, int):\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 44, 40, 41, 43, 42, 37, 38, 36, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 44, 34, 36, 43, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if num_digits > length or num_digits < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if not isinstance(length, int):\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007448196411132812, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if num_digits >= length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 41, 35, 40, 44, 39, 43, 38, 34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0 or num_digits < 0 or num_digits > length:\n        raise ValueError('Length must be a positive integer.')\n    if num_digits < 0:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0007498264312744141, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\"\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.00080108642578125, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [36, 44, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0004968643188476562, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 40, 36, 34, 41, 43, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)  # Shuffle letters and digits\n    if num_digits <= 0:\n        raise ValueError(\"length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(f\"Number of digits must be within range(0, length), inclusive.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(LETTERS[random.randint(0, 51)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 40, 42, 36], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005271434783935547, "tests_passed": true, "error": null}}
{"selected_lines": [40, 42, 37, 33, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS)\n    if length <= 0:\n        raise ValueError(\"Length of password must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be non-negative and less than or equal to the length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 43, 39, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0 or num_digits < 0 or num_digits > length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007507801055908203, "tests_passed": true, "error": null}}
{"selected_lines": [34, 41, 37, 38, 36, 43, 33, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be between 0 and the length of the password.\")\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be a non-negative integer \"\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": false, "time": 0.0001239776611328125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [38, 44, 36, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(f\"Number of digits must be within range(0, length), inclusive.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0009169578552246094, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 37, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be non-negative and less than or equal to the length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005230903625488281, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005848407745361328, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 36, 38, 42, 41, 40, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to the total length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length):\n        password.append(LETTERS[random.randint(0, len(LETTERS) - 1)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 37, 42, 39, 44, 35, 34, 38, 36, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 1:\n        raise ValueError(\"The length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num digits must be between 0 and total length of password.\")\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 39, 43, 40, 37, 41, 33, 38, 35, 36, 44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 0:\n        raise ValueError(\"length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to length.\")\n    password = \"\".join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 34, 37, 44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 1 or not isinstance(length, int):\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be between 0 and password length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005002021789550781, "tests_passed": true, "error": null}}
{"selected_lines": [41, 44, 33, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 33, 43, 34, 42, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(321)\n    if num_digits > length or num_digits < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length of the password must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007410049438476562, "tests_passed": true, "error": null}}
{"selected_lines": [36, 41, 44, 37, 39, 38, 40, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"length must be a positive integer\")\n    if num_digits < 0:\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 42, 41, 36, 43, 44, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0005927085876464844, "tests_passed": true, "error": null}}
{"selected_lines": [35, 34, 38, 36, 41, 37, 33, 42, 43, 40, 44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(3)  # Seed for reproducibility\n    if num_digits > length or num_digits < 0:\n        raise ValueError(\"length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num digits must be a non-negative integer and\"\n    password = list(random.choices(LETTERS + DIGITS, k=length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 42, 34, 41, 43, 37, 35, 39, 33, 40, 44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and \"\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 33, 39, 44, 35, 38, 36, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise Exception('Invalid input length')\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 38, 37, 42, 36], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0:\n        raise ValueError(\"Number of digits must be between 0 and password length.\")\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 41, 38, 37, 33, 39, 40, 42, 35, 34, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()  # Ensure the same random number generation\n    if num_digits > length or num_digits < 0:\n        raise ValueError(\"Invalid length: length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be non-negative and less than or equal to the length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 42, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()  # Ensure the same random number generation\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005393028259277344, "tests_passed": true, "error": null}}
{"selected_lines": [40, 38, 36, 37, 34, 44, 39, 41, 43, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 0:\n        raise Exception(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and \"\n    password = random.sample(LETTERS, length - num_digits) + random.sample(DIGITS, num_digits)\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 39, 43, 41, 40, 42, 35, 33, 44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS+DIGITS)\n    if length <= 0:\n        raise Exception(\"Password length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be between 0 and the length of the password.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007321834564208984, "tests_passed": true, "error": null}}
{"selected_lines": [43, 39, 37, 40, 44, 35, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be within the range [0, length].\")\n    password = ''.join(random.choices(LETTERS + DIGITS, k=length))\n    for _ in range(length - num_digits):\n        password.append(LETTERS[random.randint(0, len(LETTERS) - 1)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError('Length must be a positive integer.')\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007469654083251953, "tests_passed": true, "error": null}}
{"selected_lines": [36, 34, 37, 40, 42, 35, 33, 43, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Invalid input: length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(f\"Number of digits must be within range(0, length), inclusive.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005412101745605469, "tests_passed": true, "error": null}}
{"selected_lines": [36, 37, 44, 40, 38, 33, 43, 41, 35, 34, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(15122022)\n    if num_digits <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer \"\n    password = \"\"\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0006847381591796875, "tests_passed": true, "error": null}}
{"selected_lines": [34, 36, 33, 42, 37, 38, 43, 35, 39, 44, 40], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(321)\n    if num_digits < 0:\n        raise ValueError(\"length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(f\"Number of digits must be within range(0, length), inclusive.\")\n    password = ''.join(random.choice(LETTERS) for i in range(length - num_digits))\n    for _ in range(length):\n        password.append(LETTERS[random.randint(0, len(LETTERS) - 1)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 36, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0004868507385253906, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 42, 34, 38, 33, 39, 40, 44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 1 or not isinstance(length, int):\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to the total length.\")\n    password = \"\".join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 36, 38, 42, 43, 34, 44, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Invalid length: length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.choices(LETTERS, k=length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(LETTERS[random.randint(0, len(LETTERS) - 1)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 37, 34, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be a non-negative integer and less than or equal to the length of the password.\")\n    password = \"\".join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 43, 36, 37, 44, 40, 42, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num digits must be between 0 and total length of password.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005261898040771484, "tests_passed": true, "error": null}}
{"selected_lines": [39, 43, 35, 38, 41, 33, 36, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0:\n        raise ValueError(\"Num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007832050323486328, "tests_passed": true, "error": null}}
{"selected_lines": [42, 44, 39, 35, 41, 37, 34, 33, 38, 40, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS)\n    if length < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be non-negative and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 33, 39, 41, 35, 37, 42, 34, 36, 43, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer \"\n    password = \"\".join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 41, 43, 38, 40, 37, 44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be non-negative and less than or equal to the total length of the password.\")\n    password = random.sample(LETTERS, length - num_digits) + random.sample(DIGITS, num_digits)\n    for _ in range(length - num_digits):\n        password.append(LETTERS[random.randint(0, 51)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005700588226318359, "tests_passed": true, "error": null}}
{"selected_lines": [41, 37, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(321)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)  # Shuffle letters and digits\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007898807525634766, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37, 34, 42, 35, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 0 or not isinstance(num_digits, int):\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be a non-negative integer and less than or equal to the total \"\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 43, 37, 42, 40, 38, 44, 36, 41, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS)\n    if length <= 0:\n        raise ValueError(\"Length of password must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be between 0 and length.\")\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 42, 39, 33, 44, 41, 40, 34, 43, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if num_digits < 0:\n        raise ValueError(\"The length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(LETTERS[random.randint(0, 51)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005917549133300781, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 41, 33, 39, 38, 37, 35, 43, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length <= 0:\n        raise ValueError(\"length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and less than or equal to the total \"\n    password = ''.join(random.choices(LETTERS, k=length - num_digits))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 39, 44, 43, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\n    password = []\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 35, 41, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length <= 0:\n        raise Exception('Invalid input length')\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 39, 42, 36, 40, 33, 38, 41, 35, 37, 34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0 or num_digits < 0 or num_digits > length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num digits must be a non-negative integer and\"\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 35, 38, 39, 36, 43, 44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Invalid input: length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join([random.choice(LETTERS + DIGITS) for _ in range(length)])\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 36, 34, 33, 44, 43, 38, 37, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if num_digits > length:\n        raise Exception(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be non-negative and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 36, 40, 35, 43, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits < 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be within the range [0, {length}].\".format(length=length))\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005371570587158203, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 34, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits > length or num_digits < 0:\n        raise ValueError(\"length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 38, 43, 44, 36, 35, 33, 41, 40, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length < 0:\n        raise ValueError(\"Invalid input: length must be a positive integer.\")\n    if num_digits < 0:\n        raise ValueError(\n    password = \"\".join(random.choice(LETTERS) for i in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 39, 35, 34, 40], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 1:\n        raise ValueError(\"Length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005366802215576172, "tests_passed": true, "error": null}}
{"selected_lines": [40, 42, 37, 33, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS)\n    if length <= 0:\n        raise ValueError(\"Length of password must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be non-negative and less than or equal to the length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 43, 39, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0 or num_digits < 0 or num_digits > length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007507801055908203, "tests_passed": true, "error": null}}
{"selected_lines": [34, 41, 37, 38, 36, 43, 33, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be between 0 and the length of the password.\")\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be a non-negative integer \"\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": false, "time": 0.0001239776611328125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [38, 44, 36, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(f\"Number of digits must be within range(0, length), inclusive.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0009169578552246094, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 37, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be non-negative and less than or equal to the length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005230903625488281, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005848407745361328, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 36, 38, 42, 41, 40, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to the total length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length):\n        password.append(LETTERS[random.randint(0, len(LETTERS) - 1)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 37, 42, 39, 44, 35, 34, 38, 36, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 1:\n        raise ValueError(\"The length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num digits must be between 0 and total length of password.\")\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 39, 43, 40, 37, 41, 33, 38, 35, 36, 44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 0:\n        raise ValueError(\"length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to length.\")\n    password = \"\".join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 34, 37, 44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 1 or not isinstance(length, int):\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be between 0 and password length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005002021789550781, "tests_passed": true, "error": null}}
{"selected_lines": [41, 44, 33, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 33, 43, 34, 42, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(321)\n    if num_digits > length or num_digits < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length of the password must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007410049438476562, "tests_passed": true, "error": null}}
{"selected_lines": [36, 41, 44, 37, 39, 38, 40, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"length must be a positive integer\")\n    if num_digits < 0:\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 42, 41, 36, 43, 44, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0005927085876464844, "tests_passed": true, "error": null}}
{"selected_lines": [34, 41, 36, 37, 40, 44, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 1:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to the total length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005040168762207031, "tests_passed": true, "error": null}}
{"selected_lines": [36, 43, 41, 39, 44, 40, 37, 35, 33, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise Exception(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be between 0 and the length of the password.\")\n    password = []\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 43, 37, 33, 42, 36, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(3)  # Seed for reproducibility\n    if length < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 42, 36, 34, 33, 44, 41, 35, 40, 43, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if num_digits > length or num_digits < 0:\n        raise Exception('Invalid input length')\n    if num_digits < 0:\n        raise ValueError(\n    password = \"\".join([random.choice(LETTERS + DIGITS) for _ in range(length)])\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 43, 34, 35, 36, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits >= length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0005052089691162109, "tests_passed": true, "error": null}}
{"selected_lines": [36, 43, 38, 33, 44, 39, 41, 35, 40, 34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 40, 35, 37, 42, 34, 38, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits >= length or length < 0 or num_digits < 0:\n        raise ValueError(\"length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be non-negative and less than or equal to the total length of the password.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 41, 40, 34, 39, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length < 1:\n        raise ValueError(\"Invalid length: length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005130767822265625, "tests_passed": true, "error": null}}
{"selected_lines": [42, 34, 39, 44, 40, 37, 35, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 38, 34, 37, 39, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits > length or num_digits < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to the total length.\")\n    password = \"\".join(random.choice(LETTERS) for i in range(length - num_digits))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 41, 34, 37, 36, 42, 44, 39, 33, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if num_digits <= 0:\n        raise Exception(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be within the range [0, {length}].\".format(length=length))\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 42, 34, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 0 or not isinstance(num_digits, int):\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 44, 40, 41, 43, 42, 37, 38, 36, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 44, 34, 36, 43, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if num_digits > length or num_digits < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if not isinstance(length, int):\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007448196411132812, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if num_digits >= length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 41, 35, 40, 44, 39, 43, 38, 34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0 or num_digits < 0 or num_digits > length:\n        raise ValueError('Length must be a positive integer.')\n    if num_digits < 0:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0007498264312744141, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\"\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.00080108642578125, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [36, 44, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0004968643188476562, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 40, 36, 34, 41, 43, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)  # Shuffle letters and digits\n    if num_digits <= 0:\n        raise ValueError(\"length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(f\"Number of digits must be within range(0, length), inclusive.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(LETTERS[random.randint(0, 51)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 40, 42, 36], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005271434783935547, "tests_passed": true, "error": null}}
{"selected_lines": [33, 39, 37, 40, 42, 36, 38, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choices(LETTERS + DIGITS, k=length))\n    for _ in range(length):\n        password.append(LETTERS[random.randint(0, len(LETTERS) - 1)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 41, 33, 38, 42, 40, 37, 36, 34, 39, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(321)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and \"\n    password = ''\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 42, 43, 33, 34, 44, 38, 37, 35, 40, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if num_digits >= length:\n        raise ValueError(\"The length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\n    password = ''.join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 40, 44, 41, 37, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS)\n    if length < 1:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to the total length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(LETTERS[random.randint(0, len(LETTERS) - 1)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 35, 40, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"The length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\n    password = ''\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 43, 34, 35, 44, 33, 39, 40, 42, 36], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 1 or not isinstance(length, int):\n        raise ValueError(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and less than or equal to the total \"\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 33, 34, 39, 44, 35, 42, 43, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if num_digits >= length:\n        raise ValueError('Length must be a positive integer')\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be between 0 and password length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 43, 35, 44, 39, 41, 37, 42, 36], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if not isinstance(length, int):\n        raise Exception('Invalid input length')\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and \"\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 43, 44, 34, 38, 39, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and not greater than length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 44, 39, 33, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length <= 0:\n        raise ValueError(\"length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.000576019287109375, "tests_passed": true, "error": null}}
{"selected_lines": [34, 40, 33, 39, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)  # Shuffle letters and digits\n    if length < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 42, 34, 38, 33, 39, 40, 44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 1 or not isinstance(length, int):\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to the total length.\")\n    password = \"\".join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 36, 38, 42, 43, 34, 44, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Invalid length: length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.choices(LETTERS, k=length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(LETTERS[random.randint(0, len(LETTERS) - 1)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 37, 34, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be a non-negative integer and less than or equal to the length of the password.\")\n    password = \"\".join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 43, 36, 37, 44, 40, 42, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num digits must be between 0 and total length of password.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005261898040771484, "tests_passed": true, "error": null}}
{"selected_lines": [39, 43, 35, 38, 41, 33, 36, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0:\n        raise ValueError(\"Num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007832050323486328, "tests_passed": true, "error": null}}
{"selected_lines": [42, 44, 39, 35, 41, 37, 34, 33, 38, 40, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS)\n    if length < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be non-negative and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 33, 39, 41, 35, 37, 42, 34, 36, 43, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer \"\n    password = \"\".join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 41, 43, 38, 40, 37, 44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be non-negative and less than or equal to the total length of the password.\")\n    password = random.sample(LETTERS, length - num_digits) + random.sample(DIGITS, num_digits)\n    for _ in range(length - num_digits):\n        password.append(LETTERS[random.randint(0, 51)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005700588226318359, "tests_passed": true, "error": null}}
{"selected_lines": [41, 37, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(321)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)  # Shuffle letters and digits\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007898807525634766, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37, 34, 42, 35, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 0 or not isinstance(num_digits, int):\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be a non-negative integer and less than or equal to the total \"\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 43, 37, 42, 40, 38, 44, 36, 41, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS)\n    if length <= 0:\n        raise ValueError(\"Length of password must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be between 0 and length.\")\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 42, 39, 33, 44, 41, 40, 34, 43, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if num_digits < 0:\n        raise ValueError(\"The length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(LETTERS[random.randint(0, 51)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005917549133300781, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 41, 33, 39, 38, 37, 35, 43, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length <= 0:\n        raise ValueError(\"length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and less than or equal to the total \"\n    password = ''.join(random.choices(LETTERS, k=length - num_digits))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 39, 44, 43, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\n    password = []\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 35, 41, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length <= 0:\n        raise Exception('Invalid input length')\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 39, 42, 36, 40, 33, 38, 41, 35, 37, 34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0 or num_digits < 0 or num_digits > length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num digits must be a non-negative integer and\"\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 35, 38, 39, 36, 43, 44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Invalid input: length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join([random.choice(LETTERS + DIGITS) for _ in range(length)])\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 36, 34, 33, 44, 43, 38, 37, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if num_digits > length:\n        raise Exception(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be non-negative and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 36, 40, 35, 43, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits < 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be within the range [0, {length}].\".format(length=length))\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005371570587158203, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 34, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits > length or num_digits < 0:\n        raise ValueError(\"length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 38, 43, 44, 36, 35, 33, 41, 40, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length < 0:\n        raise ValueError(\"Invalid input: length must be a positive integer.\")\n    if num_digits < 0:\n        raise ValueError(\n    password = \"\".join(random.choice(LETTERS) for i in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 39, 35, 34, 40], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 1:\n        raise ValueError(\"Length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005366802215576172, "tests_passed": true, "error": null}}
{"selected_lines": [39, 44, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0005440711975097656, "tests_passed": true, "error": null}}
{"selected_lines": [40, 42, 37, 33, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS)\n    if length <= 0:\n        raise ValueError(\"Length of password must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be non-negative and less than or equal to the length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 43, 39, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0 or num_digits < 0 or num_digits > length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007507801055908203, "tests_passed": true, "error": null}}
{"selected_lines": [34, 41, 37, 38, 36, 43, 33, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be between 0 and the length of the password.\")\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be a non-negative integer \"\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": false, "time": 0.0001239776611328125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [38, 44, 36, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(f\"Number of digits must be within range(0, length), inclusive.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0009169578552246094, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 37, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be non-negative and less than or equal to the length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005230903625488281, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005848407745361328, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 36, 38, 42, 41, 40, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to the total length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length):\n        password.append(LETTERS[random.randint(0, len(LETTERS) - 1)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 37, 42, 39, 44, 35, 34, 38, 36, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 1:\n        raise ValueError(\"The length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num digits must be between 0 and total length of password.\")\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 39, 43, 40, 37, 41, 33, 38, 35, 36, 44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 0:\n        raise ValueError(\"length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to length.\")\n    password = \"\".join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 34, 37, 44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 1 or not isinstance(length, int):\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be between 0 and password length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005002021789550781, "tests_passed": true, "error": null}}
{"selected_lines": [41, 44, 33, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 33, 43, 34, 42, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(321)\n    if num_digits > length or num_digits < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length of the password must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007410049438476562, "tests_passed": true, "error": null}}
{"selected_lines": [36, 41, 44, 37, 39, 38, 40, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"length must be a positive integer\")\n    if num_digits < 0:\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 42, 41, 36, 43, 44, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0005927085876464844, "tests_passed": true, "error": null}}
{"selected_lines": [34, 41, 36, 37, 40, 44, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 1:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to the total length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005040168762207031, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 36, 34, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.00046706199645996094, "tests_passed": true, "error": null}}
{"selected_lines": [33, 34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if num_digits <= 0 or num_digits > length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 33, 41, 36, 39, 34, 44, 37, 35, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if num_digits > length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be between 0 and password length.\")\n    password = []\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005297660827636719, "tests_passed": true, "error": null}}
{"selected_lines": [34, 44, 39, 43, 38, 42, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 0:\n        raise Exception(\"Password length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005309581756591797, "tests_passed": true, "error": null}}
{"selected_lines": [40, 42, 37, 33, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS)\n    if length <= 0:\n        raise ValueError(\"Length of password must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be non-negative and less than or equal to the length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 43, 39, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0 or num_digits < 0 or num_digits > length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007507801055908203, "tests_passed": true, "error": null}}
{"selected_lines": [34, 41, 37, 38, 36, 43, 33, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be between 0 and the length of the password.\")\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be a non-negative integer \"\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": false, "time": 0.0001239776611328125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [38, 44, 36, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(f\"Number of digits must be within range(0, length), inclusive.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0009169578552246094, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 37, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be non-negative and less than or equal to the length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005230903625488281, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005848407745361328, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 36, 38, 42, 41, 40, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to the total length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length):\n        password.append(LETTERS[random.randint(0, len(LETTERS) - 1)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 37, 42, 39, 44, 35, 34, 38, 36, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 1:\n        raise ValueError(\"The length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num digits must be between 0 and total length of password.\")\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 39, 43, 40, 37, 41, 33, 38, 35, 36, 44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 0:\n        raise ValueError(\"length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to length.\")\n    password = \"\".join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 34, 37, 44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 1 or not isinstance(length, int):\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be between 0 and password length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005002021789550781, "tests_passed": true, "error": null}}
{"selected_lines": [41, 44, 33, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 33, 43, 34, 42, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(321)\n    if num_digits > length or num_digits < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length of the password must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007410049438476562, "tests_passed": true, "error": null}}
{"selected_lines": [36, 41, 44, 37, 39, 38, 40, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"length must be a positive integer\")\n    if num_digits < 0:\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 42, 41, 36, 43, 44, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0005927085876464844, "tests_passed": true, "error": null}}
{"selected_lines": [34, 41, 36, 37, 40, 44, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 1:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to the total length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005040168762207031, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 36, 34, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.00046706199645996094, "tests_passed": true, "error": null}}
{"selected_lines": [44, 33, 34, 43, 39, 38, 35, 41, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if num_digits > length or num_digits < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 40, 41, 44, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(321)\n    if num_digits > length or num_digits < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(LETTERS[random.randint(0, 51)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0005087852478027344, "tests_passed": true, "error": null}}
{"selected_lines": [42, 40, 36, 34, 44, 41, 35, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits > length:\n        raise ValueError('Length must be a positive integer')\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0004892349243164062, "tests_passed": true, "error": null}}
{"selected_lines": [36, 43, 41, 39, 44, 40, 37, 35, 33, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise Exception(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be between 0 and the length of the password.\")\n    password = []\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 43, 37, 33, 42, 36, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(3)  # Seed for reproducibility\n    if length < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 42, 36, 34, 33, 44, 41, 35, 40, 43, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if num_digits > length or num_digits < 0:\n        raise Exception('Invalid input length')\n    if num_digits < 0:\n        raise ValueError(\n    password = \"\".join([random.choice(LETTERS + DIGITS) for _ in range(length)])\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 43, 34, 35, 36, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits >= length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0005052089691162109, "tests_passed": true, "error": null}}
{"selected_lines": [36, 43, 38, 33, 44, 39, 41, 35, 40, 34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 40, 35, 37, 42, 34, 38, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits >= length or length < 0 or num_digits < 0:\n        raise ValueError(\"length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be non-negative and less than or equal to the total length of the password.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 41, 40, 34, 39, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length < 1:\n        raise ValueError(\"Invalid length: length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005130767822265625, "tests_passed": true, "error": null}}
{"selected_lines": [42, 34, 39, 44, 40, 37, 35, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 38, 34, 37, 39, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits > length or num_digits < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to the total length.\")\n    password = \"\".join(random.choice(LETTERS) for i in range(length - num_digits))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 41, 34, 37, 36, 42, 44, 39, 33, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if num_digits <= 0:\n        raise Exception(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be within the range [0, {length}].\".format(length=length))\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 42, 34, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 0 or not isinstance(num_digits, int):\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 44, 40, 41, 43, 42, 37, 38, 36, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 44, 34, 36, 43, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if num_digits > length or num_digits < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if not isinstance(length, int):\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007448196411132812, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if num_digits >= length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 41, 35, 40, 44, 39, 43, 38, 34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0 or num_digits < 0 or num_digits > length:\n        raise ValueError('Length must be a positive integer.')\n    if num_digits < 0:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0007498264312744141, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\"\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.00080108642578125, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [36, 44, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0004968643188476562, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 40, 36, 34, 41, 43, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)  # Shuffle letters and digits\n    if num_digits <= 0:\n        raise ValueError(\"length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(f\"Number of digits must be within range(0, length), inclusive.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(LETTERS[random.randint(0, 51)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 40, 42, 36], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005271434783935547, "tests_passed": true, "error": null}}
{"selected_lines": [33, 39, 37, 40, 42, 36, 38, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choices(LETTERS + DIGITS, k=length))\n    for _ in range(length):\n        password.append(LETTERS[random.randint(0, len(LETTERS) - 1)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 41, 33, 38, 42, 40, 37, 36, 34, 39, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(321)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and \"\n    password = ''\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 42, 43, 33, 34, 44, 38, 37, 35, 40, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if num_digits >= length:\n        raise ValueError(\"The length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\n    password = ''.join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 40, 44, 41, 37, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS)\n    if length < 1:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to the total length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(LETTERS[random.randint(0, len(LETTERS) - 1)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 35, 40, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"The length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\n    password = ''\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 43, 34, 35, 44, 33, 39, 40, 42, 36], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 1 or not isinstance(length, int):\n        raise ValueError(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and less than or equal to the total \"\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 33, 34, 39, 44, 35, 42, 43, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if num_digits >= length:\n        raise ValueError('Length must be a positive integer')\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be between 0 and password length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 43, 35, 44, 39, 41, 37, 42, 36], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if not isinstance(length, int):\n        raise Exception('Invalid input length')\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and \"\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 43, 44, 34, 38, 39, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and not greater than length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 44, 39, 33, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length <= 0:\n        raise ValueError(\"length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.000576019287109375, "tests_passed": true, "error": null}}
{"selected_lines": [43, 36, 37, 35, 34, 44, 33, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()  # Ensure the same random number generation\n    if length < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0:\n        raise ValueError(\"Number of digits must be a non-negative integer \"\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 44, 39, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(15122022)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 41, 39, 44, 38, 33, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 43, 44, 34, 36, 37, 40, 35, 33, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if num_digits > length or num_digits < 0:\n        raise ValueError(\"length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and less than or equal to the length of the password.\")\n    password = \"\".join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 38, 42, 43, 41, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005640983581542969, "tests_passed": true, "error": null}}
{"selected_lines": [36, 43, 41, 39, 44, 40, 37, 35, 33, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise Exception(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be between 0 and the length of the password.\")\n    password = []\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 43, 37, 33, 42, 36, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(3)  # Seed for reproducibility\n    if length < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 42, 36, 34, 33, 44, 41, 35, 40, 43, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if num_digits > length or num_digits < 0:\n        raise Exception('Invalid input length')\n    if num_digits < 0:\n        raise ValueError(\n    password = \"\".join([random.choice(LETTERS + DIGITS) for _ in range(length)])\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 43, 34, 35, 36, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits >= length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0005052089691162109, "tests_passed": true, "error": null}}
{"selected_lines": [36, 43, 38, 33, 44, 39, 41, 35, 40, 34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 40, 35, 37, 42, 34, 38, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits >= length or length < 0 or num_digits < 0:\n        raise ValueError(\"length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be non-negative and less than or equal to the total length of the password.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 41, 40, 34, 39, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length < 1:\n        raise ValueError(\"Invalid length: length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005130767822265625, "tests_passed": true, "error": null}}
{"selected_lines": [42, 34, 39, 44, 40, 37, 35, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 38, 34, 37, 39, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits > length or num_digits < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to the total length.\")\n    password = \"\".join(random.choice(LETTERS) for i in range(length - num_digits))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 41, 34, 37, 36, 42, 44, 39, 33, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if num_digits <= 0:\n        raise Exception(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be within the range [0, {length}].\".format(length=length))\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 42, 34, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 0 or not isinstance(num_digits, int):\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 44, 40, 41, 43, 42, 37, 38, 36, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 44, 34, 36, 43, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if num_digits > length or num_digits < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if not isinstance(length, int):\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007448196411132812, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if num_digits >= length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 41, 35, 40, 44, 39, 43, 38, 34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0 or num_digits < 0 or num_digits > length:\n        raise ValueError('Length must be a positive integer.')\n    if num_digits < 0:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0007498264312744141, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\"\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.00080108642578125, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [36, 44, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0004968643188476562, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 40, 36, 34, 41, 43, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)  # Shuffle letters and digits\n    if num_digits <= 0:\n        raise ValueError(\"length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(f\"Number of digits must be within range(0, length), inclusive.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(LETTERS[random.randint(0, 51)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 40, 42, 36], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005271434783935547, "tests_passed": true, "error": null}}
{"selected_lines": [33, 39, 37, 40, 42, 36, 38, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choices(LETTERS + DIGITS, k=length))\n    for _ in range(length):\n        password.append(LETTERS[random.randint(0, len(LETTERS) - 1)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 41, 33, 38, 42, 40, 37, 36, 34, 39, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(321)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and \"\n    password = ''\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 42, 43, 33, 34, 44, 38, 37, 35, 40, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if num_digits >= length:\n        raise ValueError(\"The length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\n    password = ''.join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 40, 44, 41, 37, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS)\n    if length < 1:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to the total length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(LETTERS[random.randint(0, len(LETTERS) - 1)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 35, 40, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"The length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\n    password = ''\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 43, 34, 35, 44, 33, 39, 40, 42, 36], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 1 or not isinstance(length, int):\n        raise ValueError(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and less than or equal to the total \"\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 33, 34, 39, 44, 35, 42, 43, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if num_digits >= length:\n        raise ValueError('Length must be a positive integer')\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be between 0 and password length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 43, 35, 44, 39, 41, 37, 42, 36], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if not isinstance(length, int):\n        raise Exception('Invalid input length')\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and \"\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 43, 44, 34, 38, 39, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and not greater than length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 44, 39, 33, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length <= 0:\n        raise ValueError(\"length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.000576019287109375, "tests_passed": true, "error": null}}
{"selected_lines": [43, 36, 37, 35, 34, 44, 33, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()  # Ensure the same random number generation\n    if length < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0:\n        raise ValueError(\"Number of digits must be a non-negative integer \"\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 44, 39, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(15122022)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 41, 39, 44, 38, 33, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 43, 44, 34, 36, 37, 40, 35, 33, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if num_digits > length or num_digits < 0:\n        raise ValueError(\"length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and less than or equal to the length of the password.\")\n    password = \"\".join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 38, 42, 43, 41, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005640983581542969, "tests_passed": true, "error": null}}
{"selected_lines": [41, 35, 36, 39, 44, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 33, 37, 42, 36, 40, 44, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0:\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to length.\")\n    password = \"\".join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 35, 34, 37, 38, 33, 42, 43, 40], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 1:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"The number of digits must be a non-negative integer and less than or equal to the total length.\")\n    password = ''.join(random.choices(LETTERS, k=length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0008409023284912109, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 36, 35, 33, 43, 44, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0005872249603271484, "tests_passed": true, "error": null}}
{"selected_lines": [37, 39, 38, 36, 33, 40], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer \"\n    password = \"\".join(random.sample(LETTERS + DIGITS, length - num_digits))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 35, 39, 36, 42, 41, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0:\n        raise ValueError(\"Number of digits must be between 0 and the length of the password.\")\n    password = []\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005090236663818359, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 44, 42, 40, 35, 33, 41, 43, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise ValueError(\"length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 36, 37, 43, 40, 42, 44, 38, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"The number of digits must be between 0 and the length of the password.\")\n    password = []\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005922317504882812, "tests_passed": true, "error": null}}
{"selected_lines": [41, 43, 38, 34, 40, 42, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 1:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be non-negative and less than or equal to length.\")\n    password = random.sample(LETTERS, length - num_digits) + random.sample(DIGITS, num_digits)\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005340576171875, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0008299350738525391, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [41, 34, 39, 43, 37, 42, 38, 40, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 1 or not isinstance(length, int):\n        raise ValueError(\"The length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Num digits must be between 0 and total length of password.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0004992485046386719, "tests_passed": true, "error": null}}
{"selected_lines": [36, 43, 41, 39, 44, 40, 37, 35, 33, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise Exception(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be between 0 and the length of the password.\")\n    password = []\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 43, 37, 33, 42, 36, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(3)  # Seed for reproducibility\n    if length < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 42, 36, 34, 33, 44, 41, 35, 40, 43, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if num_digits > length or num_digits < 0:\n        raise Exception('Invalid input length')\n    if num_digits < 0:\n        raise ValueError(\n    password = \"\".join([random.choice(LETTERS + DIGITS) for _ in range(length)])\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 43, 34, 35, 36, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits >= length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0005052089691162109, "tests_passed": true, "error": null}}
{"selected_lines": [36, 43, 38, 33, 44, 39, 41, 35, 40, 34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 40, 35, 37, 42, 34, 38, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits >= length or length < 0 or num_digits < 0:\n        raise ValueError(\"length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be non-negative and less than or equal to the total length of the password.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 41, 40, 34, 39, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length < 1:\n        raise ValueError(\"Invalid length: length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005130767822265625, "tests_passed": true, "error": null}}
{"selected_lines": [42, 34, 39, 44, 40, 37, 35, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 38, 34, 37, 39, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits > length or num_digits < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to the total length.\")\n    password = \"\".join(random.choice(LETTERS) for i in range(length - num_digits))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 41, 34, 37, 36, 42, 44, 39, 33, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if num_digits <= 0:\n        raise Exception(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be within the range [0, {length}].\".format(length=length))\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 42, 34, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 0 or not isinstance(num_digits, int):\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 44, 40, 41, 43, 42, 37, 38, 36, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 44, 34, 36, 43, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if num_digits > length or num_digits < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if not isinstance(length, int):\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007448196411132812, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if num_digits >= length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 41, 35, 40, 44, 39, 43, 38, 34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0 or num_digits < 0 or num_digits > length:\n        raise ValueError('Length must be a positive integer.')\n    if num_digits < 0:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0007498264312744141, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\"\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.00080108642578125, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [36, 44, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0004968643188476562, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 40, 36, 34, 41, 43, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)  # Shuffle letters and digits\n    if num_digits <= 0:\n        raise ValueError(\"length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(f\"Number of digits must be within range(0, length), inclusive.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(LETTERS[random.randint(0, 51)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 40, 42, 36], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005271434783935547, "tests_passed": true, "error": null}}
{"selected_lines": [33, 39, 37, 40, 42, 36, 38, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choices(LETTERS + DIGITS, k=length))\n    for _ in range(length):\n        password.append(LETTERS[random.randint(0, len(LETTERS) - 1)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 41, 33, 38, 42, 40, 37, 36, 34, 39, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(321)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and \"\n    password = ''\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 42, 43, 33, 34, 44, 38, 37, 35, 40, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if num_digits >= length:\n        raise ValueError(\"The length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\n    password = ''.join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 40, 44, 41, 37, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS)\n    if length < 1:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to the total length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(LETTERS[random.randint(0, len(LETTERS) - 1)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 35, 40, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"The length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\n    password = ''\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 43, 34, 35, 44, 33, 39, 40, 42, 36], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 1 or not isinstance(length, int):\n        raise ValueError(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and less than or equal to the total \"\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 33, 34, 39, 44, 35, 42, 43, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if num_digits >= length:\n        raise ValueError('Length must be a positive integer')\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be between 0 and password length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 43, 35, 44, 39, 41, 37, 42, 36], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if not isinstance(length, int):\n        raise Exception('Invalid input length')\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and \"\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 43, 44, 34, 38, 39, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and not greater than length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 44, 39, 33, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length <= 0:\n        raise ValueError(\"length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.000576019287109375, "tests_passed": true, "error": null}}
{"selected_lines": [43, 36, 37, 35, 34, 44, 33, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()  # Ensure the same random number generation\n    if length < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0:\n        raise ValueError(\"Number of digits must be a non-negative integer \"\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 44, 39, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(15122022)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 41, 39, 44, 38, 33, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 43, 44, 34, 36, 37, 40, 35, 33, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if num_digits > length or num_digits < 0:\n        raise ValueError(\"length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and less than or equal to the length of the password.\")\n    password = \"\".join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 38, 42, 43, 41, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005640983581542969, "tests_passed": true, "error": null}}
{"selected_lines": [41, 35, 36, 39, 44, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 33, 37, 42, 36, 40, 44, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0:\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to length.\")\n    password = \"\".join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 35, 34, 37, 38, 33, 42, 43, 40], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 1:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"The number of digits must be a non-negative integer and less than or equal to the total length.\")\n    password = ''.join(random.choices(LETTERS, k=length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0008409023284912109, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 36, 35, 33, 43, 44, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0005872249603271484, "tests_passed": true, "error": null}}
{"selected_lines": [34, 40, 35, 43, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits < 0:\n        raise ValueError('Length must be a positive integer')\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.choices(LETTERS, k=length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 40, 35, 42, 36, 43, 34, 38, 44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits < 0 or num_digits > length:\n        raise ValueError('Length must be a positive integer.')\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 41, 34, 35, 43, 42, 36], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 39, 33, 36, 42, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005288124084472656, "tests_passed": true, "error": null}}
{"selected_lines": [33, 44, 43, 41, 42, 36, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = list(random.choices(LETTERS + DIGITS, k=length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 36, 38, 42, 43, 34, 44, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Invalid length: length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.choices(LETTERS, k=length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(LETTERS[random.randint(0, len(LETTERS) - 1)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 37, 34, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be a non-negative integer and less than or equal to the length of the password.\")\n    password = \"\".join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 43, 36, 37, 44, 40, 42, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num digits must be between 0 and total length of password.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005261898040771484, "tests_passed": true, "error": null}}
{"selected_lines": [39, 43, 35, 38, 41, 33, 36, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0:\n        raise ValueError(\"Num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007832050323486328, "tests_passed": true, "error": null}}
{"selected_lines": [42, 44, 39, 35, 41, 37, 34, 33, 38, 40, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS)\n    if length < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be non-negative and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 33, 39, 41, 35, 37, 42, 34, 36, 43, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer \"\n    password = \"\".join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 41, 43, 38, 40, 37, 44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be non-negative and less than or equal to the total length of the password.\")\n    password = random.sample(LETTERS, length - num_digits) + random.sample(DIGITS, num_digits)\n    for _ in range(length - num_digits):\n        password.append(LETTERS[random.randint(0, 51)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005700588226318359, "tests_passed": true, "error": null}}
{"selected_lines": [41, 37, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(321)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)  # Shuffle letters and digits\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007898807525634766, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37, 34, 42, 35, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 0 or not isinstance(num_digits, int):\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be a non-negative integer and less than or equal to the total \"\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 43, 37, 42, 40, 38, 44, 36, 41, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS)\n    if length <= 0:\n        raise ValueError(\"Length of password must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be between 0 and length.\")\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 42, 39, 33, 44, 41, 40, 34, 43, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if num_digits < 0:\n        raise ValueError(\"The length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(LETTERS[random.randint(0, 51)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005917549133300781, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 41, 33, 39, 38, 37, 35, 43, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length <= 0:\n        raise ValueError(\"length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and less than or equal to the total \"\n    password = ''.join(random.choices(LETTERS, k=length - num_digits))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 39, 44, 43, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\n    password = []\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 35, 41, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length <= 0:\n        raise Exception('Invalid input length')\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 39, 42, 36, 40, 33, 38, 41, 35, 37, 34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0 or num_digits < 0 or num_digits > length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num digits must be a non-negative integer and\"\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 35, 38, 39, 36, 43, 44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Invalid input: length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join([random.choice(LETTERS + DIGITS) for _ in range(length)])\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 36, 34, 33, 44, 43, 38, 37, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if num_digits > length:\n        raise Exception(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be non-negative and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 36, 40, 35, 43, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits < 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be within the range [0, {length}].\".format(length=length))\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005371570587158203, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 34, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits > length or num_digits < 0:\n        raise ValueError(\"length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 38, 43, 44, 36, 35, 33, 41, 40, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length < 0:\n        raise ValueError(\"Invalid input: length must be a positive integer.\")\n    if num_digits < 0:\n        raise ValueError(\n    password = \"\".join(random.choice(LETTERS) for i in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 39, 35, 34, 40], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 1:\n        raise ValueError(\"Length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005366802215576172, "tests_passed": true, "error": null}}
{"selected_lines": [39, 44, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0005440711975097656, "tests_passed": true, "error": null}}
{"selected_lines": [37, 40, 38, 34, 36, 42, 35, 33, 44, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if num_digits > length or num_digits < 0:\n        raise ValueError('Length must be a positive integer')\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length - num_digits):\n        password.append(LETTERS[random.randint(0, len(LETTERS) - 1)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for i in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 41, 40, 38, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Num digits must be a non-negative integer and\"\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 37, 43, 40], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits > length or num_digits < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be non-negative and less than or equal to the total length of the password.\")\n    password = ''.join(random.choices(LETTERS, k=length-num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 33, 38, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(15122022)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 34, 41, 42, 40], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if not isinstance(length, int) or length < 1:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.choice(LETTERS) for i in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 34, 43, 33, 44, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if not isinstance(length, int) or length < 1:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0006210803985595703, "tests_passed": true, "error": null}}
{"selected_lines": [41, 43, 34, 40, 35, 44, 38, 33, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length < 1:\n        raise ValueError(\"Length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 37, 33, 43, 40, 39, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\n    password = ''.join(random.choices(LETTERS + DIGITS, k=length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 39, 44, 33, 37, 35, 41, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(321)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be between 0 and the length of the password.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005269050598144531, "tests_passed": true, "error": null}}
{"selected_lines": [36, 38, 39, 41, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 41, 39, 36, 34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.00045800209045410156, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0006847381591796875, "tests_passed": true, "error": null}}
{"selected_lines": [36, 44, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0004968643188476562, "tests_passed": true, "error": null}}
{"selected_lines": [36, 44, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0004968643188476562, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise Exception(\"Length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 34, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 0 or num_digits < 0 or num_digits > length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for i in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 37, 33, 40, 34, 36, 44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and less than or equal to the total \"\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 36, 34, 33, 43, 39, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(15122022)\n    if num_digits <= 0 or num_digits > length:\n        raise ValueError('Length must be a positive integer.')\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005190372467041016, "tests_passed": true, "error": null}}
{"selected_lines": [33, 36, 38, 40, 34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if num_digits < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 42, 41, 35, 40], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 1:\n        raise Exception(\"Length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 40, 37, 42, 44, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and \"\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 39, 40, 42, 33, 38, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be within the range [0, length].\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 35, 36, 40, 39, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"length must be a positive integer\")\n    if num_digits < 0:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 38, 36, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num digits must be between 0 and total length of password.\")\n    password = \"\"\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 44, 43, 40, 38, 34, 39, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if not isinstance(length, int) or length < 1:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to the total length.\")\n    password = list(random.choices(LETTERS + DIGITS, k=length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0005440711975097656, "tests_passed": true, "error": null}}
{"selected_lines": [34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007507801055908203, "tests_passed": true, "error": null}}
{"selected_lines": [34, 41, 37, 38, 36, 43, 33, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be between 0 and the length of the password.\")\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be a non-negative integer \"\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": false, "time": 0.0001239776611328125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [38, 44, 36, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(f\"Number of digits must be within range(0, length), inclusive.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0009169578552246094, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 37, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be non-negative and less than or equal to the length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005230903625488281, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005848407745361328, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 36, 38, 42, 41, 40, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to the total length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length):\n        password.append(LETTERS[random.randint(0, len(LETTERS) - 1)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 37, 42, 39, 44, 35, 34, 38, 36, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 1:\n        raise ValueError(\"The length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num digits must be between 0 and total length of password.\")\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 39, 43, 40, 37, 41, 33, 38, 35, 36, 44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 0:\n        raise ValueError(\"length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to length.\")\n    password = \"\".join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 34, 37, 44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 1 or not isinstance(length, int):\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be between 0 and password length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005002021789550781, "tests_passed": true, "error": null}}
{"selected_lines": [41, 44, 33, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 33, 43, 34, 42, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(321)\n    if num_digits > length or num_digits < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length of the password must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007410049438476562, "tests_passed": true, "error": null}}
{"selected_lines": [36, 41, 44, 37, 39, 38, 40, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"length must be a positive integer\")\n    if num_digits < 0:\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 42, 41, 36, 43, 44, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0005927085876464844, "tests_passed": true, "error": null}}
{"selected_lines": [34, 41, 36, 37, 40, 44, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 1:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to the total length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005040168762207031, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 36, 34, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.00046706199645996094, "tests_passed": true, "error": null}}
{"selected_lines": [44, 33, 34, 43, 39, 38, 35, 41, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if num_digits > length or num_digits < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 40, 41, 44, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(321)\n    if num_digits > length or num_digits < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(LETTERS[random.randint(0, 51)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0005087852478027344, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39, 40, 42, 36], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005271434783935547, "tests_passed": true, "error": null}}
{"selected_lines": [33, 39, 37, 40, 42, 36, 38, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choices(LETTERS + DIGITS, k=length))\n    for _ in range(length):\n        password.append(LETTERS[random.randint(0, len(LETTERS) - 1)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 41, 33, 38, 42, 40, 37, 36, 34, 39, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(321)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and \"\n    password = ''\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 42, 43, 33, 34, 44, 38, 37, 35, 40, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if num_digits >= length:\n        raise ValueError(\"The length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\n    password = ''.join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 40, 44, 41, 37, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS)\n    if length < 1:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to the total length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(LETTERS[random.randint(0, len(LETTERS) - 1)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 35, 40, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"The length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\n    password = ''\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 43, 34, 35, 44, 33, 39, 40, 42, 36], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 1 or not isinstance(length, int):\n        raise ValueError(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and less than or equal to the total \"\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 33, 34, 39, 44, 35, 42, 43, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if num_digits >= length:\n        raise ValueError('Length must be a positive integer')\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be between 0 and password length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 43, 35, 44, 39, 41, 37, 42, 36], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if not isinstance(length, int):\n        raise Exception('Invalid input length')\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and \"\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 43, 44, 34, 38, 39, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and not greater than length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 44, 39, 33, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length <= 0:\n        raise ValueError(\"length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.000576019287109375, "tests_passed": true, "error": null}}
{"selected_lines": [43, 36, 37, 35, 34, 44, 33, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()  # Ensure the same random number generation\n    if length < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0:\n        raise ValueError(\"Number of digits must be a non-negative integer \"\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 44, 39, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(15122022)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 41, 39, 44, 38, 33, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 43, 44, 34, 36, 37, 40, 35, 33, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if num_digits > length or num_digits < 0:\n        raise ValueError(\"length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and less than or equal to the length of the password.\")\n    password = \"\".join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 38, 42, 43, 41, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005640983581542969, "tests_passed": true, "error": null}}
{"selected_lines": [41, 35, 36, 39, 44, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 33, 37, 42, 36, 40, 44, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0:\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to length.\")\n    password = \"\".join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 35, 34, 37, 38, 33, 42, 43, 40], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 1:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"The number of digits must be a non-negative integer and less than or equal to the total length.\")\n    password = ''.join(random.choices(LETTERS, k=length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0008409023284912109, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 36, 35, 33, 43, 44, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0005872249603271484, "tests_passed": true, "error": null}}
{"selected_lines": [34, 40, 35, 43, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits < 0:\n        raise ValueError('Length must be a positive integer')\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.choices(LETTERS, k=length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 40, 35, 42, 36, 43, 34, 38, 44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits < 0 or num_digits > length:\n        raise ValueError('Length must be a positive integer.')\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 41, 34, 35, 43, 42, 36], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 39, 33, 36, 42, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005288124084472656, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 33, 38, 37, 44, 36, 41, 34, 43, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if not isinstance(length, int) or length < 1:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be between 0 and length.\")\n    password = \"\".join(random.choice(LETTERS) for i in range(length - num_digits))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007507801055908203, "tests_passed": true, "error": null}}
{"selected_lines": [43, 33, 34, 39, 35, 41, 36, 42, 44, 37, 40], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 0:\n        raise Exception(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be between 0 and the length of the password.\")\n    password = []\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 40, 33, 41, 35, 43, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)  # Shuffle letters and digits\n    if num_digits > length or num_digits < 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be between 0 and the length of the password.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length of password must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007028579711914062, "tests_passed": true, "error": null}}
{"selected_lines": [43, 34, 42, 36, 40, 38, 35, 39, 44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 0:\n        raise ValueError(\"Invalid input: length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = list(random.choices(LETTERS + DIGITS, k=length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005433559417724609, "tests_passed": true, "error": null}}
{"selected_lines": [34, 39, 44, 41, 37, 43, 38, 40, 35, 36], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 1 or not isinstance(length, int):\n        raise ValueError(\"length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\n    password = list(random.choices(LETTERS + DIGITS, k=length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 39, 37, 40, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 1:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be non-negative and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005359649658203125, "tests_passed": true, "error": null}}
{"selected_lines": [36, 43, 41, 39, 44, 40, 37, 35, 33, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise Exception(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be between 0 and the length of the password.\")\n    password = []\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 43, 37, 33, 42, 36, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(3)  # Seed for reproducibility\n    if length < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 42, 36, 34, 33, 44, 41, 35, 40, 43, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if num_digits > length or num_digits < 0:\n        raise Exception('Invalid input length')\n    if num_digits < 0:\n        raise ValueError(\n    password = \"\".join([random.choice(LETTERS + DIGITS) for _ in range(length)])\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 43, 34, 35, 36, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits >= length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0005052089691162109, "tests_passed": true, "error": null}}
{"selected_lines": [36, 43, 38, 33, 44, 39, 41, 35, 40, 34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 40, 35, 37, 42, 34, 38, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits >= length or length < 0 or num_digits < 0:\n        raise ValueError(\"length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be non-negative and less than or equal to the total length of the password.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 41, 40, 34, 39, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length < 1:\n        raise ValueError(\"Invalid length: length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005130767822265625, "tests_passed": true, "error": null}}
{"selected_lines": [42, 34, 39, 44, 40, 37, 35, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 38, 34, 37, 39, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits > length or num_digits < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to the total length.\")\n    password = \"\".join(random.choice(LETTERS) for i in range(length - num_digits))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 41, 34, 37, 36, 42, 44, 39, 33, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if num_digits <= 0:\n        raise Exception(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be within the range [0, {length}].\".format(length=length))\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 42, 34, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 0 or not isinstance(num_digits, int):\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 44, 40, 41, 43, 42, 37, 38, 36, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 44, 34, 36, 43, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if num_digits > length or num_digits < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if not isinstance(length, int):\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007448196411132812, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if num_digits >= length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 41, 35, 40, 44, 39, 43, 38, 34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0 or num_digits < 0 or num_digits > length:\n        raise ValueError('Length must be a positive integer.')\n    if num_digits < 0:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0007498264312744141, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\"\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.00080108642578125, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [36, 44, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0004968643188476562, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 40, 36, 34, 41, 43, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)  # Shuffle letters and digits\n    if num_digits <= 0:\n        raise ValueError(\"length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(f\"Number of digits must be within range(0, length), inclusive.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(LETTERS[random.randint(0, 51)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 40, 42, 36], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005271434783935547, "tests_passed": true, "error": null}}
{"selected_lines": [33, 39, 37, 40, 42, 36, 38, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choices(LETTERS + DIGITS, k=length))\n    for _ in range(length):\n        password.append(LETTERS[random.randint(0, len(LETTERS) - 1)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 41, 33, 38, 42, 40, 37, 36, 34, 39, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(321)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and \"\n    password = ''\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 42, 43, 33, 34, 44, 38, 37, 35, 40, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if num_digits >= length:\n        raise ValueError(\"The length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\n    password = ''.join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 40, 44, 41, 37, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS)\n    if length < 1:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to the total length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(LETTERS[random.randint(0, len(LETTERS) - 1)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 35, 40, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"The length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\n    password = ''\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 43, 34, 35, 44, 33, 39, 40, 42, 36], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 1 or not isinstance(length, int):\n        raise ValueError(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and less than or equal to the total \"\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 33, 34, 39, 44, 35, 42, 43, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if num_digits >= length:\n        raise ValueError('Length must be a positive integer')\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be between 0 and password length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 43, 35, 44, 39, 41, 37, 42, 36], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if not isinstance(length, int):\n        raise Exception('Invalid input length')\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and \"\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 43, 44, 34, 38, 39, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and not greater than length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 44, 39, 33, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length <= 0:\n        raise ValueError(\"length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.000576019287109375, "tests_passed": true, "error": null}}
{"selected_lines": [43, 36, 37, 35, 34, 44, 33, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()  # Ensure the same random number generation\n    if length < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0:\n        raise ValueError(\"Number of digits must be a non-negative integer \"\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 44, 39, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(15122022)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 41, 39, 44, 38, 33, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 43, 44, 34, 36, 37, 40, 35, 33, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if num_digits > length or num_digits < 0:\n        raise ValueError(\"length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and less than or equal to the length of the password.\")\n    password = \"\".join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 38, 42, 43, 41, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005640983581542969, "tests_passed": true, "error": null}}
{"selected_lines": [41, 35, 36, 39, 44, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 33, 37, 42, 36, 40, 44, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0:\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to length.\")\n    password = \"\".join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 35, 34, 37, 38, 33, 42, 43, 40], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 1:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"The number of digits must be a non-negative integer and less than or equal to the total length.\")\n    password = ''.join(random.choices(LETTERS, k=length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0008409023284912109, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 36, 35, 33, 43, 44, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0005872249603271484, "tests_passed": true, "error": null}}
{"selected_lines": [34, 40, 35, 43, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits < 0:\n        raise ValueError('Length must be a positive integer')\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.choices(LETTERS, k=length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 40, 35, 42, 36, 43, 34, 38, 44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits < 0 or num_digits > length:\n        raise ValueError('Length must be a positive integer.')\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 41, 34, 35, 43, 42, 36], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 39, 33, 36, 42, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005288124084472656, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 33, 38, 37, 44, 36, 41, 34, 43, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if not isinstance(length, int) or length < 1:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be between 0 and length.\")\n    password = \"\".join(random.choice(LETTERS) for i in range(length - num_digits))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007507801055908203, "tests_passed": true, "error": null}}
{"selected_lines": [43, 33, 34, 39, 35, 41, 36, 42, 44, 37, 40], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 0:\n        raise Exception(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be between 0 and the length of the password.\")\n    password = []\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 40, 33, 41, 35, 43, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)  # Shuffle letters and digits\n    if num_digits > length or num_digits < 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be between 0 and the length of the password.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length of password must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007028579711914062, "tests_passed": true, "error": null}}
{"selected_lines": [43, 34, 42, 36, 40, 38, 35, 39, 44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 0:\n        raise ValueError(\"Invalid input: length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = list(random.choices(LETTERS + DIGITS, k=length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005433559417724609, "tests_passed": true, "error": null}}
{"selected_lines": [42, 33, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be a non-negative integer and not greater than length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005099773406982422, "tests_passed": true, "error": null}}
{"selected_lines": [37, 36, 42, 34, 38, 33, 39, 40, 44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 1 or not isinstance(length, int):\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to the total length.\")\n    password = \"\".join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 36, 38, 42, 43, 34, 44, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Invalid length: length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.choices(LETTERS, k=length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(LETTERS[random.randint(0, len(LETTERS) - 1)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 37, 34, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be a non-negative integer and less than or equal to the length of the password.\")\n    password = \"\".join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 43, 36, 37, 44, 40, 42, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num digits must be between 0 and total length of password.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005261898040771484, "tests_passed": true, "error": null}}
{"selected_lines": [39, 43, 35, 38, 41, 33, 36, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0:\n        raise ValueError(\"Num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007832050323486328, "tests_passed": true, "error": null}}
{"selected_lines": [42, 44, 39, 35, 41, 37, 34, 33, 38, 40, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS)\n    if length < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be non-negative and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 33, 39, 41, 35, 37, 42, 34, 36, 43, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer \"\n    password = \"\".join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 41, 43, 38, 40, 37, 44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be non-negative and less than or equal to the total length of the password.\")\n    password = random.sample(LETTERS, length - num_digits) + random.sample(DIGITS, num_digits)\n    for _ in range(length - num_digits):\n        password.append(LETTERS[random.randint(0, 51)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005700588226318359, "tests_passed": true, "error": null}}
{"selected_lines": [41, 37, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(321)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)  # Shuffle letters and digits\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007898807525634766, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [37, 34, 42, 35, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 0 or not isinstance(num_digits, int):\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be a non-negative integer and less than or equal to the total \"\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 43, 37, 42, 40, 38, 44, 36, 41, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS)\n    if length <= 0:\n        raise ValueError(\"Length of password must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be between 0 and length.\")\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 42, 39, 33, 44, 41, 40, 34, 43, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if num_digits < 0:\n        raise ValueError(\"The length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(LETTERS[random.randint(0, 51)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005917549133300781, "tests_passed": true, "error": null}}
{"selected_lines": [40, 36, 41, 33, 39, 38, 37, 35, 43, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length <= 0:\n        raise ValueError(\"length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and less than or equal to the total \"\n    password = ''.join(random.choices(LETTERS, k=length - num_digits))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 35, 39, 44, 43, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\n    password = []\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 40, 35, 41, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length <= 0:\n        raise Exception('Invalid input length')\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 39, 42, 36, 40, 33, 38, 41, 35, 37, 34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0 or num_digits < 0 or num_digits > length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num digits must be a non-negative integer and\"\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 35, 38, 39, 36, 43, 44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Invalid input: length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join([random.choice(LETTERS + DIGITS) for _ in range(length)])\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 36, 34, 33, 44, 43, 38, 37, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if num_digits > length:\n        raise Exception(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be non-negative and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 36, 40, 35, 43, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits < 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be within the range [0, {length}].\".format(length=length))\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005371570587158203, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 34, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits > length or num_digits < 0:\n        raise ValueError(\"length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 37, 38, 43, 44, 36, 35, 33, 41, 40, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length < 0:\n        raise ValueError(\"Invalid input: length must be a positive integer.\")\n    if num_digits < 0:\n        raise ValueError(\n    password = \"\".join(random.choice(LETTERS) for i in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 39, 35, 34, 40], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 1:\n        raise ValueError(\"Length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005366802215576172, "tests_passed": true, "error": null}}
{"selected_lines": [39, 44, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0005440711975097656, "tests_passed": true, "error": null}}
{"selected_lines": [37, 40, 38, 34, 36, 42, 35, 33, 44, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if num_digits > length or num_digits < 0:\n        raise ValueError('Length must be a positive integer')\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length - num_digits):\n        password.append(LETTERS[random.randint(0, len(LETTERS) - 1)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for i in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [42, 41, 40, 38, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Num digits must be a non-negative integer and\"\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 37, 43, 40], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits > length or num_digits < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be non-negative and less than or equal to the total length of the password.\")\n    password = ''.join(random.choices(LETTERS, k=length-num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 37, 33, 38, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(15122022)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 38, 34, 41, 42, 40], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if not isinstance(length, int) or length < 1:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.choice(LETTERS) for i in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 34, 43, 33, 44, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if not isinstance(length, int) or length < 1:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0006210803985595703, "tests_passed": true, "error": null}}
{"selected_lines": [34, 41, 38, 44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 1:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = random.sample(LETTERS, length - num_digits) + random.sample(DIGITS, num_digits)\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005562305450439453, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0008299350738525391, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [41, 34, 39, 43, 37, 42, 38, 40, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 1 or not isinstance(length, int):\n        raise ValueError(\"The length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Num digits must be between 0 and total length of password.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 34, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0004992485046386719, "tests_passed": true, "error": null}}
{"selected_lines": [35, 38, 43, 36, 37, 42, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"The length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer less than or equal to the total length.\")\n    password = ''.join(random.choices(LETTERS, k=length-num_digits))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 40, 39, 37, 36], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError('Length must be a positive integer.')\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be between 0 and the length of the password.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.000492095947265625, "tests_passed": true, "error": null}}
{"selected_lines": [36, 43, 41, 39, 44, 40, 37, 35, 33, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise Exception(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be between 0 and the length of the password.\")\n    password = []\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 43, 37, 33, 42, 36, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(3)  # Seed for reproducibility\n    if length < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 42, 36, 34, 33, 44, 41, 35, 40, 43, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if num_digits > length or num_digits < 0:\n        raise Exception('Invalid input length')\n    if num_digits < 0:\n        raise ValueError(\n    password = \"\".join([random.choice(LETTERS + DIGITS) for _ in range(length)])\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 43, 34, 35, 36, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits >= length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0005052089691162109, "tests_passed": true, "error": null}}
{"selected_lines": [36, 43, 38, 33, 44, 39, 41, 35, 40, 34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 40, 35, 37, 42, 34, 38, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits >= length or length < 0 or num_digits < 0:\n        raise ValueError(\"length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be non-negative and less than or equal to the total length of the password.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 41, 40, 34, 39, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length < 1:\n        raise ValueError(\"Invalid length: length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005130767822265625, "tests_passed": true, "error": null}}
{"selected_lines": [42, 34, 39, 44, 40, 37, 35, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 38, 34, 37, 39, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits > length or num_digits < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to the total length.\")\n    password = \"\".join(random.choice(LETTERS) for i in range(length - num_digits))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 41, 34, 37, 36, 42, 44, 39, 33, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if num_digits <= 0:\n        raise Exception(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be within the range [0, {length}].\".format(length=length))\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 42, 34, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 0 or not isinstance(num_digits, int):\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 44, 40, 41, 43, 42, 37, 38, 36, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 44, 34, 36, 43, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if num_digits > length or num_digits < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if not isinstance(length, int):\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007448196411132812, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if num_digits >= length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 41, 35, 40, 44, 39, 43, 38, 34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0 or num_digits < 0 or num_digits > length:\n        raise ValueError('Length must be a positive integer.')\n    if num_digits < 0:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0007498264312744141, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\"\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.00080108642578125, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [36, 44, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0004968643188476562, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 40, 36, 34, 41, 43, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)  # Shuffle letters and digits\n    if num_digits <= 0:\n        raise ValueError(\"length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(f\"Number of digits must be within range(0, length), inclusive.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(LETTERS[random.randint(0, 51)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 40, 42, 36], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005271434783935547, "tests_passed": true, "error": null}}
{"selected_lines": [33, 39, 37, 40, 42, 36, 38, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choices(LETTERS + DIGITS, k=length))\n    for _ in range(length):\n        password.append(LETTERS[random.randint(0, len(LETTERS) - 1)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 41, 33, 38, 42, 40, 37, 36, 34, 39, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(321)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and \"\n    password = ''\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 42, 43, 33, 34, 44, 38, 37, 35, 40, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if num_digits >= length:\n        raise ValueError(\"The length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\n    password = ''.join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 40, 44, 41, 37, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS)\n    if length < 1:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to the total length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(LETTERS[random.randint(0, len(LETTERS) - 1)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 35, 40, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"The length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\n    password = ''\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 43, 34, 35, 44, 33, 39, 40, 42, 36], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 1 or not isinstance(length, int):\n        raise ValueError(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and less than or equal to the total \"\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 33, 34, 39, 44, 35, 42, 43, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if num_digits >= length:\n        raise ValueError('Length must be a positive integer')\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be between 0 and password length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 43, 35, 44, 39, 41, 37, 42, 36], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if not isinstance(length, int):\n        raise Exception('Invalid input length')\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and \"\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 43, 44, 34, 38, 39, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and not greater than length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 44, 39, 33, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length <= 0:\n        raise ValueError(\"length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.000576019287109375, "tests_passed": true, "error": null}}
{"selected_lines": [43, 36, 37, 35, 34, 44, 33, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()  # Ensure the same random number generation\n    if length < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0:\n        raise ValueError(\"Number of digits must be a non-negative integer \"\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 44, 39, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(15122022)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 41, 39, 44, 38, 33, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 43, 44, 34, 36, 37, 40, 35, 33, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if num_digits > length or num_digits < 0:\n        raise ValueError(\"length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and less than or equal to the length of the password.\")\n    password = \"\".join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 38, 42, 43, 41, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005640983581542969, "tests_passed": true, "error": null}}
{"selected_lines": [41, 35, 36, 39, 44, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 33, 37, 42, 36, 40, 44, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0:\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to length.\")\n    password = \"\".join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 35, 34, 37, 38, 33, 42, 43, 40], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 1:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"The number of digits must be a non-negative integer and less than or equal to the total length.\")\n    password = ''.join(random.choices(LETTERS, k=length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0008409023284912109, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 36, 35, 33, 43, 44, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0005872249603271484, "tests_passed": true, "error": null}}
{"selected_lines": [34, 40, 35, 43, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits < 0:\n        raise ValueError('Length must be a positive integer')\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.choices(LETTERS, k=length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 40, 35, 42, 36, 43, 34, 38, 44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits < 0 or num_digits > length:\n        raise ValueError('Length must be a positive integer.')\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 41, 34, 35, 43, 42, 36], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 39, 33, 36, 42, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005288124084472656, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 33, 38, 37, 44, 36, 41, 34, 43, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if not isinstance(length, int) or length < 1:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be between 0 and length.\")\n    password = \"\".join(random.choice(LETTERS) for i in range(length - num_digits))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007507801055908203, "tests_passed": true, "error": null}}
{"selected_lines": [43, 33, 34, 39, 35, 41, 36, 42, 44, 37, 40], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 0:\n        raise Exception(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be between 0 and the length of the password.\")\n    password = []\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 40, 33, 41, 35, 43, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)  # Shuffle letters and digits\n    if num_digits > length or num_digits < 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be between 0 and the length of the password.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length of password must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007028579711914062, "tests_passed": true, "error": null}}
{"selected_lines": [43, 34, 42, 36, 40, 38, 35, 39, 44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 0:\n        raise ValueError(\"Invalid input: length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = list(random.choices(LETTERS + DIGITS, k=length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005433559417724609, "tests_passed": true, "error": null}}
{"selected_lines": [42, 33, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be a non-negative integer and not greater than length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005099773406982422, "tests_passed": true, "error": null}}
{"selected_lines": [39, 36, 34, 43, 42, 38, 35, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if not isinstance(length, int) or length < 1:\n        raise Exception('Invalid input length')\n    if num_digits < 0:\n        raise ValueError(\n    password = ''.join(random.choices(LETTERS, k=length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 38, 34, 41, 44, 33, 36, 40], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length < 0 or num_digits < 0 or num_digits > length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 41, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError('Length must be a positive integer.')\n    if not (0 <= num_digits <= length):\n        raise ValueError(\n    password = []\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 42, 37, 38, 43, 34, 33, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length < 0:\n        raise ValueError(\"Invalid input. Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be between 0 and the length of the password.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40, 38, 35, 43, 34, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length < 0:\n        raise ValueError('Length must be a positive integer.')\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\"\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 33, 44, 36, 34, 40], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if num_digits < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 40, 44, 33, 34, 35, 42, 36, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if num_digits < 0 or num_digits > length:\n        raise Exception(\"Password length must be a positive integer.\")\n    if num_digits < 0:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 44, 40, 37, 41, 35, 34, 33, 43, 36], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 1 or not isinstance(length, int):\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be between 0 and the length of the password.\")\n    password = ''.join(random.choice(LETTERS) for i in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(LETTERS[random.randint(0, 51)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 42, 41, 37, 34, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 1:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be non-negative and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0005440711975097656, "tests_passed": true, "error": null}}
{"selected_lines": [40, 42, 37, 33, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS)\n    if length <= 0:\n        raise ValueError(\"Length of password must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be non-negative and less than or equal to the length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 43, 39, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0 or num_digits < 0 or num_digits > length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007507801055908203, "tests_passed": true, "error": null}}
{"selected_lines": [34, 41, 37, 38, 36, 43, 33, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be between 0 and the length of the password.\")\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be a non-negative integer \"\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": false, "time": 0.0001239776611328125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [38, 44, 36, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(f\"Number of digits must be within range(0, length), inclusive.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0009169578552246094, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 37, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be non-negative and less than or equal to the length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005230903625488281, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005848407745361328, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 36, 38, 42, 41, 40, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to the total length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length):\n        password.append(LETTERS[random.randint(0, len(LETTERS) - 1)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 37, 42, 39, 44, 35, 34, 38, 36, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 1:\n        raise ValueError(\"The length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num digits must be between 0 and total length of password.\")\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 39, 43, 40, 37, 41, 33, 38, 35, 36, 44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 0:\n        raise ValueError(\"length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to length.\")\n    password = \"\".join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 34, 37, 44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 1 or not isinstance(length, int):\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be between 0 and password length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005002021789550781, "tests_passed": true, "error": null}}
{"selected_lines": [41, 44, 33, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 33, 43, 34, 42, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(321)\n    if num_digits > length or num_digits < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length of the password must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007410049438476562, "tests_passed": true, "error": null}}
{"selected_lines": [36, 41, 44, 37, 39, 38, 40, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"length must be a positive integer\")\n    if num_digits < 0:\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 42, 41, 36, 43, 44, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0005927085876464844, "tests_passed": true, "error": null}}
{"selected_lines": [34, 41, 36, 37, 40, 44, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 1:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to the total length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005040168762207031, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 36, 34, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.00046706199645996094, "tests_passed": true, "error": null}}
{"selected_lines": [44, 33, 34, 43, 39, 38, 35, 41, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if num_digits > length or num_digits < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 40, 41, 44, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(321)\n    if num_digits > length or num_digits < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(LETTERS[random.randint(0, 51)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0005087852478027344, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39, 40, 42, 36], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005271434783935547, "tests_passed": true, "error": null}}
{"selected_lines": [33, 39, 37, 40, 42, 36, 38, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choices(LETTERS + DIGITS, k=length))\n    for _ in range(length):\n        password.append(LETTERS[random.randint(0, len(LETTERS) - 1)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 41, 33, 38, 42, 40, 37, 36, 34, 39, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(321)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and \"\n    password = ''\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 42, 43, 33, 34, 44, 38, 37, 35, 40, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if num_digits >= length:\n        raise ValueError(\"The length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\n    password = ''.join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 40, 44, 41, 37, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS)\n    if length < 1:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to the total length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(LETTERS[random.randint(0, len(LETTERS) - 1)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 35, 40, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"The length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\n    password = ''\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 43, 34, 35, 44, 33, 39, 40, 42, 36], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 1 or not isinstance(length, int):\n        raise ValueError(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and less than or equal to the total \"\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 33, 34, 39, 44, 35, 42, 43, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if num_digits >= length:\n        raise ValueError('Length must be a positive integer')\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be between 0 and password length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 43, 35, 44, 39, 41, 37, 42, 36], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if not isinstance(length, int):\n        raise Exception('Invalid input length')\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and \"\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 43, 44, 34, 38, 39, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and not greater than length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 44, 39, 33, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length <= 0:\n        raise ValueError(\"length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.000576019287109375, "tests_passed": true, "error": null}}
{"selected_lines": [43, 36, 37, 35, 34, 44, 33, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()  # Ensure the same random number generation\n    if length < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0:\n        raise ValueError(\"Number of digits must be a non-negative integer \"\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 44, 39, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(15122022)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 41, 39, 44, 38, 33, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 43, 44, 34, 36, 37, 40, 35, 33, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if num_digits > length or num_digits < 0:\n        raise ValueError(\"length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and less than or equal to the length of the password.\")\n    password = \"\".join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 38, 42, 43, 41, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005640983581542969, "tests_passed": true, "error": null}}
{"selected_lines": [41, 35, 36, 39, 44, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 33, 37, 42, 36, 40, 44, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0:\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to length.\")\n    password = \"\".join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 35, 34, 37, 38, 33, 42, 43, 40], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 1:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"The number of digits must be a non-negative integer and less than or equal to the total length.\")\n    password = ''.join(random.choices(LETTERS, k=length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0008409023284912109, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 36, 35, 33, 43, 44, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0005872249603271484, "tests_passed": true, "error": null}}
{"selected_lines": [34, 40, 35, 43, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits < 0:\n        raise ValueError('Length must be a positive integer')\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.choices(LETTERS, k=length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 40, 35, 42, 36, 43, 34, 38, 44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits < 0 or num_digits > length:\n        raise ValueError('Length must be a positive integer.')\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 41, 34, 35, 43, 42, 36], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 39, 33, 36, 42, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005288124084472656, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 33, 38, 37, 44, 36, 41, 34, 43, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if not isinstance(length, int) or length < 1:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be between 0 and length.\")\n    password = \"\".join(random.choice(LETTERS) for i in range(length - num_digits))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007507801055908203, "tests_passed": true, "error": null}}
{"selected_lines": [43, 33, 34, 39, 35, 41, 36, 42, 44, 37, 40], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 0:\n        raise Exception(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be between 0 and the length of the password.\")\n    password = []\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 40, 33, 41, 35, 43, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)  # Shuffle letters and digits\n    if num_digits > length or num_digits < 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be between 0 and the length of the password.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length of password must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007028579711914062, "tests_passed": true, "error": null}}
{"selected_lines": [43, 34, 42, 36, 40, 38, 35, 39, 44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 0:\n        raise ValueError(\"Invalid input: length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = list(random.choices(LETTERS + DIGITS, k=length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005433559417724609, "tests_passed": true, "error": null}}
{"selected_lines": [42, 33, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be a non-negative integer and not greater than length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005099773406982422, "tests_passed": true, "error": null}}
{"selected_lines": [39, 36, 34, 43, 42, 38, 35, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if not isinstance(length, int) or length < 1:\n        raise Exception('Invalid input length')\n    if num_digits < 0:\n        raise ValueError(\n    password = ''.join(random.choices(LETTERS, k=length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 38, 34, 41, 44, 33, 36, 40], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length < 0 or num_digits < 0 or num_digits > length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 41, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError('Length must be a positive integer.')\n    if not (0 <= num_digits <= length):\n        raise ValueError(\n    password = []\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 42, 37, 38, 43, 34, 33, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length < 0:\n        raise ValueError(\"Invalid input. Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be between 0 and the length of the password.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40, 38, 35, 43, 34, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length < 0:\n        raise ValueError('Length must be a positive integer.')\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\"\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 33, 44, 36, 34, 40], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if num_digits < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 40, 44, 33, 34, 35, 42, 36, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if num_digits < 0 or num_digits > length:\n        raise Exception(\"Password length must be a positive integer.\")\n    if num_digits < 0:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 44, 40, 37, 41, 35, 34, 33, 43, 36], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 1 or not isinstance(length, int):\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be between 0 and the length of the password.\")\n    password = ''.join(random.choice(LETTERS) for i in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(LETTERS[random.randint(0, 51)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 42, 41, 37, 34, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 1:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be non-negative and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0005440711975097656, "tests_passed": true, "error": null}}
{"selected_lines": [44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0007498264312744141, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()  # Ensure the same random number generation\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0010712146759033203, "tests_passed": true, "error": null}}
{"selected_lines": [43, 40, 34, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005638599395751953, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33, 42, 40, 35, 44, 34, 41, 39, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if num_digits <= 0 or num_digits > length:\n        raise ValueError(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be within the range [0, {length}].\".format(length=length))\n    password = []\n    for _ in range(length - num_digits):\n        password.append(LETTERS[random.randint(0, len(LETTERS) - 1)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005979537963867188, "tests_passed": true, "error": null}}
{"selected_lines": [35, 44, 34, 33, 41, 43, 40], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if num_digits > length or num_digits < 0:\n        raise Exception(\"Length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007507801055908203, "tests_passed": true, "error": null}}
{"selected_lines": [34, 42, 39, 38, 41, 33, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if not isinstance(length, int) or length < 1:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\"\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0006999969482421875, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007009506225585938, "tests_passed": false, "error": "TypeError"}}
{"selected_lines": [33, 35, 41, 39, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005691051483154297, "tests_passed": true, "error": null}}
{"selected_lines": [38, 34, 40, 43, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for i in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 38, 39, 44, 41, 36, 43, 34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 0 or not isinstance(num_digits, int):\n        raise ValueError(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 34, 33, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(15122022)\n    if num_digits > length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(LETTERS[random.randint(0, 51)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0004940032958984375, "tests_passed": true, "error": null}}
{"selected_lines": [38, 36, 35, 43, 33, 34, 42, 41, 40, 37, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)  # Shuffle letters and digits\n    if num_digits <= 0 or num_digits > length:\n        raise ValueError('Length must be a positive integer.')\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be non-negative and less than or equal to the total length of the password.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 35, 42, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 44, 36, 40, 39, 41, 35, 34, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits >= length:\n        raise ValueError(\"The length must be a positive integer.\")\n    if num_digits < 0:\n        raise ValueError(\"Number of digits must be within the range [0, length].\")\n    password = \"\".join(random.choices(LETTERS, k=length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 43, 37, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be between 0 and length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0004947185516357422, "tests_passed": true, "error": null}}
{"selected_lines": [36, 43, 41, 39, 44, 40, 37, 35, 33, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise Exception(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be between 0 and the length of the password.\")\n    password = []\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 43, 37, 33, 42, 36, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(3)  # Seed for reproducibility\n    if length < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 42, 36, 34, 33, 44, 41, 35, 40, 43, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if num_digits > length or num_digits < 0:\n        raise Exception('Invalid input length')\n    if num_digits < 0:\n        raise ValueError(\n    password = \"\".join([random.choice(LETTERS + DIGITS) for _ in range(length)])\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 43, 34, 35, 36, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits >= length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0005052089691162109, "tests_passed": true, "error": null}}
{"selected_lines": [36, 43, 38, 33, 44, 39, 41, 35, 40, 34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 40, 35, 37, 42, 34, 38, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits >= length or length < 0 or num_digits < 0:\n        raise ValueError(\"length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be non-negative and less than or equal to the total length of the password.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 41, 40, 34, 39, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length < 1:\n        raise ValueError(\"Invalid length: length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005130767822265625, "tests_passed": true, "error": null}}
{"selected_lines": [42, 34, 39, 44, 40, 37, 35, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 38, 34, 37, 39, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits > length or num_digits < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to the total length.\")\n    password = \"\".join(random.choice(LETTERS) for i in range(length - num_digits))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 41, 34, 37, 36, 42, 44, 39, 33, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if num_digits <= 0:\n        raise Exception(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be within the range [0, {length}].\".format(length=length))\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 42, 34, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 0 or not isinstance(num_digits, int):\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 44, 40, 41, 43, 42, 37, 38, 36, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 44, 34, 36, 43, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if num_digits > length or num_digits < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if not isinstance(length, int):\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007448196411132812, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if num_digits >= length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 41, 35, 40, 44, 39, 43, 38, 34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0 or num_digits < 0 or num_digits > length:\n        raise ValueError('Length must be a positive integer.')\n    if num_digits < 0:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0007498264312744141, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\"\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.00080108642578125, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [36, 44, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0004968643188476562, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 40, 36, 34, 41, 43, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)  # Shuffle letters and digits\n    if num_digits <= 0:\n        raise ValueError(\"length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(f\"Number of digits must be within range(0, length), inclusive.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(LETTERS[random.randint(0, 51)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 40, 42, 36], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005271434783935547, "tests_passed": true, "error": null}}
{"selected_lines": [33, 39, 37, 40, 42, 36, 38, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choices(LETTERS + DIGITS, k=length))\n    for _ in range(length):\n        password.append(LETTERS[random.randint(0, len(LETTERS) - 1)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 41, 33, 38, 42, 40, 37, 36, 34, 39, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(321)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and \"\n    password = ''\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 42, 43, 33, 34, 44, 38, 37, 35, 40, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if num_digits >= length:\n        raise ValueError(\"The length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\n    password = ''.join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 40, 44, 41, 37, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS)\n    if length < 1:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to the total length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(LETTERS[random.randint(0, len(LETTERS) - 1)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 35, 40, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"The length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\n    password = ''\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 43, 34, 35, 44, 33, 39, 40, 42, 36], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 1 or not isinstance(length, int):\n        raise ValueError(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and less than or equal to the total \"\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 33, 34, 39, 44, 35, 42, 43, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if num_digits >= length:\n        raise ValueError('Length must be a positive integer')\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be between 0 and password length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 43, 35, 44, 39, 41, 37, 42, 36], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if not isinstance(length, int):\n        raise Exception('Invalid input length')\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and \"\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 43, 44, 34, 38, 39, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and not greater than length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 44, 39, 33, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length <= 0:\n        raise ValueError(\"length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.000576019287109375, "tests_passed": true, "error": null}}
{"selected_lines": [43, 36, 37, 35, 34, 44, 33, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()  # Ensure the same random number generation\n    if length < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0:\n        raise ValueError(\"Number of digits must be a non-negative integer \"\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 44, 39, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(15122022)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 41, 39, 44, 38, 33, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 43, 44, 34, 36, 37, 40, 35, 33, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if num_digits > length or num_digits < 0:\n        raise ValueError(\"length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and less than or equal to the length of the password.\")\n    password = \"\".join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 38, 42, 43, 41, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005640983581542969, "tests_passed": true, "error": null}}
{"selected_lines": [41, 35, 36, 39, 44, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 33, 37, 42, 36, 40, 44, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0:\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to length.\")\n    password = \"\".join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 35, 34, 37, 38, 33, 42, 43, 40], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 1:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"The number of digits must be a non-negative integer and less than or equal to the total length.\")\n    password = ''.join(random.choices(LETTERS, k=length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0008409023284912109, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 36, 35, 33, 43, 44, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0005872249603271484, "tests_passed": true, "error": null}}
{"selected_lines": [34, 40, 35, 43, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits < 0:\n        raise ValueError('Length must be a positive integer')\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.choices(LETTERS, k=length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 40, 35, 42, 36, 43, 34, 38, 44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits < 0 or num_digits > length:\n        raise ValueError('Length must be a positive integer.')\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 41, 34, 35, 43, 42, 36], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 39, 33, 36, 42, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005288124084472656, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 33, 38, 37, 44, 36, 41, 34, 43, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if not isinstance(length, int) or length < 1:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be between 0 and length.\")\n    password = \"\".join(random.choice(LETTERS) for i in range(length - num_digits))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007507801055908203, "tests_passed": true, "error": null}}
{"selected_lines": [43, 33, 34, 39, 35, 41, 36, 42, 44, 37, 40], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 0:\n        raise Exception(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be between 0 and the length of the password.\")\n    password = []\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 40, 33, 41, 35, 43, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)  # Shuffle letters and digits\n    if num_digits > length or num_digits < 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be between 0 and the length of the password.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length of password must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007028579711914062, "tests_passed": true, "error": null}}
{"selected_lines": [43, 34, 42, 36, 40, 38, 35, 39, 44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 0:\n        raise ValueError(\"Invalid input: length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = list(random.choices(LETTERS + DIGITS, k=length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005433559417724609, "tests_passed": true, "error": null}}
{"selected_lines": [42, 33, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be a non-negative integer and not greater than length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005099773406982422, "tests_passed": true, "error": null}}
{"selected_lines": [39, 36, 34, 43, 42, 38, 35, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if not isinstance(length, int) or length < 1:\n        raise Exception('Invalid input length')\n    if num_digits < 0:\n        raise ValueError(\n    password = ''.join(random.choices(LETTERS, k=length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 38, 34, 41, 44, 33, 36, 40], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length < 0 or num_digits < 0 or num_digits > length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 41, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError('Length must be a positive integer.')\n    if not (0 <= num_digits <= length):\n        raise ValueError(\n    password = []\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 42, 37, 38, 43, 34, 33, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length < 0:\n        raise ValueError(\"Invalid input. Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be between 0 and the length of the password.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40, 38, 35, 43, 34, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length < 0:\n        raise ValueError('Length must be a positive integer.')\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\"\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 33, 44, 36, 34, 40], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if num_digits < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 40, 44, 33, 34, 35, 42, 36, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if num_digits < 0 or num_digits > length:\n        raise Exception(\"Password length must be a positive integer.\")\n    if num_digits < 0:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 44, 40, 37, 41, 35, 34, 33, 43, 36], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 1 or not isinstance(length, int):\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be between 0 and the length of the password.\")\n    password = ''.join(random.choice(LETTERS) for i in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(LETTERS[random.randint(0, 51)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 42, 41, 37, 34, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 1:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be non-negative and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0005440711975097656, "tests_passed": true, "error": null}}
{"selected_lines": [44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0007498264312744141, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()  # Ensure the same random number generation\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0010712146759033203, "tests_passed": true, "error": null}}
{"selected_lines": [43, 40, 34, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005638599395751953, "tests_passed": true, "error": null}}
{"selected_lines": [38, 35, 33, 37, 40, 42, 39, 36, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\n    password = ''.join(random.choices(LETTERS, k=length-num_digits))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 44, 41, 39, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer \"\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 37, 39, 42, 43, 41, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be within the range [0, {length}].\".format(length=length))\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise Exception(\"Password length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0008409023284912109, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 36, 44, 41, 38, 42, 43, 34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and not greater than length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 41, 36, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits >= length:\n        raise ValueError(\"length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005321502685546875, "tests_passed": true, "error": null}}
{"selected_lines": [40, 42, 37, 33, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS)\n    if length <= 0:\n        raise ValueError(\"Length of password must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be non-negative and less than or equal to the length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 34, 43, 39, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0 or num_digits < 0 or num_digits > length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007507801055908203, "tests_passed": true, "error": null}}
{"selected_lines": [34, 41, 37, 38, 36, 43, 33, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be between 0 and the length of the password.\")\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be a non-negative integer \"\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": false, "time": 0.0001239776611328125, "tests_passed": false, "error": "SyntaxError"}}
{"selected_lines": [38, 44, 36, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(f\"Number of digits must be within range(0, length), inclusive.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0009169578552246094, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 37, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be non-negative and less than or equal to the length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005230903625488281, "tests_passed": true, "error": null}}
{"selected_lines": [36, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005848407745361328, "tests_passed": true, "error": null}}
{"selected_lines": [37, 34, 36, 38, 42, 41, 40, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to the total length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length):\n        password.append(LETTERS[random.randint(0, len(LETTERS) - 1)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 37, 42, 39, 44, 35, 34, 38, 36, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 1:\n        raise ValueError(\"The length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num digits must be between 0 and total length of password.\")\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 39, 43, 40, 37, 41, 33, 38, 35, 36, 44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 0:\n        raise ValueError(\"length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to length.\")\n    password = \"\".join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 34, 37, 44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 1 or not isinstance(length, int):\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be between 0 and password length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005002021789550781, "tests_passed": true, "error": null}}
{"selected_lines": [41, 44, 33, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 36, 33, 43, 34, 42, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(321)\n    if num_digits > length or num_digits < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length of the password must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007410049438476562, "tests_passed": true, "error": null}}
{"selected_lines": [36, 41, 44, 37, 39, 38, 40, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"length must be a positive integer\")\n    if num_digits < 0:\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 42, 41, 36, 43, 44, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0005927085876464844, "tests_passed": true, "error": null}}
{"selected_lines": [34, 41, 36, 37, 40, 44, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 1:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to the total length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005040168762207031, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 36, 34, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.00046706199645996094, "tests_passed": true, "error": null}}
{"selected_lines": [44, 33, 34, 43, 39, 38, 35, 41, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if num_digits > length or num_digits < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 40, 41, 44, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(321)\n    if num_digits > length or num_digits < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(LETTERS[random.randint(0, 51)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0005087852478027344, "tests_passed": true, "error": null}}
{"selected_lines": [35, 39, 40, 42, 36], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005271434783935547, "tests_passed": true, "error": null}}
{"selected_lines": [33, 39, 37, 40, 42, 36, 38, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choices(LETTERS + DIGITS, k=length))\n    for _ in range(length):\n        password.append(LETTERS[random.randint(0, len(LETTERS) - 1)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 41, 33, 38, 42, 40, 37, 36, 34, 39, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(321)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and \"\n    password = ''\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 42, 43, 33, 34, 44, 38, 37, 35, 40, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if num_digits >= length:\n        raise ValueError(\"The length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\n    password = ''.join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 40, 44, 41, 37, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS)\n    if length < 1:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to the total length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(LETTERS[random.randint(0, len(LETTERS) - 1)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 35, 40, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"The length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\n    password = ''\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 43, 34, 35, 44, 33, 39, 40, 42, 36], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 1 or not isinstance(length, int):\n        raise ValueError(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and less than or equal to the total \"\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 33, 34, 39, 44, 35, 42, 43, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if num_digits >= length:\n        raise ValueError('Length must be a positive integer')\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be between 0 and password length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 43, 35, 44, 39, 41, 37, 42, 36], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if not isinstance(length, int):\n        raise Exception('Invalid input length')\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and \"\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 43, 44, 34, 38, 39, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and not greater than length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 44, 39, 33, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length <= 0:\n        raise ValueError(\"length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.000576019287109375, "tests_passed": true, "error": null}}
{"selected_lines": [43, 36, 37, 35, 34, 44, 33, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()  # Ensure the same random number generation\n    if length < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0:\n        raise ValueError(\"Number of digits must be a non-negative integer \"\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 44, 39, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(15122022)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 41, 39, 44, 38, 33, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 43, 44, 34, 36, 37, 40, 35, 33, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if num_digits > length or num_digits < 0:\n        raise ValueError(\"length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and less than or equal to the length of the password.\")\n    password = \"\".join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 38, 42, 43, 41, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005640983581542969, "tests_passed": true, "error": null}}
{"selected_lines": [41, 35, 36, 39, 44, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 33, 37, 42, 36, 40, 44, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0:\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to length.\")\n    password = \"\".join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 35, 34, 37, 38, 33, 42, 43, 40], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 1:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"The number of digits must be a non-negative integer and less than or equal to the total length.\")\n    password = ''.join(random.choices(LETTERS, k=length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0008409023284912109, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 36, 35, 33, 43, 44, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0005872249603271484, "tests_passed": true, "error": null}}
{"selected_lines": [34, 40, 35, 43, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits < 0:\n        raise ValueError('Length must be a positive integer')\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.choices(LETTERS, k=length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 40, 35, 42, 36, 43, 34, 38, 44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits < 0 or num_digits > length:\n        raise ValueError('Length must be a positive integer.')\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 41, 34, 35, 43, 42, 36], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 39, 33, 36, 42, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005288124084472656, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 33, 38, 37, 44, 36, 41, 34, 43, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if not isinstance(length, int) or length < 1:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be between 0 and length.\")\n    password = \"\".join(random.choice(LETTERS) for i in range(length - num_digits))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007507801055908203, "tests_passed": true, "error": null}}
{"selected_lines": [43, 33, 34, 39, 35, 41, 36, 42, 44, 37, 40], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 0:\n        raise Exception(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be between 0 and the length of the password.\")\n    password = []\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 40, 33, 41, 35, 43, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)  # Shuffle letters and digits\n    if num_digits > length or num_digits < 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be between 0 and the length of the password.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length of password must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007028579711914062, "tests_passed": true, "error": null}}
{"selected_lines": [43, 34, 42, 36, 40, 38, 35, 39, 44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 0:\n        raise ValueError(\"Invalid input: length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = list(random.choices(LETTERS + DIGITS, k=length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005433559417724609, "tests_passed": true, "error": null}}
{"selected_lines": [42, 33, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be a non-negative integer and not greater than length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005099773406982422, "tests_passed": true, "error": null}}
{"selected_lines": [39, 36, 34, 43, 42, 38, 35, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if not isinstance(length, int) or length < 1:\n        raise Exception('Invalid input length')\n    if num_digits < 0:\n        raise ValueError(\n    password = ''.join(random.choices(LETTERS, k=length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 38, 34, 41, 44, 33, 36, 40], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length < 0 or num_digits < 0 or num_digits > length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 41, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError('Length must be a positive integer.')\n    if not (0 <= num_digits <= length):\n        raise ValueError(\n    password = []\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 42, 37, 38, 43, 34, 33, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length < 0:\n        raise ValueError(\"Invalid input. Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be between 0 and the length of the password.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40, 38, 35, 43, 34, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length < 0:\n        raise ValueError('Length must be a positive integer.')\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\"\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 33, 44, 36, 34, 40], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if num_digits < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 40, 44, 33, 34, 35, 42, 36, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if num_digits < 0 or num_digits > length:\n        raise Exception(\"Password length must be a positive integer.\")\n    if num_digits < 0:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 44, 40, 37, 41, 35, 34, 33, 43, 36], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 1 or not isinstance(length, int):\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be between 0 and the length of the password.\")\n    password = ''.join(random.choice(LETTERS) for i in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(LETTERS[random.randint(0, 51)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 42, 41, 37, 34, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 1:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be non-negative and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0005440711975097656, "tests_passed": true, "error": null}}
{"selected_lines": [44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0007498264312744141, "tests_passed": true, "error": null}}
{"selected_lines": [33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()  # Ensure the same random number generation\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0010712146759033203, "tests_passed": true, "error": null}}
{"selected_lines": [43, 40, 34, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005638599395751953, "tests_passed": true, "error": null}}
{"selected_lines": [38, 35, 33, 37, 40, 42, 39, 36, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\n    password = ''.join(random.choices(LETTERS, k=length-num_digits))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 36, 44, 41, 39, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer \"\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 44, 37, 39, 42, 43, 41, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be within the range [0, {length}].\".format(length=length))\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 36, 44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise Exception(\"Password length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0008409023284912109, "tests_passed": true, "error": null}}
{"selected_lines": [37, 33, 36, 44, 41, 38, 42, 43, 34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and not greater than length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 41, 36, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits >= length:\n        raise ValueError(\"length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005321502685546875, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length of the password must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be a non-negative integer and less than or equal to the length of the password.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005021095275878906, "tests_passed": true, "error": null}}
{"selected_lines": [36, 43, 41, 39, 44, 40, 37, 35, 33, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise Exception(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be between 0 and the length of the password.\")\n    password = []\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 38, 43, 37, 33, 42, 36, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(3)  # Seed for reproducibility\n    if length < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 42, 36, 34, 33, 44, 41, 35, 40, 43, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if num_digits > length or num_digits < 0:\n        raise Exception('Invalid input length')\n    if num_digits < 0:\n        raise ValueError(\n    password = \"\".join([random.choice(LETTERS + DIGITS) for _ in range(length)])\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 43, 34, 35, 36, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits >= length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0005052089691162109, "tests_passed": true, "error": null}}
{"selected_lines": [36, 43, 38, 33, 44, 39, 41, 35, 40, 34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 40, 35, 37, 42, 34, 38, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits >= length or length < 0 or num_digits < 0:\n        raise ValueError(\"length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be non-negative and less than or equal to the total length of the password.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 35, 41, 40, 34, 39, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length < 1:\n        raise ValueError(\"Invalid length: length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005130767822265625, "tests_passed": true, "error": null}}
{"selected_lines": [42, 34, 39, 44, 40, 37, 35, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 38, 34, 37, 39, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits > length or num_digits < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to the total length.\")\n    password = \"\".join(random.choice(LETTERS) for i in range(length - num_digits))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 41, 34, 37, 36, 42, 44, 39, 33, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if num_digits <= 0:\n        raise Exception(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be within the range [0, {length}].\".format(length=length))\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 36, 42, 34, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 0 or not isinstance(num_digits, int):\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 44, 40, 41, 43, 42, 37, 38, 36, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 41, 44, 34, 36, 43, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if num_digits > length or num_digits < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if not isinstance(length, int):\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007448196411132812, "tests_passed": true, "error": null}}
{"selected_lines": [33, 38, 34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if num_digits >= length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 41, 35, 40, 44, 39, 43, 38, 34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0 or num_digits < 0 or num_digits > length:\n        raise ValueError('Length must be a positive integer.')\n    if num_digits < 0:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0007498264312744141, "tests_passed": true, "error": null}}
{"selected_lines": [38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\"\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.00080108642578125, "tests_passed": false, "error": "AttributeError"}}
{"selected_lines": [36, 44, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0004968643188476562, "tests_passed": true, "error": null}}
{"selected_lines": [35, 37, 40, 36, 34, 41, 43, 33], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)  # Shuffle letters and digits\n    if num_digits <= 0:\n        raise ValueError(\"length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(f\"Number of digits must be within range(0, length), inclusive.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(LETTERS[random.randint(0, 51)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 39, 40, 42, 36], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005271434783935547, "tests_passed": true, "error": null}}
{"selected_lines": [33, 39, 37, 40, 42, 36, 38, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choices(LETTERS + DIGITS, k=length))\n    for _ in range(length):\n        password.append(LETTERS[random.randint(0, len(LETTERS) - 1)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 41, 33, 38, 42, 40, 37, 36, 34, 39, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(321)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and \"\n    password = ''\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 42, 43, 33, 34, 44, 38, 37, 35, 40, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if num_digits >= length:\n        raise ValueError(\"The length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\n    password = ''.join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34, 33, 40, 44, 41, 37, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS)\n    if length < 1:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to the total length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(LETTERS[random.randint(0, len(LETTERS) - 1)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 37, 35, 40, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"The length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\n    password = ''\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 43, 34, 35, 44, 33, 39, 40, 42, 36], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 1 or not isinstance(length, int):\n        raise ValueError(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and less than or equal to the total \"\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 37, 33, 34, 39, 44, 35, 42, 43, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if num_digits >= length:\n        raise ValueError('Length must be a positive integer')\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be between 0 and password length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 34, 43, 35, 44, 39, 41, 37, 42, 36], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if not isinstance(length, int):\n        raise Exception('Invalid input length')\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and \"\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 43, 44, 34, 38, 39, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and not greater than length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35, 44, 39, 33, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length <= 0:\n        raise ValueError(\"length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.000576019287109375, "tests_passed": true, "error": null}}
{"selected_lines": [43, 36, 37, 35, 34, 44, 33, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()  # Ensure the same random number generation\n    if length < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0:\n        raise ValueError(\"Number of digits must be a non-negative integer \"\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [36, 33, 44, 39, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(15122022)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 41, 39, 44, 38, 33, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 38, 43, 44, 34, 36, 37, 40, 35, 33, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if num_digits > length or num_digits < 0:\n        raise ValueError(\"length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be a non-negative integer and less than or equal to the length of the password.\")\n    password = \"\".join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 34, 38, 42, 43, 41, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005640983581542969, "tests_passed": true, "error": null}}
{"selected_lines": [41, 35, 36, 39, 44, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 33, 37, 42, 36, 40, 44, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0:\n        raise ValueError(\"Num_digits must be a non-negative integer less than or equal to length.\")\n    password = \"\".join(random.choice(LETTERS + DIGITS) for _ in range(length))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 35, 34, 37, 38, 33, 42, 43, 40], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 1:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"The number of digits must be a non-negative integer and less than or equal to the total length.\")\n    password = ''.join(random.choices(LETTERS, k=length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0008409023284912109, "tests_passed": true, "error": null}}
{"selected_lines": [40, 39, 36, 35, 33, 43, 44, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0005872249603271484, "tests_passed": true, "error": null}}
{"selected_lines": [34, 40, 35, 43, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits < 0:\n        raise ValueError('Length must be a positive integer')\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.choices(LETTERS, k=length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 41, 40, 35, 42, 36, 43, 34, 38, 44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if num_digits < 0 or num_digits > length:\n        raise ValueError('Length must be a positive integer.')\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = ''.join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 41, 34, 35, 43, 42, 36], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 40, 39, 33, 36, 42, 43], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005288124084472656, "tests_passed": true, "error": null}}
{"selected_lines": [39, 40, 33, 38, 37, 44, 36, 41, 34, 43, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if not isinstance(length, int) or length < 1:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be between 0 and length.\")\n    password = \"\".join(random.choice(LETTERS) for i in range(length - num_digits))\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [34], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007507801055908203, "tests_passed": true, "error": null}}
{"selected_lines": [43, 33, 34, 39, 35, 41, 36, 42, 44, 37, 40], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 0:\n        raise Exception(\"Length must be a positive integer\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be between 0 and the length of the password.\")\n    password = []\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [37, 34, 40, 33, 41, 35, 43, 42], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)  # Shuffle letters and digits\n    if num_digits > length or num_digits < 0:\n        raise ValueError(\"Length must be a positive integer\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be between 0 and the length of the password.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError(\"Length of password must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0007028579711914062, "tests_passed": true, "error": null}}
{"selected_lines": [43, 34, 42, 36, 40, 38, 35, 39, 44], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 0:\n        raise ValueError(\"Invalid input: length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = list(random.choices(LETTERS + DIGITS, k=length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005433559417724609, "tests_passed": true, "error": null}}
{"selected_lines": [42, 33, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length <= 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be a non-negative integer and not greater than length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0005099773406982422, "tests_passed": true, "error": null}}
{"selected_lines": [39, 36, 34, 43, 42, 38, 35, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if not isinstance(length, int) or length < 1:\n        raise Exception('Invalid input length')\n    if num_digits < 0:\n        raise ValueError(\n    password = ''.join(random.choices(LETTERS, k=length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 38, 34, 41, 44, 33, 36, 40], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if length < 0 or num_digits < 0 or num_digits > length:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [39, 35, 41, 37], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length <= 0:\n        raise ValueError('Length must be a positive integer.')\n    if not (0 <= num_digits <= length):\n        raise ValueError(\n    password = []\n    for _ in range(num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [40, 39, 42, 37, 38, 43, 34, 33, 35], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length < 0:\n        raise ValueError(\"Invalid input. Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be between 0 and the length of the password.\")\n    password = \"\".join(random.sample(LETTERS + DIGITS, length))\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [33, 40, 38, 35, 43, 34, 41], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(1)\n    if length < 0:\n        raise ValueError('Length must be a positive integer.')\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\"\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [41, 33, 44, 36, 34, 40], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if num_digits < 0:\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = []\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [43, 40, 44, 33, 34, 35, 42, 36, 38], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed()\n    if num_digits < 0 or num_digits > length:\n        raise Exception(\"Password length must be a positive integer.\")\n    if num_digits < 0:\n        raise ValueError(\"num_digits must be a non-negative integer and less than or equal to length.\")\n    password = \"\".join(random.choice(LETTERS) for _ in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [38, 44, 40, 37, 41, 35, 34, 33, 43, 36], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.shuffle(LETTERS + DIGITS)\n    if length < 1 or not isinstance(length, int):\n        raise ValueError(\"Length must be a positive integer.\")\n    if num_digits < 0 or num_digits > length:\n        raise ValueError(\"Number of digits must be between 0 and the length of the password.\")\n    password = ''.join(random.choice(LETTERS) for i in range(length - num_digits))\n    for _ in range(length - num_digits):\n        password.append(LETTERS[random.randint(0, 51)])\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return ''.join(password)", "compilation_passed": true, "time": 0.0, "tests_passed": false, "error": null}}
{"selected_lines": [44, 42, 41, 37, 34, 39], "result": {"code": "import random\nimport string\n\n# Constants\nLETTERS = string.ascii_letters\nDIGITS = string.digits\n\ndef task_func(length, num_digits):\n    \"\"\"\n    Generate a random password with a specified length and number of digits.\n\n    The function creates a random password consisting of letters and digits. The total length of the password\n    and the number of digits in it are specified by the user. The characters in the password are randomly\n    shuffled to ensure variability.\n\n    Parameters:\n    - length (int): The total length of the password. Must be a positive integer.\n    - num_digits (int): The number of digits to be included in the password. Must be a non-negative integer and\n                      less than or equal to the total length of the password.\n\n    Returns:\n    - str: A string representing the randomly generated password.\n\n    Requirements:\n    - random\n    - string\n\n    Examples:\n    >>> task_func(10, 3)\n    'Vpbr812Ooh'\n    >>> task_func(5, 2)\n    '4Ob3h'\n    \"\"\"\n    random.seed(42)\n    if length < 1:\n        raise ValueError(\"Length must be a positive integer.\")\n    if not (0 <= num_digits <= length):\n        raise ValueError(\"Number of digits must be non-negative and less than or equal to length.\")\n    password = []\n    for _ in range(length):\n        password.append(random.choice(LETTERS))\n    for _ in range(num_digits):\n        password.append(random.choice(DIGITS))\n    random.shuffle(password)\n    return \"\".join(password)", "compilation_passed": true, "time": 0.0005440711975097656, "tests_passed": true, "error": null}}
